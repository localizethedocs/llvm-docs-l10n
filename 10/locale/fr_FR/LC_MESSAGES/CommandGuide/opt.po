# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr_FR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../CommandGuide/opt.rst:2
msgid "opt - LLVM optimizer"
msgstr ""

#: ../../../CommandGuide/opt.rst:7
msgid "SYNOPSIS"
msgstr ""

#: ../../../CommandGuide/opt.rst:9
msgid ":program:`opt` [*options*] [*filename*]"
msgstr ""

#: ../../../CommandGuide/opt.rst:12
msgid "DESCRIPTION"
msgstr ""

#: ../../../CommandGuide/opt.rst:14
msgid ""
"The :program:`opt` command is the modular LLVM optimizer and analyzer.  It "
"takes LLVM source files as input, runs the specified optimizations or "
"analyses on it, and then outputs the optimized file or the analysis "
"results.  The function of :program:`opt` depends on whether the `-analyze` "
"option is given."
msgstr ""

#: ../../../CommandGuide/opt.rst:20
msgid ""
"When `-analyze` is specified, :program:`opt` performs various analyses of "
"the input source.  It will usually print the results on standard output, but "
"in a few cases, it will print output to standard error or generate a file "
"with the analysis output, which is usually done when the output is meant for "
"another program."
msgstr ""

#: ../../../CommandGuide/opt.rst:26
msgid ""
"While `-analyze` is *not* given, :program:`opt` attempts to produce an "
"optimized output file.  The optimizations available via :program:`opt` "
"depend upon what libraries were linked into it as well as any additional "
"libraries that have been loaded with the :option:`-load` option.  Use the :"
"option:`-help` option to determine what optimizations you can use."
msgstr ""

#: ../../../CommandGuide/opt.rst:32
msgid ""
"If ``filename`` is omitted from the command line or is \"``-``\", :program:"
"`opt` reads its input from standard input.  Inputs can be in either the LLVM "
"assembly language format (``.ll``) or the LLVM bitcode format (``.bc``)."
msgstr ""

#: ../../../CommandGuide/opt.rst:36
msgid ""
"If an output filename is not specified with the :option:`-o` option, :"
"program:`opt` writes its output to the standard output."
msgstr ""

#: ../../../CommandGuide/opt.rst:40
msgid "OPTIONS"
msgstr ""

#: ../../../CommandGuide/opt.rst:44
msgid ""
"Enable binary output on terminals.  Normally, :program:`opt` will refuse to "
"write raw bitcode output if the output stream is a terminal.  With this "
"option, :program:`opt` will write raw bitcode regardless of the output "
"device."
msgstr ""

#: ../../../CommandGuide/opt.rst:50
msgid "Print a summary of command line options."
msgstr ""

#: ../../../CommandGuide/opt.rst:54
msgid "Specify the output filename."
msgstr ""

#: ../../../CommandGuide/opt.rst:58
msgid "Write output in LLVM intermediate language (instead of bitcode)."
msgstr ""

#: ../../../CommandGuide/opt.rst:62
msgid ""
":program:`opt` provides the ability to run any of LLVM's optimization or "
"analysis passes in any order.  The :option:`-help` option lists all the "
"passes available.  The order in which the options occur on the command line "
"are the order in which they are executed (within pass constraints)."
msgstr ""

#: ../../../CommandGuide/opt.rst:69
msgid "This option simply removes the inlining pass from the standard list."
msgstr ""

#: ../../../CommandGuide/opt.rst:73
msgid ""
"This option is only meaningful when `-std-link-opts` is given.  It disables "
"most passes."
msgstr ""

#: ../../../CommandGuide/opt.rst:78
msgid ""
"This option causes opt to strip debug information from the module before "
"applying other optimizations.  It is essentially the same as `-strip` but it "
"ensures that stripping of debug information is done first."
msgstr ""

#: ../../../CommandGuide/opt.rst:84
msgid ""
"This option causes opt to add a verify pass after every pass otherwise "
"specified on the command line (including `-verify`).  This is useful for "
"cases where it is suspected that a pass is creating an invalid module but it "
"is not clear which pass is doing it."
msgstr ""

#: ../../../CommandGuide/opt.rst:91
msgid "Print statistics."
msgstr ""

#: ../../../CommandGuide/opt.rst:95
msgid ""
"Record the amount of time needed for each pass and print it to standard "
"error."
msgstr ""

#: ../../../CommandGuide/opt.rst:100
msgid ""
"If this is a debug build, this option will enable debug printouts from "
"passes which use the ``LLVM_DEBUG()`` macro.  See the `LLVM Programmer's "
"Manual <../ProgrammersManual.html>`_, section ``#DEBUG`` for more "
"information."
msgstr ""

#: ../../../CommandGuide/opt.rst:106
msgid ""
"Load the dynamic object ``plugin``.  This object should register new "
"optimization or analysis passes.  Once loaded, the object will add new "
"command line options to enable various optimizations or analyses.  To see "
"the new complete list of optimizations, use the :option:`-help` and :option:"
"`-load` options together.  For example:"
msgstr ""

#: ../../../CommandGuide/opt.rst:118
msgid "Print module after each transformation."
msgstr ""

#: ../../../CommandGuide/opt.rst:121
msgid "EXIT STATUS"
msgstr ""

#: ../../../CommandGuide/opt.rst:123
msgid ""
"If :program:`opt` succeeds, it will exit with 0.  Otherwise, if an error "
"occurs, it will exit with a non-zero value."
msgstr ""
