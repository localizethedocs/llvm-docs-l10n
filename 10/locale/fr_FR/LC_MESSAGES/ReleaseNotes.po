# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr_FR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../ReleaseNotes.rst:3
msgid "LLVM 10.0.0 Release Notes"
msgstr ""

#: ../../../ReleaseNotes.rst:9
msgid "Introduction"
msgstr ""

#: ../../../ReleaseNotes.rst:11
msgid ""
"This document contains the release notes for the LLVM Compiler "
"Infrastructure, release 10.0.0.  Here we describe the status of LLVM, "
"including major improvements from the previous release, improvements in "
"various subprojects of LLVM, and some of the current users of the code.  All "
"LLVM releases may be downloaded from the `LLVM releases web site <https://"
"llvm.org/releases/>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:17
msgid ""
"For more information about LLVM, including information about the latest "
"release, please check out the `main LLVM web site <https://llvm.org/>`_.  If "
"you have questions or comments, the `LLVM Developer's Mailing List <https://"
"lists.llvm.org/mailman/listinfo/llvm-dev>`_ is a good place to send them."
msgstr ""

#: ../../../ReleaseNotes.rst:24
msgid "Non-comprehensive list of changes in this release"
msgstr ""

#: ../../../ReleaseNotes.rst:26
msgid ""
"The ISD::FP_ROUND_INREG opcode and related code was removed from "
"SelectionDAG."
msgstr ""

#: ../../../ReleaseNotes.rst:28
msgid ""
"Enabled MemorySSA as a loop dependency. Since `r370957 <https://reviews.llvm."
"org/rL370957>`_ (`D58311 <https://reviews.llvm.org/D58311>`_ ``[MemorySSA & "
"LoopPassManager] Enable MemorySSA as loop dependency. Update tests.``), the "
"MemorySSA analysis is being preserved and used by a series of loop passes. "
"The most significant use is in LICM, where the instruction hoisting and "
"sinking relies on aliasing information provided by MemorySSA vs previously "
"creating an AliasSetTracker. The LICM step of promoting variables to scalars "
"still relies on the creation of an AliasSetTracker, but its use is reduced "
"to only be enabled for loops with a small number of overall memory "
"instructions. This choice was motivated by experimental results showing "
"compile and run time benefits or replacing the AliasSetTracker usage with "
"MemorySSA without any performance penalties. The fact that MemorySSA is now "
"preserved by and available in a series of loop passes, also opens up "
"opportunities for its use in those respective passes."
msgstr ""

#: ../../../ReleaseNotes.rst:43
msgid ""
"The BasicBlockPass, BBPassManager and all their uses were deleted in `this "
"revision <https://reviews.llvm.org/"
"rG9f0ff0b2634bab6a5be8dace005c9eb24d386dd1>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:46
msgid ""
"The LLVM_BUILD_LLVM_DYLIB and LLVM_LINK_LLVM_DYLIB CMake options are no "
"longer available on Windows."
msgstr ""

#: ../../../ReleaseNotes.rst:49
msgid ""
"As per :ref:`LLVM Language Reference Manual <i_getelementptr>`, "
"``getelementptr inbounds`` can not change the null status of a pointer, "
"meaning it can not produce non-null pointer given null base pointer, and "
"likewise given non-null base pointer it can not produce null pointer; if it "
"does, the result is a :ref:`poison value <poisonvalues>`. Since `r369789 "
"<https://reviews.llvm.org/rL369789>`_ (`D66608 <https://reviews.llvm.org/"
"D66608>`_ ``[InstCombine] icmp eq/ne (gep inbounds P, Idx..), null -> icmp "
"eq/ne P, null``) LLVM uses that for transformations. If the original source "
"violates these requirements this may result in code being miscompiled. If "
"you are using Clang front-end, Undefined Behaviour Sanitizer ``-"
"fsanitize=pointer-overflow`` check will now catch such cases."
msgstr ""

#: ../../../ReleaseNotes.rst:62
msgid ""
"Windows Control Flow Guard: the ``-cfguard`` option now emits CFG checks on "
"indirect function calls. The previous behavior is still available with the "
"``-cfguard-nochecks`` option. Note that this feature should always be used "
"with optimizations enabled."
msgstr ""

#: ../../../ReleaseNotes.rst:67
msgid ""
"``Callbacks`` have been added to ``CommandLine Options``.  These can be used "
"to validate or selectively enable other options."
msgstr ""

#: ../../../ReleaseNotes.rst:70
msgid ""
"The function attributes ``no-frame-pointer-elim`` and ``no-frame-pointer-"
"elim-non-leaf`` have been replaced by ``frame-pointer``, which has 3 values: "
"``none``, ``non-leaf``, and ``all``. The values mean what functions should "
"retain frame pointers."
msgstr ""

#: ../../../ReleaseNotes.rst:75
msgid ""
"The inter-procedural analysis and optimization capabilities in the "
"Attributor framework and pass have been substantially advanced (initial "
"commit `D59918 <https://reviews.llvm.org/D59918>`_, `LLVM-Dev talk <https://"
"youtu.be/CzWkc_JcfS0>`_). In this release, 19 different attributes are "
"inferred, including 12 LLVM IR attributes and 7 \"abstract\" attributes, "
"such as liveness. The Attributor is still under heavy development and "
"disabled by default; to enable an early run pass ``-mllvm -attributor-"
"disable=false`` to an invocation of clang."
msgstr ""

#: ../../../ReleaseNotes.rst:83
msgid ""
"New matrix math intrinsics have been added to LLVM (see :ref:`LLVM Language "
"Reference Manual <i_matrixintrinsics>`), together with the "
"LowerMatrixIntrinsics pass. The pass lowers matrix intrinsics to a set of "
"efficient vector instructions. The lowering pass is off by default and can "
"be enabled by passing ``-mllvm -enable-matrix`` to an invocation of clang."
msgstr ""

#: ../../../ReleaseNotes.rst:92
msgid "Changes to the LLVM IR"
msgstr ""

#: ../../../ReleaseNotes.rst:94
msgid ""
"Unnamed function arguments now get printed with their automatically "
"generated name (e.g. \"i32 %0\") in definitions. This may require front-ends "
"to update their tests; if so there is a script utils/add_argument_names.py "
"that correctly converted 80-90% of Clang tests. Some manual work will almost "
"certainly still be needed."
msgstr ""

#: ../../../ReleaseNotes.rst:100
msgid ""
"A new ``freeze`` instruction is added. The ``freeze`` instruction is used to "
"stop IR-level propagation of undef and poison values. Currently its support "
"is preliminary; a freeze-equivalent operation for SelDag/MIR needs to be "
"added."
msgstr ""

#: ../../../ReleaseNotes.rst:107
msgid "Changes to the AArch64 Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:109
msgid ""
"Added support for Cortex-A65, Cortex-A65AE, Neoverse E1 and Neoverse N1 "
"cores."
msgstr ""

#: ../../../ReleaseNotes.rst:111
msgid ""
"With a few more bugs fixed in the LLVM 10 release, clang-cl can now target "
"Windows-on-ARM well, demonstrated by building complex pieces of software "
"such as Chromium and the Electron framework."
msgstr ""

#: ../../../ReleaseNotes.rst:115
msgid "Support for ``-fpatchable-function-entry`` was added."
msgstr ""

#: ../../../ReleaseNotes.rst:118
msgid "Changes to the ARM Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:120
msgid ""
"Optimized ARMv8.1-M code generation, including generating Low Overhead Loops."
msgstr ""

#: ../../../ReleaseNotes.rst:122
msgid "Added auto-vectorization for the ARMv8.1-M MVE vector extension."
msgstr ""

#: ../../../ReleaseNotes.rst:124
msgid "Support was added for inline asm constraints s,j,x,N,O."
msgstr ""

#: ../../../ReleaseNotes.rst:128
msgid "Changes to the MIPS Target"
msgstr ""

#: ../../../ReleaseNotes.rst:130
msgid ""
"Improved support for ``octeon`` and added support for ``octeon+`` MIPS-"
"family CPU."
msgstr ""

#: ../../../ReleaseNotes.rst:133
msgid ""
"``min``, ``max``, ``umin``, ``umax`` atomics now supported on MIPS targets."
msgstr ""

#: ../../../ReleaseNotes.rst:135
msgid ""
"Now PC-relative relocations are generated for ``.eh_frame`` sections when "
"possible. That allows to link MIPS binaries without having to pass the ``-"
"Wl,-z,notext`` option."
msgstr ""

#: ../../../ReleaseNotes.rst:139
msgid ""
"Fix evaluating J-format branch (``j``, ``jal``, ...) targets when the "
"instruction is not in the first 256 MB region."
msgstr ""

#: ../../../ReleaseNotes.rst:142
msgid ""
"Fixed ``jal``, ``sc``, ``scs``, ``ll``, ``lld``, ``la``, ``lw``, ``sw`` "
"instructions expanding. Now they accept more types of expression as "
"arguments, correctly handle load/store for ``XGOT`` model, expand using less "
"instructions or registers."
msgstr ""

#: ../../../ReleaseNotes.rst:147
msgid "Initial MIPS support has been added to ``llvm-exegesis``."
msgstr ""

#: ../../../ReleaseNotes.rst:149
msgid "Generates ``_mcount`` calls using proper MIPS ABI."
msgstr ""

#: ../../../ReleaseNotes.rst:151
msgid ""
"Improved support of GlobalISel instruction selection framework. This feature "
"is still in experimental state for MIPS targets though."
msgstr ""

#: ../../../ReleaseNotes.rst:155
msgid "Changes to the PowerPC Target"
msgstr ""

#: ../../../ReleaseNotes.rst:157
msgid "Optimization:"
msgstr ""

#: ../../../ReleaseNotes.rst:159
msgid ""
"Improved register pressure estimates in the loop vectorizer based on type"
msgstr ""

#: ../../../ReleaseNotes.rst:161
msgid "Improved the PowerPC cost model for the vectorizer"
msgstr ""

#: ../../../ReleaseNotes.rst:163
msgid ""
"Enabled vectorization of math routines on PowerPC using MASSV (Mathematical "
"Acceleration SubSystem) library"
msgstr ""

#: ../../../ReleaseNotes.rst:165
msgid "compiler-rt:"
msgstr ""

#: ../../../ReleaseNotes.rst:167
msgid ""
"Added/improved conversion functions from IBM long double to 128-bit integers"
msgstr ""

#: ../../../ReleaseNotes.rst:169
msgid "Codegen:"
msgstr ""

#: ../../../ReleaseNotes.rst:171
msgid ""
"Optimized memory access instructions in loops (pertaining to update-form "
"instructions and address computation)"
msgstr ""

#: ../../../ReleaseNotes.rst:173
msgid ""
"Added options to disable hoisting instructions to hotter blocks based on "
"statically or profile-based block hotness estimates"
msgstr ""

#: ../../../ReleaseNotes.rst:175
msgid ""
"Code generation improvements (particularly with floating point and vector "
"code as well as handling condition registers)"
msgstr ""

#: ../../../ReleaseNotes.rst:177
msgid "Various infrastructural improvements, code refactoring, and bug fixes"
msgstr ""

#: ../../../ReleaseNotes.rst:179
msgid ""
"Optimized handling of control flow based on multiple comparison of same "
"values"
msgstr ""

#: ../../../ReleaseNotes.rst:181
msgid "Tools:"
msgstr ""

#: ../../../ReleaseNotes.rst:183
msgid ""
"llvm-readobj supports displaying file header, section headers, symbol table "
"and relocation entries for XCOFF object files"
msgstr ""

#: ../../../ReleaseNotes.rst:185
msgid ""
"llvm-objdump supports disassembling physical sections for XCOFF object files"
msgstr ""

#: ../../../ReleaseNotes.rst:189
msgid "Changes to the SystemZ Target"
msgstr ""

#: ../../../ReleaseNotes.rst:191
msgid ""
"Added support for the ``-march=z15`` and ``-mtune=z15`` command line options "
"(as aliases to the existing ``-march=arch13`` and ``-mtune=arch13`` options)."
msgstr ""

#: ../../../ReleaseNotes.rst:194
msgid "Added support for the ``-march=native`` command line option."
msgstr ""

#: ../../../ReleaseNotes.rst:196
msgid ""
"Added support for the ``-mfentry``, ``-mnop-mcount``, and ``-mrecord-"
"mcount`` command line options."
msgstr ""

#: ../../../ReleaseNotes.rst:199
msgid "Added support for the GHC calling convention."
msgstr ""

#: ../../../ReleaseNotes.rst:201
msgid ""
"Miscellaneous codegen enhancements, in particular to enable better reuse of "
"condition code values and improved use of conditional move instructions."
msgstr ""

#: ../../../ReleaseNotes.rst:206
msgid "Changes to the X86 Target"
msgstr ""

#: ../../../ReleaseNotes.rst:208
msgid ""
"Less-than-128-bit vector types, v2i32, v4i16, v2i16, v8i8, v4i8, and v2i8, "
"are now stored in the lower bits of an xmm register and the upper bits are "
"undefined. Previously the elements were spread apart with undefined bits in "
"between them."
msgstr ""

#: ../../../ReleaseNotes.rst:213
msgid ""
"v32i8 and v64i8 vectors with AVX512F enabled, but AVX512BW disabled will now "
"be passed in ZMM registers for calls and returns. Previously they were "
"passed in two YMM registers. Old behavior can be enabled by passing ``-x86-"
"enable-old-knl-abi``."
msgstr ""

#: ../../../ReleaseNotes.rst:218
msgid ""
"``-mprefer-vector-width=256`` is now the default behavior skylake-avx512 and "
"later Intel CPUs. This tries to limit the use of 512-bit registers which can "
"cause a decrease in CPU frequency on these CPUs. This can be re-enabled by "
"passing ``-mprefer-vector-width=512`` to clang or passing ``-mattr=-"
"prefer-256-bit`` to llc."
msgstr ""

#: ../../../ReleaseNotes.rst:224
msgid ""
"Deprecated the mpx feature flag for the Intel MPX instructions. There were "
"no intrinsics for this feature. This change only this effects the results "
"returned by getHostCPUFeatures on CPUs that implement the MPX instructions."
msgstr ""

#: ../../../ReleaseNotes.rst:228
msgid ""
"The feature flag fast-partial-ymm-or-zmm-write which previously disabled "
"vzeroupper insertion has been removed. It has been replaced with a "
"vzeroupper feature flag which has the opposite polarity. So -vzeroupper has "
"the same effect as +fast-partial-ymm-or-zmm-write."
msgstr ""

#: ../../../ReleaseNotes.rst:235
msgid "Changes to the WebAssembly Target"
msgstr ""

#: ../../../ReleaseNotes.rst:237
msgid ""
"``__attribute__((used))`` no longer implies that a symbol is exported, for "
"consistency with other targets."
msgstr ""

#: ../../../ReleaseNotes.rst:240
msgid ""
"Multivalue function signatures are now supported in WebAssembly object files"
msgstr ""

#: ../../../ReleaseNotes.rst:242
msgid "The new ``atomic.fence`` instruction is now supported"
msgstr ""

#: ../../../ReleaseNotes.rst:244
msgid "Thread-Local Storage (TLS) is now supported."
msgstr ""

#: ../../../ReleaseNotes.rst:246
msgid "SIMD support is significantly expanded."
msgstr ""

#: ../../../ReleaseNotes.rst:249
msgid "Changes to the Windows Target"
msgstr ""

#: ../../../ReleaseNotes.rst:251
msgid "Fixed section relative relocations in .debug_frame in DWARF debug info"
msgstr ""

#: ../../../ReleaseNotes.rst:254
msgid "Changes to the RISC-V Target"
msgstr ""

#: ../../../ReleaseNotes.rst:256
msgid "New Features:"
msgstr ""

#: ../../../ReleaseNotes.rst:258
msgid "The Machine Outliner is now supported, but not enabled by default."
msgstr ""

#: ../../../ReleaseNotes.rst:260
msgid "Shrink-wrapping is now supported."
msgstr ""

#: ../../../ReleaseNotes.rst:262
msgid ""
"The Machine Scheduler has been enabled and scheduler descriptions for the "
"Rocket micro-architecture have been added, covering both 32- and 64-bit "
"Rocket cores."
msgstr ""

#: ../../../ReleaseNotes.rst:266
msgid ""
"This release lays the groundwork for enabling LTO in a future LLVM release. "
"In particular, LLVM now uses a new ``target-abi`` module metadata item to "
"represent the chosen RISC-V psABI variant. Frontends should add this module "
"flag to prevent ABI lowering problems when LTO is enabled in a future LLVM "
"release."
msgstr ""

#: ../../../ReleaseNotes.rst:272
msgid "Support has been added for assembling RVC HINT instructions."
msgstr ""

#: ../../../ReleaseNotes.rst:274
msgid "Added code lowering for half-precision floats."
msgstr ""

#: ../../../ReleaseNotes.rst:276
msgid ""
"The ``fscsr`` and ``frcsr`` (``fssr``, ``frsr``) obsolete aliases have been "
"added to the assembler for use in legacy code."
msgstr ""

#: ../../../ReleaseNotes.rst:279
msgid ""
"The stack can now be realigned even when there are variable-sized objects in "
"the same frame."
msgstr ""

#: ../../../ReleaseNotes.rst:282
msgid ""
"fastcc is now supported. This is a more efficient, unstandardised, calling "
"convention for calls to private leaf functions in the same IR module."
msgstr ""

#: ../../../ReleaseNotes.rst:285
msgid ""
"llvm-objdump now supports ``-M no-aliases`` and ``-M numeric`` for altering "
"the dumped assembly. These match the behaviour of GNU objdump, respectively "
"disabling instruction aliases and printing the numeric register names rather "
"than the ABI register names."
msgstr ""

#: ../../../ReleaseNotes.rst:290
msgid "Improvements:"
msgstr ""

#: ../../../ReleaseNotes.rst:292
msgid "Trap and Debugtrap now lower to RISC-V-specific trap instructions."
msgstr ""

#: ../../../ReleaseNotes.rst:294
msgid ""
"LLVM IR Inline assembly now supports using ABI register names and using "
"floating point registers in constraints."
msgstr ""

#: ../../../ReleaseNotes.rst:297
msgid ""
"Stack Pointer adjustments have been changed to better match RISC-V's "
"immediates."
msgstr ""

#: ../../../ReleaseNotes.rst:299
msgid "``ra`` (``x1``) can now be used as a callee-saved register."
msgstr ""

#: ../../../ReleaseNotes.rst:301
msgid ""
"The assembler now suggests spelling corrections for unknown assembly "
"mnemonics."
msgstr ""

#: ../../../ReleaseNotes.rst:304
msgid "Stack offsets of greater than 32-bits are now accepted on RV64."
msgstr ""

#: ../../../ReleaseNotes.rst:306
msgid ""
"Variadic functions can now be tail-call optimised, as long as they do not "
"use stack memory for passing arguments."
msgstr ""

#: ../../../ReleaseNotes.rst:309
msgid ""
"Code generation has been changed for 32-bit arithmetic operations on RV64 to "
"reduce sign-extensions."
msgstr ""

#: ../../../ReleaseNotes.rst:312
msgid "Bug Fixes:"
msgstr ""

#: ../../../ReleaseNotes.rst:314
msgid ""
"There was an issue with register preservation after calls in interrupt "
"handlers, where some registers were marked as preserved even though they "
"were not being preserved by the call. This has been corrected, and now only "
"callee-saved registers are live over a function call in an interrupt handler "
"(just like calls in regular functions)."
msgstr ""

#: ../../../ReleaseNotes.rst:320
msgid ""
"Atomic instructions now only accept GPRs (plus an offset) in memory operands."
msgstr ""

#: ../../../ReleaseNotes.rst:322
msgid "Fixed some issues with evaluation of relocations and fixups."
msgstr ""

#: ../../../ReleaseNotes.rst:324
msgid ""
"The error messages around missing RISC-V extensions in the assembler have "
"been improved."
msgstr ""

#: ../../../ReleaseNotes.rst:327
msgid "The error messages around unsupported relocations have been improved."
msgstr ""

#: ../../../ReleaseNotes.rst:329
msgid "Non-PIC code no longer forces Local Exec TLS."
msgstr ""

#: ../../../ReleaseNotes.rst:331
msgid ""
"There have been some small changes to the code generation for atomic "
"operations."
msgstr ""

#: ../../../ReleaseNotes.rst:334
msgid ""
"RISC-V no longer emits incorrect CFI directives in function prologues and "
"epilogues."
msgstr ""

#: ../../../ReleaseNotes.rst:337
msgid ""
"RV64 no longer clears the upper bits when returning complex types from "
"libcalls using the LP64 psABI."
msgstr ""

#: ../../../ReleaseNotes.rst:340
msgid "Compiler-RT:"
msgstr ""

#: ../../../ReleaseNotes.rst:342
msgid ""
"RISC-V (both 64-bit and 32-bit) is now supported by compiler-rt, allowing "
"crtbegin and crtend to be built."
msgstr ""

#: ../../../ReleaseNotes.rst:345
msgid "The Sanitizers now support 64-bit RISC-V on Linux."
msgstr ""

#: ../../../ReleaseNotes.rst:350
msgid "Changes to the C API"
msgstr ""

#: ../../../ReleaseNotes.rst:351
msgid ""
"C DebugInfo API ``LLVMDIBuilderCreateTypedef`` is updated to include an "
"extra argument ``AlignInBits``, to facilitate / propagate specified "
"Alignment information present in a ``typedef`` to Debug information in LLVM "
"IR."
msgstr ""

#: ../../../ReleaseNotes.rst:357
msgid "Changes to the Go bindings"
msgstr ""

#: ../../../ReleaseNotes.rst:358
msgid ""
"Go DebugInfo API ``CreateTypedef`` is updated to include an extra argument "
"``AlignInBits``, to facilitate / propagate specified Alignment information "
"present in a ``typedef`` to Debug information in LLVM IR."
msgstr ""

#: ../../../ReleaseNotes.rst:365
msgid "Changes to LLDB"
msgstr ""

#: ../../../ReleaseNotes.rst:367
msgid "Improved support for building with MinGW"
msgstr ""

#: ../../../ReleaseNotes.rst:369
msgid "Initial support for debugging Windows ARM and ARM64 binaries"
msgstr ""

#: ../../../ReleaseNotes.rst:371
msgid "Improved error messages in the expression evaluator."
msgstr ""

#: ../../../ReleaseNotes.rst:373
msgid ""
"Tab completions for command options now also provide a description for each "
"option."
msgstr ""

#: ../../../ReleaseNotes.rst:375
msgid ""
"Fixed that printing structs/classes with the ``expression`` command "
"sometimes did not print the members/contents of the class."
msgstr ""

#: ../../../ReleaseNotes.rst:378
msgid ""
"Improved support for using classes with bit-field members in the expression "
"evaluator."
msgstr ""

#: ../../../ReleaseNotes.rst:380
msgid "Greatly improved support for DWARF v5."
msgstr ""

#: ../../../ReleaseNotes.rst:383
msgid "External Open Source Projects Using LLVM 10"
msgstr ""

#: ../../../ReleaseNotes.rst:386
msgid "Zig Programming Language"
msgstr ""

#: ../../../ReleaseNotes.rst:388
msgid ""
"`Zig <https://ziglang.org>`_  is a system programming language intended to "
"be an alternative to C. It provides high level features such as generics, "
"compile time function execution, and partial evaluation, while exposing low "
"level LLVM IR features such as aliases and intrinsics. Zig uses Clang to "
"provide automatic import of .h symbols, including inline functions and "
"simple macros. Zig uses LLD combined with lazily building compiler-rt to "
"provide out-of-the-box cross-compiling for all supported targets."
msgstr ""

#: ../../../ReleaseNotes.rst:399
msgid "Additional Information"
msgstr ""

#: ../../../ReleaseNotes.rst:401
msgid ""
"A wide variety of additional information is available on the `LLVM web page "
"<https://llvm.org/>`_, in particular in the `documentation <https://llvm.org/"
"docs/>`_ section.  The web page also contains versions of the API "
"documentation which is up-to-date with the Subversion version of the source "
"code.  You can access versions of these documents specific to this release "
"by going into the ``llvm/docs/`` directory in the LLVM tree."
msgstr ""

#: ../../../ReleaseNotes.rst:408
msgid ""
"If you have any questions or comments about LLVM, please feel free to "
"contact us via the `mailing lists <https://llvm.org/docs/#mailing-lists>`_."
msgstr ""
