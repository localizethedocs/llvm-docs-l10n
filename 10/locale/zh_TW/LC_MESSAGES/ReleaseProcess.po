# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../ReleaseProcess.rst:3
msgid "How To Validate a New Release"
msgstr ""

#: ../../../ReleaseProcess.rst:10
msgid "Introduction"
msgstr ""

#: ../../../ReleaseProcess.rst:12
msgid ""
"This document contains information about testing the release candidates that "
"will ultimately be the next LLVM release. For more information on how to "
"manage the actual release, please refer to :doc:`HowToReleaseLLVM`."
msgstr ""

#: ../../../ReleaseProcess.rst:17
msgid "Overview of the Release Process"
msgstr ""

#: ../../../ReleaseProcess.rst:19
msgid ""
"Once the release process starts, the Release Manager will ask for "
"volunteers, and it'll be the role of each volunteer to:"
msgstr ""

#: ../../../ReleaseProcess.rst:22
msgid "Test and benchmark the previous release"
msgstr ""

#: ../../../ReleaseProcess.rst:24
msgid ""
"Test and benchmark each release candidate, comparing to the previous release "
"and candidates"
msgstr ""

#: ../../../ReleaseProcess.rst:27
msgid ""
"Identify, reduce and report every regression found during tests and "
"benchmarks"
msgstr ""

#: ../../../ReleaseProcess.rst:29
msgid ""
"Make sure the critical bugs get fixed and merged to the next release "
"candidate"
msgstr ""

#: ../../../ReleaseProcess.rst:31
msgid ""
"Not all bugs or regressions are show-stoppers and it's a bit of a grey area "
"what should be fixed before the next candidate and what can wait until the "
"next release."
msgstr ""

#: ../../../ReleaseProcess.rst:35
msgid "It'll depend on:"
msgstr ""

#: ../../../ReleaseProcess.rst:37
msgid ""
"The severity of the bug, how many people it affects and if it's a regression "
"or a known bug. Known bugs are \"unsupported features\" and some bugs can be "
"disabled if they have been implemented recently."
msgstr ""

#: ../../../ReleaseProcess.rst:41
msgid ""
"The stage in the release. Less critical bugs should be considered to be "
"fixed between RC1 and RC2, but not so much at the end of it."
msgstr ""

#: ../../../ReleaseProcess.rst:44
msgid ""
"If it's a correctness or a performance regression. Performance regression "
"tends to be taken more lightly than correctness."
msgstr ""

#: ../../../ReleaseProcess.rst:50
msgid "Scripts"
msgstr ""

#: ../../../ReleaseProcess.rst:52
msgid "The scripts are in the ``utils/release`` directory."
msgstr ""

#: ../../../ReleaseProcess.rst:55
msgid "test-release.sh"
msgstr ""

#: ../../../ReleaseProcess.rst:57
msgid ""
"This script will check-out, configure and compile LLVM+Clang (+ most add-"
"ons, like ``compiler-rt``, ``libcxx``, ``libomp`` and ``clang-extra-tools``) "
"in three stages, and will test the final stage. It'll have installed the "
"final binaries on the Phase3/Releasei(+Asserts) directory, and that's the "
"one you should use for the test-suite and other external tests."
msgstr ""

#: ../../../ReleaseProcess.rst:64
msgid "To run the script on a specific release candidate run::"
msgstr ""

#: ../../../ReleaseProcess.rst:73
msgid ""
"Each system will require different options. For instance, x86_64 will "
"obviously not need ``-no-64bit`` while 32-bit systems will, or the script "
"will fail."
msgstr ""

#: ../../../ReleaseProcess.rst:77
msgid "The important flags to get right are:"
msgstr ""

#: ../../../ReleaseProcess.rst:79
msgid ""
"On the pre-release, you should change ``-rc 1`` to ``-final``. On RC2, "
"change it to ``-rc 2`` and so on."
msgstr ""

#: ../../../ReleaseProcess.rst:82
msgid ""
"On non-release testing, you can use ``-final`` in conjunction with ``-no-"
"checkout``, but you'll have to create the ``final`` directory by hand and "
"link the correct source dir to ``final/llvm.src``."
msgstr ""

#: ../../../ReleaseProcess.rst:86
msgid ""
"For release candidates, you need ``-test-asserts``, or it won't create a "
"\"Release+Asserts\" directory, which is needed for release testing and "
"benchmarking. This will take twice as long."
msgstr ""

#: ../../../ReleaseProcess.rst:90
msgid ""
"On the final candidate you just need Release builds, and that's the binary "
"directory you'll have to pack."
msgstr ""

#: ../../../ReleaseProcess.rst:93
msgid ""
"On macOS, you must export ``MACOSX_DEPLOYMENT_TARGET=10.9`` before running "
"the script."
msgstr ""

#: ../../../ReleaseProcess.rst:96
msgid ""
"This script builds three phases of Clang+LLVM twice each (Release and "
"Release+Asserts), so use screen or nohup to avoid headaches, since it'll "
"take a long time."
msgstr ""

#: ../../../ReleaseProcess.rst:100
msgid ""
"Use the ``--help`` option to see all the options and chose it according to "
"your needs."
msgstr ""

#: ../../../ReleaseProcess.rst:105
msgid "findRegressions-nightly.py"
msgstr ""

#: ../../../ReleaseProcess.rst:107
msgid "TODO"
msgstr ""

#: ../../../ReleaseProcess.rst:112
msgid "Test Suite"
msgstr ""

#: ../../../ReleaseProcess.rst:117
msgid ""
"Follow the `LNT Quick Start Guide <http://llvm.org/docs/lnt/quickstart."
"html>`__ link on how to set-up the test-suite"
msgstr ""

#: ../../../ReleaseProcess.rst:121
msgid ""
"The binary location you'll have to use for testing is inside the ``rcN/"
"Phase3/Release+Asserts/llvmCore-REL-RC.install``. Link that directory to an "
"easier location and run the test-suite."
msgstr ""

#: ../../../ReleaseProcess.rst:125
msgid ""
"An example on the run command line, assuming you created a link from the "
"correct install directory to ``~/devel/llvm/install``::"
msgstr ""

#: ../../../ReleaseProcess.rst:136
msgid ""
"It should have no new regressions, compared to the previous release or "
"release candidate. You don't need to fix all the bugs in the test-suite, "
"since they're not necessarily meant to pass on all architectures all the "
"time. This is due to the nature of the result checking, which relies on "
"direct comparison, and most of the time, the failures are related to bad "
"output checking, rather than bad code generation."
msgstr ""

#: ../../../ReleaseProcess.rst:143
msgid ""
"If the errors are in LLVM itself, please report every single regression "
"found as blocker, and all the other bugs as important, but not necessarily "
"blocking the release to proceed. They can be set as \"known failures\" and "
"to be fix on a future date."
msgstr ""

#: ../../../ReleaseProcess.rst:151
msgid "Pre-Release Process"
msgstr ""

#: ../../../ReleaseProcess.rst:156
msgid ""
"When the release process is announced on the mailing list, you should "
"prepare for the testing, by applying the same testing you'll do on the "
"release candidates, on the previous release."
msgstr ""

#: ../../../ReleaseProcess.rst:160 ../../../ReleaseProcess.rst:190
msgid "You should:"
msgstr ""

#: ../../../ReleaseProcess.rst:162
msgid ""
"Download the previous release sources from http://llvm.org/releases/download."
"html."
msgstr ""

#: ../../../ReleaseProcess.rst:165
msgid ""
"Run the test-release.sh script on ``final`` mode (change ``-rc 1`` to ``-"
"final``)."
msgstr ""

#: ../../../ReleaseProcess.rst:168
msgid "Once all three stages are done, it'll test the final stage."
msgstr ""

#: ../../../ReleaseProcess.rst:170
msgid ""
"Using the ``Phase3/Release+Asserts/llvmCore-MAJ.MIN-final.install`` base, "
"run the test-suite."
msgstr ""

#: ../../../ReleaseProcess.rst:173
msgid ""
"If the final phase's ``make check-all`` failed, it's a good idea to also "
"test the intermediate stages by going on the obj directory and running "
"``make check-all`` to find if there's at least one stage that passes (helps "
"when reducing the error for bug report purposes)."
msgstr ""

#: ../../../ReleaseProcess.rst:181
msgid "Release Process"
msgstr ""

#: ../../../ReleaseProcess.rst:186
msgid ""
"When the Release Manager sends you the release candidate, download all "
"sources, unzip on the same directory (there will be sym-links from the "
"appropriate places to them), and run the release test as above."
msgstr ""

#: ../../../ReleaseProcess.rst:192
msgid ""
"Download the current candidate sources from where the release manager points "
"you (ex. http://llvm.org/pre-releases/3.3/rc1/)."
msgstr ""

#: ../../../ReleaseProcess.rst:195
msgid ""
"Repeat the steps above with ``-rc 1``, ``-rc 2`` etc modes and run the test-"
"suite the same way."
msgstr ""

#: ../../../ReleaseProcess.rst:198
msgid ""
"Compare the results, report all errors on Bugzilla and publish the binary "
"blob where the release manager can grab it."
msgstr ""

#: ../../../ReleaseProcess.rst:201
msgid ""
"Once the release manages announces that the latest candidate is the good "
"one, you have to pack the ``Release`` (no Asserts) install directory on "
"``Phase3`` and that will be the official binary."
msgstr ""

#: ../../../ReleaseProcess.rst:205
msgid "Rename (or link) ``clang+llvm-REL-ARCH-ENV`` to the .install directory"
msgstr ""

#: ../../../ReleaseProcess.rst:207
msgid ""
"Tar that into the same name with ``.tar.gz`` extensioan from outside the "
"directory"
msgstr ""

#: ../../../ReleaseProcess.rst:210
msgid "Make it available for the release manager to download"
msgstr ""

#: ../../../ReleaseProcess.rst:215
msgid "Bug Reporting Process"
msgstr ""

#: ../../../ReleaseProcess.rst:220
msgid ""
"If you found regressions or failures when comparing a release candidate with "
"the previous release, follow the rules below:"
msgstr ""

#: ../../../ReleaseProcess.rst:223
msgid ""
"Critical bugs on compilation should be fixed as soon as possible, possibly "
"before releasing the binary blobs."
msgstr ""

#: ../../../ReleaseProcess.rst:226
msgid ""
"Check-all tests should be fixed before the next release candidate, but can "
"wait until the test-suite run is finished."
msgstr ""

#: ../../../ReleaseProcess.rst:229
msgid ""
"Bugs in the test suite or unimportant check-all tests can be fixed in "
"between release candidates."
msgstr ""

#: ../../../ReleaseProcess.rst:232
msgid ""
"New features or recent big changes, when close to the release, should have "
"done in a way that it's easy to disable. If they misbehave, prefer disabling "
"them than releasing an unstable (but untested) binary package."
msgstr ""
