# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../LLVMBuild.rst:3
msgid "LLVMBuild Guide"
msgstr ""

#: ../../../LLVMBuild.rst:9
msgid "Introduction"
msgstr ""

#: ../../../LLVMBuild.rst:11
msgid ""
"This document describes the ``LLVMBuild`` organization and files which we "
"use to describe parts of the LLVM ecosystem. For description of specific "
"LLVMBuild related tools, please see the command guide."
msgstr ""

#: ../../../LLVMBuild.rst:15
msgid ""
"LLVM is designed to be a modular set of libraries which can be flexibly "
"mixed together in order to build a variety of tools, like compilers, JITs, "
"custom code generators, optimization passes, interpreters, and so on. "
"Related projects in the LLVM system like Clang and LLDB also tend to follow "
"this philosophy."
msgstr ""

#: ../../../LLVMBuild.rst:21
msgid ""
"In order to support this usage style, LLVM has a fairly strict structure as "
"to how the source code and various components are organized. The ``LLVMBuild."
"txt`` files are the explicit specification of that structure, and are used "
"by the build systems and other tools in order to develop the LLVM project."
msgstr ""

#: ../../../LLVMBuild.rst:28
msgid "Project Organization"
msgstr ""

#: ../../../LLVMBuild.rst:30
msgid ""
"The source code for LLVM projects using the LLVMBuild system (LLVM, Clang, "
"and LLDB) is organized into *components*, which define the separate pieces "
"of functionality that make up the project. These projects may consist of "
"many libraries, associated tools, build tools, or other utility tools (for "
"example, testing tools)."
msgstr ""

#: ../../../LLVMBuild.rst:36
msgid ""
"For the most part, the project contents are organized around defining one "
"main component per each subdirectory. Each such directory contains an "
"``LLVMBuild.txt`` which contains the component definitions."
msgstr ""

#: ../../../LLVMBuild.rst:40
msgid ""
"The component descriptions for the project as a whole are automatically "
"gathered by the LLVMBuild tools. The tools automatically traverse the source "
"directory structure to find all of the component description files. NOTE: "
"For performance/sanity reasons, we only traverse into subdirectories when "
"the parent itself contains an ``LLVMBuild.txt`` description file."
msgstr ""

#: ../../../LLVMBuild.rst:48
msgid "Build Integration"
msgstr ""

#: ../../../LLVMBuild.rst:50
msgid ""
"The LLVMBuild files themselves are just a declarative way to describe the "
"project structure. The actual building of the LLVM project is handled by "
"another build system (See: :doc:`CMake <CMake>`)."
msgstr ""

#: ../../../LLVMBuild.rst:54
msgid ""
"The build system implementation will load the relevant contents of the "
"LLVMBuild files and use that to drive the actual project build. Typically, "
"the build system will only need to load this information at \"configure\" "
"time, and use it to generate native information. Build systems will also "
"handle automatically reconfiguring their information when the contents of "
"the ``LLVMBuild.txt`` files change."
msgstr ""

#: ../../../LLVMBuild.rst:61
msgid ""
"Developers generally are not expected to need to be aware of the details of "
"how the LLVMBuild system is integrated into their build. Ideally, LLVM "
"developers who are not working on the build system would only ever need to "
"modify the contents of the ``LLVMBuild.txt`` description files (although we "
"have not reached this goal yet)."
msgstr ""

#: ../../../LLVMBuild.rst:67
msgid ""
"For more information on the utility tool we provide to help interfacing with "
"the build system, please see the :doc:`llvm-build <CommandGuide/llvm-build>` "
"documentation."
msgstr ""

#: ../../../LLVMBuild.rst:72
msgid "Component Overview"
msgstr ""

#: ../../../LLVMBuild.rst:74
msgid ""
"As mentioned earlier, LLVM projects are organized into logical *components*. "
"Every component is typically grouped into its own subdirectory. Generally, a "
"component is organized around a coherent group of sources which have some "
"kind of clear API separation from other parts of the code."
msgstr ""

#: ../../../LLVMBuild.rst:80
msgid "LLVM primarily uses the following types of components:"
msgstr ""

#: ../../../LLVMBuild.rst:82
msgid ""
"*Libraries* - Library components define a distinct API which can be "
"independently linked into LLVM client applications. Libraries typically have "
"private and public header files, and may specify a link of required "
"libraries that they build on top of."
msgstr ""

#: ../../../LLVMBuild.rst:86
msgid ""
"*Build Tools* - Build tools are applications which are designed to be run as "
"part of the build process (typically to generate other source files). "
"Currently, LLVM uses one main build tool called :doc:`TableGen/index` to "
"generate a variety of source files."
msgstr ""

#: ../../../LLVMBuild.rst:90
msgid ""
"*Tools* - Command line applications which are built using the LLVM component "
"libraries. Most LLVM tools are small and are primarily frontends to the "
"library interfaces."
msgstr ""

#: ../../../LLVMBuild.rst:94
msgid ""
"Components are described using ``LLVMBuild.txt`` files in the directories "
"that define the component. See the `LLVMBuild Format Reference`_ section for "
"information on the exact format of these files."
msgstr ""

#: ../../../LLVMBuild.rst:99
msgid "LLVMBuild Format Reference"
msgstr ""

#: ../../../LLVMBuild.rst:101
msgid ""
"LLVMBuild files are written in a simple variant of the INI or configuration "
"file format (`Wikipedia entry`_). The format defines a list of sections each "
"of which may contain some number of properties. A simple example of the file "
"format is below:"
msgstr ""

#: ../../../LLVMBuild.rst:124
msgid ""
"LLVMBuild files are expected to define a strict set of sections and "
"properties. A typical component description file for a library component "
"would look like the following example:"
msgstr ""

#: ../../../LLVMBuild.rst:136
msgid ""
"A full description of the exact sections and properties which are allowed "
"follows."
msgstr ""

#: ../../../LLVMBuild.rst:139
msgid ""
"Each file may define exactly one common component, named ``common``. The "
"common component may define the following properties:"
msgstr ""

#: ../../../LLVMBuild.rst:142
msgid "``subdirectories`` **[optional]**"
msgstr ""

#: ../../../LLVMBuild.rst:144
msgid ""
"If given, a list of the names of the subdirectories from the current subpath "
"to search for additional LLVMBuild files."
msgstr ""

#: ../../../LLVMBuild.rst:147
msgid ""
"Each file may define multiple components. Each component is described by a "
"section who name starts with ``component``. The remainder of the section "
"name is ignored, but each section name must be unique. Typically components "
"are just number in order for files with multiple components "
"(``component_0``, ``component_1``, and so on)."
msgstr ""

#: ../../../LLVMBuild.rst:155
msgid ""
"Section names not matching this format (or the ``common`` section) are "
"currently unused and are disallowed."
msgstr ""

#: ../../../LLVMBuild.rst:158
msgid ""
"Every component is defined by the properties in the section. The exact list "
"of properties that are allowed depends on the component type. Components "
"**may not** define any properties other than those expected by the component "
"type."
msgstr ""

#: ../../../LLVMBuild.rst:163
msgid "Every component must define the following properties:"
msgstr ""

#: ../../../LLVMBuild.rst:165
msgid "``type`` **[required]**"
msgstr ""

#: ../../../LLVMBuild.rst:167
msgid ""
"The type of the component. Supported component types are detailed below. "
"Most components will define additional properties which may be required or "
"optional."
msgstr ""

#: ../../../LLVMBuild.rst:171
msgid "``name`` **[required]**"
msgstr ""

#: ../../../LLVMBuild.rst:173
msgid ""
"The name of the component. Names are required to be unique across the entire "
"project."
msgstr ""

#: ../../../LLVMBuild.rst:176
msgid "``parent`` **[required]**"
msgstr ""

#: ../../../LLVMBuild.rst:178
msgid ""
"The name of the logical parent of the component. Components are organized "
"into a logical tree to make it easier to navigate and organize groups of "
"components. The parents have no semantics as far as the project build is "
"concerned, however. Typically, the parent will be the main component of the "
"parent directory."
msgstr ""

#: ../../../LLVMBuild.rst:184
msgid ""
"Components may reference the root pseudo component using ``$ROOT`` to "
"indicate they should logically be grouped at the top-level."
msgstr ""

#: ../../../LLVMBuild.rst:187
msgid "Components may define the following properties:"
msgstr ""

#: ../../../LLVMBuild.rst:189
msgid "``dependencies`` **[optional]**"
msgstr ""

#: ../../../LLVMBuild.rst:191
msgid ""
"If specified, a list of names of components which *must* be built prior to "
"this one. This should only be exactly those components which produce some "
"tool or source code required for building the component."
msgstr ""

#: ../../../LLVMBuild.rst:197
msgid ""
"``Group`` and ``LibraryGroup`` components have no semantics for the actual "
"build, and are not allowed to specify dependencies."
msgstr ""

#: ../../../LLVMBuild.rst:200
msgid ""
"The following section lists the available component types, as well as the "
"properties which are associated with that component."
msgstr ""

#: ../../../LLVMBuild.rst:203
msgid "``type = Group``"
msgstr ""

#: ../../../LLVMBuild.rst:205
msgid ""
"Group components exist purely to allow additional arbitrary structuring of "
"the logical components tree. For example, one might define a ``Libraries`` "
"group to hold all of the root library components."
msgstr ""

#: ../../../LLVMBuild.rst:209
msgid "``Group`` components have no additionally properties."
msgstr ""

#: ../../../LLVMBuild.rst:211
msgid "``type = Library``"
msgstr ""

#: ../../../LLVMBuild.rst:213
msgid ""
"Library components define an individual library which should be built from "
"the source code in the component directory."
msgstr ""

#: ../../../LLVMBuild.rst:216 ../../../LLVMBuild.rst:251
#: ../../../LLVMBuild.rst:293
msgid "Components with this type use the following properties:"
msgstr ""

#: ../../../LLVMBuild.rst:218
msgid "``library_name`` **[optional]**"
msgstr ""

#: ../../../LLVMBuild.rst:220
msgid ""
"If given, the name to use for the actual library file on disk. If not given, "
"the name is derived from the component name itself."
msgstr ""

#: ../../../LLVMBuild.rst:223 ../../../LLVMBuild.rst:253
#: ../../../LLVMBuild.rst:295
msgid "``required_libraries`` **[optional]**"
msgstr ""

#: ../../../LLVMBuild.rst:225
msgid ""
"If given, a list of the names of ``Library`` or ``LibraryGroup`` components "
"which must also be linked in whenever this library is used. That is, the "
"link time dependencies for this component. When tools are built, the build "
"system will include the transitive closure of all ``required_libraries`` for "
"the components the tool needs."
msgstr ""

#: ../../../LLVMBuild.rst:231 ../../../LLVMBuild.rst:257
msgid "``add_to_library_groups`` **[optional]**"
msgstr ""

#: ../../../LLVMBuild.rst:233
msgid ""
"If given, a list of the names of ``LibraryGroup`` components which this "
"component is also part of. This allows nesting groups of components.  For "
"example, the ``X86`` target might define a library group for all of the "
"``X86`` components. That library group might then be included in the ``all-"
"targets`` library group."
msgstr ""

#: ../../../LLVMBuild.rst:239
msgid "``installed`` **[optional]** **[boolean]**"
msgstr ""

#: ../../../LLVMBuild.rst:241
msgid ""
"Whether this library is installed. Libraries that are not installed are only "
"reported by ``llvm-config`` when it is run as part of a development "
"directory."
msgstr ""

#: ../../../LLVMBuild.rst:245
msgid "``type = LibraryGroup``"
msgstr ""

#: ../../../LLVMBuild.rst:247
msgid ""
"``LibraryGroup`` components are a mechanism to allow easy definition of "
"useful sets of related components. In particular, we use them to easily "
"specify things like \"all targets\", or \"all assembly printers\"."
msgstr ""

#: ../../../LLVMBuild.rst:255 ../../../LLVMBuild.rst:259
msgid "See the ``Library`` type for a description of this property."
msgstr ""

#: ../../../LLVMBuild.rst:261
msgid "``type = TargetGroup``"
msgstr ""

#: ../../../LLVMBuild.rst:263
msgid ""
"``TargetGroup`` components are an extension of ``LibraryGroup``\\s, "
"specifically for defining LLVM targets (which are handled specially in a few "
"places)."
msgstr ""

#: ../../../LLVMBuild.rst:267
msgid "The name of the component should always be the name of the target."
msgstr ""

#: ../../../LLVMBuild.rst:269
msgid ""
"Components with this type use the ``LibraryGroup`` properties in addition to:"
msgstr ""

#: ../../../LLVMBuild.rst:272
msgid "``has_asmparser`` **[optional]** **[boolean]**"
msgstr ""

#: ../../../LLVMBuild.rst:274
msgid "Whether this target defines an assembly parser."
msgstr ""

#: ../../../LLVMBuild.rst:276
msgid "``has_asmprinter`` **[optional]** **[boolean]**"
msgstr ""

#: ../../../LLVMBuild.rst:278
msgid "Whether this target defines an assembly printer."
msgstr ""

#: ../../../LLVMBuild.rst:280
msgid "``has_disassembler`` **[optional]** **[boolean]**"
msgstr ""

#: ../../../LLVMBuild.rst:282
msgid "Whether this target defines a disassembler."
msgstr ""

#: ../../../LLVMBuild.rst:284
msgid "``has_jit`` **[optional]** **[boolean]**"
msgstr ""

#: ../../../LLVMBuild.rst:286
msgid "Whether this target supports JIT compilation."
msgstr ""

#: ../../../LLVMBuild.rst:288
msgid "``type = Tool``"
msgstr ""

#: ../../../LLVMBuild.rst:290
msgid ""
"``Tool`` components define standalone command line tools which should be "
"built from the source code in the component directory and linked."
msgstr ""

#: ../../../LLVMBuild.rst:297
msgid ""
"If given, a list of the names of ``Library`` or ``LibraryGroup`` components "
"which this tool is required to be linked with."
msgstr ""

#: ../../../LLVMBuild.rst:302
msgid ""
"The values should be the component names, which may not always match up with "
"the actual library names on disk."
msgstr ""

#: ../../../LLVMBuild.rst:305
msgid ""
"Build systems are expected to properly include all of the libraries required "
"by the linked components (i.e., the transitive closure of "
"``required_libraries``)."
msgstr ""

#: ../../../LLVMBuild.rst:309
msgid ""
"Build systems are also expected to understand that those library components "
"must be built prior to linking -- they do not also need to be listed under "
"``dependencies``."
msgstr ""

#: ../../../LLVMBuild.rst:313
msgid "``type = BuildTool``"
msgstr ""

#: ../../../LLVMBuild.rst:315
msgid ""
"``BuildTool`` components are like ``Tool`` components, except that the tool "
"is supposed to be built for the platform where the build is running (instead "
"of that platform being targeted). Build systems are expected to handle the "
"fact that required libraries may need to be built for multiple platforms in "
"order to be able to link this tool."
msgstr ""

#: ../../../LLVMBuild.rst:321
msgid ""
"``BuildTool`` components currently use the exact same properties as ``Tool`` "
"components, the type distinction is only used to differentiate what the tool "
"is built for."
msgstr ""
