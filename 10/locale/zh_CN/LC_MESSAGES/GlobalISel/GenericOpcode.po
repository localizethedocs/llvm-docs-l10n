# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../GlobalISel/GenericOpcode.rst:5
msgid "Generic Opcodes"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:12
msgid ""
"This documentation does not yet fully account for vectors. Many of the "
"scalar/integer/floating-point operations can also take vectors."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:16
msgid "Constants"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:19
msgid "G_IMPLICIT_DEF"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:21
msgid "An undefined value."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:28
msgid "G_CONSTANT"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:30
msgid "An integer constant."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:37
msgid "G_FCONSTANT"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:39
msgid "A floating point constant."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:46
msgid "G_FRAME_INDEX"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:48
msgid "The address of an object in the stack frame."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:55
msgid "G_GLOBAL_VALUE"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:57
msgid "The address of a global value."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:64
msgid "G_BLOCK_ADDR"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:66
msgid "The address of a basic block."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:73
msgid "Integer Extension and Truncation"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:76
msgid "G_ANYEXT"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:78
msgid ""
"Extend the underlying scalar type of an operation, leaving the high bits "
"unspecified."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:86
msgid "G_SEXT"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:88
msgid ""
"Sign extend the underlying scalar type of an operation, copying the sign bit "
"into the newly-created space."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:96
msgid "G_SEXT_INREG"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:98
msgid ""
"Sign extend the value from an arbitrary bit position, copying the sign bit "
"into all bits above it. This is equivalent to a shl + ashr pair with an "
"appropriate shift amount. $sz is an immediate (MachineOperand::isImm() "
"returns true) to allow targets to have some bitwidths legal and others "
"lowered. This opcode is particularly useful if the target has sign-extension "
"instructions that are cheaper than the constituent shifts as the optimizer "
"is able to make decisions on whether it's better to hang on to the "
"G_SEXT_INREG or to lower it and optimize the individual shifts."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:112
msgid "G_ZEXT"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:114
msgid ""
"Zero extend the underlying scalar type of an operation, putting zero bits "
"into the newly-created space."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:122
msgid "G_TRUNC"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:124
msgid ""
"Truncate the underlying scalar type of an operation. This is equivalent to "
"G_EXTRACT for scalar types, but acts elementwise on vectors."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:132
msgid "Type Conversions"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:135
msgid "G_INTTOPTR"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:137
msgid "Convert an integer to a pointer."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:144
msgid "G_PTRTOINT"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:146
msgid "Convert a pointer to an integer."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:153
msgid "G_BITCAST"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:155
msgid ""
"Reinterpret a value as a new type. This is usually done without changing any "
"bits but this is not always the case due a sublety in the definition of the :"
"ref:`LLVM-IR Bitcast Instruction <i_bitcast>`."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:164
msgid "G_ADDRSPACE_CAST"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:166
msgid ""
"Convert a pointer to an address space to a pointer to another address space."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:174
msgid ""
":ref:`i_addrspacecast` doesn't mention what happens if the cast is simply "
"invalid (i.e. if the address spaces are disjoint)."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:178
msgid "Scalar Operations"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:181
msgid "G_EXTRACT"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:183
msgid ""
"Extract a register of the specified size, starting from the block given by "
"index. This will almost certainly be mapped to sub-register COPYs after "
"register banks have been selected."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:188
msgid "G_INSERT"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:190
msgid "Insert a smaller register into a larger one at the specified bit-index."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:193
msgid "G_MERGE_VALUES"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:195
msgid ""
"Concatenate multiple registers of the same size into a wider register. The "
"input operands are always ordered from lowest bits to highest:"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:204
msgid "G_UNMERGE_VALUES"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:206
msgid ""
"Extract multiple registers of the specified size, starting from blocks given "
"by indexes. This will almost certainly be mapped to sub-register COPYs after "
"register banks have been selected. The output operands are always ordered "
"from lowest bits to highest:"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:217
msgid "G_BSWAP"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:219
msgid "Reverse the order of the bytes in a scalar."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:226
msgid "G_BITREVERSE"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:228
msgid "Reverse the order of the bits in a scalar."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:235
msgid "Integer Operations"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:238
msgid "G_ADD, G_SUB, G_MUL, G_AND, G_OR, G_XOR, G_SDIV, G_UDIV, G_SREM, G_UREM"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:240
msgid "These each perform their respective integer arithmetic on a scalar."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:247
msgid "G_SHL, G_LSHR, G_ASHR"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:249
msgid ""
"Shift the bits of a scalar left or right inserting zeros (sign-bit for "
"G_ASHR)."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:252
msgid "G_ICMP"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:254
msgid ""
"Perform integer comparison producing non-zero (true) or zero (false). It's "
"target specific whether a true value is 1, ~0U, or some other non-zero value."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:258
msgid "G_SELECT"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:260
msgid "Select between two values depending on a zero/non-zero value."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:267
msgid "G_PTR_ADD"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:269
msgid ""
"Add a scalar offset in addressible units to a pointer. Addressible units are "
"typically bytes but this may vary between targets."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:278
msgid ""
"There are currently no in-tree targets that use this with addressable units "
"not equal to 8 bit."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:282
msgid "G_PTR_MASK"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:284
msgid "Zero the least significant N bits of a pointer."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:291
msgid "G_SMIN, G_SMAX, G_UMIN, G_UMAX"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:293
msgid "Take the minimum/maximum of two values."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:300
msgid "G_UADDO, G_SADDO, G_USUBO, G_SSUBO, G_SMULO, G_UMULO"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:302
msgid ""
"Perform the requested arithmetic and produce a carry output in addition to "
"the normal result."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:310
msgid "G_UADDE, G_SADDE, G_USUBE, G_SSUBE"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:312
msgid ""
"Perform the requested arithmetic and consume a carry input in addition to "
"the normal input. Also produce a carry output in addition to the normal "
"result."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:320
msgid "G_UMULH, G_SMULH"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:322
msgid ""
"Multiply two numbers at twice the incoming bit width (signed) and return the "
"high half of the result."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:330
msgid "G_CTLZ, G_CTTZ, G_CTPOP"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:332
msgid "Count leading zeros, trailing zeros, or number of set bits."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:341
msgid "G_CTLZ_ZERO_UNDEF, G_CTTZ_ZERO_UNDEF"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:343
msgid ""
"Count leading zeros or trailing zeros. If the value is zero then the result "
"is undefined."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:352
msgid "Floating Point Operations"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:355
msgid "G_FCMP"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:357
msgid ""
"Perform floating point comparison producing non-zero (true) or zero (false). "
"It's target specific whether a true value is 1, ~0U, or some other non-zero "
"value."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:362
msgid "G_FNEG"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:364
msgid "Floating point negation."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:367
msgid "G_FPEXT"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:369
msgid "Convert a floating point value to a larger type."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:372
msgid "G_FPTRUNC"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:374
msgid "Convert a floating point value to a narrower type."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:377
msgid "G_FPTOSI, G_FPTOUI, G_SITOFP, G_UITOFP"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:379
msgid "Convert between integer and floating point."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:382
msgid "G_FABS"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:384
msgid "Take the absolute value of a floating point value."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:387
msgid "G_FCOPYSIGN"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:389
msgid ""
"Copy the value of the first operand, replacing the sign bit with that of the "
"second operand."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:393
msgid "G_FCANONICALIZE"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:395
msgid "See :ref:`i_intr_llvm_canonicalize`."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:398
msgid "G_FMINNUM"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:400
msgid "Perform floating-point minimum on two values."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:402
#: ../../../GlobalISel/GenericOpcode.rst:412
msgid ""
"In the case where a single input is a NaN (either signaling or quiet), the "
"non-NaN input is returned."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:405
msgid "The return value of (FMINNUM 0.0, -0.0) could be either 0.0 or -0.0."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:408
msgid "G_FMAXNUM"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:410
msgid "Perform floating-point maximum on two values."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:415
msgid "The return value of (FMAXNUM 0.0, -0.0) could be either 0.0 or -0.0."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:418
msgid "G_FMINNUM_IEEE"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:420
msgid ""
"Perform floating-point minimum on two values, following the IEEE-754 2008 "
"definition. This differs from FMINNUM in the handling of signaling NaNs. If "
"one input is a signaling NaN, returns a quiet NaN."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:425
msgid "G_FMAXNUM_IEEE"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:427
msgid ""
"Perform floating-point maximum on two values, following the IEEE-754 2008 "
"definition. This differs from FMAXNUM in the handling of signaling NaNs. If "
"one input is a signaling NaN, returns a quiet NaN."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:432
msgid "G_FMINIMUM"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:434
msgid ""
"NaN-propagating minimum that also treat -0.0 as less than 0.0. While "
"FMINNUM_IEEE follow IEEE 754-2008 semantics, FMINIMUM follows IEEE 754-2018 "
"draft semantics."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:439
msgid "G_FMAXIMUM"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:441
msgid ""
"NaN-propagating maximum that also treat -0.0 as less than 0.0. While "
"FMAXNUM_IEEE follow IEEE 754-2008 semantics, FMAXIMUM follows IEEE 754-2018 "
"draft semantics."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:446
msgid "G_FADD, G_FSUB, G_FMUL, G_FDIV, G_FREM"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:448
msgid "Perform the specified floating point arithmetic."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:451
msgid "G_FMA"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:453
msgid ""
"Perform a fused multiply add (i.e. without the intermediate rounding step)."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:456
msgid "G_FMAD"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:458
msgid ""
"Perform a non-fused multiply add (i.e. with the intermediate rounding step)."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:461
msgid "G_FPOW"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:463
msgid "Raise the first operand to the power of the second."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:466
msgid "G_FEXP, G_FEXP2"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:468
msgid "Calculate the base-e or base-2 exponential of a value"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:471
msgid "G_FLOG, G_FLOG2, G_FLOG10"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:473
msgid "Calculate the base-e, base-2, or base-10 respectively."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:476
msgid "G_FCEIL, G_FCOS, G_FSIN, G_FSQRT, G_FFLOOR, G_FRINT, G_FNEARBYINT"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:478
msgid "These correspond to the standard C functions of the same name."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:481
msgid "G_INTRINSIC_TRUNC"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:483
msgid ""
"Returns the operand rounded to the nearest integer not larger in magnitude "
"than the operand."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:486
msgid "G_INTRINSIC_ROUND"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:488
msgid "Returns the operand rounded to the nearest integer."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:491
msgid "Vector Specific Operations"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:494
msgid "G_CONCAT_VECTORS"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:496
msgid "Concatenate two vectors to form a longer vector."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:499
msgid "G_BUILD_VECTOR, G_BUILD_VECTOR_TRUNC"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:501
msgid ""
"Create a vector from multiple scalar registers. No implicit conversion is "
"performed (i.e. the result element type must be the same as all source "
"operands)"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:505
msgid ""
"The _TRUNC version truncates the larger operand types to fit the destination "
"vector elt type."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:509
msgid "G_INSERT_VECTOR_ELT"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:511
msgid "Insert an element into a vector"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:514
msgid "G_EXTRACT_VECTOR_ELT"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:516
msgid "Extract an element from a vector"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:519
msgid "G_SHUFFLE_VECTOR"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:521
msgid ""
"Concatenate two vectors and shuffle the elements according to the mask "
"operand. The mask operand should be an IR Constant which exactly matches the "
"corresponding mask for the IR shufflevector instruction."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:526
msgid "Memory Operations"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:529
msgid "G_LOAD, G_SEXTLOAD, G_ZEXTLOAD"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:531
msgid ""
"Generic load. Expects a MachineMemOperand in addition to explicit operands. "
"If the result size is larger than the memory size, the high bits are "
"undefined, sign-extended, or zero-extended respectively."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:535
msgid ""
"Only G_LOAD is valid if the result is a vector type. If the result is larger "
"than the memory size, the high elements are undefined (i.e. this is not a "
"per-element, vector anyextload)"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:540
msgid "G_INDEXED_LOAD"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:542
msgid ""
"Generic indexed load. Combines a GEP with a load. $newaddr is set to $base + "
"$offset. If $am is 0 (post-indexed), then the value is loaded from $base; if "
"$am is 1 (pre-indexed) then the value is loaded from $newaddr."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:547
msgid "G_INDEXED_SEXTLOAD"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:549
msgid ""
"Same as G_INDEXED_LOAD except that the load performed is sign-extending, as "
"with G_SEXTLOAD."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:552
msgid "G_INDEXED_ZEXTLOAD"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:554
msgid ""
"Same as G_INDEXED_LOAD except that the load performed is zero-extending, as "
"with G_ZEXTLOAD."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:557
msgid "G_STORE"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:559
msgid ""
"Generic store. Expects a MachineMemOperand in addition to explicit operands."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:562
msgid "G_INDEXED_STORE"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:564
msgid ""
"Combines a store with a GEP. See description of G_INDEXED_LOAD for indexing "
"behaviour."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:567
msgid "G_ATOMIC_CMPXCHG_WITH_SUCCESS"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:569
msgid ""
"Generic atomic cmpxchg with internal success check. Expects a "
"MachineMemOperand in addition to explicit operands."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:573
msgid "G_ATOMIC_CMPXCHG"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:575
msgid ""
"Generic atomic cmpxchg. Expects a MachineMemOperand in addition to explicit "
"operands."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:579
msgid ""
"G_ATOMICRMW_XCHG, G_ATOMICRMW_ADD, G_ATOMICRMW_SUB, G_ATOMICRMW_AND, "
"G_ATOMICRMW_NAND, G_ATOMICRMW_OR, G_ATOMICRMW_XOR, G_ATOMICRMW_MAX, "
"G_ATOMICRMW_MIN, G_ATOMICRMW_UMAX, G_ATOMICRMW_UMIN, G_ATOMICRMW_FADD, "
"G_ATOMICRMW_FSUB"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:581
msgid ""
"Generic atomicrmw. Expects a MachineMemOperand in addition to explicit "
"operands."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:585
msgid "G_FENCE"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:589
msgid "I couldn't find any documentation on this at the time of writing."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:592
msgid "Control Flow"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:595
msgid "G_PHI"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:597
msgid "Implement the φ node in the SSA graph representing the function."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:604
msgid "G_BR"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:606
msgid "Unconditional branch"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:609
msgid "G_BRCOND"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:611
msgid "Conditional branch"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:614
msgid "G_BRINDIRECT"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:616
msgid "Indirect branch"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:619
msgid "G_BRJT"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:621
msgid "Indirect branch to jump table entry"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:624
msgid "G_JUMP_TABLE"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:628
#: ../../../GlobalISel/GenericOpcode.rst:651
#: ../../../GlobalISel/GenericOpcode.rst:658
msgid "I found no documentation for this instruction at the time of writing."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:631
msgid "G_INTRINSIC, G_INTRINSIC_W_SIDE_EFFECTS"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:633
msgid "Call an intrinsic"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:635
msgid ""
"The _W_SIDE_EFFECTS version is considered to have unknown side-effects and "
"as such cannot be reordered acrosss other side-effecting instructions."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:640
msgid ""
"Unlike SelectionDAG, there is no _VOID variant. Both of these are permitted "
"to have zero, one, or multiple results."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:644
msgid "Variadic Arguments"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:647
msgid "G_VASTART"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:654
msgid "G_VAARG"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:661
msgid "Other Operations"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:664
msgid "G_DYN_STACKALLOC"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:666
msgid "Dynamically realign the stack pointer to the specified alignment"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:674
msgid "What does it mean for the immediate to be 0? It happens in the tests"
msgstr ""
