# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr_FR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:3
msgid "How to Cross Compile Compiler-rt Builtins For Arm"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:6
msgid "Introduction"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:8
msgid ""
"This document contains information about building and testing the builtins "
"part of compiler-rt for an Arm target, from an x86_64 Linux machine."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:11
msgid ""
"While this document concentrates on Arm and Linux the general principles "
"should apply to other targets supported by compiler-rt. Further "
"contributions for other targets are welcome."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:15
msgid ""
"The instructions in this document depend on libraries and programs external "
"to LLVM, there are many ways to install and configure these dependencies so "
"you may need to adapt the instructions here to fit your own local situation."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:20
msgid "Prerequisites"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:22
msgid ""
"In this use case we'll be using CMake on a Debian-based Linux system, cross-"
"compiling from an x86_64 host to a hard-float Armv7-A target. We'll be using "
"as many of the LLVM tools as we can, but it is possible to use GNU "
"equivalents."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:27
msgid "``A build of LLVM/clang for the llvm-tools and llvm-config``"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:28
msgid "``The qemu-arm user mode emulator``"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:29
msgid "``An arm-linux-gnueabihf sysroot``"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:31
msgid ""
"See https://compiler-rt.llvm.org/ for more information about the "
"dependencies on clang and LLVM."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:34
msgid ""
"``qemu-arm`` should be available as a package for your Linux distribution."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:36
msgid ""
"The most complicated of the prequisites to satisfy is the arm-linux-"
"gnueabihf sysroot. The :doc:`HowToCrossCompileLLVM` has information about "
"how to use the Linux distributions multiarch support to fulfill the "
"dependencies for building LLVM. Alternatively, as building and testing just "
"the compiler-rt builtins requires fewer dependencies than LLVM, it is "
"possible to use the Linaro arm-linux-gnueabihf gcc installation as our "
"sysroot."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:44
msgid "Building compiler-rt builtins for Arm"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:45
msgid ""
"We will be doing a standalone build of compiler-rt using the following cmake "
"options."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:48
msgid "``path/to/llvm/projects/compiler-rt``"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:49
#: ../../../HowToCrossCompileBuiltinsOnArm.rst:165
msgid "``-DCOMPILER_RT_BUILD_BUILTINS=ON``"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:50
#: ../../../HowToCrossCompileBuiltinsOnArm.rst:166
msgid "``-DCOMPILER_RT_BUILD_SANITIZERS=OFF``"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:51
#: ../../../HowToCrossCompileBuiltinsOnArm.rst:167
msgid "``-DCOMPILER_RT_BUILD_XRAY=OFF``"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:52
#: ../../../HowToCrossCompileBuiltinsOnArm.rst:168
msgid "``-DCOMPILER_RT_BUILD_LIBFUZZER=OFF``"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:53
#: ../../../HowToCrossCompileBuiltinsOnArm.rst:169
msgid "``-DCOMPILER_RT_BUILD_PROFILE=OFF``"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:54
msgid "``-DCMAKE_C_COMPILER=/path/to/clang``"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:55
#: ../../../HowToCrossCompileBuiltinsOnArm.rst:172
msgid "``-DCMAKE_AR=/path/to/llvm-ar``"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:56
#: ../../../HowToCrossCompileBuiltinsOnArm.rst:173
msgid "``-DCMAKE_NM=/path/to/llvm-nm``"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:57
#: ../../../HowToCrossCompileBuiltinsOnArm.rst:174
msgid "``-DCMAKE_RANLIB=/path/to/llvm-ranlib``"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:58
msgid "``-DCMAKE_EXE_LINKER_FLAGS=\"-fuse-ld=lld\"``"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:59
msgid "``-DCMAKE_C_COMPILER_TARGET=\"arm-linux-gnueabihf\"``"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:60
#: ../../../HowToCrossCompileBuiltinsOnArm.rst:176
msgid "``-DCOMPILER_RT_DEFAULT_TARGET_ONLY=ON``"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:61
#: ../../../HowToCrossCompileBuiltinsOnArm.rst:177
msgid "``-DLLVM_CONFIG_PATH=/path/to/llvm-config``"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:62
#: ../../../HowToCrossCompileBuiltinsOnArm.rst:178
msgid "``-DCMAKE_C_FLAGS=\"build-c-flags\"``"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:64
msgid ""
"The build-c-flags need to be sufficient to pass the C-make compiler check "
"and to compile compiler-rt. When using a GCC 7 Linaro arm-linux-gnueabihf "
"installation the following flags are needed:"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:68
msgid "``--target=arm-linux-gnueabihf``"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:69
msgid "``--march=armv7a``"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:70
msgid "``--gcc-toolchain=/path/to/dir/toolchain``"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:71
msgid "``--sysroot=/path/to/toolchain/arm-linux-gnueabihf/libc``"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:73
msgid ""
"Depending on how your sysroot is laid out, you may not need ``--gcc-"
"toolchain``. For example if you have added armhf as an architecture using "
"your Linux distributions multiarch support then you should be able to use "
"``--sysroot=/``."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:77
msgid ""
"Once cmake has completed the builtins can be built with ``ninja builtins``"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:80
msgid "Testing compiler-rt builtins using qemu-arm"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:81
msgid ""
"To test the builtins library we need to add a few more cmake flags to enable "
"testing and set up the compiler and flags for test case. We must also tell "
"cmake that we wish to run the tests on ``qemu-arm``."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:85
msgid "``-DCOMPILER_RT_EMULATOR=\"qemu-arm -L /path/to/armhf/sysroot``"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:86
#: ../../../HowToCrossCompileBuiltinsOnArm.rst:181
msgid "``-DCOMPILER_RT_INCLUDE_TESTS=ON``"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:87
#: ../../../HowToCrossCompileBuiltinsOnArm.rst:182
msgid "``-DCOMPILER_RT_TEST_COMPILER=\"/path/to/clang\"``"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:88
#: ../../../HowToCrossCompileBuiltinsOnArm.rst:183
msgid "``-DCOMPILER_RT_TEST_COMPILER_CFLAGS=\"test-c-flags\"``"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:90
msgid ""
"The ``/path/to/armhf/sysroot`` should be the same as the one passed to ``--"
"sysroot`` in the \"build-c-flags\"."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:93
msgid ""
"The \"test-c-flags\" can be the same as the \"build-c-flags\", with the "
"addition of ``\"-fuse-ld=lld`` if you wish to use lld to link the tests."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:96
msgid ""
"Once cmake has completed the tests can be built and run using ``ninja check-"
"builtins``"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:100
msgid "Modifications for other Targets"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:103
msgid "Arm Soft-Float Target"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:104
msgid ""
"The instructions for the Arm hard-float target can be used for the soft-"
"float target by substituting soft-float equivalents for the sysroot and "
"target. The target to use is:"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:108
msgid "``-DCMAKE_C_COMPILER_TARGET=arm-linux-gnueabi``"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:110
msgid ""
"Depending on whether you want to use floating point instructions or not you "
"may need extra c-flags such as ``-mfloat-abi=softfp`` for use of floating-"
"point instructions, and ``-mfloat-abi=soft -mfpu=none`` for software "
"floating-point emulation."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:116
msgid "AArch64 Target"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:117
msgid ""
"The instructions for Arm can be used for AArch64 by substituting AArch64 "
"equivalents for the sysroot, emulator and target."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:120
msgid "``-DCMAKE_C_COMPILER_TARGET=aarch64-linux-gnu``"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:121
msgid "``-DCOMPILER_RT_EMULATOR=\"qemu-aarch64 -L /path/to/aarch64/sysroot``"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:123
msgid ""
"The CMAKE_C_FLAGS and COMPILER_RT_TEST_COMPILER_CFLAGS may also need: ``\"--"
"sysroot=/path/to/aarch64/sysroot --gcc-toolchain=/path/to/gcc-toolchain\"``"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:127
msgid "Armv6-m, Armv7-m and Armv7E-M targets"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:128
msgid ""
"If you wish to build, but not test compiler-rt for Armv6-M, Armv7-M or "
"Armv7E-M then the easiest way is to use the BaremetalARM.cmake recipe in "
"clang/cmake/caches."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:132
msgid ""
"You will need a bare metal sysroot such as that provided by the GNU ARM "
"Embedded toolchain."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:135
msgid "The libraries can be built with the cmake options:"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:137
msgid "``-DBAREMETAL_ARMV6M_SYSROOT=/path/to/bare/metal/sysroot``"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:138
msgid "``-DBAREMETAL_ARMV7M_SYSROOT=/path/to/bare/metal/sysroot``"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:139
msgid "``-DBAREMETAL_ARMV7EM_SYSROOT=/path/to/bare/metal/sysroot``"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:140
msgid "``-C /path/to/llvm/source/tools/clang/cmake/caches/BaremetalARM.cmake``"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:142
msgid ""
"**Note** that for the recipe to work the compiler-rt source must be checked "
"out into the directory llvm/runtimes and not llvm/projects."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:145
msgid ""
"To build and test the libraries using a similar method to Armv7-A is "
"possible but more difficult. The main problems are:"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:148
msgid ""
"There isn't a ``qemu-arm`` user-mode emulator for bare-metal systems. The "
"``qemu-system-arm`` can be used but this is significantly more difficult to "
"setup."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:149
msgid ""
"The target to compile compiler-rt have the suffix -none-eabi. This uses the "
"BareMetal driver in clang and by default won't find the libraries needed to "
"pass the cmake compiler check."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:151
msgid ""
"As the Armv6-M, Armv7-M and Armv7E-M builds of compiler-rt only use "
"instructions that are supported on Armv7-A we can still get most of the "
"value of running the tests using the same ``qemu-arm`` that we used for "
"Armv7-A by building and running the test cases for Armv7-A but using the "
"builtins compiled for Armv6-M, Armv7-M or Armv7E-M. This will not catch "
"instructions that are supported on Armv7-A but not Armv6-M, Armv7-M and "
"Armv7E-M."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:158
msgid ""
"To get the cmake compile test to pass the libraries needed to successfully "
"link the test application will need to be manually added to "
"``CMAKE_CFLAGS``. Alternatively if you are using version 3.6 or above of "
"cmake you can use ``CMAKE_TRY_COMPILE_TARGET=STATIC_LIBRARY`` to skip the "
"link step."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:163
msgid "``-DCMAKE_TRY_COMPILE_TARGET_TYPE=STATIC_LIBRARY``"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:164
msgid "``-DCOMPILER_RT_OS_DIR=\"baremetal\"``"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:170
msgid "``-DCMAKE_C_COMPILER=${host_install_dir}/bin/clang``"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:171
msgid "``-DCMAKE_C_COMPILER_TARGET=\"your *-none-eabi target\"``"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:175
msgid "``-DCOMPILER_RT_BAREMETAL_BUILD=ON``"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:179
msgid "``-DCMAKE_ASM_FLAGS=\"${arm_cflags}\"``"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:180
msgid "``-DCOMPILER_RT_EMULATOR=\"qemu-arm -L /path/to/armv7-A/sysroot\"``"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:185
msgid ""
"The Armv6-M builtins will use the soft-float ABI. When compiling the tests "
"for Armv7-A we must include ``\"-mthumb -mfloat-abi=soft -mfpu=none\"`` in "
"the test-c-flags. We must use an Armv7-A soft-float abi sysroot for ``qemu-"
"arm``."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:189
msgid ""
"Unfortunately at time of writing the Armv7-M and Armv7E-M builds of compiler-"
"rt will always include assembler files including floating point "
"instructions. This means that building for a cpu without a floating point "
"unit requires something like removing the arm_Thumb1_VFPv2_SOURCES from the "
"arm_Thumb1_SOURCES in builtins/CMakeLists.txt. The float-abi of the compiler-"
"rt library must be matched by the float abi of the Armv7-A sysroot used by "
"qemu-arm."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:197
msgid ""
"Depending on the linker used for the test cases you may encounter "
"BuildAttribute mismatches between the M-profile objects from compiler-rt and "
"the A-profile objects from the test. The lld linker does not check the "
"BuildAttributes so it can be used to link the tests by adding -fuse-ld=lld "
"to the ``COMPILER_RT_TEST_COMPILER_CFLAGS``."
msgstr ""
