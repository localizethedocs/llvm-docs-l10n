# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../Proposals/GitHubMove.rst:3
msgid "Moving LLVM Projects to GitHub"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:7
msgid "Table of Contents"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:10
msgid "Introduction"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:12
msgid ""
"This is a proposal to move our current revision control system from our own "
"hosted Subversion to GitHub. Below are the financial and technical arguments "
"as to why we are proposing such a move and how people (and validation "
"infrastructure) will continue to work with a Git-based LLVM."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:17
msgid ""
"There will be a survey pointing at this document which we'll use to gauge "
"the community's reaction and, if we collectively decide to move, the time-"
"frame. Be sure to make your view count."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:21
msgid ""
"Additionally, we will discuss this during a BoF at the next US LLVM "
"Developer meeting (http://llvm.org/devmtg/2016-11/)."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:25
msgid "What This Proposal is *Not* About"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:27
msgid "Changing the development policy."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:29
msgid ""
"This proposal relates only to moving the hosting of our source-code "
"repository from SVN hosted on our own servers to Git hosted on GitHub. We "
"are not proposing using GitHub's issue tracker, pull-requests, or code-"
"review."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:33
msgid ""
"Contributors will continue to earn commit access on demand under the "
"Developer Policy, except that that a GitHub account will be required instead "
"of SVN username/password-hash."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:38
msgid "Why Git, and Why GitHub?"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:41
msgid "Why Move At All?"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:43
msgid ""
"This discussion began because we currently host our own Subversion server "
"and Git mirror on a voluntary basis. The LLVM Foundation sponsors the server "
"and provides limited support, but there is only so much it can do."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:47
msgid ""
"Volunteers are not sysadmins themselves, but compiler engineers that happen "
"to know a thing or two about hosting servers. We also don't have 24/7 "
"support, and we sometimes wake up to see that continuous integration is "
"broken because the SVN server is either down or unresponsive."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:52
msgid ""
"We should take advantage of one of the services out there (GitHub, GitLab, "
"and BitBucket, among others) that offer better service (24/7 stability, disk "
"space, Git server, code browsing, forking facilities, etc) for free."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:57
msgid "Why Git?"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:59
msgid ""
"Many new coders nowadays start with Git, and a lot of people have never used "
"SVN, CVS, or anything else. Websites like GitHub have changed the landscape "
"of open source contributions, reducing the cost of first contribution and "
"fostering collaboration."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:64
msgid ""
"Git is also the version control many LLVM developers use. Despite the "
"sources being stored in a SVN server, these developers are already using Git "
"through the Git-SVN integration."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:68
msgid "Git allows you to:"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:70
msgid ""
"Commit, squash, merge, and fork locally without touching the remote server."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:71
msgid "Maintain local branches, enabling multiple threads of development."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:72
msgid ""
"Collaborate on these branches (e.g. through your own fork of llvm on GitHub)."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:73
msgid ""
"Inspect the repository history (blame, log, bisect) without Internet access."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:74
msgid ""
"Maintain remote forks and branches on Git hosting services and integrate "
"back to the main repository."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:77
msgid ""
"In addition, because Git seems to be replacing many OSS projects' version "
"control systems, there are many tools that are built over Git. Future "
"tooling may support Git first (if not only)."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:82
msgid "Why GitHub?"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:84
msgid ""
"GitHub, like GitLab and BitBucket, provides free code hosting for open "
"source projects. Any of these could replace the code-hosting infrastructure "
"that we have today."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:88
msgid ""
"These services also have a dedicated team to monitor, migrate, improve and "
"distribute the contents of the repositories depending on region and load."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:91
msgid ""
"GitHub has one important advantage over GitLab and BitBucket: it offers read-"
"write **SVN** access to the repository (https://github.com/blog/626-"
"announcing-svn-support). This would enable people to continue working post-"
"migration as though our code were still canonically in an SVN repository."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:97
msgid ""
"In addition, there are already multiple LLVM mirrors on GitHub, indicating "
"that part of our community has already settled there."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:101
msgid "On Managing Revision Numbers with Git"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:103
msgid ""
"The current SVN repository hosts all the LLVM sub-projects alongside each "
"other. A single revision number (e.g. r123456) thus identifies a consistent "
"version of all LLVM sub-projects."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:107
msgid ""
"Git does not use sequential integer revision number but instead uses a hash "
"to identify each commit. (Linus mentioned that the lack of such revision "
"number is \"the only real design mistake\" in Git [TorvaldRevNum]_.)"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:111
msgid ""
"The loss of a sequential integer revision number has been a sticking point "
"in past discussions about Git:"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:114
msgid ""
"\"The 'branch' I most care about is mainline, and losing the ability to say "
"'fixed in r1234' (with some sort of monotonically increasing number) would "
"be a tragic loss.\" [LattnerRevNum]_"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:117
msgid ""
"\"I like those results sorted by time and the chronology should be obvious, "
"but timestamps are incredibly cumbersome and make it difficult to verify "
"that a given checkout matches a given set of results.\" [TrickRevNum]_"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:120
msgid ""
"\"There is still the major regression with unreadable version numbers. Given "
"the amount of Bugzilla traffic with 'Fixed in...', that's a non-trivial "
"issue.\" [JSonnRevNum]_"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:123
msgid ""
"\"Sequential IDs are important for LNT and llvmlab bisection tool."
"\" [MatthewsRevNum]_."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:125
msgid ""
"However, Git can emulate this increasing revision number: ``git rev-list --"
"count <commit-hash>``. This identifier is unique only within a single "
"branch, but this means the tuple `(num, branch-name)` uniquely identifies a "
"commit."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:130
msgid ""
"We can thus use this revision number to ensure that e.g. `clang -v` reports "
"a user-friendly revision number (e.g. `master-12345` or `4.0-5321`), "
"addressing the objections raised above with respect to this aspect of Git."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:135
msgid "What About Branches and Merges?"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:137
msgid ""
"In contrast to SVN, Git makes branching easy. Git's commit history is "
"represented as a DAG, a departure from SVN's linear history. However, we "
"propose to mandate making merge commits illegal in our canonical Git "
"repository."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:141
msgid ""
"Unfortunately, GitHub does not support server side hooks to enforce such a "
"policy.  We must rely on the community to avoid pushing merge commits."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:144
msgid ""
"GitHub offers a feature called `Status Checks`: a branch protected by "
"`status checks` requires commits to be whitelisted before the push can "
"happen. We could supply a pre-push hook on the client side that would run "
"and check the history, before whitelisting the commit being pushed "
"[statuschecks]_. However this solution would be somewhat fragile (how do you "
"update a script installed on every developer machine?) and prevents SVN "
"access to the repository."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:153
msgid "What About Commit Emails?"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:155
msgid ""
"We will need a new bot to send emails for each commit. This proposal leaves "
"the email format unchanged besides the commit URL."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:159
msgid "Straw Man Migration Plan"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:162
msgid "Step #1 : Before The Move"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:164
msgid ""
"Update docs to mention the move, so people are aware of what is going on."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:165
msgid ""
"Set up a read-only version of the GitHub project, mirroring our current SVN "
"repository."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:167
msgid ""
"Add the required bots to implement the commit emails, as well as the "
"umbrella repository update (if the multirepo is selected) or the read-only "
"Git views for the sub-projects (if the monorepo is selected)."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:172
msgid "Step #2 : Git Move"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:174
msgid ""
"Update the buildbots to pick up updates and commits from the GitHub "
"repository. Not all bots have to migrate at this point, but it'll help "
"provide infrastructure testing."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:177
msgid "Update Phabricator to pick up commits from the GitHub repository."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:178
msgid ""
"LNT and llvmlab have to be updated: they rely on unique monotonically "
"increasing integer across branch [MatthewsRevNum]_."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:180
msgid ""
"Instruct downstream integrators to pick up commits from the GitHub "
"repository."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:182
msgid "Review and prepare an update for the LLVM documentation."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:184
msgid ""
"Until this point nothing has changed for developers, it will just boil down "
"to a lot of work for buildbot and other infrastructure owners."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:188
msgid ""
"The migration will pause here until all dependencies have cleared, and all "
"problems have been solved."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:192
msgid "Step #3: Write Access Move"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:194
msgid ""
"Collect developers' GitHub account information, and add them to the project."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:195
msgid ""
"Switch the SVN repository to read-only and allow pushes to the GitHub "
"repository."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:196
msgid "Update the documentation."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:197
msgid "Mirror Git to SVN."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:200
msgid "Step #4 : Post Move"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:202
msgid "Archive the SVN repository."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:203
msgid ""
"Update links on the LLVM website pointing to viewvc/klaus/phab etc. to point "
"to GitHub instead."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:207
msgid "One or Multiple Repositories?"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:209
msgid ""
"There are two major variants for how to structure our Git repository: The "
"\"multirepo\" and the \"monorepo\"."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:213 ../../../Proposals/GitHubMove.rst:524
#: ../../../Proposals/GitHubMove.rst:652 ../../../Proposals/GitHubMove.rst:742
#: ../../../Proposals/GitHubMove.rst:796
msgid "Multirepo Variant"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:215
msgid ""
"This variant recommends moving each LLVM sub-project to a separate Git "
"repository. This mimics the existing official read-only Git repositories (e."
"g., http://llvm.org/git/compiler-rt.git), and creates new canonical "
"repositories for each sub-project."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:220
msgid ""
"This will allow the individual sub-projects to remain distinct: a developer "
"interested only in compiler-rt can checkout only this repository, build it, "
"and work in isolation of the other sub-projects."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:224
msgid ""
"A key need is to be able to check out multiple projects (i.e. "
"lldb+clang+llvm or clang+llvm+libcxx for example) at a specific revision."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:227
msgid ""
"A tuple of revisions (one entry per repository) accurately describes the "
"state across the sub-projects. For example, a given version of clang would "
"be *<LLVM-12345, clang-5432, libcxx-123, etc.>*."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:233
msgid "Umbrella Repository"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:235
msgid ""
"To make this more convenient, a separate *umbrella* repository will be "
"provided. This repository will be used for the sole purpose of understanding "
"the sequence in which commits were pushed to the different repositories and "
"to provide a single revision number."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:240
msgid ""
"This umbrella repository will be read-only and continuously updated to "
"record the above tuple. The proposed form to record this is to use Git "
"[submodules]_, possibly along with a set of scripts to help check out a "
"specific revision of the LLVM distribution."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:245
msgid ""
"A regular LLVM developer does not need to interact with the umbrella "
"repository -- the individual repositories can be checked out independently "
"-- but you would need to use the umbrella repository to bisect multiple sub-"
"projects at the same time, or to check-out old revisions of LLVM with "
"another sub-project at a consistent state."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:251
msgid ""
"This umbrella repository will be updated automatically by a bot (running on "
"notice from a webhook on every push, and periodically) on a per commit "
"basis: a single commit in the umbrella repository would match a single "
"commit in a sub-project."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:257 ../../../Proposals/GitHubMove.rst:385
msgid "Living Downstream"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:259
msgid ""
"Downstream SVN users can use the read/write SVN bridges with the following "
"caveats:"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:262
msgid "Be prepared for a one-time change to the upstream revision numbers."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:263
msgid "The upstream sub-project revision numbers will no longer be in sync."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:265
msgid ""
"Downstream Git users can continue without any major changes, with the minor "
"change of upstreaming using `git push` instead of `git svn dcommit`."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:268
msgid ""
"Git users also have the option of adopting an umbrella repository "
"downstream. The tooling for the upstream umbrella can easily be reused for "
"downstream needs, incorporating extra sub-projects and branching in parallel "
"with sub-project branches."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:274
msgid "Multirepo Preview"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:276 ../../../Proposals/GitHubMove.rst:416
msgid ""
"As a preview (disclaimer: this rough prototype, not polished and not "
"representative of the final solution), you can look at the following:"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:279
msgid "Repository: https://github.com/llvm-beanz/llvm-submodules"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:280
msgid "Update bot: http://beanz-bot.com:8180/jenkins/job/submodule-update/"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:283 ../../../Proposals/GitHubMove.rst:424
#: ../../../Proposals/GitHubMove.rst:462
msgid "Concerns"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:285
msgid ""
"Because GitHub does not allow server-side hooks, and because there is no "
"\"push timestamp\" in Git, the umbrella repository sequence isn't totally "
"exact: commits from different repositories pushed around the same time can "
"appear in different orders. However, we don't expect it to be the common "
"case or to cause serious issues in practice."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:290
msgid ""
"You can't have a single cross-projects commit that would update both LLVM "
"and other sub-projects (something that can be achieved now). It would be "
"possible to establish a protocol whereby users add a special token to their "
"commit messages that causes the umbrella repo's updater bot to group all of "
"them into a single revision."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:295
msgid ""
"Another option is to group commits that were pushed closely enough together "
"in the umbrella repository. This has the advantage of allowing cross-project "
"commits, and is less sensitive to mis-ordering commits. However, this has "
"the potential to group unrelated commits together, especially if the bot "
"goes down and needs to catch up."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:300
msgid ""
"This variant relies on heavier tooling. But the current prototype shows that "
"it is not out-of-reach."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:302
msgid ""
"Submodules don't have a good reputation / are complicating the command line. "
"However, in the proposed setup, a regular developer will seldom interact "
"with submodules directly, and certainly never update them."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:305
msgid ""
"Refactoring across projects is not friendly: taking some functions from "
"clang to make it part of a utility in libSupport wouldn't carry the history "
"of the code in the llvm repo, preventing recursively applying `git blame` "
"for instance. However, this is not very different than how most people are "
"Interacting with the repository today, by splitting such change in multiple "
"commits."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:313 ../../../Proposals/GitHubMove.rst:442
msgid "Workflows"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:315 ../../../Proposals/GitHubMove.rst:444
msgid ""
":ref:`Checkout/Clone a Single Project, without Commit Access <workflow-"
"checkout-commit>`."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:316
msgid ""
":ref:`Checkout/Clone a Single Project, with Commit Access <workflow-"
"multicheckout-nocommit>`."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:317
msgid ""
":ref:`Checkout/Clone Multiple Projects, with Commit Access <workflow-"
"multicheckout-multicommit>`."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:318 ../../../Proposals/GitHubMove.rst:447
msgid ""
":ref:`Commit an API Change in LLVM and Update the Sub-projects <workflow-"
"cross-repo-commit>`."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:319
msgid ""
":ref:`Branching/Stashing/Updating for Local Development or Experiments "
"<workflow-multi-branching>`."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:320
msgid ":ref:`Bisecting <workflow-multi-bisecting>`."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:323 ../../../Proposals/GitHubMove.rst:536
#: ../../../Proposals/GitHubMove.rst:677 ../../../Proposals/GitHubMove.rst:761
#: ../../../Proposals/GitHubMove.rst:830
msgid "Monorepo Variant"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:325
msgid ""
"This variant recommends moving all LLVM sub-projects to a single Git "
"repository, similar to https://github.com/llvm-project/llvm-project. This "
"would mimic an export of the current SVN repository, with each sub-project "
"having its own top-level directory. Not all sub-projects are used for "
"building toolchains. In practice, www/ and test-suite/ will probably stay "
"out of the monorepo."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:332
msgid ""
"Putting all sub-projects in a single checkout makes cross-project "
"refactoring naturally simple:"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:335
msgid ""
"New sub-projects can be trivially split out for better reuse and/or layering "
"(e.g., to allow libSupport and/or LIT to be used by runtimes without adding "
"a dependency on LLVM)."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:338
msgid ""
"Changing an API in LLVM and upgrading the sub-projects will always be done "
"in a single commit, designing away a common source of temporary build "
"breakage."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:340
msgid ""
"Moving code across sub-project (during refactoring for instance) in a single "
"commit enables accurate `git blame` when tracking code change history."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:342
msgid ""
"Tooling based on `git grep` works natively across sub-projects, allowing to "
"easier find refactoring opportunities across projects (for example reusing a "
"datastructure initially in LLDB by moving it into libSupport)."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:345
msgid ""
"Having all the sources present encourages maintaining the other sub-projects "
"when changing API."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:348
msgid ""
"Finally, the monorepo maintains the property of the existing SVN repository "
"that the sub-projects move synchronously, and a single revision number (or "
"commit hash) identifies the state of the development across all projects."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:355
msgid "Building a single sub-project"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:357
msgid ""
"Nobody will be forced to build unnecessary projects.  The exact structure is "
"TBD, but making it trivial to configure builds for a single sub-project (or "
"a subset of sub-projects) is a hard requirement."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:361
msgid "As an example, it could look like the following::"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:374
msgid "Read/write sub-project mirrors"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:376
msgid ""
"With the Monorepo, the existing single-subproject mirrors (e.g. http://llvm."
"org/git/compiler-rt.git) with git-svn read-write access would continue to be "
"maintained: developers would continue to be able to use the existing single-"
"subproject git repositories as they do today, with *no changes to workflow*. "
"Everything (git fetch, git svn dcommit, etc.) could continue to work "
"identically to how it works today. The monorepo can be set-up such that the "
"SVN revision number matches the SVN revision in the GitHub SVN-bridge."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:387
msgid ""
"Downstream SVN users can use the read/write SVN bridge. The SVN revision "
"number can be preserved in the monorepo, minimizing the impact."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:390
msgid ""
"Downstream Git users can continue without any major changes, by using the "
"git-svn mirrors on top of the SVN bridge."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:393
msgid ""
"Git users can also work upstream with monorepo even if their downstream fork "
"has split repositories.  They can apply patches in the appropriate "
"subdirectories of the monorepo using, e.g., `git am --directory=...`, or "
"plain `diff` and `patch`."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:398
msgid ""
"Alternatively, Git users can migrate their own fork to the monorepo.  As a "
"demonstration, we've migrated the \"CHERI\" fork to the monorepo in two ways:"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:401
msgid ""
"Using a script that rewrites history (including merges) so that it looks "
"like the fork always lived in the monorepo [LebarCHERI]_.  The upside of "
"this is when you check out an old revision, you get a copy of all llvm sub-"
"projects at a consistent revision.  (For instance, if it's a clang fork, "
"when you check out an old revision you'll get a consistent version of llvm "
"proper.)  The downside is that this changes the fork's commit hashes."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:409
msgid ""
"Merging the fork into the monorepo [AminiCHERI]_.  This preserves the fork's "
"commit hashes, but when you check out an old commit you only get the one sub-"
"project."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:414
msgid "Monorepo Preview"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:419
msgid "Full Repository: https://github.com/joker-eph/llvm-project"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:420
msgid ""
"Single sub-project view with *SVN write access* to the full repo: https://"
"github.com/joker-eph/compiler-rt"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:426
msgid ""
"Using the monolithic repository may add overhead for those contributing to a "
"standalone sub-project, particularly on runtimes like libcxx and compiler-rt "
"that don't rely on LLVM; currently, a fresh clone of libcxx is only 15MB "
"(vs. 1GB for the monorepo), and the commit rate of LLVM may cause more "
"frequent `git push` collisions when upstreaming. Affected contributors can "
"continue to use the SVN bridge or the single-subproject Git mirrors with git-"
"svn for read-write."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:433
msgid ""
"Using the monolithic repository may add overhead for those *integrating* a "
"standalone sub-project, even if they aren't contributing to it, due to the "
"same disk space concern as the point above. The availability of the sub-"
"project Git mirror addresses this, even without SVN access."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:437
msgid ""
"Preservation of the existing read/write SVN-based workflows relies on the "
"GitHub SVN bridge, which is an extra dependency.  Maintaining this locks us "
"into GitHub and could restrict future workflow changes."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:445
msgid ""
":ref:`Checkout/Clone a Single Project, with Commit Access <workflow-"
"monocheckout-nocommit>`."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:446
msgid ""
":ref:`Checkout/Clone Multiple Projects, with Commit Access <workflow-"
"monocheckout-multicommit>`."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:448
msgid ""
":ref:`Branching/Stashing/Updating for Local Development or Experiments "
"<workflow-mono-branching>`."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:449
msgid ":ref:`Bisecting <workflow-mono-bisecting>`."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:452
msgid "Multi/Mono Hybrid Variant"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:454
msgid ""
"This variant recommends moving only the LLVM sub-projects that are *rev-"
"locked* to LLVM into a monorepo (clang, lld, lldb, ...), following the "
"multirepo proposal for the rest.  While neither variant recommends combining "
"sub-projects like www/ and test-suite/ (which are completely standalone), "
"this goes further and keeps sub-projects like libcxx and compiler-rt in "
"their own distinct repositories."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:464
msgid ""
"This has most disadvantages of multirepo and monorepo, without bringing many "
"of the advantages."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:466
msgid ""
"Downstream have to upgrade to the monorepo structure, but only partially. So "
"they will keep the infrastructure to integrate the other separate sub-"
"projects."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:469
msgid ""
"All projects that use LIT for testing are effectively rev-locked to LLVM. "
"Furthermore, some runtimes (like compiler-rt) are rev-locked with Clang. "
"It's not clear where to draw the lines."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:475
msgid "Workflow Before/After"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:477
msgid ""
"This section goes through a few examples of workflows, intended to "
"illustrate how end-users or developers would interact with the repository "
"for various use-cases."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:484
msgid "Checkout/Clone a Single Project, without Commit Access"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:486
msgid "Except the URL, nothing changes. The possibilities today are::"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:492
msgid "After the move to GitHub, you would do either::"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:498
msgid ""
"The above works for both the monorepo and the multirepo, as we'll maintain "
"the existing read-only views of the individual sub-projects."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:502
msgid "Checkout/Clone a Single Project, with Commit Access"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:505 ../../../Proposals/GitHubMove.rst:614
#: ../../../Proposals/GitHubMove.rst:709 ../../../Proposals/GitHubMove.rst:784
msgid "Currently"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:518
msgid ""
"Commits are performed using `svn commit` or with the sequence `git commit` "
"and `git svn dcommit`."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:526
msgid ""
"With the multirepo variant, nothing changes but the URL, and commits can be "
"performed using `svn commit` or `git commit` and `git push`::"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:538
msgid ""
"With the monorepo variant, there are a few options, depending on your "
"constraints. First, you could just clone the full repository::"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:545
msgid ""
"At this point you have every sub-project (llvm, clang, lld, lldb, ...), "
"which :ref:`doesn't imply you have to build all of them "
"<build_single_project>`. You can still build only compiler-rt for instance. "
"In this way it's not different from someone who would check out all the "
"projects with SVN today."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:550
msgid ""
"You can commit as normal using `git commit` and `git push` or `svn commit`, "
"and read the history for a single project (`git log libcxx` for example)."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:553
msgid ""
"Secondly, there are a few options to avoid checking out all the sources."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:555
msgid "**Using the GitHub SVN bridge**"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:557
msgid ""
"The GitHub SVN native bridge allows to checkout a subdirectory directly:"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:559
msgid ""
"svn co https://github.com/llvm/llvm-projects/trunk/compiler-rt compiler-rt  —"
"username=..."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:561
msgid ""
"This checks out only compiler-rt and provides commit access using \"svn "
"commit\", in the same way as it would do today."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:564
msgid "**Using a Subproject Git Nirror**"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:566
msgid "You can use *git-svn* and one of the sub-project mirrors::"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:576
msgid ""
"In this case the repository contains only a single sub-project, and commits "
"can be made using `git svn dcommit`, again exactly as we do today."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:579
msgid "**Using a Sparse Checkouts**"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:581
msgid "You can hide the other directories using a Git sparse checkout::"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:587
msgid ""
"The data for all sub-projects is still in your `.git` directory, but in your "
"checkout, you only see `compiler-rt`. Before you push, you'll need to fetch "
"and rebase (`git pull --rebase`) as usual."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:592
msgid ""
"Note that when you fetch you'll likely pull in changes to sub-projects you "
"don't care about. If you are using spasre checkout, the files from other "
"projects won't appear on your disk. The only effect is that your commit hash "
"changes."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:596
msgid ""
"You can check whether the changes in the last fetch are relevant to your "
"commit by running::"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:601
msgid ""
"This command can be hidden in a script so that `git llvmpush` would perform "
"all these steps, fail only if such a dependent change exists, and show "
"immediately the change that prevented the push. An immediate repeat of the "
"command would (almost) certainly result in a successful push. Note that "
"today with SVN or git-svn, this step is not possible since the \"rebase\" "
"implicitly happens while committing (unless a conflict occurs)."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:609
msgid "Checkout/Clone Multiple Projects, with Commit Access"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:611
msgid "Let's look how to assemble llvm+clang+libcxx at a given revision."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:624
msgid "Or using git-svn::"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:647
msgid "Note that the list would be longer with more sub-projects."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:654
msgid ""
"With the multirepo variant, the umbrella repository will be used. This is "
"where the mapping from a single revision number to the individual "
"repositories revisions is stored.::"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:665
msgid ""
"At this point the clang, llvm, and libcxx individual repositories are cloned "
"and stored alongside each other. There are CMake flags to describe the "
"directory structure; alternatively, you can just symlink `clang` to `llvm/"
"tools/clang`, etc."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:670
msgid ""
"Another option is to checkout repositories based on the commit timestamp::"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:679
msgid ""
"The repository contains natively the source for every sub-projects at the "
"right revision, which makes this straightforward::"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:686
msgid ""
"As before, at this point clang, llvm, and libcxx are stored in directories "
"alongside each other."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:692
msgid "Commit an API Change in LLVM and Update the Sub-projects"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:694
msgid ""
"Today this is possible, even though not common (at least not documented) for "
"subversion users and for git-svn users. For example, few Git users try to "
"update LLD or Clang in the same commit as they change an LLVM API."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:698
msgid ""
"The multirepo variant does not address this: one would have to commit and "
"push separately in every individual repository. It would be possible to "
"establish a protocol whereby users add a special token to their commit "
"messages that causes the umbrella repo's updater bot to group all of them "
"into a single revision."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:703
msgid "The monorepo variant handles this natively."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:706
msgid "Branching/Stashing/Updating for Local Development or Experiments"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:711
msgid ""
"SVN does not allow this use case, but developers that are currently using "
"git-svn can do it. Let's look in practice what it means when dealing with "
"multiple sub-projects."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:715 ../../../Proposals/GitHubMove.rst:766
msgid "To update the repository to tip of trunk::"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:723 ../../../Proposals/GitHubMove.rst:750
#: ../../../Proposals/GitHubMove.rst:770
msgid "To create a new branch::"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:731 ../../../Proposals/GitHubMove.rst:754
#: ../../../Proposals/GitHubMove.rst:774
msgid "To switch branches::"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:744
msgid ""
"The multirepo works the same as the current Git workflow: every command "
"needs to be applied to each of the individual repositories. However, the "
"umbrella repository makes this easy using `git submodule foreach` to "
"replicate a command on all the individual repositories (or submodules in "
"this case):"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:763
msgid ""
"Regular Git commands are sufficient, because everything is in a single "
"repository:"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:779
msgid "Bisecting"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:781
msgid ""
"Assuming a developer is looking for a bug in clang (or lld, or lldb, ...)."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:786
msgid ""
"SVN does not have builtin bisection support, but the single revision across "
"sub-projects makes it possible to script around."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:789
msgid ""
"Using the existing Git read-only view of the repositories, it is possible to "
"use the native Git bisection script over the llvm repository, and use some "
"scripting to synchronize the clang repository to match the llvm revision."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:798
msgid ""
"With the multi-repositories variant, the cross-repository synchronization is "
"achieved using the umbrella repository. This repository contains only "
"submodules for the other sub-projects. The native Git bisection can be used "
"on the umbrella repository directly. A subtlety is that the bisect script "
"itself needs to make sure the submodules are updated accordingly."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:804
msgid ""
"For example, to find which commit introduces a regression where clang-3.9 "
"crashes but not clang-3.8 passes, one should be able to simply do::"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:810 ../../../Proposals/GitHubMove.rst:842
msgid "With the `bisect_script.sh` script being::"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:822
msgid ""
"When the `git bisect run` command returns, the umbrella repository is set to "
"the state where the regression is introduced. The commit diff in the "
"umbrella indicate which submodule was updated, and the last commit in this "
"sub-projects is the one that the bisect found."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:832
msgid ""
"Bisecting on the monorepo is straightforward, and very similar to the above, "
"except that the bisection script does not need to include the `git submodule "
"update` step."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:836
msgid ""
"The same example, finding which commit introduces a regression where "
"clang-3.9 crashes but not clang-3.8 passes, will look like::"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:852
msgid ""
"Also, since the monorepo handles commits update across multiple projects, "
"you're less like to encounter a build failure where a commit change an API "
"in LLVM and another later one \"fixes\" the build in clang."
msgstr ""

#: ../../../Proposals/GitHubMove.rst:858
msgid "References"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:860
msgid ""
"Chris Lattner, http://lists.llvm.org/pipermail/llvm-dev/2011-July/041739.html"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:861
msgid ""
"Andrew Trick, http://lists.llvm.org/pipermail/llvm-dev/2011-July/041721.html"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:862
msgid ""
"Joerg Sonnenberg, http://lists.llvm.org/pipermail/llvm-dev/2011-July/041688."
"html"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:863
msgid ""
"Linus Torvald, http://git.661346.n2.nabble.com/Git-commit-generation-numbers-"
"td6584414.html"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:864
msgid ""
"Chris Matthews, http://lists.llvm.org/pipermail/cfe-dev/2016-July/049886.html"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:865
msgid "Git submodules, https://git-scm.com/book/en/v2/Git-Tools-Submodules)"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:866
msgid ""
"GitHub status-checks, https://help.github.com/articles/about-required-status-"
"checks/"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:867
msgid ""
"Port *CHERI* to a single repository rewriting history, http://lists.llvm.org/"
"pipermail/llvm-dev/2016-July/102787.html"
msgstr ""

#: ../../../Proposals/GitHubMove.rst:868
msgid ""
"Port *CHERI* to a single repository preserving history, http://lists.llvm."
"org/pipermail/llvm-dev/2016-July/102804.html"
msgstr ""
