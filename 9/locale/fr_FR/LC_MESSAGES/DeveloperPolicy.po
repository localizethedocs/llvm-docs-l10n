# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr_FR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../DeveloperPolicy.rst:3
msgid "LLVM Developer Policy"
msgstr ""

#: ../../../DeveloperPolicy.rst:9
msgid "Introduction"
msgstr ""

#: ../../../DeveloperPolicy.rst:11
msgid ""
"This document contains the LLVM Developer Policy which defines the project's "
"policy towards developers and their contributions. The intent of this policy "
"is to eliminate miscommunication, rework, and confusion that might arise "
"from the distributed nature of LLVM's development.  By stating the policy in "
"clear terms, we hope each developer can know ahead of time what to expect "
"when making LLVM contributions.  This policy covers all llvm.org "
"subprojects, including Clang, LLDB, libc++, etc."
msgstr ""

#: ../../../DeveloperPolicy.rst:19
msgid "This policy is also designed to accomplish the following objectives:"
msgstr ""

#: ../../../DeveloperPolicy.rst:21
msgid "Attract both users and developers to the LLVM project."
msgstr ""

#: ../../../DeveloperPolicy.rst:23
msgid "Make life as simple and easy for contributors as possible."
msgstr ""

#: ../../../DeveloperPolicy.rst:25
msgid "Keep the top of tree as stable as possible."
msgstr ""

#: ../../../DeveloperPolicy.rst:27
msgid ""
"Establish awareness of the project's :ref:`copyright, license, and patent "
"policies <copyright-license-patents>` with contributors to the project."
msgstr ""

#: ../../../DeveloperPolicy.rst:30
msgid ""
"This policy is aimed at frequent contributors to LLVM. People interested in "
"contributing one-off patches can do so in an informal way by sending them to "
"the `llvm-commits mailing list <http://lists.llvm.org/mailman/listinfo/llvm-"
"commits>`_ and engaging another developer to see it through the process."
msgstr ""

#: ../../../DeveloperPolicy.rst:37
msgid "Developer Policies"
msgstr ""

#: ../../../DeveloperPolicy.rst:39
msgid ""
"This section contains policies that pertain to frequent LLVM developers.  We "
"always welcome `one-off patches`_ from people who do not routinely "
"contribute to LLVM, but we expect more from frequent contributors to keep "
"the system as efficient as possible for everyone.  Frequent LLVM "
"contributors are expected to meet the following requirements in order for "
"LLVM to maintain a high standard of quality."
msgstr ""

#: ../../../DeveloperPolicy.rst:47
msgid "Stay Informed"
msgstr ""

#: ../../../DeveloperPolicy.rst:49
msgid ""
"Developers should stay informed by reading at least the \"dev\" mailing list "
"for the projects you are interested in, such as `llvm-dev <http://lists.llvm."
"org/mailman/listinfo/llvm-dev>`_ for LLVM, `cfe-dev <http://lists.llvm.org/"
"mailman/listinfo/cfe-dev>`_ for Clang, or `lldb-dev <http://lists.llvm.org/"
"mailman/listinfo/lldb-dev>`_ for LLDB.  If you are doing anything more than "
"just casual work on LLVM, it is suggested that you also subscribe to the "
"\"commits\" mailing list for the subproject you're interested in, such as "
"`llvm-commits <http://lists.llvm.org/mailman/listinfo/llvm-commits>`_, `cfe-"
"commits <http://lists.llvm.org/mailman/listinfo/cfe-commits>`_, or `lldb-"
"commits <http://lists.llvm.org/mailman/listinfo/lldb-commits>`_.  Reading "
"the \"commits\" list and paying attention to changes being made by others is "
"a good way to see what other people are interested in and watching the flow "
"of the project as a whole."
msgstr ""

#: ../../../DeveloperPolicy.rst:64
msgid ""
"We recommend that active developers register an email account with `LLVM "
"Bugzilla <https://bugs.llvm.org/>`_ and preferably subscribe to the `llvm-"
"bugs <http://lists.llvm.org/mailman/listinfo/llvm-bugs>`_ email list to keep "
"track of bugs and enhancements occurring in LLVM.  We really appreciate "
"people who are proactive at catching incoming bugs in their components and "
"dealing with them promptly."
msgstr ""

#: ../../../DeveloperPolicy.rst:71
msgid ""
"Please be aware that all public LLVM mailing lists are public and archived, "
"and that notices of confidentiality or non-disclosure cannot be respected."
msgstr ""

#: ../../../DeveloperPolicy.rst:78
msgid "Making and Submitting a Patch"
msgstr ""

#: ../../../DeveloperPolicy.rst:80
msgid ""
"When making a patch for review, the goal is to make it as easy for the "
"reviewer to read it as possible.  As such, we recommend that you:"
msgstr ""

#: ../../../DeveloperPolicy.rst:83
msgid ""
"Make your patch against git master, not a branch, and not an old version of "
"LLVM.  This makes it easy to apply the patch.  For information on how to "
"clone from git, please see the :ref:`Getting Started Guide <checkout>`."
msgstr ""

#: ../../../DeveloperPolicy.rst:88
msgid ""
"Similarly, patches should be submitted soon after they are generated.  Old "
"patches may not apply correctly if the underlying code changes between the "
"time the patch was created and the time it is applied."
msgstr ""

#: ../../../DeveloperPolicy.rst:92
msgid ""
"Patches should be made with ``git format-patch``, or similar. If you use a "
"different tool, make sure it uses the ``diff -u`` format and that it doesn't "
"contain clutter which makes it hard to read."
msgstr ""

#: ../../../DeveloperPolicy.rst:96
msgid ""
"Once your patch is ready, submit it by emailing it to the appropriate "
"project's commit mailing list (or commit it directly if applicable). "
"Alternatively, some patches get sent to the project's development list or "
"component of the LLVM bug tracker, but the commit list is the primary place "
"for reviews and should generally be preferred."
msgstr ""

#: ../../../DeveloperPolicy.rst:102
msgid ""
"When sending a patch to a mailing list, it is a good idea to send it as an "
"*attachment* to the message, not embedded into the text of the message.  "
"This ensures that your mailer will not mangle the patch when it sends it (e."
"g. by making whitespace changes or by wrapping lines)."
msgstr ""

#: ../../../DeveloperPolicy.rst:107
msgid ""
"*For Thunderbird users:* Before submitting a patch, please open *Preferences "
"> Advanced > General > Config Editor*, find the key ``mail."
"content_disposition_type``, and set its value to ``1``. Without this "
"setting, Thunderbird sends your attachment using ``Content-Disposition: "
"inline`` rather than ``Content-Disposition: attachment``. Apple Mail gamely "
"displays such a file inline, making it difficult to work with for reviewers "
"using that program."
msgstr ""

#: ../../../DeveloperPolicy.rst:115
msgid ""
"When submitting patches, please do not add confidentiality or non-disclosure "
"notices to the patches themselves.  These notices conflict with the LLVM "
"licensing terms and may result in your contribution being excluded."
msgstr ""

#: ../../../DeveloperPolicy.rst:122
msgid "Code Reviews"
msgstr ""

#: ../../../DeveloperPolicy.rst:124
msgid ""
"LLVM has a code review policy. Code review is one way to increase the "
"quality of software. We generally follow these policies:"
msgstr ""

#: ../../../DeveloperPolicy.rst:127
msgid ""
"All developers are required to have significant changes reviewed before they "
"are committed to the repository."
msgstr ""

#: ../../../DeveloperPolicy.rst:130
msgid ""
"Code reviews are conducted by email on the relevant project's commit mailing "
"list, or alternatively on the project's development list or bug tracker."
msgstr ""

#: ../../../DeveloperPolicy.rst:133
msgid ""
"Code can be reviewed either before it is committed or after.  We expect "
"major changes to be reviewed before being committed, but smaller changes (or "
"changes where the developer owns the component) can be reviewed after commit."
msgstr ""

#: ../../../DeveloperPolicy.rst:137
msgid ""
"The developer responsible for a code change is also responsible for making "
"all necessary review-related changes."
msgstr ""

#: ../../../DeveloperPolicy.rst:140
msgid ""
"Code review can be an iterative process, which continues until the patch is "
"ready to be committed. Specifically, once a patch is sent out for review, it "
"needs an explicit \"looks good\" before it is submitted. Do not assume "
"silent approval, or request active objections to the patch with a deadline."
msgstr ""

#: ../../../DeveloperPolicy.rst:145
msgid ""
"Sometimes code reviews will take longer than you would hope for, especially "
"for larger features. Accepted ways to speed up review times for your patches "
"are:"
msgstr ""

#: ../../../DeveloperPolicy.rst:148
msgid ""
"Review other people's patches. If you help out, everybody will be more "
"willing to do the same for you; goodwill is our currency."
msgstr ""

#: ../../../DeveloperPolicy.rst:150
msgid ""
"Ping the patch. If it is urgent, provide reasons why it is important to you "
"to get this patch landed and ping it every couple of days. If it is not "
"urgent, the common courtesy ping rate is one week. Remember that you're "
"asking for valuable time from other professional developers."
msgstr ""

#: ../../../DeveloperPolicy.rst:154
msgid ""
"Ask for help on IRC. Developers on IRC will be able to either help you "
"directly, or tell you who might be a good reviewer."
msgstr ""

#: ../../../DeveloperPolicy.rst:156
msgid ""
"Split your patch into multiple smaller patches that build on each other. The "
"smaller your patch, the higher the probability that somebody will take a "
"quick look at it."
msgstr ""

#: ../../../DeveloperPolicy.rst:160
msgid ""
"Developers should participate in code reviews as both reviewers and "
"reviewees. If someone is kind enough to review your code, you should return "
"the favor for someone else.  Note that anyone is welcome to review and give "
"feedback on a patch, but only people with Subversion write access can "
"approve it."
msgstr ""

#: ../../../DeveloperPolicy.rst:165
msgid ""
"There is a web based code review tool that can optionally be used for code "
"reviews. See :doc:`Phabricator`."
msgstr ""

#: ../../../DeveloperPolicy.rst:171
msgid "Code Owners"
msgstr ""

#: ../../../DeveloperPolicy.rst:173
msgid ""
"The LLVM Project relies on two features of its process to maintain rapid "
"development in addition to the high quality of its source base: the "
"combination of code review plus post-commit review for trusted maintainers.  "
"Having both is a great way for the project to take advantage of the fact "
"that most people do the right thing most of the time, and only commit "
"patches without pre-commit review when they are confident they are right."
msgstr ""

#: ../../../DeveloperPolicy.rst:180
msgid ""
"The trick to this is that the project has to guarantee that all patches that "
"are committed are reviewed after they go in: you don't want everyone to "
"assume someone else will review it, allowing the patch to go unreviewed.  To "
"solve this problem, we have a notion of an 'owner' for a piece of the code.  "
"The sole responsibility of a code owner is to ensure that a commit to their "
"area of the code is appropriately reviewed, either by themself or by someone "
"else.  The list of current code owners can be found in the file `CODE_OWNERS."
"TXT <https://github.com/llvm/llvm-project/blob/master/llvm/CODE_OWNERS."
"TXT>`_ in the root of the LLVM source tree."
msgstr ""

#: ../../../DeveloperPolicy.rst:190
msgid ""
"Note that code ownership is completely different than reviewers: anyone can "
"review a piece of code, and we welcome code review from anyone who is "
"interested.  Code owners are the \"last line of defense\" to guarantee that "
"all patches that are committed are actually reviewed."
msgstr ""

#: ../../../DeveloperPolicy.rst:195
msgid ""
"Being a code owner is a somewhat unglamorous position, but it is incredibly "
"important for the ongoing success of the project.  Because people get busy, "
"interests change, and unexpected things happen, code ownership is purely opt-"
"in, and anyone can choose to resign their \"title\" at any time. For now, we "
"do not have an official policy on how one gets elected to be a code owner."
msgstr ""

#: ../../../DeveloperPolicy.rst:204
msgid "Test Cases"
msgstr ""

#: ../../../DeveloperPolicy.rst:206
msgid ""
"Developers are required to create test cases for any bugs fixed and any new "
"features added.  Some tips for getting your testcase approved:"
msgstr ""

#: ../../../DeveloperPolicy.rst:209
msgid ""
"All feature and regression test cases are added to the ``llvm/test`` "
"directory. The appropriate sub-directory should be selected (see the :doc:"
"`Testing Guide <TestingGuide>` for details)."
msgstr ""

#: ../../../DeveloperPolicy.rst:213
msgid ""
"Test cases should be written in :doc:`LLVM assembly language <LangRef>`."
msgstr ""

#: ../../../DeveloperPolicy.rst:215
msgid ""
"Test cases, especially for regressions, should be reduced as much as "
"possible, by :doc:`bugpoint <Bugpoint>` or manually. It is unacceptable to "
"place an entire failing program into ``llvm/test`` as this creates a *time-"
"to-test* burden on all developers. Please keep them short."
msgstr ""

#: ../../../DeveloperPolicy.rst:220
msgid ""
"Note that llvm/test and clang/test are designed for regression and small "
"feature tests only. More extensive test cases (e.g., entire applications, "
"benchmarks, etc) should be added to the ``llvm-test`` test suite.  The llvm-"
"test suite is for coverage (correctness, performance, etc) testing, not "
"feature or regression testing."
msgstr ""

#: ../../../DeveloperPolicy.rst:227
msgid "Quality"
msgstr ""

#: ../../../DeveloperPolicy.rst:229
msgid ""
"The minimum quality standards that any change must satisfy before being "
"committed to the main development branch are:"
msgstr ""

#: ../../../DeveloperPolicy.rst:232
msgid ""
"Code must adhere to the `LLVM Coding Standards <CodingStandards.html>`_."
msgstr ""

#: ../../../DeveloperPolicy.rst:234
msgid ""
"Code must compile cleanly (no errors, no warnings) on at least one platform."
msgstr ""

#: ../../../DeveloperPolicy.rst:236
msgid ""
"Bug fixes and new features should `include a testcase`_ so we know if the "
"fix/feature ever regresses in the future."
msgstr ""

#: ../../../DeveloperPolicy.rst:239
msgid "Code must pass the ``llvm/test`` test suite."
msgstr ""

#: ../../../DeveloperPolicy.rst:241
msgid ""
"The code must not cause regressions on a reasonable subset of llvm-test, "
"where \"reasonable\" depends on the contributor's judgement and the scope of "
"the change (more invasive changes require more testing). A reasonable subset "
"might be something like \"``llvm-test/MultiSource/Benchmarks``\"."
msgstr ""

#: ../../../DeveloperPolicy.rst:246
msgid ""
"Additionally, the committer is responsible for addressing any problems found "
"in the future that the change is responsible for.  For example:"
msgstr ""

#: ../../../DeveloperPolicy.rst:249
msgid "The code should compile cleanly on all supported platforms."
msgstr ""

#: ../../../DeveloperPolicy.rst:251
msgid ""
"The changes should not cause any correctness regressions in the ``llvm-"
"test`` suite and must not cause any major performance regressions."
msgstr ""

#: ../../../DeveloperPolicy.rst:254
msgid ""
"The change set should not cause performance or correctness regressions for "
"the LLVM tools."
msgstr ""

#: ../../../DeveloperPolicy.rst:257
msgid ""
"The changes should not cause performance or correctness regressions in code "
"compiled by LLVM on all applicable targets."
msgstr ""

#: ../../../DeveloperPolicy.rst:260
msgid ""
"You are expected to address any `Bugzilla bugs <https://bugs.llvm.org/>`_ "
"that result from your change."
msgstr ""

#: ../../../DeveloperPolicy.rst:263
msgid ""
"We prefer for this to be handled before submission but understand that it "
"isn't possible to test all of this for every submission.  Our build bots and "
"nightly testing infrastructure normally finds these problems.  A good rule "
"of thumb is to check the nightly testers for regressions the day after your "
"change.  Build bots will directly email you if a group of commits that "
"included yours caused a failure.  You are expected to check the build bot "
"messages to see if they are your fault and, if so, fix the breakage."
msgstr ""

#: ../../../DeveloperPolicy.rst:271
msgid ""
"Commits that violate these quality standards (e.g. are very broken) may be "
"reverted. This is necessary when the change blocks other developers from "
"making progress. The developer is welcome to re-commit the change after the "
"problem has been fixed."
msgstr ""

#: ../../../DeveloperPolicy.rst:279
msgid "Commit messages"
msgstr ""

#: ../../../DeveloperPolicy.rst:281
msgid ""
"Although we don't enforce the format of commit messages, we prefer that you "
"follow these guidelines to help review, search in logs, email formatting and "
"so on. These guidelines are very similar to rules used by other open source "
"projects."
msgstr ""

#: ../../../DeveloperPolicy.rst:286
msgid ""
"Most importantly, the contents of the message should be carefully written to "
"convey the rationale of the change (without delving too much in detail). It "
"also should avoid being vague or overly specific. For example, \"bits were "
"not set right\" will leave the reviewer wondering about which bits, and why "
"they weren't right, while \"Correctly set overflow bits in TargetInfo\" "
"conveys almost all there is to the change."
msgstr ""

#: ../../../DeveloperPolicy.rst:293
msgid "Below are some guidelines about the format of the message itself:"
msgstr ""

#: ../../../DeveloperPolicy.rst:295
msgid ""
"Separate the commit message into title, body and, if you're not the original "
"author, a \"Patch by\" attribution line (see below)."
msgstr ""

#: ../../../DeveloperPolicy.rst:298
msgid ""
"The title should be concise. Because all commits are emailed to the list "
"with the first line as the subject, long titles are frowned upon.  Short "
"titles also look better in `git log`."
msgstr ""

#: ../../../DeveloperPolicy.rst:302
msgid ""
"When the changes are restricted to a specific part of the code (e.g. a back-"
"end or optimization pass), it is customary to add a tag to the beginning of "
"the line in square brackets.  For example, \"[SCEV] ...\" or \"[OpenMP] ..."
"\". This helps email filters and searches for post-commit reviews."
msgstr ""

#: ../../../DeveloperPolicy.rst:308
msgid ""
"The body, if it exists, should be separated from the title by an empty line."
msgstr ""

#: ../../../DeveloperPolicy.rst:310
msgid ""
"The body should be concise, but explanatory, including a complete "
"reasoning.  Unless it is required to understand the change, examples, code "
"snippets and gory details should be left to bug comments, web review or the "
"mailing list."
msgstr ""

#: ../../../DeveloperPolicy.rst:315
msgid ""
"If the patch fixes a bug in bugzilla, please include the PR# in the message."
msgstr ""

#: ../../../DeveloperPolicy.rst:317
msgid ""
"`Attribution of Changes`_ should be in a separate line, after the end of the "
"body, as simple as \"Patch by John Doe.\". This is how we officially handle "
"attribution, and there are automated processes that rely on this format."
msgstr ""

#: ../../../DeveloperPolicy.rst:322
msgid ""
"Text formatting and spelling should follow the same rules as documentation "
"and in-code comments, ex. capitalization, full stop, etc."
msgstr ""

#: ../../../DeveloperPolicy.rst:325
msgid ""
"If the commit is a bug fix on top of another recently committed patch, or a "
"revert or reapply of a patch, include the svn revision number of the prior "
"related commit. This could be as simple as \"Revert rNNNN because it caused "
"PR#\"."
msgstr ""

#: ../../../DeveloperPolicy.rst:330
msgid ""
"For minor violations of these recommendations, the community normally favors "
"reminding the contributor of this policy over reverting. Minor corrections "
"and omissions can be handled by sending a reply to the commits mailing list."
msgstr ""

#: ../../../DeveloperPolicy.rst:335
msgid "Obtaining Commit Access"
msgstr ""

#: ../../../DeveloperPolicy.rst:337
msgid ""
"We grant commit access to contributors with a track record of submitting "
"high quality patches.  If you would like commit access, please send an email "
"to `Chris <mailto:clattner@llvm.org>`_ with the following information:"
msgstr ""

#: ../../../DeveloperPolicy.rst:341
msgid "The user name you want to commit with, e.g. \"hacker\"."
msgstr ""

#: ../../../DeveloperPolicy.rst:343
msgid ""
"The full name and email address you want message to llvm-commits to come "
"from, e.g. \"J. Random Hacker <hacker@yoyodyne.com>\"."
msgstr ""

#: ../../../DeveloperPolicy.rst:346
msgid ""
"A \"password hash\" of the password you want to use, e.g. "
"\"``2ACR96qjUqsyM``\". Note that you don't ever tell us what your password "
"is; you just give it to us in an encrypted form.  To get this, run "
"\"``htpasswd``\" (a utility that comes with apache) in *crypt* mode (often "
"enabled with \"``-d``\"), or find a web page that will do it for you.  Note "
"that our system does not work with MD5 hashes.  These are significantly "
"longer than a crypt hash - e.g. \"``$apr1$vea6bBV2$Z8IFx."
"AfeD8LhqlZFqJer0``\", we only accept the shorter crypt hash."
msgstr ""

#: ../../../DeveloperPolicy.rst:354
msgid ""
"Once you've been granted commit access, you should be able to check out an "
"LLVM tree with an SVN URL of \"https://username@llvm.org/...\" instead of "
"the normal anonymous URL of \"http://llvm.org/...\".  The first time you "
"commit you'll have to type in your password.  Note that you may get a "
"warning from SVN about an untrusted key; you can ignore this.  To verify "
"that your commit access works, please do a test commit (e.g. change a "
"comment or add a blank line).  Your first commit to a repository may require "
"the autogenerated email to be approved by a moderator of the mailing list. "
"This is normal and will be done when the mailing list owner has time."
msgstr ""

#: ../../../DeveloperPolicy.rst:364
msgid "If you have recently been granted commit access, these policies apply:"
msgstr ""

#: ../../../DeveloperPolicy.rst:366
msgid ""
"You are granted *commit-after-approval* to all parts of LLVM.  To get "
"approval, submit a `patch`_ to `llvm-commits <http://lists.llvm.org/mailman/"
"listinfo/llvm-commits>`_. When approved, you may commit it yourself."
msgstr ""

#: ../../../DeveloperPolicy.rst:371
msgid ""
"You are allowed to commit patches without approval which you think are "
"obvious. This is clearly a subjective decision --- we simply expect you to "
"use good judgement.  Examples include: fixing build breakage, reverting "
"obviously broken patches, documentation/comment changes, any other minor "
"changes. Avoid committing formatting- or whitespace-only changes outside of "
"code you plan to make subsequent changes to. Also, try to separate "
"formatting or whitespace changes from functional changes, either by "
"correcting the format first (ideally) or afterward. Such changes should be "
"highly localized and the commit message should clearly state that the commit "
"is not intended to change functionality, usually by stating it is :ref:`NFC "
"<nfc>`."
msgstr ""

#: ../../../DeveloperPolicy.rst:383
msgid ""
"You are allowed to commit patches without approval to those portions of LLVM "
"that you have contributed or maintain (i.e., have been assigned "
"responsibility for), with the proviso that such commits must not break the "
"build.  This is a \"trust but verify\" policy, and commits of this nature "
"are reviewed after they are committed."
msgstr ""

#: ../../../DeveloperPolicy.rst:389
msgid ""
"Multiple violations of these policies or a single egregious violation may "
"cause commit access to be revoked."
msgstr ""

#: ../../../DeveloperPolicy.rst:392
msgid ""
"In any case, your changes are still subject to `code review`_ (either before "
"or after they are committed, depending on the nature of the change).  You "
"are encouraged to review other peoples' patches as well, but you aren't "
"required to do so."
msgstr ""

#: ../../../DeveloperPolicy.rst:400
msgid "Making a Major Change"
msgstr ""

#: ../../../DeveloperPolicy.rst:402
msgid ""
"When a developer begins a major new project with the aim of contributing it "
"back to LLVM, they should inform the community with an email to the `llvm-"
"dev <http://lists.llvm.org/mailman/listinfo/llvm-dev>`_ email list, to the "
"extent possible. The reason for this is to:"
msgstr ""

#: ../../../DeveloperPolicy.rst:407
msgid "keep the community informed about future changes to LLVM,"
msgstr ""

#: ../../../DeveloperPolicy.rst:409
msgid ""
"avoid duplication of effort by preventing multiple parties working on the "
"same thing and not knowing about it, and"
msgstr ""

#: ../../../DeveloperPolicy.rst:412
msgid ""
"ensure that any technical issues around the proposed work are discussed and "
"resolved before any significant work is done."
msgstr ""

#: ../../../DeveloperPolicy.rst:415
msgid ""
"The design of LLVM is carefully controlled to ensure that all the pieces fit "
"together well and are as consistent as possible. If you plan to make a major "
"change to the way LLVM works or want to add a major new extension, it is a "
"good idea to get consensus with the development community before you start "
"working on it."
msgstr ""

#: ../../../DeveloperPolicy.rst:421
msgid ""
"Once the design of the new feature is finalized, the work itself should be "
"done as a series of `incremental changes`_, not as a long-term development "
"branch."
msgstr ""

#: ../../../DeveloperPolicy.rst:427
msgid "Incremental Development"
msgstr ""

#: ../../../DeveloperPolicy.rst:429
msgid ""
"In the LLVM project, we do all significant changes as a series of "
"incremental patches.  We have a strong dislike for huge changes or long-term "
"development branches.  Long-term development branches have a number of "
"drawbacks:"
msgstr ""

#: ../../../DeveloperPolicy.rst:433
msgid ""
"Branches must have mainline merged into them periodically.  If the branch "
"development and mainline development occur in the same pieces of code, "
"resolving merge conflicts can take a lot of time."
msgstr ""

#: ../../../DeveloperPolicy.rst:437
msgid "Other people in the community tend to ignore work on branches."
msgstr ""

#: ../../../DeveloperPolicy.rst:439
msgid ""
"Huge changes (produced when a branch is merged back onto mainline) are "
"extremely difficult to `code review`_."
msgstr ""

#: ../../../DeveloperPolicy.rst:442
msgid "Branches are not routinely tested by our nightly tester infrastructure."
msgstr ""

#: ../../../DeveloperPolicy.rst:444
msgid ""
"Changes developed as monolithic large changes often don't work until the "
"entire set of changes is done.  Breaking it down into a set of smaller "
"changes increases the odds that any of the work will be committed to the "
"main repository."
msgstr ""

#: ../../../DeveloperPolicy.rst:449
msgid ""
"To address these problems, LLVM uses an incremental development style and we "
"require contributors to follow this practice when making a large/invasive "
"change.  Some tips:"
msgstr ""

#: ../../../DeveloperPolicy.rst:453
msgid ""
"Large/invasive changes usually have a number of secondary changes that are "
"required before the big change can be made (e.g. API cleanup, etc).  These "
"sorts of changes can often be done before the major change is done, "
"independently of that work."
msgstr ""

#: ../../../DeveloperPolicy.rst:458
msgid ""
"The remaining inter-related work should be decomposed into unrelated sets of "
"changes if possible.  Once this is done, define the first increment and get "
"consensus on what the end goal of the change is."
msgstr ""

#: ../../../DeveloperPolicy.rst:462
msgid ""
"Each change in the set can be stand alone (e.g. to fix a bug), or part of a "
"planned series of changes that works towards the development goal."
msgstr ""

#: ../../../DeveloperPolicy.rst:465
msgid ""
"Each change should be kept as small as possible. This simplifies your work "
"(into a logical progression), simplifies code review and reduces the chance "
"that you will get negative feedback on the change. Small increments also "
"facilitate the maintenance of a high quality code base."
msgstr ""

#: ../../../DeveloperPolicy.rst:470
msgid ""
"Often, an independent precursor to a big change is to add a new API and "
"slowly migrate clients to use the new API.  Each change to use the new API "
"is often \"obvious\" and can be committed without review.  Once the new API "
"is in place and used, it is much easier to replace the underlying "
"implementation of the API.  This implementation change is logically separate "
"from the API change."
msgstr ""

#: ../../../DeveloperPolicy.rst:477
msgid ""
"If you are interested in making a large change, and this scares you, please "
"make sure to first `discuss the change/gather consensus`_ then ask about the "
"best way to go about making the change."
msgstr ""

#: ../../../DeveloperPolicy.rst:482
msgid "Attribution of Changes"
msgstr ""

#: ../../../DeveloperPolicy.rst:484
msgid ""
"When contributors submit a patch to an LLVM project, other developers with "
"commit access may commit it for the author once appropriate (based on the "
"progression of code review, etc.). When doing so, it is important to retain "
"correct attribution of contributions to their contributors. However, we do "
"not want the source code to be littered with random attributions \"this code "
"written by J. Random Hacker\" (this is noisy and distracting). In practice, "
"the revision control system keeps a perfect history of who changed what, and "
"the CREDITS.txt file describes higher-level contributions. If you commit a "
"patch for someone else, please follow the attribution of changes in the "
"simple manner as outlined by the `commit messages`_ section. Overall, please "
"do not add contributor names to the source code."
msgstr ""

#: ../../../DeveloperPolicy.rst:496
msgid ""
"Also, don't commit patches authored by others unless they have submitted the "
"patch to the project or you have been authorized to submit them on their "
"behalf (you work together and your company authorized you to contribute the "
"patches, etc.). The author should first submit them to the relevant "
"project's commit list, development list, or LLVM bug tracker component. If "
"someone sends you a patch privately, encourage them to submit it to the "
"appropriate list first."
msgstr ""

#: ../../../DeveloperPolicy.rst:507
msgid "IR Backwards Compatibility"
msgstr ""

#: ../../../DeveloperPolicy.rst:509
msgid ""
"When the IR format has to be changed, keep in mind that we try to maintain "
"some backwards compatibility. The rules are intended as a balance between "
"convenience for llvm users and not imposing a big burden on llvm developers:"
msgstr ""

#: ../../../DeveloperPolicy.rst:513
msgid ""
"The textual format is not backwards compatible. We don't change it too "
"often, but there are no specific promises."
msgstr ""

#: ../../../DeveloperPolicy.rst:516
msgid ""
"Additions and changes to the IR should be reflected in ``test/Bitcode/"
"compatibility.ll``."
msgstr ""

#: ../../../DeveloperPolicy.rst:519
msgid ""
"The current LLVM version supports loading any bitcode since version 3.0."
msgstr ""

#: ../../../DeveloperPolicy.rst:521
msgid ""
"After each X.Y release, ``compatibility.ll`` must be copied to "
"``compatibility-X.Y.ll``. The corresponding bitcode file should be assembled "
"using the X.Y build and committed as ``compatibility-X.Y.ll.bc``."
msgstr ""

#: ../../../DeveloperPolicy.rst:525
msgid ""
"Newer releases can ignore features from older releases, but they cannot "
"miscompile them. For example, if nsw is ever replaced with something else, "
"dropping it would be a valid way to upgrade the IR."
msgstr ""

#: ../../../DeveloperPolicy.rst:529
msgid ""
"Debug metadata is special in that it is currently dropped during upgrades."
msgstr ""

#: ../../../DeveloperPolicy.rst:531
msgid ""
"Non-debug metadata is defined to be safe to drop, so a valid way to upgrade "
"it is to drop it. That is not very user friendly and a bit more effort is "
"expected, but no promises are made."
msgstr ""

#: ../../../DeveloperPolicy.rst:536
msgid "C API Changes"
msgstr ""

#: ../../../DeveloperPolicy.rst:538
msgid ""
"Stability Guarantees: The C API is, in general, a \"best effort\" for "
"stability. This means that we make every attempt to keep the C API stable, "
"but that stability will be limited by the abstractness of the interface and "
"the stability of the C++ API that it wraps. In practice, this means that "
"things like \"create debug info\" or \"create this type of instruction\" are "
"likely to be less stable than \"take this IR file and JIT it for my current "
"machine\"."
msgstr ""

#: ../../../DeveloperPolicy.rst:545
msgid ""
"Release stability: We won't break the C API on the release branch with "
"patches that go on that branch, with the exception that we will fix an "
"unintentional C API break that will keep the release consistent with both "
"the previous and next release."
msgstr ""

#: ../../../DeveloperPolicy.rst:550
msgid ""
"Testing: Patches to the C API are expected to come with tests just like any "
"other patch."
msgstr ""

#: ../../../DeveloperPolicy.rst:553
msgid ""
"Including new things into the API: If an LLVM subcomponent has a C API "
"already included, then expanding that C API is acceptable. Adding C API for "
"subcomponents that don't currently have one needs to be discussed on the "
"mailing list for design and maintainability feedback prior to implementation."
msgstr ""

#: ../../../DeveloperPolicy.rst:558
msgid ""
"Documentation: Any changes to the C API are required to be documented in the "
"release notes so that it's clear to external users who do not follow the "
"project how the C API is changing and evolving."
msgstr ""

#: ../../../DeveloperPolicy.rst:563
msgid "New Targets"
msgstr ""

#: ../../../DeveloperPolicy.rst:565
msgid ""
"LLVM is very receptive to new targets, even experimental ones, but a number "
"of problems can appear when adding new large portions of code, and back-ends "
"are normally added in bulk.  We have found that landing large pieces of new "
"code and then trying to fix emergent problems in-tree is problematic for a "
"variety of reasons."
msgstr ""

#: ../../../DeveloperPolicy.rst:571
msgid ""
"For these reasons, new targets are *always* added as *experimental* until "
"they can be proven stable, and later moved to non-experimental. The "
"difference between both classes is that experimental targets are not built "
"by default (need to be added to -DLLVM_TARGETS_TO_BUILD at CMake time)."
msgstr ""

#: ../../../DeveloperPolicy.rst:576
msgid ""
"The basic rules for a back-end to be upstreamed in **experimental** mode are:"
msgstr ""

#: ../../../DeveloperPolicy.rst:578
msgid ""
"Every target must have a :ref:`code owner<code owners>`. The `CODE_OWNERS."
"TXT` file has to be updated as part of the first merge. The code owner makes "
"sure that changes to the target get reviewed and steers the overall effort."
msgstr ""

#: ../../../DeveloperPolicy.rst:582
msgid ""
"There must be an active community behind the target. This community will "
"help maintain the target by providing buildbots, fixing bugs, answering the "
"LLVM community's questions and making sure the new target doesn't break any "
"of the other targets, or generic code. This behavior is expected to continue "
"throughout the lifetime of the target's code."
msgstr ""

#: ../../../DeveloperPolicy.rst:589
msgid ""
"The code must be free of contentious issues, for example, large changes in "
"how the IR behaves or should be formed by the front-ends, unless agreed by "
"the majority of the community via refactoring of the (:doc:`IR "
"standard<LangRef>`) **before** the merge of the new target changes, "
"following the :ref:`IR backwards compatibility`."
msgstr ""

#: ../../../DeveloperPolicy.rst:595
msgid ""
"The code conforms to all of the policies laid out in this developer policy "
"document, including license, patent, and coding standards."
msgstr ""

#: ../../../DeveloperPolicy.rst:598
msgid ""
"The target should have either reasonable documentation on how it works (ISA, "
"ABI, etc.) or a publicly available simulator/hardware (either free or cheap "
"enough) - preferably both.  This allows developers to validate assumptions, "
"understand constraints and review code that can affect the target."
msgstr ""

#: ../../../DeveloperPolicy.rst:604
msgid ""
"In addition, the rules for a back-end to be promoted to **official** are:"
msgstr ""

#: ../../../DeveloperPolicy.rst:606
msgid ""
"The target must have addressed every other minimum requirement and have been "
"stable in tree for at least 3 months. This cool down period is to make sure "
"that the back-end and the target community can endure continuous upstream "
"development for the foreseeable future."
msgstr ""

#: ../../../DeveloperPolicy.rst:611
msgid ""
"The target's code must have been completely adapted to this policy as well "
"as the :doc:`coding standards<CodingStandards>`. Any exceptions that were "
"made to move into experimental mode must have been fixed **before** becoming "
"official."
msgstr ""

#: ../../../DeveloperPolicy.rst:616
msgid ""
"The test coverage needs to be broad and well written (small tests, well "
"documented). The build target ``check-all`` must pass with the new target "
"built, and where applicable, the ``test-suite`` must also pass without "
"errors, in at least one configuration (publicly demonstrated, for example, "
"via buildbots)."
msgstr ""

#: ../../../DeveloperPolicy.rst:622
msgid ""
"Public buildbots need to be created and actively maintained, unless the "
"target requires no additional buildbots (ex. ``check-all`` covers all "
"tests). The more relevant and public the new target's CI infrastructure is, "
"the more the LLVM community will embrace it."
msgstr ""

#: ../../../DeveloperPolicy.rst:627
msgid "To **continue** as a supported and official target:"
msgstr ""

#: ../../../DeveloperPolicy.rst:629
msgid ""
"The maintainer(s) must continue following these rules throughout the "
"lifetime of the target. Continuous violations of aforementioned rules and "
"policies could lead to complete removal of the target from the code base."
msgstr ""

#: ../../../DeveloperPolicy.rst:633
msgid ""
"Degradation in support, documentation or test coverage will make the target "
"as nuisance to other targets and be considered a candidate for deprecation "
"and ultimately removed."
msgstr ""

#: ../../../DeveloperPolicy.rst:637
msgid ""
"In essences, these rules are necessary for targets to gain and retain their "
"status, but also markers to define bit-rot, and will be used to clean up the "
"tree from unmaintained targets."
msgstr ""

#: ../../../DeveloperPolicy.rst:644
msgid "Updating Toolchain Requirements"
msgstr ""

#: ../../../DeveloperPolicy.rst:646
msgid ""
"We intend to require newer toolchains as time goes by. This means LLVM's "
"codebase can use newer versions of C++ as they get standardized. Requiring "
"newer toolchains to build LLVM can be painful for those building LLVM; "
"therefore, it will only be done through the following process:"
msgstr ""

#: ../../../DeveloperPolicy.rst:651
msgid ""
"Generally, try to support LLVM and GCC versions from the last 3 years at a "
"minimum. This time-based guideline is not strict: we may support much older "
"compilers, or decide to support fewer versions."
msgstr ""

#: ../../../DeveloperPolicy.rst:655
msgid ""
"An RFC is sent to the `llvm-dev mailing list <http://lists.llvm.org/mailman/"
"listinfo/llvm-dev>`_"
msgstr ""

#: ../../../DeveloperPolicy.rst:657
msgid ""
"Detail upsides of the version increase (e.g. which newer C++ language or "
"library features LLVM should use; avoid miscompiles in particular compiler "
"versions, etc)."
msgstr ""

#: ../../../DeveloperPolicy.rst:660
msgid "Detail downsides on important platforms (e.g. Ubuntu LTS status)."
msgstr ""

#: ../../../DeveloperPolicy.rst:662
msgid ""
"Once the RFC reaches consensus, update the CMake toolchain version checks as "
"well as the :doc:`getting started<GettingStarted>` guide. We want to soft-"
"error when developers compile LLVM. We say \"soft-error\" because the error "
"can be turned into a warning using a CMake flag. This is an important step: "
"LLVM still doesn't have code which requires the new toolchains, but it soon "
"will. If you compile LLVM but don't read the mailing list, we should tell "
"you!"
msgstr ""

#: ../../../DeveloperPolicy.rst:670
msgid ""
"Ensure that at least one LLVM release has had this soft-error. Not all "
"developers compile LLVM top-of-tree. These release-bound developers should "
"also be told about upcoming changes."
msgstr ""

#: ../../../DeveloperPolicy.rst:674
msgid ""
"Turn the soft-error into a hard-error after said LLVM release has branched."
msgstr ""

#: ../../../DeveloperPolicy.rst:676
msgid ""
"Update the :doc:`coding standards<CodingStandards>` to allow the new "
"features we've explicitly approved in the RFC."
msgstr ""

#: ../../../DeveloperPolicy.rst:679
msgid "Start using the new features in LLVM's codebase."
msgstr ""

#: ../../../DeveloperPolicy.rst:681
msgid ""
"Here's a `sample RFC <http://lists.llvm.org/pipermail/llvm-dev/2019-"
"January/129452.html>`_ and the `corresponding change <https://reviews.llvm."
"org/D57264>`_."
msgstr ""

#: ../../../DeveloperPolicy.rst:688
msgid "Copyright, License, and Patents"
msgstr ""

#: ../../../DeveloperPolicy.rst:692
msgid ""
"This section deals with legal matters but does not provide legal advice.  We "
"are not lawyers --- please seek legal counsel from a licensed attorney."
msgstr ""

#: ../../../DeveloperPolicy.rst:695
msgid ""
"This section addresses the issues of copyright, license and patents for the "
"LLVM project.  The copyright for the code is held by the contributors of the "
"code.  The code is licensed under permissive `open source licensing terms`_, "
"namely the Apache 2 license, which includes a copyright and `patent "
"license`_. When you contribute code to the LLVM project, you license it "
"under these terms."
msgstr ""

#: ../../../DeveloperPolicy.rst:701
msgid ""
"If you have questions or comments about these topics, please contact the "
"`LLVM Developer's Mailing List <mailto:llvm-dev@lists.llvm.org>`_.  However, "
"please realize that most compiler developers are not lawyers, and therefore "
"you will not be getting official legal advice."
msgstr ""

#: ../../../DeveloperPolicy.rst:707
msgid "Copyright"
msgstr ""

#: ../../../DeveloperPolicy.rst:709
msgid ""
"The LLVM project does not collect copyright assignments, which means that "
"the copyright for the code in the project is held by the respective "
"contributors. Because you (or your company) retain ownership of the code you "
"contribute, you know it may only be used under the terms of the open source "
"license you contributed it under: the license for your contributions cannot "
"be changed in the future without your approval."
msgstr ""

#: ../../../DeveloperPolicy.rst:716
msgid ""
"Because the LLVM project does not require copyright assignments, changing "
"the LLVM license requires tracking down the contributors to LLVM and getting "
"them to agree that a license change is acceptable for their contributions.  "
"We feel that a high burden for relicensing is good for the project, because "
"contributors do not have to fear that their code will be used in a way with "
"which they disagree."
msgstr ""

#: ../../../DeveloperPolicy.rst:724
msgid "Relicensing"
msgstr ""

#: ../../../DeveloperPolicy.rst:726
msgid ""
"The last paragraph notwithstanding, the LLVM Project is in the middle of a "
"large effort to change licenses, which aims to solve several problems:"
msgstr ""

#: ../../../DeveloperPolicy.rst:729
msgid ""
"The old licenses made it difficult to move code from (e.g.) the compiler to "
"runtime libraries, because runtime libraries used a different license from "
"the rest of the compiler."
msgstr ""

#: ../../../DeveloperPolicy.rst:732
msgid ""
"Some contributions were not submitted to LLVM due to concerns that the "
"patent grant required by the project was overly broad."
msgstr ""

#: ../../../DeveloperPolicy.rst:734
msgid ""
"The patent grant was unique to the LLVM Project, not written by a lawyer, "
"and was difficult to determine what protection was provided (if any)."
msgstr ""

#: ../../../DeveloperPolicy.rst:737
msgid ""
"The scope of relicensing is all code that is considered part of the LLVM "
"project, including the main LLVM repository, runtime libraries (compiler_rt, "
"OpenMP, etc), Polly, and all other subprojects.  There are a few exceptions:"
msgstr ""

#: ../../../DeveloperPolicy.rst:741
msgid ""
"Code imported from other projects (e.g. Google Test, Autoconf, etc) will "
"remain as it is.  This code isn't developed as part of the LLVM project, it "
"is used by LLVM."
msgstr ""

#: ../../../DeveloperPolicy.rst:744
msgid ""
"Some subprojects are impractical or uninteresting to relicense (e.g. llvm-"
"gcc and dragonegg). These will be split off from the LLVM project (e.g. to "
"separate Github projects), allowing interested people to continue their "
"development elsewhere."
msgstr ""

#: ../../../DeveloperPolicy.rst:749
msgid ""
"To relicense LLVM, we will be seeking approval from all of the copyright "
"holders of code in the repository, or potentially remove/rewrite code if we "
"cannot. This is a large and challenging project which will take a "
"significant amount of time to complete.  In the interim, **all contributions "
"to the project will be made under the terms of both the new license and the "
"legacy license scheme** (each of which is described below).  The exception "
"to this is the legacy patent grant, which will not be required for new "
"contributions."
msgstr ""

#: ../../../DeveloperPolicy.rst:758
msgid ""
"When all of the code in the project has been converted to the new license or "
"removed, we will drop the requirement to contribute under the legacy "
"license. This will achieve the goal of having a single standardized license "
"for the entire codebase."
msgstr ""

#: ../../../DeveloperPolicy.rst:763
msgid ""
"If you are a prior contributor to LLVM and have not done so already, please "
"do *TODO* to allow us to use your code. *Add a link to a separate page here, "
"which is probably a click through web form or something like that.  Details "
"to be determined later*."
msgstr ""

#: ../../../DeveloperPolicy.rst:772
msgid "New LLVM Project License Framework"
msgstr ""

#: ../../../DeveloperPolicy.rst:774
msgid ""
"Contributions to LLVM are licensed under the `Apache License, Version 2.0 "
"<https://www.apache.org/licenses/LICENSE-2.0>`_, with two limited exceptions "
"intended to ensure that LLVM is very permissively licensed. Collectively, "
"the name of this license is \"Apache 2.0 License with LLVM exceptions\".  "
"The exceptions read:"
msgstr ""

#: ../../../DeveloperPolicy.rst:799
msgid ""
"We intend to keep LLVM perpetually open source and available under a "
"permissive license - this fosters the widest adoption of LLVM by **allowing "
"commercial products to be derived from LLVM** with few restrictions and "
"without a requirement for making any derived works also open source.  In "
"particular, LLVM's license is not a \"copyleft\" license like the GPL."
msgstr ""

#: ../../../DeveloperPolicy.rst:805
msgid "The \"Apache 2.0 License with LLVM exceptions\" allows you to:"
msgstr ""

#: ../../../DeveloperPolicy.rst:807
msgid ""
"freely download and use LLVM (in whole or in part) for personal, internal, "
"or commercial purposes."
msgstr ""

#: ../../../DeveloperPolicy.rst:809
msgid "include LLVM in packages or distributions you create."
msgstr ""

#: ../../../DeveloperPolicy.rst:810
msgid ""
"combine LLVM with code licensed under every other major open source license "
"(including BSD, MIT, GPLv2, GPLv3...)."
msgstr ""

#: ../../../DeveloperPolicy.rst:812
msgid ""
"make changes to LLVM code without being required to contribute it back to "
"the project - contributions are appreciated though!"
msgstr ""

#: ../../../DeveloperPolicy.rst:815
msgid "However, it imposes these limitations on you:"
msgstr ""

#: ../../../DeveloperPolicy.rst:817
msgid ""
"You must retain the copyright notice if you redistribute LLVM: You cannot "
"strip the copyright headers off or replace them with your own."
msgstr ""

#: ../../../DeveloperPolicy.rst:819
msgid ""
"Binaries that include LLVM must reproduce the copyright notice (e.g. in an "
"included README file or in an \"About\" box), unless the LLVM code was added "
"as a by-product of compilation.  For example, if an LLVM runtime library "
"like compiler_rt or libc++ was automatically included into your application "
"by the compiler, you do not need to attribute it."
msgstr ""

#: ../../../DeveloperPolicy.rst:824
msgid ""
"You can't use our names to promote your products (LLVM derived or not) - "
"though you can make truthful statements about your use of the LLVM code, "
"without implying our sponsorship."
msgstr ""

#: ../../../DeveloperPolicy.rst:827 ../../../DeveloperPolicy.rst:923
msgid "There's no warranty on LLVM at all."
msgstr ""

#: ../../../DeveloperPolicy.rst:829
msgid ""
"We want LLVM code to be widely used, and believe that this provides a model "
"that is great for contributors and users of the project.  For more "
"information about the Apache 2.0 License, please see the `Apache License FAQ "
"<http://www.apache.org/foundation/license-faq.html>`_, maintained by the "
"Apache Project."
msgstr ""

#: ../../../DeveloperPolicy.rst:838
msgid ""
"The LLVM Project includes some really old subprojects (dragonegg, llvm-"
"gcc-4.0, and llvm-gcc-4.2), which are licensed under **GPL licenses**.  This "
"code is not actively maintained - it does not even build successfully.  This "
"code is cleanly separated into distinct SVN repositories from the rest of "
"LLVM, and the LICENSE.txt files specifically indicate that they contain GPL "
"code.  When LLVM transitions from SVN to Git, we plan to drop these code "
"bases from the new repository structure."
msgstr ""

#: ../../../DeveloperPolicy.rst:850
msgid "Patents"
msgstr ""

#: ../../../DeveloperPolicy.rst:852
msgid ""
"Section 3 of the Apache 2.0 license is a patent grant under which "
"contributors of code to the project contribute the rights to use any of "
"their patents that would otherwise be infringed by that code contribution "
"(protecting uses of that code).  Further, the patent grant is revoked from "
"anyone who files a patent lawsuit about code in LLVM - this protects the "
"community by providing a \"patent commons\" for the code base and reducing "
"the odds of patent lawsuits in general."
msgstr ""

#: ../../../DeveloperPolicy.rst:860
msgid ""
"The license specifically scopes which patents are included with code "
"contributions.  To help explain this, the `Apache License FAQ <http://www."
"apache.org/foundation/license-faq.html>`_ explains this scope using some "
"questions and answers, which we reproduce here for your convenience (for "
"reference, the \"ASF\" is the Apache Software Foundation, the guidance still "
"holds though)::"
msgstr ""

#: ../../../DeveloperPolicy.rst:901
msgid "Legacy License Structure"
msgstr ""

#: ../../../DeveloperPolicy.rst:904
msgid ""
"The code base was previously licensed under the Terms described here. We are "
"in the middle of relicensing to a new approach (described above), but until "
"this effort is complete, the code is also still available under these "
"terms.  Once we finish the relicensing project, new versions of the code "
"will not be available under these terms.  However, nothing takes away your "
"right to use old versions under the licensing terms under which they were "
"originally released."
msgstr ""

#: ../../../DeveloperPolicy.rst:912
msgid ""
"We intend to keep LLVM perpetually open source and to use a permissive open "
"source license.  The code in LLVM is available under the `University of "
"Illinois/NCSA Open Source License <http://www.opensource.org/licenses/UoI-"
"NCSA.php>`_, which boils down to this:"
msgstr ""

#: ../../../DeveloperPolicy.rst:918
msgid "You can freely distribute LLVM."
msgstr ""

#: ../../../DeveloperPolicy.rst:919
msgid "You must retain the copyright notice if you redistribute LLVM."
msgstr ""

#: ../../../DeveloperPolicy.rst:920
msgid ""
"Binaries derived from LLVM must reproduce the copyright notice (e.g. in an "
"included README file)."
msgstr ""

#: ../../../DeveloperPolicy.rst:922
msgid "You can't use our names to promote your LLVM derived products."
msgstr ""

#: ../../../DeveloperPolicy.rst:925
msgid ""
"We believe this fosters the widest adoption of LLVM because it **allows "
"commercial products to be derived from LLVM** with few restrictions and "
"without a requirement for making any derived works also open source (i.e. "
"LLVM's license is not a \"copyleft\" license like the GPL). We suggest that "
"you read the `License <http://www.opensource.org/licenses/UoI-NCSA.php>`_ if "
"further clarification is needed."
msgstr ""

#: ../../../DeveloperPolicy.rst:932
msgid ""
"In addition to the UIUC license, the runtime library components of LLVM "
"(**compiler_rt, libc++, and libclc**) are also licensed under the `MIT "
"License <http://www.opensource.org/licenses/mit-license.php>`_, which does "
"not contain the binary redistribution clause.  As a user of these runtime "
"libraries, it means that you can choose to use the code under either license "
"(and thus don't need the binary redistribution clause), and as a contributor "
"to the code that you agree that any contributions to these libraries be "
"licensed under both licenses.  We feel that this is important for runtime "
"libraries, because they are implicitly linked into applications and "
"therefore should not subject those applications to the binary redistribution "
"clause. This also means that it is ok to move code from (e.g.)  libc++ to "
"the LLVM core without concern, but that code cannot be moved from the LLVM "
"core to libc++ without the copyright owner's permission."
msgstr ""
