# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../ReleaseNotes.rst:3
msgid "LLVM 9.0.0 Release Notes"
msgstr ""

#: ../../../ReleaseNotes.rst:9
msgid "Introduction"
msgstr ""

#: ../../../ReleaseNotes.rst:11
msgid ""
"This document contains the release notes for the LLVM Compiler "
"Infrastructure, release 9.0.0.  Here we describe the status of LLVM, "
"including major improvements from the previous release, improvements in "
"various subprojects of LLVM, and some of the current users of the code.  All "
"LLVM releases may be downloaded from the `LLVM releases web site <https://"
"llvm.org/releases/>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:17
msgid ""
"For more information about LLVM, including information about the latest "
"release, please check out the `main LLVM web site <https://llvm.org/>`_.  If "
"you have questions or comments, the `LLVM Developer's Mailing List <https://"
"lists.llvm.org/mailman/listinfo/llvm-dev>`_ is a good place to send them."
msgstr ""

#: ../../../ReleaseNotes.rst:25
msgid "Known Issues"
msgstr ""

#: ../../../ReleaseNotes.rst:27
msgid ""
"These are issues that couldn't be fixed before the release. See the bug "
"reports for the latest status."
msgstr ""

#: ../../../ReleaseNotes.rst:30
msgid "`PR40547 <https://llvm.org/pr40547>`_ Clang gets miscompiled by GCC 9."
msgstr ""

#: ../../../ReleaseNotes.rst:34
msgid "Non-comprehensive list of changes in this release"
msgstr ""

#: ../../../ReleaseNotes.rst:36
msgid ""
"Two new extension points, namely ``EP_FullLinkTimeOptimizationEarly`` and "
"``EP_FullLinkTimeOptimizationLast`` are available for plugins to specialize "
"the legacy pass manager full LTO pipeline."
msgstr ""

#: ../../../ReleaseNotes.rst:40
msgid ""
"``llvm-objcopy/llvm-strip`` got support for COFF object files/executables, "
"supporting the most common copying/stripping options."
msgstr ""

#: ../../../ReleaseNotes.rst:43
msgid ""
"The CMake parameter ``CLANG_ANALYZER_ENABLE_Z3_SOLVER`` has been replaced by "
"``LLVM_ENABLE_Z3_SOLVER``."
msgstr ""

#: ../../../ReleaseNotes.rst:46
msgid ""
"The RISCV target is no longer \"experimental\" (see `Changes to the RISCV "
"Target`_ below for more details)."
msgstr ""

#: ../../../ReleaseNotes.rst:49
msgid ""
"The ORCv1 JIT API has been deprecated. Please see `Transitioning from ORCv1 "
"to ORCv2 <ORCv2.html#transitioning-from-orcv1-to-orcv2>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:52
msgid ""
"Support for target-independent hardware loops in IR has been added, with "
"PowerPC and Arm implementations."
msgstr ""

#: ../../../ReleaseNotes.rst:57
msgid "Noteworthy optimizations"
msgstr ""

#: ../../../ReleaseNotes.rst:59
msgid ""
"LLVM will now remove stores to constant memory (since this is a "
"contradiction) under the assumption the code in question must be dead.  This "
"has proven to be problematic for some C/C++ code bases which expect to be "
"able to cast away 'const'.  This is (and has always been) undefined "
"behavior, but up until now had not been actively utilized for optimization "
"purposes in this exact way.  For more information, please see: `bug 42763 "
"<https://bugs.llvm.org/show_bug.cgi?id=42763>`_ and `post commit discussion "
"<http://lists.llvm.org/pipermail/llvm-commits/Week-of-Mon-20190422/646945."
"html>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:68
msgid ""
"The optimizer will now convert calls to ``memcmp`` into a calls to ``bcmp`` "
"in some circumstances. Users who are building freestanding code (not "
"depending on the platform's libc) without specifying ``-ffreestanding`` may "
"need to either pass ``-fno-builtin-bcmp``, or provide a ``bcmp`` function."
msgstr ""

#: ../../../ReleaseNotes.rst:73
msgid ""
"LLVM will now pattern match wide scalar values stored by a succession of "
"narrow stores. For example, Clang will compile the following function that "
"writes a 32-bit value in big-endian order in a portable manner:"
msgstr ""

#: ../../../ReleaseNotes.rst:86
msgid "into the x86_64 code below:"
msgstr ""

#: ../../../ReleaseNotes.rst:95
msgid "(The corresponding read patterns have been matched since LLVM 5.)"
msgstr ""

#: ../../../ReleaseNotes.rst:97
msgid ""
"LLVM will now omit range checks for jump tables when lowering switches with "
"unreachable default destination. For example, the switch dispatch in the C++ "
"code below"
msgstr ""

#: ../../../ReleaseNotes.rst:115
msgid ""
"will result in the following x86_64 machine code when compiled with Clang. "
"This is because falling off the end of a non-void function is undefined "
"behaviour in C++, and the end of the function therefore being treated as "
"unreachable:"
msgstr ""

#: ../../../ReleaseNotes.rst:127
msgid ""
"LLVM can now sink similar instructions to a common successor block also when "
"the instructions have no uses, such as calls to void functions. This allows "
"code such as"
msgstr ""

#: ../../../ReleaseNotes.rst:144
msgid ""
"to be optimized to a single call to ``g``, with the argument loaded from a "
"lookup table."
msgstr ""

#: ../../../ReleaseNotes.rst:149
msgid "Changes to the LLVM IR"
msgstr ""

#: ../../../ReleaseNotes.rst:151
msgid ""
"Added ``immarg`` parameter attribute. This indicates an intrinsic parameter "
"is required to be a simple constant. This annotation must be accurate to "
"avoid possible miscompiles."
msgstr ""

#: ../../../ReleaseNotes.rst:155
msgid ""
"The 2-field form of global variables ``@llvm.global_ctors`` and ``@llvm."
"global_dtors`` has been deleted. The third field of their element type is "
"now mandatory. Specify `i8* null` to migrate from the obsoleted 2-field form."
msgstr ""

#: ../../../ReleaseNotes.rst:160
msgid ""
"The ``byval`` attribute can now take a type parameter: ``byval(<ty>)``. If "
"present it must be identical to the argument's pointee type. In the next "
"release we intend to make this parameter mandatory in preparation for opaque "
"pointer types."
msgstr ""

#: ../../../ReleaseNotes.rst:165
msgid "``atomicrmw xchg`` now allows floating point types"
msgstr ""

#: ../../../ReleaseNotes.rst:167
msgid "``atomicrmw`` now supports ``fadd`` and ``fsub``"
msgstr ""

#: ../../../ReleaseNotes.rst:170
msgid "Changes to building LLVM"
msgstr ""

#: ../../../ReleaseNotes.rst:172
msgid "Building LLVM with Visual Studio now requires version 2017 or later."
msgstr ""

#: ../../../ReleaseNotes.rst:176
msgid "Changes to the AArch64 Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:178
msgid ""
"Assembly-level support was added for: Scalable Vector Extension 2 (SVE2) and "
"Memory Tagging Extensions (MTE)."
msgstr ""

#: ../../../ReleaseNotes.rst:182
msgid "Changes to the ARM Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:184
msgid ""
"Assembly-level support was added for the Armv8.1-M architecture, including "
"the M-Profile Vector Extension (MVE)."
msgstr ""

#: ../../../ReleaseNotes.rst:187
msgid ""
"A pipeline model was added for Cortex-M4. This pipeline model is also used "
"to tune for cores where this gives a benefit too: Cortex-M3, SC300, Cortex-"
"M33 and Cortex-M35P."
msgstr ""

#: ../../../ReleaseNotes.rst:191
msgid "Code generation support for M-profile low-overhead loops."
msgstr ""

#: ../../../ReleaseNotes.rst:195
msgid "Changes to the MIPS Target"
msgstr ""

#: ../../../ReleaseNotes.rst:197
msgid "Support for ``.cplocal`` assembler directive."
msgstr ""

#: ../../../ReleaseNotes.rst:199
msgid "Support for ``sge``, ``sgeu``, ``sgt``, ``sgtu`` pseudo instructions."
msgstr ""

#: ../../../ReleaseNotes.rst:201
msgid "Support for ``o`` inline asm constraint."
msgstr ""

#: ../../../ReleaseNotes.rst:203
msgid ""
"Improved support of GlobalISel instruction selection framework. This feature "
"is still in experimental state for MIPS targets though."
msgstr ""

#: ../../../ReleaseNotes.rst:206
msgid ""
"Various code-gen improvements, related to improved and fixed instruction "
"selection and encoding and floating-point registers allocation."
msgstr ""

#: ../../../ReleaseNotes.rst:209
msgid "Complete P5600 scheduling model."
msgstr ""

#: ../../../ReleaseNotes.rst:213
msgid "Changes to the PowerPC Target"
msgstr ""

#: ../../../ReleaseNotes.rst:215
msgid "Improved handling of TOC pointer spills for indirect calls"
msgstr ""

#: ../../../ReleaseNotes.rst:217
msgid "Improve precision of square root reciprocal estimate"
msgstr ""

#: ../../../ReleaseNotes.rst:219
msgid "Enabled MachinePipeliner support for P9 with ``-ppc-enable-pipeliner``."
msgstr ""

#: ../../../ReleaseNotes.rst:221
msgid ""
"MMX/SSE/SSE2 intrinsics headers have been ported to PowerPC using Altivec."
msgstr ""

#: ../../../ReleaseNotes.rst:223
msgid ""
"Machine verification failures cleaned, EXPENSIVE_CHECKS will run "
"MachineVerification by default now."
msgstr ""

#: ../../../ReleaseNotes.rst:226
msgid ""
"PowerPC scheduling enhancements, with customized PPC specific scheduler "
"strategy."
msgstr ""

#: ../../../ReleaseNotes.rst:229
msgid "Inner most loop now always align to 32 bytes."
msgstr ""

#: ../../../ReleaseNotes.rst:231
msgid "Enhancements of hardware loops interaction with LSR."
msgstr ""

#: ../../../ReleaseNotes.rst:233
msgid "New builtins added, eg: ``__builtin_setrnd``."
msgstr ""

#: ../../../ReleaseNotes.rst:235
msgid "Various codegen improvements for both scalar and vector code"
msgstr ""

#: ../../../ReleaseNotes.rst:237
msgid "Various new exploitations and bug fixes, e.g: exploited P9 ``maddld``."
msgstr ""

#: ../../../ReleaseNotes.rst:241
msgid "Changes to the SystemZ Target"
msgstr ""

#: ../../../ReleaseNotes.rst:243
msgid ""
"Support for the arch13 architecture has been added.  When using the ``-"
"march=arch13`` option, the compiler will generate code making use of new "
"instructions introduced with the vector enhancement facility 2 and the "
"miscellaneous instruction extension facility 2. The ``-mtune=arch13`` option "
"enables arch13 specific instruction scheduling and tuning without making use "
"of new instructions."
msgstr ""

#: ../../../ReleaseNotes.rst:250
msgid ""
"Builtins for the new vector instructions have been added and can be enabled "
"using the ``-mzvector`` option.  Support for these builtins is indicated by "
"the compiler predefining the ``__VEC__`` macro to the value ``10303``."
msgstr ""

#: ../../../ReleaseNotes.rst:255
msgid ""
"The compiler now supports and automatically generates alignment hints on "
"vector load and store instructions."
msgstr ""

#: ../../../ReleaseNotes.rst:258
msgid ""
"Various code-gen improvements, in particular related to improved instruction "
"selection and register allocation."
msgstr ""

#: ../../../ReleaseNotes.rst:262
msgid "Changes to the X86 Target"
msgstr ""

#: ../../../ReleaseNotes.rst:264
msgid "Fixed a bug in generating DWARF unwind information for 32 bit MinGW"
msgstr ""

#: ../../../ReleaseNotes.rst:267
msgid "Changes to the AMDGPU Target"
msgstr ""

#: ../../../ReleaseNotes.rst:269
msgid "Function call support is now enabled by default"
msgstr ""

#: ../../../ReleaseNotes.rst:271
msgid "Improved support for 96-bit loads and stores"
msgstr ""

#: ../../../ReleaseNotes.rst:273
msgid "DPP combiner pass is now enabled by default"
msgstr ""

#: ../../../ReleaseNotes.rst:275
msgid "Support for gfx10"
msgstr ""

#: ../../../ReleaseNotes.rst:279
msgid "Changes to the RISCV Target"
msgstr ""

#: ../../../ReleaseNotes.rst:281
msgid ""
"The RISCV target is no longer \"experimental\"! It's now built by default, "
"rather than needing to be enabled with "
"``LLVM_EXPERIMENTAL_TARGETS_TO_BUILD``."
msgstr ""

#: ../../../ReleaseNotes.rst:284
msgid ""
"The backend has full codegen support for the RV32I and RV64I base RISC-V "
"instruction set variants, with the MAFDC standard extensions. We support the "
"hard and soft-float ABIs for these targets. Testing has been performed with "
"both Linux and bare-metal targets, including the compilation of a large "
"corpus of Linux applications (through buildroot)."
msgstr ""

#: ../../../ReleaseNotes.rst:292
msgid "Changes to LLDB"
msgstr ""

#: ../../../ReleaseNotes.rst:294
msgid "Backtraces are now color highlighting in the terminal."
msgstr ""

#: ../../../ReleaseNotes.rst:296
msgid ""
"DWARF4 (debug_types) and DWARF5 (debug_info) type units are now supported."
msgstr ""

#: ../../../ReleaseNotes.rst:298
msgid ""
"This release will be the last where ``lldb-mi`` is shipped as part of LLDB. "
"The tool will still be available in a `downstream repository on GitHub "
"<https://github.com/lldb-tools/lldb-mi>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:303
msgid "External Open Source Projects Using LLVM 9"
msgstr ""

#: ../../../ReleaseNotes.rst:306
msgid "Mull - Mutation Testing tool for C and C++"
msgstr ""

#: ../../../ReleaseNotes.rst:308
msgid ""
"`Mull <https://github.com/mull-project/mull>`_ is an LLVM-based tool for "
"mutation testing with a strong focus on C and C++ languages."
msgstr ""

#: ../../../ReleaseNotes.rst:312
msgid "Portable Computing Language (pocl)"
msgstr ""

#: ../../../ReleaseNotes.rst:314
msgid ""
"In addition to producing an easily portable open source OpenCL "
"implementation, another major goal of `pocl <http://portablecl.org/>`_ is "
"improving performance portability of OpenCL programs with compiler "
"optimizations, reducing the need for target-dependent manual optimizations. "
"An important part of pocl is a set of LLVM passes used to statically "
"parallelize multiple work-items with the kernel compiler, even in the "
"presence of work-group barriers. This enables static parallelization of the "
"fine-grained static concurrency in the work groups in multiple ways."
msgstr ""

#: ../../../ReleaseNotes.rst:324
msgid "TTA-based Co-design Environment (TCE)"
msgstr ""

#: ../../../ReleaseNotes.rst:326
msgid ""
"`TCE <http://openasip.org/>`_ is an open source toolset for designing "
"customized processors based on the Transport Triggered Architecture (TTA). "
"The toolset provides a complete co-design flow from C/C++ programs down to "
"synthesizable VHDL/Verilog and parallel program binaries. Processor "
"customization points include register files, function units, supported "
"operations, and the interconnection network."
msgstr ""

#: ../../../ReleaseNotes.rst:333
msgid ""
"TCE uses Clang and LLVM for C/C++/OpenCL C language support, target "
"independent optimizations and also for parts of code generation. It "
"generates new LLVM-based code generators \"on the fly\" for the designed TTA "
"processors and loads them in to the compiler backend as runtime libraries to "
"avoid per-target recompilation of larger parts of the compiler chain."
msgstr ""

#: ../../../ReleaseNotes.rst:341
msgid "Zig Programming Language"
msgstr ""

#: ../../../ReleaseNotes.rst:343
msgid ""
"`Zig <https://ziglang.org>`_  is a system programming language intended to "
"be an alternative to C. It provides high level features such as generics, "
"compile time function execution, and partial evaluation, while exposing low "
"level LLVM IR features such as aliases and intrinsics. Zig uses Clang to "
"provide automatic import of .h symbols, including inline functions and "
"simple macros. Zig uses LLD combined with lazily building compiler-rt to "
"provide out-of-the-box cross-compiling for all supported targets."
msgstr ""

#: ../../../ReleaseNotes.rst:353
msgid "LDC - the LLVM-based D compiler"
msgstr ""

#: ../../../ReleaseNotes.rst:355
msgid ""
"`D <http://dlang.org>`_ is a language with C-like syntax and static typing. "
"It pragmatically combines efficiency, control, and modeling power, with "
"safety and programmer productivity. D supports powerful concepts like "
"Compile-Time Function Execution (CTFE) and Template Meta-Programming, "
"provides an innovative approach to concurrency and offers many classical "
"paradigms."
msgstr ""

#: ../../../ReleaseNotes.rst:361
msgid ""
"`LDC <http://wiki.dlang.org/LDC>`_ uses the frontend from the reference "
"compiler combined with LLVM as backend to produce efficient native code. LDC "
"targets x86/x86_64 systems like Linux, OS X, FreeBSD and Windows and also "
"Linux on ARM and PowerPC (32/64 bit). Ports to other architectures are "
"underway."
msgstr ""

#: ../../../ReleaseNotes.rst:368
msgid "Additional Information"
msgstr ""

#: ../../../ReleaseNotes.rst:370
msgid ""
"A wide variety of additional information is available on the `LLVM web page "
"<https://llvm.org/>`_, in particular in the `documentation <https://llvm.org/"
"docs/>`_ section.  The web page also contains versions of the API "
"documentation which is up-to-date with the Subversion version of the source "
"code.  You can access versions of these documents specific to this release "
"by going into the ``llvm/docs/`` directory in the LLVM tree."
msgstr ""

#: ../../../ReleaseNotes.rst:377
msgid ""
"If you have any questions or comments about LLVM, please feel free to "
"contact us via the `mailing lists <https://llvm.org/docs/#mailing-lists>`_."
msgstr ""
