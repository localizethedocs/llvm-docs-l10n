# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../AMDGPUOperandSyntax.rst:3
msgid "Syntax of AMDGPU Instruction Operands"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:9
msgid "Conventions"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:11
msgid "The following notation is used throughout this document:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:14
msgid "Notation"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:14 ../../../AMDGPUOperandSyntax.rst:37
#: ../../../AMDGPUOperandSyntax.rst:83 ../../../AMDGPUOperandSyntax.rst:125
#: ../../../AMDGPUOperandSyntax.rst:209 ../../../AMDGPUOperandSyntax.rst:266
#: ../../../AMDGPUOperandSyntax.rst:276 ../../../AMDGPUOperandSyntax.rst:295
#: ../../../AMDGPUOperandSyntax.rst:305 ../../../AMDGPUOperandSyntax.rst:324
#: ../../../AMDGPUOperandSyntax.rst:334 ../../../AMDGPUOperandSyntax.rst:355
#: ../../../AMDGPUOperandSyntax.rst:365 ../../../AMDGPUOperandSyntax.rst:385
#: ../../../AMDGPUOperandSyntax.rst:395 ../../../AMDGPUOperandSyntax.rst:412
#: ../../../AMDGPUOperandSyntax.rst:430 ../../../AMDGPUOperandSyntax.rst:440
#: ../../../AMDGPUOperandSyntax.rst:664
msgid "Description"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:16
msgid "{0..N}"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:16
msgid "Any integer value in the range from 0 to N (inclusive)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:17
msgid "<x>"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:17
msgid "Syntax and meaning of *x* is explained elsewhere."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:23
msgid "Operands"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:28
msgid "v"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:30
msgid "Vector registers. There are 256 32-bit vector registers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:32
msgid ""
"A sequence of *vector* registers may be used to operate with more than 32 "
"bits of data."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:34
msgid ""
"Assembler currently supports sequences of 1, 2, 3, 4, 8 and 16 *vector* "
"registers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:37 ../../../AMDGPUOperandSyntax.rst:83
#: ../../../AMDGPUOperandSyntax.rst:125 ../../../AMDGPUOperandSyntax.rst:209
#: ../../../AMDGPUOperandSyntax.rst:266 ../../../AMDGPUOperandSyntax.rst:276
#: ../../../AMDGPUOperandSyntax.rst:295 ../../../AMDGPUOperandSyntax.rst:305
#: ../../../AMDGPUOperandSyntax.rst:324 ../../../AMDGPUOperandSyntax.rst:334
#: ../../../AMDGPUOperandSyntax.rst:355 ../../../AMDGPUOperandSyntax.rst:365
#: ../../../AMDGPUOperandSyntax.rst:385 ../../../AMDGPUOperandSyntax.rst:395
#: ../../../AMDGPUOperandSyntax.rst:412 ../../../AMDGPUOperandSyntax.rst:430
#: ../../../AMDGPUOperandSyntax.rst:440 ../../../AMDGPUOperandSyntax.rst:583
#: ../../../AMDGPUOperandSyntax.rst:664 ../../../AMDGPUOperandSyntax.rst:684
#: ../../../AMDGPUOperandSyntax.rst:713 ../../../AMDGPUOperandSyntax.rst:792
#: ../../../AMDGPUOperandSyntax.rst:899
msgid "Syntax"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:39
msgid "**v**\\<N>"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:39 ../../../AMDGPUOperandSyntax.rst:42
msgid "A single 32-bit *vector* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:41 ../../../AMDGPUOperandSyntax.rst:129
#: ../../../AMDGPUOperandSyntax.rst:213
msgid "*N* must be a decimal integer number."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:42
msgid "**v[**\\ <N>\\ **]**"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:44 ../../../AMDGPUOperandSyntax.rst:132
#: ../../../AMDGPUOperandSyntax.rst:216
msgid ""
"*N* may be specified as an :ref:`integer "
"number<amdgpu_synid_integer_number>` or an :ref:`absolute "
"expression<amdgpu_synid_absolute_expression>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:47
msgid "**v[**\\ <N>:<K>\\ **]**"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:47 ../../../AMDGPUOperandSyntax.rst:52
msgid "A sequence of (\\ *K-N+1*\\ ) *vector* registers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:49 ../../../AMDGPUOperandSyntax.rst:137
#: ../../../AMDGPUOperandSyntax.rst:221
msgid ""
"*N* and *K* may be specified as :ref:`integer "
"numbers<amdgpu_synid_integer_number>` or :ref:`absolute "
"expressions<amdgpu_synid_absolute_expression>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:52
msgid "**[v**\\ <N>, \\ **v**\\ <N+1>, ... **v**\\ <K>\\ **]**"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:54 ../../../AMDGPUOperandSyntax.rst:142
#: ../../../AMDGPUOperandSyntax.rst:226
msgid "Register indices must be specified as decimal integer numbers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:57 ../../../AMDGPUOperandSyntax.rst:145
#: ../../../AMDGPUOperandSyntax.rst:229
msgid "Note. *N* and *K* must satisfy the following conditions:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:59 ../../../AMDGPUOperandSyntax.rst:148
#: ../../../AMDGPUOperandSyntax.rst:232
msgid "*N* <= *K*."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:60
msgid "0 <= *N* <= 255."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:61
msgid "0 <= *K* <= 255."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:62
msgid "*K-N+1* must be equal to 1, 2, 3, 4, 8 or 16."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:64 ../../../AMDGPUOperandSyntax.rst:95
#: ../../../AMDGPUOperandSyntax.rst:153 ../../../AMDGPUOperandSyntax.rst:237
#: ../../../AMDGPUOperandSyntax.rst:693 ../../../AMDGPUOperandSyntax.rst:719
#: ../../../AMDGPUOperandSyntax.rst:748 ../../../AMDGPUOperandSyntax.rst:767
#: ../../../AMDGPUOperandSyntax.rst:784 ../../../AMDGPUOperandSyntax.rst:945
#: ../../../AMDGPUOperandSyntax.rst:968 ../../../AMDGPUOperandSyntax.rst:1101
msgid "Examples:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:80
msgid ""
"*Image* instructions may use special *NSA* (Non-Sequential Address) syntax "
"for *image addresses*:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:85
msgid "**[v**\\ <A>, \\ **v**\\ <B>, ... **v**\\ <X>\\ **]**"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:85
msgid ""
"A sequence of *vector* registers. At least one register must be specified."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:88
msgid ""
"In contrast with standard syntax described above, registers in this sequence "
"are not required to have consecutive indices. Moreover, the same register "
"may appear in the list more than once."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:93
msgid ""
"Note. Reqister indices must be in the range 0..255. They must be specified "
"as decimal integer numbers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:105
msgid "s"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:107
msgid ""
"Scalar 32-bit registers. The number of available *scalar* registers depends "
"on GPU:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:110 ../../../AMDGPUOperandSyntax.rst:194
msgid "GPU"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:110
msgid "Number of *scalar* registers"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:112 ../../../AMDGPUOperandSyntax.rst:196
msgid "GFX7"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:112
msgid "104"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:113 ../../../AMDGPUOperandSyntax.rst:197
msgid "GFX8"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:113 ../../../AMDGPUOperandSyntax.rst:114
msgid "102"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:114 ../../../AMDGPUOperandSyntax.rst:198
msgid "GFX9"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:115 ../../../AMDGPUOperandSyntax.rst:199
msgid "GFX10"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:115
msgid "106"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:118
msgid ""
"A sequence of *scalar* registers may be used to operate with more than 32 "
"bits of data. Assembler currently supports sequences of 1, 2, 4, 8 and 16 "
"*scalar* registers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:121
msgid ""
"Pairs of *scalar* registers must be even-aligned (the first register must be "
"even). Sequences of 4 and more *scalar* registers must be quad-aligned."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:127
msgid "**s**\\ <N>"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:127 ../../../AMDGPUOperandSyntax.rst:130
msgid "A single 32-bit *scalar* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:130
msgid "**s[**\\ <N>\\ **]**"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:135
msgid "**s[**\\ <N>:<K>\\ **]**"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:135 ../../../AMDGPUOperandSyntax.rst:140
msgid "A sequence of (\\ *K-N+1*\\ ) *scalar* registers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:140
msgid "**[s**\\ <N>, \\ **s**\\ <N+1>, ... **s**\\ <K>\\ **]**"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:147 ../../../AMDGPUOperandSyntax.rst:231
msgid "*N* must be properly aligned based on sequence size."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:149
msgid ""
"0 <= *N* < *SMAX*\\ , where *SMAX* is the number of available *scalar* "
"registers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:150
msgid ""
"0 <= *K* < *SMAX*\\ , where *SMAX* is the number of available *scalar* "
"registers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:151 ../../../AMDGPUOperandSyntax.rst:235
msgid "*K-N+1* must be equal to 1, 2, 4, 8 or 16."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:167
msgid "Examples of *scalar* registers with an invalid alignment:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:177
msgid "trap"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:179
msgid "A set of trap handler registers:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:181
msgid ":ref:`ttmp<amdgpu_synid_ttmp>`"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:182
msgid ":ref:`tba<amdgpu_synid_tba>`"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:183
msgid ":ref:`tma<amdgpu_synid_tma>`"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:188
msgid "ttmp"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:190
msgid ""
"Trap handler temporary scalar registers, 32-bits wide. The number of "
"available *ttmp* registers depends on GPU:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:194
msgid "Number of *ttmp* registers"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:196 ../../../AMDGPUOperandSyntax.rst:197
msgid "12"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:198 ../../../AMDGPUOperandSyntax.rst:199
msgid "16"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:202
msgid ""
"A sequence of *ttmp* registers may be used to operate with more than 32 bits "
"of data. Assembler currently supports sequences of 1, 2, 4, 8 and 16 *ttmp* "
"registers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:205
msgid ""
"Pairs of *ttmp* registers must be even-aligned (the first register must be "
"even). Sequences of 4 and more *ttmp* registers must be quad-aligned."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:211
msgid "**ttmp**\\ <N>"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:211 ../../../AMDGPUOperandSyntax.rst:214
msgid "A single 32-bit *ttmp* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:214
msgid "**ttmp[**\\ <N>\\ **]**"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:219
msgid "**ttmp[**\\ <N>:<K>\\ **]**"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:219 ../../../AMDGPUOperandSyntax.rst:224
msgid "A sequence of (\\ *K-N+1*\\ ) *ttmp* registers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:224
msgid "**[ttmp**\\ <N>, \\ **ttmp**\\ <N+1>, ... **ttmp**\\ <K>\\ **]**"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:233
msgid ""
"0 <= *N* < *TMAX*, where *TMAX* is the number of available *ttmp* registers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:234
msgid ""
"0 <= *K* < *TMAX*, where *TMAX* is the number of available *ttmp* registers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:251
msgid "Examples of *ttmp* registers with an invalid alignment:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:261 ../../../AMDGPUOperandSyntax.rst:268
msgid "tba"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:263
msgid ""
"Trap base address, 64-bits wide. Holds the pointer to the current trap "
"handler program."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:266 ../../../AMDGPUOperandSyntax.rst:276
#: ../../../AMDGPUOperandSyntax.rst:295 ../../../AMDGPUOperandSyntax.rst:305
#: ../../../AMDGPUOperandSyntax.rst:556 ../../../AMDGPUOperandSyntax.rst:583
msgid "Availability"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:268
msgid "64-bit *trap base address* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:268 ../../../AMDGPUOperandSyntax.rst:269
#: ../../../AMDGPUOperandSyntax.rst:270 ../../../AMDGPUOperandSyntax.rst:278
#: ../../../AMDGPUOperandSyntax.rst:279 ../../../AMDGPUOperandSyntax.rst:280
#: ../../../AMDGPUOperandSyntax.rst:281 ../../../AMDGPUOperandSyntax.rst:297
#: ../../../AMDGPUOperandSyntax.rst:298 ../../../AMDGPUOperandSyntax.rst:299
#: ../../../AMDGPUOperandSyntax.rst:307 ../../../AMDGPUOperandSyntax.rst:308
#: ../../../AMDGPUOperandSyntax.rst:309 ../../../AMDGPUOperandSyntax.rst:310
msgid "GFX7, GFX8"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:269
msgid "[tba]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:269 ../../../AMDGPUOperandSyntax.rst:270
msgid "64-bit *trap base address* register (an alternative syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:270
msgid "[tba_lo,tba_hi]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:273
msgid ""
"High and low 32 bits of *trap base address* may be accessed as separate "
"registers:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:278
msgid "tba_lo"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:278
msgid "Low 32 bits of *trap base address* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:279
msgid "tba_hi"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:279
msgid "High 32 bits of *trap base address* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:280
msgid "[tba_lo]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:280
msgid "Low 32 bits of *trap base address* register (an alternative syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:281
msgid "[tba_hi]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:281
msgid "High 32 bits of *trap base address* register (an alternative syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:284
msgid ""
"Note that *tba*, *tba_lo* and *tba_hi* are not accessible as assembler "
"registers in GFX9 and GFX10, but *tba* is readable/writable with the help of "
"*s_get_reg* and *s_set_reg* instructions."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:290 ../../../AMDGPUOperandSyntax.rst:297
msgid "tma"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:292
msgid "Trap memory address, 64-bits wide."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:297
msgid "64-bit *trap memory address* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:298
msgid "[tma]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:298 ../../../AMDGPUOperandSyntax.rst:299
msgid "64-bit *trap memory address* register (an alternative syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:299
msgid "[tma_lo,tma_hi]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:302
msgid ""
"High and low 32 bits of *trap memory address* may be accessed as separate "
"registers:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:307
msgid "tma_lo"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:307
msgid "Low 32 bits of *trap memory address* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:308
msgid "tma_hi"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:308
msgid "High 32 bits of *trap memory address* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:309
msgid "[tma_lo]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:309
msgid "Low 32 bits of *trap memory address* register (an alternative syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:310
msgid "[tma_hi]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:310
msgid "High 32 bits of *trap memory address* register (an alternative syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:313
msgid ""
"Note that *tma*, *tma_lo* and *tma_hi* are not accessible as assembler "
"registers in GFX9 and GFX10, but *tma* is readable/writable with the help of "
"*s_get_reg* and *s_set_reg* instructions."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:319 ../../../AMDGPUOperandSyntax.rst:326
msgid "flat_scratch"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:321
msgid ""
"Flat scratch address, 64-bits wide. Holds the base address of scratch memory."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:326
msgid "64-bit *flat scratch* address register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:327
msgid "[flat_scratch]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:327 ../../../AMDGPUOperandSyntax.rst:328
msgid "64-bit *flat scratch* address register (an alternative syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:328
msgid "[flat_scratch_lo,flat_scratch_hi]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:331
msgid ""
"High and low 32 bits of *flat scratch* address may be accessed as separate "
"registers:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:336
msgid "flat_scratch_lo"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:336
msgid "Low 32 bits of *flat scratch* address register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:337
msgid "flat_scratch_hi"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:337
msgid "High 32 bits of *flat scratch* address register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:338
msgid "[flat_scratch_lo]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:338
msgid "Low 32 bits of *flat scratch* address register (an alternative syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:339
msgid "[flat_scratch_hi]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:339
msgid ""
"High 32 bits of *flat scratch* address register (an alternative syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:345
msgid "xnack"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:347
msgid ""
"Xnack mask, 64-bits wide. Holds a 64-bit mask of which threads received an "
"*XNACK* due to a vector memory operation."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:350
msgid ""
"GFX7 does not support *xnack* feature. For availability of this feature in "
"other GPUs, refer :ref:`this table<amdgpu-processors>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:352 ../../../AMDGPUOperandSyntax.rst:690
msgid "\\"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:357
msgid "xnack_mask"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:357
msgid "64-bit *xnack mask* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:358
msgid "[xnack_mask]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:358 ../../../AMDGPUOperandSyntax.rst:359
msgid "64-bit *xnack mask* register (an alternative syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:359
msgid "[xnack_mask_lo,xnack_mask_hi]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:362
msgid ""
"High and low 32 bits of *xnack mask* may be accessed as separate registers:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:367
msgid "xnack_mask_lo"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:367
msgid "Low 32 bits of *xnack mask* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:368
msgid "xnack_mask_hi"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:368
msgid "High 32 bits of *xnack mask* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:369
msgid "[xnack_mask_lo]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:369
msgid "Low 32 bits of *xnack mask* register (an alternative syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:370
msgid "[xnack_mask_hi]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:370
msgid "High 32 bits of *xnack mask* register (an alternative syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:377 ../../../AMDGPUOperandSyntax.rst:387
msgid "vcc"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:379
msgid ""
"Vector condition code, 64-bits wide. A bit mask with one bit per thread; it "
"holds the result of a vector compare operation."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:382
msgid ""
"Note that GFX10 H/W does not use high 32 bits of *vcc* in *wave32* mode."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:387
msgid "64-bit *vector condition code* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:388
msgid "[vcc]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:388 ../../../AMDGPUOperandSyntax.rst:389
msgid "64-bit *vector condition code* register (an alternative syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:389
msgid "[vcc_lo,vcc_hi]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:392
msgid ""
"High and low 32 bits of *vector condition code* may be accessed as separate "
"registers:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:397
msgid "vcc_lo"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:397
msgid "Low 32 bits of *vector condition code* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:398
msgid "vcc_hi"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:398
msgid "High 32 bits of *vector condition code* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:399
msgid "[vcc_lo]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:399
msgid ""
"Low 32 bits of *vector condition code* register (an alternative syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:400
msgid "[vcc_hi]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:400
msgid ""
"High 32 bits of *vector condition code* register (an alternative syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:406 ../../../AMDGPUOperandSyntax.rst:414
msgid "m0"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:408
msgid ""
"A 32-bit memory register. It has various uses, including register indexing "
"and bounds checking."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:414
msgid "A 32-bit *memory* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:415
msgid "[m0]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:415
msgid "A 32-bit *memory* register (an alternative syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:421 ../../../AMDGPUOperandSyntax.rst:432
msgid "exec"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:423
msgid ""
"Execute mask, 64-bits wide. A bit mask with one bit per thread, which is "
"applied to vector instructions and controls which threads execute and which "
"ignore the instruction."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:427
msgid ""
"Note that GFX10 H/W does not use high 32 bits of *exec* in *wave32* mode."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:432
msgid "64-bit *execute mask* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:433
msgid "[exec]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:433 ../../../AMDGPUOperandSyntax.rst:434
msgid "64-bit *execute mask* register (an alternative syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:434
msgid "[exec_lo,exec_hi]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:437
msgid ""
"High and low 32 bits of *execute mask* may be accessed as separate registers:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:442
msgid "exec_lo"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:442
msgid "Low 32 bits of *execute mask* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:443
msgid "exec_hi"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:443
msgid "High 32 bits of *execute mask* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:444
msgid "[exec_lo]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:444
msgid "Low 32 bits of *execute mask* register (an alternative syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:445
msgid "[exec_hi]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:445
msgid "High 32 bits of *execute mask* register (an alternative syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:451
msgid "vccz"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:453
msgid ""
"A single bit flag indicating that the :ref:`vcc<amdgpu_synid_vcc>` is all "
"zeros."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:455
msgid ""
"Note. When GFX10 operates in *wave32* mode, this register reflects state of :"
"ref:`vcc_lo<amdgpu_synid_vcc_lo>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:460
msgid "execz"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:462
msgid ""
"A single bit flag indicating that the :ref:`exec<amdgpu_synid_exec>` is all "
"zeros."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:464
msgid ""
"Note. When GFX10 operates in *wave32* mode, this register reflects state of :"
"ref:`exec_lo<amdgpu_synid_exec>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:469
msgid "scc"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:471
msgid "A single bit flag indicating the result of a scalar compare operation."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:476
msgid "lds_direct"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:478
msgid ""
"A special operand which supplies a 32-bit value fetched from *LDS* memory "
"using :ref:`m0<amdgpu_synid_m0>` as an address."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:484
msgid "null"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:486
msgid ""
"This is a special operand which may be used as a source or a destination."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:488
msgid "When used as a destination, the result of the operation is discarded."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:490
msgid "When used as a source, it supplies zero value."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:492
msgid "GFX10 only."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:494
msgid ""
"Due to a H/W bug, this operand cannot be used with VALU instructions in "
"first generation of GFX10."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:499
msgid "constant"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:501
msgid "A set of integer and floating-point *inline* constants and values:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:503
msgid ":ref:`iconst<amdgpu_synid_iconst>`"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:504
msgid ":ref:`fconst<amdgpu_synid_fconst>`"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:505
msgid ":ref:`ival<amdgpu_synid_ival>`"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:507
msgid ""
"In contrast with :ref:`literals<amdgpu_synid_literal>`, these operands are "
"encoded as a part of instruction."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:509
msgid ""
"If a number may be encoded as either a :ref:`literal<amdgpu_synid_literal>` "
"or a :ref:`constant<amdgpu_synid_constant>`, assembler selects the latter "
"encoding as more efficient."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:517
msgid "iconst"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:519
msgid ""
"An :ref:`integer number<amdgpu_synid_integer_number>` encoded as an *inline "
"constant*."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:522
msgid ""
"Only a small fraction of integer numbers may be encoded as *inline "
"constants*. They are enumerated in the table below. Other integer numbers "
"have to be encoded as :ref:`literals<amdgpu_synid_literal>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:526
msgid ""
"Integer *inline constants* are converted to :ref:`expected operand "
"type<amdgpu_syn_instruction_type>` as described :ref:"
"`here<amdgpu_synid_int_const_conv>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:531 ../../../AMDGPUOperandSyntax.rst:556
msgid "Value"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:531 ../../../AMDGPUOperandSyntax.rst:556
#: ../../../AMDGPUOperandSyntax.rst:583 ../../../AMDGPUOperandSyntax.rst:713
#: ../../../AMDGPUOperandSyntax.rst:998 ../../../AMDGPUOperandSyntax.rst:1052
msgid "Note"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:533
msgid "{0..64}"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:533
msgid "Positive integer inline constants."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:534
msgid "{-16..-1}"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:534
msgid "Negative integer inline constants."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:537 ../../../AMDGPUOperandSyntax.rst:572
msgid "GFX7 does not support inline constants for *f16* operands."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:542
msgid "fconst"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:544
msgid ""
"A :ref:`floating-point number<amdgpu_synid_floating-point_number>` encoded "
"as an *inline constant*."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:547
msgid ""
"Only a small fraction of floating-point numbers may be encoded as *inline "
"constants*. They are enumerated in the table below. Other floating-point "
"numbers have to be encoded as :ref:`literals<amdgpu_synid_literal>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:551
msgid ""
"Floating-point *inline constants* are converted to :ref:`expected operand "
"type<amdgpu_syn_instruction_type>` as described :ref:"
"`here<amdgpu_synid_fp_const_conv>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:558
msgid "0.0"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:558
msgid "The same as integer constant 0."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:558 ../../../AMDGPUOperandSyntax.rst:559
#: ../../../AMDGPUOperandSyntax.rst:560 ../../../AMDGPUOperandSyntax.rst:561
#: ../../../AMDGPUOperandSyntax.rst:562 ../../../AMDGPUOperandSyntax.rst:563
#: ../../../AMDGPUOperandSyntax.rst:564 ../../../AMDGPUOperandSyntax.rst:565
#: ../../../AMDGPUOperandSyntax.rst:566
msgid "All GPUs"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:559
msgid "0.5"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:559
msgid "Floating-point constant 0.5"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:560
msgid "1.0"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:560
msgid "Floating-point constant 1.0"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:561
msgid "2.0"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:561
msgid "Floating-point constant 2.0"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:562
msgid "4.0"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:562
msgid "Floating-point constant 4.0"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:563
msgid "-0.5"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:563
msgid "Floating-point constant -0.5"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:564
msgid "-1.0"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:564
msgid "Floating-point constant -1.0"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:565
msgid "-2.0"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:565
msgid "Floating-point constant -2.0"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:566
msgid "-4.0"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:566
msgid "Floating-point constant -4.0"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:567
msgid "0.1592"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:567
msgid "1.0/(2.0*pi). Use only for 16-bit operands."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:567 ../../../AMDGPUOperandSyntax.rst:568
#: ../../../AMDGPUOperandSyntax.rst:569
msgid "GFX8, GFX9, GFX10"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:568
msgid "0.15915494"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:568
msgid "1.0/(2.0*pi). Use only for 16- and 32-bit operands."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:569
msgid "0.15915494309189532"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:569
msgid "1.0/(2.0*pi)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:577
msgid "ival"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:579
msgid ""
"A symbolic operand encoded as an *inline constant*. These operands provide "
"read-only access to H/W registers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:585
msgid "shared_base"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:585
msgid "Base address of shared memory region."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:585 ../../../AMDGPUOperandSyntax.rst:586
#: ../../../AMDGPUOperandSyntax.rst:587 ../../../AMDGPUOperandSyntax.rst:588
#: ../../../AMDGPUOperandSyntax.rst:589
msgid "GFX9, GFX10"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:586
msgid "shared_limit"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:586
msgid "Address of the end of shared memory region."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:587
msgid "private_base"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:587
msgid "Base address of private memory region."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:588
msgid "private_limit"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:588
msgid "Address of the end of private memory region."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:589
msgid "pops_exiting_wave_id"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:589
msgid "A dedicated counter for POPS."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:595
msgid "literal"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:597
msgid ""
"A literal is a 64-bit value which is encoded as a separate 32-bit dword in "
"the instruction stream."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:599
msgid ""
"If a number may be encoded as either a :ref:`literal<amdgpu_synid_literal>` "
"or an :ref:`inline constant<amdgpu_synid_constant>`, assembler selects the "
"latter encoding as more efficient."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:604
msgid ""
"Literals may be specified as :ref:`integer "
"numbers<amdgpu_synid_integer_number>`, :ref:`floating-point "
"numbers<amdgpu_synid_floating-point_number>` or :ref:"
"`expressions<amdgpu_synid_expression>` (expressions are currently supported "
"for 32-bit operands only)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:609
msgid ""
"A 64-bit literal value is converted by assembler to an :ref:`expected "
"operand type<amdgpu_syn_instruction_type>` as described :ref:"
"`here<amdgpu_synid_lit_conv>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:613
msgid ""
"An instruction may use only one literal but several operands may refer the "
"same literal."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:618
msgid "uimm8"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:620
msgid ""
"A 8-bit positive :ref:`integer number<amdgpu_synid_integer_number>`. The "
"value is encoded as part of the opcode so it is free to use."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:626
msgid "uimm32"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:628
msgid ""
"A 32-bit positive :ref:`integer number<amdgpu_synid_integer_number>`. The "
"value is stored as a separate 32-bit dword in the instruction stream."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:634
msgid "uimm20"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:636
msgid "A 20-bit positive :ref:`integer number<amdgpu_synid_integer_number>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:641
msgid "uimm21"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:643
msgid "A 21-bit positive :ref:`integer number<amdgpu_synid_integer_number>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:645
msgid ""
"Assembler currently supports 20-bit offsets only. Use :ref:"
"`uimm20<amdgpu_synid_uimm20>` as a replacement."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:650
msgid "simm21"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:652
msgid "A 21-bit :ref:`integer number<amdgpu_synid_integer_number>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:654
msgid ""
"Assembler currently supports 20-bit unsigned offsets only. Use :ref:"
"`uimm20<amdgpu_synid_uimm20>` as a replacement."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:659 ../../../AMDGPUOperandSyntax.rst:666
msgid "off"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:661
msgid ""
"A special entity which indicates that the value of this operand is not used."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:666
msgid "Indicates an unused operand."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:673
msgid "Numbers"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:678
msgid "Integer Numbers"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:680
msgid ""
"Integer numbers are 64 bits wide. They may be specified in binary, octal, "
"hexadecimal and decimal formats:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:684 ../../../AMDGPUOperandSyntax.rst:713
msgid "Format"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:686 ../../../AMDGPUOperandSyntax.rst:715
msgid "Decimal"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:686
msgid "[-]?[1-9][0-9]*"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:687
msgid "Binary"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:687
msgid "[-]?0b[01]+"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:688
msgid "Octal"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:688
msgid "[-]?0[0-7]+"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:689 ../../../AMDGPUOperandSyntax.rst:716
msgid "Hexadecimal"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:689
msgid "[-]?0x[0-9a-fA-F]+"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:690
msgid "[-]?[0x]?[0-9][0-9a-fA-F]*[hH]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:706
msgid "Floating-Point Numbers"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:708
msgid "All floating-point numbers are handled as double (64 bits wide)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:710
msgid ""
"Floating-point numbers may be specified in hexadecimal and decimal formats:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:715
msgid "[-]?[0-9]*[.][0-9]*([eE][+-]?[0-9]*)?"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:715
msgid "Must include either a decimal separator or an exponent."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:716
msgid "[-]0x[0-9a-fA-F]*(.[0-9a-fA-F]*)?[pP][+-]?[0-9a-fA-F]+"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:731 ../../../AMDGPUOperandSyntax.rst:1093
msgid "Expressions"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:733
msgid ""
"An expression specifies an address or a numeric value. There are two kinds "
"of expressions:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:736
msgid ":ref:`Absolute<amdgpu_synid_absolute_expression>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:737
msgid ":ref:`Relocatable<amdgpu_synid_relocatable_expression>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:742
msgid "Absolute Expressions"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:744
msgid ""
"The value of an absolute expression remains the same after program "
"relocation. Absolute expressions must not include unassigned and relocatable "
"values such as labels."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:758
msgid "Relocatable Expressions"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:760
msgid "The value of a relocatable expression depends on program relocation."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:762
msgid ""
"Note that use of relocatable expressions is limited with branch targets and "
"32-bit :ref:`literals<amdgpu_synid_literal>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:765
msgid ""
"Addition information about relocation may be found :ref:`here<amdgpu-"
"relocation-records>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:775
msgid "Expression Data Type"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:777
msgid ""
"Expressions and operands of expressions are interpreted as 64-bit integers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:779
msgid ""
"Expressions may include 64-bit :ref:`floating-point "
"numbers<amdgpu_synid_floating-point_number>` (double). However these "
"operands are also handled as 64-bit integers using binary representation of "
"specified floating-point numbers. No conversion from floating-point to "
"integer is performed."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:794
msgid ""
"Expressions are composed of :ref:`symbols<amdgpu_synid_symbol>`, :ref:"
"`integer numbers<amdgpu_synid_integer_number>`, :ref:`floating-point "
"numbers<amdgpu_synid_floating-point_number>`, :ref:`binary "
"operators<amdgpu_synid_expression_bin_op>`, :ref:`unary "
"operators<amdgpu_synid_expression_un_op>` and subexpressions."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:801
msgid ""
"Expressions may also use \".\" which is a reference to the current PC "
"(program counter)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:803
msgid "The syntax of expressions is shown below::"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:838
msgid "Binary Operators"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:840
msgid ""
"Binary operators are described in the following table. They operate on and "
"produce 64-bit integers. Operators with higher priority are performed first."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:845 ../../../AMDGPUOperandSyntax.rst:877
msgid "Operator"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:845
msgid "Priority"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:845 ../../../AMDGPUOperandSyntax.rst:877
#: ../../../AMDGPUOperandSyntax.rst:899
msgid "Meaning"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:847
msgid "\\*"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:847 ../../../AMDGPUOperandSyntax.rst:848
#: ../../../AMDGPUOperandSyntax.rst:849
msgid "5"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:847
msgid "Integer multiplication."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:848
msgid "/"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:848
msgid "Integer division."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:849
msgid "%"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:849
msgid "Integer signed remainder."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:850 ../../../AMDGPUOperandSyntax.rst:881
msgid "\\+"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:850 ../../../AMDGPUOperandSyntax.rst:851
msgid "4"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:850
msgid "Integer addition."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:851 ../../../AMDGPUOperandSyntax.rst:882
#: ../../../AMDGPUOperandSyntax.rst:1056
msgid "\\-"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:851
msgid "Integer subtraction."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:852
msgid "<<"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:852 ../../../AMDGPUOperandSyntax.rst:853
msgid "3"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:852
msgid "Integer shift left."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:853
msgid ">>"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:853
msgid "Logical shift right."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:854
msgid "=="
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:854 ../../../AMDGPUOperandSyntax.rst:855
#: ../../../AMDGPUOperandSyntax.rst:856 ../../../AMDGPUOperandSyntax.rst:857
#: ../../../AMDGPUOperandSyntax.rst:858 ../../../AMDGPUOperandSyntax.rst:859
#: ../../../AMDGPUOperandSyntax.rst:860
msgid "2"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:854
msgid "Equality comparison."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:855
msgid "!="
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:855 ../../../AMDGPUOperandSyntax.rst:856
msgid "Inequality comparison."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:856
msgid "<>"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:857
msgid "<"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:857
msgid "Signed less than comparison."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:858
msgid "<="
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:858
msgid "Signed less than or equal comparison."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:859
msgid ">"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:859
msgid "Signed greater than comparison."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:860
msgid ">="
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:860
msgid "Signed greater than or equal comparison."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:861
msgid "\\|"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:861 ../../../AMDGPUOperandSyntax.rst:862
#: ../../../AMDGPUOperandSyntax.rst:863
msgid "1"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:861
msgid "Bitwise or."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:862
msgid "^"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:862
msgid "Bitwise xor."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:863
msgid "&"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:863
msgid "Bitwise and."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:864
msgid "&&"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:864 ../../../AMDGPUOperandSyntax.rst:865
msgid "0"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:864
msgid "Logical and."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:865
msgid "||"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:865
msgid "Logical or."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:871
msgid "Unary Operators"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:873
msgid ""
"Unary operators are described in the following table. They operate on and "
"produce 64-bit integers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:879
msgid "!"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:879
msgid "Logical negation."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:880
msgid "~"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:880
msgid "Bitwise negation."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:881
msgid "Integer unary plus."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:882
msgid "Integer unary minus."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:888
msgid "Symbols"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:890
msgid ""
"A symbol is a named 64-bit value, representing a relocatable address or an "
"absolute (non-relocatable) number."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:894
msgid "Symbol names have the following syntax:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:894
msgid "``[a-zA-Z_.][a-zA-Z0-9_$.@]*``"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:896
msgid ""
"The table below provides several examples of syntax used for symbol "
"definition."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:901
msgid ".globl <S>"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:901
msgid "Declares a global symbol S without assigning it a value."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:902
msgid ".set <S>, <E>"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:902 ../../../AMDGPUOperandSyntax.rst:903
msgid "Assigns the value of an expression E to a symbol S."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:903
msgid "<S> = <E>"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:904
msgid "<S>:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:904
msgid "Declares a label S and assigns it the current PC value."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:907
msgid ""
"A symbol may be used before it is declared or assigned; unassigned symbols "
"are assumed to be PC-relative."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:910
msgid ""
"Addition information about symbols may be found :ref:`here<amdgpu-symbols>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:915
msgid "Conversions"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:917
msgid ""
"This section describes what happens when a 64-bit :ref:`integer "
"number<amdgpu_synid_integer_number>`, a :ref:`floating-point "
"numbers<amdgpu_synid_floating-point_number>` or a :ref:"
"`symbol<amdgpu_synid_symbol>` is used for an operand which has a different "
"type or size."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:923
msgid ""
"Depending on operand kind, this conversion is performed by either assembler "
"or AMDGPU H/W:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:925
msgid ""
"Values encoded as :ref:`inline constants<amdgpu_synid_constant>` are handled "
"by H/W."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:926
msgid ""
"Values encoded as :ref:`literals<amdgpu_synid_literal>` are converted by "
"assembler."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:931
msgid "Inline Constants"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:936
msgid "Integer Inline Constants"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:938
msgid ""
"Integer :ref:`inline constants<amdgpu_synid_constant>` may be thought of as "
"64-bit :ref:`integer numbers<amdgpu_synid_integer_number>`; when used as "
"operands they are truncated to the size of :ref:`expected operand "
"type<amdgpu_syn_instruction_type>`. No data type conversions are performed."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:960
msgid "Floating-Point Inline Constants"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:962
msgid ""
"Floating-point :ref:`inline constants<amdgpu_synid_constant>` may be thought "
"of as 64-bit :ref:`floating-point numbers<amdgpu_synid_floating-"
"point_number>`; when used as operands they are converted to a floating-point "
"number of :ref:`expected operand size<amdgpu_syn_instruction_type>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:984
msgid "Literals"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:989
msgid "Integer Literals"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:991
msgid ""
"Integer :ref:`literals<amdgpu_synid_literal>` are specified as 64-bit :ref:"
"`integer numbers<amdgpu_synid_integer_number>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:994 ../../../AMDGPUOperandSyntax.rst:1048
msgid ""
"When used as operands they are converted to :ref:`expected operand "
"type<amdgpu_syn_instruction_type>` as described below."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:998 ../../../AMDGPUOperandSyntax.rst:1052
msgid "Expected type"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:998 ../../../AMDGPUOperandSyntax.rst:1052
msgid "Condition"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:998 ../../../AMDGPUOperandSyntax.rst:1052
msgid "Result"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1000 ../../../AMDGPUOperandSyntax.rst:1054
msgid "i16, u16, b16"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1000 ../../../AMDGPUOperandSyntax.rst:1004
#: ../../../AMDGPUOperandSyntax.rst:1054 ../../../AMDGPUOperandSyntax.rst:1057
msgid "cond(num,16)"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1000 ../../../AMDGPUOperandSyntax.rst:1004
msgid "num.u16"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1000
msgid "Truncate to 16 bits."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1001 ../../../AMDGPUOperandSyntax.rst:1055
msgid "i32, u32, b32"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1001 ../../../AMDGPUOperandSyntax.rst:1002
#: ../../../AMDGPUOperandSyntax.rst:1003 ../../../AMDGPUOperandSyntax.rst:1005
#: ../../../AMDGPUOperandSyntax.rst:1006 ../../../AMDGPUOperandSyntax.rst:1055
#: ../../../AMDGPUOperandSyntax.rst:1058
msgid "cond(num,32)"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1001 ../../../AMDGPUOperandSyntax.rst:1005
msgid "num.u32"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1001
msgid "Truncate to 32 bits."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1002
msgid "i64"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1002
msgid "{-1,num.i32}"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1002
msgid "Truncate to 32 bits and then sign-extend the result to 64 bits."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1003
msgid "u64, b64"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1003
msgid "{ 0,num.u32}"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1003
msgid "Truncate to 32 bits and then zero-extend the result to 64 bits."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1004 ../../../AMDGPUOperandSyntax.rst:1057
msgid "f16"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1004
msgid "Use low 16 bits as an f16 value."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1005 ../../../AMDGPUOperandSyntax.rst:1058
msgid "f32"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1005
msgid "Use low 32 bits as an f32 value."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1006 ../../../AMDGPUOperandSyntax.rst:1059
msgid "f64"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1006
msgid "{num.u32,0}"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1006
msgid ""
"Use low 32 bits of the number as high 32 bits of the result; low 32 bits of "
"the result are zeroed."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1010
msgid ""
"The condition *cond(X,S)* indicates if a 64-bit number *X* can be converted "
"to a smaller size *S* by truncation of upper bits. There are two cases when "
"the conversion is possible:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1014
msgid "The truncated bits are all 0."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1015
msgid ""
"The truncated bits are all 1 and the value after truncation has its MSB bit "
"set."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1017 ../../../AMDGPUOperandSyntax.rst:1069
msgid "Examples of valid literals:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1031 ../../../AMDGPUOperandSyntax.rst:1082
msgid "Examples of invalid literals:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1043
msgid "Floating-Point Literals"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1045
msgid ""
"Floating-point :ref:`literals<amdgpu_synid_literal>` are specified as 64-"
"bit :ref:`floating-point numbers<amdgpu_synid_floating-point_number>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1054 ../../../AMDGPUOperandSyntax.rst:1057
msgid "f16(num)"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1054
msgid "Convert to f16 and use bits of the result as an integer value."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1055 ../../../AMDGPUOperandSyntax.rst:1058
msgid "f32(num)"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1055
msgid "Convert to f32 and use bits of the result as an integer value."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1056
msgid "i64, u64, b64"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1056
msgid "false"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1056
msgid "Conversion disabled because of an unclear semantics."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1057
msgid "Convert to f16."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1058
msgid "Convert to f32."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1059
msgid "true"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1059
msgid "{num.u32.hi,0}"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1059
msgid ""
"Use high 32 bits of the number as high 32 bits of the result; zero-fill low "
"32 bits of the result."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1062
msgid "Note that the result may differ from the original number."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1065
msgid ""
"The condition *cond(X,S)* indicates if an f64 number *X* can be converted to "
"a smaller *S*-bit floating-point type without overflow or underflow. "
"Precision lost is allowed."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1095
msgid "Expressions operate with and result in 64-bit integers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1097
msgid ""
"When used as operands they are truncated to :ref:`expected operand "
"size<amdgpu_syn_instruction_type>`. No data type conversions are performed."
msgstr ""
