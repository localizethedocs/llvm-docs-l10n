# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 17\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../RISCVUsage.rst:3
msgid "User Guide for RISC-V Target"
msgstr ""

#: ../../../RISCVUsage.rst:9
msgid "Introduction"
msgstr ""

#: ../../../RISCVUsage.rst:11
msgid ""
"The RISC-V target provides code generation for processors implementing "
"supported variations of the RISC-V specification.  It lives in the ``llvm/"
"lib/Target/RISCV`` directory."
msgstr ""

#: ../../../RISCVUsage.rst:16
msgid "Specification Documents"
msgstr ""

#: ../../../RISCVUsage.rst:18
msgid ""
"There have been a number of revisions to the RISC-V specifications. LLVM "
"aims to implement the most recent ratified version of the standard RISC-V "
"base ISAs and ISA extensions with pragmatic variances. The most recent "
"specification can be found at: https://github.com/riscv/riscv-isa-manual/"
"releases/."
msgstr ""

#: ../../../RISCVUsage.rst:23
msgid ""
"`The official RISC-V International specification page <https://riscv.org/"
"technical/specifications/>`_. is also worth checking, but tends to "
"significantly lag the specifications linked above. Make sure to check the "
"`wiki for not yet integrated extensions <https://wiki.riscv.org/display/HOME/"
"Recently+Ratified+Extensions>`_ and note that in addition, we sometimes "
"carry support for extensions that have not yet been ratified (these will be "
"marked as experimental - see below) and support various vendor-specific "
"extensions (see below)."
msgstr ""

#: ../../../RISCVUsage.rst:32
msgid "The current known variances from the specification are:"
msgstr ""

#: ../../../RISCVUsage.rst:34
msgid ""
"Unconditionally allowing instructions from zifencei, zicsr, zicntr, and "
"zihpm without gating them on the extensions being enabled.  Previous "
"revisions of the specification included these instructions in the base ISA, "
"and we preserve this behavior to avoid breaking existing code.  If a future "
"revision of the specification reuses these opcodes for other extensions, we "
"may need to reevaluate this choice, and thus recommend users migrate build "
"systems so as not to rely on this."
msgstr ""

#: ../../../RISCVUsage.rst:41
msgid ""
"Allowing CSRs to be named without gating on specific extensions.  This "
"applies to all CSR names, not just those in zicsr, zicntr, and zihpm."
msgstr ""

#: ../../../RISCVUsage.rst:43
msgid ""
"The ordering of ``z*``, ``s*``, and ``x*`` prefixed extension names is not "
"enforced in user-specified ISA naming strings (e.g. ``-march``)."
msgstr ""

#: ../../../RISCVUsage.rst:46
msgid ""
"We are actively deciding not to support multiple specification revisions at "
"this time. We acknowledge a likely future need, but actively defer the "
"decisions making around handling this until we have a concrete example of "
"real hardware having shipped and an incompatible change to the specification "
"made afterwards."
msgstr ""

#: ../../../RISCVUsage.rst:53
msgid "Base ISAs"
msgstr ""

#: ../../../RISCVUsage.rst:55
msgid ""
"The specification defines five base instruction sets: RV32I, RV32E, RV64I, "
"RV64E, and RV128I. Currently, LLVM fully supports RV32I, and RV64I.  RV32E "
"and RV64E are supported by the assembly-based tools only.  RV128I is not "
"supported."
msgstr ""

#: ../../../RISCVUsage.rst:59
msgid "To specify the target triple:"
msgstr ""

#: ../../../RISCVUsage.rst:61
msgid "RISC-V Architectures"
msgstr ""

#: ../../../RISCVUsage.rst:64
msgid "Architecture"
msgstr ""

#: ../../../RISCVUsage.rst:64
msgid "Description"
msgstr ""

#: ../../../RISCVUsage.rst:66
msgid "``riscv32``"
msgstr ""

#: ../../../RISCVUsage.rst:66
msgid "RISC-V with XLEN=32 (i.e. RV32I or RV32E)"
msgstr ""

#: ../../../RISCVUsage.rst:67
msgid "``riscv64``"
msgstr ""

#: ../../../RISCVUsage.rst:67
msgid "RISC-V with XLEN=64 (i.e. RV64I or RV64E)"
msgstr ""

#: ../../../RISCVUsage.rst:70
msgid ""
"To select an E variant ISA (e.g. RV32E instead of RV32I), use the base "
"architecture string (e.g. ``riscv32``) with the extension ``e``."
msgstr ""

#: ../../../RISCVUsage.rst:76
msgid "Extensions"
msgstr ""

#: ../../../RISCVUsage.rst:78
msgid ""
"The following table provides a status summary for extensions which have been "
"ratified and thus have finalized specifications.  When relevant, detailed "
"notes on support follow."
msgstr ""

#: ../../../RISCVUsage.rst:82
msgid "Ratified Extensions by Status"
msgstr ""

#: ../../../RISCVUsage.rst:85
msgid "Extension"
msgstr ""

#: ../../../RISCVUsage.rst:85
msgid "Status"
msgstr ""

#: ../../../RISCVUsage.rst:87
msgid "``A``"
msgstr ""

#: ../../../RISCVUsage.rst:87 ../../../RISCVUsage.rst:88
#: ../../../RISCVUsage.rst:89 ../../../RISCVUsage.rst:90
#: ../../../RISCVUsage.rst:92 ../../../RISCVUsage.rst:95
#: ../../../RISCVUsage.rst:96 ../../../RISCVUsage.rst:98
#: ../../../RISCVUsage.rst:99 ../../../RISCVUsage.rst:100
#: ../../../RISCVUsage.rst:102 ../../../RISCVUsage.rst:104
#: ../../../RISCVUsage.rst:105 ../../../RISCVUsage.rst:106
#: ../../../RISCVUsage.rst:107 ../../../RISCVUsage.rst:108
#: ../../../RISCVUsage.rst:111 ../../../RISCVUsage.rst:112
#: ../../../RISCVUsage.rst:113 ../../../RISCVUsage.rst:114
#: ../../../RISCVUsage.rst:115 ../../../RISCVUsage.rst:116
#: ../../../RISCVUsage.rst:125 ../../../RISCVUsage.rst:131
#: ../../../RISCVUsage.rst:132 ../../../RISCVUsage.rst:133
#: ../../../RISCVUsage.rst:134 ../../../RISCVUsage.rst:135
#: ../../../RISCVUsage.rst:138 ../../../RISCVUsage.rst:139
#: ../../../RISCVUsage.rst:140 ../../../RISCVUsage.rst:141
#: ../../../RISCVUsage.rst:143 ../../../RISCVUsage.rst:144
#: ../../../RISCVUsage.rst:145 ../../../RISCVUsage.rst:146
#: ../../../RISCVUsage.rst:147 ../../../RISCVUsage.rst:148
#: ../../../RISCVUsage.rst:149 ../../../RISCVUsage.rst:150
#: ../../../RISCVUsage.rst:151 ../../../RISCVUsage.rst:152
#: ../../../RISCVUsage.rst:153 ../../../RISCVUsage.rst:160
msgid "Supported"
msgstr ""

#: ../../../RISCVUsage.rst:88
msgid "``C``"
msgstr ""

#: ../../../RISCVUsage.rst:89
msgid "``D``"
msgstr ""

#: ../../../RISCVUsage.rst:90
msgid "``F``"
msgstr ""

#: ../../../RISCVUsage.rst:91
msgid "``H``"
msgstr ""

#: ../../../RISCVUsage.rst:91 ../../../RISCVUsage.rst:93
#: ../../../RISCVUsage.rst:94 ../../../RISCVUsage.rst:97
#: ../../../RISCVUsage.rst:109 ../../../RISCVUsage.rst:110
#: ../../../RISCVUsage.rst:117 ../../../RISCVUsage.rst:118
#: ../../../RISCVUsage.rst:119 ../../../RISCVUsage.rst:123
#: ../../../RISCVUsage.rst:157
msgid "Assembly Support"
msgstr ""

#: ../../../RISCVUsage.rst:92
msgid "``M``"
msgstr ""

#: ../../../RISCVUsage.rst:93
msgid "``Svinval``"
msgstr ""

#: ../../../RISCVUsage.rst:94
msgid "``Svnapot``"
msgstr ""

#: ../../../RISCVUsage.rst:95
msgid "``Svpbmt``"
msgstr ""

#: ../../../RISCVUsage.rst:96
msgid "``V``"
msgstr ""

#: ../../../RISCVUsage.rst:97
msgid "``Zawrs``"
msgstr ""

#: ../../../RISCVUsage.rst:98
msgid "``Zba``"
msgstr ""

#: ../../../RISCVUsage.rst:99
msgid "``Zbb``"
msgstr ""

#: ../../../RISCVUsage.rst:100
msgid "``Zbc``"
msgstr ""

#: ../../../RISCVUsage.rst:101
msgid "``Zbkb``"
msgstr ""

#: ../../../RISCVUsage.rst:101 ../../../RISCVUsage.rst:103
msgid "Supported (`See note <#riscv-scalar-crypto-note1>`__)"
msgstr ""

#: ../../../RISCVUsage.rst:102
msgid "``Zbkc``"
msgstr ""

#: ../../../RISCVUsage.rst:103
msgid "``Zbkx``"
msgstr ""

#: ../../../RISCVUsage.rst:104
msgid "``Zbs``"
msgstr ""

#: ../../../RISCVUsage.rst:105
msgid "``Zca``"
msgstr ""

#: ../../../RISCVUsage.rst:106
msgid "``Zcb``"
msgstr ""

#: ../../../RISCVUsage.rst:107
msgid "``Zcd``"
msgstr ""

#: ../../../RISCVUsage.rst:108
msgid "``Zcf``"
msgstr ""

#: ../../../RISCVUsage.rst:109
msgid "``Zcmp``"
msgstr ""

#: ../../../RISCVUsage.rst:110
msgid "``Zcmt``"
msgstr ""

#: ../../../RISCVUsage.rst:111
msgid "``Zdinx``"
msgstr ""

#: ../../../RISCVUsage.rst:112
msgid "``Zfh``"
msgstr ""

#: ../../../RISCVUsage.rst:113
msgid "``Zfhmin``"
msgstr ""

#: ../../../RISCVUsage.rst:114
msgid "``Zfinx``"
msgstr ""

#: ../../../RISCVUsage.rst:115
msgid "``Zhinx``"
msgstr ""

#: ../../../RISCVUsage.rst:116
msgid "``Zhinxmin``"
msgstr ""

#: ../../../RISCVUsage.rst:117
msgid "``Zicbom``"
msgstr ""

#: ../../../RISCVUsage.rst:118
msgid "``Zicbop``"
msgstr ""

#: ../../../RISCVUsage.rst:119
msgid "``Zicboz``"
msgstr ""

#: ../../../RISCVUsage.rst:120
msgid "``Zicntr``"
msgstr ""

#: ../../../RISCVUsage.rst:120 ../../../RISCVUsage.rst:121
#: ../../../RISCVUsage.rst:122 ../../../RISCVUsage.rst:124
msgid "(`See Note <#riscv-i2p1-note>`__)"
msgstr ""

#: ../../../RISCVUsage.rst:121
msgid "``Zicsr``"
msgstr ""

#: ../../../RISCVUsage.rst:122
msgid "``Zifencei``"
msgstr ""

#: ../../../RISCVUsage.rst:123
msgid "``Zihintpause``"
msgstr ""

#: ../../../RISCVUsage.rst:124
msgid "``Zihpm``"
msgstr ""

#: ../../../RISCVUsage.rst:125
msgid "``Zkn``"
msgstr ""

#: ../../../RISCVUsage.rst:126
msgid "``Zknd``"
msgstr ""

#: ../../../RISCVUsage.rst:126 ../../../RISCVUsage.rst:127
#: ../../../RISCVUsage.rst:128 ../../../RISCVUsage.rst:129
#: ../../../RISCVUsage.rst:130
msgid "Supported (`See note <#riscv-scalar-crypto-note2>`__)"
msgstr ""

#: ../../../RISCVUsage.rst:127
msgid "``Zkne``"
msgstr ""

#: ../../../RISCVUsage.rst:128
msgid "``Zknh``"
msgstr ""

#: ../../../RISCVUsage.rst:129
msgid "``Zksed``"
msgstr ""

#: ../../../RISCVUsage.rst:130
msgid "``Zksh``"
msgstr ""

#: ../../../RISCVUsage.rst:131
msgid "``Zk``"
msgstr ""

#: ../../../RISCVUsage.rst:132
msgid "``Zkr``"
msgstr ""

#: ../../../RISCVUsage.rst:133
msgid "``Zks``"
msgstr ""

#: ../../../RISCVUsage.rst:134
msgid "``Zkt``"
msgstr ""

#: ../../../RISCVUsage.rst:135
msgid "``Zmmul``"
msgstr ""

#: ../../../RISCVUsage.rst:136
msgid "``Zve32x``"
msgstr ""

#: ../../../RISCVUsage.rst:136 ../../../RISCVUsage.rst:137
#: ../../../RISCVUsage.rst:142
msgid "(`Partially <#riscv-vlen-32-note>`__) Supported"
msgstr ""

#: ../../../RISCVUsage.rst:137
msgid "``Zve32f``"
msgstr ""

#: ../../../RISCVUsage.rst:138
msgid "``Zve64x``"
msgstr ""

#: ../../../RISCVUsage.rst:139
msgid "``Zve64f``"
msgstr ""

#: ../../../RISCVUsage.rst:140
msgid "``Zve64d``"
msgstr ""

#: ../../../RISCVUsage.rst:141
msgid "``Zvfh``"
msgstr ""

#: ../../../RISCVUsage.rst:142
msgid "``Zvl32b``"
msgstr ""

#: ../../../RISCVUsage.rst:143
msgid "``Zvl64b``"
msgstr ""

#: ../../../RISCVUsage.rst:144
msgid "``Zvl128b``"
msgstr ""

#: ../../../RISCVUsage.rst:145
msgid "``Zvl256b``"
msgstr ""

#: ../../../RISCVUsage.rst:146
msgid "``Zvl512b``"
msgstr ""

#: ../../../RISCVUsage.rst:147
msgid "``Zvl1024b``"
msgstr ""

#: ../../../RISCVUsage.rst:148
msgid "``Zvl2048b``"
msgstr ""

#: ../../../RISCVUsage.rst:149
msgid "``Zvl4096b``"
msgstr ""

#: ../../../RISCVUsage.rst:150
msgid "``Zvl8192b``"
msgstr ""

#: ../../../RISCVUsage.rst:151
msgid "``Zvl16384b``"
msgstr ""

#: ../../../RISCVUsage.rst:152
msgid "``Zvl32768b``"
msgstr ""

#: ../../../RISCVUsage.rst:153
msgid "``Zvl65536b``"
msgstr ""

#: ../../../RISCVUsage.rst:157
msgid ""
"LLVM supports the associated instructions in assembly.  All assembly related "
"tools (e.g. assembler, disassembler, llvm-objdump, etc..) are supported.  "
"Compiler and linker will accept extension names, and linked binaries will "
"contain appropriate ELF flags and attributes to reflect use of named "
"extension."
msgstr ""

#: ../../../RISCVUsage.rst:160
msgid ""
"Fully supported by the compiler.  This includes everything in Assembly "
"Support, along with - if relevant - C language intrinsics for the "
"instructions and pattern matching by the compiler to recognize idiomatic "
"patterns which can be lowered to the associated instructions."
msgstr ""

#: ../../../RISCVUsage.rst:165
msgid "``Zbkb``, ``Zbkx``"
msgstr ""

#: ../../../RISCVUsage.rst:165
msgid "Pattern matching support for these instructions is incomplete."
msgstr ""

#: ../../../RISCVUsage.rst:170
msgid "``Zknd``, ``Zkne``, ``Zknh``, ``Zksed``, ``Zksh``"
msgstr ""

#: ../../../RISCVUsage.rst:170
msgid ""
"No pattern matching exists.  As a result, these instructions can only be "
"used from assembler or via intrinsic calls."
msgstr ""

#: ../../../RISCVUsage.rst:175
msgid "``Zve32x``, ``Zve32f``, ``Zvl32b``"
msgstr ""

#: ../../../RISCVUsage.rst:175
msgid ""
"LLVM currently assumes a minimum VLEN (vector register width) of 64 bits "
"during compilation, and as a result ``Zve32x`` and ``Zve32f`` are supported "
"only for VLEN>=64.  Assembly support doesn't have this restriction."
msgstr ""

#: ../../../RISCVUsage.rst:180
msgid "``zicntr``, ``zicsr``, ``zifencei``, ``zihpm``"
msgstr ""

#: ../../../RISCVUsage.rst:180
msgid ""
"Between versions 2.0 and 2.1 of the base I specification, a backwards "
"incompatible change was made to remove selected instructions and CSRs from "
"the base ISA.  These instructions were grouped into a set of new extensions, "
"but were no longer required by the base ISA.  This change is partially "
"described in \"Preface to Document Version 20190608-Base-Ratified\" from the "
"specification document (the ``zicntr`` and ``zihpm`` bits are not "
"mentioned).  LLVM currently implements version 2.1 of the base "
"specification. To maintain compatibility, instructions from these extensions "
"are accepted without being in the ``-march`` string.  LLVM also allows the "
"explicit specification of the extensions in an ``-march`` string."
msgstr ""

#: ../../../RISCVUsage.rst:183
msgid "Experimental Extensions"
msgstr ""

#: ../../../RISCVUsage.rst:185
msgid ""
"LLVM supports (to various degrees) a number of experimental extensions.  All "
"experimental extensions have ``experimental-`` as a prefix.  There is "
"explicitly no compatibility promised between versions of the toolchain, and "
"regular users are strongly advised *not* to make use of experimental "
"extensions before they reach ratification."
msgstr ""

#: ../../../RISCVUsage.rst:187
msgid ""
"The primary goal of experimental support is to assist in the process of "
"ratification by providing an existence proof of an implementation, and "
"simplifying efforts to validate the value of a proposed extension against "
"large code bases.  Experimental extensions are expected to either transition "
"to ratified status, or be eventually removed.  The decision on whether to "
"accept an experimental extension is currently done on an entirely case by "
"case basis; if you want to propose one, attending the bi-weekly RISC-V sync-"
"up call is strongly advised."
msgstr ""

#: ../../../RISCVUsage.rst:190
msgid "``experimental-smaia``"
msgstr ""

#: ../../../RISCVUsage.rst:190 ../../../RISCVUsage.rst:193
msgid ""
"LLVM implements the `Ratification candidate 3 <https://github.com/riscv/"
"riscv-aia/releases/tag/1.0-RC3>`_."
msgstr ""

#: ../../../RISCVUsage.rst:193
msgid "``experimental-ssaia``"
msgstr ""

#: ../../../RISCVUsage.rst:196
msgid "``experimental-zacas``"
msgstr ""

#: ../../../RISCVUsage.rst:196
msgid ""
"LLVM implements the `1.0-rc1 draft specification <https://github.com/riscv/"
"riscv-zacas/releases/tag/v1.0-rc1>`_."
msgstr ""

#: ../../../RISCVUsage.rst:199
msgid "``experimental-zfa``"
msgstr ""

#: ../../../RISCVUsage.rst:199
msgid ""
"LLVM implements the `0.2 draft specification <https://github.com/riscv/riscv-"
"isa-manual/releases/download/draft-20230131-c0b298a/zfa-20230414.pdf>`__."
msgstr ""

#: ../../../RISCVUsage.rst:202
msgid ""
"``experimental-zfbfmin``, ``experimental-zvfbfmin``, ``experimental-"
"zvfbfwma``"
msgstr ""

#: ../../../RISCVUsage.rst:202
msgid ""
"LLVM implements assembler support for the `0.6.9 draft specification "
"<https://github.com/riscv/riscv-bfloat16/releases/tag/20230614>`_."
msgstr ""

#: ../../../RISCVUsage.rst:205
msgid "``experimental-zicond``"
msgstr ""

#: ../../../RISCVUsage.rst:205
msgid ""
"LLVM implements the `1.0-rc1 draft specification <https://github.com/riscv/"
"riscv-zicond/releases/tag/v1.0-rc1>`__."
msgstr ""

#: ../../../RISCVUsage.rst:208
msgid "``experimental-zihintntl``"
msgstr ""

#: ../../../RISCVUsage.rst:208
msgid ""
"LLVM implements the `0.2 draft specification <https://github.com/riscv/riscv-"
"isa-manual/releases/tag/draft-20220831-bf5a151>`__."
msgstr ""

#: ../../../RISCVUsage.rst:211
msgid "``experimental-ztso``"
msgstr ""

#: ../../../RISCVUsage.rst:211
msgid ""
"LLVM implements the `v0.1 proposed specification <https://github.com/riscv/"
"riscv-isa-manual/releases/download/draft-20220723-10eea63/riscv-spec.pdf>`__ "
"(see Chapter 25).  The mapping from the C/C++ memory model to Ztso has not "
"yet been ratified in any standards document.  There are multiple possible "
"mappings, and they are *not* mutually ABI compatible.  The mapping LLVM "
"implements is ABI compatible with the default WMO mapping.  This mapping may "
"change and there is *explicitly* no ABI stability offered while the "
"extension remains in experimental status.  User beware."
msgstr ""

#: ../../../RISCVUsage.rst:214
msgid ""
"``experimental-zvbb``, ``experimental-zvbc``, ``experimental-zvkg``, "
"``experimental-zvkn``, ``experimental-zvknc``, ``experimental-zvkned``, "
"``experimental-zvkng``, ``experimental-zvknha``, ``experimental-zvknhb``, "
"``experimental-zvks``, ``experimental-zvksc``, ``experimental-zvksed``, "
"``experimental-zvksg``, ``experimental-zvksh``, ``experimental-zvkt``"
msgstr ""

#: ../../../RISCVUsage.rst:214
msgid ""
"LLVM implements the `1.0.0-rc1 specification <https://github.com/riscv/riscv-"
"crypto/releases/download/v20230620/riscv-crypto-spec-vector.pdf>`__. Note "
"that current vector crypto extension version can be found in: <https://"
"github.com/riscv/riscv-crypto>."
msgstr ""

#: ../../../RISCVUsage.rst:216
msgid ""
"To use an experimental extension from `clang`, you must add `-menable-"
"experimental-extensions` to the command line, and specify the exact version "
"of the experimental extension you are using.  To use an experimental "
"extension with LLVM's internal developer tools (e.g. `llc`, `llvm-objdump`, "
"`llvm-mc`), you must prefix the extension name with `experimental-`.  Note "
"that you don't need to specify the version with internal tools, and "
"shouldn't include the `experimental-` prefix with `clang`."
msgstr ""

#: ../../../RISCVUsage.rst:219
msgid "Vendor Extensions"
msgstr ""

#: ../../../RISCVUsage.rst:221
msgid ""
"Vendor extensions are extensions which are not standardized by RISC-V "
"International, and are instead defined by a hardware vendor.  The term "
"vendor extension roughly parallels the definition of a `non-standard` "
"extension from Section 1.3 of the Volume I: RISC-V Unprivileged ISA "
"specification.  In particular, we expect to eventually accept both `custom` "
"extensions and `non-conforming` extensions."
msgstr ""

#: ../../../RISCVUsage.rst:223
msgid ""
"Inclusion of a vendor extension will be considered on a case by case basis.  "
"All proposals should be brought to the bi-weekly RISCV sync calls for "
"discussion.  For a general idea of the factors likely to be considered, "
"please see the `Clang documentation <https://clang.llvm.org/get_involved."
"html>`_."
msgstr ""

#: ../../../RISCVUsage.rst:225
msgid ""
"It is our intention to follow the naming conventions described in `riscv-non-"
"isa/riscv-toolchain-conventions <https://github.com/riscv-non-isa/riscv-"
"toolchain-conventions#conventions-for-vendor-extensions>`_.  Exceptions to "
"this naming will need to be strongly motivated."
msgstr ""

#: ../../../RISCVUsage.rst:227
msgid "The current vendor extensions supported are:"
msgstr ""

#: ../../../RISCVUsage.rst:230
msgid "``XTHeadBa``"
msgstr ""

#: ../../../RISCVUsage.rst:230
msgid ""
"LLVM implements `the THeadBa (address-generation) vendor-defined "
"instructions specified in <https://github.com/T-head-Semi/thead-extension-"
"spec/releases/download/2.2.2/xthead-2023-01-30-2.2.2.pdf>`_  by T-HEAD of "
"Alibaba.  Instructions are prefixed with `th.` as described in the "
"specification."
msgstr ""

#: ../../../RISCVUsage.rst:233
msgid "``XTHeadBb``"
msgstr ""

#: ../../../RISCVUsage.rst:233
msgid ""
"LLVM implements `the THeadBb (basic bit-manipulation) vendor-defined "
"instructions specified in <https://github.com/T-head-Semi/thead-extension-"
"spec/releases/download/2.2.2/xthead-2023-01-30-2.2.2.pdf>`_  by T-HEAD of "
"Alibaba.  Instructions are prefixed with `th.` as described in the "
"specification."
msgstr ""

#: ../../../RISCVUsage.rst:236
msgid "``XTHeadBs``"
msgstr ""

#: ../../../RISCVUsage.rst:236
msgid ""
"LLVM implements `the THeadBs (single-bit operations) vendor-defined "
"instructions specified in <https://github.com/T-head-Semi/thead-extension-"
"spec/releases/download/2.2.2/xthead-2023-01-30-2.2.2.pdf>`_  by T-HEAD of "
"Alibaba.  Instructions are prefixed with `th.` as described in the "
"specification."
msgstr ""

#: ../../../RISCVUsage.rst:239
msgid "``XTHeadCondMov``"
msgstr ""

#: ../../../RISCVUsage.rst:239
msgid ""
"LLVM implements `the THeadCondMov (conditional move) vendor-defined "
"instructions specified in <https://github.com/T-head-Semi/thead-extension-"
"spec/releases/download/2.2.2/xthead-2023-01-30-2.2.2.pdf>`_  by T-HEAD of "
"Alibaba.  Instructions are prefixed with `th.` as described in the "
"specification."
msgstr ""

#: ../../../RISCVUsage.rst:242
msgid "``XTHeadCmo``"
msgstr ""

#: ../../../RISCVUsage.rst:242
msgid ""
"LLVM implements `the THeadCmo (cache management operations) vendor-defined "
"instructions specified in <https://github.com/T-head-Semi/thead-extension-"
"spec/releases/download/2.2.2/xthead-2023-01-30-2.2.2.pdf>`_  by T-HEAD of "
"Alibaba.  Instructions are prefixed with `th.` as described in the "
"specification."
msgstr ""

#: ../../../RISCVUsage.rst:245
msgid "``XTHeadFMemIdx``"
msgstr ""

#: ../../../RISCVUsage.rst:245
msgid ""
"LLVM implements `the THeadFMemIdx (indexed memory operations for floating "
"point) vendor-defined instructions specified in <https://github.com/T-head-"
"Semi/thead-extension-spec/releases/download/2.2.2/xthead-2023-01-30-2.2.2."
"pdf>`_  by T-HEAD of Alibaba.  Instructions are prefixed with `th.` as "
"described in the specification."
msgstr ""

#: ../../../RISCVUsage.rst:248
msgid "``XTheadMac``"
msgstr ""

#: ../../../RISCVUsage.rst:248
msgid ""
"LLVM implements `the XTheadMac (multiply-accumulate instructions) vendor-"
"defined instructions specified in <https://github.com/T-head-Semi/thead-"
"extension-spec/releases/download/2.2.2/xthead-2023-01-30-2.2.2.pdf>`_  by T-"
"HEAD of Alibaba.  Instructions are prefixed with `th.` as described in the "
"specification."
msgstr ""

#: ../../../RISCVUsage.rst:251
msgid "``XTHeadMemIdx``"
msgstr ""

#: ../../../RISCVUsage.rst:251
msgid ""
"LLVM implements `the THeadMemIdx (indexed memory operations) vendor-defined "
"instructions specified in <https://github.com/T-head-Semi/thead-extension-"
"spec/releases/download/2.2.2/xthead-2023-01-30-2.2.2.pdf>`_  by T-HEAD of "
"Alibaba.  Instructions are prefixed with `th.` as described in the "
"specification."
msgstr ""

#: ../../../RISCVUsage.rst:254
msgid "``XTHeadMemPair``"
msgstr ""

#: ../../../RISCVUsage.rst:254
msgid ""
"LLVM implements `the THeadMemPair (two-GPR memory operations) vendor-defined "
"instructions specified in <https://github.com/T-head-Semi/thead-extension-"
"spec/releases/download/2.2.2/xthead-2023-01-30-2.2.2.pdf>`_  by T-HEAD of "
"Alibaba.  Instructions are prefixed with `th.` as described in the "
"specification."
msgstr ""

#: ../../../RISCVUsage.rst:257
msgid "``XTHeadSync``"
msgstr ""

#: ../../../RISCVUsage.rst:257
msgid ""
"LLVM implements `the THeadSync (multi-core synchronization instructions) "
"vendor-defined instructions specified in <https://github.com/T-head-Semi/"
"thead-extension-spec/releases/download/2.2.2/xthead-2023-01-30-2.2.2.pdf>`_  "
"by T-HEAD of Alibaba.  Instructions are prefixed with `th.` as described in "
"the specification."
msgstr ""

#: ../../../RISCVUsage.rst:260
msgid "``XTHeadVdot``"
msgstr ""

#: ../../../RISCVUsage.rst:260
msgid ""
"LLVM implements `version 1.0.0 of the THeadV-family custom instructions "
"specification <https://github.com/T-head-Semi/thead-extension-spec/releases/"
"download/2.2.0/xthead-2022-12-04-2.2.0.pdf>`_ by T-HEAD of Alibaba.  All "
"instructions are prefixed with `th.` as described in the specification, and "
"the riscv-toolchain-convention document linked above."
msgstr ""

#: ../../../RISCVUsage.rst:263
msgid "``XVentanaCondOps``"
msgstr ""

#: ../../../RISCVUsage.rst:263
msgid ""
"LLVM implements `version 1.0.0 of the VTx-family custom instructions "
"specification <https://github.com/ventanamicro/ventana-custom-extensions/"
"releases/download/v1.0.0/ventana-custom-extensions-v1.0.0.pdf>`_ by Ventana "
"Micro Systems.  All instructions are prefixed with `vt.` as described in the "
"specification, and the riscv-toolchain-convention document linked above.  "
"These instructions are only available for riscv64 at this time."
msgstr ""

#: ../../../RISCVUsage.rst:266
msgid "``XSfvcp``"
msgstr ""

#: ../../../RISCVUsage.rst:266
msgid ""
"LLVM implements `version 1.0.0 of the SiFive Vector Coprocessor Interface "
"(VCIX) Software Specification <https://sifive.cdn.prismic.io/sifive/"
"c3829e36-8552-41f0-a841-79945784241b_vcix-spec-software.pdf>`_ by SiFive.  "
"All instructions are prefixed with `sf.vc.` as described in the "
"specification, and the riscv-toolchain-convention document linked above."
msgstr ""

#: ../../../RISCVUsage.rst:269
msgid "``XCVbitmanip``"
msgstr ""

#: ../../../RISCVUsage.rst:269
msgid ""
"LLVM implements `version 1.0.0 of the CORE-V Bit Manipulation custom "
"instructions specification <https://github.com/openhwgroup/cv32e40p/"
"blob/62bec66b36182215e18c9cf10f723567e23878e9/docs/source/"
"instruction_set_extensions.rst>`_ by OpenHW Group.  All instructions are "
"prefixed with `cv.` as described in the specification."
msgstr ""

#: ../../../RISCVUsage.rst:272
msgid "``XCVmac``"
msgstr ""

#: ../../../RISCVUsage.rst:272
msgid ""
"LLVM implements `version 1.0.0 of the CORE-V Multiply-Accumulate (MAC) "
"custom instructions specification <https://github.com/openhwgroup/cv32e40p/"
"blob/4f024fe4b15a68b76615b0630c07a6745c620da7/docs/source/"
"instruction_set_extensions.rst>`_ by OpenHW Group.  All instructions are "
"prefixed with `cv.mac` as described in the specification. These instructions "
"are only available for riscv32 at this time."
msgstr ""

#: ../../../RISCVUsage.rst:274
msgid "``XSfcie``"
msgstr ""

#: ../../../RISCVUsage.rst:275
msgid ""
"LLVM implements `version 1.0.0 of the SiFive Custom Instruction Extension "
"(CIE) Software Specification <https://sifive.cdn.prismic.io/"
"sifive/767804da-53b2-4893-97d5-b7c030ae0a94_s76mc_core_complex_manual_21G3."
"pdf>`_ by SiFive.  All custom instruction are added as described in the "
"specification, and the riscv-toolchain-convention document linked above. "
"These instructions are only available for S76 processor at this time."
msgstr ""
