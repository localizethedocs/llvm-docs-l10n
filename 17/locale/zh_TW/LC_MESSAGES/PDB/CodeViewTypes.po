# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 17\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../PDB/CodeViewTypes.rst:3
msgid "CodeView Type Records"
msgstr ""

#: ../../../PDB/CodeViewTypes.rst:12
msgid "Introduction"
msgstr "簡介"

#: ../../../PDB/CodeViewTypes.rst:14
msgid ""
"This document describes the usage and serialization format of the various "
"CodeView type records that LLVM understands.  This document does not "
"describe every single CodeView type record that is defined.  In some cases, "
"this is because the records are clearly deprecated and can only appear in "
"very old software (e.g. the 16-bit types).  On other cases, it is because "
"the records have never been observed in practice.  This could be because "
"they are only generated for non-C++ code (e.g. Visual Basic, C#), or because "
"they have been made obsolete by newer records, or any number of other "
"reasons.  However, the records we describe here should cover 99% of type "
"records that one can expect to encounter when dealing with modern C++ "
"toolchains."
msgstr ""

#: ../../../PDB/CodeViewTypes.rst:26
msgid "Record Categories"
msgstr ""

#: ../../../PDB/CodeViewTypes.rst:28
msgid ""
"We can think of a sequence of CodeView type records as an array of variable "
"length `leaf records`.  Each such record describes its own length as part of "
"a fixed-size header, as well as the kind of record it is.  Leaf records are "
"either padded to 4 bytes (if this type stream appears in a TPI/IPI stream of "
"a PDB) or not padded at all (if this type stream appears in the ``.debug$T`` "
"section of an object file). Padding is implemented by inserting a decreasing "
"sequence of `<_padding_records>` that terminates with ``LF_PAD0``."
msgstr ""

#: ../../../PDB/CodeViewTypes.rst:36
msgid ""
"The final category of record is a ``member record``.  One particular leaf "
"type -- ``LF_FIELDLIST`` -- contains a series of embedded records.  While "
"the outer ``LF_FIELDLIST`` describes its length (like any other leaf "
"record), the embedded records -- called ``member records`` do not."
msgstr ""

#: ../../../PDB/CodeViewTypes.rst:44
msgid "Leaf Records"
msgstr ""

#: ../../../PDB/CodeViewTypes.rst:46
msgid "All leaf records begin with the following 4 byte prefix:"
msgstr ""

#: ../../../PDB/CodeViewTypes.rst:56
msgid "LF_POINTER (0x1002)"
msgstr ""

#: ../../../PDB/CodeViewTypes.rst:58
msgid "**Usage:** Describes a pointer to another type."
msgstr ""

#: ../../../PDB/CodeViewTypes.rst:60
msgid "**Layout:**"
msgstr ""

#: ../../../PDB/CodeViewTypes.rst:72
msgid "Attributes is a bitfield with the following layout:"
msgstr ""

#: ../../../PDB/CodeViewTypes.rst:82
msgid "where the various fields are defined by the following enums:"
msgstr ""

#: ../../../PDB/CodeViewTypes.rst:122
msgid ""
"The ``Size`` field of the Attributes bitmask is a 1-byte value indicating "
"the pointer size.  For example, a `void*` would have a size of either 4 or 8 "
"depending on the target architecture.  On the other hand, if ``Mode`` "
"indicates that this is a pointer to member function or pointer to data "
"member, then the size can be any implementation defined number."
msgstr ""

#: ../../../PDB/CodeViewTypes.rst:128
msgid ""
"The ``Member Ptr Info`` field of the ``LF_POINTER`` record is only present "
"if the attributes indicate that this is a pointer to member."
msgstr ""

#: ../../../PDB/CodeViewTypes.rst:131
msgid ""
"Note that \"plain\" pointers to primitive types are not represented by "
"``LF_POINTER`` records, they are indicated by special reserved :ref:"
"`TypeIndex values <type_indices>`."
msgstr ""

#: ../../../PDB/CodeViewTypes.rst:137
msgid "LF_MODIFIER (0x1001)"
msgstr ""

#: ../../../PDB/CodeViewTypes.rst:140
msgid "LF_PROCEDURE (0x1008)"
msgstr ""

#: ../../../PDB/CodeViewTypes.rst:143
msgid "LF_MFUNCTION (0x1009)"
msgstr ""

#: ../../../PDB/CodeViewTypes.rst:146
msgid "LF_LABEL (0x000e)"
msgstr ""

#: ../../../PDB/CodeViewTypes.rst:149
msgid "LF_ARGLIST (0x1201)"
msgstr ""

#: ../../../PDB/CodeViewTypes.rst:152
msgid "LF_FIELDLIST (0x1203)"
msgstr ""

#: ../../../PDB/CodeViewTypes.rst:155
msgid "LF_ARRAY (0x1503)"
msgstr ""

#: ../../../PDB/CodeViewTypes.rst:158
msgid "LF_CLASS (0x1504)"
msgstr ""

#: ../../../PDB/CodeViewTypes.rst:161
msgid "LF_STRUCTURE (0x1505)"
msgstr ""

#: ../../../PDB/CodeViewTypes.rst:164
msgid "LF_INTERFACE (0x1519)"
msgstr ""

#: ../../../PDB/CodeViewTypes.rst:167
msgid "LF_UNION (0x1506)"
msgstr ""

#: ../../../PDB/CodeViewTypes.rst:170
msgid "LF_ENUM (0x1507)"
msgstr ""

#: ../../../PDB/CodeViewTypes.rst:173
msgid "LF_TYPESERVER2 (0x1515)"
msgstr ""

#: ../../../PDB/CodeViewTypes.rst:176
msgid "LF_VFTABLE (0x151d)"
msgstr ""

#: ../../../PDB/CodeViewTypes.rst:179
msgid "LF_VTSHAPE (0x000a)"
msgstr ""

#: ../../../PDB/CodeViewTypes.rst:182
msgid "LF_BITFIELD (0x1205)"
msgstr ""

#: ../../../PDB/CodeViewTypes.rst:185
msgid "LF_FUNC_ID (0x1601)"
msgstr ""

#: ../../../PDB/CodeViewTypes.rst:188
msgid "LF_MFUNC_ID (0x1602)"
msgstr ""

#: ../../../PDB/CodeViewTypes.rst:191
msgid "LF_BUILDINFO (0x1603)"
msgstr ""

#: ../../../PDB/CodeViewTypes.rst:194
msgid "LF_SUBSTR_LIST (0x1604)"
msgstr ""

#: ../../../PDB/CodeViewTypes.rst:197
msgid "LF_STRING_ID (0x1605)"
msgstr ""

#: ../../../PDB/CodeViewTypes.rst:200
msgid "LF_UDT_SRC_LINE (0x1606)"
msgstr ""

#: ../../../PDB/CodeViewTypes.rst:203
msgid "LF_UDT_MOD_SRC_LINE (0x1607)"
msgstr ""

#: ../../../PDB/CodeViewTypes.rst:206
msgid "LF_METHODLIST (0x1206)"
msgstr ""

#: ../../../PDB/CodeViewTypes.rst:209
msgid "LF_PRECOMP (0x1509)"
msgstr ""

#: ../../../PDB/CodeViewTypes.rst:212
msgid "LF_ENDPRECOMP (0x0014)"
msgstr ""

#: ../../../PDB/CodeViewTypes.rst:217
msgid "Member Records"
msgstr ""

#: ../../../PDB/CodeViewTypes.rst:220
msgid "LF_BCLASS (0x1400)"
msgstr ""

#: ../../../PDB/CodeViewTypes.rst:223
msgid "LF_BINTERFACE (0x151a)"
msgstr ""

#: ../../../PDB/CodeViewTypes.rst:226
msgid "LF_VBCLASS (0x1401)"
msgstr ""

#: ../../../PDB/CodeViewTypes.rst:229
msgid "LF_IVBCLASS (0x1402)"
msgstr ""

#: ../../../PDB/CodeViewTypes.rst:232
msgid "LF_VFUNCTAB (0x1409)"
msgstr ""

#: ../../../PDB/CodeViewTypes.rst:235
msgid "LF_STMEMBER (0x150e)"
msgstr ""

#: ../../../PDB/CodeViewTypes.rst:238
msgid "LF_METHOD (0x150f)"
msgstr ""

#: ../../../PDB/CodeViewTypes.rst:241
msgid "LF_MEMBER (0x150d)"
msgstr ""

#: ../../../PDB/CodeViewTypes.rst:244
msgid "LF_NESTTYPE (0x1510)"
msgstr ""

#: ../../../PDB/CodeViewTypes.rst:247
msgid "LF_ONEMETHOD (0x1511)"
msgstr ""

#: ../../../PDB/CodeViewTypes.rst:250
msgid "LF_ENUMERATE (0x1502)"
msgstr ""

#: ../../../PDB/CodeViewTypes.rst:253
msgid "LF_INDEX (0x1404)"
msgstr ""

#: ../../../PDB/CodeViewTypes.rst:258
msgid "Padding Records"
msgstr ""

#: ../../../PDB/CodeViewTypes.rst:261
msgid "LF_PADn (0xf0 + n)"
msgstr ""
