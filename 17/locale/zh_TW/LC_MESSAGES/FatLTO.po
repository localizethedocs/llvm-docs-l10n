# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 17\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../FatLTO.rst:3
msgid "FatLTO"
msgstr ""

#: ../../../FatLTO.rst:12
msgid "Introduction"
msgstr ""

#: ../../../FatLTO.rst:14
msgid ""
"FatLTO objects are a special type of `fat object file <https://en.wikipedia."
"org/wiki/Fat_binary>`_ that contain LTO compatible IR in addition to "
"generated object code, instead of containing object code for multiple target "
"architectures. This allows users to defer the choice of whether to use LTO "
"or not to link-time, and has been a feature available in other compilers, "
"like `GCC <https://gcc.gnu.org/onlinedocs/gccint/LTO-Overview.html>`_, for "
"some time."
msgstr ""

#: ../../../FatLTO.rst:22
msgid ""
"Under FatLTO the compiler can emit standard object files which contain both "
"the machine code in the ``.text`` section and LLVM bitcode in the ``.llvm."
"lto`` section."
msgstr ""

#: ../../../FatLTO.rst:27
msgid "Overview"
msgstr ""

#: ../../../FatLTO.rst:29
msgid ""
"Within LLVM, FatLTO is supported by choosing the ``FatLTODefaultPipeline``. "
"This pipeline will:"
msgstr ""

#: ../../../FatLTO.rst:32
msgid "Clone the IR module."
msgstr ""

#: ../../../FatLTO.rst:33
msgid "Run the pre-link (Thin)LTO pipeline using the cloned module."
msgstr ""

#: ../../../FatLTO.rst:34
msgid "Embed the pre-link bitcode in a special ``.llvm.lto`` section."
msgstr ""

#: ../../../FatLTO.rst:35
msgid ""
"Optimize the unmodified copy of the module using the normal compilation "
"pipeline."
msgstr ""

#: ../../../FatLTO.rst:36
msgid "Emit the object file, including the new ``.llvm.lto`` section."
msgstr ""

#: ../../../FatLTO.rst:50
msgid ""
"Internally, the ``.llvm.lto`` section is created by running the "
"``EmbedBitcodePass`` at the start of the ``PerModuleDefaultPipeline``. This "
"pass is responsible for cloning and optimizing the module with the "
"appropriate LTO pipeline and emitting the ``.llvm.lto`` section. Afterwards, "
"the ``PerModuleDefaultPipeline`` runs normally and the compiler can emit the "
"fat object file."
msgstr ""

#: ../../../FatLTO.rst:58
msgid "Limitations"
msgstr ""

#: ../../../FatLTO.rst:61
msgid "Linkers"
msgstr ""

#: ../../../FatLTO.rst:63
msgid ""
"Currently, using LTO with LLVM fat lto objects is supported by LLD and by "
"the GNU linkers via :doc:`GoldPlugin`. This may change in the future, but "
"extending support to other linkers isn't planned for now."
msgstr ""

#: ../../../FatLTO.rst:73
msgid "Supported File Formats"
msgstr ""

#: ../../../FatLTO.rst:75
msgid ""
"The current implementation only supports ELF files. At time of writing, it "
"is unclear if it will be useful to support other object file formats like "
"``COFF`` or ``Mach-O``."
msgstr ""
