# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 17\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr_FR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../ReleaseNotes.rst:3
msgid "LLVM |release| Release Notes"
msgstr ""

#: ../../../ReleaseNotes.rst:11
msgid ""
"These are in-progress notes for the upcoming LLVM |version| release. Release "
"notes for previous releases can be found on `the Download Page <https://"
"releases.llvm.org/download.html>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:17
msgid "Introduction"
msgstr ""

#: ../../../ReleaseNotes.rst:19
msgid ""
"This document contains the release notes for the LLVM Compiler "
"Infrastructure, release |release|.  Here we describe the status of LLVM, "
"including major improvements from the previous release, improvements in "
"various subprojects of LLVM, and some of the current users of the code.  All "
"LLVM releases may be downloaded from the `LLVM releases web site <https://"
"llvm.org/releases/>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:25
msgid ""
"For more information about LLVM, including information about the latest "
"release, please check out the `main LLVM web site <https://llvm.org/>`_.  If "
"you have questions or comments, the `Discourse forums <https://discourse."
"llvm.org>`_ is a good place to ask them."
msgstr ""

#: ../../../ReleaseNotes.rst:31
msgid ""
"Note that if you are reading this file from a Git checkout or the main LLVM "
"web page, this document applies to the *next* release, not the current one.  "
"To see the release notes for a specific release, please see the `releases "
"page <https://llvm.org/releases/>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:37
msgid "Non-comprehensive list of changes in this release"
msgstr ""

#: ../../../ReleaseNotes.rst:45 ../../../ReleaseNotes.rst:206
#: ../../../ReleaseNotes.rst:214 ../../../ReleaseNotes.rst:230
msgid "..."
msgstr ""

#: ../../../ReleaseNotes.rst:48
msgid "Update on required toolchains to build LLVM"
msgstr ""

#: ../../../ReleaseNotes.rst:50
msgid ""
"With LLVM 17.x we raised the version requirement of CMake used to build "
"LLVM. The new requirements are as follows:"
msgstr ""

#: ../../../ReleaseNotes.rst:53
msgid "CMake >= 3.20.0"
msgstr ""

#: ../../../ReleaseNotes.rst:56
msgid "Changes to the LLVM IR"
msgstr ""

#: ../../../ReleaseNotes.rst:58
msgid ""
"Typed pointers are no longer supported and the ``-opaque-pointers`` option "
"has been removed. See the `opaque pointers <OpaquePointers.html>`__ "
"documentation for migration instructions."
msgstr ""

#: ../../../ReleaseNotes.rst:62
msgid ""
"The ``nofpclass`` attribute was introduced. This allows more optimizations "
"around special floating point value comparisons."
msgstr ""

#: ../../../ReleaseNotes.rst:65
msgid ""
"Introduced new ``llvm.ldexp`` and ``llvm.experimental.constrained.ldexp`` "
"intrinsics."
msgstr ""

#: ../../../ReleaseNotes.rst:67
msgid "Introduced new ``llvm.frexp`` intrinsic."
msgstr ""

#: ../../../ReleaseNotes.rst:69
msgid ""
"The constant expression variants of the following instructions have been "
"removed:"
msgstr ""

#: ../../../ReleaseNotes.rst:72
msgid "``select``"
msgstr ""

#: ../../../ReleaseNotes.rst:74
msgid ""
"Introduced a set of experimental `convergence control intrinsics "
"<ConvergentOperations.html>`__ to explicitly define the semantics of "
"convergent operations."
msgstr ""

#: ../../../ReleaseNotes.rst:79
msgid "Changes to LLVM infrastructure"
msgstr ""

#: ../../../ReleaseNotes.rst:81
msgid ""
"The legacy optimization pipeline (``PassManagerBuilder.h``) has been "
"removed. See the `new pass manager docs <https://llvm.org/docs/"
"NewPassManager.html>`_ for how to use the new pass manager APIs."
msgstr ""

#: ../../../ReleaseNotes.rst:85
msgid ""
"Alloca merging in the inliner has been removed, since it only worked with "
"the legacy inliner pass. Backend stack coloring should handle cases alloca "
"merging initially set out to handle."
msgstr ""

#: ../../../ReleaseNotes.rst:89
msgid ""
"InstructionSimplify APIs now require instructions be inserted into a parent "
"function."
msgstr ""

#: ../../../ReleaseNotes.rst:92
msgid ""
"A new FatLTO pipeline was added to support generating object files that have "
"both machine code and LTO compatible bitcode. See the :doc:`FatLTO` "
"documentation and the original `RFC  <https://discourse.llvm.org/t/rfc-ffat-"
"lto-objects-support/63977>`_ for more details."
msgstr ""

#: ../../../ReleaseNotes.rst:99
msgid "Changes to building LLVM"
msgstr ""

#: ../../../ReleaseNotes.rst:102
msgid "Changes to TableGen"
msgstr ""

#: ../../../ReleaseNotes.rst:104
msgid ""
"Named arguments are supported. Arguments can be specified in the form of "
"``name=value``."
msgstr ""

#: ../../../ReleaseNotes.rst:108
msgid "Changes to Optimizations"
msgstr ""

#: ../../../ReleaseNotes.rst:110
msgid ""
":ref:`llvm.assume <int_assume>` now recognizes certain floating-point tests. "
"e.g. ``__builtin_assume(!isnan(x))``"
msgstr ""

#: ../../../ReleaseNotes.rst:114
msgid "Changes to the AArch64 Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:116
msgid ""
"Added Assembly Support for the 2022 A-profile extensions FEAT_GCS (Guarded "
"Control Stacks), FEAT_CHK (Check Feature Status), and FEAT_ATS1A."
msgstr ""

#: ../../../ReleaseNotes.rst:118
msgid "Support for preserve_all calling convention is added."
msgstr ""

#: ../../../ReleaseNotes.rst:119
msgid ""
"Added support for missing arch extensions in the assembly directives ``.arch "
"<level>+<ext>`` and ``.arch_extension``."
msgstr ""

#: ../../../ReleaseNotes.rst:121
msgid ""
"Fixed handling of ``.arch <level>`` in assembly, without using any "
"``+<ext>`` suffix. Previously this had no effect at all if no extensions "
"were supplied. Now ``.arch <level>`` can be used to enable all the "
"extensions that are included in a higher level than what is specified on the "
"command line, or for disabling unwanted extensions if setting it to a lower "
"level. This fixes `PR32873 <https://github.com/llvm/llvm-project/"
"issues/32220>`."
msgstr ""

#: ../../../ReleaseNotes.rst:129
msgid "Changes to the AMDGPU Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:130
msgid ""
"More fine-grained synchronization around barriers for newer architectures "
"(gfx90a+, gfx10+). The AMDGPU backend now omits previously automatically "
"generated waitcnt instructions before barriers, allowing for more precise "
"control. Users must now use memory fences to implement fine-grained "
"synchronization strategies around barriers. Refer to `AMDGPU memory model "
"<AMDGPUUsage.html#memory-model>`__."
msgstr ""

#: ../../../ReleaseNotes.rst:137
msgid ""
"Address space 7, used for *buffer fat pointers* has been added. It is non-"
"integral and has 160-bit pointers (a 128-bit raw buffer resource and a 32-"
"bit offset) and 32-bit indices. This is part of ongoing work to improve the "
"usability of buffer operations. Refer to `AMDGPU address spaces <AMDGPUUsage."
"html#address-spaces>`__."
msgstr ""

#: ../../../ReleaseNotes.rst:143
msgid ""
"Address space 8, used for *buffer resources* has been added. It is non-"
"integral and has 128-bit pointers, which correspond to buffer resources in "
"the underlying hardware. These pointers should not be used with "
"`getelementptr` or other LLVM memory instructions, and can be created with "
"the `llvm.amdgcn.make.buffer.rsrc` intrinsic. Refer to `AMDGPU address "
"spaces <AMDGPUUsage.html#address_spaces>`__."
msgstr ""

#: ../../../ReleaseNotes.rst:150
msgid ""
"New versions of the intrinsics for working with buffer resources have been "
"added. These `llvm.amdgcn.*.ptr.[t]buffer.*` intrinsics have the same "
"semantics as the old `llvm.amdgcn.*.[t]buffer.*` intrinsics, except that "
"their `rsrc` arguments are represented by a `ptr addrspace(8)` instead of a "
"`<4 x i32>`. This improves the interaction between AMDGPU buffer operations "
"and the LLVM memory model, and so the non `.ptr` intrinsics are deprecated."
msgstr ""

#: ../../../ReleaseNotes.rst:157
msgid ""
"Backend now performs range merging of \"amdgpu-waves-per-eu\" attribute "
"based on known callers."
msgstr ""

#: ../../../ReleaseNotes.rst:160
msgid ""
"Certain :ref:`atomicrmw <i_atomicrmw>` operations are now optimized by "
"performing a wave reduction if the access is uniform by default."
msgstr ""

#: ../../../ReleaseNotes.rst:163
msgid ""
"Removed ``llvm.amdgcn.atomic.inc`` and ``llvm.amdgcn.atomic.dec`` "
"intrinsics. :ref:`atomicrmw <i_atomicrmw>` should be used instead with "
"``uinc_wrap`` and ``udec_wrap``."
msgstr ""

#: ../../../ReleaseNotes.rst:167
msgid ""
"Added llvm.amdgcn.log.f32 intrinsic. This provides direct access to "
"v_log_f32."
msgstr ""

#: ../../../ReleaseNotes.rst:170
msgid ""
"Added llvm.amdgcn.exp2.f32 intrinsic. This provides direct access to "
"v_exp_f32."
msgstr ""

#: ../../../ReleaseNotes.rst:173
msgid ""
"llvm.log2.f32, llvm.log10.f32, and llvm.log.f32 are now lowered accurately. "
"Use llvm.amdgcn.log.f32 to access the old behavior for llvm.log2.f32."
msgstr ""

#: ../../../ReleaseNotes.rst:177
msgid ""
"llvm.exp2.f32 and llvm.exp.f32 are now lowered accurately. Use llvm.amdgcn."
"exp2.f32 to access the old behavior for llvm.exp2.f32."
msgstr ""

#: ../../../ReleaseNotes.rst:180
msgid ""
"Implemented new 1ulp IEEE lowering strategy for float reciprocal which saves "
"2 instructions. This is used by default for OpenCL on gfx9+. With "
"``contract`` flags, this will fold into a 1 ulp rsqrt."
msgstr ""

#: ../../../ReleaseNotes.rst:184
msgid ""
"Implemented new 2ulp IEEE lowering strategy for float reciprocal. This is "
"used by default for OpenCL on gfx9+."
msgstr ""

#: ../../../ReleaseNotes.rst:187
msgid ""
"`llvm.sqrt.f64` is now lowered correctly. Use `llvm.amdgcn.sqrt.f64` for raw "
"instruction access."
msgstr ""

#: ../../../ReleaseNotes.rst:190
msgid ""
"Deprecate `llvm.amdgcn.ldexp` intrinsic. :ref:`llvm.ldexp <int_ldexp>` "
"should be used instead."
msgstr ""

#: ../../../ReleaseNotes.rst:194
msgid "Changes to the ARM Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:196
msgid ""
"The hard-float ABI is now available in Armv8.1-M configurations that have "
"integer MVE instructions (and therefore have FP registers) but no scalar or "
"vector floating point computation."
msgstr ""

#: ../../../ReleaseNotes.rst:200
msgid ""
"The ``.arm`` directive now aligns code to the next 4-byte boundary, and the "
"``.thumb`` directive aligns code to the next 2-byte boundary."
msgstr ""

#: ../../../ReleaseNotes.rst:204
msgid "Changes to the AVR Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:209
msgid "Changes to the DirectX Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:212
msgid "Changes to the Hexagon Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:217
msgid "Changes to the LoongArch Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:219
msgid ""
"Adds assembler/disassembler support for the LSX, LASX, LVZ and LBT ISA "
"extensions."
msgstr ""

#: ../../../ReleaseNotes.rst:220
msgid ""
"The ``lp64s`` ABI is supported now and has been tested on Rust bare-matal "
"target."
msgstr ""

#: ../../../ReleaseNotes.rst:221
msgid ""
"A target feature ``ual`` is introduced to allow unaligned memory accesses "
"and this feature is enabled by default for generic 64-bit processors."
msgstr ""

#: ../../../ReleaseNotes.rst:223
msgid ""
"Adds support for the ``large`` code model, which is equivalent to GCC's "
"``extreme`` one."
msgstr ""

#: ../../../ReleaseNotes.rst:224
msgid "Assorted codegen improvements."
msgstr ""

#: ../../../ReleaseNotes.rst:225
msgid "llvm-objcopy now supports processing LoongArch objects."
msgstr ""

#: ../../../ReleaseNotes.rst:228
msgid "Changes to the MIPS Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:233
msgid "Changes to the PowerPC Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:235
msgid ""
"Improved code sequence of materializing 64-bit immediate numbers, expanding "
"``is.fpclass`` intrinsic and forwarding stores."
msgstr ""

#: ../../../ReleaseNotes.rst:237
msgid "Implemented DFP instructions (for use via inline asm)."
msgstr ""

#: ../../../ReleaseNotes.rst:238
msgid "Improved code gen for vector add."
msgstr ""

#: ../../../ReleaseNotes.rst:239
msgid "Added ability to show statistics of number of entries in the TOC."
msgstr ""

#: ../../../ReleaseNotes.rst:240
msgid ""
"Added Binary Coded Decimal Assist instructions (for use via inline asm)."
msgstr ""

#: ../../../ReleaseNotes.rst:241
msgid "Added basic support for vector functions in GlobalISel."
msgstr ""

#: ../../../ReleaseNotes.rst:242
msgid ""
"Added additional X-Form load and store instruction generation for TLS "
"accesses."
msgstr ""

#: ../../../ReleaseNotes.rst:243
msgid "PPC64LE backend is added to JITLink."
msgstr ""

#: ../../../ReleaseNotes.rst:244
msgid "Added various bug fixes and optimizations."
msgstr ""

#: ../../../ReleaseNotes.rst:245
msgid ""
"Added function pointer alignment to the DataLayout for Power, which lets us "
"make more informed choices about what this alignment defaults to for various "
"purposes (e.g., C++ pointers to member). If the target ABI uses function "
"descriptor objects, this is the alignment we would emit the descriptor with. "
"Otherwise, a function pointer points to a global entry point, so this is at "
"least the alignment for code on Power (i.e., 4-bytes)."
msgstr ""

#: ../../../ReleaseNotes.rst:252
msgid "AIX Support/improvements:"
msgstr ""

#: ../../../ReleaseNotes.rst:255
msgid ""
"A new option ``-mxcoff-roptr`` is added to ``clang`` and ``llc``. When this "
"option is present, constant objects with relocatable address values are put "
"into the RO data section. This option should be used with the ``-fdata-"
"sections`` option, and is not supported with ``-fno-data-sections``."
msgstr ""

#: ../../../ReleaseNotes.rst:260
msgid ""
"Taught the profile runtime to check for a build-id string. Build-id strings "
"can be created via the ``-mxcoff-build-id`` option."
msgstr ""

#: ../../../ReleaseNotes.rst:263
msgid ""
"Removed ``-ppc-quadword-atomics`` which only affected lock-free quadword "
"atomics on AIX. Now backend generates lock-free quadword atomics code on AIX "
"by default. To support lock-free quadword atomics in libatomic, the OS level "
"must be at least AIX 7.2 TL5 SP3 with libc++.rte of version 17.1.1 or above "
"installed."
msgstr ""

#: ../../../ReleaseNotes.rst:269
msgid "Integrated assembler is enabled by default on AIX."
msgstr ""

#: ../../../ReleaseNotes.rst:270
msgid "System assembler is always used to compile assembly files on AIX."
msgstr ""

#: ../../../ReleaseNotes.rst:271
msgid "Added support for local-exec TLS."
msgstr ""

#: ../../../ReleaseNotes.rst:272
msgid ""
"Added a new option, ``--traceback-table``, to ``llvm-objdump`` to print out "
"the traceback table information for XCOFF object files."
msgstr ""

#: ../../../ReleaseNotes.rst:274
msgid ""
"Added ``llvm-ar`` object mode options ``-X32``, ``-X64``, ``-X32-64``, and "
"``-Xany``."
msgstr ""

#: ../../../ReleaseNotes.rst:276
msgid ""
"Changed the default name of the text-section csect to be an empty string "
"instead of ``.text``. This change does not affect the behaviour of the "
"program."
msgstr ""

#: ../../../ReleaseNotes.rst:279
msgid ""
"Fixed a problem when the personality routine for the legacy AIX ``xlclang+"
"+`` compiler uses the stack slot to pass the exception object to the landing "
"pad. Runtime routine ``__xlc_exception_handle()`` invoked by the landing pad "
"to retrieve the exception object now skips frames not associated with "
"functions that are C++ EH-aware because the compiler sometimes generates a "
"wrapper of ``__xlc_exception_handle()`` for optimization purposes."
msgstr ""

#: ../../../ReleaseNotes.rst:287
msgid "Changes to the RISC-V Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:289
msgid "Assembler support for version 1.0.1 of the Zcb extension was added."
msgstr ""

#: ../../../ReleaseNotes.rst:290
msgid "Zca, Zcf, and Zcd extensions were upgraded to version 1.0.1."
msgstr ""

#: ../../../ReleaseNotes.rst:291
msgid ""
"vsetvli intrinsics no longer have side effects. They may now be combined, "
"moved, deleted, etc. by optimizations."
msgstr ""

#: ../../../ReleaseNotes.rst:293
msgid ""
"Adds support for the vendor-defined XTHeadBa (address-generation) extension."
msgstr ""

#: ../../../ReleaseNotes.rst:294
msgid ""
"Adds support for the vendor-defined XTHeadBb (basic bit-manipulation) "
"extension."
msgstr ""

#: ../../../ReleaseNotes.rst:295
msgid "Adds support for the vendor-defined XTHeadBs (single-bit) extension."
msgstr ""

#: ../../../ReleaseNotes.rst:296
msgid ""
"Adds support for the vendor-defined XTHeadCondMov (conditional move) "
"extension."
msgstr ""

#: ../../../ReleaseNotes.rst:297
msgid ""
"Adds support for the vendor-defined XTHeadMac (multiply-accumulate "
"instructions) extension."
msgstr ""

#: ../../../ReleaseNotes.rst:298
msgid ""
"Added support for the vendor-defined XTHeadMemPair (two-GPR memory "
"operations) extension disassembler/assembler."
msgstr ""

#: ../../../ReleaseNotes.rst:300
msgid ""
"Added support for the vendor-defined XTHeadMemIdx (indexed memory "
"operations) extension disassembler/assembler."
msgstr ""

#: ../../../ReleaseNotes.rst:302
msgid ""
"Added support for the vendor-defined Xsfvcp (SiFive VCIX) extension "
"disassembler/assembler."
msgstr ""

#: ../../../ReleaseNotes.rst:304
msgid ""
"Added support for the vendor-defined Xsfcie (SiFive CIE) extension "
"disassembler/assembler."
msgstr ""

#: ../../../ReleaseNotes.rst:306
msgid "Support for the now-ratified Zawrs extension is no longer experimental."
msgstr ""

#: ../../../ReleaseNotes.rst:307
msgid ""
"Adds support for the vendor-defined XTHeadCmo (cache management operations) "
"extension."
msgstr ""

#: ../../../ReleaseNotes.rst:308
msgid ""
"Adds support for the vendor-defined XTHeadSync (multi-core synchronization "
"instructions) extension."
msgstr ""

#: ../../../ReleaseNotes.rst:309
msgid ""
"Added support for the vendor-defined XTHeadFMemIdx (indexed memory "
"operations for floating point) extension."
msgstr ""

#: ../../../ReleaseNotes.rst:310
msgid "Assembler support for RV64E was added."
msgstr ""

#: ../../../ReleaseNotes.rst:311
msgid ""
"Assembler support was added for the experimental Zicond (integer conditional "
"operations) extension."
msgstr ""

#: ../../../ReleaseNotes.rst:313
msgid ""
"I, F, D, and A extension versions have been update to the 20191214 spec "
"versions. New version I2.1, F2.2, D2.2, A2.1. This should not impact code "
"generation. Immpacts versions accepted in ``-march`` and reported in ELF "
"attributes."
msgstr ""

#: ../../../ReleaseNotes.rst:316
msgid ""
"Changed the ShadowCallStack register from ``x18`` (``s2``) to ``x3`` "
"(``gp``). Note this breaks the existing non-standard ABI for ShadowCallStack "
"on RISC-V, but conforms with the new \"platform register\" defined in the "
"RISC-V psABI (for more details see the `psABI discussion <https://github.com/"
"riscv-non-isa/riscv-elf-psabi-doc/issues/370>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:321
msgid "Added support for Zfa extension version 0.2."
msgstr ""

#: ../../../ReleaseNotes.rst:322
msgid ""
"Updated support experimental vector crypto extensions to version 0.5.1 of "
"the specification."
msgstr ""

#: ../../../ReleaseNotes.rst:324
msgid "Removed N extension (User-Level Interrupts) CSR names in the assembler."
msgstr ""

#: ../../../ReleaseNotes.rst:325
msgid ""
"``RISCV::parseCPUKind`` and ``RISCV::checkCPUKind`` were merged into a "
"single ``RISCV::parseCPU``. The ``CPUKind`` enum is no longer part of the "
"RISCVTargetParser.h interface. Similar for ``parseTuneCPUkind`` and "
"``checkTuneCPUKind``."
msgstr ""

#: ../../../ReleaseNotes.rst:329
msgid "Add sifive-x280 processor."
msgstr ""

#: ../../../ReleaseNotes.rst:330
msgid ""
"Zve32f is no longer allowed with Zfinx. Zve64d is no longer allowed with "
"Zdinx."
msgstr ""

#: ../../../ReleaseNotes.rst:332
msgid ""
"Assembly support was added for the experimental Zfbfmin (scalar BF16 "
"conversions), Zvfbfmin (vector BF16 conversions), and Zvfbfwma (vector BF16 "
"widening mul-add) extensions."
msgstr ""

#: ../../../ReleaseNotes.rst:335
msgid ""
"Added assembler/disassembler support for the experimental Zacas (atomic "
"compare-and-swap) extension."
msgstr ""

#: ../../../ReleaseNotes.rst:337
msgid ""
"Zvfh extension version was upgraded to 1.0 and is no longer experimental."
msgstr ""

#: ../../../ReleaseNotes.rst:340
msgid "Changes to the WebAssembly Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:342
msgid ""
"Function annotations (``__attribute__((annotate(<name>)))``) now generate "
"custom sections in the Wasm output file. A custom section for each unique "
"name will be created that contains each function index the annotation "
"applies to."
msgstr ""

#: ../../../ReleaseNotes.rst:348
msgid "Changes to the Windows Target"
msgstr ""

#: ../../../ReleaseNotes.rst:351
msgid "Changes to the X86 Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:353
msgid ""
"``__builtin_unpredictable`` (unpredictable metadata in LLVM IR), is handled "
"by X86 Backend. ``X86CmovConversion`` pass now respects this builtin and "
"does not convert CMOVs to branches."
msgstr ""

#: ../../../ReleaseNotes.rst:355
msgid "Add support for the ``PBNDKB`` instruction."
msgstr ""

#: ../../../ReleaseNotes.rst:356
msgid "Support ISA of ``SHA512``."
msgstr ""

#: ../../../ReleaseNotes.rst:357
msgid "Support ISA of ``SM3``."
msgstr ""

#: ../../../ReleaseNotes.rst:358
msgid "Support ISA of ``SM4``."
msgstr ""

#: ../../../ReleaseNotes.rst:359
msgid "Support ISA of ``AVX-VNNI-INT16``."
msgstr ""

#: ../../../ReleaseNotes.rst:360
msgid "``-mcpu=graniterapids-d`` is now supported."
msgstr ""

#: ../../../ReleaseNotes.rst:363
msgid "Changes to the OCaml bindings"
msgstr ""

#: ../../../ReleaseNotes.rst:366
msgid "Changes to the Python bindings"
msgstr ""

#: ../../../ReleaseNotes.rst:368
msgid "The python bindings have been removed."
msgstr ""

#: ../../../ReleaseNotes.rst:372
msgid "Changes to the C API"
msgstr ""

#: ../../../ReleaseNotes.rst:374
msgid ""
"``LLVMContextSetOpaquePointers``, a temporary API to pin to legacy typed "
"pointer, has been removed."
msgstr ""

#: ../../../ReleaseNotes.rst:376
msgid ""
"Functions for adding legacy passes like ``LLVMAddInstructionCombiningPass`` "
"have been removed."
msgstr ""

#: ../../../ReleaseNotes.rst:378
msgid ""
"Removed ``LLVMPassManagerBuilderRef`` and functions interacting with it. "
"These belonged to the no longer supported legacy pass manager."
msgstr ""

#: ../../../ReleaseNotes.rst:380
msgid ""
"Functions for initializing legacy passes like ``LLVMInitializeInstCombine`` "
"have been removed. Calls to such functions can simply be dropped, as they "
"are no longer necessary."
msgstr ""

#: ../../../ReleaseNotes.rst:383
msgid ""
"``LLVMPassRegistryRef`` and ``LLVMGetGlobalPassRegistry``, which were only "
"useful in conjunction with initialization functions, have been removed."
msgstr ""

#: ../../../ReleaseNotes.rst:385
msgid ""
"As part of the opaque pointer transition, ``LLVMGetElementType`` no longer "
"gives the pointee type of a pointer type."
msgstr ""

#: ../../../ReleaseNotes.rst:387
msgid ""
"The following functions for creating constant expressions have been removed, "
"because the underlying constant expressions are no longer supported. "
"Instead, an instruction should be created using the ``LLVMBuildXYZ`` APIs, "
"which will constant fold the operands if possible and create an instruction "
"otherwise:"
msgstr ""

#: ../../../ReleaseNotes.rst:392
msgid "``LLVMConstSelect``"
msgstr ""

#: ../../../ReleaseNotes.rst:395
msgid "Changes to the CodeGen infrastructure"
msgstr ""

#: ../../../ReleaseNotes.rst:397
msgid ""
"``llvm.memcpy``, ``llvm.memmove`` and ``llvm.memset`` are now expanded into "
"loops by default for targets which do not report the corresponding library "
"function is available."
msgstr ""

#: ../../../ReleaseNotes.rst:402
msgid "Changes to the Metadata Info"
msgstr ""

#: ../../../ReleaseNotes.rst:405
msgid "Changes to the Debug Info"
msgstr ""

#: ../../../ReleaseNotes.rst:407
msgid ""
"The DWARFv5 feature of attaching ``DW_AT_default_value`` to defaulted "
"template parameters will now be available in any non-strict DWARF mode and "
"in a wider range of cases than previously. (`D139953 <https://reviews.llvm."
"org/D139953>`_, `D139988 <https://reviews.llvm.org/D139988>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:413
msgid ""
"The ``DW_AT_name`` on ``DW_AT_typedef``\\ s for alias templates will now "
"omit defaulted template parameters. (`D142268 <https://reviews.llvm.org/"
"D142268>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:416
msgid ""
"The experimental ``@llvm.dbg.addr`` intrinsic has been removed (`D144801 "
"<https://reviews.llvm.org/D144801>`_). IR inputs with this intrinsic are "
"auto-upgraded to ``@llvm.dbg.value`` with ``DW_OP_deref`` appended to the "
"``DIExpression`` (`D144793 <https://reviews.llvm.org/D144793>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:421
msgid ""
"When a template class annotated with the ``[[clang::preferred_name]]`` "
"attribute were to appear in a ``DW_AT_type``, the type will now be that of "
"the preferred_name instead. This change is only enabled when compiling with "
"`-glldb`. (`D145803 <https://reviews.llvm.org/D145803>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:427
msgid "Changes to the LLVM tools"
msgstr ""

#: ../../../ReleaseNotes.rst:428
msgid ""
"llvm-lib now supports the /def option for generating a Windows import "
"library from a definition file."
msgstr ""

#: ../../../ReleaseNotes.rst:430
msgid ""
"Made significant changes to JSON output format of `llvm-readobj`/`llvm-"
"readelf` to improve correctness and clarity."
msgstr ""

#: ../../../ReleaseNotes.rst:434
msgid "Changes to LLDB"
msgstr ""

#: ../../../ReleaseNotes.rst:436
msgid ""
"In the results of commands such as ``expr`` and ``frame var``, type "
"summaries will now omit defaulted template parameters. The full template "
"parameter list can still be viewed with ``expr --raw-output``/``frame var --"
"raw-output``. (`D141828 <https://reviews.llvm.org/D141828>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:440
msgid ""
"LLDB is now able to show the subtype of signals found in a core file. For "
"example memory tagging specific segfaults such as ``SIGSEGV: sync tag check "
"fault``."
msgstr ""

#: ../../../ReleaseNotes.rst:443
msgid ""
"LLDB can now display register fields if they are described in target XML "
"sent by a debug server such as ``gdbserver`` (``lldb-server`` does not "
"currently produce this information). Fields are only printed when reading "
"named registers, for example ``register read cpsr``. They are not shown when "
"reading a register set, ``register read -s 0``."
msgstr ""

#: ../../../ReleaseNotes.rst:449
msgid ""
"A new command ``register info`` was added. This command will tell you "
"everything that LLDB knows about a register. Based on what LLDB already "
"knows and what the debug server tells it. Including but not limited to, the "
"size, where it is read from and the fields that the register contains."
msgstr ""

#: ../../../ReleaseNotes.rst:454
msgid ""
"AArch64 Linux targets now provide access to the Thread Local Storage "
"register ``tpidr``."
msgstr ""

#: ../../../ReleaseNotes.rst:458
msgid "Changes to Sanitizers"
msgstr ""

#: ../../../ReleaseNotes.rst:459
msgid ""
"For Darwin users that override weak symbols, note that the dynamic linker "
"will only consider symbols in other mach-o modules which themselves contain "
"at least one weak symbol. A consequence is that if your program or dylib "
"contains an intended override of a weak symbol, then it must contain at "
"least one weak symbol as well for the override to take effect."
msgstr ""

#: ../../../ReleaseNotes.rst:465
msgid "Example:"
msgstr ""

#: ../../../ReleaseNotes.rst:476
msgid "Changes to BOLT"
msgstr ""

#: ../../../ReleaseNotes.rst:477
msgid "Initial RISC-V (RV64GC) target support was added."
msgstr ""

#: ../../../ReleaseNotes.rst:478
msgid ""
"DWARFRewriter got new mechanism for more flexible handling of debug "
"information. It raises debug information to IR level before performing "
"updates, and IR is written out to the binary after updates are applied."
msgstr ""

#: ../../../ReleaseNotes.rst:481
msgid ""
"Stale profile matching was added under a flag `--infer-stale-profile`. It "
"requires the use of a YAML profile, produced by perf2bolt using `-w` flag, "
"or with `--profile-format=yaml`."
msgstr ""

#: ../../../ReleaseNotes.rst:487
msgid "Other Changes"
msgstr ""

#: ../../../ReleaseNotes.rst:489
msgid ""
"``llvm::demangle`` now takes a ``std::string_view`` rather than a ``const "
"std::string&``. Be careful passing temporaries into ``llvm::demangle`` that "
"don't outlive the expression using ``llvm::demangle``."
msgstr ""

#: ../../../ReleaseNotes.rst:495
msgid "External Open Source Projects Using LLVM 15"
msgstr ""

#: ../../../ReleaseNotes.rst:497
msgid "A project..."
msgstr ""

#: ../../../ReleaseNotes.rst:500
msgid "Additional Information"
msgstr ""

#: ../../../ReleaseNotes.rst:502
msgid ""
"A wide variety of additional information is available on the `LLVM web page "
"<https://llvm.org/>`_, in particular in the `documentation <https://llvm.org/"
"docs/>`_ section.  The web page also contains versions of the API "
"documentation which is up-to-date with the Git version of the source code.  "
"You can access versions of these documents specific to this release by going "
"into the ``llvm/docs/`` directory in the LLVM tree."
msgstr ""

#: ../../../ReleaseNotes.rst:509
msgid ""
"If you have any questions or comments about LLVM, please feel free to "
"contact us via the `Discourse forums <https://discourse.llvm.org>`_."
msgstr ""
