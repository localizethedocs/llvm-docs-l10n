# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:14+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr_FR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../Proposals/LLVMLibC.rst:3
msgid "\"llvm-libc\" C Standard Library"
msgstr ""

#: ../../../Proposals/LLVMLibC.rst:7
msgid "Table of Contents"
msgstr ""

#: ../../../Proposals/LLVMLibC.rst:10
msgid "Introduction"
msgstr ""

#: ../../../Proposals/LLVMLibC.rst:12
msgid ""
"This is a proposal to start *llvm-libc*, an implementation of the C standard "
"library targeting C17 and above, as part of the LLVM project. llvm-libc will "
"also provide platform specific extensions as relevant. For example, on Linux "
"it also provides pthreads, librt and other POSIX extension libraries."
msgstr ""

#: ../../../Proposals/LLVMLibC.rst:19
msgid "Features"
msgstr ""

#: ../../../Proposals/LLVMLibC.rst:21
msgid "llvm-libc will be developed to have a certain minimum set of features:"
msgstr ""

#: ../../../Proposals/LLVMLibC.rst:23
msgid "C17 and upwards conformant."
msgstr ""

#: ../../../Proposals/LLVMLibC.rst:24
msgid ""
"A modular libc with individual pieces implemented in the \"as a library\" "
"philosophy of the LLVM project."
msgstr ""

#: ../../../Proposals/LLVMLibC.rst:26
msgid ""
"Ability to layer this libc over the system libc if possible and desired for "
"a platform."
msgstr ""

#: ../../../Proposals/LLVMLibC.rst:28
msgid ""
"Provide C symbols as specified by the standards, but take advantage and use "
"C++ language facilities for the core implementation."
msgstr ""

#: ../../../Proposals/LLVMLibC.rst:30
msgid "Provides POSIX extensions on POSIX compliant platforms."
msgstr ""

#: ../../../Proposals/LLVMLibC.rst:31
msgid ""
"Provides system-specific extensions as appropriate. For example, provides "
"the Linux API on Linux."
msgstr ""

#: ../../../Proposals/LLVMLibC.rst:33
msgid "Vendor extensions if and only if necessary."
msgstr ""

#: ../../../Proposals/LLVMLibC.rst:34
msgid ""
"Designed and developed from the start to work with LLVM tooling and testing "
"like fuzz testing and sanitizer-supported testing."
msgstr ""

#: ../../../Proposals/LLVMLibC.rst:36
msgid "ABI independent implementation as far as possible."
msgstr ""

#: ../../../Proposals/LLVMLibC.rst:37
msgid ""
"Use source based implementations as far possible rather than assembly. Will "
"try to *fix* the compiler rather than use assembly language workarounds."
msgstr ""

#: ../../../Proposals/LLVMLibC.rst:40
msgid ""
"Extensive unit testing and standards conformance testing. If relevant and "
"possible, differential testing: We want to be able to test llvm-libc against "
"another battle-tested libc. This is essentially to understand how we differ "
"from other libcs. Also if relevant and possible, test against the testsuite "
"of an another battle-tested libc implementation."
msgstr ""

#: ../../../Proposals/LLVMLibC.rst:48
msgid "Why a new C Standard Library?"
msgstr ""

#: ../../../Proposals/LLVMLibC.rst:50
msgid ""
"Implementing a libc is no small task and is not be taken lightly. A natural "
"question to ask is, \"why a new implementation of the C standard library?\" "
"There is no single answer to this question, but some of the major reasons "
"are as follows:"
msgstr ""

#: ../../../Proposals/LLVMLibC.rst:55
msgid ""
"Most libc implementations are monolithic. It is a non-trivial porting task "
"to pick and choose only the pieces relevant to one's platform. The llvm-libc "
"will be developed with sufficient modularity to make picking and choosing a "
"straightforward task."
msgstr ""

#: ../../../Proposals/LLVMLibC.rst:59
msgid ""
"Most libc implementations break when built with sanitizer specific compiler "
"options. The llvm-libc will be developed from the start to work with those "
"specialized compiler options."
msgstr ""

#: ../../../Proposals/LLVMLibC.rst:62
msgid ""
"The llvm-libc will be developed to support and employ fuzz testing from the "
"start."
msgstr ""

#: ../../../Proposals/LLVMLibC.rst:64
msgid ""
"Most libc implementations use a good amount of assembly language, and assume "
"specific ABIs (may be platform dependent). With the llvm-libc "
"implementation, we want to use normal source code as much as possible so "
"that compiler-based changes to the ABI are easy. Moreover, as part of the "
"LLVM project, we want to use this opportunity to fix performance related "
"compiler bugs rather than using assembly workarounds."
msgstr ""

#: ../../../Proposals/LLVMLibC.rst:70
msgid ""
"A large hole in the LLVM toolchain will be plugged with llvm-libc. With the "
"broad platform expertise in the LLVM community, and the strong license and "
"project structure, we think that llvm-libc will be more tunable and robust, "
"without sacrificing the simplicity and accessibility typical of the LLVM "
"project."
msgstr ""

#: ../../../Proposals/LLVMLibC.rst:77
msgid "Platform Support"
msgstr ""

#: ../../../Proposals/LLVMLibC.rst:79
msgid ""
"We envision that llvm-libc will support a variety of platforms in the coming "
"years. Interested parties are encouraged to participate in the design and "
"implementation, and add support for their favorite platforms."
msgstr ""

#: ../../../Proposals/LLVMLibC.rst:84
msgid "ABI Compatibility"
msgstr ""

#: ../../../Proposals/LLVMLibC.rst:86
msgid ""
"As llvm-libc is new, it will not offer ABI stability in the initial stages. "
"However, as we've heard from other LLVM contributors that they are "
"interested in having ABI stability, llvm-libc code will be written in a "
"manner which is amenable to ABI stability. We are looking for contributors "
"interested in driving the design in this space to help us define what "
"exactly does ABI stability mean for llvm-libc."
msgstr ""

#: ../../../Proposals/LLVMLibC.rst:94
msgid "Layering Over Another libc"
msgstr ""

#: ../../../Proposals/LLVMLibC.rst:96
msgid ""
"When meaningful and practically possible on a platform, llvm-libc will be "
"developed in a fashion that it will be possible to layer it over the system "
"libc. This does not mean that one can mix llvm-libc with the system-libc. "
"Also, it does not mean that layering is the only way to use llvm-libc. What "
"it means is that, llvm-libc can optionally be packaged in a way that it can "
"delegate parts of the functionality to the system-libc. The delegation "
"happens internal to llvm-libc and is invisible to the users. From the user's "
"point of view, they only call into llvm-libc."
msgstr ""

#: ../../../Proposals/LLVMLibC.rst:105
msgid ""
"There are a few problems one needs to be mindful of when implementing such a "
"delegation scheme in llvm-libc. Examples of such problems are:"
msgstr ""

#: ../../../Proposals/LLVMLibC.rst:108
msgid ""
"1. One cannot mix data structures from llvm-libc with those from the system-"
"libc. A translation from one set of data structures to the other should "
"happen internal to llvm-libc. 2. The delegation mechanism has to be "
"implemented over a related set of functions. For example, one cannot "
"delegate just the `fopen` function to the system-libc. One will have to "
"delegate all `FILE` related functions to the system-libc."
msgstr ""

#: ../../../Proposals/LLVMLibC.rst:117
msgid "Current Status"
msgstr ""

#: ../../../Proposals/LLVMLibC.rst:119
msgid "llvm-libc development is still in the planning phase."
msgstr ""

#: ../../../Proposals/LLVMLibC.rst:122
msgid "Build Bots"
msgstr ""

#: ../../../Proposals/LLVMLibC.rst:124
msgid ""
"Once the development starts, there will be llvm-libc focused builders added "
"to the LLVM BuildBot."
msgstr ""
