# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:14+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr_FR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../Proposals/VectorPredication.rst:3
msgid "Vector Predication Roadmap"
msgstr ""

#: ../../../Proposals/VectorPredication.rst:7
msgid "Table of Contents"
msgstr "Table des matiÃ¨res"

#: ../../../Proposals/VectorPredication.rst:10
msgid "Motivation"
msgstr ""

#: ../../../Proposals/VectorPredication.rst:12
msgid ""
"This proposal defines a roadmap towards native vector predication in LLVM, "
"specifically for vector instructions with a mask and/or an explicit vector "
"length.  LLVM currently has no target-independent means to model predicated "
"vector instructions for modern SIMD ISAs such as AVX512, ARM SVE, the RISC-V "
"V extension and NEC SX-Aurora.  Only some predicated vector operations, such "
"as masked loads and stores, are available through intrinsics [MaskedIR]_."
msgstr ""

#: ../../../Proposals/VectorPredication.rst:19
msgid ""
"The Vector Predication (VP) extensions is a concrete RFC and prototype "
"implementation to achieve native vector predication in LLVM.  The VP "
"prototype and all related discussions can be found in the VP patch on "
"Phabricator [VPRFC]_."
msgstr ""

#: ../../../Proposals/VectorPredication.rst:25
msgid "Roadmap"
msgstr ""

#: ../../../Proposals/VectorPredication.rst:28
msgid "1. IR-level VP intrinsics"
msgstr ""

#: ../../../Proposals/VectorPredication.rst:30
msgid "There is a consensus on the semantics/instruction set of VP."
msgstr ""

#: ../../../Proposals/VectorPredication.rst:31
msgid "VP intrinsics and attributes are available on IR level."
msgstr ""

#: ../../../Proposals/VectorPredication.rst:32
msgid ""
"TTI has capability flags for VP (``supportsVP()``?, "
"``haveActiveVectorLength()``?)."
msgstr ""

#: ../../../Proposals/VectorPredication.rst:35
msgid ""
"Result: VP usable for IR-level vectorizers (LV, VPlan, RegionVectorizer), "
"potential integration in Clang with builtins."
msgstr ""

#: ../../../Proposals/VectorPredication.rst:39
msgid "2. CodeGen support"
msgstr ""

#: ../../../Proposals/VectorPredication.rst:41
msgid ""
"VP intrinsics translate to first-class SDNodes (eg  ``llvm.vp.fdiv.* -> "
"vp_fdiv``)."
msgstr ""

#: ../../../Proposals/VectorPredication.rst:43
msgid ""
"VP legalization (legalize explicit vector length to mask (AVX512), legalize "
"VP SDNodes to pre-existing ones (SSE, NEON))."
msgstr ""

#: ../../../Proposals/VectorPredication.rst:46
msgid "Result: Backend development based on VP SDNodes."
msgstr ""

#: ../../../Proposals/VectorPredication.rst:49
msgid "3. Lift InstSimplify/InstCombine/DAGCombiner to VP"
msgstr ""

#: ../../../Proposals/VectorPredication.rst:51
msgid ""
"Introduce PredicatedInstruction, PredicatedBinaryOperator, .. helper classes "
"that match standard vector IR and VP intrinsics."
msgstr ""

#: ../../../Proposals/VectorPredication.rst:53
msgid ""
"Add a matcher context to PatternMatch and context-aware IR Builder APIs."
msgstr ""

#: ../../../Proposals/VectorPredication.rst:54
msgid ""
"Incrementally lift DAGCombiner to work on VP SDNodes as well as on regular "
"vector instructions."
msgstr ""

#: ../../../Proposals/VectorPredication.rst:56
msgid ""
"Incrementally lift InstCombine/InstSimplify to operate on VP as well as "
"regular IR instructions."
msgstr ""

#: ../../../Proposals/VectorPredication.rst:59
msgid ""
"Result: Optimization of VP intrinsics on par with standard vector "
"instructions."
msgstr ""

#: ../../../Proposals/VectorPredication.rst:62
msgid "4. Deprecate llvm.masked.* / llvm.experimental.reduce.*"
msgstr ""

#: ../../../Proposals/VectorPredication.rst:64
msgid ""
"Modernize llvm.masked.* / llvm.experimental.reduce* by translating to VP."
msgstr ""

#: ../../../Proposals/VectorPredication.rst:65
msgid "DCE transitional APIs."
msgstr ""

#: ../../../Proposals/VectorPredication.rst:67
msgid "Result: VP has superseded earlier vector intrinsics."
msgstr ""

#: ../../../Proposals/VectorPredication.rst:70
msgid "5. Predicated IR Instructions"
msgstr ""

#: ../../../Proposals/VectorPredication.rst:72
msgid ""
"Vector instructions have an optional mask and vector length parameter. These "
"lower to VP SDNodes (from Stage 2)."
msgstr ""

#: ../../../Proposals/VectorPredication.rst:74
msgid ""
"Phase out VP intrinsics, only keeping those that are not equivalent to "
"vectorized scalar instructions (reduce,  shuffles, ..)"
msgstr ""

#: ../../../Proposals/VectorPredication.rst:76
msgid ""
"InstCombine/InstSimplify expect predication in regular Instructions (Stage "
"(3) has laid the groundwork)."
msgstr ""

#: ../../../Proposals/VectorPredication.rst:79
msgid "Result: Native vector predication in IR."
msgstr ""

#: ../../../Proposals/VectorPredication.rst:82
msgid "References"
msgstr ""

#: ../../../Proposals/VectorPredication.rst:84
msgid ""
"`llvm.masked.*` intrinsics, https://llvm.org/docs/LangRef.html#masked-vector-"
"load-and-store-intrinsics"
msgstr ""

#: ../../../Proposals/VectorPredication.rst:87
msgid ""
"RFC: Prototype & Roadmap for vector predication in LLVM, https://reviews."
"llvm.org/D57504"
msgstr ""
