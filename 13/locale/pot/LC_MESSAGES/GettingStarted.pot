# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:14+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../GettingStarted.rst:3
msgid "Getting Started with the LLVM System"
msgstr ""

#: ../../../GettingStarted.rst:9
msgid "Overview"
msgstr ""

#: ../../../GettingStarted.rst:11
msgid "Welcome to the LLVM project!"
msgstr ""

#: ../../../GettingStarted.rst:13
msgid ""
"The LLVM project has multiple components. The core of the project is itself "
"called \"LLVM\". This contains all of the tools, libraries, and header files "
"needed to process intermediate representations and converts it into object "
"files.  Tools include an assembler, disassembler, bitcode analyzer, and "
"bitcode optimizer.  It also contains basic regression tests."
msgstr ""

#: ../../../GettingStarted.rst:19
msgid ""
"C-like languages use the `Clang <https://clang.llvm.org/>`_ front end.  This "
"component compiles C, C++, Objective C, and Objective C++ code into LLVM "
"bitcode -- and from there into object files, using LLVM."
msgstr ""

#: ../../../GettingStarted.rst:23
msgid ""
"Other components include: the `libc++ C++ standard library <https://libcxx."
"llvm.org>`_, the `LLD linker <https://lld.llvm.org>`_, and more."
msgstr ""

#: ../../../GettingStarted.rst:28
msgid "Getting the Source Code and Building LLVM"
msgstr ""

#: ../../../GettingStarted.rst:30
msgid ""
"The LLVM Getting Started documentation may be out of date.  The `Clang "
"Getting Started <https://clang.llvm.org/get_started.html>`_ page might have "
"more accurate information."
msgstr ""

#: ../../../GettingStarted.rst:34
msgid ""
"This is an example workflow and configuration to get and build the LLVM "
"source:"
msgstr ""

#: ../../../GettingStarted.rst:36
msgid "Checkout LLVM (including related subprojects like Clang):"
msgstr ""

#: ../../../GettingStarted.rst:38
msgid "``git clone https://github.com/llvm/llvm-project.git``"
msgstr ""

#: ../../../GettingStarted.rst:39
msgid ""
"Or, on windows, ``git clone --config core.autocrlf=false https://github.com/"
"llvm/llvm-project.git``"
msgstr ""

#: ../../../GettingStarted.rst:41
msgid ""
"To save storage and speed-up the checkout time, you may want to do a "
"`shallow clone <https://git-scm.com/docs/git-clone#Documentation/git-clone."
"txt---depthltdepthgt>`_. For example, to get the latest revision of the LLVM "
"project, use ``git clone --depth 1 https://github.com/llvm/llvm-project.git``"
msgstr ""

#: ../../../GettingStarted.rst:46
msgid "Configure and build LLVM and Clang:"
msgstr ""

#: ../../../GettingStarted.rst:48
msgid "``cd llvm-project``"
msgstr ""

#: ../../../GettingStarted.rst:49
msgid "``mkdir build``"
msgstr ""

#: ../../../GettingStarted.rst:50
msgid "``cd build``"
msgstr ""

#: ../../../GettingStarted.rst:51
msgid "``cmake -G <generator> [options] ../llvm``"
msgstr ""

#: ../../../GettingStarted.rst:53
msgid "Some common build system generators are:"
msgstr ""

#: ../../../GettingStarted.rst:55
msgid ""
"``Ninja`` --- for generating `Ninja <https://ninja-build.org>`_ build files. "
"Most llvm developers use Ninja."
msgstr ""

#: ../../../GettingStarted.rst:57
msgid ""
"``Unix Makefiles`` --- for generating make-compatible parallel makefiles."
msgstr ""

#: ../../../GettingStarted.rst:58
msgid ""
"``Visual Studio`` --- for generating Visual Studio projects and solutions."
msgstr ""

#: ../../../GettingStarted.rst:60
msgid "``Xcode`` --- for generating Xcode projects."
msgstr ""

#: ../../../GettingStarted.rst:62
msgid "Some Common options:"
msgstr ""

#: ../../../GettingStarted.rst:64
msgid ""
"``-DLLVM_ENABLE_PROJECTS='...'`` --- semicolon-separated list of the LLVM "
"subprojects you'd like to additionally build. Can include any of: clang, "
"clang-tools-extra, libcxx, libcxxabi, libunwind, lldb, compiler-rt, lld, "
"polly, or cross-project-tests."
msgstr ""

#: ../../../GettingStarted.rst:69
msgid ""
"For example, to build LLVM, Clang, libcxx, and libcxxabi, use ``-"
"DLLVM_ENABLE_PROJECTS=\"clang;libcxx;libcxxabi\"``."
msgstr ""

#: ../../../GettingStarted.rst:72
msgid ""
"``-DCMAKE_INSTALL_PREFIX=directory`` --- Specify for *directory* the full "
"pathname of where you want the LLVM tools and libraries to be installed "
"(default ``/usr/local``)."
msgstr ""

#: ../../../GettingStarted.rst:76
msgid ""
"``-DCMAKE_BUILD_TYPE=type`` --- Valid options for *type* are Debug, Release, "
"RelWithDebInfo, and MinSizeRel. Default is Debug."
msgstr ""

#: ../../../GettingStarted.rst:79
msgid ""
"``-DLLVM_ENABLE_ASSERTIONS=On`` --- Compile with assertion checks enabled "
"(default is Yes for Debug builds, No for all other build types)."
msgstr ""

#: ../../../GettingStarted.rst:82
msgid ""
"``cmake --build . [--target <target>]`` or the build system specified above "
"directly."
msgstr ""

#: ../../../GettingStarted.rst:85
msgid ""
"The default target (i.e. ``cmake --build .`` or ``make``) will build all of "
"LLVM."
msgstr ""

#: ../../../GettingStarted.rst:88
msgid ""
"The ``check-all`` target (i.e. ``ninja check-all``) will run the regression "
"tests to ensure everything is in working order."
msgstr ""

#: ../../../GettingStarted.rst:91
msgid ""
"CMake will generate build targets for each tool and library, and most LLVM "
"sub-projects generate their own ``check-<project>`` target."
msgstr ""

#: ../../../GettingStarted.rst:94
msgid ""
"Running a serial build will be **slow**.  To improve speed, try running a "
"parallel build. That's done by default in Ninja; for ``make``, use the "
"option ``-j NN``, where ``NN`` is the number of parallel jobs, e.g. the "
"number of available CPUs."
msgstr ""

#: ../../../GettingStarted.rst:99
msgid "For more information see `CMake <CMake.html>`__"
msgstr ""

#: ../../../GettingStarted.rst:101
msgid ""
"If you get an \"internal compiler error (ICE)\" or test failures, see "
"`below`_."
msgstr ""

#: ../../../GettingStarted.rst:104
msgid ""
"Consult the `Getting Started with LLVM`_ section for detailed information on "
"configuring and compiling LLVM.  Go to `Directory Layout`_ to learn about "
"the layout of the source code tree."
msgstr ""

#: ../../../GettingStarted.rst:109
msgid "Requirements"
msgstr ""

#: ../../../GettingStarted.rst:111
msgid ""
"Before you begin to use the LLVM system, review the requirements given "
"below. This may save you some trouble by knowing ahead of time what hardware "
"and software you will need."
msgstr ""

#: ../../../GettingStarted.rst:116
msgid "Hardware"
msgstr ""

#: ../../../GettingStarted.rst:118
msgid "LLVM is known to work on the following host platforms:"
msgstr ""

#: ../../../GettingStarted.rst:121
msgid "OS"
msgstr ""

#: ../../../GettingStarted.rst:121
msgid "Arch"
msgstr ""

#: ../../../GettingStarted.rst:121
msgid "Compilers"
msgstr ""

#: ../../../GettingStarted.rst:123 ../../../GettingStarted.rst:124
#: ../../../GettingStarted.rst:125 ../../../GettingStarted.rst:126
#: ../../../GettingStarted.rst:127 ../../../GettingStarted.rst:128
msgid "Linux"
msgstr ""

#: ../../../GettingStarted.rst:123 ../../../GettingStarted.rst:130
#: ../../../GettingStarted.rst:132 ../../../GettingStarted.rst:137
msgid "x86\\ :sup:`1`"
msgstr ""

#: ../../../GettingStarted.rst:123 ../../../GettingStarted.rst:124
#: ../../../GettingStarted.rst:125 ../../../GettingStarted.rst:126
#: ../../../GettingStarted.rst:127 ../../../GettingStarted.rst:128
#: ../../../GettingStarted.rst:130 ../../../GettingStarted.rst:131
#: ../../../GettingStarted.rst:132 ../../../GettingStarted.rst:133
#: ../../../GettingStarted.rst:135
msgid "GCC, Clang"
msgstr ""

#: ../../../GettingStarted.rst:124 ../../../GettingStarted.rst:131
#: ../../../GettingStarted.rst:133
msgid "amd64"
msgstr ""

#: ../../../GettingStarted.rst:125
msgid "ARM"
msgstr ""

#: ../../../GettingStarted.rst:126
msgid "Mips"
msgstr ""

#: ../../../GettingStarted.rst:127 ../../../GettingStarted.rst:134
msgid "PowerPC"
msgstr ""

#: ../../../GettingStarted.rst:128
msgid "SystemZ"
msgstr ""

#: ../../../GettingStarted.rst:129
msgid "Solaris"
msgstr ""

#: ../../../GettingStarted.rst:129
msgid "V9 (Ultrasparc)"
msgstr ""

#: ../../../GettingStarted.rst:129 ../../../GettingStarted.rst:134
#: ../../../GettingStarted.rst:136
msgid "GCC"
msgstr ""

#: ../../../GettingStarted.rst:130 ../../../GettingStarted.rst:131
msgid "FreeBSD"
msgstr ""

#: ../../../GettingStarted.rst:132 ../../../GettingStarted.rst:133
msgid "NetBSD"
msgstr ""

#: ../../../GettingStarted.rst:134
msgid "macOS\\ :sup:`2`"
msgstr ""

#: ../../../GettingStarted.rst:135
msgid "macOS"
msgstr ""

#: ../../../GettingStarted.rst:135
msgid "x86"
msgstr ""

#: ../../../GettingStarted.rst:136
msgid "Cygwin/Win32"
msgstr ""

#: ../../../GettingStarted.rst:136
msgid "x86\\ :sup:`1, 3`"
msgstr ""

#: ../../../GettingStarted.rst:137
msgid "Windows"
msgstr ""

#: ../../../GettingStarted.rst:137 ../../../GettingStarted.rst:138
msgid "Visual Studio"
msgstr ""

#: ../../../GettingStarted.rst:138
msgid "Windows x64"
msgstr ""

#: ../../../GettingStarted.rst:138
msgid "x86-64"
msgstr ""

#: ../../../GettingStarted.rst:143
msgid "Code generation supported for Pentium processors and up"
msgstr ""

#: ../../../GettingStarted.rst:144
msgid "Code generation supported for 32-bit ABI only"
msgstr ""

#: ../../../GettingStarted.rst:145
msgid ""
"To use LLVM modules on Win32-based system, you may configure LLVM with ``-"
"DBUILD_SHARED_LIBS=On``."
msgstr ""

#: ../../../GettingStarted.rst:148
msgid ""
"Note that Debug builds require a lot of time and disk space.  An LLVM-only "
"build will need about 1-3 GB of space.  A full build of LLVM and Clang will "
"need around 15-20 GB of disk space.  The exact space requirements will vary "
"by system.  (It is so large because of all the debugging information and the "
"fact that the libraries are statically linked into multiple tools)."
msgstr ""

#: ../../../GettingStarted.rst:154
msgid ""
"If you are space-constrained, you can build only selected tools or only "
"selected targets.  The Release build requires considerably less space."
msgstr ""

#: ../../../GettingStarted.rst:157
msgid ""
"The LLVM suite *may* compile on other platforms, but it is not guaranteed to "
"do so.  If compilation is successful, the LLVM utilities should be able to "
"assemble, disassemble, analyze, and optimize LLVM bitcode.  Code generation "
"should work as well, although the generated native code may not work on your "
"platform."
msgstr ""

#: ../../../GettingStarted.rst:164
msgid "Software"
msgstr ""

#: ../../../GettingStarted.rst:166
msgid ""
"Compiling LLVM requires that you have several software packages installed. "
"The table below lists those required packages. The Package column is the "
"usual name for the software package that LLVM depends on. The Version column "
"provides \"known to work\" versions of the package. The Notes column "
"describes how LLVM uses the package and provides other details."
msgstr ""

#: ../../../GettingStarted.rst:173
msgid "Package"
msgstr ""

#: ../../../GettingStarted.rst:173
msgid "Version"
msgstr ""

#: ../../../GettingStarted.rst:173
msgid "Notes"
msgstr ""

#: ../../../GettingStarted.rst:175
msgid "`CMake <http://cmake.org/>`__"
msgstr ""

#: ../../../GettingStarted.rst:175
msgid ">=3.13.4"
msgstr ""

#: ../../../GettingStarted.rst:175
msgid "Makefile/workspace generator"
msgstr ""

#: ../../../GettingStarted.rst:176
msgid "`GCC <http://gcc.gnu.org/>`_"
msgstr ""

#: ../../../GettingStarted.rst:176
msgid ">=5.1.0"
msgstr ""

#: ../../../GettingStarted.rst:176
msgid "C/C++ compiler\\ :sup:`1`"
msgstr ""

#: ../../../GettingStarted.rst:177
msgid "`python <http://www.python.org/>`_"
msgstr ""

#: ../../../GettingStarted.rst:177
msgid ">=3.6"
msgstr ""

#: ../../../GettingStarted.rst:177
msgid "Automated test suite\\ :sup:`2`"
msgstr ""

#: ../../../GettingStarted.rst:178
msgid "`zlib <http://zlib.net>`_"
msgstr ""

#: ../../../GettingStarted.rst:178
msgid ">=1.2.3.4"
msgstr ""

#: ../../../GettingStarted.rst:178
msgid "Compression library\\ :sup:`3`"
msgstr ""

#: ../../../GettingStarted.rst:179
msgid "`GNU Make <http://savannah.gnu.org/projects/make>`_"
msgstr ""

#: ../../../GettingStarted.rst:179
msgid "3.79, 3.79.1"
msgstr ""

#: ../../../GettingStarted.rst:179
msgid "Makefile/build processor\\ :sup:`4`"
msgstr ""

#: ../../../GettingStarted.rst:184
msgid ""
"Only the C and C++ languages are needed so there's no need to build the "
"other languages for LLVM's purposes. See `below` for specific version info."
msgstr ""

#: ../../../GettingStarted.rst:187
msgid ""
"Only needed if you want to run the automated test suite in the ``llvm/test`` "
"directory."
msgstr ""

#: ../../../GettingStarted.rst:189
msgid ""
"Optional, adds compression / uncompression capabilities to selected LLVM "
"tools."
msgstr ""

#: ../../../GettingStarted.rst:191
msgid "Optional, you can use any other build tool supported by CMake."
msgstr ""

#: ../../../GettingStarted.rst:193
msgid ""
"Additionally, your compilation host is expected to have the usual plethora "
"of Unix utilities. Specifically:"
msgstr ""

#: ../../../GettingStarted.rst:196
msgid "**ar** --- archive library builder"
msgstr ""

#: ../../../GettingStarted.rst:197
msgid "**bzip2** --- bzip2 command for distribution generation"
msgstr ""

#: ../../../GettingStarted.rst:198
msgid "**bunzip2** --- bunzip2 command for distribution checking"
msgstr ""

#: ../../../GettingStarted.rst:199
msgid "**chmod** --- change permissions on a file"
msgstr ""

#: ../../../GettingStarted.rst:200
msgid "**cat** --- output concatenation utility"
msgstr ""

#: ../../../GettingStarted.rst:201
msgid "**cp** --- copy files"
msgstr ""

#: ../../../GettingStarted.rst:202
msgid "**date** --- print the current date/time"
msgstr ""

#: ../../../GettingStarted.rst:203
msgid "**echo** --- print to standard output"
msgstr ""

#: ../../../GettingStarted.rst:204
msgid "**egrep** --- extended regular expression search utility"
msgstr ""

#: ../../../GettingStarted.rst:205
msgid "**find** --- find files/dirs in a file system"
msgstr ""

#: ../../../GettingStarted.rst:206
msgid "**grep** --- regular expression search utility"
msgstr ""

#: ../../../GettingStarted.rst:207
msgid "**gzip** --- gzip command for distribution generation"
msgstr ""

#: ../../../GettingStarted.rst:208
msgid "**gunzip** --- gunzip command for distribution checking"
msgstr ""

#: ../../../GettingStarted.rst:209
msgid "**install** --- install directories/files"
msgstr ""

#: ../../../GettingStarted.rst:210
msgid "**mkdir** --- create a directory"
msgstr ""

#: ../../../GettingStarted.rst:211
msgid "**mv** --- move (rename) files"
msgstr ""

#: ../../../GettingStarted.rst:212
msgid "**ranlib** --- symbol table builder for archive libraries"
msgstr ""

#: ../../../GettingStarted.rst:213
msgid "**rm** --- remove (delete) files and directories"
msgstr ""

#: ../../../GettingStarted.rst:214
msgid "**sed** --- stream editor for transforming output"
msgstr ""

#: ../../../GettingStarted.rst:215
msgid "**sh** --- Bourne shell for make build scripts"
msgstr ""

#: ../../../GettingStarted.rst:216
msgid "**tar** --- tape archive for distribution generation"
msgstr ""

#: ../../../GettingStarted.rst:217
msgid "**test** --- test things in file system"
msgstr ""

#: ../../../GettingStarted.rst:218
msgid "**unzip** --- unzip command for distribution checking"
msgstr ""

#: ../../../GettingStarted.rst:219
msgid "**zip** --- zip command for distribution generation"
msgstr ""

#: ../../../GettingStarted.rst:225
msgid "Host C++ Toolchain, both Compiler and Standard Library"
msgstr ""

#: ../../../GettingStarted.rst:227
msgid ""
"LLVM is very demanding of the host C++ compiler, and as such tends to expose "
"bugs in the compiler. We also attempt to follow improvements and "
"developments in the C++ language and library reasonably closely. As such, we "
"require a modern host C++ toolchain, both compiler and standard library, in "
"order to build LLVM."
msgstr ""

#: ../../../GettingStarted.rst:232
msgid ""
"LLVM is written using the subset of C++ documented in :doc:`coding "
"standards<CodingStandards>`. To enforce this language version, we check the "
"most popular host toolchains for specific minimum versions in our build "
"systems:"
msgstr ""

#: ../../../GettingStarted.rst:236
msgid "Clang 3.5"
msgstr ""

#: ../../../GettingStarted.rst:237
msgid "Apple Clang 6.0"
msgstr ""

#: ../../../GettingStarted.rst:238
msgid "GCC 5.1"
msgstr ""

#: ../../../GettingStarted.rst:239
msgid "Visual Studio 2017"
msgstr ""

#: ../../../GettingStarted.rst:241
msgid ""
"Anything older than these toolchains *may* work, but will require forcing "
"the build system with a special option and is not really a supported host "
"platform. Also note that older versions of these compilers have often "
"crashed or miscompiled LLVM."
msgstr ""

#: ../../../GettingStarted.rst:246
msgid ""
"For less widely used host toolchains such as ICC or xlC, be aware that a "
"very recent version may be required to support all of the C++ features used "
"in LLVM."
msgstr ""

#: ../../../GettingStarted.rst:249
msgid ""
"We track certain versions of software that are *known* to fail when used as "
"part of the host toolchain. These even include linkers at times."
msgstr ""

#: ../../../GettingStarted.rst:252
msgid ""
"**GNU ld 2.16.X**. Some 2.16.X versions of the ld linker will produce very "
"long warning messages complaining that some \"``.gnu.linkonce.t.*``\" symbol "
"was defined in a discarded section. You can safely ignore these messages as "
"they are erroneous and the linkage is correct.  These messages disappear "
"using ld 2.17."
msgstr ""

#: ../../../GettingStarted.rst:257
msgid ""
"**GNU binutils 2.17**: Binutils 2.17 contains `a bug <http://sourceware.org/"
"bugzilla/show_bug.cgi?id=3111>`__ which causes huge link times (minutes "
"instead of seconds) when building LLVM.  We recommend upgrading to a newer "
"version (2.17.50.0.4 or later)."
msgstr ""

#: ../../../GettingStarted.rst:262
msgid ""
"**GNU Binutils 2.19.1 Gold**: This version of Gold contained `a bug <http://"
"sourceware.org/bugzilla/show_bug.cgi?id=9836>`__ which causes intermittent "
"failures when building LLVM with position independent code.  The symptom is "
"an error about cyclic dependencies.  We recommend upgrading to a newer "
"version of Gold."
msgstr ""

#: ../../../GettingStarted.rst:269
msgid "Getting a Modern Host C++ Toolchain"
msgstr ""

#: ../../../GettingStarted.rst:271
msgid ""
"This section mostly applies to Linux and older BSDs. On macOS, you should "
"have a sufficiently modern Xcode, or you will likely need to upgrade until "
"you do. Windows does not have a \"system compiler\", so you must install "
"either Visual Studio 2017 or a recent version of mingw64. FreeBSD 10.0 and "
"newer have a modern Clang as the system compiler."
msgstr ""

#: ../../../GettingStarted.rst:277
msgid ""
"However, some Linux distributions and some other or older BSDs sometimes "
"have extremely old versions of GCC. These steps attempt to help you upgrade "
"you compiler even on such a system. However, if at all possible, we "
"encourage you to use a recent version of a distribution with a modern system "
"compiler that meets these requirements. Note that it is tempting to install "
"a prior version of Clang and libc++ to be the host compiler, however libc++ "
"was not well tested or set up to build on Linux until relatively recently. "
"As a consequence, this guide suggests just using libstdc++ and a modern GCC "
"as the initial host in a bootstrap, and then using Clang (and potentially "
"libc++)."
msgstr ""

#: ../../../GettingStarted.rst:287
msgid ""
"The first step is to get a recent GCC toolchain installed. The most common "
"distribution on which users have struggled with the version requirements is "
"Ubuntu Precise, 12.04 LTS. For this distribution, one easy option is to "
"install the `toolchain testing PPA`_ and use it to install a modern GCC. "
"There is a really nice discussions of this on the `ask ubuntu stack "
"exchange`_ and a `github gist`_ with updated commands. However, not all "
"users can use PPAs and there are many other distributions, so it may be "
"necessary (or just useful, if you're here you *are* doing compiler "
"development after all) to build and install GCC from source. It is also "
"quite easy to do these days."
msgstr ""

#: ../../../GettingStarted.rst:304
msgid "Easy steps for installing GCC 5.1.0:"
msgstr ""

#: ../../../GettingStarted.rst:324
msgid ""
"For more details, check out the excellent `GCC wiki entry`_, where I got "
"most of this information from."
msgstr ""

#: ../../../GettingStarted.rst:330
msgid ""
"Once you have a GCC toolchain, configure your build of LLVM to use the new "
"toolchain for your host compiler and C++ standard library. Because the new "
"version of libstdc++ is not on the system library search path, you need to "
"pass extra linker flags so that it can be found at link time (``-L``) and at "
"runtime (``-rpath``). If you are using CMake, this invocation should produce "
"working binaries:"
msgstr ""

#: ../../../GettingStarted.rst:344
msgid ""
"If you fail to set rpath, most LLVM binaries will fail on startup with a "
"message from the loader similar to ``libstdc++.so.6: version "
"`GLIBCXX_3.4.20' not found``. This means you need to tweak the -rpath linker "
"flag."
msgstr ""

#: ../../../GettingStarted.rst:348
msgid ""
"This method will add an absolute path to the rpath of all executables. "
"That's fine for local development. If you want to distribute the binaries "
"you build so that they can run on older systems, copy ``libstdc++.so.6`` "
"into the ``lib/`` directory.  All of LLVM's shipping binaries have an rpath "
"pointing at ``$ORIGIN/../lib``, so they will find ``libstdc++.so.6`` there.  "
"Non-distributed binaries don't have an rpath set and won't find ``libstdc++."
"so.6``. Pass ``-DLLVM_LOCAL_RPATH=\"$HOME/toolchains/lib64\"`` to cmake to "
"add an absolute path to ``libstdc++.so.6`` as above. Since these binaries "
"are not distributed, having an absolute local path is fine for them."
msgstr ""

#: ../../../GettingStarted.rst:358
msgid ""
"When you build Clang, you will need to give *it* access to modern C++ "
"standard library in order to use it as your new host in part of a bootstrap. "
"There are two easy ways to do this, either build (and install) libc++ along "
"with Clang and then use it with the ``-stdlib=libc++`` compile and link "
"flag, or install Clang into the same prefix (``$HOME/toolchains`` above) as "
"GCC. Clang will look within its own prefix for libstdc++ and use it if "
"found. You can also add an explicit prefix for Clang to look in for a GCC "
"toolchain with the ``--gcc-toolchain=/opt/my/gcc/prefix`` flag, passing it "
"to both compile and link commands when using your just-built-Clang to "
"bootstrap."
msgstr ""

#: ../../../GettingStarted.rst:371
msgid "Getting Started with LLVM"
msgstr ""

#: ../../../GettingStarted.rst:373
msgid ""
"The remainder of this guide is meant to get you up and running with LLVM and "
"to give you some basic information about the LLVM environment."
msgstr ""

#: ../../../GettingStarted.rst:376
msgid ""
"The later sections of this guide describe the `general layout`_ of the LLVM "
"source tree, a `simple example`_ using the LLVM tool chain, and `links`_ to "
"find more information about LLVM or to get help via e-mail."
msgstr ""

#: ../../../GettingStarted.rst:381
msgid "Terminology and Notation"
msgstr ""

#: ../../../GettingStarted.rst:383
msgid ""
"Throughout this manual, the following names are used to denote paths "
"specific to the local system and working environment.  *These are not "
"environment variables you need to set but just strings used in the rest of "
"this document below*.  In any of the examples below, simply replace each of "
"these names with the appropriate pathname on your local system.  All these "
"paths are absolute:"
msgstr ""

#: ../../../GettingStarted.rst:389
msgid "``SRC_ROOT``"
msgstr ""

#: ../../../GettingStarted.rst:391
msgid "This is the top level directory of the LLVM source tree."
msgstr ""

#: ../../../GettingStarted.rst:393
msgid "``OBJ_ROOT``"
msgstr ""

#: ../../../GettingStarted.rst:395
msgid ""
"This is the top level directory of the LLVM object tree (i.e. the tree where "
"object files and compiled programs will be placed.  It can be the same as "
"SRC_ROOT)."
msgstr ""

#: ../../../GettingStarted.rst:400
msgid "Unpacking the LLVM Archives"
msgstr ""

#: ../../../GettingStarted.rst:402
msgid ""
"If you have the LLVM distribution, you will need to unpack it before you can "
"begin to compile it.  LLVM is distributed as a number of different "
"subprojects. Each one has its own download which is a TAR archive that is "
"compressed with the gzip program."
msgstr ""

#: ../../../GettingStarted.rst:407
msgid "The files are as follows, with *x.y* marking the version number:"
msgstr ""

#: ../../../GettingStarted.rst:409
msgid "``llvm-x.y.tar.gz``"
msgstr ""

#: ../../../GettingStarted.rst:411
msgid "Source release for the LLVM libraries and tools."
msgstr ""

#: ../../../GettingStarted.rst:413
msgid "``cfe-x.y.tar.gz``"
msgstr ""

#: ../../../GettingStarted.rst:415
msgid "Source release for the Clang frontend."
msgstr ""

#: ../../../GettingStarted.rst:420
msgid "Checkout LLVM from Git"
msgstr ""

#: ../../../GettingStarted.rst:422
msgid "You can also checkout the source code for LLVM from Git."
msgstr ""

#: ../../../GettingStarted.rst:426
msgid ""
"Passing ``--config core.autocrlf=false`` should not be required in the "
"future after we adjust the .gitattribute settings correctly, but is required "
"for Windows users at the time of this writing."
msgstr ""

#: ../../../GettingStarted.rst:430
msgid "Simply run:"
msgstr ""

#: ../../../GettingStarted.rst:436
msgid "or on Windows,"
msgstr ""

#: ../../../GettingStarted.rst:442
msgid ""
"This will create an '``llvm-project``' directory in the current directory "
"and fully populate it with all of the source code, test directories, and "
"local copies of documentation files for LLVM and all the related "
"subprojects. Note that unlike the tarballs, which contain each subproject in "
"a separate file, the git repository contains all of the projects together."
msgstr ""

#: ../../../GettingStarted.rst:448
msgid ""
"If you want to get a specific release (as opposed to the most recent "
"revision), you can check out a tag after cloning the repository. E.g., `git "
"checkout llvmorg-6.0.1` inside the ``llvm-project`` directory created by the "
"above command.  Use `git tag -l` to list all of them."
msgstr ""

#: ../../../GettingStarted.rst:454
msgid "Sending patches"
msgstr ""

#: ../../../GettingStarted.rst:456
msgid ""
"Please read `Developer Policy <DeveloperPolicy.html#one-off-patches>`_, too."
msgstr ""

#: ../../../GettingStarted.rst:458
msgid ""
"We don't currently accept github pull requests, so you'll need to send "
"patches either via emailing to llvm-commits, or, preferably, via :ref:"
"`Phabricator <phabricator-reviews>`."
msgstr ""

#: ../../../GettingStarted.rst:462
msgid ""
"You'll generally want to make sure your branch has a single commit, "
"corresponding to the review you wish to send, up-to-date with the upstream "
"``origin/main`` branch, and doesn't contain merges. Once you have that, you "
"can start `a Phabricator review <Phabricator.html>`_ (or use ``git show`` or "
"``git format-patch`` to output the diff, and attach it to an email message)."
msgstr ""

#: ../../../GettingStarted.rst:468
msgid ""
"However, using the \"Arcanist\" tool is often easier. After `installing "
"arcanist`_, you can upload the latest commit using:"
msgstr ""

#: ../../../GettingStarted.rst:475
msgid ""
"Additionally, before sending a patch for review, please also try to ensure "
"it's formatted properly. We use ``clang-format`` for this, which has git "
"integration through the ``git-clang-format`` script. On some systems, it may "
"already be installed (or be installable via your package manager). If so, "
"you can simply run it -- the following command will format only the code "
"changed in the most recent commit:"
msgstr ""

#: ../../../GettingStarted.rst:486
msgid ""
"Note that this modifies the files, but doesn't commit them -- you'll likely "
"want to run"
msgstr ""

#: ../../../GettingStarted.rst:493
msgid "in order to update the last commit with all pending changes."
msgstr ""

#: ../../../GettingStarted.rst:496
msgid ""
"If you don't already have ``clang-format`` or ``git clang-format`` installed "
"on your system, the ``clang-format`` binary will be built alongside clang, "
"and the git integration can be run from ``clang/tools/clang-format/git-clang-"
"format``."
msgstr ""

#: ../../../GettingStarted.rst:505
msgid "For developers to commit changes from Git"
msgstr ""

#: ../../../GettingStarted.rst:507
msgid ""
"Once a patch is reviewed, you should rebase it, re-test locally, and commit "
"the changes to LLVM's main branch. This is done using `git push` if you have "
"the required access rights. See `committing a change <Phabricator."
"html#committing-a-change>`_ for Phabricator based commits or `obtaining "
"commit access <DeveloperPolicy.html#obtaining-commit-access>`_ for commit "
"access."
msgstr ""

#: ../../../GettingStarted.rst:514
msgid ""
"Here is an example workflow using git. This workflow assumes you have an "
"accepted commit on the branch named `branch-with-change`."
msgstr ""

#: ../../../GettingStarted.rst:530
msgid ""
"LLVM currently has a linear-history policy, which means that merge commits "
"are not allowed. The `llvm-project` repo on github is configured to reject "
"pushes that include merges, so the `git rebase` step above is required."
msgstr ""

#: ../../../GettingStarted.rst:534
msgid ""
"Please ask for help if you're having trouble with your particular git "
"workflow."
msgstr ""

#: ../../../GettingStarted.rst:540
msgid "Git pre-push hook"
msgstr ""

#: ../../../GettingStarted.rst:542
msgid ""
"We include an optional pre-push hook that run some sanity checks on the "
"revisions you are about to push and ask confirmation if you push multiple "
"commits at once. You can set it up (on Unix systems) by running from the "
"repository root:"
msgstr ""

#: ../../../GettingStarted.rst:551
msgid "Bisecting commits"
msgstr ""

#: ../../../GettingStarted.rst:553
msgid ""
"See `Bisecting LLVM code <GitBisecting.html>`_ for how to use ``git bisect`` "
"on LLVM."
msgstr ""

#: ../../../GettingStarted.rst:557
msgid "Reverting a change"
msgstr ""

#: ../../../GettingStarted.rst:559
msgid ""
"When reverting changes using git, the default message will say \"This "
"reverts commit XYZ\". Leave this at the end of the commit message, but add "
"some details before it as to why the commit is being reverted. A brief "
"explanation and/or links to bots that demonstrate the problem are sufficient."
msgstr ""

#: ../../../GettingStarted.rst:565
msgid "Local LLVM Configuration"
msgstr ""

#: ../../../GettingStarted.rst:567
msgid ""
"Once checked out repository, the LLVM suite source code must be configured "
"before being built. This process uses CMake.  Unlinke the normal "
"``configure`` script, CMake generates the build files in whatever format you "
"request as well as various ``*.inc`` files, and ``llvm/include/Config/config."
"h``."
msgstr ""

#: ../../../GettingStarted.rst:572
msgid ""
"Variables are passed to ``cmake`` on the command line using the format ``-"
"D<variable name>=<value>``. The following variables are some common options "
"used by people developing LLVM."
msgstr ""

#: ../../../GettingStarted.rst:577
msgid "Variable"
msgstr ""

#: ../../../GettingStarted.rst:577
msgid "Purpose"
msgstr ""

#: ../../../GettingStarted.rst:579
msgid "CMAKE_C_COMPILER"
msgstr ""

#: ../../../GettingStarted.rst:579
msgid ""
"Tells ``cmake`` which C compiler to use. By default, this will be /usr/bin/"
"cc."
msgstr ""

#: ../../../GettingStarted.rst:582
msgid "CMAKE_CXX_COMPILER"
msgstr ""

#: ../../../GettingStarted.rst:582
msgid ""
"Tells ``cmake`` which C++ compiler to use. By default, this will be /usr/bin/"
"c++."
msgstr ""

#: ../../../GettingStarted.rst:585
msgid "CMAKE_BUILD_TYPE"
msgstr ""

#: ../../../GettingStarted.rst:585
msgid ""
"Tells ``cmake`` what type of build you are trying to generate files for. "
"Valid options are Debug, Release, RelWithDebInfo, and MinSizeRel. Default is "
"Debug."
msgstr ""

#: ../../../GettingStarted.rst:590
msgid "CMAKE_INSTALL_PREFIX"
msgstr ""

#: ../../../GettingStarted.rst:590
msgid ""
"Specifies the install directory to target when running the install action of "
"the build files."
msgstr ""

#: ../../../GettingStarted.rst:593
msgid "PYTHON_EXECUTABLE"
msgstr ""

#: ../../../GettingStarted.rst:593
msgid ""
"Forces CMake to use a specific Python version by passing a path to a Python "
"interpreter. By default the Python version of the interpreter in your PATH "
"is used."
msgstr ""

#: ../../../GettingStarted.rst:598
msgid "LLVM_TARGETS_TO_BUILD"
msgstr ""

#: ../../../GettingStarted.rst:598
msgid ""
"A semicolon delimited list controlling which targets will be built and "
"linked into llvm. The default list is defined as ``LLVM_ALL_TARGETS``, and "
"can be set to include out-of-tree targets. The default value includes: "
"``AArch64, AMDGPU, ARM, AVR, BPF, Hexagon, Lanai, Mips, MSP430, NVPTX, "
"PowerPC, RISCV, Sparc, SystemZ, WebAssembly, X86, XCore``."
msgstr ""

#: ../../../GettingStarted.rst:608
msgid "LLVM_ENABLE_DOXYGEN"
msgstr ""

#: ../../../GettingStarted.rst:608
msgid ""
"Build doxygen-based documentation from the source code This is disabled by "
"default because it is slow and generates a lot of output."
msgstr ""

#: ../../../GettingStarted.rst:612
msgid "LLVM_ENABLE_PROJECTS"
msgstr ""

#: ../../../GettingStarted.rst:612
msgid ""
"A semicolon-delimited list selecting which of the other LLVM subprojects to "
"additionally build. (Only effective when using a side-by-side project layout "
"e.g. via git). The default list is empty. Can include: clang, libcxx, "
"libcxxabi, libunwind, lldb, compiler-rt, lld, polly, or debuginfo-tests."
msgstr ""

#: ../../../GettingStarted.rst:619
msgid "LLVM_ENABLE_SPHINX"
msgstr ""

#: ../../../GettingStarted.rst:619
msgid ""
"Build sphinx-based documentation from the source code. This is disabled by "
"default because it is slow and generates a lot of output. Sphinx version 1.5 "
"or later recommended."
msgstr ""

#: ../../../GettingStarted.rst:624
msgid "LLVM_BUILD_LLVM_DYLIB"
msgstr ""

#: ../../../GettingStarted.rst:624
msgid ""
"Generate libLLVM.so. This library contains a default set of LLVM components "
"that can be overridden with ``LLVM_DYLIB_COMPONENTS``. The default contains "
"most of LLVM and is defined in ``tools/llvm-shlib/CMakelists.txt``. This "
"option is not available on Windows."
msgstr ""

#: ../../../GettingStarted.rst:631
msgid "LLVM_OPTIMIZED_TABLEGEN"
msgstr ""

#: ../../../GettingStarted.rst:631
msgid ""
"Builds a release tablegen that gets used during the LLVM build. This can "
"dramatically speed up debug builds."
msgstr ""

#: ../../../GettingStarted.rst:636
msgid "To configure LLVM, follow these steps:"
msgstr ""

#: ../../../GettingStarted.rst:638
msgid "Change directory into the object root directory:"
msgstr ""

#: ../../../GettingStarted.rst:644
msgid "Run the ``cmake``:"
msgstr ""

#: ../../../GettingStarted.rst:652
msgid "Compiling the LLVM Suite Source Code"
msgstr ""

#: ../../../GettingStarted.rst:654
msgid ""
"Unlike with autotools, with CMake your build type is defined at "
"configuration. If you want to change your build type, you can re-run cmake "
"with the following invocation:"
msgstr ""

#: ../../../GettingStarted.rst:662
msgid ""
"Between runs, CMake preserves the values set for all options. CMake has the "
"following build types defined:"
msgstr ""

#: ../../../GettingStarted.rst:665
msgid "Debug"
msgstr ""

#: ../../../GettingStarted.rst:667
msgid ""
"These builds are the default. The build system will compile the tools and "
"libraries unoptimized, with debugging information, and asserts enabled."
msgstr ""

#: ../../../GettingStarted.rst:670
msgid "Release"
msgstr ""

#: ../../../GettingStarted.rst:672
msgid ""
"For these builds, the build system will compile the tools and libraries with "
"optimizations enabled and not generate debug info. CMakes default "
"optimization level is -O3. This can be configured by setting the "
"``CMAKE_CXX_FLAGS_RELEASE`` variable on the CMake command line."
msgstr ""

#: ../../../GettingStarted.rst:677
msgid "RelWithDebInfo"
msgstr ""

#: ../../../GettingStarted.rst:679
msgid ""
"These builds are useful when debugging. They generate optimized binaries "
"with debug information. CMakes default optimization level is -O2. This can "
"be configured by setting the ``CMAKE_CXX_FLAGS_RELWITHDEBINFO`` variable on "
"the CMake command line."
msgstr ""

#: ../../../GettingStarted.rst:684
msgid ""
"Once you have LLVM configured, you can build it by entering the *OBJ_ROOT* "
"directory and issuing the following command:"
msgstr ""

#: ../../../GettingStarted.rst:691
msgid ""
"If the build fails, please `check here`_ to see if you are using a version "
"of GCC that is known not to compile LLVM."
msgstr ""

#: ../../../GettingStarted.rst:694
msgid ""
"If you have multiple processors in your machine, you may wish to use some of "
"the parallel build options provided by GNU Make.  For example, you could use "
"the command:"
msgstr ""

#: ../../../GettingStarted.rst:702
msgid ""
"There are several special targets which are useful when working with the "
"LLVM source code:"
msgstr ""

#: ../../../GettingStarted.rst:705
msgid "``make clean``"
msgstr ""

#: ../../../GettingStarted.rst:707
msgid ""
"Removes all files generated by the build.  This includes object files, "
"generated C/C++ files, libraries, and executables."
msgstr ""

#: ../../../GettingStarted.rst:710
msgid "``make install``"
msgstr ""

#: ../../../GettingStarted.rst:712
msgid ""
"Installs LLVM header files, libraries, tools, and documentation in a "
"hierarchy under ``$PREFIX``, specified with ``CMAKE_INSTALL_PREFIX``, which "
"defaults to ``/usr/local``."
msgstr ""

#: ../../../GettingStarted.rst:716
msgid "``make docs-llvm-html``"
msgstr ""

#: ../../../GettingStarted.rst:718
msgid ""
"If configured with ``-DLLVM_ENABLE_SPHINX=On``, this will generate a "
"directory at ``OBJ_ROOT/docs/html`` which contains the HTML formatted "
"documentation."
msgstr ""

#: ../../../GettingStarted.rst:722
msgid "Cross-Compiling LLVM"
msgstr ""

#: ../../../GettingStarted.rst:724
msgid ""
"It is possible to cross-compile LLVM itself. That is, you can create LLVM "
"executables and libraries to be hosted on a platform different from the "
"platform where they are built (a Canadian Cross build). To generate build "
"files for cross-compiling CMake provides a variable ``CMAKE_TOOLCHAIN_FILE`` "
"which can define compiler flags and variables used during the CMake test "
"operations."
msgstr ""

#: ../../../GettingStarted.rst:730
msgid ""
"The result of such a build is executables that are not runnable on the build "
"host but can be executed on the target. As an example the following CMake "
"invocation can generate build files targeting iOS. This will work on macOS "
"with the latest Xcode:"
msgstr ""

#: ../../../GettingStarted.rst:743
msgid ""
"Note: There are some additional flags that need to be passed when building "
"for iOS due to limitations in the iOS SDK."
msgstr ""

#: ../../../GettingStarted.rst:746
msgid ""
"Check :doc:`HowToCrossCompileLLVM` and `Clang docs on how to cross-compile "
"in general <https://clang.llvm.org/docs/CrossCompilation.html>`_ for more "
"information about cross-compiling."
msgstr ""

#: ../../../GettingStarted.rst:751
msgid "The Location of LLVM Object Files"
msgstr ""

#: ../../../GettingStarted.rst:753
msgid ""
"The LLVM build system is capable of sharing a single LLVM source tree among "
"several LLVM builds.  Hence, it is possible to build LLVM for several "
"different platforms or configurations using the same source tree."
msgstr ""

#: ../../../GettingStarted.rst:757
msgid "Change directory to where the LLVM object files should live:"
msgstr ""

#: ../../../GettingStarted.rst:763
msgid "Run ``cmake``:"
msgstr ""

#: ../../../GettingStarted.rst:769
msgid ""
"The LLVM build will create a structure underneath *OBJ_ROOT* that matches "
"the LLVM source tree. At each level where source files are present in the "
"source tree there will be a corresponding ``CMakeFiles`` directory in the "
"*OBJ_ROOT*. Underneath that directory there is another directory with a name "
"ending in ``.dir`` under which you'll find object files for each source."
msgstr ""

#: ../../../GettingStarted.rst:775
msgid "For example:"
msgstr ""

#: ../../../GettingStarted.rst:784
msgid "Optional Configuration Items"
msgstr ""

#: ../../../GettingStarted.rst:786
msgid ""
"If you're running on a Linux system that supports the `binfmt_misc <http://"
"en.wikipedia.org/wiki/binfmt_misc>`_ module, and you have root access on the "
"system, you can set your system up to execute LLVM bitcode files directly. "
"To do this, use commands like this (the first command may not be required if "
"you are already using the module):"
msgstr ""

#: ../../../GettingStarted.rst:799
msgid ""
"This allows you to execute LLVM bitcode files directly.  On Debian, you can "
"also use this command instead of the 'echo' command above:"
msgstr ""

#: ../../../GettingStarted.rst:810
msgid "Directory Layout"
msgstr ""

#: ../../../GettingStarted.rst:812
msgid ""
"One useful source of information about the LLVM source base is the LLVM "
"`doxygen <http://www.doxygen.org/>`_ documentation available at `<https://"
"llvm.org/doxygen/>`_.  The following is a brief introduction to code layout:"
msgstr ""

#: ../../../GettingStarted.rst:818
msgid "``llvm/cmake``"
msgstr ""

#: ../../../GettingStarted.rst:819
msgid "Genereates system build files."
msgstr ""

#: ../../../GettingStarted.rst:823
msgid "``llvm/cmake/modules``"
msgstr ""

#: ../../../GettingStarted.rst:822
msgid ""
"Build configuration for llvm user defined options. Checks compiler version "
"and linker flags."
msgstr ""

#: ../../../GettingStarted.rst:827
msgid "``llvm/cmake/platforms``"
msgstr ""

#: ../../../GettingStarted.rst:826
msgid ""
"Toolchain configuration for Android NDK, iOS systems and non-Windows hosts "
"to target MSVC."
msgstr ""

#: ../../../GettingStarted.rst:830
msgid "``llvm/examples``"
msgstr ""

#: ../../../GettingStarted.rst:832
msgid ""
"Some simple examples showing how to use LLVM as a compiler for a custom "
"language - including lowering, optimization, and code generation."
msgstr ""

#: ../../../GettingStarted.rst:835
msgid ""
"Kaleidoscope Tutorial: Kaleidoscope language tutorial run through the "
"implementation of a nice little compiler for a non-trivial language "
"including a hand-written lexer, parser, AST, as well as code generation "
"support using LLVM- both static (ahead of time) and various approaches to "
"Just In Time (JIT) compilation. `Kaleidoscope Tutorial for complete beginner "
"<https://llvm.org/docs/tutorial/MyFirstLanguageFrontend/index.html>`_."
msgstr ""

#: ../../../GettingStarted.rst:843
msgid ""
"BuildingAJIT: Examples of the `BuildingAJIT tutorial <https://llvm.org/docs/"
"tutorial/BuildingAJIT1.html>`_ that shows how LLVM’s ORC JIT APIs interact "
"with other parts of LLVM. It also, teaches how to recombine them to build a "
"custom JIT that is suited to your use-case."
msgstr ""

#: ../../../GettingStarted.rst:849
msgid "``llvm/include``"
msgstr ""

#: ../../../GettingStarted.rst:851
msgid ""
"Public header files exported from the LLVM library. The three main "
"subdirectories:"
msgstr ""

#: ../../../GettingStarted.rst:853
msgid "``llvm/include/llvm``"
msgstr ""

#: ../../../GettingStarted.rst:855
msgid ""
"All LLVM-specific header files, and  subdirectories for different portions "
"of LLVM: ``Analysis``, ``CodeGen``, ``Target``, ``Transforms``, etc..."
msgstr ""

#: ../../../GettingStarted.rst:858
msgid "``llvm/include/llvm/Support``"
msgstr ""

#: ../../../GettingStarted.rst:860
msgid ""
"Generic support libraries provided with LLVM but not necessarily specific to "
"LLVM. For example, some C++ STL utilities and a Command Line option "
"processing library store header files here."
msgstr ""

#: ../../../GettingStarted.rst:864
msgid "``llvm/include/llvm/Config``"
msgstr ""

#: ../../../GettingStarted.rst:866
msgid ""
"Header files configured by ``cmake``.  They wrap \"standard\" UNIX and C "
"header files.  Source code can include these header files which "
"automatically take care of the conditional #includes that ``cmake`` "
"generates."
msgstr ""

#: ../../../GettingStarted.rst:872
msgid "``llvm/lib``"
msgstr ""

#: ../../../GettingStarted.rst:874
msgid ""
"Most source files are here. By putting code in libraries, LLVM makes it easy "
"to share code among the `tools`_."
msgstr ""

#: ../../../GettingStarted.rst:877
msgid "``llvm/lib/IR/``"
msgstr ""

#: ../../../GettingStarted.rst:879
msgid ""
"Core LLVM source files that implement core classes like Instruction and "
"BasicBlock."
msgstr ""

#: ../../../GettingStarted.rst:882
msgid "``llvm/lib/AsmParser/``"
msgstr ""

#: ../../../GettingStarted.rst:884
msgid "Source code for the LLVM assembly language parser library."
msgstr ""

#: ../../../GettingStarted.rst:886
msgid "``llvm/lib/Bitcode/``"
msgstr ""

#: ../../../GettingStarted.rst:888
msgid "Code for reading and writing bitcode."
msgstr ""

#: ../../../GettingStarted.rst:890
msgid "``llvm/lib/Analysis/``"
msgstr ""

#: ../../../GettingStarted.rst:892
msgid ""
"A variety of program analyses, such as Call Graphs, Induction Variables, "
"Natural Loop Identification, etc."
msgstr ""

#: ../../../GettingStarted.rst:895
msgid "``llvm/lib/Transforms/``"
msgstr ""

#: ../../../GettingStarted.rst:897
msgid ""
"IR-to-IR program transformations, such as Aggressive Dead Code Elimination, "
"Sparse Conditional Constant Propagation, Inlining, Loop Invariant Code "
"Motion, Dead Global Elimination, and many others."
msgstr ""

#: ../../../GettingStarted.rst:901
msgid "``llvm/lib/Target/``"
msgstr ""

#: ../../../GettingStarted.rst:903
msgid ""
"Files describing target architectures for code generation.  For example, "
"``llvm/lib/Target/X86`` holds the X86 machine description."
msgstr ""

#: ../../../GettingStarted.rst:906
msgid "``llvm/lib/CodeGen/``"
msgstr ""

#: ../../../GettingStarted.rst:908
msgid ""
"The major parts of the code generator: Instruction Selector, Instruction "
"Scheduling, and Register Allocation."
msgstr ""

#: ../../../GettingStarted.rst:911
msgid "``llvm/lib/MC/``"
msgstr ""

#: ../../../GettingStarted.rst:913
msgid ""
"The libraries represent and process code at machine code level. Handles "
"assembly and object-file emission."
msgstr ""

#: ../../../GettingStarted.rst:916
msgid "``llvm/lib/ExecutionEngine/``"
msgstr ""

#: ../../../GettingStarted.rst:918
msgid ""
"Libraries for directly executing bitcode at runtime in interpreted and JIT-"
"compiled scenarios."
msgstr ""

#: ../../../GettingStarted.rst:921
msgid "``llvm/lib/Support/``"
msgstr ""

#: ../../../GettingStarted.rst:923
msgid ""
"Source code that corresponding to the header files in ``llvm/include/ADT/`` "
"and ``llvm/include/Support/``."
msgstr ""

#: ../../../GettingStarted.rst:927
msgid "``llvm/bindings``"
msgstr ""

#: ../../../GettingStarted.rst:929
msgid ""
"Contains bindings for the LLVM compiler infrastructure to allow programs "
"written in languages other than C or C++ to take advantage of the LLVM "
"infrastructure. LLVM project provides language bindings for Go, OCaml and "
"Python."
msgstr ""

#: ../../../GettingStarted.rst:935
msgid "``llvm/projects``"
msgstr ""

#: ../../../GettingStarted.rst:937
msgid ""
"Projects not strictly part of LLVM but shipped with LLVM. This is also the "
"directory for creating your own LLVM-based projects which leverage the LLVM "
"build system."
msgstr ""

#: ../../../GettingStarted.rst:942
msgid "``llvm/test``"
msgstr ""

#: ../../../GettingStarted.rst:944
msgid ""
"Feature and regression tests and other sanity checks on LLVM infrastructure. "
"These are intended to run quickly and cover a lot of territory without being "
"exhaustive."
msgstr ""

#: ../../../GettingStarted.rst:948
msgid "``test-suite``"
msgstr ""

#: ../../../GettingStarted.rst:950
msgid ""
"A comprehensive correctness, performance, and benchmarking test suite for "
"LLVM.  This comes in a ``separate git repository <https://github.com/llvm/"
"llvm-test-suite>``, because it contains a large amount of third-party code "
"under a variety of licenses. For details see the :doc:`Testing Guide "
"<TestingGuide>` document."
msgstr ""

#: ../../../GettingStarted.rst:959
msgid "``llvm/tools``"
msgstr ""

#: ../../../GettingStarted.rst:961
msgid ""
"Executables built out of the libraries above, which form the main part of "
"the user interface.  You can always get help for a tool by typing "
"``tool_name -help``.  The following is a brief introduction to the most "
"important tools.  More detailed information is in the `Command Guide "
"<CommandGuide/index.html>`_."
msgstr ""

#: ../../../GettingStarted.rst:967
msgid "``bugpoint``"
msgstr ""

#: ../../../GettingStarted.rst:969
msgid ""
"``bugpoint`` is used to debug optimization passes or code generation "
"backends by narrowing down the given test case to the minimum number of "
"passes and/or instructions that still cause a problem, whether it is a crash "
"or miscompilation. See `<HowToSubmitABug.html>`_ for more information on "
"using ``bugpoint``."
msgstr ""

#: ../../../GettingStarted.rst:975
msgid "``llvm-ar``"
msgstr ""

#: ../../../GettingStarted.rst:977
msgid ""
"The archiver produces an archive containing the given LLVM bitcode files, "
"optionally with an index for faster lookup."
msgstr ""

#: ../../../GettingStarted.rst:980
msgid "``llvm-as``"
msgstr ""

#: ../../../GettingStarted.rst:982
msgid ""
"The assembler transforms the human readable LLVM assembly to LLVM bitcode."
msgstr ""

#: ../../../GettingStarted.rst:984
msgid "``llvm-dis``"
msgstr ""

#: ../../../GettingStarted.rst:986
msgid ""
"The disassembler transforms the LLVM bitcode to human readable LLVM assembly."
msgstr ""

#: ../../../GettingStarted.rst:988
msgid "``llvm-link``"
msgstr ""

#: ../../../GettingStarted.rst:990
msgid ""
"``llvm-link``, not surprisingly, links multiple LLVM modules into a single "
"program."
msgstr ""

#: ../../../GettingStarted.rst:993
msgid "``lli``"
msgstr ""

#: ../../../GettingStarted.rst:995
msgid ""
"``lli`` is the LLVM interpreter, which can directly execute LLVM bitcode "
"(although very slowly...). For architectures that support it (currently x86, "
"Sparc, and PowerPC), by default, ``lli`` will function as a Just-In-Time "
"compiler (if the functionality was compiled in), and will execute the code "
"*much* faster than the interpreter."
msgstr ""

#: ../../../GettingStarted.rst:1001
msgid "``llc``"
msgstr ""

#: ../../../GettingStarted.rst:1003
msgid ""
"``llc`` is the LLVM backend compiler, which translates LLVM bitcode to a "
"native code assembly file."
msgstr ""

#: ../../../GettingStarted.rst:1006
msgid "``opt``"
msgstr ""

#: ../../../GettingStarted.rst:1008
msgid ""
"``opt`` reads LLVM bitcode, applies a series of LLVM to LLVM transformations "
"(which are specified on the command line), and outputs the resultant "
"bitcode.   '``opt -help``'  is a good way to get a list of the program "
"transformations available in LLVM."
msgstr ""

#: ../../../GettingStarted.rst:1013
msgid ""
"``opt`` can also  run a specific analysis on an input LLVM bitcode file and "
"print  the results.  Primarily useful for debugging analyses, or "
"familiarizing yourself with what an analysis does."
msgstr ""

#: ../../../GettingStarted.rst:1018
msgid "``llvm/utils``"
msgstr ""

#: ../../../GettingStarted.rst:1020
msgid ""
"Utilities for working with LLVM source code; some are part of the build "
"process because they are code generators for parts of the infrastructure."
msgstr ""

#: ../../../GettingStarted.rst:1024
msgid "``codegen-diff``"
msgstr ""

#: ../../../GettingStarted.rst:1026
msgid ""
"``codegen-diff`` finds differences between code that LLC generates and code "
"that LLI generates. This is useful if you are debugging one of them, "
"assuming that the other generates correct output. For the full user manual, "
"run ```perldoc codegen-diff'``."
msgstr ""

#: ../../../GettingStarted.rst:1031
msgid "``emacs/``"
msgstr ""

#: ../../../GettingStarted.rst:1033
msgid ""
"Emacs and XEmacs syntax highlighting  for LLVM   assembly files and TableGen "
"description files.  See the ``README`` for information on using them."
msgstr ""

#: ../../../GettingStarted.rst:1036
msgid "``getsrcs.sh``"
msgstr ""

#: ../../../GettingStarted.rst:1038
msgid ""
"Finds and outputs all non-generated source files, useful if one wishes to do "
"a lot of development across directories and does not want to find each file. "
"One way to use it is to run, for example: ``xemacs `utils/getsources.sh``` "
"from the top of the LLVM source tree."
msgstr ""

#: ../../../GettingStarted.rst:1044
msgid "``llvmgrep``"
msgstr ""

#: ../../../GettingStarted.rst:1046
msgid ""
"Performs an ``egrep -H -n`` on each source file in LLVM and passes to it a "
"regular expression provided on ``llvmgrep``'s command line. This is an "
"efficient way of searching the source base for a particular regular "
"expression."
msgstr ""

#: ../../../GettingStarted.rst:1051
msgid "``TableGen/``"
msgstr ""

#: ../../../GettingStarted.rst:1053
msgid ""
"Contains the tool used to generate register descriptions, instruction set "
"descriptions, and even assemblers from common TableGen description files."
msgstr ""

#: ../../../GettingStarted.rst:1057
msgid "``vim/``"
msgstr ""

#: ../../../GettingStarted.rst:1059
msgid ""
"vim syntax-highlighting for LLVM assembly files and TableGen description "
"files. See the    ``README`` for how to use them."
msgstr ""

#: ../../../GettingStarted.rst:1065
msgid "An Example Using the LLVM Tool Chain"
msgstr ""

#: ../../../GettingStarted.rst:1067
msgid "This section gives an example of using LLVM with the Clang front end."
msgstr ""

#: ../../../GettingStarted.rst:1070
msgid "Example with clang"
msgstr ""

#: ../../../GettingStarted.rst:1072
msgid "First, create a simple C file, name it 'hello.c':"
msgstr ""

#: ../../../GettingStarted.rst:1083
msgid "Next, compile the C file into a native executable:"
msgstr ""

#: ../../../GettingStarted.rst:1091
msgid ""
"Clang works just like GCC by default.  The standard -S and -c arguments work "
"as usual (producing a native .s or .o file, respectively)."
msgstr ""

#: ../../../GettingStarted.rst:1094
msgid "Next, compile the C file into an LLVM bitcode file:"
msgstr ""

#: ../../../GettingStarted.rst:1100
msgid ""
"The -emit-llvm option can be used with the -S or -c options to emit an LLVM "
"``.ll`` or ``.bc`` file (respectively) for the code.  This allows you to use "
"the `standard LLVM tools <CommandGuide/index.html>`_ on the bitcode file."
msgstr ""

#: ../../../GettingStarted.rst:1104
msgid "Run the program in both forms. To run the program, use:"
msgstr ""

#: ../../../GettingStarted.rst:1110
msgid "and"
msgstr ""

#: ../../../GettingStarted.rst:1116
msgid ""
"The second examples shows how to invoke the LLVM JIT, :doc:`lli "
"<CommandGuide/lli>`."
msgstr ""

#: ../../../GettingStarted.rst:1119
msgid "Use the ``llvm-dis`` utility to take a look at the LLVM assembly code:"
msgstr ""

#: ../../../GettingStarted.rst:1125
msgid "Compile the program to native assembly using the LLC code generator:"
msgstr ""

#: ../../../GettingStarted.rst:1131
msgid "Assemble the native assembly language file into a program:"
msgstr ""

#: ../../../GettingStarted.rst:1139
msgid "Execute the native code program:"
msgstr ""

#: ../../../GettingStarted.rst:1145
msgid ""
"Note that using clang to compile directly to native code (i.e. when the ``-"
"emit-llvm`` option is not present) does steps 6/7/8 for you."
msgstr ""

#: ../../../GettingStarted.rst:1149
msgid "Common Problems"
msgstr ""

#: ../../../GettingStarted.rst:1151
msgid ""
"If you are having problems building or using LLVM, or if you have any other "
"general questions about LLVM, please consult the `Frequently Asked Questions "
"<FAQ.html>`_ page."
msgstr ""

#: ../../../GettingStarted.rst:1155
msgid ""
"If you are having problems with limited memory and build time, please try "
"building with ninja instead of make. Please consider configuring the "
"following options with cmake:"
msgstr ""

#: ../../../GettingStarted.rst:1159
msgid ""
"-G Ninja Setting this option will allow you to build with ninja instead of "
"make. Building with ninja significantly improves your build time, especially "
"with incremental builds, and improves your memory usage."
msgstr ""

#: ../../../GettingStarted.rst:1164
msgid ""
"-DLLVM_USE_LINKER Setting this option to lld will significantly reduce "
"linking time for LLVM executables on ELF-based platforms, such as Linux. If "
"you are building LLVM for the first time and lld is not available to you as "
"a binary package, then you may want to use the gold linker as a faster "
"alternative to GNU ld."
msgstr ""

#: ../../../GettingStarted.rst:1172
msgid ""
"Debug --- This is the default build type. This disables optimizations while "
"compiling LLVM and enables debug info. On ELF-based platforms (e.g. Linux) "
"linking with debug info may consume a large amount of memory."
msgstr ""

#: ../../../GettingStarted.rst:1176
msgid ""
"Release --- Turns on optimizations and disables debug info. Combining the "
"Release build type with -DLLVM_ENABLE_ASSERTIONS=ON may be a good trade-off "
"between speed and debugability during development, particularly for running "
"the test suite."
msgstr ""

#: ../../../GettingStarted.rst:1181
msgid ""
"-DLLVM_ENABLE_ASSERTIONS This option defaults to ON for Debug builds and "
"defaults to OFF for Release builds. As mentioned in the previous option, "
"using the Release build type and enabling assertions may be a good "
"alternative to using the Debug build type."
msgstr ""

#: ../../../GettingStarted.rst:1186
msgid ""
"-DLLVM_PARALLEL_LINK_JOBS Set this equal to number of jobs you wish to run "
"simultaneously. This is similar to the -j option used with make, but only "
"for link jobs. This option can only be used with ninja. You may wish to use "
"a very low number of jobs, as this will greatly reduce the amount of memory "
"used during the build process. If you have limited memory, you may wish to "
"set this to 1."
msgstr ""

#: ../../../GettingStarted.rst:1193
msgid ""
"-DLLVM_TARGETS_TO_BUILD Set this equal to the target you wish to build. You "
"may wish to set this to X86; however, you will find a full list of targets "
"within the llvm-project/llvm/lib/Target directory."
msgstr ""

#: ../../../GettingStarted.rst:1198
msgid ""
"-DLLVM_OPTIMIZED_TABLEGEN Set this to ON to generate a fully optimized "
"tablegen during your build. This will significantly improve your build time. "
"This is only useful if you are using the Debug build type."
msgstr ""

#: ../../../GettingStarted.rst:1203
msgid ""
"-DLLVM_ENABLE_PROJECTS Set this equal to the projects you wish to compile (e."
"g. clang, lld, etc.) If compiling more than one project, separate the items "
"with a semicolon. Should you run into issues with the semicolon, try "
"surrounding it with single quotes."
msgstr ""

#: ../../../GettingStarted.rst:1208
msgid ""
"-DCLANG_ENABLE_STATIC_ANALYZER Set this option to OFF if you do not require "
"the clang static analyzer. This should improve your build time slightly."
msgstr ""

#: ../../../GettingStarted.rst:1212
msgid ""
"-DLLVM_USE_SPLIT_DWARF Consider setting this to ON if you require a debug "
"build, as this will ease memory pressure on the linker. This will make "
"linking much faster, as the binaries will not contain any of the debug "
"information; however, this will generate the debug information in the form "
"of a DWARF object file (with the extension .dwo). This only applies to host "
"platforms using ELF, such as Linux."
msgstr ""

#: ../../../GettingStarted.rst:1222
msgid "Links"
msgstr ""

#: ../../../GettingStarted.rst:1224
msgid ""
"This document is just an **introduction** on how to use LLVM to do some "
"simple things... there are many more interesting and complicated things that "
"you can do that aren't documented here (but we'll gladly accept a patch if "
"you want to write something up!).  For more information about LLVM, check "
"out:"
msgstr ""

#: ../../../GettingStarted.rst:1229
msgid "`LLVM Homepage <https://llvm.org/>`_"
msgstr ""

#: ../../../GettingStarted.rst:1230
msgid "`LLVM Doxygen Tree <https://llvm.org/doxygen/>`_"
msgstr ""

#: ../../../GettingStarted.rst:1231
msgid ""
"`Starting a Project that Uses LLVM <https://llvm.org/docs/Projects.html>`_"
msgstr ""
