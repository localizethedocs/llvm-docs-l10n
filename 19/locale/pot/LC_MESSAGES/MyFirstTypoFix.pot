# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 19\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../MyFirstTypoFix.rst:3
msgid "MyFirstTypoFix"
msgstr ""

#: ../../../MyFirstTypoFix.rst:9
msgid "Introduction"
msgstr ""

#: ../../../MyFirstTypoFix.rst:11
msgid ""
"This tutorial will guide you through the process of making a change to LLVM, "
"and contributing it back to the LLVM project."
msgstr ""

#: ../../../MyFirstTypoFix.rst:15
msgid ""
"The code changes presented here are only an example and not something you "
"should actually submit to the LLVM project. For your first real change to "
"LLVM, the code will be different but the rest of the guide will still apply."
msgstr ""

#: ../../../MyFirstTypoFix.rst:19
msgid ""
"We'll be making a change to Clang, but the steps for other parts of LLVM are "
"the same. Even though the change we'll be making is simple, we're going to "
"cover steps like building LLVM, running the tests, and code review. This is "
"good practice, and you'll be prepared for making larger changes."
msgstr ""

#: ../../../MyFirstTypoFix.rst:24
msgid "We'll assume you:"
msgstr ""

#: ../../../MyFirstTypoFix.rst:26
msgid "know how to use an editor,"
msgstr ""

#: ../../../MyFirstTypoFix.rst:28
msgid "have basic C++ knowledge,"
msgstr ""

#: ../../../MyFirstTypoFix.rst:30
msgid "know how to install software on your system,"
msgstr ""

#: ../../../MyFirstTypoFix.rst:32
msgid "are comfortable with the command line,"
msgstr ""

#: ../../../MyFirstTypoFix.rst:34
msgid "have basic knowledge of git."
msgstr ""

#: ../../../MyFirstTypoFix.rst:38
msgid "The change we're making"
msgstr ""

#: ../../../MyFirstTypoFix.rst:40
msgid "Clang has a warning for infinite recursion:"
msgstr ""

#: ../../../MyFirstTypoFix.rst:48
msgid ""
"This is clear enough, but not exactly catchy. Let's improve the wording a "
"little:"
msgstr ""

#: ../../../MyFirstTypoFix.rst:57
msgid "Dependencies"
msgstr ""

#: ../../../MyFirstTypoFix.rst:59
msgid "We're going to need some tools:"
msgstr ""

#: ../../../MyFirstTypoFix.rst:61
msgid "git: to check out the LLVM source code,"
msgstr ""

#: ../../../MyFirstTypoFix.rst:63
msgid ""
"a C++ compiler: to compile LLVM source code. You'll want `a recent version "
"<host_cpp_toolchain>` of Clang, GCC, or Visual Studio."
msgstr ""

#: ../../../MyFirstTypoFix.rst:66
msgid "CMake: used to configure how LLVM should be built on your system,"
msgstr ""

#: ../../../MyFirstTypoFix.rst:68
msgid "ninja: runs the C++ compiler to (re)build specific parts of LLVM,"
msgstr ""

#: ../../../MyFirstTypoFix.rst:70
msgid "python: to run the LLVM tests."
msgstr ""

#: ../../../MyFirstTypoFix.rst:72
msgid "As an example, on Ubuntu:"
msgstr ""

#: ../../../MyFirstTypoFix.rst:80
msgid "Building LLVM"
msgstr ""

#: ../../../MyFirstTypoFix.rst:84
msgid "Checkout"
msgstr ""

#: ../../../MyFirstTypoFix.rst:86
msgid ""
"The source code is stored `on Github <https://github.com/llvm/llvm-"
"project>`__ in one large repository (\"the monorepo\")."
msgstr ""

#: ../../../MyFirstTypoFix.rst:90
msgid "It may take a while to download!"
msgstr ""

#: ../../../MyFirstTypoFix.rst:96
msgid ""
"This will create a directory \"llvm-project\" with all of the source code. "
"(Checking out anonymously is OK - pushing commits uses a different "
"mechanism, as we'll see later.)"
msgstr ""

#: ../../../MyFirstTypoFix.rst:101
msgid "Configure your workspace"
msgstr ""

#: ../../../MyFirstTypoFix.rst:103
msgid ""
"Before we can build the code, we must configure exactly how to build it by "
"running CMake. CMake combines information from three sources:"
msgstr ""

#: ../../../MyFirstTypoFix.rst:106
msgid "explicit choices you make (is this a debug build?)"
msgstr ""

#: ../../../MyFirstTypoFix.rst:108
msgid "settings detected from your system (where are libraries installed?)"
msgstr ""

#: ../../../MyFirstTypoFix.rst:110
msgid "project structure (which files are part of 'clang'?)"
msgstr ""

#: ../../../MyFirstTypoFix.rst:112
msgid ""
"First, create a directory to build in. Usually, this is ``llvm-project/"
"build``."
msgstr ""

#: ../../../MyFirstTypoFix.rst:119
msgid "Now, run CMake:"
msgstr ""

#: ../../../MyFirstTypoFix.rst:125
msgid ""
"If all goes well, you'll see a lot of \"performing test\" lines, and finally:"
msgstr ""

#: ../../../MyFirstTypoFix.rst:134
msgid "And you should see a ``build.ninja`` file in the current directory."
msgstr ""

#: ../../../MyFirstTypoFix.rst:136
msgid "Let's break down that last command a little:"
msgstr ""

#: ../../../MyFirstTypoFix.rst:138
msgid ""
"**-G Ninja**: Tells CMake that we're going to use ninja to build, and to "
"create the ``build.ninja`` file."
msgstr ""

#: ../../../MyFirstTypoFix.rst:141
msgid ""
"**../llvm**: this is the path to the source of the \"main\" LLVM project"
msgstr ""

#: ../../../MyFirstTypoFix.rst:144
msgid ""
"The two **-D** flags set CMake variables, which override CMake/project "
"defaults:"
msgstr ""

#: ../../../MyFirstTypoFix.rst:147
msgid ""
"**CMAKE_BUILD_TYPE=Release**: build in optimized mode, which is "
"(surprisingly) the fastest option."
msgstr ""

#: ../../../MyFirstTypoFix.rst:150
msgid ""
"If you want to run under a debugger, you should use the default Debug (which "
"is totally unoptimized, and will lead to >10x slower test runs) or "
"RelWithDebInfo which is a halfway point."
msgstr ""

#: ../../../MyFirstTypoFix.rst:154
msgid ""
"Assertions are not enabled in ``Release`` builds by default. You can enable "
"them using ``LLVM_ENABLE_ASSERTIONS=ON``."
msgstr ""

#: ../../../MyFirstTypoFix.rst:157
msgid ""
"**LLVM_ENABLE_PROJECTS=clang**: this lists the LLVM subprojects you are "
"interested in building, in addition to LLVM itself. Multiple projects can be "
"listed, separated by semicolons, such as ``clang;lldb``. In this example, "
"we'll be making a change to Clang, so we only add clang."
msgstr ""

#: ../../../MyFirstTypoFix.rst:162
msgid ""
"Finally, create a symlink (or copy) of ``llvm-project/build/compile-commands."
"json`` into ``llvm-project/``:"
msgstr ""

#: ../../../MyFirstTypoFix.rst:169
msgid ""
"(This isn't strictly necessary for building and testing, but allows tools "
"like clang-tidy, clang-query, and clangd to work in your source tree)."
msgstr ""

#: ../../../MyFirstTypoFix.rst:175
msgid "Build and test"
msgstr ""

#: ../../../MyFirstTypoFix.rst:177
msgid ""
"Finally, we can build the code! It's important to do this first, to ensure "
"we're in a good state before making changes. But what to build? In ninja, "
"you specify a **target**. If we just want to build the clang binary, our "
"target name is \"clang\" and we run:"
msgstr ""

#: ../../../MyFirstTypoFix.rst:186
msgid ""
"The first time we build will be very slow - Clang + LLVM is a lot of code. "
"But incremental builds are fast: ninja will only rebuild the parts that have "
"changed. When it finally finishes you should have a working clang binary. "
"Try running:"
msgstr ""

#: ../../../MyFirstTypoFix.rst:195
msgid "There's also a target for building and running all the clang tests:"
msgstr ""

#: ../../../MyFirstTypoFix.rst:201
msgid ""
"This is a common pattern in LLVM: check-llvm is all the checks for the core "
"of LLVM, other projects have targets like ``check-lldb``, ``check-flang`` "
"and so on."
msgstr ""

#: ../../../MyFirstTypoFix.rst:206
msgid "Making changes"
msgstr ""

#: ../../../MyFirstTypoFix.rst:210
msgid "The Change"
msgstr ""

#: ../../../MyFirstTypoFix.rst:212
msgid "We need to find the file containing the error message."
msgstr ""

#: ../../../MyFirstTypoFix.rst:219
msgid ""
"The string that appears in ``DiagnosticSemaKinds.td`` is the one that is "
"printed by Clang. ``*.td`` files define tables - in this case it's a list of "
"warnings and errors clang can emit and their messages. Let's update the "
"message in your favorite editor:"
msgstr ""

#: ../../../MyFirstTypoFix.rst:228
msgid ""
"Find the message (it should be under ``warn_infinite_recursive_function``). "
"Change the message to \"in order to understand recursion, you must first "
"understand recursion\"."
msgstr ""

#: ../../../MyFirstTypoFix.rst:233
msgid "Test again"
msgstr ""

#: ../../../MyFirstTypoFix.rst:235
msgid ""
"To verify our change, we can build clang and manually check that it works."
msgstr ""

#: ../../../MyFirstTypoFix.rst:244
msgid "We should also run the tests to make sure we didn't break something."
msgstr ""

#: ../../../MyFirstTypoFix.rst:250
msgid ""
"Notice that it is much faster to build this time, but the tests take just as "
"long to run. Ninja doesn't know which tests might be affected, so it runs "
"them all."
msgstr ""

#: ../../../MyFirstTypoFix.rst:260
msgid ""
"Well, that makes senseâ€¦ and the test output suggests it's looking for the "
"old string \"call itself\" and finding our new message instead. Note that "
"more tests may fail in a similar way as new tests are added over time."
msgstr ""

#: ../../../MyFirstTypoFix.rst:265
msgid "Let's fix it by updating the expectation in the test."
msgstr ""

#: ../../../MyFirstTypoFix.rst:271
msgid ""
"Everywhere we see ``// expected-warning{{call itself}}`` (or something "
"similar from the original warning text), let's replace it with ``// expected-"
"warning{{to understand recursion}}``."
msgstr ""

#: ../../../MyFirstTypoFix.rst:275
msgid ""
"Now we could run **all** the tests again, but this is a slow way to iterate "
"on a change! Instead, let's find a way to re-run just the specific test. "
"There are two main types of tests in LLVM:"
msgstr ""

#: ../../../MyFirstTypoFix.rst:279
msgid "**lit tests** (e.g. ``SemaCXX/warn-infinite-recursion.cpp``)."
msgstr ""

#: ../../../MyFirstTypoFix.rst:281
msgid ""
"These are fancy shell scripts that run command-line tools and verify the "
"output. They live in files like ``clang/**test**/FixIt/dereference-addressof."
"c``. Re-run like this:"
msgstr ""

#: ../../../MyFirstTypoFix.rst:289
msgid "**unit tests** (e.g. ``ToolingTests/ReplacementTest.CanDeleteAllText``)"
msgstr ""

#: ../../../MyFirstTypoFix.rst:291
msgid ""
"These are C++ programs that call LLVM functions and verify the results. They "
"live in suites like ToolingTests. Re-run like this:"
msgstr ""

#: ../../../MyFirstTypoFix.rst:300
msgid "Commit locally"
msgstr ""

#: ../../../MyFirstTypoFix.rst:302
msgid ""
"We'll save the change to a local git branch. This lets us work on other "
"things while the change is being reviewed. Changes should have a title and "
"description, to explain to reviewers and future readers of the code why the "
"change was made."
msgstr ""

#: ../../../MyFirstTypoFix.rst:307
msgid "For now, we'll only add a title."
msgstr ""

#: ../../../MyFirstTypoFix.rst:314
msgid "Now we're ready to send this change out into the world!"
msgstr ""

#: ../../../MyFirstTypoFix.rst:316
msgid ""
"The ``[clang]`` and ``[Diagnostic]`` prefixes are what we call tags. This "
"loose convention tells readers of the git log what areas a change is "
"modifying. If you don't know the tags for the modules you've changed, you "
"can look at the commit history for those areas of the repository."
msgstr ""

#: ../../../MyFirstTypoFix.rst:325
msgid ""
"Or using GitHub, for example https://github.com/llvm/llvm-project/commits/"
"main/clang."
msgstr ""

#: ../../../MyFirstTypoFix.rst:327
msgid ""
"Tagging is imprecise, so don't worry if you are not sure what to put. "
"Reviewers will suggest some if they think they are needed."
msgstr ""

#: ../../../MyFirstTypoFix.rst:331
msgid "Code review"
msgstr ""

#: ../../../MyFirstTypoFix.rst:334
msgid "Uploading a change for review"
msgstr ""

#: ../../../MyFirstTypoFix.rst:336
msgid ""
"LLVM code reviews happen through pull-request on GitHub, see the :ref:"
"`GitHub <github-reviews>` documentation for how to open a pull-request on "
"GitHub."
msgstr ""

#: ../../../MyFirstTypoFix.rst:341
msgid "Finding a reviewer"
msgstr ""

#: ../../../MyFirstTypoFix.rst:343
msgid ""
"Changes can be reviewed by anyone in the LLVM community. For larger and more "
"complicated changes, it's important that the reviewer has experience with "
"the area of LLVM and knows the design goals well. The author of a change "
"will often assign a specific reviewer. ``git blame`` and ``git log`` can be "
"useful to find previous authors who can review."
msgstr ""

#: ../../../MyFirstTypoFix.rst:349
msgid ""
"Our GitHub bot will also tag and notify various \"teams\" around LLVM. The "
"team members contribute and review code for those specific areas regularly, "
"so one of them will review your change if you don't pick anyone specific."
msgstr ""

#: ../../../MyFirstTypoFix.rst:354
msgid "Review process"
msgstr ""

#: ../../../MyFirstTypoFix.rst:356
msgid ""
"When you open a pull-request, some automation will add a comment and notify "
"different members of the sub-projects depending on the parts you have "
"changed."
msgstr ""

#: ../../../MyFirstTypoFix.rst:360
msgid ""
"Within a few days, someone should start the review. They may add themselves "
"as a reviewer, or simply start leaving comments. You'll get another email "
"any time the review is updated. For more detail see the :ref:`Code Review "
"Poilicy <code_review_policy>`."
msgstr ""

#: ../../../MyFirstTypoFix.rst:366
msgid "Comments"
msgstr ""

#: ../../../MyFirstTypoFix.rst:368
msgid ""
"The reviewer can leave comments on the change, and you can reply. Some "
"comments are attached to specific lines, and appear interleaved with the "
"code. You can reply to these. Perhaps to clarify what was asked or to tell "
"the reviewer that you have done what was asked."
msgstr ""

#: ../../../MyFirstTypoFix.rst:374
msgid "Updating your change"
msgstr ""

#: ../../../MyFirstTypoFix.rst:376
msgid ""
"If you make changes in response to a reviewer's comments, simply update your "
"branch with more commits and push to your GitHub fork of ``llvm-project``. "
"It is best if you answer comments from the reviewer directly instead of "
"expecting them to read through all the changes again."
msgstr ""

#: ../../../MyFirstTypoFix.rst:381
msgid ""
"For example you might comment \"I have done this.\" or \"I was able to this "
"part but have a question about...\"."
msgstr ""

#: ../../../MyFirstTypoFix.rst:385
msgid "Review expectations"
msgstr ""

#: ../../../MyFirstTypoFix.rst:387
msgid ""
"In order to make LLVM a long-term sustainable effort, code needs to be "
"maintainable and well tested. Code reviews help to achieve that goal. "
"Especially for new contributors, that often means many rounds of reviews and "
"push-back on design decisions that do not fit well within the overall "
"architecture of the project."
msgstr ""

#: ../../../MyFirstTypoFix.rst:393
msgid "For your first patches, this means:"
msgstr ""

#: ../../../MyFirstTypoFix.rst:395
msgid ""
"be kind, and expect reviewers to be kind in return - LLVM has a :ref:`Code "
"of Conduct <LLVM Community Code of Conduct>` that everyone should be "
"following;"
msgstr ""

#: ../../../MyFirstTypoFix.rst:399
msgid ""
"be patient - understanding how a new feature fits into the architecture of "
"the project is often a time consuming effort, and people have to juggle this "
"with other responsibilities in their lives; **ping the review once a week** "
"when there is no response;"
msgstr ""

#: ../../../MyFirstTypoFix.rst:404
msgid ""
"if you can't agree, generally the best way is to do what the reviewer asks; "
"we optimize for readability of the code, which the reviewer is in a better "
"position to judge; if this feels like it's not the right option, you can ask "
"them in a comment or add another reviewer to get a second opinion."
msgstr ""

#: ../../../MyFirstTypoFix.rst:412
msgid "Accepting a pull request"
msgstr ""

#: ../../../MyFirstTypoFix.rst:414
msgid ""
"When the reviewer is happy with the change, they will **Approve** the pull "
"request. They may leave some more minor comments that you should address "
"before it is merged, but at this point the review is complete. It's time to "
"get it merged!"
msgstr ""

#: ../../../MyFirstTypoFix.rst:421
msgid "Commit access"
msgstr ""

#: ../../../MyFirstTypoFix.rst:424
msgid "Commit by proxy"
msgstr ""

#: ../../../MyFirstTypoFix.rst:426
msgid ""
"As this is your first change, you won't have access to merge it yourself "
"yet. The reviewer **does not know this**, so you need to tell them! Leave a "
"comment on the review like:"
msgstr ""

#: ../../../MyFirstTypoFix.rst:430
msgid ""
"Thanks @<username of reviewer>. I don't have commit access, can you merge "
"this PR for me?"
msgstr ""

#: ../../../MyFirstTypoFix.rst:433
msgid "The pull-request will be closed and you will be notified by GitHub."
msgstr ""

#: ../../../MyFirstTypoFix.rst:436
msgid "Getting commit access"
msgstr ""

#: ../../../MyFirstTypoFix.rst:438
msgid ""
"Once you've contributed a handful of patches to LLVM, start to think about "
"getting commit access yourself. It's probably a good idea if:"
msgstr ""

#: ../../../MyFirstTypoFix.rst:441
msgid "you've landed 3-5 patches of larger scope than \"fix a typo\""
msgstr ""

#: ../../../MyFirstTypoFix.rst:443
msgid "you'd be willing to review changes that are closely related to yours"
msgstr ""

#: ../../../MyFirstTypoFix.rst:445
msgid "you'd like to keep contributing to LLVM."
msgstr ""

#: ../../../MyFirstTypoFix.rst:448
msgid ""
"The process is described in the :ref:`developer policy document "
"<obtaining_commit_access>`."
msgstr ""

#: ../../../MyFirstTypoFix.rst:451
msgid "With great power"
msgstr ""

#: ../../../MyFirstTypoFix.rst:453
msgid ""
"Actually, this would be a great time to read the rest of the :ref:`developer "
"policy <developer_policy>` too."
msgstr ""

#: ../../../MyFirstTypoFix.rst:460
msgid "Issues After Landing Your PR"
msgstr ""

#: ../../../MyFirstTypoFix.rst:462
msgid ""
"Once your change is submitted it will be picked up by automated build bots "
"that will build and test your patch in a variety of configurations."
msgstr ""

#: ../../../MyFirstTypoFix.rst:465
msgid ""
"The \"console\" view at http://lab.llvm.org/buildbot/#/console displays "
"results for specific commits. If you want to follow how your change is "
"affecting the build bots, this should be the first place to look."
msgstr ""

#: ../../../MyFirstTypoFix.rst:469
msgid ""
"The columns are build configurations and the rows are individual commits. "
"Along the rows are colored bubbles. The color of the bubble represents the "
"build's status. Green is passing, red has failed and yellow is a build in "
"progress."
msgstr ""

#: ../../../MyFirstTypoFix.rst:473
msgid ""
"A red build may have already been failing before your change was committed. "
"This means you didn't break the build but you should check that you did not "
"make it any worse by adding new problems."
msgstr ""

#: ../../../MyFirstTypoFix.rst:478
msgid ""
"Only recent changes are shown in the console view. If your change is not "
"there, rely on PR comments and build bot emails to notify you of any "
"problems."
msgstr ""

#: ../../../MyFirstTypoFix.rst:481
msgid ""
"If there is a problem in a build that includes your changes, you may receive "
"a report by email or as a comment on your PR. Please check whether the "
"problem has been caused by your changes specifically. As builds contain "
"changes from many authors and sometimes fail due to unrelated infrastructure "
"problems."
msgstr ""

#: ../../../MyFirstTypoFix.rst:486
msgid ""
"To see the details of a build, click the bubble in the console view, or the "
"link provided in the problem report. You will be able to view and download "
"logs for each stage of that build."
msgstr ""

#: ../../../MyFirstTypoFix.rst:490
msgid ""
"If you need help understanding the problem, or have any other questions, you "
"can ask them as a comment on your PR, or on `Discord <https://discord.com/"
"invite/xS7Z362>`__."
msgstr ""

#: ../../../MyFirstTypoFix.rst:493
msgid ""
"If you do not receive any reports of problems, no action is required from "
"you. Your changes are working as expected, well done!"
msgstr ""

#: ../../../MyFirstTypoFix.rst:497
msgid "Reverts"
msgstr ""

#: ../../../MyFirstTypoFix.rst:499
msgid ""
"If your change has caused a problem, it should be reverted as soon as "
"possible. This is a normal part of :ref:`LLVM development <revert_policy>`, "
"that every committer (no matter how experienced) goes through."
msgstr ""

#: ../../../MyFirstTypoFix.rst:503
msgid ""
"If you are in any doubt whether your change can be fixed quickly, revert it. "
"Then you have plenty of time to investigate and produce a solid fix."
msgstr ""

#: ../../../MyFirstTypoFix.rst:506
msgid ""
"Someone else may revert your change for you, or you can create a revert pull "
"request using the `GitHub interface <https://docs.github.com/en/pull-"
"requests/collaborating-with-pull-requests/incorporating-changes-from-a-pull-"
"request/reverting-a-pull-request>`__. Add your original reviewers to this "
"new pull request if possible."
msgstr ""

#: ../../../MyFirstTypoFix.rst:511
msgid "Conclusion"
msgstr ""

#: ../../../MyFirstTypoFix.rst:513
msgid ""
"Now you should have an understanding of the life cycle of a contribution to "
"the LLVM Project."
msgstr ""

#: ../../../MyFirstTypoFix.rst:516
msgid ""
"If some details are still unclear, do not worry. The LLVM Project's process "
"does differ from what you may be used to elsewhere on GitHub. Within the "
"project the expectations of different sub-projects may vary too."
msgstr ""

#: ../../../MyFirstTypoFix.rst:520
msgid ""
"So whatever you are contributing to, know that we are not expecting "
"perfection. Please ask questions whenever you are unsure, and expect that if "
"you have missed something, someone will politely point it out and help you "
"address it."
msgstr ""
