# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 19\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr_FR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../ReleaseNotes.rst:3
msgid "LLVM |release| Release Notes"
msgstr ""

#: ../../../ReleaseNotes.rst:11
msgid ""
"These are in-progress notes for the upcoming LLVM |version| release. Release "
"notes for previous releases can be found on `the Download Page <https://"
"releases.llvm.org/download.html>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:17
msgid "Introduction"
msgstr ""

#: ../../../ReleaseNotes.rst:19
msgid ""
"This document contains the release notes for the LLVM Compiler "
"Infrastructure, release |release|.  Here we describe the status of LLVM, "
"including major improvements from the previous release, improvements in "
"various subprojects of LLVM, and some of the current users of the code.  All "
"LLVM releases may be downloaded from the `LLVM releases web site <https://"
"llvm.org/releases/>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:25
msgid ""
"For more information about LLVM, including information about the latest "
"release, please check out the `main LLVM web site <https://llvm.org/>`_.  If "
"you have questions or comments, the `Discourse forums <https://discourse."
"llvm.org>`_ is a good place to ask them."
msgstr ""

#: ../../../ReleaseNotes.rst:31
msgid ""
"Note that if you are reading this file from a Git checkout or the main LLVM "
"web page, this document applies to the *next* release, not the current one.  "
"To see the release notes for a specific release, please see the `releases "
"page <https://llvm.org/releases/>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:37
msgid "Non-comprehensive list of changes in this release"
msgstr ""

#: ../../../ReleaseNotes.rst:45
msgid ""
"Starting with LLVM 19, the Windows installers only include support for the "
"X86, ARM, and AArch64 targets in order to keep the build size within the "
"limits of the NSIS installer framework."
msgstr ""

#: ../../../ReleaseNotes.rst:49
msgid "..."
msgstr ""

#: ../../../ReleaseNotes.rst:52
msgid "Update on required toolchains to build LLVM"
msgstr ""

#: ../../../ReleaseNotes.rst:54
msgid ""
"The minimum Python version has been raised from 3.6 to 3.8 across all of "
"LLVM. This enables the use of many new Python features, aligning more "
"closely with modern Python best practices, and improves CI maintainability "
"See `#78828 <https://github.com/llvm/llvm-project/pull/78828>`_ for more "
"info."
msgstr ""

#: ../../../ReleaseNotes.rst:60
msgid "Changes to the LLVM IR"
msgstr ""

#: ../../../ReleaseNotes.rst:62
msgid "Added Memory Model Relaxation Annotations (MMRAs)."
msgstr ""

#: ../../../ReleaseNotes.rst:63
msgid "Added ``nusw`` and ``nuw`` flags to ``getelementptr`` instruction."
msgstr ""

#: ../../../ReleaseNotes.rst:64
msgid ""
"Renamed ``llvm.experimental.vector.reverse`` intrinsic to ``llvm.vector."
"reverse``."
msgstr ""

#: ../../../ReleaseNotes.rst:65
msgid ""
"Renamed ``llvm.experimental.vector.splice`` intrinsic to ``llvm.vector."
"splice``."
msgstr ""

#: ../../../ReleaseNotes.rst:66
msgid ""
"Renamed ``llvm.experimental.vector.interleave2`` intrinsic to ``llvm.vector."
"interleave2``."
msgstr ""

#: ../../../ReleaseNotes.rst:67
msgid ""
"Renamed ``llvm.experimental.vector.deinterleave2`` intrinsic to ``llvm."
"vector.deinterleave2``."
msgstr ""

#: ../../../ReleaseNotes.rst:68
msgid ""
"The constant expression variants of the following instructions have been "
"removed:"
msgstr ""

#: ../../../ReleaseNotes.rst:71
msgid "``icmp``"
msgstr ""

#: ../../../ReleaseNotes.rst:72
msgid "``fcmp``"
msgstr ""

#: ../../../ReleaseNotes.rst:73
msgid "``shl``"
msgstr ""

#: ../../../ReleaseNotes.rst:74
msgid ""
"LLVM has switched from using debug intrinsics in textual IR to using debug "
"records by default. Details of the change and instructions on how to update "
"any downstream tools and tests can be found in the `migration docs <https://"
"llvm.org/docs/RemoveDIsDebugInfo.html>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:78
msgid "Semantics of MC/DC intrinsics have been changed."
msgstr ""

#: ../../../ReleaseNotes.rst:80
msgid ""
"``llvm.instprof.mcdc.parameters``: 3rd argument has been changed from bytes "
"to bits."
msgstr ""

#: ../../../ReleaseNotes.rst:82
msgid "``llvm.instprof.mcdc.condbitmap.update``: Removed."
msgstr ""

#: ../../../ReleaseNotes.rst:83
msgid ""
"``llvm.instprof.mcdc.tvbitmap.update``: 3rd argument has been removed. The "
"next argument has been changed from byte index to bit index."
msgstr ""

#: ../../../ReleaseNotes.rst:86
msgid "Added ``llvm.experimental.vector.compress`` intrinsic."
msgstr ""

#: ../../../ReleaseNotes.rst:87
msgid ""
"Added special kind of `constant expressions <https://llvm.org/docs/LangRef."
"html#pointer-authentication-constants>`_ to represent pointers with "
"signature embedded into it."
msgstr ""

#: ../../../ReleaseNotes.rst:90
msgid ""
"Added `pointer authentication operand bundles <https://llvm.org/docs/LangRef."
"html#pointer-authentication-operand-bundles>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:94
msgid "Changes to LLVM infrastructure"
msgstr ""

#: ../../../ReleaseNotes.rst:97
msgid "Changes to building LLVM"
msgstr ""

#: ../../../ReleaseNotes.rst:99
msgid ""
"LLVM now has rpmalloc version 1.4.5 in-tree, as a replacement C allocator "
"for hosted toolchains. This supports several host platforms such as Mac or "
"Unix, however currently only the Windows 64-bit LLVM release uses it. This "
"has a great benefit in terms of build times on Windows when using ThinLTO "
"linking, especially on machines with lots of cores, to an order of magnitude "
"or more. Clang compilation is also improved. Please see some build timings "
"in (`#91862 <https://github.com/llvm/llvm-project/"
"pull/91862#issue-2291033962>`_) For more information, refer to the "
"**LLVM_ENABLE_RPMALLOC** option in `CMake variables <https://llvm.org/docs/"
"CMake.html#llvm-related-variables>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:108
msgid ""
"The ``LLVM_ENABLE_TERMINFO`` flag has been removed. LLVM no longer depends "
"on terminfo and now always uses the ``TERM`` environment variable for color "
"support autodetection."
msgstr ""

#: ../../../ReleaseNotes.rst:113
msgid "Changes to TableGen"
msgstr ""

#: ../../../ReleaseNotes.rst:115
msgid "We can define type aliases via new keyword ``deftype``."
msgstr ""

#: ../../../ReleaseNotes.rst:118
msgid "Changes to Interprocedural Optimizations"
msgstr ""

#: ../../../ReleaseNotes.rst:120
msgid ""
"Hot cold region splitting analysis improvements for overlapping cold regions."
msgstr ""

#: ../../../ReleaseNotes.rst:123
msgid "Changes to the AArch64 Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:125
msgid ""
"Added support for Cortex-R82AE, Cortex-A78AE, Cortex-A520AE, Cortex-A720AE, "
"Cortex-A725, Cortex-X925, Neoverse-N3, Neoverse-V3 and Neoverse-V3AE CPUs."
msgstr ""

#: ../../../ReleaseNotes.rst:128
msgid ""
"``-mbranch-protection=standard`` now enables FEAT_PAuth_LR by default when "
"the feature is enabled. The new behaviour results in ``standard`` being "
"equal to ``bti+pac-ret+pc`` when ``+pauth-lr`` is passed as part of ``-"
"mcpu=`` options."
msgstr ""

#: ../../../ReleaseNotes.rst:133
msgid ""
"SVE and SVE2 have been moved to the default extensions list for ARMv9.0, "
"making them optional per the Arm ARM.  Existing v9.0+ CPUs in the backend "
"that support these extensions continue to have these features enabled by "
"default when specified via ``-march=`` or an ``-mcpu=`` that supports them.  "
"The attribute ``\"target-features\"=\"+v9a\"`` no longer implies "
"``\"+sve\"`` and ``\"+sve2\"`` respectively."
msgstr ""

#: ../../../ReleaseNotes.rst:139
msgid ""
"Added support for ELF pointer authentication relocations as specified in "
"`PAuth ABI Extension to ELF <https://github.com/ARM-software/abi-aa/blob/"
"main/pauthabielf64/pauthabielf64.rst>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:142
msgid ""
"Added codegeneration, ELF object file and linker support for authenticated "
"call lowering, signed constants and emission of signing scheme details in "
"``GNU_PROPERTY_AARCH64_FEATURE_PAUTH`` property of ``.note.gnu.property`` "
"section."
msgstr ""

#: ../../../ReleaseNotes.rst:146
msgid ""
"Added codegeneration support for ``llvm.ptrauth.auth`` and ``llvm.ptrauth."
"resign`` intrinsics."
msgstr ""

#: ../../../ReleaseNotes.rst:150
msgid "Changes to the AMDGPU Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:152
msgid "Implemented the ``llvm.get.fpenv`` and ``llvm.set.fpenv`` intrinsics."
msgstr ""

#: ../../../ReleaseNotes.rst:153
msgid ""
"Added ``!amdgpu.no.fine.grained.memory`` and ``!amdgpu.no.remote.memory`` "
"metadata to control atomic behavior."
msgstr ""

#: ../../../ReleaseNotes.rst:156
msgid ""
"Implemented :ref:`llvm.get.rounding <int_get_rounding>` and :ref:`llvm.set."
"rounding <int_set_rounding>`"
msgstr ""

#: ../../../ReleaseNotes.rst:158
msgid ""
"Removed ``llvm.amdgcn.ds.fadd``, ``llvm.amdgcn.ds.fmin`` and ``llvm.amdgcn."
"ds.fmax`` intrinsics. Users should use the :ref:`atomicrmw <i_atomicrmw>` "
"instruction with `fadd`, `fmin` and `fmax` with addrspace(3) instead."
msgstr ""

#: ../../../ReleaseNotes.rst:163
msgid ""
"AMDGPUAttributor is no longer run as part of the codegen pass pipeline. It "
"is expected to run as part of the middle end optimizations."
msgstr ""

#: ../../../ReleaseNotes.rst:168
msgid "Changes to the ARM Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:170
msgid "Added support for Cortex-R52+ CPU."
msgstr ""

#: ../../../ReleaseNotes.rst:171
msgid ""
"FEAT_F32MM is no longer activated by default when using `+sve` on v8.6-A or "
"greater. The feature is still available and can be used by adding `+f32mm` "
"to the command line options."
msgstr ""

#: ../../../ReleaseNotes.rst:172
msgid ""
"armv8-r now implies only fp-armv8d16sp, rather than neon and full fp-armv8. "
"These features are still included by default for cortex-r52. The default cpu "
"for armv8-r is now \"generic\", for compatibility with variants that do not "
"include neon, fp64, and d32."
msgstr ""

#: ../../../ReleaseNotes.rst:175
msgid "Changes to the AVR Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:178
msgid "Changes to the DirectX Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:181
msgid "Changes to the Hexagon Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:184
msgid "Changes to the LoongArch Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:186
msgid ""
"i32 is now a native type in the datalayout string. This enables "
"LoopStrengthReduce for loops with i32 induction variables, among other "
"optimizations."
msgstr ""

#: ../../../ReleaseNotes.rst:189
msgid "Codegen support is added for TLS Desciptor."
msgstr ""

#: ../../../ReleaseNotes.rst:190
msgid ""
"Interleaved vectorization and vector shuffle are supported on LoongArch and "
"the experimental feature ``auto-vec`` is removed."
msgstr ""

#: ../../../ReleaseNotes.rst:192
msgid "Allow ``f16`` codegen with expansion to libcalls."
msgstr ""

#: ../../../ReleaseNotes.rst:193
msgid "Clarify that emulated TLS is not supported."
msgstr ""

#: ../../../ReleaseNotes.rst:194
msgid "A codegen issue for ``bstrins.w`` is fixed on loongarch32."
msgstr ""

#: ../../../ReleaseNotes.rst:195
msgid "Assorted codegen improvements."
msgstr ""

#: ../../../ReleaseNotes.rst:198
msgid "Changes to the MIPS Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:201
msgid "Changes to the PowerPC Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:203
msgid "PPC big-endian Linux now supports ``-fpatchable-function-entry``."
msgstr ""

#: ../../../ReleaseNotes.rst:204
msgid "PPC AIX now supports local-dynamic TLS mode."
msgstr ""

#: ../../../ReleaseNotes.rst:205
msgid ""
"PPC AIX saves the Git revision in binaries when built with "
"LLVM_APPEND_VC_REV=ON."
msgstr ""

#: ../../../ReleaseNotes.rst:206
msgid "PPC AIX now supports toc-data attribute for large code model."
msgstr ""

#: ../../../ReleaseNotes.rst:207
msgid ""
"PPC AIX now supports passing arguments by value having greater alignment "
"than the pointer size. Currently only compatible with the IBM XL C compiler."
msgstr ""

#: ../../../ReleaseNotes.rst:209
msgid "Add support for the per global code model attribute on AIX."
msgstr ""

#: ../../../ReleaseNotes.rst:210
msgid ""
"Support spilling non-volatile registers for traceback table accuracy on AIX."
msgstr ""

#: ../../../ReleaseNotes.rst:211
msgid "Codegen improvements and bug fixes."
msgstr ""

#: ../../../ReleaseNotes.rst:214
msgid "Changes to the RISC-V Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:216
msgid ""
"Added full support for the experimental Zabha (Byte and Halfword Atomic "
"Memory Operations) extension."
msgstr ""

#: ../../../ReleaseNotes.rst:218
msgid ""
"Added assembler/disassembler support for the experimenatl Zalasr (Load-"
"Acquire and Store-Release) extension."
msgstr ""

#: ../../../ReleaseNotes.rst:220
msgid ""
"The names of the majority of the S-prefixed (supervisor-level) extension "
"names in the RISC-V profiles specification are now recognised."
msgstr ""

#: ../../../ReleaseNotes.rst:222
msgid "Codegen support was added for the Zimop (May-Be-Operations) extension."
msgstr ""

#: ../../../ReleaseNotes.rst:223
msgid ""
"The experimental Ssnpm, Smnpm, Smmpm, Sspm, and Supm 1.0.0 Pointer Masking "
"extensions are supported."
msgstr ""

#: ../../../ReleaseNotes.rst:224
msgid "The experimental Ssqosid extension is supported."
msgstr ""

#: ../../../ReleaseNotes.rst:225
msgid ""
"Added the CSR names from the Resumable Non-Maskable Interrupts (Smrnmi) "
"extension."
msgstr ""

#: ../../../ReleaseNotes.rst:226
msgid ""
"llvm-objdump now prints disassembled opcode bytes in groups of 2 or 4 bytes "
"to match GNU objdump. The bytes within the groups are in big endian order."
msgstr ""

#: ../../../ReleaseNotes.rst:228
msgid ""
"Added smstateen extension to -march. CSR names for smstateen were already "
"supported."
msgstr ""

#: ../../../ReleaseNotes.rst:229
msgid "Zaamo and Zalrsc are no longer experimental."
msgstr ""

#: ../../../ReleaseNotes.rst:230
msgid ""
"Processors that enable post reg-alloc scheduling (PostMachineScheduler) by "
"default should use the `UsePostRAScheduler` subtarget feature. Setting "
"`PostRAScheduler = 1` in the scheduler model will have no effect on the "
"enabling of the PostMachineScheduler."
msgstr ""

#: ../../../ReleaseNotes.rst:231
msgid "Zabha is no longer experimental."
msgstr ""

#: ../../../ReleaseNotes.rst:232
msgid "B (the collection of the Zba, Zbb, Zbs extensions) is supported."
msgstr ""

#: ../../../ReleaseNotes.rst:233
msgid "Added smcdeleg, ssccfg, smcsrind, and sscsrind extensions to -march."
msgstr ""

#: ../../../ReleaseNotes.rst:234
msgid ""
"``-mcpu=syntacore-scr3-rv32`` and ``-mcpu=syntacore-scr3-rv64`` were added."
msgstr ""

#: ../../../ReleaseNotes.rst:235
msgid ""
"The default atomics mapping was changed to emit an additional trailing fence "
"for sequentially consistent stores, offering compatibility with a future "
"mapping using load-acquire and store-release instructions while remaining "
"fully compatible with objects produced prior to this change. The mapping "
"(ABI) used is recorded as an ELF attribute."
msgstr ""

#: ../../../ReleaseNotes.rst:240
msgid "Ztso is no longer experimental."
msgstr ""

#: ../../../ReleaseNotes.rst:241
msgid ""
"The WCH / Nanjing Qinheng Microelectronics QingKe \"XW\" compressed opcodes "
"are supported under the name \"Xwchc\"."
msgstr ""

#: ../../../ReleaseNotes.rst:243
msgid ""
"``-mcpu=native`` now detects available features with hwprobe (RISC-V "
"Hardware Probing Interface) on Linux 6.4 or later."
msgstr ""

#: ../../../ReleaseNotes.rst:244
msgid "The version of Zicfilp/Zicfiss is updated to 1.0."
msgstr ""

#: ../../../ReleaseNotes.rst:247
msgid "Changes to the WebAssembly Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:250
msgid "Changes to the Windows Target"
msgstr ""

#: ../../../ReleaseNotes.rst:253
msgid "Changes to the X86 Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:255
msgid ""
"Removed knl/knm specific ISA intrinsics: AVX512PF, AVX512ER, PREFETCHWT1, "
"while assembly encoding/decoding supports are kept."
msgstr ""

#: ../../../ReleaseNotes.rst:258
msgid ""
"Removed ``3DNow!``-specific ISA intrinsics and codegen support. The "
"``3dnow`` and ``3dnowa`` target features are no longer supported. The "
"intrinsics ``llvm.x86.3dnow.*``, ``llvm.x86.3dnowa.*``, and ``llvm.x86.mmx."
"femms`` have been removed. Assembly encoding/decoding for the corresponding "
"instructions remains supported."
msgstr ""

#: ../../../ReleaseNotes.rst:262
msgid "Changes to the OCaml bindings"
msgstr ""

#: ../../../ReleaseNotes.rst:265
msgid "Changes to the Python bindings"
msgstr ""

#: ../../../ReleaseNotes.rst:268
msgid "Changes to the C API"
msgstr ""

#: ../../../ReleaseNotes.rst:270
msgid ""
"Added ``LLVMGetBlockAddressFunction`` and ``LLVMGetBlockAddressBasicBlock`` "
"functions for accessing the values in a blockaddress constant."
msgstr ""

#: ../../../ReleaseNotes.rst:273
msgid ""
"Added ``LLVMConstStringInContext2`` function, which better matches the C++ "
"API by using ``size_t`` for string length. Deprecated "
"``LLVMConstStringInContext``."
msgstr ""

#: ../../../ReleaseNotes.rst:276
msgid "Added the following functions for accessing a function's prefix data:"
msgstr ""

#: ../../../ReleaseNotes.rst:278
msgid "``LLVMHasPrefixData``"
msgstr ""

#: ../../../ReleaseNotes.rst:279
msgid "``LLVMGetPrefixData``"
msgstr ""

#: ../../../ReleaseNotes.rst:280
msgid "``LLVMSetPrefixData``"
msgstr ""

#: ../../../ReleaseNotes.rst:282
msgid "Added the following functions for accessing a function's prologue data:"
msgstr ""

#: ../../../ReleaseNotes.rst:284
msgid "``LLVMHasPrologueData``"
msgstr ""

#: ../../../ReleaseNotes.rst:285
msgid "``LLVMGetPrologueData``"
msgstr ""

#: ../../../ReleaseNotes.rst:286
msgid "``LLVMSetPrologueData``"
msgstr ""

#: ../../../ReleaseNotes.rst:288
msgid "Deprecated ``LLVMConstNUWNeg`` and ``LLVMBuildNUWNeg``."
msgstr ""

#: ../../../ReleaseNotes.rst:290
msgid ""
"Added ``LLVMAtomicRMWBinOpUIncWrap`` and ``LLVMAtomicRMWBinOpUDecWrap`` to "
"``LLVMAtomicRMWBinOp`` enum for AtomicRMW instructions."
msgstr ""

#: ../../../ReleaseNotes.rst:293
msgid ""
"Added ``LLVMCreateConstantRangeAttribute`` function for creating "
"ConstantRange Attributes."
msgstr ""

#: ../../../ReleaseNotes.rst:295
msgid ""
"Added the following functions for creating and accessing data for CallBr "
"instructions:"
msgstr ""

#: ../../../ReleaseNotes.rst:297
msgid "``LLVMBuildCallBr``"
msgstr ""

#: ../../../ReleaseNotes.rst:298
msgid "``LLVMGetCallBrDefaultDest``"
msgstr ""

#: ../../../ReleaseNotes.rst:299
msgid "``LLVMGetCallBrNumIndirectDests``"
msgstr ""

#: ../../../ReleaseNotes.rst:300
msgid "``LLVMGetCallBrIndirectDest``"
msgstr ""

#: ../../../ReleaseNotes.rst:302
msgid ""
"The following functions for creating constant expressions have been removed, "
"because the underlying constant expressions are no longer supported. "
"Instead, an instruction should be created using the ``LLVMBuildXYZ`` APIs, "
"which will constant fold the operands if possible and create an instruction "
"otherwise:"
msgstr ""

#: ../../../ReleaseNotes.rst:307
msgid "``LLVMConstICmp``"
msgstr ""

#: ../../../ReleaseNotes.rst:308
msgid "``LLVMConstFCmp``"
msgstr ""

#: ../../../ReleaseNotes.rst:309
msgid "``LLVMConstShl``"
msgstr ""

#: ../../../ReleaseNotes.rst:311
msgid ""
"**Note:** The following changes are due to the removal of the debug info "
"intrinsics from LLVM and to the introduction of debug records into LLVM. "
"They are described in detail in the `debug info migration guide <https://"
"llvm.org/docs/RemoveDIsDebugInfo.html>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:315
msgid ""
"Added the following functions to insert before the indicated instruction but "
"after any attached debug records."
msgstr ""

#: ../../../ReleaseNotes.rst:318
msgid "``LLVMPositionBuilderBeforeDbgRecords``"
msgstr ""

#: ../../../ReleaseNotes.rst:319
msgid "``LLVMPositionBuilderBeforeInstrAndDbgRecords``"
msgstr ""

#: ../../../ReleaseNotes.rst:321
msgid ""
"Same as ``LLVMPositionBuilder`` and ``LLVMPositionBuilderBefore`` except the "
"insertion position is set to before the debug records that precede the "
"target instruction. ``LLVMPositionBuilder`` and "
"``LLVMPositionBuilderBefore`` are unchanged."
msgstr ""

#: ../../../ReleaseNotes.rst:326
msgid ""
"Added the following functions to get/set the new non-instruction debug info "
"format. They will be deprecated in the future and they are just a transition "
"aid."
msgstr ""

#: ../../../ReleaseNotes.rst:329
msgid "``LLVMIsNewDbgInfoFormat``"
msgstr ""

#: ../../../ReleaseNotes.rst:330
msgid "``LLVMSetIsNewDbgInfoFormat``"
msgstr ""

#: ../../../ReleaseNotes.rst:332
msgid ""
"Added the following functions to insert a debug record (new debug info "
"format)."
msgstr ""

#: ../../../ReleaseNotes.rst:334
msgid "``LLVMDIBuilderInsertDeclareRecordBefore``"
msgstr ""

#: ../../../ReleaseNotes.rst:335
msgid "``LLVMDIBuilderInsertDeclareRecordAtEnd``"
msgstr ""

#: ../../../ReleaseNotes.rst:336
msgid "``LLVMDIBuilderInsertDbgValueRecordBefore``"
msgstr ""

#: ../../../ReleaseNotes.rst:337
msgid "``LLVMDIBuilderInsertDbgValueRecordAtEnd``"
msgstr ""

#: ../../../ReleaseNotes.rst:339
msgid ""
"Deleted the following functions that inserted a debug intrinsic (old debug "
"info format)."
msgstr ""

#: ../../../ReleaseNotes.rst:341
msgid "``LLVMDIBuilderInsertDeclareBefore``"
msgstr ""

#: ../../../ReleaseNotes.rst:342
msgid "``LLVMDIBuilderInsertDeclareAtEnd``"
msgstr ""

#: ../../../ReleaseNotes.rst:343
msgid "``LLVMDIBuilderInsertDbgValueBefore``"
msgstr ""

#: ../../../ReleaseNotes.rst:344
msgid "``LLVMDIBuilderInsertDbgValueAtEnd``"
msgstr ""

#: ../../../ReleaseNotes.rst:346
msgid ""
"Added the following functions for accessing a Target Extension Type's data:"
msgstr ""

#: ../../../ReleaseNotes.rst:348
msgid "``LLVMGetTargetExtTypeName``"
msgstr ""

#: ../../../ReleaseNotes.rst:349
msgid "``LLVMGetTargetExtTypeNumTypeParams``/``LLVMGetTargetExtTypeTypeParam``"
msgstr ""

#: ../../../ReleaseNotes.rst:350
msgid "``LLVMGetTargetExtTypeNumIntParams``/``LLVMGetTargetExtTypeIntParam``"
msgstr ""

#: ../../../ReleaseNotes.rst:352
msgid ""
"Added the following functions for accessing/setting the no-wrap flags for a "
"GetElementPtr instruction:"
msgstr ""

#: ../../../ReleaseNotes.rst:355
msgid "``LLVMBuildGEPWithNoWrapFlags``"
msgstr ""

#: ../../../ReleaseNotes.rst:356
msgid "``LLVMConstGEPWithNoWrapFlags``"
msgstr ""

#: ../../../ReleaseNotes.rst:357
msgid "``LLVMGEPGetNoWrapFlags``"
msgstr ""

#: ../../../ReleaseNotes.rst:358
msgid "``LLVMGEPSetNoWrapFlags``"
msgstr ""

#: ../../../ReleaseNotes.rst:360
msgid ""
"Added the following functions for creating and accessing data for "
"ConstantPtrAuth constants:"
msgstr ""

#: ../../../ReleaseNotes.rst:362
msgid "``LLVMConstantPtrAuth``"
msgstr ""

#: ../../../ReleaseNotes.rst:363
msgid "``LLVMGetConstantPtrAuthPointer``"
msgstr ""

#: ../../../ReleaseNotes.rst:364
msgid "``LLVMGetConstantPtrAuthKey``"
msgstr ""

#: ../../../ReleaseNotes.rst:365
msgid "``LLVMGetConstantPtrAuthDiscriminator``"
msgstr ""

#: ../../../ReleaseNotes.rst:366
msgid "``LLVMGetConstantPtrAuthAddrDiscriminator``"
msgstr ""

#: ../../../ReleaseNotes.rst:369
msgid "Changes to the CodeGen infrastructure"
msgstr ""

#: ../../../ReleaseNotes.rst:372
msgid "Changes to the Metadata Info"
msgstr ""

#: ../../../ReleaseNotes.rst:375
msgid "Changes to the Debug Info"
msgstr ""

#: ../../../ReleaseNotes.rst:377
msgid ""
"LLVM has switched from using debug intrinsics internally to using debug "
"records by default. This should happen transparently when using the "
"DIBuilder to construct debug variable information, but will require changes "
"for any code that interacts with debug intrinsics directly. Debug intrinsics "
"will only be supported on a best-effort basis from here onwards; for more "
"information, see the `migration docs <https://llvm.org/docs/"
"RemoveDIsDebugInfo.html>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:384
msgid ""
"When emitting DWARF v2 and not in strict DWARF mode, LLVM will now add a "
"``DW_AT_type`` to instances of ``DW_TAG_enumeration_type``. This is actually "
"a DWARF v3 feature which tells tools what the enum's underlying type is. "
"Emitting this for v2 as well will help users who have to build binaries with "
"DWARF v2 but are using tools that understand newer DWARF standards. Older "
"tools will ignore it. (`#98335 <https://github.com/llvm/llvm-project/"
"pull/98335>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:392
msgid "Changes to the LLVM tools"
msgstr ""

#: ../../../ReleaseNotes.rst:393
msgid ""
"llvm-nm and llvm-objdump can now print symbol information from linked "
"WebAssembly binaries, using information from exports or the \"name\" section "
"for functions, globals and data segments. Symbol addresses and sizes are "
"printed as offsets in the file, allowing for binary size analysis. Wasm "
"files using reference types and GC are also supported (but also only for "
"functions, globals, and data, and only for listing symbols and names)."
msgstr ""

#: ../../../ReleaseNotes.rst:400
msgid ""
"llvm-ar now utilizes LLVM_DEFAULT_TARGET_TRIPLE to determine the archive "
"format if it's not specified with the ``--format`` argument and cannot be "
"inferred from input files."
msgstr ""

#: ../../../ReleaseNotes.rst:404
msgid ""
"llvm-ar now allows specifying COFF archive format with ``--format`` argument "
"and uses it by default for COFF targets."
msgstr ""

#: ../../../ReleaseNotes.rst:407
msgid ""
"llvm-ranlib now supports ``-V`` as an alias for ``--version``. ``-v`` (``--"
"verbose`` in llvm-ar) has been removed. (`#87661 <https://github.com/llvm/"
"llvm-project/pull/87661>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:411
msgid ""
"llvm-objcopy now supports ``--set-symbol-visibility`` and ``--set-symbols-"
"visibility`` options for ELF input to change the visibility of symbols."
msgstr ""

#: ../../../ReleaseNotes.rst:415
msgid ""
"llvm-objcopy now supports ``--skip-symbol`` and ``--skip-symbols`` options "
"for ELF input to skip the specified symbols when executing other options "
"that can change a symbol's name, binding or visibility."
msgstr ""

#: ../../../ReleaseNotes.rst:419
msgid ""
"llvm-objcopy now supports ``--compress-sections`` to compress or decompress "
"arbitrary sections not within a segment. (`#85036 <https://github.com/llvm/"
"llvm-project/pull/85036>`_.)"
msgstr ""

#: ../../../ReleaseNotes.rst:423
msgid ""
"llvm-profgen now supports COFF+DWARF binaries. This enables Sample-based PGO "
"on Windows using Intel VTune's SEP. For details on usage, see the `end-user "
"documentation for SPGO <https://clang.llvm.org/docs/UsersManual.html#using-"
"sampling-profilers>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:428
msgid ""
"llvm-readelf's ``-r`` output for RELR has been improved. (`#89162 <https://"
"github.com/llvm/llvm-project/pull/89162>`_) ``--raw-relr`` has been removed."
msgstr ""

#: ../../../ReleaseNotes.rst:432
msgid ""
"llvm-mca now aborts by default if it is given bad input where previously it "
"would continue. Additionally, it can now continue when it encounters "
"instructions which lack scheduling information. The behaviour can be "
"controlled by the newly introduced ``--skip-unsupported-instructions=<none|"
"lack-sched|parse-failure|any>``, as documented in ``--help`` output and the "
"command guide. (`#90474 <https://github.com/llvm/llvm-project/pull/90474>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:440
msgid ""
"llvm-readobj's LLVM output format for ELF core files has been changed. "
"Similarly, the JSON format has been fixed for this case. The NT_FILE note "
"now has a map for the mapped files. (`#92835 <https://github.com/llvm/llvm-"
"project/pull/92835>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:445
msgid ""
"llvm-cov now generates HTML report with JavaScript code to allow simple "
"jumping between uncovered parts (lines/regions/branches) of code using "
"buttons on top-right corner of the page or using keys (L/R/B or jumping in "
"reverse direction with shift+L/R/B). (`#95662 <https://github.com/llvm/llvm-"
"project/pull/95662>`_)."
msgstr ""

#: ../../../ReleaseNotes.rst:451
msgid ""
"llvm-objcopy now verifies format of ``.note`` sections for ELF input. This "
"can be disabled by ``--no-verify-note-sections``. (`#90458 <https://github."
"com/llvm/llvm-project/pull/90458>`)."
msgstr ""

#: ../../../ReleaseNotes.rst:455
msgid ""
"llvm-objdump now supports the ``--file-headers`` option for XCOFF object "
"files."
msgstr ""

#: ../../../ReleaseNotes.rst:458
msgid "Changes to LLDB"
msgstr ""

#: ../../../ReleaseNotes.rst:460
msgid ""
"Register field information is now provided on AArch64 FreeBSD for live "
"processes and core files (previously only provided on AArch64 Linux)."
msgstr ""

#: ../../../ReleaseNotes.rst:463
msgid ""
"Register field information can now include enums to represent field values. "
"Enums have been added for ``fpcr.RMode`` and ``mte_ctrl.TCF`` for AArch64 "
"targets::"
msgstr ""

#: ../../../ReleaseNotes.rst:471
msgid ""
"If you need to know the values of the enum, these can be found in the output "
"of ``register info`` for the same register."
msgstr ""

#: ../../../ReleaseNotes.rst:475
msgid "Changes to BOLT"
msgstr ""

#: ../../../ReleaseNotes.rst:476
msgid ""
"Now supports ``--match-profile-with-function-hash`` to match profiled and "
"binary functions with exact hash, allowing for the matching of renamed but "
"identical functions."
msgstr ""

#: ../../../ReleaseNotes.rst:481
msgid "Changes to Sanitizers"
msgstr ""

#: ../../../ReleaseNotes.rst:484
msgid "Other Changes"
msgstr ""

#: ../../../ReleaseNotes.rst:487
msgid "External Open Source Projects Using LLVM 19"
msgstr ""

#: ../../../ReleaseNotes.rst:489
msgid "A project..."
msgstr ""

#: ../../../ReleaseNotes.rst:492
msgid "Additional Information"
msgstr ""

#: ../../../ReleaseNotes.rst:494
msgid ""
"A wide variety of additional information is available on the `LLVM web page "
"<https://llvm.org/>`_, in particular in the `documentation <https://llvm.org/"
"docs/>`_ section.  The web page also contains versions of the API "
"documentation which is up-to-date with the Git version of the source code.  "
"You can access versions of these documents specific to this release by going "
"into the ``llvm/docs/`` directory in the LLVM tree."
msgstr ""

#: ../../../ReleaseNotes.rst:501
msgid ""
"If you have any questions or comments about LLVM, please feel free to "
"contact us via the `Discourse forums <https://discourse.llvm.org>`_."
msgstr ""
