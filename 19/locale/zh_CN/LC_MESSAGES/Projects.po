# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 19\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../Projects.rst:3
msgid "Creating an LLVM Project"
msgstr ""

#: ../../../Projects.rst:9
msgid "Overview"
msgstr ""

#: ../../../Projects.rst:11
msgid ""
"The LLVM build system is designed to facilitate the building of third party "
"projects that use LLVM header files, libraries, and tools.  In order to use "
"these facilities, a ``Makefile`` from a project must do the following things:"
msgstr ""

#: ../../../Projects.rst:15
msgid ""
"Set ``make`` variables. There are several variables that a ``Makefile`` "
"needs to set to use the LLVM build system:"
msgstr ""

#: ../../../Projects.rst:18
msgid "``PROJECT_NAME`` - The name by which your project is known."
msgstr ""

#: ../../../Projects.rst:19
msgid "``LLVM_SRC_ROOT`` - The root of the LLVM source tree."
msgstr ""

#: ../../../Projects.rst:20
msgid "``LLVM_OBJ_ROOT`` - The root of the LLVM object tree."
msgstr ""

#: ../../../Projects.rst:21
msgid "``PROJ_SRC_ROOT`` - The root of the project's source tree."
msgstr ""

#: ../../../Projects.rst:22
msgid "``PROJ_OBJ_ROOT`` - The root of the project's object tree."
msgstr ""

#: ../../../Projects.rst:23
msgid "``PROJ_INSTALL_ROOT`` - The root installation directory."
msgstr ""

#: ../../../Projects.rst:24
msgid ""
"``LEVEL`` - The relative path from the current directory to the project's "
"root ``($PROJ_OBJ_ROOT)``."
msgstr ""

#: ../../../Projects.rst:27
msgid "Include ``Makefile.config`` from ``$(LLVM_OBJ_ROOT)``."
msgstr ""

#: ../../../Projects.rst:29
msgid "Include ``Makefile.rules`` from ``$(LLVM_SRC_ROOT)``."
msgstr ""

#: ../../../Projects.rst:31
msgid "There are two ways that you can set all of these variables:"
msgstr ""

#: ../../../Projects.rst:33
msgid "You can write your own ``Makefiles`` which hard-code these values."
msgstr ""

#: ../../../Projects.rst:35
msgid ""
"You can use the pre-made LLVM sample project. This sample project includes "
"``Makefiles``, a configure script that can be used to configure the location "
"of LLVM, and the ability to support multiple object directories from a "
"single source directory."
msgstr ""

#: ../../../Projects.rst:40
msgid ""
"If you want to devise your own build system, studying other projects and "
"LLVM ``Makefiles`` will probably provide enough information on how to write "
"your own ``Makefiles``."
msgstr ""

#: ../../../Projects.rst:45
msgid "Source Tree Layout"
msgstr ""

#: ../../../Projects.rst:47
msgid ""
"In order to use the LLVM build system, you will want to organize your source "
"code so that it can benefit from the build system's features.  Mainly, you "
"want your source tree layout to look similar to the LLVM source tree layout."
msgstr ""

#: ../../../Projects.rst:51
msgid ""
"Underneath your top level directory, you should have the following "
"directories:"
msgstr ""

#: ../../../Projects.rst:53
msgid "**lib**"
msgstr ""

#: ../../../Projects.rst:55
msgid ""
"This subdirectory should contain all of your library source code.  For each "
"library that you build, you will have one directory in **lib** that will "
"contain that library's source code."
msgstr ""

#: ../../../Projects.rst:59
msgid ""
"Libraries can be object files, archives, or dynamic libraries.  The **lib** "
"directory is just a convenient place for libraries as it places them all in "
"a directory from which they can be linked later."
msgstr ""

#: ../../../Projects.rst:63
msgid "**include**"
msgstr ""

#: ../../../Projects.rst:65
msgid ""
"This subdirectory should contain any header files that are global to your "
"project. By global, we mean that they are used by more than one library or "
"executable of your project."
msgstr ""

#: ../../../Projects.rst:69
msgid ""
"By placing your header files in **include**, they will be found "
"automatically by the LLVM build system.  For example, if you have a file "
"**include/jazz/note.h**, then your source files can include it simply with "
"**#include \"jazz/note.h\"**."
msgstr ""

#: ../../../Projects.rst:74
msgid "**tools**"
msgstr ""

#: ../../../Projects.rst:76
msgid ""
"This subdirectory should contain all of your source code for executables. "
"For each program that you build, you will have one directory in **tools** "
"that will contain that program's source code."
msgstr ""

#: ../../../Projects.rst:80
msgid "**test**"
msgstr ""

#: ../../../Projects.rst:82
msgid ""
"This subdirectory should contain tests that verify that your code works "
"correctly.  Automated tests are especially useful."
msgstr ""

#: ../../../Projects.rst:85
msgid ""
"Currently, the LLVM build system provides basic support for tests. The LLVM "
"system provides the following:"
msgstr ""

#: ../../../Projects.rst:88
msgid ""
"LLVM contains regression tests in ``llvm/test``.  These tests are run by "
"the :doc:`Lit <CommandGuide/lit>` testing tool.  This test procedure uses "
"``RUN`` lines in the actual test case to determine how to run the test.  See "
"the :doc:`TestingGuide` for more details."
msgstr ""

#: ../../../Projects.rst:93
msgid ""
"LLVM contains an optional package called ``llvm-test``, which provides "
"benchmarks and programs that are known to compile with the Clang front end. "
"You can use these programs to test your code, gather statistical "
"information, and compare it to the current LLVM performance statistics."
msgstr ""

#: ../../../Projects.rst:98
msgid ""
"Currently, there is no way to hook your tests directly into the ``llvm/"
"test`` testing harness. You will simply need to find a way to use the source "
"provided within that directory on your own."
msgstr ""

#: ../../../Projects.rst:102
msgid ""
"Typically, you will want to build your **lib** directory first followed by "
"your **tools** directory."
msgstr ""

#: ../../../Projects.rst:106
msgid "Writing LLVM Style Makefiles"
msgstr ""

#: ../../../Projects.rst:108
msgid ""
"The LLVM build system provides a convenient way to build libraries and "
"executables.  Most of your project Makefiles will only need to define a few "
"variables.  Below is a list of the variables one can set and what they can "
"do:"
msgstr ""

#: ../../../Projects.rst:114
msgid "Required Variables"
msgstr ""

#: ../../../Projects.rst:116
msgid "``LEVEL``"
msgstr ""

#: ../../../Projects.rst:118
msgid ""
"This variable is the relative path from this ``Makefile`` to the top "
"directory of your project's source code.  For example, if your source code "
"is in ``/tmp/src``, then the ``Makefile`` in ``/tmp/src/jump/high`` would "
"set ``LEVEL`` to ``\"../..\"``."
msgstr ""

#: ../../../Projects.rst:124
msgid "Variables for Building Subdirectories"
msgstr ""

#: ../../../Projects.rst:126
msgid "``DIRS``"
msgstr ""

#: ../../../Projects.rst:128
msgid ""
"This is a space separated list of subdirectories that should be built.  They "
"will be built, one at a time, in the order specified."
msgstr ""

#: ../../../Projects.rst:131
msgid "``PARALLEL_DIRS``"
msgstr ""

#: ../../../Projects.rst:133
msgid ""
"This is a list of directories that can be built in parallel. These will be "
"built after the directories in DIRS have been built."
msgstr ""

#: ../../../Projects.rst:136
msgid "``OPTIONAL_DIRS``"
msgstr ""

#: ../../../Projects.rst:138
msgid ""
"This is a list of directories that can be built if they exist, but will not "
"cause an error if they do not exist.  They are built serially in the order "
"in which they are listed."
msgstr ""

#: ../../../Projects.rst:143
msgid "Variables for Building Libraries"
msgstr ""

#: ../../../Projects.rst:145
msgid "``LIBRARYNAME``"
msgstr ""

#: ../../../Projects.rst:147
msgid ""
"This variable contains the base name of the library that will be built.  For "
"example, to build a library named ``libsample.a``, ``LIBRARYNAME`` should be "
"set to ``sample``."
msgstr ""

#: ../../../Projects.rst:151
msgid "``BUILD_ARCHIVE``"
msgstr ""

#: ../../../Projects.rst:153
msgid ""
"By default, a library is a ``.o`` file that is linked directly into a "
"program.  To build an archive (also known as a static library), set the "
"``BUILD_ARCHIVE`` variable."
msgstr ""

#: ../../../Projects.rst:157
msgid "``SHARED_LIBRARY``"
msgstr ""

#: ../../../Projects.rst:159
msgid ""
"If ``SHARED_LIBRARY`` is defined in your Makefile, a shared (or dynamic) "
"library will be built."
msgstr ""

#: ../../../Projects.rst:163
msgid "Variables for Building Programs"
msgstr ""

#: ../../../Projects.rst:165
msgid "``TOOLNAME``"
msgstr ""

#: ../../../Projects.rst:167
msgid ""
"This variable contains the name of the program that will be built.  For "
"example, to build an executable named ``sample``, ``TOOLNAME`` should be set "
"to ``sample``."
msgstr ""

#: ../../../Projects.rst:171
msgid "``USEDLIBS``"
msgstr ""

#: ../../../Projects.rst:173
msgid ""
"This variable holds a space separated list of libraries that should be "
"linked into the program.  These libraries must be libraries that come from "
"your **lib** directory.  The libraries must be specified without their "
"``lib`` prefix.  For example, to link ``libsample.a``, you would set "
"``USEDLIBS`` to ``sample.a``."
msgstr ""

#: ../../../Projects.rst:179
msgid "Note that this works only for statically linked libraries."
msgstr ""

#: ../../../Projects.rst:181
msgid "``LLVMLIBS``"
msgstr ""

#: ../../../Projects.rst:183
msgid ""
"This variable holds a space separated list of libraries that should be "
"linked into the program.  These libraries must be LLVM libraries.  The "
"libraries must be specified without their ``lib`` prefix.  For example, to "
"link with a driver that performs an IR transformation you might set "
"``LLVMLIBS`` to this minimal set of libraries ``LLVMSupport.a LLVMCore.a "
"LLVMBitReader.a LLVMAsmParser.a LLVMAnalysis.a LLVMTransformUtils.a "
"LLVMScalarOpts.a LLVMTarget.a``."
msgstr ""

#: ../../../Projects.rst:191
msgid ""
"Note that this works only for statically linked libraries. LLVM is split "
"into a large number of static libraries, and the list of libraries you "
"require may be much longer than the list above. To see a full list of "
"libraries use: ``llvm-config --libs all``.  Using ``LINK_COMPONENTS`` as "
"described below, obviates the need to set ``LLVMLIBS``."
msgstr ""

#: ../../../Projects.rst:197
msgid "``LINK_COMPONENTS``"
msgstr ""

#: ../../../Projects.rst:199
msgid ""
"This variable holds a space separated list of components that the LLVM "
"``Makefiles`` pass to the ``llvm-config`` tool to generate a link line for "
"the program. For example, to link with all LLVM libraries use "
"``LINK_COMPONENTS = all``."
msgstr ""

#: ../../../Projects.rst:204
msgid "``LIBS``"
msgstr ""

#: ../../../Projects.rst:206
msgid ""
"To link dynamic libraries, add ``-l<library base name>`` to the ``LIBS`` "
"variable.  The LLVM build system will look in the same places for dynamic "
"libraries as it does for static libraries."
msgstr ""

#: ../../../Projects.rst:210
msgid ""
"For example, to link ``libsample.so``, you would have the following line in "
"your ``Makefile``:"
msgstr ""

#: ../../../Projects.rst:217
msgid ""
"Note that ``LIBS`` must occur in the Makefile after the inclusion of "
"``Makefile.common``."
msgstr ""

#: ../../../Projects.rst:221
msgid "Miscellaneous Variables"
msgstr ""

#: ../../../Projects.rst:223
msgid "``CFLAGS`` & ``CPPFLAGS``"
msgstr ""

#: ../../../Projects.rst:225
msgid ""
"This variable can be used to add options to the C and C++ compiler, "
"respectively.  It is typically used to add options that tell the compiler "
"the location of additional directories to search for header files."
msgstr ""

#: ../../../Projects.rst:229
msgid ""
"It is highly suggested that you append to ``CFLAGS`` and ``CPPFLAGS`` as "
"opposed to overwriting them.  The LLVM ``Makefiles`` may already have useful "
"options in them that you may not want to overwrite."
msgstr ""

#: ../../../Projects.rst:234
msgid "Placement of Object Code"
msgstr ""

#: ../../../Projects.rst:236
msgid ""
"The final location of built libraries and executables will depend upon "
"whether you do a ``Debug``, ``Release``, or ``Profile`` build."
msgstr ""

#: ../../../Projects.rst:239
msgid "Libraries"
msgstr ""

#: ../../../Projects.rst:241
msgid ""
"All libraries (static and dynamic) will be stored in ``PROJ_OBJ_ROOT/<type>/"
"lib``, where *type* is ``Debug``, ``Release``, or ``Profile`` for a debug, "
"optimized, or profiled build, respectively."
msgstr ""

#: ../../../Projects.rst:245
msgid "Executables"
msgstr ""

#: ../../../Projects.rst:247
msgid ""
"All executables will be stored in ``PROJ_OBJ_ROOT/<type>/bin``, where *type* "
"is ``Debug``, ``Release``, or ``Profile`` for a debug, optimized, or "
"profiled build, respectively."
msgstr ""

#: ../../../Projects.rst:252
msgid "Further Help"
msgstr ""

#: ../../../Projects.rst:254
msgid ""
"If you have any questions or need any help creating an LLVM project, the "
"LLVM team would be more than happy to help.  You can always post your "
"questions to the `Discourse forums <https://discourse.llvm.org>`_."
msgstr ""
