# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 19\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../GlobalISel/GenericOpcode.rst:5
msgid "Generic Opcodes"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:12
msgid ""
"This documentation does not yet fully account for vectors. Many of the "
"scalar/integer/floating-point operations can also take vectors."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:16
msgid "Constants"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:19
msgid "G_IMPLICIT_DEF"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:21
msgid "An undefined value."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:28
msgid "G_CONSTANT"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:30
msgid "An integer constant."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:37
msgid "G_FCONSTANT"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:39
msgid "A floating point constant."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:46
msgid "G_FRAME_INDEX"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:48
msgid "The address of an object in the stack frame."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:55
msgid "G_GLOBAL_VALUE"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:57
msgid "The address of a global value."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:64
msgid "G_PTRAUTH_GLOBAL_VALUE"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:66
msgid ""
"The signed address of a global value. Operands: address to be signed "
"(pointer), key (32-bit imm), address for address discrimination (zero if not "
"needed) and an extra discriminator (64-bit imm)."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:75
msgid "G_BLOCK_ADDR"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:77
msgid "The address of a basic block."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:84
msgid "G_CONSTANT_POOL"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:86
msgid "The address of an object in the constant pool."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:93
msgid "Integer Extension and Truncation"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:96
msgid "G_ANYEXT"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:98
msgid ""
"Extend the underlying scalar type of an operation, leaving the high bits "
"unspecified."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:106
msgid "G_SEXT"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:108
msgid ""
"Sign extend the underlying scalar type of an operation, copying the sign bit "
"into the newly-created space."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:116
msgid "G_SEXT_INREG"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:118
msgid ""
"Sign extend the value from an arbitrary bit position, copying the sign bit "
"into all bits above it. This is equivalent to a shl + ashr pair with an "
"appropriate shift amount. $sz is an immediate (MachineOperand::isImm() "
"returns true) to allow targets to have some bitwidths legal and others "
"lowered. This opcode is particularly useful if the target has sign-extension "
"instructions that are cheaper than the constituent shifts as the optimizer "
"is able to make decisions on whether it's better to hang on to the "
"G_SEXT_INREG or to lower it and optimize the individual shifts."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:132
msgid "G_ZEXT"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:134
msgid ""
"Zero extend the underlying scalar type of an operation, putting zero bits "
"into the newly-created space."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:142
msgid "G_TRUNC"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:144
msgid ""
"Truncate the underlying scalar type of an operation. This is equivalent to "
"G_EXTRACT for scalar types, but acts elementwise on vectors."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:152
msgid "Type Conversions"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:155
msgid "G_INTTOPTR"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:157
msgid "Convert an integer to a pointer."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:164
msgid "G_PTRTOINT"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:166
msgid "Convert a pointer to an integer."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:173
msgid "G_BITCAST"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:175
msgid ""
"Reinterpret a value as a new type. This is usually done without changing any "
"bits but this is not always the case due a subtlety in the definition of "
"the :ref:`LLVM-IR Bitcast Instruction <i_bitcast>`. It is allowed to bitcast "
"between pointers with the same size, but different address spaces."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:186
msgid "G_ADDRSPACE_CAST"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:188
msgid ""
"Convert a pointer to an address space to a pointer to another address space."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:196
msgid ""
":ref:`i_addrspacecast` doesn't mention what happens if the cast is simply "
"invalid (i.e. if the address spaces are disjoint)."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:200
msgid "Scalar Operations"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:203
msgid "G_EXTRACT"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:205
msgid ""
"Extract a register of the specified size, starting from the block given by "
"index. This will almost certainly be mapped to sub-register COPYs after "
"register banks have been selected."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:214
msgid "G_INSERT"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:216
msgid "Insert a smaller register into a larger one at the specified bit-index."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:223
msgid "G_MERGE_VALUES"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:225
msgid ""
"Concatenate multiple registers of the same size into a wider register. The "
"input operands are always ordered from lowest bits to highest:"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:234
msgid "G_UNMERGE_VALUES"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:236
msgid ""
"Extract multiple registers of the specified size, starting from blocks given "
"by indexes. This will almost certainly be mapped to sub-register COPYs after "
"register banks have been selected. The output operands are always ordered "
"from lowest bits to highest:"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:247
msgid "G_BSWAP"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:249
msgid "Reverse the order of the bytes in a scalar."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:256
msgid "G_BITREVERSE"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:258
msgid "Reverse the order of the bits in a scalar."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:265
msgid "G_SBFX, G_UBFX"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:267
msgid "Extract a range of bits from a register."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:269
msgid "The source operands are registers as follows:"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:271
msgid "Source"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:272
msgid "The least-significant bit for the extraction"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:273
msgid "The width of the extraction"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:275
msgid "The least-significant bit (lsb) and width operands are in the range:"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:281
msgid "G_SBFX sign-extends the result, while G_UBFX zero-extends the result."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:304
msgid "Integer Operations"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:307
msgid "G_ADD, G_SUB, G_MUL, G_AND, G_OR, G_XOR, G_SDIV, G_UDIV, G_SREM, G_UREM"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:309
msgid "These each perform their respective integer arithmetic on a scalar."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:315
msgid "The above example adds %src1 to %src0 and stores the result in %dst."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:318
msgid "G_SDIVREM, G_UDIVREM"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:320
msgid "Perform integer division and remainder thereby producing two results."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:327
msgid "G_SADDSAT, G_UADDSAT, G_SSUBSAT, G_USUBSAT, G_SSHLSAT, G_USHLSAT"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:329
msgid ""
"Signed and unsigned addition, subtraction and left shift with saturation."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:336
msgid "G_SHL, G_LSHR, G_ASHR"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:338
msgid ""
"Shift the bits of a scalar left or right inserting zeros (sign-bit for "
"G_ASHR)."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:341
msgid "G_ROTR, G_ROTL"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:343
msgid "Rotate the bits right (G_ROTR) or left (G_ROTL)."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:346
msgid "G_ICMP"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:348
msgid ""
"Perform integer comparison producing non-zero (true) or zero (false). It's "
"target specific whether a true value is 1, ~0U, or some other non-zero value."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:352
msgid "G_SCMP"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:354
msgid ""
"Perform signed 3-way integer comparison producing -1 (smaller), 0 (equal), "
"or 1 (larger)."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:362
msgid "G_UCMP"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:364
msgid ""
"Perform unsigned 3-way integer comparison producing -1 (smaller), 0 (equal), "
"or 1 (larger)."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:372
msgid "G_SELECT"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:374
msgid "Select between two values depending on a zero/non-zero value."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:381
msgid "G_PTR_ADD"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:383
msgid ""
"Add a scalar offset in addressible units to a pointer. Addressible units are "
"typically bytes but this may vary between targets."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:392
msgid ""
"There are currently no in-tree targets that use this with addressable units "
"not equal to 8 bit."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:396
msgid "G_PTRMASK"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:398
msgid ""
"Zero out an arbitrary mask of bits of a pointer. The mask type must be an "
"integer, and the number of vector elements must match for all operands. This "
"corresponds to `i_intr_llvm_ptrmask`."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:407
msgid "G_SMIN, G_SMAX, G_UMIN, G_UMAX"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:409
msgid "Take the minimum/maximum of two values."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:416
msgid "G_ABS"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:418
msgid ""
"Take the absolute value of a signed integer. The absolute value of the "
"minimum negative value (e.g. the 8-bit value `0x80`) is defined to be itself."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:426
msgid "G_UADDO, G_SADDO, G_USUBO, G_SSUBO, G_SMULO, G_UMULO"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:428
msgid ""
"Perform the requested arithmetic and produce a carry output in addition to "
"the normal result."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:436
msgid "G_UADDE, G_SADDE, G_USUBE, G_SSUBE"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:438
msgid ""
"Perform the requested arithmetic and consume a carry input in addition to "
"the normal input. Also produce a carry output in addition to the normal "
"result."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:446
msgid "G_UMULH, G_SMULH"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:448
msgid ""
"Multiply two numbers at twice the incoming bit width (unsigned or signed) "
"and return the high half of the result."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:456
msgid "G_CTLZ, G_CTTZ, G_CTPOP"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:458
msgid "Count leading zeros, trailing zeros, or number of set bits."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:467
msgid "G_CTLZ_ZERO_UNDEF, G_CTTZ_ZERO_UNDEF"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:469
msgid ""
"Count leading zeros or trailing zeros. If the value is zero then the result "
"is undefined."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:478
msgid "Floating Point Operations"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:481
msgid "G_FCMP"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:483
msgid ""
"Perform floating point comparison producing non-zero (true) or zero (false). "
"It's target specific whether a true value is 1, ~0U, or some other non-zero "
"value."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:488
msgid "G_FNEG"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:490
msgid "Floating point negation."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:493
msgid "G_FPEXT"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:495
msgid "Convert a floating point value to a larger type."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:498
msgid "G_FPTRUNC"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:500
msgid "Convert a floating point value to a narrower type."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:503
msgid "G_FPTOSI, G_FPTOUI, G_SITOFP, G_UITOFP"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:505
msgid "Convert between integer and floating point."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:508
msgid "G_FABS"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:510
msgid "Take the absolute value of a floating point value."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:513
msgid "G_FCOPYSIGN"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:515
msgid ""
"Copy the value of the first operand, replacing the sign bit with that of the "
"second operand."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:519
msgid "G_FCANONICALIZE"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:521
msgid "See :ref:`i_intr_llvm_canonicalize`."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:524
msgid "G_IS_FPCLASS"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:526
msgid ""
"Tests if the first operand, which must be floating-point scalar or vector, "
"has floating-point class specified by the second operand. Returns non-zero "
"(true) or zero (false). It's target specific whether a true value is 1, ~0U, "
"or some other non-zero value. If the first operand is a vector, the returned "
"value is a vector of the same length."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:533
msgid "G_FMINNUM"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:535
msgid "Perform floating-point minimum on two values."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:537
#: ../../../GlobalISel/GenericOpcode.rst:547
msgid ""
"In the case where a single input is a NaN (either signaling or quiet), the "
"non-NaN input is returned."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:540
msgid "The return value of (FMINNUM 0.0, -0.0) could be either 0.0 or -0.0."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:543
msgid "G_FMAXNUM"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:545
msgid "Perform floating-point maximum on two values."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:550
msgid "The return value of (FMAXNUM 0.0, -0.0) could be either 0.0 or -0.0."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:553
msgid "G_FMINNUM_IEEE"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:555
msgid ""
"Perform floating-point minimum on two values, following IEEE-754 "
"definitions. This differs from FMINNUM in the handling of signaling NaNs."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:559
#: ../../../GlobalISel/GenericOpcode.rst:574
msgid ""
"If one input is a signaling NaN, returns a quiet NaN. This matches IEEE-754 "
"2008's minnum/maxnum for signaling NaNs (which differs from 2019)."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:563
#: ../../../GlobalISel/GenericOpcode.rst:578
msgid ""
"These treat -0 as ordered less than +0, matching the behavior of IEEE-754 "
"2019's minimumNumber/maximumNumber (which was unspecified in 2008)."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:568
msgid "G_FMAXNUM_IEEE"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:570
msgid ""
"Perform floating-point maximum on two values, following IEEE-754 "
"definitions. This differs from FMAXNUM in the handling of signaling NaNs."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:583
msgid "G_FMINIMUM"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:585
msgid ""
"NaN-propagating minimum that also treat -0.0 as less than 0.0. While "
"FMINNUM_IEEE follow IEEE 754-2008 semantics, FMINIMUM follows IEEE 754-2019 "
"semantics."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:590
msgid "G_FMAXIMUM"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:592
msgid ""
"NaN-propagating maximum that also treat -0.0 as less than 0.0. While "
"FMAXNUM_IEEE follow IEEE 754-2008 semantics, FMAXIMUM follows IEEE 754-2019 "
"semantics."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:597
msgid "G_FADD, G_FSUB, G_FMUL, G_FDIV, G_FREM"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:599
msgid "Perform the specified floating point arithmetic."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:602
msgid "G_FMA"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:604
msgid ""
"Perform a fused multiply add (i.e. without the intermediate rounding step)."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:607
msgid "G_FMAD"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:609
msgid ""
"Perform a non-fused multiply add (i.e. with the intermediate rounding step)."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:612
msgid "G_FPOW"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:614
msgid "Raise the first operand to the power of the second."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:617
msgid "G_FEXP, G_FEXP2"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:619
msgid "Calculate the base-e or base-2 exponential of a value"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:622
msgid "G_FLOG, G_FLOG2, G_FLOG10"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:624
msgid "Calculate the base-e, base-2, or base-10 respectively."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:627
msgid "G_FCEIL, G_FSQRT, G_FFLOOR, G_FRINT, G_FNEARBYINT"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:629
msgid "These correspond to the standard C functions of the same name."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:632
msgid ""
"G_FCOS, G_FSIN, G_FTAN, G_FACOS, G_FASIN, G_FATAN, G_FCOSH, G_FSINH, G_FTANH"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:634
msgid ""
"These correspond to the standard C trigonometry functions of the same name."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:637
msgid "G_INTRINSIC_TRUNC"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:639
msgid ""
"Returns the operand rounded to the nearest integer not larger in magnitude "
"than the operand."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:642
msgid "G_INTRINSIC_ROUND"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:644
msgid "Returns the operand rounded to the nearest integer."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:647
msgid "G_LROUND, G_LLROUND"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:649
msgid ""
"Returns the source operand rounded to the nearest integer with ties away "
"from zero."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:652
msgid ""
"See the LLVM LangRef entry on '``llvm.lround.*'`` for details on behaviour."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:660
msgid "Vector Specific Operations"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:663
msgid "G_VSCALE"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:665
msgid ""
"Puts the value of the runtime ``vscale`` multiplied by the value in the "
"source operand into the destination register. This can be useful in "
"determining the actual runtime number of elements in a vector."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:674
msgid "G_INSERT_SUBVECTOR"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:676
msgid ""
"Insert the second source vector into the first source vector. The index "
"operand represents the starting index in the first source vector at which "
"the second source vector should be inserted into."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:680
msgid ""
"The index must be a constant multiple of the second source vector's minimum "
"vector length. If the vectors are scalable, then the index is first scaled "
"by the runtime scaling factor. The indices inserted in the source vector "
"must be valid indices of that vector. If this condition cannot be determined "
"statically but is false at runtime, then the result vector is undefined."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:691
msgid "G_EXTRACT_SUBVECTOR"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:693
msgid ""
"Extract a vector of destination type from the source vector. The index "
"operand represents the starting index from which a subvector is extracted "
"from the source vector."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:697
msgid ""
"The index must be a constant multiple of the source vector's minimum vector "
"length. If the source vector is a scalable vector, then the index is first "
"scaled by the runtime scaling factor. The indices extracted from the source "
"vector must be valid indices of that vector. If this condition cannot be "
"determined statically but is false at runtime, then the result vector is "
"undefined."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:709
msgid "G_CONCAT_VECTORS"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:711
msgid "Concatenate two vectors to form a longer vector."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:714
msgid "G_BUILD_VECTOR, G_BUILD_VECTOR_TRUNC"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:716
msgid ""
"Create a vector from multiple scalar registers. No implicit conversion is "
"performed (i.e. the result element type must be the same as all source "
"operands)"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:720
msgid ""
"The _TRUNC version truncates the larger operand types to fit the destination "
"vector elt type."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:724
msgid "G_INSERT_VECTOR_ELT"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:726
msgid "Insert an element into a vector"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:729
msgid "G_EXTRACT_VECTOR_ELT"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:731
msgid "Extract an element from a vector"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:734
msgid "G_SHUFFLE_VECTOR"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:736
msgid ""
"Concatenate two vectors and shuffle the elements according to the mask "
"operand. The mask operand should be an IR Constant which exactly matches the "
"corresponding mask for the IR shufflevector instruction."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:741
msgid "G_SPLAT_VECTOR"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:743
msgid ""
"Create a vector where all elements are the scalar from the source operand."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:745
msgid ""
"The type of the operand must be equal to or larger than the vector element "
"type. If the operand is larger than the vector element type, the scalar is "
"implicitly truncated to the vector element type."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:750
msgid "G_VECTOR_COMPRESS"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:752
msgid ""
"Given an input vector, a mask vector, and a passthru vector, continuously "
"place all selected (i.e., where mask[i] = true) input lanes in an output "
"vector. All remaining lanes in the output are taken from passthru, which may "
"be undef."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:757
msgid "Vector Reduction Operations"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:759
msgid ""
"These operations represent horizontal vector reduction, producing a scalar "
"result."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:762
msgid "G_VECREDUCE_SEQ_FADD, G_VECREDUCE_SEQ_FMUL"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:764
msgid ""
"The SEQ variants perform reductions in sequential order. The first operand "
"is an initial scalar accumulator value, and the second operand is the vector "
"to reduce."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:768
msgid "G_VECREDUCE_FADD, G_VECREDUCE_FMUL"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:770
msgid ""
"These reductions are relaxed variants which may reduce the elements in any "
"order."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:773
msgid ""
"G_VECREDUCE_FMAX, G_VECREDUCE_FMIN, G_VECREDUCE_FMAXIMUM, "
"G_VECREDUCE_FMINIMUM"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:775
msgid ""
"FMIN/FMAX/FMINIMUM/FMAXIMUM nodes can have flags, for NaN/NoNaN variants."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:779
msgid "Integer/bitwise reductions"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:781
msgid "G_VECREDUCE_ADD"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:782
msgid "G_VECREDUCE_MUL"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:783
msgid "G_VECREDUCE_AND"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:784
msgid "G_VECREDUCE_OR"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:785
msgid "G_VECREDUCE_XOR"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:786
msgid "G_VECREDUCE_SMAX"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:787
msgid "G_VECREDUCE_SMIN"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:788
msgid "G_VECREDUCE_UMAX"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:789
msgid "G_VECREDUCE_UMIN"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:791
msgid ""
"Integer reductions may have a result type larger than the vector element "
"type. However, the reduction is performed using the vector element type and "
"the value in the top bits is unspecified."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:796
msgid "Memory Operations"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:799
msgid "G_LOAD, G_SEXTLOAD, G_ZEXTLOAD"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:801
msgid ""
"Generic load. Expects a MachineMemOperand in addition to explicit operands. "
"If the result size is larger than the memory size, the high bits are "
"undefined, sign-extended, or zero-extended respectively."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:805
msgid ""
"Only G_LOAD is valid if the result is a vector type. If the result is larger "
"than the memory size, the high elements are undefined (i.e. this is not a "
"per-element, vector anyextload)"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:809
msgid ""
"Unlike in SelectionDAG, atomic loads are expressed with the same opcodes as "
"regular loads. G_LOAD, G_SEXTLOAD and G_ZEXTLOAD may all have atomic memory "
"operands."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:814
msgid "G_INDEXED_LOAD"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:816
msgid ""
"Generic indexed load. Combines a GEP with a load. $newaddr is set to $base + "
"$offset. If $am is 0 (post-indexed), then the value is loaded from $base; if "
"$am is 1 (pre-indexed) then the value is loaded from $newaddr."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:821
msgid "G_INDEXED_SEXTLOAD"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:823
msgid ""
"Same as G_INDEXED_LOAD except that the load performed is sign-extending, as "
"with G_SEXTLOAD."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:826
msgid "G_INDEXED_ZEXTLOAD"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:828
msgid ""
"Same as G_INDEXED_LOAD except that the load performed is zero-extending, as "
"with G_ZEXTLOAD."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:831
msgid "G_STORE"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:833
msgid ""
"Generic store. Expects a MachineMemOperand in addition to explicit operands. "
"If the stored value size is greater than the memory size, the high bits are "
"implicitly truncated. If this is a vector store, the high elements are "
"discarded (i.e. this does not function as a per-lane vector, truncating "
"store)"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:840
msgid "G_INDEXED_STORE"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:842
msgid ""
"Combines a store with a GEP. See description of G_INDEXED_LOAD for indexing "
"behaviour."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:845
msgid "G_ATOMIC_CMPXCHG_WITH_SUCCESS"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:847
msgid ""
"Generic atomic cmpxchg with internal success check. Expects a "
"MachineMemOperand in addition to explicit operands."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:851
msgid "G_ATOMIC_CMPXCHG"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:853
msgid ""
"Generic atomic cmpxchg. Expects a MachineMemOperand in addition to explicit "
"operands."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:857
msgid "|all_g_atomicrmw|"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:868
msgid ""
"Generic atomicrmw. Expects a MachineMemOperand in addition to explicit "
"operands."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:872
msgid "G_FENCE"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:874
msgid ""
"Generic fence. The first operand is the memory ordering. The second operand "
"is the syncscope."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:877
msgid ""
"See the LLVM LangRef entry on the '``fence'`` instruction for more details."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:880
msgid "G_MEMCPY"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:882
msgid ""
"Generic memcpy. Expects two MachineMemOperands covering the store and load "
"respectively, in addition to explicit operands."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:886
msgid "G_MEMCPY_INLINE"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:888
msgid ""
"Generic inlined memcpy. Like G_MEMCPY, but it is guaranteed that this "
"version will not be lowered as a call to an external function. Currently the "
"size operand is required to evaluate as a constant (not an immediate), "
"though that is expected to change when llvm.memcpy.inline is taught to "
"support dynamic sizes."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:894
msgid "G_MEMMOVE"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:896
msgid ""
"Generic memmove. Similar to G_MEMCPY, but the source and destination memory "
"ranges are allowed to overlap."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:900
msgid "G_MEMSET"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:902
msgid ""
"Generic memset. Expects a MachineMemOperand in addition to explicit operands."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:905
msgid "G_BZERO"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:907
msgid ""
"Generic bzero. Expects a MachineMemOperand in addition to explicit operands."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:910
msgid "Control Flow"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:913
msgid "G_PHI"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:915
msgid "Implement the φ node in the SSA graph representing the function."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:922
msgid "G_BR"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:924
msgid "Unconditional branch"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:931
msgid "G_BRCOND"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:933
msgid "Conditional branch"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:940
msgid "G_BRINDIRECT"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:942
msgid "Indirect branch"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:949
msgid "G_BRJT"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:951
msgid "Indirect branch to jump table entry"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:958
msgid "G_JUMP_TABLE"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:960
msgid ""
"Generates a pointer to the address of the jump table specified by the source "
"operand. The source operand is a jump table index. G_JUMP_TABLE can be used "
"in conjunction with G_BRJT to support jump table codegen with GlobalISel."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:969
msgid "The above example generates a pointer to the source jump table index."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:972
msgid "G_INVOKE_REGION_START"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:974
msgid ""
"A marker instruction that acts as a pseudo-terminator for regions of code "
"that may throw exceptions. Being a terminator, it prevents code from being "
"inserted after it during passes like legalization. This is needed because "
"calls to exception throw routines do not return, so no code that must be on "
"an executable path must be placed after throwing."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:981
msgid "G_INTRINSIC, G_INTRINSIC_CONVERGENT"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:983
msgid "Call an intrinsic that has no side-effects."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:985
#: ../../../GlobalISel/GenericOpcode.rst:998
msgid ""
"The _CONVERGENT variant corresponds to an LLVM IR intrinsic marked "
"`convergent`."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:989
#: ../../../GlobalISel/GenericOpcode.rst:1002
msgid ""
"Unlike SelectionDAG, there is no _VOID variant. Both of these are permitted "
"to have zero, one, or multiple results."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:993
msgid "G_INTRINSIC_W_SIDE_EFFECTS, G_INTRINSIC_CONVERGENT_W_SIDE_EFFECTS"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:995
msgid ""
"Call an intrinsic that is considered to have unknown side-effects and as "
"such cannot be reordered across other side-effecting instructions."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:1006
msgid "G_TRAP, G_DEBUGTRAP, G_UBSANTRAP"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:1008
msgid ""
"Represents :ref:`llvm.trap <llvm.trap>`, :ref:`llvm.debugtrap <llvm."
"debugtrap>` and :ref:`llvm.ubsantrap <llvm.ubsantrap>` that generate a "
"target dependent trap instructions."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:1025
msgid "Variadic Arguments"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:1028
msgid "G_VASTART"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:1032
#: ../../../GlobalISel/GenericOpcode.rst:1039
msgid "I found no documentation for this instruction at the time of writing."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:1035
msgid "G_VAARG"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:1042
msgid "Other Operations"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:1045
msgid "G_DYN_STACKALLOC"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:1047
msgid ""
"Dynamically realigns the stack pointer to the specified size and alignment. "
"An alignment value of `0` or `1` means no specific alignment."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:1055
msgid "Optimization Hints"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:1057
msgid ""
"These instructions do not correspond to any target instructions. They act as "
"hints for various combines."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:1061
msgid "G_ASSERT_SEXT, G_ASSERT_ZEXT"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:1063
msgid ""
"This signifies that the contents of a register were previously extended from "
"a smaller type."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:1066
msgid ""
"The smaller type is denoted using an immediate operand. For scalars, this is "
"the width of the entire smaller type. For vectors, this is the width of the "
"smaller element type."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:1077
msgid ""
"G_ASSERT_SEXT and G_ASSERT_ZEXT act like copies, albeit with some "
"restrictions."
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:1079
msgid "The source and destination registers must"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:1081
msgid "Be virtual"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:1082
msgid "Belong to the same register class"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:1083
msgid "Belong to the same register bank"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:1085
msgid "It should always be safe to"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:1087
msgid "Look through the source register"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:1088
msgid "Replace the destination register with the source register"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:1092
msgid "Miscellaneous"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:1095
msgid "G_CONSTANT_FOLD_BARRIER"
msgstr ""

#: ../../../GlobalISel/GenericOpcode.rst:1097
msgid ""
"This operation is used as an opaque barrier to prevent constant folding. "
"Combines and other transformations should not look through this. These have "
"no other semantics and can be safely eliminated if a target chooses."
msgstr ""
