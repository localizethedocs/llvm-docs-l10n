# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:12+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../PointerAuth.md:1
msgid "Pointer Authentication"
msgstr ""

#: ../../../PointerAuth.md:3
msgid "Introduction"
msgstr ""

#: ../../../PointerAuth.md:5
msgid ""
"Pointer Authentication is a mechanism by which certain pointers are signed. "
"When a pointer gets signed, a cryptographic hash of its value and other "
"values (pepper and salt) is stored in unused bits of that pointer."
msgstr ""

#: ../../../PointerAuth.md:9
msgid ""
"Before the pointer is used, it needs to be authenticated, i.e., have its "
"signature checked.  This prevents pointer values of unknown origin from "
"being used to replace the signed pointer value."
msgstr ""

#: ../../../PointerAuth.md:13
msgid ""
"At the IR level, it is represented using a set of intrinsics (to sign/"
"authenticate pointers)."
msgstr ""

#: ../../../PointerAuth.md:16
msgid ""
"The current implementation leverages the Armv8.3-A PAuth/Pointer "
"Authentication Code instructions in the AArch64 backend. This support is "
"used to implement the Darwin arm64e ABI, as well as the PAuth ABI Extension "
"to ELF."
msgstr ""

#: ../../../PointerAuth.md:23
msgid "LLVM IR Representation"
msgstr ""

#: ../../../PointerAuth.md:25
msgid "Intrinsics"
msgstr ""

#: ../../../PointerAuth.md:27
msgid ""
"These intrinsics are provided by LLVM to expose pointer authentication "
"operations."
msgstr ""

#: ../../../PointerAuth.md:31
msgid "'llvm.ptrauth.sign'"
msgstr ""

#: ../../../PointerAuth.md:33 ../../../PointerAuth.md:65
#: ../../../PointerAuth.md:93 ../../../PointerAuth.md:133
#: ../../../PointerAuth.md:168 ../../../PointerAuth.md:199
msgid "Syntax:"
msgstr ""

#: ../../../PointerAuth.md:39 ../../../PointerAuth.md:71
#: ../../../PointerAuth.md:99 ../../../PointerAuth.md:141
#: ../../../PointerAuth.md:174 ../../../PointerAuth.md:205
msgid "Overview:"
msgstr ""

#: ../../../PointerAuth.md:41
msgid "The 'llvm.ptrauth.sign' intrinsic signs a raw pointer."
msgstr ""

#: ../../../PointerAuth.md:44 ../../../PointerAuth.md:75
#: ../../../PointerAuth.md:105 ../../../PointerAuth.md:146
#: ../../../PointerAuth.md:179 ../../../PointerAuth.md:210
msgid "Arguments:"
msgstr ""

#: ../../../PointerAuth.md:46
msgid ""
"The value argument is the raw pointer value to be signed. The key argument "
"is the identifier of the key to be used to generate the signed value. The "
"discriminator argument is the additional diversity data to be used as a "
"discriminator (an integer, an address, or a blend of the two)."
msgstr ""

#: ../../../PointerAuth.md:52 ../../../PointerAuth.md:83
#: ../../../PointerAuth.md:111 ../../../PointerAuth.md:158
#: ../../../PointerAuth.md:185 ../../../PointerAuth.md:216
msgid "Semantics:"
msgstr ""

#: ../../../PointerAuth.md:54
msgid ""
"The 'llvm.ptrauth.sign' intrinsic implements the sign_ operation. It returns "
"a signed value."
msgstr ""

#: ../../../PointerAuth.md:57
msgid "If value is already a signed value, the behavior is undefined."
msgstr ""

#: ../../../PointerAuth.md:59
msgid ""
"If value is not a pointer value for which key is appropriate, the behavior "
"is undefined."
msgstr ""

#: ../../../PointerAuth.md:63
msgid "'llvm.ptrauth.auth'"
msgstr ""

#: ../../../PointerAuth.md:73
msgid "The 'llvm.ptrauth.auth' intrinsic authenticates a signed pointer."
msgstr ""

#: ../../../PointerAuth.md:77
msgid ""
"The value argument is the signed pointer value to be authenticated. The key "
"argument is the identifier of the key that was used to generate the signed "
"value. The discriminator argument is the additional diversity data to be "
"used as a discriminator."
msgstr ""

#: ../../../PointerAuth.md:85
msgid ""
"The 'llvm.ptrauth.auth' intrinsic implements the auth_ operation. It returns "
"a raw pointer value. If value does not have a correct signature for key and "
"discriminator, the intrinsic traps in a target-specific way."
msgstr ""

#: ../../../PointerAuth.md:91
msgid "'llvm.ptrauth.strip'"
msgstr ""

#: ../../../PointerAuth.md:101
msgid ""
"The 'llvm.ptrauth.strip' intrinsic strips the embedded signature out of a "
"possibly-signed pointer."
msgstr ""

#: ../../../PointerAuth.md:107
msgid ""
"The value argument is the signed pointer value to be stripped. The key "
"argument is the identifier of the key that was used to generate the signed "
"value."
msgstr ""

#: ../../../PointerAuth.md:113
msgid ""
"The 'llvm.ptrauth.strip' intrinsic implements the strip_ operation. It "
"returns a raw pointer value.  It does not check that the signature is valid."
msgstr ""

#: ../../../PointerAuth.md:117
msgid ""
"key should identify a key that is appropriate for value, as defined by the "
"target-specific keys)."
msgstr ""

#: ../../../PointerAuth.md:120
msgid ""
"If value is a raw pointer value, it is returned as-is (provided the key is "
"appropriate for the pointer)."
msgstr ""

#: ../../../PointerAuth.md:123
msgid ""
"If value is not a pointer value for which key is appropriate, the behavior "
"is target-specific."
msgstr ""

#: ../../../PointerAuth.md:126
msgid ""
"If value is a signed pointer value, but key does not identify the same key "
"that was used to generate value, the behavior is target-specific."
msgstr ""

#: ../../../PointerAuth.md:131
msgid "'llvm.ptrauth.resign'"
msgstr ""

#: ../../../PointerAuth.md:143
msgid ""
"The 'llvm.ptrauth.resign' intrinsic re-signs a signed pointer using a "
"different key and diversity data."
msgstr ""

#: ../../../PointerAuth.md:148
msgid ""
"The value argument is the signed pointer value to be authenticated. The old "
"key argument is the identifier of the key that was used to generate the "
"signed value. The old discriminator argument is the additional diversity "
"data to be used as a discriminator in the auth operation. The new key "
"argument is the identifier of the key to use to generate the resigned value. "
"The new discriminator argument is the additional diversity data to be used "
"as a discriminator in the sign operation."
msgstr ""

#: ../../../PointerAuth.md:160
msgid ""
"The 'llvm.ptrauth.resign' intrinsic performs a combined auth_ and sign_ "
"operation, without exposing the intermediate raw pointer. It returns a "
"signed pointer value. If value does not have a correct signature for old key "
"and old discriminator, the intrinsic traps in a target-specific way."
msgstr ""

#: ../../../PointerAuth.md:166
msgid "'llvm.ptrauth.sign_generic'"
msgstr ""

#: ../../../PointerAuth.md:176
msgid ""
"The 'llvm.ptrauth.sign_generic' intrinsic computes a generic signature of "
"arbitrary data."
msgstr ""

#: ../../../PointerAuth.md:181
msgid ""
"The value argument is the arbitrary data value to be signed. The "
"discriminator argument is the additional diversity data to be used as a "
"discriminator."
msgstr ""

#: ../../../PointerAuth.md:187
msgid ""
"The 'llvm.ptrauth.sign_generic' intrinsic computes the signature of a given "
"combination of value and additional diversity data."
msgstr ""

#: ../../../PointerAuth.md:190
msgid ""
"It returns a full signature value (as opposed to a signed pointer value, "
"with an embedded partial signature)."
msgstr ""

#: ../../../PointerAuth.md:193
msgid ""
"As opposed to llvm.ptrauth.sign, it does not interpret value as a pointer "
"value.  Instead, it is an arbitrary data value."
msgstr ""

#: ../../../PointerAuth.md:197
msgid "'llvm.ptrauth.blend'"
msgstr ""

#: ../../../PointerAuth.md:207
msgid ""
"The 'llvm.ptrauth.blend' intrinsic blends a pointer address discriminator "
"with a small integer discriminator to produce a new \"blended\" "
"discriminator."
msgstr ""

#: ../../../PointerAuth.md:212
msgid ""
"The address discriminator argument is a pointer value. The integer "
"discriminator argument is a small integer, as specified by the target."
msgstr ""

#: ../../../PointerAuth.md:218
msgid ""
"The 'llvm.ptrauth.blend' intrinsic combines a small integer discriminator "
"with a pointer address discriminator, in a way that is specified by the "
"target implementation."
msgstr ""

#: ../../../PointerAuth.md:223
msgid "AArch64 Support"
msgstr ""

#: ../../../PointerAuth.md:225
msgid ""
"AArch64 is currently the only architecture with full support of the pointer "
"authentication primitives, based on Armv8.3-A instructions."
msgstr ""

#: ../../../PointerAuth.md:228
msgid "Armv8.3-A PAuth Pointer Authentication Code"
msgstr ""

#: ../../../PointerAuth.md:230
msgid ""
"The Armv8.3-A architecture extension defines the PAuth feature, which "
"provides support for instructions that manipulate Pointer Authentication "
"Codes (PAC)."
msgstr ""

#: ../../../PointerAuth.md:233
msgid "Keys"
msgstr ""

#: ../../../PointerAuth.md:235
msgid "5 keys are supported by the PAuth feature."
msgstr ""

#: ../../../PointerAuth.md:237
msgid ""
"Of those, 4 keys are interchangeably usable to specify the key used in IR "
"constructs:"
msgstr ""

#: ../../../PointerAuth.md:239
msgid "ASIA/ASIB are instruction keys (encoded as respectively 0 and 1)."
msgstr ""

#: ../../../PointerAuth.md:240
msgid "ASDA/ASDB are data keys (encoded as respectively 2 and 3)."
msgstr ""

#: ../../../PointerAuth.md:242
msgid ""
"ASGA is a special key that cannot be explicitly specified, and is only ever "
"used implicitly, to implement the llvm.ptrauth.sign_generic intrinsic."
msgstr ""

#: ../../../PointerAuth.md:246
msgid "Instructions"
msgstr ""

#: ../../../PointerAuth.md:248
msgid "The IR Intrinsics described above map onto these instructions as such:"
msgstr ""

#: ../../../PointerAuth.md:250
msgid "llvm.ptrauth.sign: PAC{I,D}{A,B}{Z,SP,}"
msgstr ""

#: ../../../PointerAuth.md:251
msgid "llvm.ptrauth.auth: AUT{I,D}{A,B}{Z,SP,}"
msgstr ""

#: ../../../PointerAuth.md:252
msgid "llvm.ptrauth.strip: XPAC{I,D}"
msgstr ""

#: ../../../PointerAuth.md:253
msgid ""
"llvm.ptrauth.blend: The semantics of the blend operation are specified by "
"the ABI.  In both the ELF PAuth ABI Extension and arm64e, it's a MOVK into "
"the high 16 bits.  Consequently, this limits the width of the integer "
"discriminator used in blends to 16 bits."
msgstr ""

#: ../../../PointerAuth.md:257
msgid "llvm.ptrauth.sign_generic: PACGA"
msgstr ""

#: ../../../PointerAuth.md:258
msgid ""
"llvm.ptrauth.resign: AUT*+PAC*.  These are represented as a single pseudo-"
"instruction in the backend to guarantee that the intermediate raw pointer "
"value is not spilled and attackable."
msgstr ""
