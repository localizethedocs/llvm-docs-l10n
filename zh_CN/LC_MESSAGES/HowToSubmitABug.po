# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:14+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../HowToSubmitABug.rst:3
msgid "How to submit an LLVM bug report"
msgstr ""

#: ../../../HowToSubmitABug.rst:6
msgid "Introduction - Got bugs?"
msgstr ""

#: ../../../HowToSubmitABug.rst:9
msgid ""
"If you're working with LLVM and run into a bug, we definitely want to know "
"about it.  This document describes what you can do to increase the odds of "
"getting it fixed quickly."
msgstr ""

#: ../../../HowToSubmitABug.rst:13
msgid ""
"ðŸ”’ If you believe that the bug is security related, please follow :ref:"
"`report-security-issue`. ðŸ”’"
msgstr ""

#: ../../../HowToSubmitABug.rst:15
msgid ""
"Basically you have to do two things at a minimum. First, decide whether the "
"bug `crashes the compiler`_ or if the compiler is `miscompiling`_ the "
"program (i.e., the compiler successfully produces an executable, but it "
"doesn't run right). Based on what type of bug it is, follow the instructions "
"in the linked section to narrow down the bug so that the person who fixes it "
"will be able to find the problem more easily."
msgstr ""

#: ../../../HowToSubmitABug.rst:22
msgid ""
"Once you have a reduced test-case, go to `the LLVM Bug Tracking System "
"<https://bugs.llvm.org/enter_bug.cgi>`_ and fill out the form with the "
"necessary details (note that you don't need to pick a category, just use the "
"\"new-bugs\" category if you're not sure).  The bug description should "
"contain the following information:"
msgstr ""

#: ../../../HowToSubmitABug.rst:28
msgid "All information necessary to reproduce the problem."
msgstr ""

#: ../../../HowToSubmitABug.rst:29
msgid "The reduced test-case that triggers the bug."
msgstr ""

#: ../../../HowToSubmitABug.rst:30
msgid "The location where you obtained LLVM (if not from our Git repository)."
msgstr ""

#: ../../../HowToSubmitABug.rst:33
msgid "Thanks for helping us make LLVM better!"
msgstr ""

#: ../../../HowToSubmitABug.rst:38
msgid "Crashing Bugs"
msgstr ""

#: ../../../HowToSubmitABug.rst:40
msgid ""
"More often than not, bugs in the compiler cause it to crash---often due to "
"an assertion failure of some sort. The most important piece of the puzzle is "
"to figure out if it is crashing in the Clang front-end or if it is one of "
"the LLVM libraries (e.g. the optimizer or code generator) that has problems."
msgstr ""

#: ../../../HowToSubmitABug.rst:46
msgid ""
"To figure out which component is crashing (the front-end, middle-end "
"optimizer, or backend code generator), run the ``clang`` command line as you "
"were when the crash occurred, but with the following extra command line "
"options:"
msgstr ""

#: ../../../HowToSubmitABug.rst:51
msgid ""
"``-emit-llvm -Xclang -disable-llvm-passes``: If ``clang`` still crashes when "
"passed these options (which disable the optimizer and code generator), then "
"the crash is in the front-end. Jump ahead to :ref:`front-end bugs <frontend-"
"crash>`."
msgstr ""

#: ../../../HowToSubmitABug.rst:56
msgid ""
"``-emit-llvm``: If ``clang`` crashes with this option (which disables the "
"code generator), you found a middle-end optimizer bug. Jump ahead to :ref:"
"`middle-end bugs <middleend-crash>`."
msgstr ""

#: ../../../HowToSubmitABug.rst:60
msgid ""
"Otherwise, you have a backend code generator crash. Jump ahead to :ref:`code "
"generator bugs <backend-crash>`."
msgstr ""

#: ../../../HowToSubmitABug.rst:66
msgid "Front-end bugs"
msgstr ""

#: ../../../HowToSubmitABug.rst:68
msgid ""
"On a ``clang`` crash, the compiler will dump a preprocessed file and a "
"script to replay the ``clang`` command. For example, you should see "
"something like"
msgstr ""

#: ../../../HowToSubmitABug.rst:78
msgid ""
"The `creduce <https://github.com/csmith-project/creduce>`_ tool helps to "
"reduce the preprocessed file down to the smallest amount of code that still "
"replicates the problem. You're encouraged to use creduce to reduce the code "
"to make the developers' lives easier. The ``clang/utils/creduce-clang-crash."
"py`` script can be used on the files that clang dumps to help with "
"automating creating a test to check for the compiler crash."
msgstr ""

#: ../../../HowToSubmitABug.rst:86
msgid ""
"`cvise <https://github.com/marxin/cvise>`_ is an alternative to ``creduce``."
msgstr ""

#: ../../../HowToSubmitABug.rst:91
msgid "Middle-end optimization bugs"
msgstr ""

#: ../../../HowToSubmitABug.rst:93
msgid ""
"If you find that a bug crashes in the optimizer, compile your test-case to a "
"``.bc`` file by passing \"``-emit-llvm -O1 -Xclang -disable-llvm-passes -c -"
"o foo.bc``\". The ``-O1`` is important because ``-O0`` adds the ``optnone`` "
"function attribute to all functions and many passes don't run on ``optnone`` "
"functions. Then run:"
msgstr ""

#: ../../../HowToSubmitABug.rst:103
msgid ""
"If this doesn't crash, please follow the instructions for a :ref:`front-end "
"bug <frontend-crash>`."
msgstr ""

#: ../../../HowToSubmitABug.rst:106
msgid ""
"If this does crash, then you should be able to debug this with the "
"following :doc:`bugpoint <Bugpoint>` command:"
msgstr ""

#: ../../../HowToSubmitABug.rst:113
msgid ""
"Run this, then file a bug with the instructions and reduced .bc files that "
"bugpoint emits."
msgstr ""

#: ../../../HowToSubmitABug.rst:116
msgid ""
"If bugpoint doesn't reproduce the crash, ``llvm-reduce`` is an alternative "
"way to reduce LLVM IR. Create a script that repros the crash and run:"
msgstr ""

#: ../../../HowToSubmitABug.rst:123
msgid ""
"which should produce reduced IR that reproduces the crash. Be warned the "
"``llvm-reduce`` is still fairly immature and may crash."
msgstr ""

#: ../../../HowToSubmitABug.rst:126
msgid ""
"If none of the above work, you can get the IR before a crash by running the "
"``opt`` command with the ``--print-before-all --print-module-scope`` flags "
"to dump the IR before every pass. Be warned that this is very verbose."
msgstr ""

#: ../../../HowToSubmitABug.rst:133
msgid "Backend code generator bugs"
msgstr ""

#: ../../../HowToSubmitABug.rst:135
msgid ""
"If you find a bug that crashes clang in the code generator, compile your "
"source file to a .bc file by passing \"``-emit-llvm -c -o foo.bc``\" to "
"clang (in addition to the options you already pass).  Once your have foo.bc, "
"one of the following commands should fail:"
msgstr ""

#: ../../../HowToSubmitABug.rst:140
msgid "``llc foo.bc``"
msgstr ""

#: ../../../HowToSubmitABug.rst:141
msgid "``llc foo.bc -relocation-model=pic``"
msgstr ""

#: ../../../HowToSubmitABug.rst:142
msgid "``llc foo.bc -relocation-model=static``"
msgstr ""

#: ../../../HowToSubmitABug.rst:144
msgid ""
"If none of these crash, please follow the instructions for a :ref:`front-end "
"bug<frontend-crash>`. If one of these do crash, you should be able to reduce "
"this with one of the following :doc:`bugpoint <Bugpoint>` command lines (use "
"the one corresponding to the command above that failed):"
msgstr ""

#: ../../../HowToSubmitABug.rst:149
msgid "``bugpoint -run-llc foo.bc``"
msgstr ""

#: ../../../HowToSubmitABug.rst:150
msgid "``bugpoint -run-llc foo.bc --tool-args -relocation-model=pic``"
msgstr ""

#: ../../../HowToSubmitABug.rst:151
msgid "``bugpoint -run-llc foo.bc --tool-args -relocation-model=static``"
msgstr ""

#: ../../../HowToSubmitABug.rst:153
msgid ""
"Please run this, then file a bug with the instructions and reduced .bc file "
"that bugpoint emits.  If something goes wrong with bugpoint, please submit "
"the \"foo.bc\" file and the option that llc crashes with."
msgstr ""

#: ../../../HowToSubmitABug.rst:160
msgid "Miscompilations"
msgstr ""

#: ../../../HowToSubmitABug.rst:162
msgid ""
"If clang successfully produces an executable, but that executable doesn't "
"run right, this is either a bug in the code or a bug in the compiler. The "
"first thing to check is to make sure it is not using undefined behavior (e."
"g. reading a variable before it is defined). In particular, check to see if "
"the program is clean under various `sanitizers <https://github.com/google/"
"sanitizers>`_ (e.g. ``clang -fsanitize=undefined,address``) and `valgrind "
"<http://valgrind.org/>`_. Many \"LLVM bugs\" that we have chased down ended "
"up being bugs in the program being compiled, not LLVM."
msgstr ""

#: ../../../HowToSubmitABug.rst:172
msgid ""
"Once you determine that the program itself is not buggy, you should choose "
"which code generator you wish to compile the program with (e.g. LLC or the "
"JIT) and optionally a series of LLVM passes to run.  For example:"
msgstr ""

#: ../../../HowToSubmitABug.rst:180
msgid ""
"bugpoint will try to narrow down your list of passes to the one pass that "
"causes an error, and simplify the bitcode file as much as it can to assist "
"you. It will print a message letting you know how to reproduce the resulting "
"error."
msgstr ""

#: ../../../HowToSubmitABug.rst:185
msgid ""
"The :doc:`OptBisect <OptBisect>` page shows an alternative method for "
"finding incorrect optimization passes."
msgstr ""

#: ../../../HowToSubmitABug.rst:189
msgid "Incorrect code generation"
msgstr ""

#: ../../../HowToSubmitABug.rst:191
msgid ""
"Similarly to debugging incorrect compilation by mis-behaving passes, you can "
"debug incorrect code generation by either LLC or the JIT, using "
"``bugpoint``. The process ``bugpoint`` follows in this case is to try to "
"narrow the code down to a function that is miscompiled by one or the other "
"method, but since for correctness, the entire program must be run, "
"``bugpoint`` will compile the code it deems to not be affected with the C "
"Backend, and then link in the shared object it generates."
msgstr ""

#: ../../../HowToSubmitABug.rst:199
msgid "To debug the JIT:"
msgstr ""

#: ../../../HowToSubmitABug.rst:207
msgid "Similarly, to debug the LLC, one would run:"
msgstr ""

#: ../../../HowToSubmitABug.rst:215
msgid ""
"**Special note:** if you are debugging MultiSource or SPEC tests that "
"already exist in the ``llvm/test`` hierarchy, there is an easier way to "
"debug the JIT, LLC, and CBE, using the pre-written Makefile targets, which "
"will pass the program options specified in the Makefiles:"
msgstr ""

#: ../../../HowToSubmitABug.rst:225
msgid ""
"At the end of a successful ``bugpoint`` run, you will be presented with two "
"bitcode files: a *safe* file which can be compiled with the C backend and "
"the *test* file which either LLC or the JIT mis-codegenerates, and thus "
"causes the error."
msgstr ""

#: ../../../HowToSubmitABug.rst:230
msgid ""
"To reproduce the error that ``bugpoint`` found, it is sufficient to do the "
"following:"
msgstr ""

#: ../../../HowToSubmitABug.rst:233
msgid "Regenerate the shared object from the safe bitcode file:"
msgstr ""

#: ../../../HowToSubmitABug.rst:240
msgid ""
"If debugging LLC, compile test bitcode native and link with the shared "
"object:"
msgstr ""

#: ../../../HowToSubmitABug.rst:249
msgid ""
"If debugging the JIT, load the shared object and supply the test bitcode:"
msgstr ""
