# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:12+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../GettingStartedVS.rst:3
msgid "Getting Started with the LLVM System using Microsoft Visual Studio"
msgstr ""

#: ../../../GettingStartedVS.rst:10
msgid "Overview"
msgstr ""

#: ../../../GettingStartedVS.rst:11
msgid ""
"Welcome to LLVM on Windows! This document only covers LLVM on Windows using "
"Visual Studio, not mingw or cygwin. In order to get started, you first need "
"to know some basic information."
msgstr ""

#: ../../../GettingStartedVS.rst:15
msgid ""
"There are many different projects that compose LLVM. The first piece is the "
"LLVM suite. This contains all of the tools, libraries, and header files "
"needed to use LLVM. It contains an assembler, disassembler, bitcode analyzer "
"and bitcode optimizer. It also contains basic regression tests that can be "
"used to test the LLVM tools and the Clang front end."
msgstr ""

#: ../../../GettingStartedVS.rst:21
msgid ""
"The second piece is the `Clang <https://clang.llvm.org/>`_ front end.  This "
"component compiles C, C++, Objective C, and Objective C++ code into LLVM "
"bitcode. Clang typically uses LLVM libraries to optimize the bitcode and "
"emit machine code. LLVM fully supports the COFF object file format, which is "
"compatible with all other existing Windows toolchains."
msgstr ""

#: ../../../GettingStartedVS.rst:27
msgid ""
"The last major part of LLVM, the execution Test Suite, does not run on "
"Windows, and this document does not discuss it."
msgstr ""

#: ../../../GettingStartedVS.rst:30
msgid ""
"Additional information about the LLVM directory structure and tool chain can "
"be found on the main :doc:`GettingStarted` page."
msgstr ""

#: ../../../GettingStartedVS.rst:35
msgid "Requirements"
msgstr ""

#: ../../../GettingStartedVS.rst:36
msgid ""
"Before you begin to use the LLVM system, review the requirements given "
"below.  This may save you some trouble by knowing ahead of time what "
"hardware and software you will need."
msgstr ""

#: ../../../GettingStartedVS.rst:41
msgid "Hardware"
msgstr ""

#: ../../../GettingStartedVS.rst:42
msgid ""
"Any system that can adequately run Visual Studio 2017 is fine. The LLVM "
"source tree and object files, libraries and executables will consume "
"approximately 3GB."
msgstr ""

#: ../../../GettingStartedVS.rst:47
msgid "Software"
msgstr ""

#: ../../../GettingStartedVS.rst:48
msgid ""
"You will need Visual Studio 2017 or higher, with the latest Update installed."
msgstr ""

#: ../../../GettingStartedVS.rst:50
msgid ""
"You will also need the `CMake <http://www.cmake.org/>`_ build system since "
"it generates the project files you will use to build with."
msgstr ""

#: ../../../GettingStartedVS.rst:53
msgid ""
"If you would like to run the LLVM tests you will need `Python <http://www."
"python.org/>`_. Version 3.6 and newer are known to work. You will need "
"`GnuWin32 <http://gnuwin32.sourceforge.net/>`_ tools, too."
msgstr ""

#: ../../../GettingStartedVS.rst:57
msgid ""
"Do not install the LLVM directory tree into a path containing spaces (e.g. "
"``C:\\Documents and Settings\\...``) as the configure step will fail."
msgstr ""

#: ../../../GettingStartedVS.rst:62
msgid "Getting Started"
msgstr ""

#: ../../../GettingStartedVS.rst:63
msgid "Here's the short story for getting up and running quickly with LLVM:"
msgstr ""

#: ../../../GettingStartedVS.rst:65
msgid "Read the documentation."
msgstr ""

#: ../../../GettingStartedVS.rst:66
msgid "Seriously, read the documentation."
msgstr ""

#: ../../../GettingStartedVS.rst:67
msgid "Remember that you were warned twice about reading the documentation."
msgstr ""

#: ../../../GettingStartedVS.rst:68
msgid "Get the Source Code"
msgstr ""

#: ../../../GettingStartedVS.rst:70
msgid "With the distributed files:"
msgstr ""

#: ../../../GettingStartedVS.rst:72 ../../../GettingStartedVS.rst:81
msgid "``cd <where-you-want-llvm-to-live>``"
msgstr ""

#: ../../../GettingStartedVS.rst:73
msgid "``gunzip --stdout llvm-VERSION.tar.gz | tar -xvf -`` (*or use WinZip*)"
msgstr ""

#: ../../../GettingStartedVS.rst:75 ../../../GettingStartedVS.rst:83
msgid "``cd llvm``"
msgstr ""

#: ../../../GettingStartedVS.rst:77
msgid "With git access:"
msgstr ""

#: ../../../GettingStartedVS.rst:79
msgid "*Note:* some regression tests require Unix-style line ending (``\\n``)."
msgstr ""

#: ../../../GettingStartedVS.rst:82
msgid "``git clone https://github.com/llvm/llvm-project.git llvm``"
msgstr ""

#: ../../../GettingStartedVS.rst:85
msgid ""
"Use `CMake <http://www.cmake.org/>`_ to generate up-to-date project files:"
msgstr ""

#: ../../../GettingStartedVS.rst:87
msgid ""
"Once CMake is installed then the simplest way is to just start the CMake "
"GUI, select the directory where you have LLVM extracted to, and the default "
"options should all be fine.  One option you may really want to change, "
"regardless of anything else, might be the ``CMAKE_INSTALL_PREFIX`` setting "
"to select a directory to INSTALL to once compiling is complete, although "
"installation is not mandatory for using LLVM.  Another important option is "
"``LLVM_TARGETS_TO_BUILD``, which controls the LLVM target architectures that "
"are included on the build."
msgstr ""

#: ../../../GettingStartedVS.rst:96
msgid ""
"If CMake complains that it cannot find the compiler, make sure that you have "
"the Visual Studio C++ Tools installed, not just Visual Studio itself (trying "
"to create a C++ project in Visual Studio will generally download the C++ "
"tools if they haven't already been)."
msgstr ""

#: ../../../GettingStartedVS.rst:100
msgid ""
"See the :doc:`LLVM CMake guide <CMake>` for detailed information about how "
"to configure the LLVM build."
msgstr ""

#: ../../../GettingStartedVS.rst:102
msgid ""
"CMake generates project files for all build types. To select a specific "
"build type, use the Configuration manager from the VS IDE or the ``/property:"
"Configuration`` command line option when using MSBuild."
msgstr ""

#: ../../../GettingStartedVS.rst:105
msgid ""
"By default, the Visual Studio project files generated by CMake use the 32-"
"bit toolset. If you are developing on a 64-bit version of Windows and want "
"to use the 64-bit toolset, pass the ``-Thost=x64`` flag when generating the "
"Visual Studio solution. This requires CMake 3.8.0 or later."
msgstr ""

#: ../../../GettingStartedVS.rst:110
msgid "Start Visual Studio"
msgstr ""

#: ../../../GettingStartedVS.rst:112
msgid ""
"In the directory you created the project files will have an ``llvm.sln`` "
"file, just double-click on that to open Visual Studio."
msgstr ""

#: ../../../GettingStartedVS.rst:115
msgid "Build the LLVM Suite:"
msgstr ""

#: ../../../GettingStartedVS.rst:117
msgid ""
"The projects may still be built individually, but to build them all do not "
"just select all of them in batch build (as some are meant as configuration "
"projects), but rather select and build just the ``ALL_BUILD`` project to "
"build everything, or the ``INSTALL`` project, which first builds the "
"``ALL_BUILD`` project, then installs the LLVM headers, libs, and other "
"useful things to the directory set by the ``CMAKE_INSTALL_PREFIX`` setting "
"when you first configured CMake."
msgstr ""

#: ../../../GettingStartedVS.rst:124
msgid ""
"The Fibonacci project is a sample program that uses the JIT. Modify the "
"project's debugging properties to provide a numeric command line argument or "
"run it from the command line.  The program will print the corresponding "
"fibonacci value."
msgstr ""

#: ../../../GettingStartedVS.rst:129
msgid "Test LLVM in Visual Studio:"
msgstr ""

#: ../../../GettingStartedVS.rst:131
msgid ""
"If ``%PATH%`` does not contain GnuWin32, you may specify "
"``LLVM_LIT_TOOLS_DIR`` on CMake for the path to GnuWin32."
msgstr ""

#: ../../../GettingStartedVS.rst:133
msgid ""
"You can run LLVM tests by merely building the project \"check\". The test "
"results will be shown in the VS output window."
msgstr ""

#: ../../../GettingStartedVS.rst:136
msgid "Test LLVM on the command line:"
msgstr ""

#: ../../../GettingStartedVS.rst:138
msgid ""
"The LLVM tests can be run by changing directory to the llvm source directory "
"and running:"
msgstr ""

#: ../../../GettingStartedVS.rst:145
msgid ""
"This example assumes that Python is in your PATH variable, you have built a "
"Win32 Debug version of llvm with a standard out of line build. You should "
"not see any unexpected failures, but will see many unsupported tests and "
"expected failures."
msgstr ""

#: ../../../GettingStartedVS.rst:150
msgid "A specific test or test directory can be run with:"
msgstr ""

#: ../../../GettingStartedVS.rst:158
msgid "An Example Using the LLVM Tool Chain"
msgstr ""

#: ../../../GettingStartedVS.rst:160
msgid "First, create a simple C file, name it '``hello.c``':"
msgstr ""

#: ../../../GettingStartedVS.rst:170
msgid "Next, compile the C file into an LLVM bitcode file:"
msgstr ""

#: ../../../GettingStartedVS.rst:176
msgid ""
"This will create the result file ``hello.bc`` which is the LLVM bitcode that "
"corresponds the compiled program and the library facilities that it "
"required.  You can execute this file directly using ``lli`` tool, compile it "
"to native assembly with the ``llc``, optimize or analyze it further with the "
"``opt`` tool, etc."
msgstr ""

#: ../../../GettingStartedVS.rst:182
msgid "Alternatively you can directly output an executable with clang with:"
msgstr ""

#: ../../../GettingStartedVS.rst:188
msgid ""
"The ``-o hello.exe`` is required because clang currently outputs ``a.out`` "
"when neither ``-o`` nor ``-c`` are given."
msgstr ""

#: ../../../GettingStartedVS.rst:191
msgid "Run the program using the just-in-time compiler:"
msgstr ""

#: ../../../GettingStartedVS.rst:197
msgid "Use the ``llvm-dis`` utility to take a look at the LLVM assembly code:"
msgstr ""

#: ../../../GettingStartedVS.rst:203
msgid "Compile the program to object code using the LLC code generator:"
msgstr ""

#: ../../../GettingStartedVS.rst:209
msgid "Link to binary using Microsoft link:"
msgstr ""

#: ../../../GettingStartedVS.rst:215
msgid "Execute the native code program:"
msgstr ""

#: ../../../GettingStartedVS.rst:223
msgid "Common Problems"
msgstr ""

#: ../../../GettingStartedVS.rst:224
msgid ""
"If you are having problems building or using LLVM, or if you have any other "
"general questions about LLVM, please consult the :doc:`Frequently Asked "
"Questions <FAQ>` page."
msgstr ""

#: ../../../GettingStartedVS.rst:230
msgid "Links"
msgstr ""

#: ../../../GettingStartedVS.rst:231
msgid ""
"This document is just an **introduction** to how to use LLVM to do some "
"simple things... there are many more interesting and complicated things that "
"you can do that aren't documented here (but we'll gladly accept a patch if "
"you want to write something up!).  For more information about LLVM, check "
"out:"
msgstr ""

#: ../../../GettingStartedVS.rst:236
msgid "`LLVM homepage <https://llvm.org/>`_"
msgstr ""

#: ../../../GettingStartedVS.rst:237
msgid "`LLVM doxygen tree <https://llvm.org/doxygen/>`_"
msgstr ""
