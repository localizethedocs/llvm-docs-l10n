# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../HowToBuildWithPGO.rst:3
msgid "How To Build Clang and LLVM with Profile-Guided Optimizations"
msgstr ""

#: ../../../HowToBuildWithPGO.rst:6
msgid "Introduction"
msgstr ""

#: ../../../HowToBuildWithPGO.rst:8
msgid ""
"PGO (Profile-Guided Optimization) allows your compiler to better optimize "
"code for how it actually runs. Users report that applying this to Clang and "
"LLVM can decrease overall compile time by 20%."
msgstr ""

#: ../../../HowToBuildWithPGO.rst:12
msgid ""
"This guide walks you through how to build Clang with PGO, though it also "
"applies to other subprojects, such as LLD."
msgstr ""

#: ../../../HowToBuildWithPGO.rst:17
msgid "Using the script"
msgstr ""

#: ../../../HowToBuildWithPGO.rst:19
msgid ""
"We have a script at ``utils/collect_and_build_with_pgo.py``. This script is "
"tested on a few Linux flavors, and requires a checkout of LLVM, Clang, and "
"compiler-rt. Despite the the name, it performs four clean builds of Clang, "
"so it can take a while to run to completion. Please see the script's ``--"
"help`` for more information on how to run it, and the different options "
"available to you. If you want to get the most out of PGO for a particular "
"use-case (e.g. compiling a specific large piece of software), please do read "
"the section below on 'benchmark' selection."
msgstr ""

#: ../../../HowToBuildWithPGO.rst:28
msgid ""
"Please note that this script is only tested on a few Linux distros. Patches "
"to add support for other platforms, as always, are highly appreciated. :)"
msgstr ""

#: ../../../HowToBuildWithPGO.rst:31
msgid ""
"This script also supports a ``--dry-run`` option, which causes it to print "
"important commands instead of running them."
msgstr ""

#: ../../../HowToBuildWithPGO.rst:36
msgid "Selecting 'benchmarks'"
msgstr ""

#: ../../../HowToBuildWithPGO.rst:38
msgid ""
"PGO does best when the profiles gathered represent how the user plans to use "
"the compiler. Notably, highly accurate profiles of llc building x86_64 code "
"aren't incredibly helpful if you're going to be targeting ARM."
msgstr ""

#: ../../../HowToBuildWithPGO.rst:42
msgid "By default, the script above does two things to get solid coverage. It:"
msgstr ""

#: ../../../HowToBuildWithPGO.rst:44
msgid "runs all of Clang and LLVM's lit tests, and"
msgstr ""

#: ../../../HowToBuildWithPGO.rst:45
msgid ""
"uses the instrumented Clang to build Clang, LLVM, and all of the other LLVM "
"subprojects available to it."
msgstr ""

#: ../../../HowToBuildWithPGO.rst:48
msgid "Together, these should give you:"
msgstr ""

#: ../../../HowToBuildWithPGO.rst:50
msgid "solid coverage of building C++,"
msgstr ""

#: ../../../HowToBuildWithPGO.rst:51
msgid "good coverage of building C,"
msgstr ""

#: ../../../HowToBuildWithPGO.rst:52
msgid "great coverage of running optimizations,"
msgstr ""

#: ../../../HowToBuildWithPGO.rst:53
msgid "great coverage of the backend for your host's architecture, and"
msgstr ""

#: ../../../HowToBuildWithPGO.rst:54
msgid ""
"some coverage of other architectures (if other arches are supported "
"backends)."
msgstr ""

#: ../../../HowToBuildWithPGO.rst:56
msgid ""
"Altogether, this should cover a diverse set of uses for Clang and LLVM. If "
"you have very specific needs (e.g. your compiler is meant to compile a large "
"browser for four different platforms, or similar), you may want to do "
"something else. This is configurable in the script itself."
msgstr ""

#: ../../../HowToBuildWithPGO.rst:63
msgid "Building Clang with PGO"
msgstr ""

#: ../../../HowToBuildWithPGO.rst:65
msgid ""
"If you prefer to not use the script, this briefly goes over how to build "
"Clang/LLVM with PGO."
msgstr ""

#: ../../../HowToBuildWithPGO.rst:68
msgid ""
"First, you should have at least LLVM, Clang, and compiler-rt checked out "
"locally."
msgstr ""

#: ../../../HowToBuildWithPGO.rst:71
msgid "Next, at a high level, you're going to need to do the following:"
msgstr ""

#: ../../../HowToBuildWithPGO.rst:73
msgid ""
"Build a standard Release Clang and the relevant libclang_rt.profile library"
msgstr ""

#: ../../../HowToBuildWithPGO.rst:74
msgid "Build Clang using the Clang you built above, but with instrumentation"
msgstr ""

#: ../../../HowToBuildWithPGO.rst:75
msgid ""
"Use the instrumented Clang to generate profiles, which consists of two steps:"
msgstr ""

#: ../../../HowToBuildWithPGO.rst:77
msgid ""
"Running the instrumented Clang/LLVM/lld/etc. on tasks that represent how "
"users will use said tools."
msgstr ""

#: ../../../HowToBuildWithPGO.rst:79
msgid ""
"Using a tool to convert the \"raw\" profiles generated above into a single, "
"final PGO profile."
msgstr ""

#: ../../../HowToBuildWithPGO.rst:82
msgid ""
"Build a final release Clang (along with whatever other binaries you need) "
"using the profile collected from your benchmark"
msgstr ""

#: ../../../HowToBuildWithPGO.rst:85
msgid "In more detailed steps:"
msgstr ""

#: ../../../HowToBuildWithPGO.rst:87
msgid ""
"Configure a Clang build as you normally would. It's highly recommended that "
"you use the Release configuration for this, since it will be used to build "
"another Clang. Because you need Clang and supporting libraries, you'll want "
"to build the ``all`` target (e.g. ``ninja all`` or ``make -j4 all``)."
msgstr ""

#: ../../../HowToBuildWithPGO.rst:92
msgid "Configure a Clang build as above, but add the following CMake args:"
msgstr ""

#: ../../../HowToBuildWithPGO.rst:94
msgid ""
"``-DLLVM_BUILD_INSTRUMENTED=IR`` -- This causes us to build everything with "
"instrumentation."
msgstr ""

#: ../../../HowToBuildWithPGO.rst:96
msgid ""
"``-DLLVM_BUILD_RUNTIME=No`` -- A few projects have bad interactions when "
"built with profiling, and aren't necessary to build. This flag turns them "
"off."
msgstr ""

#: ../../../HowToBuildWithPGO.rst:99 ../../../HowToBuildWithPGO.rst:140
msgid ""
"``-DCMAKE_C_COMPILER=/path/to/stage1/clang`` - Use the Clang we built in "
"step 1."
msgstr ""

#: ../../../HowToBuildWithPGO.rst:101 ../../../HowToBuildWithPGO.rst:142
msgid "``-DCMAKE_CXX_COMPILER=/path/to/stage1/clang++`` - Same as above."
msgstr ""

#: ../../../HowToBuildWithPGO.rst:103
msgid ""
"In this build directory, you simply need to build the ``clang`` target (and "
"whatever supporting tooling your benchmark requires)."
msgstr ""

#: ../../../HowToBuildWithPGO.rst:106
msgid ""
"As mentioned above, this has two steps: gathering profile data, and then "
"massaging it into a useful form:"
msgstr ""

#: ../../../HowToBuildWithPGO.rst:109
msgid ""
"Build your benchmark using the Clang generated in step 2. The 'standard' "
"benchmark recommended is to run ``check-clang`` and ``check-llvm`` in your "
"instrumented Clang's build directory, and to do a full build of Clang/LLVM "
"using your instrumented Clang. So, create yet another build directory, with "
"the following CMake arguments:"
msgstr ""

#: ../../../HowToBuildWithPGO.rst:115
msgid ""
"``-DCMAKE_C_COMPILER=/path/to/stage2/clang`` - Use the Clang we built in "
"step 2."
msgstr ""

#: ../../../HowToBuildWithPGO.rst:117
msgid "``-DCMAKE_CXX_COMPILER=/path/to/stage2/clang++`` - Same as above."
msgstr ""

#: ../../../HowToBuildWithPGO.rst:119
msgid ""
"If your users are fans of debug info, you may want to consider using ``-"
"DCMAKE_BUILD_TYPE=RelWithDebInfo`` instead of ``-"
"DCMAKE_BUILD_TYPE=Release``. This will grant better coverage of debug info "
"pieces of clang, but will take longer to complete and will result in a much "
"larger build directory."
msgstr ""

#: ../../../HowToBuildWithPGO.rst:125
msgid ""
"It's recommended to build the ``all`` target with your instrumented Clang, "
"since more coverage is often better."
msgstr ""

#: ../../../HowToBuildWithPGO.rst:128
msgid ""
"You should now have a few ``*.profraw`` files in ``path/to/stage2/profiles/"
"``. You need to merge these using ``llvm-profdata`` (even if you only have "
"one! The profile merge transforms profraw into actual profile data, as "
"well). This can be done with ``/path/to/stage1/llvm-profdata merge -output=/"
"path/to/output/profdata.prof path/to/stage2/profiles/*.profraw``."
msgstr ""

#: ../../../HowToBuildWithPGO.rst:135
msgid ""
"Now, build your final, PGO-optimized Clang. To do this, you'll want to pass "
"the following additional arguments to CMake."
msgstr ""

#: ../../../HowToBuildWithPGO.rst:138
msgid ""
"``-DLLVM_PROFDATA_FILE=/path/to/output/profdata.prof`` - Use the PGO profile "
"from the previous step."
msgstr ""

#: ../../../HowToBuildWithPGO.rst:144
msgid "From here, you can build whatever targets you need."
msgstr ""

#: ../../../HowToBuildWithPGO.rst:147
msgid ""
"You may see warnings about a mismatched profile in the build output. These "
"are generally harmless. To silence them, you can add ``-DCMAKE_C_FLAGS='-Wno-"
"backend-plugin' -DCMAKE_CXX_FLAGS='-Wno-backend-plugin'`` to your CMake "
"invocation."
msgstr ""

#: ../../../HowToBuildWithPGO.rst:153
msgid ""
"Congrats! You now have a Clang built with profile-guided optimizations, and "
"you can delete all but the final build directory if you'd like."
msgstr ""

#: ../../../HowToBuildWithPGO.rst:156
msgid ""
"If this worked well for you and you plan on doing it often, there's a slight "
"optimization that can be made: LLVM and Clang have a tool called tblgen "
"that's built and run during the build process. While it's potentially nice "
"to build this for coverage as part of step 3, none of your other builds "
"should benefit from building it. You can pass the CMake options ``-"
"DCLANG_TABLEGEN=/path/to/stage1/bin/clang-tblgen -DLLVM_TABLEGEN=/path/to/"
"stage1/bin/llvm-tblgen`` to steps 2 and onward to avoid these useless "
"rebuilds."
msgstr ""
