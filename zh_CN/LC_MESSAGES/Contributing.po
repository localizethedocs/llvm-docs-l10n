# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 21\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../Contributing.rst:3
msgid "Contributing to LLVM"
msgstr ""

#: ../../../Contributing.rst:6
msgid ""
"Thank you for your interest in contributing to LLVM! There are multiple ways "
"to contribute, and we appreciate all contributions. In case you have "
"questions, you can either use the `Forum`_ or, for a more interactive chat, "
"go to our `Discord server`_."
msgstr ""

#: ../../../Contributing.rst:11
msgid ""
"If you want to contribute code, please familiarize yourself with the :doc:"
"`DeveloperPolicy`."
msgstr ""

#: ../../../Contributing.rst:18
msgid "Ways to Contribute"
msgstr ""

#: ../../../Contributing.rst:21
msgid "Bug Reports"
msgstr ""

#: ../../../Contributing.rst:22
msgid ""
"If you are working with LLVM and run into a bug, we definitely want to know "
"about it. Please let us know and follow the instructions in :doc:"
"`HowToSubmitABug`  to create a bug report."
msgstr ""

#: ../../../Contributing.rst:27
msgid "Bug Fixes"
msgstr ""

#: ../../../Contributing.rst:28
msgid ""
"If you are interested in contributing code to LLVM, bugs labeled with the "
"`good first issue`_ keyword in the `bug tracker`_ are a good way to get "
"familiar with the code base. If you are interested in fixing a bug please "
"comment on it to let people know you are working on it."
msgstr ""

#: ../../../Contributing.rst:33
msgid ""
"Then try to reproduce and fix the bug with upstream LLVM. Start by building "
"LLVM from source as described in :doc:`GettingStarted` and use the built "
"binaries to reproduce the failure described in the bug. Use a debug build (`-"
"DCMAKE_BUILD_TYPE=Debug`) or a build with assertions (`-"
"DLLVM_ENABLE_ASSERTIONS=On`, enabled for Debug builds)."
msgstr ""

#: ../../../Contributing.rst:40
msgid "Reporting a Security Issue"
msgstr ""

#: ../../../Contributing.rst:42
msgid ""
"There is a separate process to submit security-related bugs, see :ref:"
"`report-security-issue`."
msgstr ""

#: ../../../Contributing.rst:45
msgid "Bigger Pieces of Work"
msgstr ""

#: ../../../Contributing.rst:46
msgid ""
"In case you are interested in taking on a bigger piece of work, a list of "
"interesting projects is maintained at the `LLVM's Open Projects page`_. In "
"case you are interested in working on any of these projects, please post on "
"the `Forum`_, so that we know the project is being worked on."
msgstr ""

#: ../../../Contributing.rst:54
msgid "How to Submit a Patch"
msgstr ""

#: ../../../Contributing.rst:55
msgid "Once you have a patch ready, it is time to submit it. The patch should:"
msgstr ""

#: ../../../Contributing.rst:57
msgid "include a small unit test"
msgstr ""

#: ../../../Contributing.rst:58
msgid ""
"conform to the :doc:`CodingStandards`. You can use the `clang-format-diff."
"py`_ or `git-clang-format`_ tools to automatically format your patch "
"properly."
msgstr ""

#: ../../../Contributing.rst:59
msgid "not contain any unrelated changes"
msgstr ""

#: ../../../Contributing.rst:60
msgid ""
"be an isolated change. Independent changes should be submitted as separate "
"patches as this makes reviewing easier."
msgstr ""

#: ../../../Contributing.rst:61
msgid ""
"have a single commit, up-to-date with the upstream ``origin/main`` branch, "
"and don't have merges."
msgstr ""

#: ../../../Contributing.rst:65
msgid ""
"Before sending a patch for review, please also try to ensure it is formatted "
"properly. We use ``clang-format`` for this, which has git integration "
"through the ``git-clang-format`` script. On some systems, it may already be "
"installed (or be installable via your package manager). If so, you can "
"simply run it -- the following command will format only the code changed in "
"the most recent commit:"
msgstr ""

#: ../../../Contributing.rst:77
msgid ""
"For some patches, formatting them may add changes that obscure the intent of "
"the patch. For example, adding to an enum that was not previously formatted "
"may result in the entire enum being reformatted. This happens because not "
"all of the LLVM Project conforms to LLVM's clang-format style at this time."
msgstr ""

#: ../../../Contributing.rst:82
msgid ""
"If you think that this might be the case for your changes, or are unsure, we "
"recommend that you add the formatting changes as a **separate commit** "
"within the Pull Request."
msgstr ""

#: ../../../Contributing.rst:86
msgid ""
"Reviewers may request that this formatting commit be made into a separate "
"Pull Request that will be merged before your actual changes."
msgstr ""

#: ../../../Contributing.rst:89
msgid ""
"This means that if the formatting changes are the first commit, you will "
"have an easier time doing this. If they are not, that is ok too, but you "
"will have to do a bit more work to separate it out."
msgstr ""

#: ../../../Contributing.rst:93
msgid ""
"Note that ``git clang-format`` modifies the files, but does not commit them "
"-- you will likely want to run one of the following to add the changes to a "
"commit:"
msgstr ""

#: ../../../Contributing.rst:104
msgid ""
"If you don't already have ``clang-format`` or ``git clang-format`` installed "
"on your system, the ``clang-format`` binary will be built alongside clang, "
"and the git integration can be run from ``clang/tools/clang-format/git-clang-"
"format``."
msgstr ""

#: ../../../Contributing.rst:109
msgid ""
"The LLVM project has migrated to GitHub Pull Requests as its review process. "
"For more information about the workflow of using GitHub Pull Requests see "
"our :ref:`GitHub <github-reviews>` documentation. We still have an read-only "
"`LLVM's Phabricator <https://reviews.llvm.org>`_ instance."
msgstr ""

#: ../../../Contributing.rst:114
msgid ""
"To make sure the right people see your patch, please select suitable "
"reviewers and add them to your patch when requesting a review."
msgstr ""

#: ../../../Contributing.rst:117
msgid ""
"Suitable reviewers are the maintainers of the project you are modifying, and "
"anyone else working in the area your patch touches. To find maintainers, "
"look for the ``Maintainers.md`` or ``Maintainers.rst`` file in the root of "
"the project's sub-directory. For example, LLVM's is ``llvm/Maintainers.md`` "
"and Clang's is ``clang/Maintainers.rst``."
msgstr ""

#: ../../../Contributing.rst:123
msgid ""
"If you are a new contributor, you will not be able to select reviewers in "
"such a way, in which case you can still get the attention of potential "
"reviewers by CC'ing them in a comment -- just @name them."
msgstr ""

#: ../../../Contributing.rst:127
msgid ""
"If you have received no comments on your patch for a week, you can request a "
"review by 'ping'ing the GitHub PR with \"Ping\" in a comment. The common "
"courtesy 'ping' rate is once a week. Please remember that you are asking for "
"valuable time from other professional developers."
msgstr ""

#: ../../../Contributing.rst:132
msgid ""
"After your PR is approved, you can merge it. If you do not have the ability "
"to merge the PR, ask your reviewers to merge it on your behalf. You must do "
"this explicitly, as reviewers' default assumption is that you are able to "
"merge your own PR."
msgstr ""

#: ../../../Contributing.rst:137
msgid ""
"For more information on LLVM's code-review process, please see :doc:"
"`CodeReview`."
msgstr ""

#: ../../../Contributing.rst:143
msgid "For developers to commit changes from Git"
msgstr ""

#: ../../../Contributing.rst:146
msgid ""
"See also :ref:`GitHub <github-reviews>` for more details on merging your "
"changes into LLVM project monorepo."
msgstr ""

#: ../../../Contributing.rst:149
msgid ""
"Once a patch is reviewed, you can select the \"Squash and merge\" button in "
"the GitHub web interface."
msgstr ""

#: ../../../Contributing.rst:152
msgid ""
"When pushing directly from the command-line to the ``main`` branch, you will "
"need to rebase your change. LLVM has a linear-history policy, which means "
"that merge commits are not allowed and the ``main`` branch is configured to "
"reject pushes that include merges."
msgstr ""

#: ../../../Contributing.rst:157
msgid "GitHub will display a message that looks like this:"
msgstr ""

#: ../../../Contributing.rst:165
msgid ""
"This can seem scary, but this is just an artifact of the GitHub setup: it is "
"intended as a warning for people merging pull-requests with failing CI. We "
"can't disable it for people pushing on the command-line."
msgstr ""

#: ../../../Contributing.rst:169
msgid ""
"Please ask for help if you're having trouble with your particular git "
"workflow."
msgstr ""

#: ../../../Contributing.rst:174
msgid "Git pre-push hook"
msgstr ""

#: ../../../Contributing.rst:176
msgid ""
"We include an optional pre-push hook that run some sanity checks on the "
"revisions you are about to push and ask confirmation if you push multiple "
"commits at once. You can set it up (on Unix systems) by running from the "
"repository root:"
msgstr ""

#: ../../../Contributing.rst:185
msgid "Helpful Information About LLVM"
msgstr ""

#: ../../../Contributing.rst:186
msgid ""
":doc:`LLVM's documentation <index>` provides a wealth of information about "
"LLVM's internals as well as various user guides. The pages listed below "
"should provide a good overview of LLVM's high-level design, as well as its "
"internals:"
msgstr ""

#: ../../../Contributing.rst:193
msgid ":doc:`GettingStarted`"
msgstr ""

#: ../../../Contributing.rst:191
msgid ""
"Discusses how to get up and running quickly with the LLVM infrastructure. "
"Everything from unpacking and compilation of the distribution to execution "
"of some tools."
msgstr ""

#: ../../../Contributing.rst:196
msgid ":doc:`LangRef`"
msgstr ""

#: ../../../Contributing.rst:196
msgid "Defines the LLVM intermediate representation."
msgstr ""

#: ../../../Contributing.rst:200
msgid ":doc:`ProgrammersManual`"
msgstr ""

#: ../../../Contributing.rst:199
msgid ""
"Introduction to the general layout of the LLVM sourcebase, important classes "
"and APIs, and some tips & tricks."
msgstr ""

#: ../../../Contributing.rst:207
msgid "`LLVM for Grad Students`__"
msgstr ""

#: ../../../Contributing.rst:203
msgid ""
"This is an introduction to the LLVM infrastructure by Adrian Sampson. While "
"it has been written for grad students, it provides  a good, compact overview "
"of LLVM's architecture, LLVM's IR and how to write a new pass."
msgstr ""

#: ../../../Contributing.rst:212
msgid "`Intro to LLVM`__"
msgstr ""

#: ../../../Contributing.rst:210
msgid "Book chapter providing a compiler hacker's introduction to LLVM."
msgstr ""
