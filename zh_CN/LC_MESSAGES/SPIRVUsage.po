# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 19\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../SPIRVUsage.rst:3
msgid "User Guide for SPIR-V Target"
msgstr ""

#: ../../../SPIRVUsage.rst:12
msgid "Introduction"
msgstr ""

#: ../../../SPIRVUsage.rst:14
msgid ""
"The SPIR-V target provides code generation for the SPIR-V binary format "
"described in  `the official SPIR-V specification <https://www.khronos.org/"
"registry/SPIR-V/>`_."
msgstr ""

#: ../../../SPIRVUsage.rst:18
msgid "Usage"
msgstr ""

#: ../../../SPIRVUsage.rst:20
msgid ""
"The SPIR-V backend can be invoked either from LLVM's Static Compiler (llc) "
"or Clang, allowing developers to compile LLVM intermediate language (IL) "
"files or OpenCL kernel sources directly to SPIR-V. This section outlines the "
"usage of various commands to leverage the SPIR-V backend for different "
"purposes."
msgstr ""

#: ../../../SPIRVUsage.rst:26
msgid "Static Compiler Commands"
msgstr ""

#: ../../../SPIRVUsage.rst:28
msgid ""
"**Basic SPIR-V Compilation** Command: `llc -mtriple=spirv32-unknown-unknown "
"input.ll -o output.spvt` Description: This command compiles an LLVM IL file "
"(`input.ll`) to a SPIR-V binary (`output.spvt`) for a 32-bit architecture."
msgstr ""

#: ../../../SPIRVUsage.rst:32
msgid ""
"**Compilation with Extensions and Optimization** Command: `llc -O1 -"
"mtriple=spirv64-unknown-unknown --spirv-"
"ext=+SPV_INTEL_arbitrary_precision_integers input.ll -o output.spvt` "
"Description: Compiles an LLVM IL file to SPIR-V with (`-O1`) optimizations, "
"targeting a 64-bit architecture. It enables the "
"SPV_INTEL_arbitrary_precision_integers extension."
msgstr ""

#: ../../../SPIRVUsage.rst:36
msgid ""
"**SPIR-V Binary Generation** Command: `llc -O0 -mtriple=spirv64-unknown-"
"unknown -filetype=obj input.ll -o output.spvt` Description: Generates a SPIR-"
"V object file (`output.spvt`) from an LLVM module, targeting a 64-bit SPIR-V "
"architecture with no optimizations."
msgstr ""

#: ../../../SPIRVUsage.rst:41
msgid "Clang Commands"
msgstr ""

#: ../../../SPIRVUsage.rst:43
msgid ""
"**SPIR-V Generation** Command: `clang â€“target=spirv64 input.cl` Description: "
"Generates a SPIR-V file directly from an OpenCL kernel source file (`input."
"cl`)."
msgstr ""

#: ../../../SPIRVUsage.rst:48
msgid "Compiler Options"
msgstr ""

#: ../../../SPIRVUsage.rst:53
msgid "Target Triples"
msgstr ""

#: ../../../SPIRVUsage.rst:55
msgid "For cross-compilation into SPIR-V use option"
msgstr ""

#: ../../../SPIRVUsage.rst:57
msgid "``-target <Architecture><Subarchitecture>-<Vendor>-<OS>-<Environment>``"
msgstr ""

#: ../../../SPIRVUsage.rst:59
msgid "to specify the target triple:"
msgstr ""

#: ../../../SPIRVUsage.rst:61
msgid "SPIR-V Architectures"
msgstr ""

#: ../../../SPIRVUsage.rst:64
msgid "Architecture"
msgstr ""

#: ../../../SPIRVUsage.rst:64 ../../../SPIRVUsage.rst:74
#: ../../../SPIRVUsage.rst:89 ../../../SPIRVUsage.rst:99
#: ../../../SPIRVUsage.rst:112 ../../../SPIRVUsage.rst:139
#: ../../../SPIRVUsage.rst:259
msgid "Description"
msgstr ""

#: ../../../SPIRVUsage.rst:66
msgid "``spirv32``"
msgstr ""

#: ../../../SPIRVUsage.rst:66
msgid "SPIR-V with 32-bit pointer width."
msgstr ""

#: ../../../SPIRVUsage.rst:67
msgid "``spirv64``"
msgstr ""

#: ../../../SPIRVUsage.rst:67
msgid "SPIR-V with 64-bit pointer width."
msgstr ""

#: ../../../SPIRVUsage.rst:68
msgid "``spirv``"
msgstr ""

#: ../../../SPIRVUsage.rst:68
msgid "SPIR-V with logical memory layout."
msgstr ""

#: ../../../SPIRVUsage.rst:71
msgid "SPIR-V Subarchitectures"
msgstr ""

#: ../../../SPIRVUsage.rst:74
msgid "Subarchitecture"
msgstr ""

#: ../../../SPIRVUsage.rst:76
msgid "*<empty>*"
msgstr ""

#: ../../../SPIRVUsage.rst:76
msgid "SPIR-V version deduced by backend based on the input."
msgstr ""

#: ../../../SPIRVUsage.rst:77
msgid "``v1.0``"
msgstr ""

#: ../../../SPIRVUsage.rst:77
msgid "SPIR-V version 1.0."
msgstr ""

#: ../../../SPIRVUsage.rst:78
msgid "``v1.1``"
msgstr ""

#: ../../../SPIRVUsage.rst:78
msgid "SPIR-V version 1.1."
msgstr ""

#: ../../../SPIRVUsage.rst:79
msgid "``v1.2``"
msgstr ""

#: ../../../SPIRVUsage.rst:79
msgid "SPIR-V version 1.2."
msgstr ""

#: ../../../SPIRVUsage.rst:80
msgid "``v1.3``"
msgstr ""

#: ../../../SPIRVUsage.rst:80
msgid "SPIR-V version 1.3."
msgstr ""

#: ../../../SPIRVUsage.rst:81
msgid "``v1.4``"
msgstr ""

#: ../../../SPIRVUsage.rst:81
msgid "SPIR-V version 1.4."
msgstr ""

#: ../../../SPIRVUsage.rst:82
msgid "``v1.5``"
msgstr ""

#: ../../../SPIRVUsage.rst:82
msgid "SPIR-V version 1.5."
msgstr ""

#: ../../../SPIRVUsage.rst:83
msgid "``v1.6``"
msgstr ""

#: ../../../SPIRVUsage.rst:83
msgid "SPIR-V version 1.6."
msgstr ""

#: ../../../SPIRVUsage.rst:86
msgid "SPIR-V Vendors"
msgstr ""

#: ../../../SPIRVUsage.rst:89
msgid "Vendor"
msgstr ""

#: ../../../SPIRVUsage.rst:91 ../../../SPIRVUsage.rst:101
#: ../../../SPIRVUsage.rst:114
msgid "*<empty>*/``unknown``"
msgstr ""

#: ../../../SPIRVUsage.rst:91
msgid "Generic SPIR-V target without any vendor-specific settings."
msgstr ""

#: ../../../SPIRVUsage.rst:92
msgid "``amd``"
msgstr ""

#: ../../../SPIRVUsage.rst:92
msgid ""
"AMDGCN SPIR-V target, with support for target specific builtins and ASM, "
"meant to be consumed by AMDGCN toolchains."
msgstr ""

#: ../../../SPIRVUsage.rst:96
msgid "Operating Systems"
msgstr ""

#: ../../../SPIRVUsage.rst:99
msgid "OS"
msgstr ""

#: ../../../SPIRVUsage.rst:101
msgid "Defaults to the OpenCL runtime."
msgstr ""

#: ../../../SPIRVUsage.rst:102
msgid "``vulkan``"
msgstr ""

#: ../../../SPIRVUsage.rst:102
msgid "Vulkan shader runtime."
msgstr ""

#: ../../../SPIRVUsage.rst:103
msgid "``vulkan1.2``"
msgstr ""

#: ../../../SPIRVUsage.rst:103
msgid "Vulkan 1.2 runtime, corresponding to SPIR-V 1.5."
msgstr ""

#: ../../../SPIRVUsage.rst:104
msgid "``vulkan1.3``"
msgstr ""

#: ../../../SPIRVUsage.rst:104
msgid "Vulkan 1.3 runtime, corresponding to SPIR-V 1.6."
msgstr ""

#: ../../../SPIRVUsage.rst:105
msgid "``amdhsa``"
msgstr ""

#: ../../../SPIRVUsage.rst:105
msgid ""
"AMDHSA runtime, meant to be used on HSA compatible runtimes, corresponding "
"to SPIR-V 1.6."
msgstr ""

#: ../../../SPIRVUsage.rst:109
msgid "SPIR-V Environments"
msgstr ""

#: ../../../SPIRVUsage.rst:112
msgid "Environment"
msgstr ""

#: ../../../SPIRVUsage.rst:114
msgid "OpenCL environment or deduced by backend based on the input."
msgstr ""

#: ../../../SPIRVUsage.rst:117
msgid "Example:"
msgstr ""

#: ../../../SPIRVUsage.rst:119
msgid ""
"``-target spirv64v1.0`` can be used to compile for SPIR-V version 1.0 with "
"64-bit pointer width."
msgstr ""

#: ../../../SPIRVUsage.rst:121
msgid ""
"``-target spirv64-amd-amdhsa`` can be used to compile for AMDGCN flavoured "
"SPIR-V with 64-bit pointer width."
msgstr ""

#: ../../../SPIRVUsage.rst:126
msgid "Extensions"
msgstr ""

#: ../../../SPIRVUsage.rst:128
msgid ""
"The SPIR-V backend supports a variety of `extensions <https://github.com/"
"KhronosGroup/SPIRV-Registry/tree/main/extensions>`_ that enable or enhance "
"features beyond the core SPIR-V specification. These extensions can be "
"enabled using the ``-spirv-extensions`` option followed by the name of the "
"extension(s) you wish to enable. Below is a list of supported SPIR-V "
"extensions, sorted alphabetically by their extension names:"
msgstr ""

#: ../../../SPIRVUsage.rst:134
msgid "Supported SPIR-V Extensions"
msgstr ""

#: ../../../SPIRVUsage.rst:138
msgid "Extension Name"
msgstr ""

#: ../../../SPIRVUsage.rst:140
msgid "``SPV_EXT_shader_atomic_float16_add``"
msgstr ""

#: ../../../SPIRVUsage.rst:141
msgid ""
"Extends the SPV_EXT_shader_atomic_float_add extension to support atomically "
"adding to 16-bit floating-point numbers in memory."
msgstr ""

#: ../../../SPIRVUsage.rst:142
msgid "``SPV_EXT_shader_atomic_float_add``"
msgstr ""

#: ../../../SPIRVUsage.rst:143
msgid "Adds atomic add instruction on floating-point numbers."
msgstr ""

#: ../../../SPIRVUsage.rst:144
msgid "``SPV_EXT_shader_atomic_float_min_max``"
msgstr ""

#: ../../../SPIRVUsage.rst:145
msgid "Adds atomic min and max instruction on floating-point numbers."
msgstr ""

#: ../../../SPIRVUsage.rst:146
msgid "``SPV_INTEL_arbitrary_precision_integers``"
msgstr ""

#: ../../../SPIRVUsage.rst:147
msgid "Allows generating arbitrary width integer types."
msgstr ""

#: ../../../SPIRVUsage.rst:148
msgid "``SPV_INTEL_bfloat16_conversion``"
msgstr ""

#: ../../../SPIRVUsage.rst:149
msgid ""
"Adds instructions to convert between single-precision 32-bit floating-point "
"values and 16-bit bfloat16 values."
msgstr ""

#: ../../../SPIRVUsage.rst:150
msgid "``SPV_INTEL_cache_controls``"
msgstr ""

#: ../../../SPIRVUsage.rst:151
msgid ""
"Allows cache control information to be applied to memory access instructions."
msgstr ""

#: ../../../SPIRVUsage.rst:152
msgid "``SPV_INTEL_function_pointers``"
msgstr ""

#: ../../../SPIRVUsage.rst:153
msgid "Allows translation of function pointers."
msgstr ""

#: ../../../SPIRVUsage.rst:154
msgid "``SPV_INTEL_inline_assembly``"
msgstr ""

#: ../../../SPIRVUsage.rst:155
msgid "Allows to use inline assembly."
msgstr ""

#: ../../../SPIRVUsage.rst:156
msgid "``SPV_INTEL_global_variable_host_access``"
msgstr ""

#: ../../../SPIRVUsage.rst:157
msgid ""
"Adds decorations that can be applied to global (module scope) variables."
msgstr ""

#: ../../../SPIRVUsage.rst:158
msgid "``SPV_INTEL_global_variable_fpga_decorations``"
msgstr ""

#: ../../../SPIRVUsage.rst:159
msgid ""
"Adds decorations that can be applied to global (module scope) variables to "
"help code generation for FPGA devices."
msgstr ""

#: ../../../SPIRVUsage.rst:160
msgid "``SPV_INTEL_optnone``"
msgstr ""

#: ../../../SPIRVUsage.rst:161
msgid ""
"Adds OptNoneINTEL value for Function Control mask that indicates a request "
"to not optimize the function."
msgstr ""

#: ../../../SPIRVUsage.rst:162
msgid "``SPV_INTEL_subgroups``"
msgstr ""

#: ../../../SPIRVUsage.rst:163
msgid ""
"Allows work items in a subgroup to share data without the use of local "
"memory and work group barriers, and to utilize specialized hardware to load "
"and store blocks of data from images or buffers."
msgstr ""

#: ../../../SPIRVUsage.rst:164
msgid "``SPV_INTEL_usm_storage_classes``"
msgstr ""

#: ../../../SPIRVUsage.rst:165
msgid ""
"Introduces two new storage classes that are subclasses of the CrossWorkgroup "
"storage class that provides additional information that can enable "
"optimization."
msgstr ""

#: ../../../SPIRVUsage.rst:166
msgid "``SPV_INTEL_variable_length_array``"
msgstr ""

#: ../../../SPIRVUsage.rst:167
msgid ""
"Allows to allocate local arrays whose number of elements is unknown at "
"compile time."
msgstr ""

#: ../../../SPIRVUsage.rst:168
msgid "``SPV_KHR_bit_instructions``"
msgstr ""

#: ../../../SPIRVUsage.rst:169
msgid ""
"Enables bit instructions to be used by SPIR-V modules without requiring the "
"Shader capability."
msgstr ""

#: ../../../SPIRVUsage.rst:170
msgid "``SPV_KHR_expect_assume``"
msgstr ""

#: ../../../SPIRVUsage.rst:171
msgid ""
"Provides additional information to a compiler, similar to the llvm.assume "
"and llvm.expect intrinsics."
msgstr ""

#: ../../../SPIRVUsage.rst:172
msgid "``SPV_KHR_float_controls``"
msgstr ""

#: ../../../SPIRVUsage.rst:173
msgid ""
"Provides new execution modes to control floating-point computations by "
"overriding an implementationâ€™s default behavior for rounding modes, "
"denormals, signed zero, and infinities."
msgstr ""

#: ../../../SPIRVUsage.rst:174
msgid "``SPV_KHR_linkonce_odr``"
msgstr ""

#: ../../../SPIRVUsage.rst:175
msgid ""
"Allows to use the LinkOnceODR linkage type that lets a function or global "
"variable to be merged with other functions or global variables of the same "
"name when linkage occurs."
msgstr ""

#: ../../../SPIRVUsage.rst:176
msgid "``SPV_KHR_no_integer_wrap_decoration``"
msgstr ""

#: ../../../SPIRVUsage.rst:177
msgid ""
"Adds decorations to indicate that a given instruction does not cause integer "
"wrapping."
msgstr ""

#: ../../../SPIRVUsage.rst:178
msgid "``SPV_KHR_shader_clock``"
msgstr ""

#: ../../../SPIRVUsage.rst:179
msgid ""
"Adds the extension cl_khr_kernel_clock that adds the ability for a kernel to "
"sample the value from clocks provided by compute units."
msgstr ""

#: ../../../SPIRVUsage.rst:180
msgid "``SPV_KHR_subgroup_rotate``"
msgstr ""

#: ../../../SPIRVUsage.rst:181
msgid ""
"Adds a new instruction that enables rotating values across invocations "
"within a subgroup."
msgstr ""

#: ../../../SPIRVUsage.rst:182
msgid "``SPV_KHR_uniform_group_instructions``"
msgstr ""

#: ../../../SPIRVUsage.rst:183
msgid ""
"Allows support for additional group operations within uniform control flow."
msgstr ""

#: ../../../SPIRVUsage.rst:185
msgid ""
"To enable multiple extensions, list them separated by spaces. For example, "
"to enable support for atomic operations on floating-point numbers and "
"arbitrary precision integers, use:"
msgstr ""

#: ../../../SPIRVUsage.rst:187
msgid ""
"``-spirv-ext=+SPV_EXT_shader_atomic_float_add,"
"+SPV_INTEL_arbitrary_precision_integers``"
msgstr ""

#: ../../../SPIRVUsage.rst:189
msgid "To enable all extensions, use the following option: ``-spirv-ext=all``"
msgstr ""

#: ../../../SPIRVUsage.rst:192
msgid ""
"To enable all extensions except specified, specify ``all`` followed by a "
"list of disallowed extensions. For example: ``-spirv-ext=all,-"
"SPV_INTEL_arbitrary_precision_integers``"
msgstr ""

#: ../../../SPIRVUsage.rst:196
msgid "SPIR-V representation in LLVM IR"
msgstr ""

#: ../../../SPIRVUsage.rst:198
msgid ""
"SPIR-V is intentionally designed for seamless integration with various "
"Intermediate Representations (IRs), including LLVM IR, facilitating "
"straightforward mappings for most of its entities. The development of the "
"SPIR-V backend has been guided by a principle of compatibility with the "
"`Khronos Group SPIR-V LLVM Translator <https://github.com/KhronosGroup/SPIRV-"
"LLVM-Translator>`_. Consequently, the input representation accepted by the "
"SPIR-V backend aligns closely with that detailed in `the SPIR-V "
"Representation in LLVM document <https://github.com/KhronosGroup/SPIRV-LLVM-"
"Translator/blob/main/docs/SPIRVRepresentationInLLVM.rst>`_. This document, "
"along with the sections that follow, delineate the main points and focus on "
"any differences between the LLVM IR that this backend processes and the "
"conventions used by other tools."
msgstr ""

#: ../../../SPIRVUsage.rst:211
msgid "Special types"
msgstr ""

#: ../../../SPIRVUsage.rst:213
msgid ""
"SPIR-V specifies several kinds of opaque types. These types are represented "
"using target extension types and are represented as follows:"
msgstr ""

#: ../../../SPIRVUsage.rst:216
msgid "SPIR-V Opaque Types"
msgstr ""

#: ../../../SPIRVUsage.rst:219
msgid "SPIR-V Type"
msgstr ""

#: ../../../SPIRVUsage.rst:219
msgid "LLVM type name"
msgstr ""

#: ../../../SPIRVUsage.rst:219
msgid "LLVM type arguments"
msgstr ""

#: ../../../SPIRVUsage.rst:221
msgid "OpTypeImage"
msgstr ""

#: ../../../SPIRVUsage.rst:221
msgid "``spirv.Image``"
msgstr ""

#: ../../../SPIRVUsage.rst:221 ../../../SPIRVUsage.rst:223
msgid ""
"sampled type, dimensionality, depth, arrayed, MS, sampled, image format, "
"access qualifier"
msgstr ""

#: ../../../SPIRVUsage.rst:222
msgid "OpTypeSampler"
msgstr ""

#: ../../../SPIRVUsage.rst:222
msgid "``spirv.Sampler``"
msgstr ""

#: ../../../SPIRVUsage.rst:222 ../../../SPIRVUsage.rst:224
#: ../../../SPIRVUsage.rst:225 ../../../SPIRVUsage.rst:226
#: ../../../SPIRVUsage.rst:227 ../../../SPIRVUsage.rst:229
msgid "(none)"
msgstr ""

#: ../../../SPIRVUsage.rst:223
msgid "OpTypeSampledImage"
msgstr ""

#: ../../../SPIRVUsage.rst:223
msgid "``spirv.SampledImage``"
msgstr ""

#: ../../../SPIRVUsage.rst:224
msgid "OpTypeEvent"
msgstr ""

#: ../../../SPIRVUsage.rst:224
msgid "``spirv.Event``"
msgstr ""

#: ../../../SPIRVUsage.rst:225
msgid "OpTypeDeviceEvent"
msgstr ""

#: ../../../SPIRVUsage.rst:225
msgid "``spirv.DeviceEvent``"
msgstr ""

#: ../../../SPIRVUsage.rst:226
msgid "OpTypeReserveId"
msgstr ""

#: ../../../SPIRVUsage.rst:226
msgid "``spirv.ReserveId``"
msgstr ""

#: ../../../SPIRVUsage.rst:227
msgid "OpTypeQueue"
msgstr ""

#: ../../../SPIRVUsage.rst:227
msgid "``spirv.Queue``"
msgstr ""

#: ../../../SPIRVUsage.rst:228
msgid "OpTypePipe"
msgstr ""

#: ../../../SPIRVUsage.rst:228
msgid "``spirv.Pipe``"
msgstr ""

#: ../../../SPIRVUsage.rst:228
msgid "access qualifier"
msgstr ""

#: ../../../SPIRVUsage.rst:229
msgid "OpTypePipeStorage"
msgstr ""

#: ../../../SPIRVUsage.rst:229
msgid "``spirv.PipeStorage``"
msgstr ""

#: ../../../SPIRVUsage.rst:232
msgid ""
"All integer arguments take the same value as they do in their `corresponding "
"SPIR-V instruction <https://registry.khronos.org/SPIR-V/specs/unified1/SPIRV."
"html#_type_declaration_instructions>`_. For example, the OpenCL type "
"``image2d_depth_ro_t`` would be represented in SPIR-V IR as ``target(\"spirv."
"Image\", void, 1, 1, 0, 0, 0, 0, 0)``, with its dimensionality parameter as "
"``1`` meaning 2D. Sampled image types include the parameters of its "
"underlying image type, so that a sampled image for the previous type has the "
"representation ``target(\"spirv.SampledImage, void, 1, 1, 0, 0, 0, 0, 0)``."
msgstr ""

#: ../../../SPIRVUsage.rst:244
msgid "Target Intrinsics"
msgstr ""

#: ../../../SPIRVUsage.rst:246
msgid ""
"The SPIR-V backend employs several LLVM IR intrinsics that facilitate "
"various low-level operations essential for generating correct and efficient "
"SPIR-V code. These intrinsics cover a range of functionalities from type "
"assignment and memory management to control flow and atomic operations. "
"Below is a detailed table of selected intrinsics used in the SPIR-V backend, "
"along with their descriptions and argument details."
msgstr ""

#: ../../../SPIRVUsage.rst:252
msgid "LLVM IR Intrinsics for SPIR-V"
msgstr ""

#: ../../../SPIRVUsage.rst:256
msgid "Intrinsic ID"
msgstr ""

#: ../../../SPIRVUsage.rst:257
msgid "Return Type"
msgstr ""

#: ../../../SPIRVUsage.rst:258
msgid "Argument Types"
msgstr ""

#: ../../../SPIRVUsage.rst:260
msgid "`int_spv_assign_type`"
msgstr ""

#: ../../../SPIRVUsage.rst:261 ../../../SPIRVUsage.rst:265
#: ../../../SPIRVUsage.rst:269 ../../../SPIRVUsage.rst:273
#: ../../../SPIRVUsage.rst:281 ../../../SPIRVUsage.rst:285
#: ../../../SPIRVUsage.rst:297 ../../../SPIRVUsage.rst:329
#: ../../../SPIRVUsage.rst:337 ../../../SPIRVUsage.rst:353
#: ../../../SPIRVUsage.rst:357
msgid "None"
msgstr ""

#: ../../../SPIRVUsage.rst:262 ../../../SPIRVUsage.rst:274
#: ../../../SPIRVUsage.rst:278
msgid "`[Type, Metadata]`"
msgstr ""

#: ../../../SPIRVUsage.rst:263
msgid ""
"Associates a type with metadata, crucial for maintaining type information in "
"SPIR-V structures. Not emitted directly but supports the type system "
"internally."
msgstr ""

#: ../../../SPIRVUsage.rst:264
msgid "`int_spv_assign_ptr_type`"
msgstr ""

#: ../../../SPIRVUsage.rst:266 ../../../SPIRVUsage.rst:326
msgid "`[Type, Metadata, Integer]`"
msgstr ""

#: ../../../SPIRVUsage.rst:267
msgid ""
"Similar to `int_spv_assign_type`, but for pointer types with an additional "
"integer specifying the storage class. Supports SPIR-V's detailed pointer "
"type system. Not emitted directly."
msgstr ""

#: ../../../SPIRVUsage.rst:268
msgid "`int_spv_assign_name`"
msgstr ""

#: ../../../SPIRVUsage.rst:270 ../../../SPIRVUsage.rst:330
#: ../../../SPIRVUsage.rst:334
msgid "`[Type, Vararg]`"
msgstr ""

#: ../../../SPIRVUsage.rst:271
msgid ""
"Assigns names to types or values, enhancing readability and debuggability of "
"SPIR-V code. Not emitted directly but used for metadata enrichment."
msgstr ""

#: ../../../SPIRVUsage.rst:272
msgid "`int_spv_assign_decoration`"
msgstr ""

#: ../../../SPIRVUsage.rst:275
msgid ""
"Assigns decoration to values by associating them with metadatas. Not emitted "
"directly but used to support SPIR-V representation in LLVM IR."
msgstr ""

#: ../../../SPIRVUsage.rst:276
msgid "`int_spv_track_constant`"
msgstr ""

#: ../../../SPIRVUsage.rst:277 ../../../SPIRVUsage.rst:301
#: ../../../SPIRVUsage.rst:309 ../../../SPIRVUsage.rst:313
#: ../../../SPIRVUsage.rst:317 ../../../SPIRVUsage.rst:321
#: ../../../SPIRVUsage.rst:325 ../../../SPIRVUsage.rst:341
#: ../../../SPIRVUsage.rst:345
msgid "Type"
msgstr ""

#: ../../../SPIRVUsage.rst:279
msgid ""
"Tracks constants in the SPIR-V module. Essential for optimizing and reducing "
"redundancy. Emitted for internal use only."
msgstr ""

#: ../../../SPIRVUsage.rst:280
msgid "`int_spv_init_global`"
msgstr ""

#: ../../../SPIRVUsage.rst:282 ../../../SPIRVUsage.rst:362
msgid "`[Type, Type]`"
msgstr ""

#: ../../../SPIRVUsage.rst:283
msgid ""
"Initializes global variables, a necessary step for ensuring correct global "
"state management in SPIR-V. Emitted for internal use only."
msgstr ""

#: ../../../SPIRVUsage.rst:284
msgid "`int_spv_unref_global`"
msgstr ""

#: ../../../SPIRVUsage.rst:286 ../../../SPIRVUsage.rst:322
msgid "`[Type]`"
msgstr ""

#: ../../../SPIRVUsage.rst:287
msgid ""
"Manages the lifetime of global variables by marking them as unreferenced, "
"thus enabling optimizations related to global variable usage. Emitted for "
"internal use only."
msgstr ""

#: ../../../SPIRVUsage.rst:288
msgid "`int_spv_gep`"
msgstr ""

#: ../../../SPIRVUsage.rst:289 ../../../SPIRVUsage.rst:369
msgid "Pointer"
msgstr ""

#: ../../../SPIRVUsage.rst:290
msgid "`[Boolean, Type, Vararg]`"
msgstr ""

#: ../../../SPIRVUsage.rst:291
msgid ""
"Computes the address of a sub-element of an aggregate type. Critical for "
"accessing array elements and structure fields. Supports conditionally "
"addressing elements in a generic way."
msgstr ""

#: ../../../SPIRVUsage.rst:292
msgid "`int_spv_load`"
msgstr ""

#: ../../../SPIRVUsage.rst:293 ../../../SPIRVUsage.rst:305
#: ../../../SPIRVUsage.rst:333 ../../../SPIRVUsage.rst:349
#: ../../../SPIRVUsage.rst:365
msgid "32-bit Integer"
msgstr ""

#: ../../../SPIRVUsage.rst:294
msgid "`[Pointer, 16-bit Integer, 8-bit Integer]`"
msgstr ""

#: ../../../SPIRVUsage.rst:295
msgid ""
"Loads a value from a memory location. The additional integers specify memory "
"access and alignment details, vital for ensuring correct and efficient "
"memory operations."
msgstr ""

#: ../../../SPIRVUsage.rst:296
msgid "`int_spv_store`"
msgstr ""

#: ../../../SPIRVUsage.rst:298
msgid "`[Type, Pointer, 16-bit Integer, 8-bit Integer]`"
msgstr ""

#: ../../../SPIRVUsage.rst:299
msgid ""
"Stores a value to a memory location. Like `int_spv_load`, it includes "
"specifications for memory access and alignment, essential for memory "
"operations."
msgstr ""

#: ../../../SPIRVUsage.rst:300
msgid "`int_spv_extractv`"
msgstr ""

#: ../../../SPIRVUsage.rst:302
msgid "`[32-bit Integer, Vararg]`"
msgstr ""

#: ../../../SPIRVUsage.rst:303
msgid ""
"Extracts a value from a vector, allowing for vector operations within SPIR-"
"V. Enables manipulation of vector components."
msgstr ""

#: ../../../SPIRVUsage.rst:304
msgid "`int_spv_insertv`"
msgstr ""

#: ../../../SPIRVUsage.rst:306
msgid "`[32-bit Integer, Type, Vararg]`"
msgstr ""

#: ../../../SPIRVUsage.rst:307
msgid ""
"Inserts a value into a vector. Complementary to `int_spv_extractv`, it "
"facilitates the construction and manipulation of vectors."
msgstr ""

#: ../../../SPIRVUsage.rst:308
msgid "`int_spv_extractelt`"
msgstr ""

#: ../../../SPIRVUsage.rst:310
msgid "`[Type, Any Integer]`"
msgstr ""

#: ../../../SPIRVUsage.rst:311
msgid ""
"Extracts an element from an aggregate type based on an index. Essential for "
"operations on arrays and vectors."
msgstr ""

#: ../../../SPIRVUsage.rst:312
msgid "`int_spv_insertelt`"
msgstr ""

#: ../../../SPIRVUsage.rst:314
msgid "`[Type, Type, Any Integer]`"
msgstr ""

#: ../../../SPIRVUsage.rst:315
msgid ""
"Inserts an element into an aggregate type at a specified index. Allows for "
"building and modifying arrays and vectors."
msgstr ""

#: ../../../SPIRVUsage.rst:316
msgid "`int_spv_const_composite`"
msgstr ""

#: ../../../SPIRVUsage.rst:318
msgid "`[Vararg]`"
msgstr ""

#: ../../../SPIRVUsage.rst:319
msgid ""
"Constructs a composite type from given elements. Key for creating arrays, "
"structs, and vectors from individual components."
msgstr ""

#: ../../../SPIRVUsage.rst:320
msgid "`int_spv_bitcast`"
msgstr ""

#: ../../../SPIRVUsage.rst:323
msgid ""
"Performs a bit-wise cast between types. Critical for type conversions that "
"do not change the bit representation."
msgstr ""

#: ../../../SPIRVUsage.rst:324
msgid "`int_spv_ptrcast`"
msgstr ""

#: ../../../SPIRVUsage.rst:327
msgid ""
"Casts pointers between different types. Similar to `int_spv_bitcast` but "
"specifically for pointers, taking into account SPIR-V's strict type system."
msgstr ""

#: ../../../SPIRVUsage.rst:328
msgid "`int_spv_switch`"
msgstr ""

#: ../../../SPIRVUsage.rst:331
msgid ""
"Implements a multi-way branch based on a value. Enables complex control flow "
"structures, similar to the switch statement in high-level languages."
msgstr ""

#: ../../../SPIRVUsage.rst:332
msgid "`int_spv_cmpxchg`"
msgstr ""

#: ../../../SPIRVUsage.rst:335
msgid ""
"Performs an atomic compare-and-exchange operation. Crucial for "
"synchronization and concurrency control in compute shaders."
msgstr ""

#: ../../../SPIRVUsage.rst:336
msgid "`int_spv_unreachable`"
msgstr ""

#: ../../../SPIRVUsage.rst:338 ../../../SPIRVUsage.rst:342
#: ../../../SPIRVUsage.rst:350
msgid "`[]`"
msgstr ""

#: ../../../SPIRVUsage.rst:339
msgid ""
"Marks a point in the code that should never be reached, enabling "
"optimizations by indicating unreachable code paths."
msgstr ""

#: ../../../SPIRVUsage.rst:340
msgid "`int_spv_alloca`"
msgstr ""

#: ../../../SPIRVUsage.rst:343
msgid ""
"Allocates memory on the stack. Fundamental for local variable storage in "
"functions."
msgstr ""

#: ../../../SPIRVUsage.rst:344
msgid "`int_spv_alloca_array`"
msgstr ""

#: ../../../SPIRVUsage.rst:346
msgid "`[Any Integer]`"
msgstr ""

#: ../../../SPIRVUsage.rst:347
msgid ""
"Allocates an array on the stack. Extends `int_spv_alloca` to support array "
"allocations, essential for temporary arrays."
msgstr ""

#: ../../../SPIRVUsage.rst:348
msgid "`int_spv_undef`"
msgstr ""

#: ../../../SPIRVUsage.rst:351
msgid ""
"Generates an undefined value. Useful for optimizations and indicating "
"uninitialized variables."
msgstr ""

#: ../../../SPIRVUsage.rst:352
msgid "`int_spv_inline_asm`"
msgstr ""

#: ../../../SPIRVUsage.rst:354
msgid "`[Metadata, Metadata, Vararg]`"
msgstr ""

#: ../../../SPIRVUsage.rst:355
msgid ""
"Associates inline assembly features to inline assembly call instances by "
"creating metadatas and preserving original arguments. Not emitted directly "
"but used to support SPIR-V representation in LLVM IR."
msgstr ""

#: ../../../SPIRVUsage.rst:356
msgid "`int_spv_assume`"
msgstr ""

#: ../../../SPIRVUsage.rst:358
msgid "`[1-bit Integer]`"
msgstr ""

#: ../../../SPIRVUsage.rst:359
msgid ""
"Provides hints to the optimizer about assumptions that can be made about "
"program state. Improves optimization potential."
msgstr ""

#: ../../../SPIRVUsage.rst:360
msgid "`int_spv_expect`"
msgstr ""

#: ../../../SPIRVUsage.rst:361
msgid "Any Integer Type"
msgstr ""

#: ../../../SPIRVUsage.rst:363
msgid ""
"Guides branch prediction by indicating expected branch paths. Enhances "
"performance by optimizing common code paths."
msgstr ""

#: ../../../SPIRVUsage.rst:364
msgid "`int_spv_thread_id`"
msgstr ""

#: ../../../SPIRVUsage.rst:366
msgid "`[32-bit Integer]`"
msgstr ""

#: ../../../SPIRVUsage.rst:367
msgid ""
"Retrieves the thread ID within a workgroup. Essential for identifying "
"execution context in parallel compute operations."
msgstr ""

#: ../../../SPIRVUsage.rst:368
msgid "`int_spv_create_handle`"
msgstr ""

#: ../../../SPIRVUsage.rst:370
msgid "`[8-bit Integer]`"
msgstr ""

#: ../../../SPIRVUsage.rst:371
msgid ""
"Creates a resource handle for graphics or compute resources. Facilitates the "
"management and use of resources in shaders."
msgstr ""

#: ../../../SPIRVUsage.rst:376
msgid "Builtin Functions"
msgstr ""

#: ../../../SPIRVUsage.rst:378
msgid ""
"The following section highlights the representation of SPIR-V builtins in "
"LLVM IR, emphasizing builtins that do not have direct counterparts in LLVM."
msgstr ""

#: ../../../SPIRVUsage.rst:382
msgid "Instructions as Function Calls"
msgstr ""

#: ../../../SPIRVUsage.rst:384
msgid ""
"SPIR-V builtins without direct LLVM counterparts are represented as LLVM "
"function calls. These functions, termed SPIR-V builtin functions, follow an "
"IA64 mangling scheme with SPIR-V-specific extensions. Parsing non-mangled "
"calls to builtins is supported in some cases, but not tested extensively. "
"The general format is:"
msgstr ""

#: ../../../SPIRVUsage.rst:393
msgid ""
"Where `{OpCodeName}` is the SPIR-V opcode name sans the \"Op\" prefix, and "
"`{OptionalPostfixes}` are decoration-specific postfixes, if any. The "
"mangling and postfixes allow for the representation of SPIR-V's rich "
"instruction set within LLVM's framework."
msgstr ""

#: ../../../SPIRVUsage.rst:399
msgid "Extended Instruction Sets"
msgstr ""

#: ../../../SPIRVUsage.rst:401
msgid ""
"SPIR-V defines several extended instruction sets for additional "
"functionalities, such as OpenCL-specific operations. In LLVM IR, these are "
"represented by function calls to mangled builtins and selected based on the "
"environment. For example:"
msgstr ""

#: ../../../SPIRVUsage.rst:409
msgid ""
"represents the `acos` function from the OpenCL extended instruction set for "
"a float32 input."
msgstr ""

#: ../../../SPIRVUsage.rst:413
msgid "Builtin Variables"
msgstr ""

#: ../../../SPIRVUsage.rst:415
msgid ""
"SPIR-V builtin variables, which provide access to special hardware or "
"execution model properties, are mapped to either LLVM function calls or LLVM "
"global variables. The representation follows the naming convention:"
msgstr ""

#: ../../../SPIRVUsage.rst:423
msgid ""
"For instance, the SPIR-V builtin `GlobalInvocationId` is accessible in LLVM "
"IR as `__spirv_BuiltInGlobalInvocationId`."
msgstr ""

#: ../../../SPIRVUsage.rst:427
msgid "Vector Load and Store Builtins"
msgstr ""

#: ../../../SPIRVUsage.rst:429
msgid ""
"SPIR-V's capabilities for loading and storing vectors are represented in "
"LLVM IR using functions that mimic the SPIR-V instructions. These builtins "
"handle cases that LLVM's native instructions do not directly support, "
"enabling fine-grained control over memory operations."
msgstr ""

#: ../../../SPIRVUsage.rst:435
msgid "Atomic Operations"
msgstr ""

#: ../../../SPIRVUsage.rst:437
msgid ""
"SPIR-V's atomic operations, especially those operating on floating-point "
"data, are represented in LLVM IR with corresponding function calls. These "
"builtins ensure atomicity in operations where LLVM might not have direct "
"support, essential for parallel execution and synchronization."
msgstr ""

#: ../../../SPIRVUsage.rst:443
msgid "Image Operations"
msgstr ""

#: ../../../SPIRVUsage.rst:445
msgid ""
"SPIR-V provides extensive support for image and sampler operations, which "
"LLVM represents through function calls to builtins. These include image "
"reads, writes, and queries, allowing detailed manipulation of image data and "
"parameters."
msgstr ""

#: ../../../SPIRVUsage.rst:450
msgid "Group and Subgroup Operations"
msgstr ""

#: ../../../SPIRVUsage.rst:452
msgid ""
"For workgroup and subgroup operations, LLVM uses function calls to represent "
"SPIR-V's group-based instructions. These builtins facilitate group "
"synchronization, data sharing, and collective operations essential for "
"efficient parallel computation."
msgstr ""
