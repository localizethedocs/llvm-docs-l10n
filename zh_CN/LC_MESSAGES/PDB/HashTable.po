# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 19\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../PDB/HashTable.rst:2
msgid "The PDB Serialized Hash Table Format"
msgstr ""

#: ../../../PDB/HashTable.rst:10
msgid "Introduction"
msgstr ""

#: ../../../PDB/HashTable.rst:12
msgid ""
"One of the design goals of the PDB format is to provide accelerated access "
"to debug information, and for this reason there are several occasions where "
"hash tables are serialized and embedded directly to the file, rather than "
"requiring a consumer to read a list of values and reconstruct the hash table "
"on the fly."
msgstr ""

#: ../../../PDB/HashTable.rst:17
msgid ""
"The serialization format supports hash tables of arbitrarily large size and "
"capacity, as well as value types and hash functions.  The only supported key "
"value type is a uint32.  The only requirement is that the producer and "
"consumer agree on the hash function.  As such, the hash function can is not "
"discussed further in this document, it is assumed that for a particular "
"instance of a PDB file hash table, the appropriate hash function is being "
"used."
msgstr ""

#: ../../../PDB/HashTable.rst:25
msgid "On-Disk Format"
msgstr ""

#: ../../../PDB/HashTable.rst:49
msgid "**Size** - The number of values contained in the hash table."
msgstr ""

#: ../../../PDB/HashTable.rst:51
msgid ""
"**Capacity** - The number of buckets in the hash table.  Producers should "
"maintain a load factor of no greater than ``2/3*Capacity+1``."
msgstr ""

#: ../../../PDB/HashTable.rst:54
msgid ""
"**Present Bit Vector** - A serialized bit vector which contains information "
"about which buckets have valid values.  If the bucket has a value, the "
"corresponding bit will be set, and if the bucket doesn't have a value "
"(either because the bucket is empty or because the value is a tombstone "
"value) the bit will be unset."
msgstr ""

#: ../../../PDB/HashTable.rst:60
msgid ""
"**Deleted Bit Vector** - A serialized bit vector which contains information "
"about which buckets have tombstone values.  If the entry in this bucket is "
"deleted, the bit will be set, otherwise it will be unset."
msgstr ""

#: ../../../PDB/HashTable.rst:64
msgid ""
"**Keys and Values** - A list of ``Capacity`` hash buckets, where the first "
"entry is the key (always a uint32), and the second entry is the value.  The "
"state of each bucket (valid, empty, deleted) can be determined by examining "
"the present and deleted bit vectors."
msgstr ""

#: ../../../PDB/HashTable.rst:73
msgid "Present and Deleted Bit Vectors"
msgstr ""

#: ../../../PDB/HashTable.rst:75
msgid ""
"The bit vectors indicating the status of each bucket are serialized as "
"follows:"
msgstr ""

#: ../../../PDB/HashTable.rst:91
msgid ""
"The words, when viewed as a contiguous block of bytes, represent a bit "
"vector with the following layout:"
msgstr ""

#: ../../../PDB/HashTable.rst:102
msgid ""
"where the k'th bit of this bit vector represents the status of the k'th "
"bucket in the hash table."
msgstr ""
