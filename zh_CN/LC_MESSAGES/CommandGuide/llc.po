# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../CommandGuide/llc.rst:2
msgid "llc - LLVM static compiler"
msgstr ""

#: ../../../CommandGuide/llc.rst:5
msgid "SYNOPSIS"
msgstr ""

#: ../../../CommandGuide/llc.rst:7
msgid ":program:`llc` [*options*] [*filename*]"
msgstr ""

#: ../../../CommandGuide/llc.rst:10
msgid "DESCRIPTION"
msgstr ""

#: ../../../CommandGuide/llc.rst:12
msgid ""
"The :program:`llc` command compiles LLVM source inputs into assembly "
"language for a specified architecture.  The assembly language output can "
"then be passed through a native assembler and linker to generate a native "
"executable."
msgstr ""

#: ../../../CommandGuide/llc.rst:16
msgid ""
"The choice of architecture for the output assembly code is automatically "
"determined from the input file, unless the :option:`-march` option is used "
"to override the default."
msgstr ""

#: ../../../CommandGuide/llc.rst:21
msgid "OPTIONS"
msgstr ""

#: ../../../CommandGuide/llc.rst:23
msgid ""
"If ``filename`` is \"``-``\" or omitted, :program:`llc` reads from standard "
"input. Otherwise, it will from ``filename``.  Inputs can be in either the "
"LLVM assembly language format (``.ll``) or the LLVM bitcode format (``.bc``)."
msgstr ""

#: ../../../CommandGuide/llc.rst:27
msgid ""
"If the :option:`-o` option is omitted, then :program:`llc` will send its "
"output to standard output if the input is from standard input.  If the :"
"option:`-o` option specifies \"``-``\", then the output will also be sent to "
"standard output."
msgstr ""

#: ../../../CommandGuide/llc.rst:31
msgid ""
"If no :option:`-o` option is specified and an input file other than \"``-"
"``\" is specified, then :program:`llc` creates the output filename by taking "
"the input filename, removing any existing ``.bc`` extension, and adding a ``."
"s`` suffix."
msgstr ""

#: ../../../CommandGuide/llc.rst:35
msgid "Other :program:`llc` options are described below."
msgstr ""

#: ../../../CommandGuide/llc.rst:38
msgid "End-user Options"
msgstr ""

#: ../../../CommandGuide/llc.rst:42
msgid "Print a summary of command line options."
msgstr ""

#: ../../../CommandGuide/llc.rst:46
msgid ""
"Generate code at different optimization levels.  These correspond to the ``-"
"O0``, ``-O1``, ``-O2``, and ``-O3`` optimization levels used by :program:"
"`clang`."
msgstr ""

#: ../../../CommandGuide/llc.rst:52
msgid ""
"Override the target triple specified in the input file with the specified "
"string."
msgstr ""

#: ../../../CommandGuide/llc.rst:57
msgid ""
"Specify the architecture for which to generate assembly, overriding the "
"target encoded in the input file.  See the output of ``llc -help`` for a "
"list of valid architectures.  By default this is inferred from the target "
"triple or autodetected to the current architecture."
msgstr ""

#: ../../../CommandGuide/llc.rst:64
msgid ""
"Specify a specific chip in the current architecture to generate code for. By "
"default this is inferred from the target triple and autodetected to the "
"current architecture.  For a list of available CPUs, use:"
msgstr ""

#: ../../../CommandGuide/llc.rst:74
msgid ""
"Specify what kind of output ``llc`` should generated.  Options are: ``asm`` "
"for textual assembly ( ``'.s'``), ``obj`` for native object files (``'.o'``) "
"and ``null`` for not emitting anything (for performance testing)."
msgstr ""

#: ../../../CommandGuide/llc.rst:78
msgid "Note that not all targets support all options."
msgstr ""

#: ../../../CommandGuide/llc.rst:82
msgid ""
"Override or control specific attributes of the target, such as whether SIMD "
"operations are enabled or not.  The default set of attributes is set by the "
"current CPU.  For a list of available attributes, use:"
msgstr ""

#: ../../../CommandGuide/llc.rst:92
msgid ""
"Specify effect of frame pointer elimination optimization (all,non-leaf,none)."
msgstr ""

#: ../../../CommandGuide/llc.rst:96
msgid ""
"Disable optimizations that may produce excess precision for floating point. "
"Note that this option can dramatically slow down code on some systems (e.g. "
"X86)."
msgstr ""

#: ../../../CommandGuide/llc.rst:102
msgid "Enable optimizations that assume no Inf values."
msgstr ""

#: ../../../CommandGuide/llc.rst:106
msgid "Enable optimizations that assume no NAN values."
msgstr ""

#: ../../../CommandGuide/llc.rst:110
msgid ""
"Enable optimizations that make unsafe assumptions about IEEE math (e.g. that "
"addition is associative) or may not work for all input ranges.  These "
"optimizations allow the code generator to make use of some instructions "
"which would otherwise not be usable (such as ``fsin`` on X86)."
msgstr ""

#: ../../../CommandGuide/llc.rst:117
msgid "Print statistics recorded by code-generation passes."
msgstr ""

#: ../../../CommandGuide/llc.rst:121
msgid ""
"Record the amount of time needed for each pass and print a report to "
"standard error."
msgstr ""

#: ../../../CommandGuide/llc.rst:126
msgid ""
"Dynamically load ``dso_path`` (a path to a dynamically shared object) that "
"implements an LLVM target.  This will permit the target name to be used with "
"the :option:`-march` option so that code can be generated for that target."
msgstr ""

#: ../../../CommandGuide/llc.rst:132
msgid ""
"Specify which EABI version should conform to.  Valid EABI versions are "
"*gnu*, *4* and *5*.  Default value (*default*) depends on the triple."
msgstr ""

#: ../../../CommandGuide/llc.rst:137
msgid ""
"Emit the .stack_sizes section which contains stack size metadata. The "
"section contains an array of pairs of function symbol values (pointer size) "
"and stack sizes (unsigned LEB128). The stack size values only include the "
"space allocated in the function prologue. Functions with dynamic stack "
"allocations are not included."
msgstr ""

#: ../../../CommandGuide/llc.rst:145
msgid "Tuning/Configuration Options"
msgstr ""

#: ../../../CommandGuide/llc.rst:149
msgid ""
"Print generated machine code between compilation phases (useful for "
"debugging)."
msgstr ""

#: ../../../CommandGuide/llc.rst:153
msgid "Specify the register allocator to use. Valid register allocators are:"
msgstr ""

#: ../../../CommandGuide/llc.rst:156
msgid "*basic*"
msgstr ""

#: ../../../CommandGuide/llc.rst:158
msgid "Basic register allocator."
msgstr ""

#: ../../../CommandGuide/llc.rst:160
msgid "*fast*"
msgstr ""

#: ../../../CommandGuide/llc.rst:162
msgid "Fast register allocator. It is the default for unoptimized code."
msgstr ""

#: ../../../CommandGuide/llc.rst:164
msgid "*greedy*"
msgstr ""

#: ../../../CommandGuide/llc.rst:166
msgid "Greedy register allocator. It is the default for optimized code."
msgstr ""

#: ../../../CommandGuide/llc.rst:168
msgid "*pbqp*"
msgstr ""

#: ../../../CommandGuide/llc.rst:170
msgid ""
"Register allocator based on 'Partitioned Boolean Quadratic Programming'."
msgstr ""

#: ../../../CommandGuide/llc.rst:174
msgid ""
"Specify the spiller to use for register allocators that support it.  "
"Currently this option is used only by the linear scan register allocator.  "
"The default ``spiller`` is *local*.  Valid spillers are:"
msgstr ""

#: ../../../CommandGuide/llc.rst:178
msgid "*simple*"
msgstr ""

#: ../../../CommandGuide/llc.rst:180
msgid "Simple spiller"
msgstr ""

#: ../../../CommandGuide/llc.rst:182
msgid "*local*"
msgstr ""

#: ../../../CommandGuide/llc.rst:184
msgid "Local spiller"
msgstr ""

#: ../../../CommandGuide/llc.rst:187
msgid "Intel IA-32-specific Options"
msgstr ""

#: ../../../CommandGuide/llc.rst:191
msgid ""
"Specify whether to emit assembly code in AT&T syntax (the default) or Intel "
"syntax."
msgstr ""

#: ../../../CommandGuide/llc.rst:195
msgid "EXIT STATUS"
msgstr ""

#: ../../../CommandGuide/llc.rst:197
msgid ""
"If :program:`llc` succeeds, it will exit with 0.  Otherwise, if an error "
"occurs, it will exit with a non-zero value."
msgstr ""

#: ../../../CommandGuide/llc.rst:201
msgid "SEE ALSO"
msgstr ""

#: ../../../CommandGuide/llc.rst:203
msgid "lli"
msgstr ""
