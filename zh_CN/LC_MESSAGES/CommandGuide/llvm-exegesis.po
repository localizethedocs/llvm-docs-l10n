# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 16\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../CommandGuide/llvm-exegesis.rst:2
msgid "llvm-exegesis - LLVM Machine Instruction Benchmark"
msgstr ""

#: ../../../CommandGuide/llvm-exegesis.rst:7
msgid "SYNOPSIS"
msgstr ""

#: ../../../CommandGuide/llvm-exegesis.rst:9
msgid ":program:`llvm-exegesis` [*options*]"
msgstr ""

#: ../../../CommandGuide/llvm-exegesis.rst:12
msgid "DESCRIPTION"
msgstr ""

#: ../../../CommandGuide/llvm-exegesis.rst:14
msgid ""
":program:`llvm-exegesis` is a benchmarking tool that uses information "
"available in LLVM to measure host machine instruction characteristics like "
"latency, throughput, or port decomposition."
msgstr ""

#: ../../../CommandGuide/llvm-exegesis.rst:18
msgid ""
"Given an LLVM opcode name and a benchmarking mode, :program:`llvm-exegesis` "
"generates a code snippet that makes execution as serial (resp. as parallel) "
"as possible so that we can measure the latency (resp. inverse throughput/uop "
"decomposition) of the instruction. The code snippet is jitted and, unless "
"requested not to, executed on the host subtarget. The time taken (resp. "
"resource usage) is measured using hardware performance counters. The result "
"is printed out as YAML to the standard output."
msgstr ""

#: ../../../CommandGuide/llvm-exegesis.rst:27
msgid ""
"The main goal of this tool is to automatically (in)validate the LLVM's "
"TableDef scheduling models. To that end, we also provide analysis of the "
"results."
msgstr ""

#: ../../../CommandGuide/llvm-exegesis.rst:30
msgid ""
":program:`llvm-exegesis` can also benchmark arbitrary user-provided code "
"snippets."
msgstr ""

#: ../../../CommandGuide/llvm-exegesis.rst:34
msgid "EXAMPLE 1: benchmarking instructions"
msgstr ""

#: ../../../CommandGuide/llvm-exegesis.rst:36
msgid ""
"Assume you have an X86-64 machine. To measure the latency of a single "
"instruction, run:"
msgstr ""

#: ../../../CommandGuide/llvm-exegesis.rst:43
msgid ""
"Measuring the uop decomposition or inverse throughput of an instruction "
"works similarly:"
msgstr ""

#: ../../../CommandGuide/llvm-exegesis.rst:51
msgid ""
"The output is a YAML document (the default is to write to stdout, but you "
"can redirect the output to a file using `-benchmarks-file`):"
msgstr ""

#: ../../../CommandGuide/llvm-exegesis.rst:73
msgid ""
"To measure the latency of all instructions for the host architecture, run:"
msgstr ""

#: ../../../CommandGuide/llvm-exegesis.rst:81
msgid "EXAMPLE 2: benchmarking a custom code snippet"
msgstr ""

#: ../../../CommandGuide/llvm-exegesis.rst:83
msgid ""
"To measure the latency/uops of a custom piece of code, you can specify the "
"`snippets-file` option (`-` reads from standard input)."
msgstr ""

#: ../../../CommandGuide/llvm-exegesis.rst:90
msgid ""
"Real-life code snippets typically depend on registers or memory. :program:"
"`llvm-exegesis` checks the liveliness of registers (i.e. any register use "
"has a corresponding def or is a \"live in\"). If your code depends on the "
"value of some registers, you have two options:"
msgstr ""

#: ../../../CommandGuide/llvm-exegesis.rst:95
msgid ""
"Mark the register as requiring a definition. :program:`llvm-exegesis` will "
"automatically assign a value to the register. This can be done using the "
"directive `LLVM-EXEGESIS-DEFREG <reg name> <hex_value>`, where `<hex_value>` "
"is a bit pattern used to fill `<reg_name>`. If `<hex_value>` is smaller than "
"the register width, it will be sign-extended."
msgstr ""

#: ../../../CommandGuide/llvm-exegesis.rst:100
msgid ""
"Mark the register as a \"live in\". :program:`llvm-exegesis` will benchmark "
"using whatever value was in this registers on entry. This can be done using "
"the directive `LLVM-EXEGESIS-LIVEIN <reg name>`."
msgstr ""

#: ../../../CommandGuide/llvm-exegesis.rst:104
msgid ""
"For example, the following code snippet depends on the values of XMM1 (which "
"will be set by the tool) and the memory buffer passed in RDI (live in)."
msgstr ""

#: ../../../CommandGuide/llvm-exegesis.rst:117
msgid "EXAMPLE 3: analysis"
msgstr ""

#: ../../../CommandGuide/llvm-exegesis.rst:119
msgid ""
"Assuming you have a set of benchmarked instructions (either latency or uops) "
"as YAML in file `/tmp/benchmarks.yaml`, you can analyze the results using "
"the following command:"
msgstr ""

#: ../../../CommandGuide/llvm-exegesis.rst:130
msgid ""
"This will group the instructions into clusters with the same performance "
"characteristics. The clusters will be written out to `/tmp/clusters.csv` in "
"the following format:"
msgstr ""

#: ../../../CommandGuide/llvm-exegesis.rst:152
msgid ""
":program:`llvm-exegesis` will also analyze the clusters to point out "
"inconsistencies in the scheduling information. The output is an html file. "
"For example, `/tmp/inconsistencies.html` will contain messages like the "
"following :"
msgstr ""

#: ../../../CommandGuide/llvm-exegesis.rst:159
msgid ""
"Note that the scheduling class names will be resolved only when :program:"
"`llvm-exegesis` is compiled in debug mode, else only the class id will be "
"shown. This does not invalidate any of the analysis results though."
msgstr ""

#: ../../../CommandGuide/llvm-exegesis.rst:164
msgid "OPTIONS"
msgstr ""

#: ../../../CommandGuide/llvm-exegesis.rst:168
msgid "Print a summary of command line options."
msgstr ""

#: ../../../CommandGuide/llvm-exegesis.rst:172
msgid ""
"Specify the opcode to measure, by index. Specifying `-1` will result in "
"measuring every existing opcode. See example 1 for details. Either `opcode-"
"index`, `opcode-name` or `snippets-file` must be set."
msgstr ""

#: ../../../CommandGuide/llvm-exegesis.rst:178
msgid ""
"Specify the opcode to measure, by name. Several opcodes can be specified as "
"a comma-separated list. See example 1 for details. Either `opcode-index`, "
"`opcode-name` or `snippets-file` must be set."
msgstr ""

#: ../../../CommandGuide/llvm-exegesis.rst:184
msgid ""
"Specify the custom code snippet to measure. See example 2 for details. "
"Either `opcode-index`, `opcode-name` or `snippets-file` must be set."
msgstr ""

#: ../../../CommandGuide/llvm-exegesis.rst:189
msgid ""
"Specify the run mode. Note that some modes have additional requirements and "
"options."
msgstr ""

#: ../../../CommandGuide/llvm-exegesis.rst:191
msgid ""
"`latency` mode can be  make use of either RDTSC or LBR. `latency[LBR]` is "
"only available on X86 (at least `Skylake`). To run in `latency` mode, a "
"positive value must be specified for `x86-lbr-sample-period` and `--"
"repetition-mode=loop`."
msgstr ""

#: ../../../CommandGuide/llvm-exegesis.rst:196
msgid ""
"In `analysis` mode, you also need to specify at least one of the `-analysis-"
"clusters-output-file=` and `-analysis-inconsistencies-output-file=`."
msgstr ""

#: ../../../CommandGuide/llvm-exegesis.rst:201
msgid ""
"By default, when `-mode=` is specified, the generated snippet will be "
"executed and measured, and that requires that we are running on the hardware "
"for which the snippet was generated, and that supports performance "
"measurements. However, it is possible to stop at some stage before "
"measuring. Choices are: * ``prepare-snippet``: Only generate the minimal "
"instruction sequence. * ``prepare-and-assemble-snippet``: Same as ``prepare-"
"snippet``, but also dumps an excerpt of the sequence (hex encoded). * "
"``assemble-measured-code``: Same as ``prepare-and-assemble-snippet``. but "
"also creates the full sequence that can be dumped to a file using ``--dump-"
"object-to-disk``. * ``measure``: Same as ``assemble-measured-code``, but "
"also runs the measurement."
msgstr ""

#: ../../../CommandGuide/llvm-exegesis.rst:212
msgid ""
"Specify the LBR sampling period - how many branches before we take a sample. "
"When a positive value is specified for this option and when the mode is "
"`latency`, we will use LBRs for measuring. On choosing the \"right\" "
"sampling period, a small value is preferred, but throttling could occur if "
"the sampling is too frequent. A prime number should be used to avoid "
"consistently skipping certain blocks."
msgstr ""

#: ../../../CommandGuide/llvm-exegesis.rst:221
msgid ""
"Using the upper xmm registers (xmm8-xmm15) forces a longer instruction "
"encoding which may put greater pressure on the frontend fetch and decode "
"stages, potentially reducing the rate that instructions are dispatched to "
"the backend, particularly on older hardware. Comparing baseline results with "
"this mode enabled can help determine the effects of the frontend and can be "
"used to improve latency and throughput estimates."
msgstr ""

#: ../../../CommandGuide/llvm-exegesis.rst:230
msgid ""
"Specify the repetition mode. `duplicate` will create a large, straight line "
"basic block with `num-repetitions` instructions (repeating the snippet `num-"
"repetitions`/`snippet size` times). `loop` will, optionally, duplicate the "
"snippet until the loop body contains at least `loop-body-size` instructions, "
"and then wrap the result in a loop which will execute `num-repetitions` "
"instructions (thus, again, repeating the snippet `num-repetitions`/`snippet "
"size` times). The `loop` mode, especially with loop unrolling tends to "
"better hide the effects of the CPU frontend on architectures that cache "
"decoded instructions, but consumes a register for counting iterations. If "
"performing an analysis over many opcodes, it may be best to instead use the "
"`min` mode, which will run each other mode, and produce the minimal measured "
"result."
msgstr ""

#: ../../../CommandGuide/llvm-exegesis.rst:245
msgid ""
"Specify the target number of executed instructions. Note that the actual "
"repetition count of the snippet will be `num-repetitions`/`snippet size`. "
"Higher values lead to more accurate measurements but lengthen the benchmark."
msgstr ""

#: ../../../CommandGuide/llvm-exegesis.rst:251
msgid ""
"Only effective for `-repetition-mode=[loop|min]`. Instead of looping over "
"the snippet directly, first duplicate it so that the loop body contains at "
"least this many instructions. This potentially results in loop body being "
"cached in the CPU Op Cache / Loop Cache, which allows to which may have "
"higher throughput than the CPU decoders."
msgstr ""

#: ../../../CommandGuide/llvm-exegesis.rst:259
msgid ""
"Specify the maximum configurations that can be generated for each opcode. By "
"default this is `1`, meaning that we assume that a single measurement is "
"enough to characterize an opcode. This might not be true of all "
"instructions: for example, the performance characteristics of the LEA "
"instruction on X86 depends on the value of assigned registers and "
"immediates. Setting a value of `-max-configs-per-opcode` larger than `1` "
"allows `llvm-exegesis` to explore more configurations to discover if some "
"register or immediate assignments lead to different performance "
"characteristics."
msgstr ""

#: ../../../CommandGuide/llvm-exegesis.rst:271
msgid ""
"File to read (`analysis` mode) or write (`latency`/`uops`/"
"`inverse_throughput` modes) benchmark results. \"-\" uses stdin/stdout."
msgstr ""

#: ../../../CommandGuide/llvm-exegesis.rst:276
msgid ""
"If provided, write the analysis clusters as CSV to this file. \"-\" prints "
"to stdout. By default, this analysis is not run."
msgstr ""

#: ../../../CommandGuide/llvm-exegesis.rst:281
msgid ""
"If non-empty, write inconsistencies found during analysis to this file. `-` "
"prints to stdout. By default, this analysis is not run."
msgstr ""

#: ../../../CommandGuide/llvm-exegesis.rst:286
msgid ""
"By default, all benchmark results are analysed, but sometimes it may be "
"useful to only look at those that to not involve memory, or vice versa. This "
"option allows to either keep all benchmarks, or filter out (ignore) either "
"all the ones that do involve memory (involve instructions that may read or "
"write to memory), or the opposite, to only keep such benchmarks."
msgstr ""

#: ../../../CommandGuide/llvm-exegesis.rst:294
msgid ""
"Specify the clustering algorithm to use. By default DBSCAN will be used. "
"Naive clustering algorithm is better for doing further work on the `-"
"analysis-inconsistencies-output-file=` output, it will create one cluster "
"per opcode, and check that the cluster is stable (all points are neighbours)."
msgstr ""

#: ../../../CommandGuide/llvm-exegesis.rst:301
msgid ""
"Specify the numPoints parameters to be used for DBSCAN clustering "
"(`analysis` mode, DBSCAN only)."
msgstr ""

#: ../../../CommandGuide/llvm-exegesis.rst:306
msgid ""
"Specify the epsilon parameter used for clustering of benchmark points "
"(`analysis` mode)."
msgstr ""

#: ../../../CommandGuide/llvm-exegesis.rst:311
msgid ""
"Specify the epsilon parameter used for detection of when the cluster is "
"different from the LLVM schedule profile values (`analysis` mode)."
msgstr ""

#: ../../../CommandGuide/llvm-exegesis.rst:316
msgid ""
"If there is more than one benchmark for an opcode, said benchmarks may end "
"up not being clustered into the same cluster if the measured performance "
"characteristics are different. by default all such opcodes are filtered out. "
"This flag will instead show only such unstable opcodes."
msgstr ""

#: ../../../CommandGuide/llvm-exegesis.rst:323
msgid ""
"If set, ignore instructions that do not have a sched class (class idx = 0)."
msgstr ""

#: ../../../CommandGuide/llvm-exegesis.rst:327
msgid "Target triple. See `-version` for available targets."
msgstr ""

#: ../../../CommandGuide/llvm-exegesis.rst:331
msgid ""
"If set, measure the cpu characteristics using the counters for this CPU. "
"This is useful when creating new sched models (the host CPU is unknown to "
"LLVM). (`-mcpu=help` for details)"
msgstr ""

#: ../../../CommandGuide/llvm-exegesis.rst:337
msgid ""
"By default, llvm-exegesis will analyze the benchmarks for the triple/CPU "
"they were measured for, but if you want to analyze them for some other "
"combination (specified via `-mtriple`/`-mcpu`), you can pass this flag."
msgstr ""

#: ../../../CommandGuide/llvm-exegesis.rst:343
msgid ""
"If set,  llvm-exegesis will dump the generated code to a temporary file to "
"enable code inspection. Disabled by default."
msgstr ""

#: ../../../CommandGuide/llvm-exegesis.rst:347
msgid "EXIT STATUS"
msgstr ""

#: ../../../CommandGuide/llvm-exegesis.rst:349
msgid ""
":program:`llvm-exegesis` returns 0 on success. Otherwise, an error message "
"is printed to standard error, and the tool returns a non 0 value."
msgstr ""
