# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../CommandGuide/lli.rst:2
msgid "lli - directly execute programs from LLVM bitcode"
msgstr ""

#: ../../../CommandGuide/lli.rst:5
msgid "SYNOPSIS"
msgstr ""

#: ../../../CommandGuide/lli.rst:7
msgid ":program:`lli` [*options*] [*filename*] [*program args*]"
msgstr ""

#: ../../../CommandGuide/lli.rst:10
msgid "DESCRIPTION"
msgstr ""

#: ../../../CommandGuide/lli.rst:12
msgid ""
":program:`lli` directly executes programs in LLVM bitcode format.  It takes "
"a program in LLVM bitcode format and executes it using a just-in-time "
"compiler or an interpreter."
msgstr ""

#: ../../../CommandGuide/lli.rst:16
msgid ""
":program:`lli` is *not* an emulator. It will not execute IR of different "
"architectures and it can only interpret (or JIT-compile) for the host "
"architecture."
msgstr ""

#: ../../../CommandGuide/lli.rst:19
msgid ""
"The JIT compiler takes the same arguments as other tools, like :program:"
"`llc`, but they don't necessarily work for the interpreter."
msgstr ""

#: ../../../CommandGuide/lli.rst:22
msgid ""
"If `filename` is not specified, then :program:`lli` reads the LLVM bitcode "
"for the program from standard input."
msgstr ""

#: ../../../CommandGuide/lli.rst:25
msgid ""
"The optional *args* specified on the command line are passed to the program "
"as arguments."
msgstr ""

#: ../../../CommandGuide/lli.rst:29
msgid "GENERAL OPTIONS"
msgstr ""

#: ../../../CommandGuide/lli.rst:33
msgid "Override the ``argv[0]`` value passed into the executing program."
msgstr ""

#: ../../../CommandGuide/lli.rst:37
msgid ""
"If set to true, use the interpreter even if a just-in-time compiler is "
"available for this architecture. Defaults to false."
msgstr ""

#: ../../../CommandGuide/lli.rst:42
msgid "Print a summary of command line options."
msgstr ""

#: ../../../CommandGuide/lli.rst:46
msgid ""
"Causes :program:`lli` to load the plugin (shared object) named "
"*pluginfilename* and use it for optimization."
msgstr ""

#: ../../../CommandGuide/lli.rst:51
msgid ""
"Print statistics from the code-generation passes. This is only meaningful "
"for the just-in-time compiler, at present."
msgstr ""

#: ../../../CommandGuide/lli.rst:56
msgid ""
"Record the amount of time needed for each code-generation pass and print it "
"to standard error."
msgstr ""

#: ../../../CommandGuide/lli.rst:61
msgid ""
"Print out the version of :program:`lli` and exit without doing anything else."
msgstr ""

#: ../../../CommandGuide/lli.rst:64
msgid "TARGET OPTIONS"
msgstr ""

#: ../../../CommandGuide/lli.rst:68
msgid ""
"Override the target triple specified in the input bitcode file with the "
"specified string.  This may result in a crash if you pick an architecture "
"which is not compatible with the current system."
msgstr ""

#: ../../../CommandGuide/lli.rst:74
msgid ""
"Specify the architecture for which to generate assembly, overriding the "
"target encoded in the bitcode file.  See the output of **llc -help** for a "
"list of valid architectures.  By default this is inferred from the target "
"triple or autodetected to the current architecture."
msgstr ""

#: ../../../CommandGuide/lli.rst:81
msgid ""
"Specify a specific chip in the current architecture to generate code for. By "
"default this is inferred from the target triple and autodetected to the "
"current architecture.  For a list of available CPUs, use: **llvm-as < /dev/"
"null | llc -march=xyz -mcpu=help**"
msgstr ""

#: ../../../CommandGuide/lli.rst:88
msgid ""
"Override or control specific attributes of the target, such as whether SIMD "
"operations are enabled or not.  The default set of attributes is set by the "
"current CPU.  For a list of available attributes, use: **llvm-as < /dev/null "
"| llc -march=xyz -mattr=help**"
msgstr ""

#: ../../../CommandGuide/lli.rst:94
msgid "FLOATING POINT OPTIONS"
msgstr ""

#: ../../../CommandGuide/lli.rst:98
msgid "Disable optimizations that may increase floating point precision."
msgstr ""

#: ../../../CommandGuide/lli.rst:102
msgid "Enable optimizations that assume no Inf values."
msgstr ""

#: ../../../CommandGuide/lli.rst:106
msgid "Enable optimizations that assume no NAN values."
msgstr ""

#: ../../../CommandGuide/lli.rst:110
msgid ""
"Causes :program:`lli` to enable optimizations that may decrease floating "
"point precision."
msgstr ""

#: ../../../CommandGuide/lli.rst:115
msgid ""
"Causes :program:`lli` to generate software floating point library calls "
"instead of equivalent hardware instructions."
msgstr ""

#: ../../../CommandGuide/lli.rst:119
msgid "CODE GENERATION OPTIONS"
msgstr ""

#: ../../../CommandGuide/lli.rst:123
msgid "Choose the code model from:"
msgstr ""

#: ../../../CommandGuide/lli.rst:136
msgid "Disable scheduling after register allocation."
msgstr ""

#: ../../../CommandGuide/lli.rst:140
msgid "Disable fusing of spill code into instructions."
msgstr ""

#: ../../../CommandGuide/lli.rst:144
msgid "Exception handling should be enabled in the just-in-time compiler."
msgstr ""

#: ../../../CommandGuide/lli.rst:148
msgid "Coalesce copies (default=true)."
msgstr ""

#: ../../../CommandGuide/lli.rst:152
msgid "Don't place zero-initialized symbols into the BSS section."
msgstr ""

#: ../../../CommandGuide/lli.rst:156
msgid "Instruction schedulers available (before register allocation):"
msgstr ""

#: ../../../CommandGuide/lli.rst:170
msgid "Register allocator to use (default=linearscan)"
msgstr ""

#: ../../../CommandGuide/lli.rst:180
msgid "Choose relocation model from:"
msgstr ""

#: ../../../CommandGuide/lli.rst:190
msgid "Spiller to use (default=local)"
msgstr ""

#: ../../../CommandGuide/lli.rst:199
msgid "Choose style of code to emit from X86 backend:"
msgstr ""

#: ../../../CommandGuide/lli.rst:207
msgid "EXIT STATUS"
msgstr ""

#: ../../../CommandGuide/lli.rst:209
msgid ""
"If :program:`lli` fails to load the program, it will exit with an exit code "
"of 1. Otherwise, it will return the exit code of the program it executes."
msgstr ""

#: ../../../CommandGuide/lli.rst:213
msgid "SEE ALSO"
msgstr ""

#: ../../../CommandGuide/lli.rst:215
msgid ":program:`llc`"
msgstr ""
