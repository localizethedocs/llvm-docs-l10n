# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../CommandGuide/lit.rst:2
msgid "lit - LLVM Integrated Tester"
msgstr ""

#: ../../../CommandGuide/lit.rst:7
msgid "SYNOPSIS"
msgstr ""

#: ../../../CommandGuide/lit.rst:9
msgid ":program:`lit` [*options*] [*tests*]"
msgstr ""

#: ../../../CommandGuide/lit.rst:12
msgid "DESCRIPTION"
msgstr ""

#: ../../../CommandGuide/lit.rst:14
msgid ""
":program:`lit` is a portable tool for executing LLVM and Clang style test "
"suites, summarizing their results, and providing indication of failures. :"
"program:`lit` is designed to be a lightweight testing tool with as simple a "
"user interface as possible."
msgstr ""

#: ../../../CommandGuide/lit.rst:19
msgid ""
":program:`lit` should be run with one or more *tests* to run specified on "
"the command line.  Tests can be either individual test files or directories "
"to search for tests (see :ref:`test-discovery`)."
msgstr ""

#: ../../../CommandGuide/lit.rst:23
msgid ""
"Each specified test will be executed (potentially in parallel) and once all "
"tests have been run :program:`lit` will print summary information on the "
"number of tests which passed or failed (see :ref:`test-status-results`).  "
"The :program:`lit` program will execute with a non-zero exit code if any "
"tests fail."
msgstr ""

#: ../../../CommandGuide/lit.rst:29
msgid ""
"By default :program:`lit` will use a succinct progress display and will only "
"print summary information for test failures.  See :ref:`output-options` for "
"options controlling the :program:`lit` progress display and output."
msgstr ""

#: ../../../CommandGuide/lit.rst:33
msgid ""
":program:`lit` also includes a number of options for controlling how tests "
"are executed (specific features may depend on the particular test format).  "
"See :ref:`execution-options` for more information."
msgstr ""

#: ../../../CommandGuide/lit.rst:37
msgid ""
"Finally, :program:`lit` also supports additional options for only running a "
"subset of the options specified on the command line, see :ref:`selection-"
"options` for more information."
msgstr ""

#: ../../../CommandGuide/lit.rst:41
msgid ""
":program:`lit` parses options from the environment variable ``LIT_OPTS`` "
"after parsing options from the command line.  ``LIT_OPTS`` is primarily "
"useful for supplementing or overriding the command-line options supplied to :"
"program:`lit` by ``check`` targets defined by a project's build system."
msgstr ""

#: ../../../CommandGuide/lit.rst:46
msgid ""
"Users interested in the :program:`lit` architecture or designing a :program:"
"`lit` testing implementation should see :ref:`lit-infrastructure`."
msgstr ""

#: ../../../CommandGuide/lit.rst:50
msgid "GENERAL OPTIONS"
msgstr ""

#: ../../../CommandGuide/lit.rst:54
msgid "Show the :program:`lit` help message."
msgstr ""

#: ../../../CommandGuide/lit.rst:58
msgid ""
"Run ``N`` tests in parallel.  By default, this is automatically chosen to "
"match the number of detected available CPUs."
msgstr ""

#: ../../../CommandGuide/lit.rst:63
msgid ""
"Search for :file:`{NAME}.cfg` and :file:`{NAME}.site.cfg` when searching for "
"test suites, instead of :file:`lit.cfg` and :file:`lit.site.cfg`."
msgstr ""

#: ../../../CommandGuide/lit.rst:68
msgid ""
"Add a user defined parameter ``NAME`` with the given ``VALUE`` (or the empty "
"string if not given).  The meaning and use of these parameters is test suite "
"dependent."
msgstr ""

#: ../../../CommandGuide/lit.rst:75
msgid "OUTPUT OPTIONS"
msgstr ""

#: ../../../CommandGuide/lit.rst:79
msgid "Suppress any output except for test failures."
msgstr ""

#: ../../../CommandGuide/lit.rst:83
msgid ""
"Show less output, for example don't show information on tests that pass."
msgstr ""

#: ../../../CommandGuide/lit.rst:87
msgid ""
"Show more information on test failures, for example the entire test output "
"instead of just the test result."
msgstr ""

#: ../../../CommandGuide/lit.rst:92
msgid ""
"Echo all commands to stdout, as they are being executed. This can be "
"valuable for debugging test failures, as the last echoed command will be the "
"one which has failed. :program:`lit` normally inserts a no-op command (``:`` "
"in the case of bash) with argument ``'RUN: at line N'`` before each command "
"pipeline, and this option also causes those no-op commands to be echoed to "
"stdout to help you locate the source line of the failed command. This option "
"implies ``--verbose``."
msgstr ""

#: ../../../CommandGuide/lit.rst:103
msgid ""
"Show more information about all tests, for example the entire test "
"commandline and output."
msgstr ""

#: ../../../CommandGuide/lit.rst:108
msgid "Do not use curses based progress bar."
msgstr ""

#: ../../../CommandGuide/lit.rst:112
msgid "Show the names of unsupported tests."
msgstr ""

#: ../../../CommandGuide/lit.rst:116
msgid "Show the names of tests that were expected to fail."
msgstr ""

#: ../../../CommandGuide/lit.rst:121
msgid "EXECUTION OPTIONS"
msgstr ""

#: ../../../CommandGuide/lit.rst:125
msgid ""
"Specify an additional ``PATH`` to use when searching for executables in "
"tests."
msgstr ""

#: ../../../CommandGuide/lit.rst:129
msgid ""
"Run individual tests under valgrind (using the memcheck tool).  The ``--"
"error-exitcode`` argument for valgrind is used so that valgrind failures "
"will cause the program to exit with a non-zero status."
msgstr ""

#: ../../../CommandGuide/lit.rst:133
msgid ""
"When this option is enabled, :program:`lit` will also automatically provide "
"a \"``valgrind``\" feature that can be used to conditionally disable (or "
"expect failure in) certain tests."
msgstr ""

#: ../../../CommandGuide/lit.rst:139
msgid ""
"When :option:`--vg` is used, specify an additional argument to pass to :"
"program:`valgrind` itself."
msgstr ""

#: ../../../CommandGuide/lit.rst:144
msgid ""
"When :option:`--vg` is used, enable memory leak checks.  When this option is "
"enabled, :program:`lit` will also automatically provide a \"``vg_leak``\" "
"feature that can be used to conditionally disable (or expect failure in) "
"certain tests."
msgstr ""

#: ../../../CommandGuide/lit.rst:151
msgid ""
"Track the wall time individual tests take to execute and includes the "
"results in the summary output.  This is useful for determining which tests "
"in a test suite take the most time to execute.  Note that this option is "
"most useful with ``-j 1``."
msgstr ""

#: ../../../CommandGuide/lit.rst:159
msgid "SELECTION OPTIONS"
msgstr ""

#: ../../../CommandGuide/lit.rst:163
msgid "Run at most ``N`` tests and then terminate."
msgstr ""

#: ../../../CommandGuide/lit.rst:167
msgid ""
"Spend at most ``N`` seconds (approximately) running tests and then terminate."
msgstr ""

#: ../../../CommandGuide/lit.rst:171
msgid "Run the tests in a random order."
msgstr ""

#: ../../../CommandGuide/lit.rst:175
msgid ""
"Divide the set of selected tests into ``M`` equal-sized subsets or "
"\"shards\", and run only one of them.  Must be used with the ``--run-"
"shard=N`` option, which selects the shard to run. The environment variable "
"``LIT_NUM_SHARDS`` can also be used in place of this option. These two "
"options provide a coarse mechanism for paritioning large testsuites, for "
"parallel execution on separate machines (say in a large testing farm)."
msgstr ""

#: ../../../CommandGuide/lit.rst:185
msgid ""
"Select which shard to run, assuming the ``--num-shards=M`` option was "
"provided. The two options must be used together, and the value of ``N`` must "
"be in the range ``1..M``. The environment variable ``LIT_RUN_SHARD`` can "
"also be used in place of this option."
msgstr ""

#: ../../../CommandGuide/lit.rst:192
msgid ""
"Run only those tests whose name matches the regular expression specified in "
"``REGEXP``. The environment variable ``LIT_FILTER`` can be also used in "
"place of this option, which is especially useful in environments where the "
"call to ``lit`` is issued indirectly."
msgstr ""

#: ../../../CommandGuide/lit.rst:198
msgid "ADDITIONAL OPTIONS"
msgstr ""

#: ../../../CommandGuide/lit.rst:202
msgid ""
"Run :program:`lit` in debug mode, for debugging configuration issues and :"
"program:`lit` itself."
msgstr ""

#: ../../../CommandGuide/lit.rst:207
msgid "List the discovered test suites and exit."
msgstr ""

#: ../../../CommandGuide/lit.rst:211
msgid "List all of the discovered tests and exit."
msgstr ""

#: ../../../CommandGuide/lit.rst:214
msgid "EXIT STATUS"
msgstr ""

#: ../../../CommandGuide/lit.rst:216
msgid ""
":program:`lit` will exit with an exit code of 1 if there are any FAIL or "
"XPASS results.  Otherwise, it will exit with the status 0.  Other exit codes "
"are used for non-test related failures (for example a user error or an "
"internal program error)."
msgstr ""

#: ../../../CommandGuide/lit.rst:224 ../../../CommandGuide/lit.rst:373
msgid "TEST DISCOVERY"
msgstr ""

#: ../../../CommandGuide/lit.rst:226
msgid ""
"The inputs passed to :program:`lit` can be either individual tests, or "
"entire directories or hierarchies of tests to run.  When :program:`lit` "
"starts up, the first thing it does is convert the inputs into a complete "
"list of tests to run as part of *test discovery*."
msgstr ""

#: ../../../CommandGuide/lit.rst:231
msgid ""
"In the :program:`lit` model, every test must exist inside some *test "
"suite*. :program:`lit` resolves the inputs specified on the command line to "
"test suites by searching upwards from the input path until it finds a :file:"
"`lit.cfg` or :file:`lit.site.cfg` file.  These files serve as both a marker "
"of test suites and as configuration files which :program:`lit` loads in "
"order to understand how to find and run the tests inside the test suite."
msgstr ""

#: ../../../CommandGuide/lit.rst:238
msgid ""
"Once :program:`lit` has mapped the inputs into test suites it traverses the "
"list of inputs adding tests for individual files and recursively searching "
"for tests in directories."
msgstr ""

#: ../../../CommandGuide/lit.rst:242
msgid ""
"This behavior makes it easy to specify a subset of tests to run, while still "
"allowing the test suite configuration to control exactly how tests are "
"interpreted.  In addition, :program:`lit` always identifies tests by the "
"test suite they are in, and their relative path inside the test suite.  For "
"appropriately configured projects, this allows :program:`lit` to provide "
"convenient and flexible support for out-of-tree builds."
msgstr ""

#: ../../../CommandGuide/lit.rst:252
msgid "TEST STATUS RESULTS"
msgstr ""

#: ../../../CommandGuide/lit.rst:254
msgid "Each test ultimately produces one of the following six results:"
msgstr ""

#: ../../../CommandGuide/lit.rst:256
msgid "**PASS**"
msgstr ""

#: ../../../CommandGuide/lit.rst:258
msgid "The test succeeded."
msgstr ""

#: ../../../CommandGuide/lit.rst:260
msgid "**XFAIL**"
msgstr ""

#: ../../../CommandGuide/lit.rst:262
msgid ""
"The test failed, but that is expected.  This is used for test formats which "
"allow specifying that a test does not currently work, but wish to leave it "
"in the test suite."
msgstr ""

#: ../../../CommandGuide/lit.rst:266
msgid "**XPASS**"
msgstr ""

#: ../../../CommandGuide/lit.rst:268
msgid ""
"The test succeeded, but it was expected to fail.  This is used for tests "
"which were specified as expected to fail, but are now succeeding (generally "
"because the feature they test was broken and has been fixed)."
msgstr ""

#: ../../../CommandGuide/lit.rst:272
msgid "**FAIL**"
msgstr ""

#: ../../../CommandGuide/lit.rst:274
msgid "The test failed."
msgstr ""

#: ../../../CommandGuide/lit.rst:276
msgid "**UNRESOLVED**"
msgstr ""

#: ../../../CommandGuide/lit.rst:278
msgid ""
"The test result could not be determined.  For example, this occurs when the "
"test could not be run, the test itself is invalid, or the test was "
"interrupted."
msgstr ""

#: ../../../CommandGuide/lit.rst:281
msgid "**UNSUPPORTED**"
msgstr ""

#: ../../../CommandGuide/lit.rst:283
msgid ""
"The test is not supported in this environment.  This is used by test formats "
"which can report unsupported tests."
msgstr ""

#: ../../../CommandGuide/lit.rst:286
msgid ""
"Depending on the test format tests may produce additional information about "
"their status (generally only for failures).  See the :ref:`output-options` "
"section for more information."
msgstr ""

#: ../../../CommandGuide/lit.rst:293
msgid "LIT INFRASTRUCTURE"
msgstr ""

#: ../../../CommandGuide/lit.rst:295
msgid ""
"This section describes the :program:`lit` testing architecture for users "
"interested in creating a new :program:`lit` testing implementation, or "
"extending an existing one."
msgstr ""

#: ../../../CommandGuide/lit.rst:298
msgid ""
":program:`lit` proper is primarily an infrastructure for discovering and "
"running arbitrary tests, and to expose a single convenient interface to "
"these tests. :program:`lit` itself doesn't know how to run tests, rather "
"this logic is defined by *test suites*."
msgstr ""

#: ../../../CommandGuide/lit.rst:304
msgid "TEST SUITES"
msgstr ""

#: ../../../CommandGuide/lit.rst:306
msgid ""
"As described in :ref:`test-discovery`, tests are always located inside a "
"*test suite*.  Test suites serve to define the format of the tests they "
"contain, the logic for finding those tests, and any additional information "
"to run the tests."
msgstr ""

#: ../../../CommandGuide/lit.rst:310
msgid ""
":program:`lit` identifies test suites as directories containing ``lit.cfg`` "
"or ``lit.site.cfg`` files (see also :option:`--config-prefix`).  Test suites "
"are initially discovered by recursively searching up the directory hierarchy "
"for all the input files passed on the command line.  You can use :option:`--"
"show-suites` to display the discovered test suites at startup."
msgstr ""

#: ../../../CommandGuide/lit.rst:316
msgid ""
"Once a test suite is discovered, its config file is loaded.  Config files "
"themselves are Python modules which will be executed.  When the config file "
"is executed, two important global variables are predefined:"
msgstr ""

#: ../../../CommandGuide/lit.rst:320
msgid "**lit_config**"
msgstr ""

#: ../../../CommandGuide/lit.rst:322
msgid ""
"The global **lit** configuration object (a *LitConfig* instance), which "
"defines the builtin test formats, global configuration parameters, and other "
"helper routines for implementing test configurations."
msgstr ""

#: ../../../CommandGuide/lit.rst:326
msgid "**config**"
msgstr ""

#: ../../../CommandGuide/lit.rst:328
msgid ""
"This is the config object (a *TestingConfig* instance) for the test suite, "
"which the config file is expected to populate.  The following variables are "
"also available on the *config* object, some of which must be set by the "
"config and others are optional or predefined:"
msgstr ""

#: ../../../CommandGuide/lit.rst:333
msgid ""
"**name** *[required]* The name of the test suite, for use in reports and "
"diagnostics."
msgstr ""

#: ../../../CommandGuide/lit.rst:336
msgid ""
"**test_format** *[required]* The test format object which will be used to "
"discover and run tests in the test suite.  Generally this will be a builtin "
"test format available from the *lit.formats* module."
msgstr ""

#: ../../../CommandGuide/lit.rst:340
msgid ""
"**test_source_root** The filesystem path to the test suite root.  For out-of-"
"dir builds this is the directory that will be scanned for tests."
msgstr ""

#: ../../../CommandGuide/lit.rst:343
msgid ""
"**test_exec_root** For out-of-dir builds, the path to the test suite root "
"inside the object directory.  This is where tests will be run and temporary "
"output files placed."
msgstr ""

#: ../../../CommandGuide/lit.rst:347
msgid ""
"**environment** A dictionary representing the environment to use when "
"executing tests in the suite."
msgstr ""

#: ../../../CommandGuide/lit.rst:350
msgid ""
"**suffixes** For **lit** test formats which scan directories for tests, this "
"variable is a list of suffixes to identify test files.  Used by: *ShTest*."
msgstr ""

#: ../../../CommandGuide/lit.rst:353
msgid ""
"**substitutions** For **lit** test formats which substitute variables into a "
"test script, the list of substitutions to perform.  Used by: *ShTest*."
msgstr ""

#: ../../../CommandGuide/lit.rst:356
msgid ""
"**unsupported** Mark an unsupported directory, all tests within it will be "
"reported as unsupported.  Used by: *ShTest*."
msgstr ""

#: ../../../CommandGuide/lit.rst:359
msgid ""
"**parent** The parent configuration, this is the config object for the "
"directory containing the test suite, or None."
msgstr ""

#: ../../../CommandGuide/lit.rst:362
msgid ""
"**root** The root configuration.  This is the top-most :program:`lit` "
"configuration in the project."
msgstr ""

#: ../../../CommandGuide/lit.rst:365
msgid ""
"**pipefail** Normally a test using a shell pipe fails if any of the commands "
"on the pipe fail. If this is not desired, setting this variable to false "
"makes the test fail only if the last command in the pipe fails."
msgstr ""

#: ../../../CommandGuide/lit.rst:369
msgid ""
"**available_features** A set of features that can be used in `XFAIL`, "
"`REQUIRES`, and `UNSUPPORTED` directives."
msgstr ""

#: ../../../CommandGuide/lit.rst:375
msgid ""
"Once test suites are located, :program:`lit` recursively traverses the "
"source directory (following *test_source_root*) looking for tests.  When :"
"program:`lit` enters a sub-directory, it first checks to see if a nested "
"test suite is defined in that directory.  If so, it loads that test suite "
"recursively, otherwise it instantiates a local test config for the directory "
"(see :ref:`local-configuration-files`)."
msgstr ""

#: ../../../CommandGuide/lit.rst:382
msgid ""
"Tests are identified by the test suite they are contained within, and the "
"relative path inside that suite.  Note that the relative path may not refer "
"to an actual file on disk; some test formats (such as *GoogleTest*) define "
"\"virtual tests\" which have a path that contains both the path to the "
"actual test file and a subpath to identify the virtual test."
msgstr ""

#: ../../../CommandGuide/lit.rst:391
msgid "LOCAL CONFIGURATION FILES"
msgstr ""

#: ../../../CommandGuide/lit.rst:393
msgid ""
"When :program:`lit` loads a subdirectory in a test suite, it instantiates a "
"local test configuration by cloning the configuration for the parent "
"directory --- the root of this configuration chain will always be a test "
"suite.  Once the test configuration is cloned :program:`lit` checks for a "
"*lit.local.cfg* file in the subdirectory.  If present, this file will be "
"loaded and can be used to specialize the configuration for each individual "
"directory.  This facility can be used to define subdirectories of optional "
"tests, or to change other configuration parameters --- for example, to "
"change the test format, or the suffixes which identify test files."
msgstr ""

#: ../../../CommandGuide/lit.rst:404
msgid "PRE-DEFINED SUBSTITUTIONS"
msgstr ""

#: ../../../CommandGuide/lit.rst:406
msgid ""
":program:`lit` provides various patterns that can be used with the RUN "
"command. These are defined in TestRunner.py. The base set of substitutions "
"are:"
msgstr ""

#: ../../../CommandGuide/lit.rst:410
msgid "Macro"
msgstr ""

#: ../../../CommandGuide/lit.rst:410
msgid "Substitution"
msgstr ""

#: ../../../CommandGuide/lit.rst:412
msgid "%s"
msgstr ""

#: ../../../CommandGuide/lit.rst:412
msgid "source path (path to the file currently being run)"
msgstr ""

#: ../../../CommandGuide/lit.rst:413
msgid "%S"
msgstr ""

#: ../../../CommandGuide/lit.rst:413
msgid "source dir (directory of the file currently being run)"
msgstr ""

#: ../../../CommandGuide/lit.rst:414
msgid "%p"
msgstr ""

#: ../../../CommandGuide/lit.rst:414
msgid "same as %S"
msgstr ""

#: ../../../CommandGuide/lit.rst:415
msgid "%{pathsep}"
msgstr ""

#: ../../../CommandGuide/lit.rst:415
msgid "path separator"
msgstr ""

#: ../../../CommandGuide/lit.rst:416
msgid "%t"
msgstr ""

#: ../../../CommandGuide/lit.rst:416
msgid "temporary file name unique to the test"
msgstr ""

#: ../../../CommandGuide/lit.rst:417
msgid "%T"
msgstr ""

#: ../../../CommandGuide/lit.rst:417
msgid "parent directory of %t (not unique, deprecated, do not use)"
msgstr ""

#: ../../../CommandGuide/lit.rst:418
msgid "%%"
msgstr ""

#: ../../../CommandGuide/lit.rst:418
msgid "%"
msgstr ""

#: ../../../CommandGuide/lit.rst:421
msgid ""
"Other substitutions are provided that are variations on this base set and "
"further substitution patterns can be defined by each test module. See the "
"modules :ref:`local-configuration-files`."
msgstr ""

#: ../../../CommandGuide/lit.rst:425
msgid ""
"More detailed information on substitutions can be found in the :doc:`../"
"TestingGuide`."
msgstr ""

#: ../../../CommandGuide/lit.rst:429
msgid "TEST RUN OUTPUT FORMAT"
msgstr ""

#: ../../../CommandGuide/lit.rst:431
msgid ""
"The :program:`lit` output for a test run conforms to the following schema, "
"in both short and verbose modes (although in short mode no PASS lines will "
"be shown).  This schema has been chosen to be relatively easy to reliably "
"parse by a machine (for example in buildbot log scraping), and for other "
"tools to generate."
msgstr ""

#: ../../../CommandGuide/lit.rst:437
msgid "Each test result is expected to appear on a line that matches:"
msgstr ""

#: ../../../CommandGuide/lit.rst:443
msgid ""
"where ``<result-code>`` is a standard test result such as PASS, FAIL, XFAIL, "
"XPASS, UNRESOLVED, or UNSUPPORTED.  The performance result codes of IMPROVED "
"and REGRESSED are also allowed."
msgstr ""

#: ../../../CommandGuide/lit.rst:447
msgid ""
"The ``<test name>`` field can consist of an arbitrary string containing no "
"newline."
msgstr ""

#: ../../../CommandGuide/lit.rst:450
msgid ""
"The ``<progress info>`` field can be used to report progress information "
"such as (1/300) or can be empty, but even when empty the parentheses are "
"required."
msgstr ""

#: ../../../CommandGuide/lit.rst:453
msgid ""
"Each test result may include additional (multiline) log information in the "
"following format:"
msgstr ""

#: ../../../CommandGuide/lit.rst:462
msgid ""
"where ``<test name>`` should be the name of a preceding reported test, "
"``<log delineator>`` is a string of \"*\" characters *at least* four "
"characters long (the recommended length is 20), and ``<trailing "
"delineator>`` is an arbitrary (unparsed) string."
msgstr ""

#: ../../../CommandGuide/lit.rst:467
msgid ""
"The following is an example of a test run output which consists of four "
"tests A, B, C, and D, and a log message for the failing test C:"
msgstr ""

#: ../../../CommandGuide/lit.rst:481
msgid "LIT EXAMPLE TESTS"
msgstr ""

#: ../../../CommandGuide/lit.rst:483
msgid ""
"The :program:`lit` distribution contains several example implementations of "
"test suites in the *ExampleTests* directory."
msgstr ""

#: ../../../CommandGuide/lit.rst:487
msgid "SEE ALSO"
msgstr ""

#: ../../../CommandGuide/lit.rst:489
msgid "valgrind(1)"
msgstr ""
