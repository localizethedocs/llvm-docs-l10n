# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 15\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../CommandGuide/llvm-ifs.rst:2
msgid "llvm-ifs - shared object stubbing tool"
msgstr ""

#: ../../../CommandGuide/llvm-ifs.rst:7
msgid "SYNOPSIS"
msgstr ""

#: ../../../CommandGuide/llvm-ifs.rst:9
msgid ":program:`llvm-ifs` [*options*] *inputs*"
msgstr ""

#: ../../../CommandGuide/llvm-ifs.rst:12
msgid "DESCRIPTION"
msgstr ""

#: ../../../CommandGuide/llvm-ifs.rst:14
msgid ""
":program:`llvm-ifs` is a tool that jointly produces human readable text-"
"based stubs (.ifs files) for shared objects and linkable shared object stubs "
"(.so files) from either ELF shared objects or text-based stubs. The text-"
"based stubs is useful for monitoring ABI changes of the shared object. The "
"linkable shared object stubs can be used to avoid unnecessary relinks when "
"the ABI of shared libraries does not change."
msgstr ""

#: ../../../CommandGuide/llvm-ifs.rst:23
msgid "IFS FORMATS"
msgstr ""

#: ../../../CommandGuide/llvm-ifs.rst:25
msgid ""
"Here is an example of the text representation (IFS) of a shared object "
"produced by the :program:`llvm-ifs`:"
msgstr ""

#: ../../../CommandGuide/llvm-ifs.rst:45
msgid "``IFSVersion``: Version of the IFS file for reader compatibility."
msgstr ""

#: ../../../CommandGuide/llvm-ifs.rst:47
msgid ""
"``SoName`` (optional): Name of the shared object file that is being stubbed."
msgstr ""

#: ../../../CommandGuide/llvm-ifs.rst:49
msgid ""
"``Target`` (optional): The architecture, endianness and bitwise information "
"of this shared object. It can be either in explicit format or in implicit "
"LLVM triple format. It can be optional and can be overridden from command "
"line options."
msgstr ""

#: ../../../CommandGuide/llvm-ifs.rst:54
msgid ""
"``NeededLibs``: The list of the external shared objects that this library "
"depends on."
msgstr ""

#: ../../../CommandGuide/llvm-ifs.rst:56
msgid ""
"``Symbols``: A collection of all data needed to link objects for each "
"symbol, sorted by name in ascending order."
msgstr ""

#: ../../../CommandGuide/llvm-ifs.rst:58
msgid "``Name``: Symbol name."
msgstr ""

#: ../../../CommandGuide/llvm-ifs.rst:60
msgid ""
"``Type``: Whether the symbol is an object, function, no-type, thread local "
"storage, or unknown. Symbol types not explicitly supported are mapped as "
"unknown to improve signal-to-noise ratio."
msgstr ""

#: ../../../CommandGuide/llvm-ifs.rst:62
msgid ""
"``Size``: The size of the symbol in question, doesn't apply to functions, "
"and is optional for NoType symbols."
msgstr ""

#: ../../../CommandGuide/llvm-ifs.rst:64
msgid ""
"``Undefined``: Whether or not the symbol is defined in this shared object "
"file."
msgstr ""

#: ../../../CommandGuide/llvm-ifs.rst:66
msgid "``Weak``: Whether or not the symbol should be treated as weak."
msgstr ""

#: ../../../CommandGuide/llvm-ifs.rst:68
msgid ""
"``Warning`` (optional): Warning text to output when this symbol is linked "
"against."
msgstr ""

#: ../../../CommandGuide/llvm-ifs.rst:70
msgid ""
"This YAML based text format contains everything that is needed to generate a "
"linkable ELF shared object as well as an Apple TAPI format file. The "
"ordering of symbols is sorted, so these files can be easily compared using "
"diff tools. If the content of the file changes, it indicates a potentially "
"ABI breaking change."
msgstr ""

#: ../../../CommandGuide/llvm-ifs.rst:78
msgid "ELF STUB FORMAT"
msgstr ""

#: ../../../CommandGuide/llvm-ifs.rst:80
msgid ""
"A minimum ELF file that can be used by linker should have following sections "
"properly populated:"
msgstr ""

#: ../../../CommandGuide/llvm-ifs.rst:82
msgid "ELF header."
msgstr ""

#: ../../../CommandGuide/llvm-ifs.rst:84
msgid "Section headers."
msgstr ""

#: ../../../CommandGuide/llvm-ifs.rst:86
msgid "Dynamic symbol table (``.dynsym`` section)."
msgstr ""

#: ../../../CommandGuide/llvm-ifs.rst:88
msgid "Dynamic string table (``.dynstr`` section)."
msgstr ""

#: ../../../CommandGuide/llvm-ifs.rst:90
msgid "Dynamic table (``.dynamic`` section)."
msgstr ""

#: ../../../CommandGuide/llvm-ifs.rst:92
msgid "``DT_SYMTAB`` entry."
msgstr ""

#: ../../../CommandGuide/llvm-ifs.rst:94
msgid "``DT_STRTAB`` entry."
msgstr ""

#: ../../../CommandGuide/llvm-ifs.rst:96
msgid "``DT_STRSZ`` entry."
msgstr ""

#: ../../../CommandGuide/llvm-ifs.rst:98
msgid "``DT_NEEDED`` entries. (optional)"
msgstr ""

#: ../../../CommandGuide/llvm-ifs.rst:100
msgid "``DT_SONAME`` entry. (optional)"
msgstr ""

#: ../../../CommandGuide/llvm-ifs.rst:102
msgid "Section header string table (``.shstrtab`` section)"
msgstr ""

#: ../../../CommandGuide/llvm-ifs.rst:104
msgid ""
"This ELF file may have compatibility issues with ELF analysis tools that "
"rely on the program headers. Linkers like LLD work fine with such a minimum "
"ELF file without errors."
msgstr ""

#: ../../../CommandGuide/llvm-ifs.rst:108
msgid "OPTIONS"
msgstr ""

#: ../../../CommandGuide/llvm-ifs.rst:112
msgid ""
"Specify input file format. Currently, only text IFS files and ELF shared "
"object files are supported. This flag is optional as the input format can be "
"inferred."
msgstr ""

#: ../../../CommandGuide/llvm-ifs.rst:118
msgid "Specify the output file for ELF shared object stub."
msgstr ""

#: ../../../CommandGuide/llvm-ifs.rst:122
msgid "Specify the output file for text IFS."
msgstr ""

#: ../../../CommandGuide/llvm-ifs.rst:126
msgid "Specify the output file for Apple TAPI tbd."
msgstr ""

#: ../../../CommandGuide/llvm-ifs.rst:130
msgid ""
"This flag is optional and it should only be used when reading an IFS file "
"which does not define the ``Arch`` (architecture). This flag defines the "
"architecture of the output file, and can be any string supported by ELF "
"'e_machine' field. If the value is conflicting with the IFS file, an error "
"will be reported and the program will stop."
msgstr ""

#: ../../../CommandGuide/llvm-ifs.rst:138
msgid ""
"This flag is optional and it should only be used when reading an IFS file "
"which does not define the ``Endianness``. This flag defines the endianness "
"of the output file. If the value is conflicting with the IFS file, an error "
"will be reported and the program will stop."
msgstr ""

#: ../../../CommandGuide/llvm-ifs.rst:145
msgid ""
"This flag is optional and it should only be used when reading an IFS file "
"which does not define the ``BitWidth``. This flag defines the bit width of "
"the output file. If the value is conflicting with the input IFS file, an "
"error will be reported and the program will stop."
msgstr ""

#: ../../../CommandGuide/llvm-ifs.rst:152
msgid ""
"This flag is optional and should only be used when reading an IFS file which "
"does not define any target information. This flag defines architecture, "
"endianness and bit width of the output file using llvm target triple. This "
"flag cannot be used simultaneously with other target related flags."
msgstr ""

#: ../../../CommandGuide/llvm-ifs.rst:159
msgid ""
"This flag is optional and should only be used when reading an ELF shared "
"object and generating an IFS file. by default, llvm-ifs will use '``Arch``, "
"``Endianness`` and ``BitWidth``' fields to reflect the target information "
"from the input object file. Using this flag will tell llvm-ifs the expected "
"target triple in the output IFS file. If the value matches the target "
"information from the object file, this value will be used in the 'Target:' "
"filed in the generated IFS. If it conflicts with the input object file, an "
"error will be reported and the program will stop."
msgstr ""

#: ../../../CommandGuide/llvm-ifs.rst:170
msgid ""
"This flag is optional and should only be used when outputting an IFS file. "
"This flag strips the ``Arch`` field from the IFS file so it can be "
"overridden later."
msgstr ""

#: ../../../CommandGuide/llvm-ifs.rst:176
msgid ""
"This flag is optional and should only be used when outputting an IFS file. "
"This flag strips the ``Endianness`` field from the IFS file so it can be "
"overridden later."
msgstr ""

#: ../../../CommandGuide/llvm-ifs.rst:182
msgid ""
"This flag is optional and should only be used when outputting an IFS file. "
"This flag strips the ``BitWidth`` field from the IFS file so it can be "
"overridden later."
msgstr ""

#: ../../../CommandGuide/llvm-ifs.rst:188
msgid ""
"This flag is optional and should only be used when outputting an IFS file. "
"This flag strips the ``Target`` field from the IFS file so it can be "
"overridden later."
msgstr ""

#: ../../../CommandGuide/llvm-ifs.rst:194
msgid ""
"When this flag is set, llvm-ifs will only write the output file if it does "
"not already exist or the content will be different from the existing file."
msgstr ""

#: ../../../CommandGuide/llvm-ifs.rst:199
msgid ""
"When this flag is set, llvm-ifs will remove the size field from the output "
"ifs file. This is useful for shared objects that only intend to be linked "
"against position independent code which doesn't need copy relocations, or "
"where the size of an object is not a useful part of the abi to track."
msgstr ""

#: ../../../CommandGuide/llvm-ifs.rst:205
msgid "EXIT STATUS"
msgstr ""

#: ../../../CommandGuide/llvm-ifs.rst:207
msgid ""
"If :program:`llvm-ifs` succeeds, it will exit with 0. Otherwise, if an error "
"occurs, it will exit with a non-zero value."
msgstr ""
