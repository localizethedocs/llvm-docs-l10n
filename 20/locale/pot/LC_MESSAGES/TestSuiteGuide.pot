# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 20\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:12+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../TestSuiteGuide.md:1
msgid "test-suite Guide"
msgstr ""

#: ../../../TestSuiteGuide.md:4
msgid "Quickstart"
msgstr ""

#: ../../../TestSuiteGuide.md:7
msgid ""
"The lit test runner is required to run the tests. You can either use one "
"from an LLVM build:"
msgstr ""

#: ../../../TestSuiteGuide.md:15
msgid ""
"An alternative is installing it as a Python package in a Python virtual "
"environment:"
msgstr ""

#: ../../../TestSuiteGuide.md:26
msgid ""
"Installing the official Python release of lit in a Python virtual "
"environment could also work. This will install the most recent  release of "
"lit:"
msgstr ""

#: ../../../TestSuiteGuide.md:38
msgid ""
"Please note that recent tests may rely on features not in the latest "
"released lit.  If in doubt, try one of the previous methods."
msgstr ""

#: ../../../TestSuiteGuide.md:41
msgid "Check out the `test-suite` module with:"
msgstr ""

#: ../../../TestSuiteGuide.md:47
msgid ""
"Create a build directory and use CMake to configure the suite. Use the "
"`CMAKE_C_COMPILER` option to specify the compiler to test. Use a cache file "
"to choose a typical build configuration:"
msgstr ""

#: ../../../TestSuiteGuide.md:59
msgid ""
"**NOTE!** if you are using your built clang, and you want to build and run "
"the MicroBenchmarks/XRay microbenchmarks, you need to add `compiler-rt` to "
"your `LLVM_ENABLE_RUNTIMES` cmake flag."
msgstr ""

#: ../../../TestSuiteGuide.md:63
msgid "Build the benchmarks:"
msgstr ""

#: ../../../TestSuiteGuide.md:73
msgid "Run the tests with lit:"
msgstr ""

#: ../../../TestSuiteGuide.md:88
msgid ""
"**NOTE!** even in the case you only want to get the compile-time "
"results(code size, llvm stats etc), you need to run the test with the above "
"`llvm-lit` command. In that case, the *results.json* file will contain "
"compile-time metrics."
msgstr ""

#: ../../../TestSuiteGuide.md:92
msgid "Show and compare result files (optional):"
msgstr ""

#: ../../../TestSuiteGuide.md:104
msgid "Structure"
msgstr ""

#: ../../../TestSuiteGuide.md:107
msgid ""
"The test-suite contains benchmark and test programs.  The programs come with "
"reference outputs so that their correctness can be checked.  The suite comes "
"with tools to collect metrics such as benchmark runtime, compilation time "
"and code size."
msgstr ""

#: ../../../TestSuiteGuide.md:112
msgid "The test-suite is divided into several directories:"
msgstr ""

#: ../../../TestSuiteGuide.md:114
msgid "`SingleSource/`"
msgstr ""

#: ../../../TestSuiteGuide.md:116
msgid ""
"Contains test programs that are only a single source file in size.  A "
"subdirectory may contain several programs."
msgstr ""

#: ../../../TestSuiteGuide.md:119
msgid "`MultiSource/`"
msgstr ""

#: ../../../TestSuiteGuide.md:121
msgid ""
"Contains subdirectories which entire programs with multiple source files. "
"Large benchmarks and whole applications go here."
msgstr ""

#: ../../../TestSuiteGuide.md:124
msgid "`MicroBenchmarks/`"
msgstr ""

#: ../../../TestSuiteGuide.md:126
msgid ""
"Programs using the [google-benchmark](https://github.com/google/benchmark) "
"library. The programs define functions that are run multiple times until the "
"measurement results are statistically significant."
msgstr ""

#: ../../../TestSuiteGuide.md:130
msgid "`External/`"
msgstr ""

#: ../../../TestSuiteGuide.md:132
msgid ""
"Contains descriptions and test data for code that cannot be directly "
"distributed with the test-suite. The most prominent members of this "
"directory are the SPEC CPU benchmark suites. See [External Suites](#external-"
"suites)."
msgstr ""

#: ../../../TestSuiteGuide.md:137
msgid "`Bitcode/`"
msgstr ""

#: ../../../TestSuiteGuide.md:139
msgid "These tests are mostly written in LLVM bitcode."
msgstr ""

#: ../../../TestSuiteGuide.md:141
msgid "`CTMark/`"
msgstr ""

#: ../../../TestSuiteGuide.md:143
msgid ""
"Contains symbolic links to other benchmarks forming a representative sample "
"for compilation performance measurements."
msgstr ""

#: ../../../TestSuiteGuide.md:146
msgid "Benchmarks"
msgstr ""

#: ../../../TestSuiteGuide.md:148
msgid ""
"Every program can work as a correctness test. Some programs are unsuitable "
"for performance measurements. Setting the `TEST_SUITE_BENCHMARKING_ONLY` "
"CMake option to `ON` will disable them."
msgstr ""

#: ../../../TestSuiteGuide.md:152
msgid ""
"The MultiSource benchmarks consist of the following apps and benchmarks:"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "MultiSource"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "Language"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "Application Area"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "Remark"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "7zip"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "C/C++"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "Compression/Decompression"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "ASCI_Purple"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "C"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "SMG2000 benchmark and solver"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "Memory intensive app"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "ASC_Sequoia"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "Simulation and solver"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "BitBench"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "uudecode/uuencode utility"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "Bit Stream benchmark for functional compilers"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "Bullet"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "C++"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "Bullet 2.75 physics engine"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "DOE-ProxyApps-C++"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "HPC/scientific apps"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "Small applications, representative of our larger DOE workloads"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "DOE-ProxyApps-C"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "\""
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "Fhourstones"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "Game/solver"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid ""
"Integer benchmark that efficiently solves positions in the game of Connect-4"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "Fhourstones-3.1"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "FreeBench"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "Benchmark suite"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid ""
"Raytracer, four in a row, neural network, file compressor, Fast Fourier/"
"Cosine/Sine Transform"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "llubenchmark"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "Linked-list micro-benchmark"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "mafft"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "Bioinformatics"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "A multiple sequence alignment program"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "MallocBench"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "cfrac, espresso, gawk, gs, make, p2c, perl"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "McCat"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "Quicksort, bubblesort, eigenvalues"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "mediabench"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "adpcm, g721, gsm, jpeg, mpeg2"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "MiBench"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "Embedded benchmark suite"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "Automotive, consumer, office, security, telecom apps"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "nbench"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "BYTE Magazine's BYTEmark benchmark program"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "NPB-serial"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "Parallel computing"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "Serial version of the NPB IS code"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "Olden"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "Data Structures"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "SGI version of the Olden benchmark"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "OptimizerEval"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "Solver"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "Preston Brigg's optimizer evaluation framework"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "PAQ8p"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "Data compression"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "Prolangs-C++"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "city, employ, life, NP, ocean, primes, simul, vcirc"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "Prolangs-C"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "agrep, archie-client, bison, gnugo, unix-smail"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "Ptrdist"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "Pointer-Intensive Benchmark Suite"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "Rodinia"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "Scientific apps"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "backprop, pathfinder, srad"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "SciMark2-C"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "FFT, LU, Montecarlo, sparse matmul"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "sim"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "Dynamic programming"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "A Time-Efficient, Linear-Space Local Similarity Algorithm"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "tramp3d-v4"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "Numerical analysis"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "Template-intensive numerical program based on FreePOOMA"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "Trimaran"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "Encryption"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "3des, md5, crc"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "TSVC"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "Vectorization benchmark"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "Test Suite for Vectorizing Compilers (TSVC)"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "VersaBench"
msgstr ""

#: ../../../TestSuiteGuide.md:0
msgid "8b10b, beamformer, bmm, dbms, ecbdes"
msgstr ""

#: ../../../TestSuiteGuide.md:188
msgid ""
"All MultiSource applications are suitable for performance measurements and "
"will run when CMake option `TEST_SUITE_BENCHMARKING_ONLY` is set."
msgstr ""

#: ../../../TestSuiteGuide.md:191
msgid "Configuration"
msgstr ""

#: ../../../TestSuiteGuide.md:194
msgid ""
"The test-suite has configuration options to customize building and running "
"the benchmarks. CMake can print a list of them:"
msgstr ""

#: ../../../TestSuiteGuide.md:205
msgid "Common Configuration Options"
msgstr ""

#: ../../../TestSuiteGuide.md:207
msgid "`CMAKE_C_FLAGS`"
msgstr ""

#: ../../../TestSuiteGuide.md:209
msgid ""
"Specify extra flags to be passed to C compiler invocations.  The flags are "
"also passed to the C++ compiler and linker invocations.  See [https://cmake."
"org/cmake/help/latest/variable/CMAKE_LANG_FLAGS.html](https://cmake.org/"
"cmake/help/latest/variable/CMAKE_LANG_FLAGS.html)"
msgstr ""

#: ../../../TestSuiteGuide.md:213
msgid "`CMAKE_C_COMPILER`"
msgstr ""

#: ../../../TestSuiteGuide.md:215
msgid ""
"Select the C compiler executable to be used. Note that the C++ compiler is "
"inferred automatically i.e. when specifying `path/to/clang` CMake will "
"automatically use `path/to/clang++` as the C++ compiler.  See [https://cmake."
"org/cmake/help/latest/variable/CMAKE_LANG_COMPILER.html](https://cmake.org/"
"cmake/help/latest/variable/CMAKE_LANG_COMPILER.html)"
msgstr ""

#: ../../../TestSuiteGuide.md:220
msgid "`CMAKE_Fortran_COMPILER`"
msgstr ""

#: ../../../TestSuiteGuide.md:222
msgid ""
"Select the Fortran compiler executable to be used. Not set by default and "
"not required unless running the Fortran Test Suite."
msgstr ""

#: ../../../TestSuiteGuide.md:225
msgid "`CMAKE_BUILD_TYPE`"
msgstr ""

#: ../../../TestSuiteGuide.md:227
msgid ""
"Select a build type like `OPTIMIZE` or `DEBUG` selecting a set of predefined "
"compiler flags. These flags are applied regardless of the `CMAKE_C_FLAGS` "
"option and may be changed by modifying `CMAKE_C_FLAGS_OPTIMIZE` etc.  See "
"[https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html](https://"
"cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html)"
msgstr ""

#: ../../../TestSuiteGuide.md:232
msgid "`TEST_SUITE_FORTRAN`"
msgstr ""

#: ../../../TestSuiteGuide.md:234
msgid ""
"Activate that Fortran tests. This is a work in progress. More information "
"can be found in the [Flang documentation](https://flang.llvm.org/docs/"
"FortranLLVMTestSuite.html)"
msgstr ""

#: ../../../TestSuiteGuide.md:237
msgid "`TEST_SUITE_RUN_UNDER`"
msgstr ""

#: ../../../TestSuiteGuide.md:239
msgid ""
"Prefix test invocations with the given tool. This is typically used to run "
"cross-compiled tests within a simulator tool."
msgstr ""

#: ../../../TestSuiteGuide.md:242
msgid "`TEST_SUITE_BENCHMARKING_ONLY`"
msgstr ""

#: ../../../TestSuiteGuide.md:244
msgid ""
"Disable tests that are unsuitable for performance measurements. The disabled "
"tests either run for a very short time or are dominated by I/O performance "
"making them unsuitable as compiler performance tests."
msgstr ""

#: ../../../TestSuiteGuide.md:248
msgid "`TEST_SUITE_SUBDIRS`"
msgstr ""

#: ../../../TestSuiteGuide.md:250
msgid ""
"Semicolon-separated list of directories to include. This can be used to only "
"build parts of the test-suite or to include external suites.  This option "
"does not work reliably with deeper subdirectories as it skips intermediate "
"`CMakeLists.txt` files which may be required."
msgstr ""

#: ../../../TestSuiteGuide.md:255
msgid "`TEST_SUITE_COLLECT_STATS`"
msgstr ""

#: ../../../TestSuiteGuide.md:257
msgid ""
"Collect internal LLVM statistics. Appends `-save-stats=obj` when invoking "
"the compiler and makes the lit runner collect and merge the statistic files."
msgstr ""

#: ../../../TestSuiteGuide.md:260
msgid "`TEST_SUITE_RUN_BENCHMARKS`"
msgstr ""

#: ../../../TestSuiteGuide.md:262
msgid ""
"If this is set to `OFF` then lit will not actually run the tests but just "
"collect build statistics like compile time and code size."
msgstr ""

#: ../../../TestSuiteGuide.md:265
msgid "`TEST_SUITE_USE_PERF`"
msgstr ""

#: ../../../TestSuiteGuide.md:267
msgid ""
"Use the `perf` tool for time measurement instead of the `timeit` tool that "
"comes with the test-suite.  The `perf` is usually available on linux systems."
msgstr ""

#: ../../../TestSuiteGuide.md:270
msgid ""
"`TEST_SUITE_SPEC2000_ROOT`, `TEST_SUITE_SPEC2006_ROOT`, "
"`TEST_SUITE_SPEC2017_ROOT`, ..."
msgstr ""

#: ../../../TestSuiteGuide.md:272
msgid ""
"Specify installation directories of external benchmark suites. You can find "
"more information about expected versions or usage in the README files in the "
"`External` directory (such as `External/SPEC/README`)"
msgstr ""

#: ../../../TestSuiteGuide.md:276
msgid "Common CMake Flags"
msgstr ""

#: ../../../TestSuiteGuide.md:278
msgid "`-GNinja`"
msgstr ""

#: ../../../TestSuiteGuide.md:280
msgid "Generate build files for the ninja build tool."
msgstr ""

#: ../../../TestSuiteGuide.md:282
msgid "`-Ctest-suite/cmake/caches/<cachefile.cmake>`"
msgstr ""

#: ../../../TestSuiteGuide.md:284
msgid ""
"Use a CMake cache.  The test-suite comes with several CMake caches which "
"predefine common or tricky build configurations."
msgstr ""

#: ../../../TestSuiteGuide.md:288
msgid "Displaying and Analyzing Results"
msgstr ""

#: ../../../TestSuiteGuide.md:291
msgid ""
"The `compare.py` script displays and compares result files.  A result file "
"is produced when invoking lit with the `-o filename.json` flag."
msgstr ""

#: ../../../TestSuiteGuide.md:294
msgid "Example usage:"
msgstr ""

#: ../../../TestSuiteGuide.md:296
msgid "Basic Usage:"
msgstr ""

#: ../../../TestSuiteGuide.md:320
msgid "Show compile_time or text segment size metrics:"
msgstr ""

#: ../../../TestSuiteGuide.md:327
msgid "Compare two result files and filter short running tests:"
msgstr ""

#: ../../../TestSuiteGuide.md:340
msgid ""
"Merge multiple baseline and experiment result files by taking the minimum "
"runtime each:"
msgstr ""

#: ../../../TestSuiteGuide.md:347
msgid "Continuous Tracking with LNT"
msgstr ""

#: ../../../TestSuiteGuide.md:349
msgid ""
"LNT is a set of client and server tools for continuously monitoring "
"performance. You can find more information at [https://llvm.org/docs/lnt]"
"(https://llvm.org/docs/lnt). The official LNT instance of the LLVM project "
"is hosted at [http://lnt.llvm.org](http://lnt.llvm.org)."
msgstr ""

#: ../../../TestSuiteGuide.md:355
msgid "External Suites"
msgstr ""

#: ../../../TestSuiteGuide.md:358
msgid "External suites such as SPEC can be enabled by either"
msgstr ""

#: ../../../TestSuiteGuide.md:360
msgid ""
"placing (or linking) them into the `test-suite/test-suite-externals/xxx` "
"directory (example: `test-suite/test-suite-externals/speccpu2000`)"
msgstr ""

#: ../../../TestSuiteGuide.md:361
msgid ""
"using a configuration option such as `-D TEST_SUITE_SPEC2000_ROOT=path/to/"
"speccpu2000`"
msgstr ""

#: ../../../TestSuiteGuide.md:363
msgid ""
"You can find further information in the respective README files such as "
"`test-suite/External/SPEC/README`."
msgstr ""

#: ../../../TestSuiteGuide.md:366
msgid ""
"For the SPEC benchmarks you can switch between the `test`, `train` and `ref` "
"input datasets via the `TEST_SUITE_RUN_TYPE` configuration option. The "
"`train` dataset is used by default."
msgstr ""

#: ../../../TestSuiteGuide.md:370
msgid ""
"In addition to SPEC, the multimedia frameworks ffmpeg and dav1d can also be "
"hooked up as external projects in the same way. By including them in llvm-"
"test-suite, a lot more of potentially vectorizable code gets compiled"
msgstr ""

#: ../../../TestSuiteGuide.md:373
msgid ""
"which can catch compiler bugs merely by triggering code generation asserts. "
"Including them also adds small code correctness tests, that compare the "
"output of the compiler generated functions against handwritten assembly "
"functions. (On x86, building the assembly requires having the nasm tool "
"available.) The integration into llvm-test-suite doesn't run the projects' "
"full testsuites though. The projects also contain microbenchmarks for "
"measuring the performance of some functions. See the `README.md` files in "
"the respective `ffmpeg` and `dav1d` directories under `llvm-test-suite/"
"External` for further details."
msgstr ""

#: ../../../TestSuiteGuide.md:384
msgid "Custom Suites"
msgstr ""

#: ../../../TestSuiteGuide.md:387
msgid ""
"You can build custom suites using the test-suite infrastructure. A custom "
"suite has a `CMakeLists.txt` file at the top directory. The `CMakeLists.txt` "
"will be picked up automatically if placed into a subdirectory of the test-"
"suite or when setting the `TEST_SUITE_SUBDIRS` variable:"
msgstr ""

#: ../../../TestSuiteGuide.md:397
msgid "Profile Guided Optimization"
msgstr ""

#: ../../../TestSuiteGuide.md:400
msgid ""
"Profile guided optimization requires to compile and run twice. First the "
"benchmark should be compiled with profile generation instrumentation enabled "
"and setup for training data. The lit runner will merge the profile files "
"using `llvm-profdata` so they can be used by the second compilation run."
msgstr ""

#: ../../../TestSuiteGuide.md:405 ../../../TestSuiteGuide.md:455
msgid "Example:"
msgstr ""

#: ../../../TestSuiteGuide.md:423
msgid ""
"To use Clang frontend's PGO instead of LLVM IR PGO, set `-"
"DTEST_SUITE_USE_IR_PGO=OFF`."
msgstr ""

#: ../../../TestSuiteGuide.md:425
msgid ""
"The `TEST_SUITE_RUN_TYPE` setting only affects the SPEC benchmark suites."
msgstr ""

#: ../../../TestSuiteGuide.md:428
msgid "Cross Compilation and External Devices"
msgstr ""

#: ../../../TestSuiteGuide.md:431
msgid "Compilation"
msgstr ""

#: ../../../TestSuiteGuide.md:433
msgid ""
"CMake allows to cross compile to a different target via toolchain files. "
"More information can be found here:"
msgstr ""

#: ../../../TestSuiteGuide.md:436
msgid ""
"[https://llvm.org/docs/lnt/tests.html#cross-compiling](https://llvm.org/docs/"
"lnt/tests.html#cross-compiling)"
msgstr ""

#: ../../../TestSuiteGuide.md:438
msgid ""
"[https://cmake.org/cmake/help/latest/manual/cmake-toolchains.7.html](https://"
"cmake.org/cmake/help/latest/manual/cmake-toolchains.7.html)"
msgstr ""

#: ../../../TestSuiteGuide.md:440
msgid ""
"Cross compilation from macOS to iOS is possible with the `test-suite/cmake/"
"caches/target-target-*-iphoneos-internal.cmake` CMake cache files; this "
"requires an internal iOS SDK."
msgstr ""

#: ../../../TestSuiteGuide.md:444
msgid "Running"
msgstr ""

#: ../../../TestSuiteGuide.md:446
msgid "There are two ways to run the tests in a cross compilation setting:"
msgstr ""

#: ../../../TestSuiteGuide.md:448
msgid ""
"Via SSH connection to an external device: The `TEST_SUITE_REMOTE_HOST` "
"option should be set to the SSH hostname.  The executables and data files "
"need to be transferred to the device after compilation.  This is typically "
"done via the `rsync` make target.  After this, the lit runner can be used on "
"the host machine. It will prefix the benchmark and verification command "
"lines with an `ssh` command."
msgstr ""

#: ../../../TestSuiteGuide.md:468
msgid ""
"You can specify a simulator for the target machine with the "
"`TEST_SUITE_RUN_UNDER` setting. The lit runner will prefix all benchmark "
"invocations with it."
msgstr ""

#: ../../../TestSuiteGuide.md:473
msgid "Running the test-suite via LNT"
msgstr ""

#: ../../../TestSuiteGuide.md:476
msgid ""
"The LNT tool can run the test-suite. Use this when submitting test results "
"to an LNT instance.  See [https://llvm.org/docs/lnt/tests.html#llvm-cmake-"
"test-suite](https://llvm.org/docs/lnt/tests.html#llvm-cmake-test-suite) for "
"details."
msgstr ""

#: ../../../TestSuiteGuide.md:481
msgid "Running the test-suite via Makefiles (deprecated)"
msgstr ""

#: ../../../TestSuiteGuide.md:484
msgid ""
"**Note**: The test-suite comes with a set of Makefiles that are considered "
"deprecated.  They do not support newer testing modes like `Bitcode` or "
"`Microbenchmarks` and are harder to use."
msgstr ""

#: ../../../TestSuiteGuide.md:488
msgid ""
"Old documentation is available in the [test-suite Makefile Guide]"
"(TestSuiteMakefileGuide)."
msgstr ""
