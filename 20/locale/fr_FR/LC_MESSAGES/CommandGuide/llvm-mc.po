# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 20\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:12+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr_FR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../CommandGuide/llvm-mc.rst:2
msgid "llvm-mc - LLVM Machine Code Playground"
msgstr ""

#: ../../../CommandGuide/llvm-mc.rst:7
msgid "SYNOPSIS"
msgstr ""

#: ../../../CommandGuide/llvm-mc.rst:9
msgid ":program:`llvm-mc` [*options*] [*filename*]"
msgstr ""

#: ../../../CommandGuide/llvm-mc.rst:12
msgid "DESCRIPTION"
msgstr ""

#: ../../../CommandGuide/llvm-mc.rst:14
msgid ""
"The :program:`llvm-mc` command takes assembly code for a specified "
"architecture as input and generates an object file or executable."
msgstr ""

#: ../../../CommandGuide/llvm-mc.rst:17
msgid ""
":program:`llvm-mc` provides a set of tools for working with machine code, "
"such as encoding instructions and displaying internal representations, "
"disassembling strings to bytes, etc."
msgstr ""

#: ../../../CommandGuide/llvm-mc.rst:21
msgid ""
"The choice of architecture for the output assembly code is automatically "
"determined from the input file, unless the :option:`--arch` option is used "
"to override the default."
msgstr ""

#: ../../../CommandGuide/llvm-mc.rst:26
msgid "OPTIONS"
msgstr ""

#: ../../../CommandGuide/llvm-mc.rst:28
msgid ""
"If the :option:`-o` option is omitted, then :program:`llvm-mc` will send its "
"output to standard output if the input is from standard input.  If the :"
"option:`-o` option specifies \"``-``\", then the output will also be sent to "
"standard output."
msgstr ""

#: ../../../CommandGuide/llvm-mc.rst:33
msgid ""
"If no :option:`-o` option is specified and an input file other than \"``-"
"``\" is specified, then :program:`llvm-mc` creates the output filename by "
"taking the input filename, removing any existing ``.s`` extension, and "
"adding a ``.o`` suffix."
msgstr ""

#: ../../../CommandGuide/llvm-mc.rst:38
msgid "Other :program:`llvm-mc` options are described below."
msgstr ""

#: ../../../CommandGuide/llvm-mc.rst:41
msgid "End-user Options"
msgstr ""

#: ../../../CommandGuide/llvm-mc.rst:45
msgid "Display available options (--help-hidden for more)."
msgstr ""

#: ../../../CommandGuide/llvm-mc.rst:49
msgid ""
"Use ``<filename>`` as the output filename. See the summary above for more "
"details."
msgstr ""

#: ../../../CommandGuide/llvm-mc.rst:54
msgid "Target arch to assemble for, see -version for available targets."
msgstr ""

#: ../../../CommandGuide/llvm-mc.rst:58
msgid ""
"Apply the assemblers \"lexer\" to break the input into tokens and print each "
"of them out. This is intended to help develop and test an assembler "
"implementation."
msgstr ""

#: ../../../CommandGuide/llvm-mc.rst:64
msgid ""
"Assemble assembly file (default), and print the result to assembly. This is "
"useful to design and test instruction parsers, and can be a useful tool when "
"combined with other llvm-mc flags. For example, this option may be useful to "
"transcode assembly from different dialects, e.g. on Intel where you can use -"
"output-asm-variant=1 to translate from AT&T to Intel assembly syntax. It can "
"also be combined with --show-encoding to understand how instructions are "
"encoded."
msgstr ""

#: ../../../CommandGuide/llvm-mc.rst:74
msgid ""
"Parse a series of hex bytes, and print the result out as assembly syntax."
msgstr ""

#: ../../../CommandGuide/llvm-mc.rst:78
msgid "Marked up disassembly of string of hex bytes."
msgstr ""

#: ../../../CommandGuide/llvm-mc.rst:82
msgid "Colored disassembly of string of hex bytes."
msgstr ""

#: ../../../CommandGuide/llvm-mc.rst:86
msgid ""
"Sets the output filetype. Setting this flag to `asm` will make the tool "
"output text assembly. Setting this flag to `obj` will make the tool output "
"an object file. Setting it to `null` causes no output to be created and can "
"be used for timing purposes. The default value is `asm`."
msgstr ""

#: ../../../CommandGuide/llvm-mc.rst:93
msgid "Generate DWARF debugging info for assembly source files."
msgstr ""

#: ../../../CommandGuide/llvm-mc.rst:97
msgid ""
"Take raw hexadecimal bytes as input for disassembly. Whitespace is ignored."
msgstr ""

#: ../../../CommandGuide/llvm-mc.rst:101
msgid "Create CFI directives that assume the code might be more than 2 GB."
msgstr ""

#: ../../../CommandGuide/llvm-mc.rst:105
msgid "Specify the name we should consider the input file."
msgstr ""

#: ../../../CommandGuide/llvm-mc.rst:110
msgid "Enable MASM-style hex float initializers (3F800000r)."
msgstr ""

#: ../../../CommandGuide/llvm-mc.rst:118
msgid "Target a specific cpu type (-mcpu=help for details)."
msgstr ""

#: ../../../CommandGuide/llvm-mc.rst:122
msgid "Target triple to assemble for, see -version for available targets."
msgstr ""

#: ../../../CommandGuide/llvm-mc.rst:126
msgid "DWO output filename."
msgstr ""

#: ../../../CommandGuide/llvm-mc.rst:130
msgid "Show instructions operands as parsed."
msgstr ""

#: ../../../CommandGuide/llvm-mc.rst:134
msgid "Show internal instruction representation."
msgstr ""

#: ../../../CommandGuide/llvm-mc.rst:138
msgid "Show instruction encodings."
msgstr ""

#: ../../../CommandGuide/llvm-mc.rst:142
msgid "Don't discard temporary labels."
msgstr ""

#: ../../../CommandGuide/llvm-mc.rst:146
msgid "Emit R_X86_64_GOTPCRELX instead of R_X86_64_GOTPCREL."
msgstr ""

#: ../../../CommandGuide/llvm-mc.rst:150
msgid "Prefer hex format for immediate values."
msgstr ""

#: ../../../CommandGuide/llvm-mc.rst:154
msgid "Preserve Comments in outputted assembly."
msgstr ""

#: ../../../CommandGuide/llvm-mc.rst:158
msgid ""
"Syntax variant to use for output printing. For example, on x86 targets --"
"output-asm-variant=0 prints in AT&T syntax, and --output-asm-variant=1 "
"prints in Intel/MASM syntax."
msgstr ""

#: ../../../CommandGuide/llvm-mc.rst:164
msgid "Choose DWARF debug sections compression."
msgstr ""

#: ../../../CommandGuide/llvm-mc.rst:168
msgid "EXIT STATUS"
msgstr ""

#: ../../../CommandGuide/llvm-mc.rst:170
msgid ""
"If :program:`llvm-mc` succeeds, it will exit with 0.  Otherwise, if an error "
"occurs, it will exit with a non-zero value."
msgstr ""
