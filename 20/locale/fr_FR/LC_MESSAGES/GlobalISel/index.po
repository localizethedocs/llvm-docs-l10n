# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 20\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:12+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr_FR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../GlobalISel/index.rst:3
msgid "Global Instruction Selection"
msgstr ""

#: ../../../GlobalISel/index.rst:6
msgid ""
"This document is a work in progress.  It reflects the current state of the "
"implementation, as well as open design and implementation issues."
msgstr ""

#: ../../../GlobalISel/index.rst:14
msgid "Introduction"
msgstr ""

#: ../../../GlobalISel/index.rst:16
msgid ""
"GlobalISel is a framework that provides a set of reusable passes and "
"utilities for instruction selection --- translation from LLVM IR to target-"
"specific Machine IR (MIR)."
msgstr ""

#: ../../../GlobalISel/index.rst:20
msgid ""
"GlobalISel is intended to be a replacement for SelectionDAG and FastISel, to "
"solve three major problems:"
msgstr ""

#: ../../../GlobalISel/index.rst:23
msgid ""
"**Performance** --- SelectionDAG introduces a dedicated intermediate "
"representation, which has a compile-time cost."
msgstr ""

#: ../../../GlobalISel/index.rst:26
msgid ""
"GlobalISel directly operates on the post-isel representation used by the "
"rest of the code generator, MIR. It does require extensions to that "
"representation to support arbitrary incoming IR: :ref:`gmir`."
msgstr ""

#: ../../../GlobalISel/index.rst:31
msgid ""
"**Granularity** --- SelectionDAG and FastISel operate on individual basic "
"blocks, losing some global optimization opportunities."
msgstr ""

#: ../../../GlobalISel/index.rst:34
msgid "GlobalISel operates on the whole function."
msgstr ""

#: ../../../GlobalISel/index.rst:36
msgid ""
"**Modularity** --- SelectionDAG and FastISel are radically different and "
"share very little code."
msgstr ""

#: ../../../GlobalISel/index.rst:39
msgid ""
"GlobalISel is built in a way that enables code reuse. For instance, both the "
"optimized and fast selectors share the :ref:`pipeline`, and targets can "
"configure that pipeline to better suit their needs."
msgstr ""

#: ../../../GlobalISel/index.rst:44
msgid "Design and Implementation Reference"
msgstr ""

#: ../../../GlobalISel/index.rst:46
msgid ""
"More information on the design and implementation of GlobalISel can be found "
"in the following sections."
msgstr ""

#: ../../../GlobalISel/index.rst:59
msgid ""
"More information on specific passes can be found in the following sections:"
msgstr ""

#: ../../../GlobalISel/index.rst:73
msgid "Progress and Future Work"
msgstr ""

#: ../../../GlobalISel/index.rst:75
msgid ""
"The initial goal is to replace FastISel on AArch64.  The next step will be "
"to replace SelectionDAG as the optimized ISel."
msgstr ""

#: ../../../GlobalISel/index.rst:78
msgid ""
"``NOTE``: While we iterate on GlobalISel, we strive to avoid affecting the "
"performance of SelectionDAG, FastISel, or the other MIR passes.  For "
"instance, the types of :ref:`gmir-gvregs` are stored in a separate table in "
"``MachineRegisterInfo``, that is destroyed after :ref:`instructionselect`."
msgstr ""

#: ../../../GlobalISel/index.rst:87
msgid "FastISel Replacement"
msgstr ""

#: ../../../GlobalISel/index.rst:89
msgid ""
"For the initial FastISel replacement, we intend to fallback to SelectionDAG "
"on selection failures."
msgstr ""

#: ../../../GlobalISel/index.rst:92
msgid ""
"Currently, compile-time of the fast pipeline is within 1.5x of FastISel. "
"We're optimistic we can get to within 1.1/1.2x, but beating FastISel will be "
"challenging given the multi-pass approach. Still, supporting all IR (via a "
"complete legalizer) and avoiding the fallback to SelectionDAG in the worst "
"case should enable better amortized performance than SelectionDAG+FastISel."
msgstr ""

#: ../../../GlobalISel/index.rst:99
msgid ""
"``NOTE``: We considered never having a fallback to SelectionDAG, instead "
"deciding early whether a given function is supported by GlobalISel or not.  "
"The decision would be based on :ref:`milegalizer` queries. We abandoned that "
"for two reasons: a) on IR inputs, we'd need to basically simulate the :ref:"
"`irtranslator`; b) to be robust against unforeseen failures and to enable "
"iterative improvements."
msgstr ""
