# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 20\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:12+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../ReleaseNotes.md:1
msgid ""
"<!-- This document is written in Markdown and uses extra directives provided "
"by\n"
"MyST (https://myst-parser.readthedocs.io/en/latest/). -->\n"
msgstr ""

#: ../../../ReleaseNotes.md:4
msgid "LLVM {{env.config.release}} Release Notes"
msgstr ""

#: ../../../ReleaseNotes.md:6
msgid "Contents"
msgstr ""

#: ../../../ReleaseNotes.md:12
msgid ""
"These are in-progress notes for the upcoming LLVM {{env.config."
"release}}              release. Release notes for previous releases can be "
"found on              [the Download Page](https://releases.llvm.org/download."
"html)."
msgstr ""

#: ../../../ReleaseNotes.md:17
msgid "Introduction"
msgstr ""

#: ../../../ReleaseNotes.md:20
msgid ""
"This document contains the release notes for the LLVM Compiler "
"Infrastructure, release {{env.config.release}}.  Here we describe the status "
"of LLVM, including major improvements from the previous release, "
"improvements in various subprojects of LLVM, and some of the current users "
"of the code.  All LLVM releases may be downloaded from the [LLVM releases "
"web site](https://llvm.org/releases/)."
msgstr ""

#: ../../../ReleaseNotes.md:26
msgid ""
"For more information about LLVM, including information about the latest "
"release, please check out the [main LLVM web site](https://llvm.org/).  If "
"you have questions or comments, the [Discourse forums](https://discourse."
"llvm.org) is a good place to ask them."
msgstr ""

#: ../../../ReleaseNotes.md:31
msgid ""
"Note that if you are reading this file from a Git checkout or the main LLVM "
"web page, this document applies to the *next* release, not the current one.  "
"To see the release notes for a specific release, please see the [releases "
"page](https://llvm.org/releases/)."
msgstr ""

#: ../../../ReleaseNotes.md:36
msgid "Non-comprehensive list of changes in this release"
msgstr ""

#: ../../../ReleaseNotes.md:39
msgid ""
"<!-- For small 1-3 sentence descriptions, just add an entry at the end of\n"
"this list. If your description won't fit comfortably in one bullet\n"
"point (e.g. maybe you would like to give an example of the\n"
"functionality, or simply have a lot to talk about), see the comment below\n"
"for adding a new subsection. -->\n"
msgstr ""

#: ../../../ReleaseNotes.md:45
msgid ""
"Added a new IRNormalizer pass which aims to transform LLVM modules into a "
"normal form by reordering and renaming instructions while preserving the "
"same semantics. The normalizer makes it easier to spot semantic differences "
"when diffing two modules which have undergone different passes."
msgstr ""

#: ../../../ReleaseNotes.md:50
msgid ""
"The SPIR-V backend is now an official LLVM target, providing OpenCL and SYCL "
"conformance and establishing a foundation for broader applicability to other "
"APIs, including Vulkan, GLSL, and HLSL. This backend aims to offer a unified "
"approach for diverse compute and graphics workloads, providing a robust "
"alternative to the Khronos SPIR-V LLVM Translator."
msgstr ""

#: ../../../ReleaseNotes.md:56
msgid "..."
msgstr ""

#: ../../../ReleaseNotes.md:58
msgid ""
"<!-- If you would like to document a larger change, then you can add a\n"
"subsection about it right here. You can copy the following boilerplate:\n"
"\n"
"Special New Feature\n"
"-------------------\n"
"\n"
"Makes programs 10x faster by doing Special New Thing.\n"
"-->\n"
msgstr ""

#: ../../../ReleaseNotes.md:67
msgid "Changes to the LLVM IR"
msgstr ""

#: ../../../ReleaseNotes.md:70
msgid "Types are no longer allowed to be recursive."
msgstr ""

#: ../../../ReleaseNotes.md:72
msgid ""
"The `x86_mmx` IR type has been removed. It will be translated to the "
"standard vector type `<1 x i64>` in bitcode upgrade."
msgstr ""

#: ../../../ReleaseNotes.md:74
msgid "Renamed `llvm.experimental.stepvector` intrinsic to `llvm.stepvector`."
msgstr ""

#: ../../../ReleaseNotes.md:76
msgid "Added `usub_cond` and `usub_sat` operations to `atomicrmw`."
msgstr ""

#: ../../../ReleaseNotes.md:78
msgid "Introduced `noalias.addrspace` metadata."
msgstr ""

#: ../../../ReleaseNotes.md:80
msgid "Remove the following intrinsics which can be replaced with a `bitcast`:"
msgstr ""

#: ../../../ReleaseNotes.md:82
msgid "`llvm.nvvm.bitcast.f2i`"
msgstr ""

#: ../../../ReleaseNotes.md:83
msgid "`llvm.nvvm.bitcast.i2f`"
msgstr ""

#: ../../../ReleaseNotes.md:84
msgid "`llvm.nvvm.bitcast.d2ll`"
msgstr ""

#: ../../../ReleaseNotes.md:85
msgid "`llvm.nvvm.bitcast.ll2d`"
msgstr ""

#: ../../../ReleaseNotes.md:87
msgid ""
"Remove the following intrinsics which can be replaced with a funnel-shift:"
msgstr ""

#: ../../../ReleaseNotes.md:89
msgid "`llvm.nvvm.rotate.b32`"
msgstr ""

#: ../../../ReleaseNotes.md:90
msgid "`llvm.nvvm.rotate.right.b64`"
msgstr ""

#: ../../../ReleaseNotes.md:91
msgid "`llvm.nvvm.rotate.b64`"
msgstr ""

#: ../../../ReleaseNotes.md:93
msgid ""
"Remove the following intrinsics which can be replaced with an "
"`addrspacecast`:"
msgstr ""

#: ../../../ReleaseNotes.md:96
msgid "`llvm.nvvm.ptr.gen.to.global`"
msgstr ""

#: ../../../ReleaseNotes.md:97
msgid "`llvm.nvvm.ptr.gen.to.shared`"
msgstr ""

#: ../../../ReleaseNotes.md:98
msgid "`llvm.nvvm.ptr.gen.to.constant`"
msgstr ""

#: ../../../ReleaseNotes.md:99
msgid "`llvm.nvvm.ptr.gen.to.local`"
msgstr ""

#: ../../../ReleaseNotes.md:100
msgid "`llvm.nvvm.ptr.global.to.gen`"
msgstr ""

#: ../../../ReleaseNotes.md:101
msgid "`llvm.nvvm.ptr.shared.to.gen`"
msgstr ""

#: ../../../ReleaseNotes.md:102
msgid "`llvm.nvvm.ptr.constant.to.gen`"
msgstr ""

#: ../../../ReleaseNotes.md:103
msgid "`llvm.nvvm.ptr.local.to.gen`"
msgstr ""

#: ../../../ReleaseNotes.md:105
msgid ""
"Remove the following intrinsics which can be relaced with a load from "
"addrspace(1) with an !invariant.load metadata"
msgstr ""

#: ../../../ReleaseNotes.md:108
msgid "`llvm.nvvm.ldg.global.i`"
msgstr ""

#: ../../../ReleaseNotes.md:109
msgid "`llvm.nvvm.ldg.global.f`"
msgstr ""

#: ../../../ReleaseNotes.md:110
msgid "`llvm.nvvm.ldg.global.p`"
msgstr ""

#: ../../../ReleaseNotes.md:112
msgid "Operand bundle values can now be metadata strings."
msgstr ""

#: ../../../ReleaseNotes.md:114
msgid "Fast math flags are now permitted on `fptrunc` and `fpext`."
msgstr ""

#: ../../../ReleaseNotes.md:116
msgid "Changes to LLVM infrastructure"
msgstr ""

#: ../../../ReleaseNotes.md:119
msgid ""
"Two methods that use Instruction pointers as code positions (moveBefore, "
"getFirstNonPHI) have been deprecated in favour of overloads and variants "
"that use `BasicBlock::iterator`s instead. The pointer-flavoured methods will "
"be removed in a future release. This work is part of the [RemoveDIs](https://"
"llvm.org/docs/RemoveDIsDebugInfo.html) project, the documentation for which "
"contains instructions for updating call-sites using the deprecated methods."
msgstr ""

#: ../../../ReleaseNotes.md:121
msgid "Changes to building LLVM"
msgstr ""

#: ../../../ReleaseNotes.md:124
msgid "Raised the minimum MSVC version to Visual Studio 2019 16.8."
msgstr ""

#: ../../../ReleaseNotes.md:125
msgid ""
"Deprecated support for building compiler-rt with `LLVM_ENABLE_PROJECTS`. "
"Users should instead use `LLVM_ENABLE_RUNTIMES`, either through the runtimes "
"or the bootstrapping build."
msgstr ""

#: ../../../ReleaseNotes.md:128
msgid ""
"Deprecated support for building libc with `LLVM_ENABLE_PROJECTS`. Users "
"should instead use `LLVM_ENABLE_RUNTIMES`, either through the runtimes or "
"the bootstrapping build."
msgstr ""

#: ../../../ReleaseNotes.md:132
msgid "Changes to TableGen"
msgstr ""

#: ../../../ReleaseNotes.md:135
msgid ""
"The ARMTargetDefEmitter now binds Funtion Multi Versioning features to the "
"corresponding AArch64 Architecture Extensions such that their dependencies "
"can be autogenerated using TableGen."
msgstr ""

#: ../../../ReleaseNotes.md:139
msgid "Changes to Interprocedural Optimizations"
msgstr ""

#: ../../../ReleaseNotes.md:142
msgid "Added RelLookupTableConverterPass to LTO post-link pass pipeline."
msgstr ""

#: ../../../ReleaseNotes.md:144
msgid "Changes to the AArch64 Backend"
msgstr ""

#: ../../../ReleaseNotes.md:147 ../../../ReleaseNotes.md:181
#: ../../../ReleaseNotes.md:243 ../../../ReleaseNotes.md:291
msgid ""
"`.balign N, 0`, `.p2align N, 0`, `.align N, 0` in code sections will now "
"fill the required alignment space with a sequence of `0x0` bytes (the "
"requested fill value) rather than NOPs."
msgstr ""

#: ../../../ReleaseNotes.md:151
msgid ""
"Assembler/disassembler support has been added for Armv9.6-A (2024) "
"architecture extensions."
msgstr ""

#: ../../../ReleaseNotes.md:154
msgid "Added support for the FUJITSU-MONAKA CPU."
msgstr ""

#: ../../../ReleaseNotes.md:156
msgid ""
"Updated feature dependency in Armv9.6 for FEAT_FAMINMAX, FEAT_LUT and "
"FEAT_FP8, now they depend only on FEAT_NEON."
msgstr ""

#: ../../../ReleaseNotes.md:159
msgid "Changes to the AMDGPU Backend"
msgstr ""

#: ../../../ReleaseNotes.md:162
msgid "Initial support for gfx950"
msgstr ""

#: ../../../ReleaseNotes.md:164
msgid "Improved ``llvm.memcpy``, ``llvm.memmove`` and ``llvm.memset`` lowering"
msgstr ""

#: ../../../ReleaseNotes.md:166
msgid ""
"Fixed expansion of 64-bit flat address space ``atomicrmw`` and ``cmpxchg`` "
"operations which may access private memory. `noalias.addrspace` metadat may "
"be used to avoid the expansion if the target address is known to not be on "
"the stack."
msgstr ""

#: ../../../ReleaseNotes.md:171
msgid "Fix compile failures when emitting unreachable functions."
msgstr ""

#: ../../../ReleaseNotes.md:173
msgid ""
"Removed `llvm.amdgcn.flat.atomic.fadd` and `llvm.amdgcn.global.atomic.fadd` "
"intrinsics. Users should use the {ref}`atomicrmw <i_atomicrmw>` instruction "
"with `fadd` and addrspace(0) or addrspace(1) instead."
msgstr ""

#: ../../../ReleaseNotes.md:178
msgid "Changes to the ARM Backend"
msgstr ""

#: ../../../ReleaseNotes.md:185
msgid ""
"The default behavior for frame pointers in leaf functions has been updated. "
"When the `-fno-omit-frame-pointer` option is specified, `FPKeepKindStr` is "
"set to `-mframe-pointer=all`, meaning the frame pointer (FP) is now retained "
"in leaf functions by default. To eliminate the frame pointer in leaf "
"functions, you must explicitly use the `-momit-leaf-frame-pointer` option."
msgstr ""

#: ../../../ReleaseNotes.md:191
msgid ""
"When using the `MOVT` or `MOVW` instructions, the Assembler will now check "
"to ensure that any addend that is used is within a 16-bit signed value "
"range. If the addend falls outside of this range, the LLVM backend will emit "
"an error like so `Relocation Not In Range`."
msgstr ""

#: ../../../ReleaseNotes.md:196
msgid "Changes to the AVR Backend"
msgstr ""

#: ../../../ReleaseNotes.md:199
msgid "Changes to the DirectX Backend"
msgstr ""

#: ../../../ReleaseNotes.md:202
msgid "Changes to the Hexagon Backend"
msgstr ""

#: ../../../ReleaseNotes.md:205
msgid ""
"The default Hexagon architecture version in ELF object files produced by the "
"tools such as llvm-mc is changed to v68. This version will be set if the "
"user does not provide the CPU version in the command line."
msgstr ""

#: ../../../ReleaseNotes.md:209
msgid "Changes to the LoongArch Backend"
msgstr ""

#: ../../../ReleaseNotes.md:212
msgid ""
"[Incorrect GOT usage](https://github.com/llvm/llvm-project/pull/117099) for "
"`non-dso_local` function calls in large code model is fixed."
msgstr ""

#: ../../../ReleaseNotes.md:214
msgid ""
"A [gprof support issue](https://github.com/llvm/llvm-project/issues/121103) "
"is fixed."
msgstr ""

#: ../../../ReleaseNotes.md:216
msgid ""
"A [SDAG hang issue](https://github.com/llvm/llvm-project/issues/107355) "
"caused by `ISD::CONCAT_VECTORS` is fixed."
msgstr ""

#: ../../../ReleaseNotes.md:218
msgid ""
"A [compiler crash issue](https://github.com/llvm/llvm-project/issues/118301) "
"when converting `half` to `i32` is fixed."
msgstr ""

#: ../../../ReleaseNotes.md:220
msgid ""
"Almost all of `la64v1.1` instructions can now be generated. The full list is "
"`frecipe.s`, `frecipe.d`, `frsqrte.s`, `frsqrte.d`, `vfrecipe.s`, `vfrecipe."
"d`, `vfrsqrte.s`, `vfrsqrte.d`, `xvfrecipe.s`, `xvfrecipe.d`, `xvfrsqrte.s`, "
"`xvfrsqrte.d`, `sc.q`, `amcas.b`, `amcas.h`, `amcas.w`, `amcas.d`, `amcas_db."
"b`, `amcas_db.h`, `amcas_db.w`, `amcas_db.d`, `amswap.b`, `amswap.h`, "
"`amswap_db.b`, `amswap_db.h`, `amadd.b`, `amadd.h`, `amadd_db.b`, `amadd_db."
"h`. Optionally generate instructions `dbar 0x700`, `div.w`, `div.wu`, `mod."
"w` and `mod.wu` when related target features are enabled. `llacq.w`, `screl."
"w`, `llacq.d` and `screl.d` cannot be generated yet."
msgstr ""

#: ../../../ReleaseNotes.md:230
msgid ""
"An llc option called `-loongarch-annotate-tablejump` is added to annotate "
"table jump instruction in the `.discard.tablejump_annotate` section. A "
"typical user of these annotations is the `objtool` in Linux kernel."
msgstr ""

#: ../../../ReleaseNotes.md:234
msgid ""
"The default cpu in `MCSubtargetInfo` is changed from `la464` to `generic-"
"la64`. In addition, the `lsx` feature is added to `generic-la64`."
msgstr ""

#: ../../../ReleaseNotes.md:237
msgid ""
"CFI instructions now allow register names and aliases, previously only "
"numbers were allowed."
msgstr ""

#: ../../../ReleaseNotes.md:240
msgid ""
"`RuntimeDyld` now supports LoongArch, which means that programs relying on "
"`MCJIT` can now work."
msgstr ""

#: ../../../ReleaseNotes.md:247
msgid ""
"`%ld_pcrel_20`, `%gd_pcrel_20` and `%desc_pcrel_20` operand modifiers are  "
"supported by assembler."
msgstr ""

#: ../../../ReleaseNotes.md:250
msgid ""
"A machine function pass called `LoongArch Merge Base Offset` is added to "
"merge the offset of address calculation into the offset field of "
"instructions in a global address lowering sequence."
msgstr ""

#: ../../../ReleaseNotes.md:254
msgid ""
"The `LoopDataPrefetch` pass can now work on LoongArch, but it is disabled by "
"default due to the bad effect on Fortran benchmarks."
msgstr ""

#: ../../../ReleaseNotes.md:257
msgid "Enable alias analysis by default."
msgstr ""

#: ../../../ReleaseNotes.md:259
msgid "Avoid indirect branch jumps using the `$ra` register."
msgstr ""

#: ../../../ReleaseNotes.md:261
msgid "Other optimizations."
msgstr ""

#: ../../../ReleaseNotes.md:263
msgid "Changes to the MIPS Backend"
msgstr ""

#: ../../../ReleaseNotes.md:266
msgid "Changes to the PowerPC Backend"
msgstr ""

#: ../../../ReleaseNotes.md:269
msgid "The Linux `ppc64` LLC default cpu is updated from `ppc` to `ppc64`."
msgstr ""

#: ../../../ReleaseNotes.md:270
msgid "Replaced PPCMergeStringPool with GlobalMerge."
msgstr ""

#: ../../../ReleaseNotes.md:271
msgid "Disabled vsx and altivec when -msoft-float is used."
msgstr ""

#: ../../../ReleaseNotes.md:272
msgid "Added support for -mcpu=pwr11 -mtune=pwr11."
msgstr ""

#: ../../../ReleaseNotes.md:273
msgid "Implemented BCD assist builtins."
msgstr ""

#: ../../../ReleaseNotes.md:274
msgid "Expanded global named register support."
msgstr ""

#: ../../../ReleaseNotes.md:275
msgid "Updated to use tablegen's MatchRegisterName()."
msgstr ""

#: ../../../ReleaseNotes.md:276
msgid "Fixed saving of Link Register when using ROP Protect."
msgstr ""

#: ../../../ReleaseNotes.md:277
msgid "Fixed SUBREG_TO_REG handling in the RegisterCoalescer."
msgstr ""

#: ../../../ReleaseNotes.md:278
msgid "Fixed data layout alignment of i128 to 16."
msgstr ""

#: ../../../ReleaseNotes.md:279
msgid "Fixed codegen for transparent_union function parameters."
msgstr ""

#: ../../../ReleaseNotes.md:280
msgid "Added an error for incorrect use of memory operands."
msgstr ""

#: ../../../ReleaseNotes.md:281
msgid "Other various bug fixes and codegen improvements."
msgstr ""

#: ../../../ReleaseNotes.md:283
msgid "AIX Specific:"
msgstr ""

#: ../../../ReleaseNotes.md:284
msgid "LLC default cpu is updated from `generic` to `pwr7`."
msgstr ""

#: ../../../ReleaseNotes.md:285
msgid ""
"Fixed handling in emitGlobalConstantImpl to emit aliases to subobjects at "
"proper offsets."
msgstr ""

#: ../../../ReleaseNotes.md:286
msgid "Enabled aggressive merging of constants to reduce TOC entries."
msgstr ""

#: ../../../ReleaseNotes.md:288
msgid "Changes to the RISC-V Backend"
msgstr ""

#: ../../../ReleaseNotes.md:294
msgid "Added Syntacore SCR4 and SCR5 CPUs: `-mcpu=syntacore-scr4/5-rv32/64`"
msgstr ""

#: ../../../ReleaseNotes.md:295
msgid "`-mcpu=sifive-p470` was added."
msgstr ""

#: ../../../ReleaseNotes.md:296
msgid ""
"Added Hazard3 CPU as taped out for RP2350: `-mcpu=rp2350-hazard3` (32-bit "
"only)."
msgstr ""

#: ../../../ReleaseNotes.md:298
msgid ""
"Fixed length vector support using RVV instructions now requires VLEN>=64. "
"This means Zve32x and Zve32f will also require Zvl64b. The prior support was "
"largely untested."
msgstr ""

#: ../../../ReleaseNotes.md:301
msgid "The `Zvbc32e` and `Zvkgs` extensions are now supported experimentally."
msgstr ""

#: ../../../ReleaseNotes.md:302
msgid "Added `Smctr`, `Ssctr` and `Svvptc` extensions."
msgstr ""

#: ../../../ReleaseNotes.md:303
msgid "`-mcpu=syntacore-scr7` was added."
msgstr ""

#: ../../../ReleaseNotes.md:304
msgid "`-mcpu=tt-ascalon-d8` was added."
msgstr ""

#: ../../../ReleaseNotes.md:305
msgid "`-mcpu=mips-p8700` was added."
msgstr ""

#: ../../../ReleaseNotes.md:306
msgid "`-mcpu=sifive-p550` was added."
msgstr ""

#: ../../../ReleaseNotes.md:307
msgid "The `Zacas` extension is no longer marked as experimental."
msgstr ""

#: ../../../ReleaseNotes.md:308
msgid "Added Smdbltrp, Ssdbltrp extensions to -march."
msgstr ""

#: ../../../ReleaseNotes.md:309
msgid ""
"The `Smmpm`, `Smnpm`, `Ssnpm`, `Supm`, and `Sspm` pointer masking extensions "
"are no longer marked as experimental."
msgstr ""

#: ../../../ReleaseNotes.md:311
msgid "The `Sha` extension is now supported."
msgstr ""

#: ../../../ReleaseNotes.md:312
msgid ""
"The RVA23U64, RVA23S64, RVB23U64, and RVB23S64 profiles are no longer marked "
"as experimental."
msgstr ""

#: ../../../ReleaseNotes.md:314
msgid ""
"`.insn <length>, <raw encoding>` can be used to assemble 48- and 64-bit "
"instructions from raw integer values."
msgstr ""

#: ../../../ReleaseNotes.md:316
msgid ""
"`.insn [<length>,] <raw encoding>` now accepts absolute expressions for both "
"expressions, so that they can be computed from constants and absolute "
"symbols."
msgstr ""

#: ../../../ReleaseNotes.md:318
msgid ""
"The following new inline assembly constraints and modifiers are accepted:"
msgstr ""

#: ../../../ReleaseNotes.md:319
msgid "`cr` constraint meaning an RVC-encoding compatible GPR (`x8`-`x15`)"
msgstr ""

#: ../../../ReleaseNotes.md:320
msgid "`cf` constraint meaning an RVC-encoding compatible FPR (`f8`-`f15`)"
msgstr ""

#: ../../../ReleaseNotes.md:321
msgid ""
"`R` constraint meaning an even-odd GPR pair (prints as the even register, "
"but both registers in the pair are considered live)."
msgstr ""

#: ../../../ReleaseNotes.md:323
msgid ""
"`cR` constraint meaning an RVC-encoding compatible even-odd GPR Pair (prints "
"as an even register between `x8` and `x14`, but both registers in the pair "
"are considered live)."
msgstr ""

#: ../../../ReleaseNotes.md:326
msgid ""
"`N` modifer meaning print the register encoding (0-31) rather than the name."
msgstr ""

#: ../../../ReleaseNotes.md:327
msgid ""
"`f` and `cf` inline assembly constraints, when using F-/D-/H-in-X "
"extensions, will use the relevant GPR rather than FPR. This makes inline "
"assembly portable between e.g. F and Zfinx code."
msgstr ""

#: ../../../ReleaseNotes.md:330
msgid ""
"Adds experimental assembler support for the Qualcomm uC 'Xqcicsr` (CSR) "
"extension."
msgstr ""

#: ../../../ReleaseNotes.md:332
msgid ""
"Adds experimental assembler support for the Qualcomm uC 'Xqcisls` (Scaled "
"Load Store) extension."
msgstr ""

#: ../../../ReleaseNotes.md:334
msgid ""
"Adds experimental assembler support for the Qualcomm uC 'Xqcia` (Arithmetic) "
"extension."
msgstr ""

#: ../../../ReleaseNotes.md:336
msgid ""
"Adds experimental assembler support for the Qualcomm uC 'Xqciac` (Load-Store "
"Address Calculation) extension."
msgstr ""

#: ../../../ReleaseNotes.md:338
msgid ""
"Adds experimental assembler support for the Qualcomm uC 'Xqcics` (Conditonal "
"Select) extension."
msgstr ""

#: ../../../ReleaseNotes.md:340
msgid ""
"Adds experimental assembler support for the Qualcomm uC 'Xqcilsm` (Load "
"Store Multiple) extension."
msgstr ""

#: ../../../ReleaseNotes.md:342
msgid ""
"Adds experimental assembler support for the Qualcomm uC 'Xqcicli` "
"(Conditional Load Immediate) extension."
msgstr ""

#: ../../../ReleaseNotes.md:344
msgid ""
"Adds experimental assembler support for the Qualcomm uC 'Xqcicm` (Conditonal "
"Move) extension."
msgstr ""

#: ../../../ReleaseNotes.md:346
msgid ""
"Adds experimental assembler support for the Qualcomm uC 'Xqciint` "
"(Interrupts) extension."
msgstr ""

#: ../../../ReleaseNotes.md:348
msgid ""
"Adds experimental assembler support for the Qualcomm uC 'Xqcilo` (Large "
"Offset Load Store) extension."
msgstr ""

#: ../../../ReleaseNotes.md:350
msgid "Added ``Sdext`` and ``Sdtrig`` extensions."
msgstr ""

#: ../../../ReleaseNotes.md:352
msgid "Changes to the SystemZ Backend"
msgstr ""

#: ../../../ReleaseNotes.md:355
msgid ""
"Added support for the IBM z17 processor and the arch15 cpu architecture."
msgstr ""

#: ../../../ReleaseNotes.md:356
msgid "Added support for `__builtin_setjump` and `__builtin_longjmp`."
msgstr ""

#: ../../../ReleaseNotes.md:357
msgid ""
"Improve inlining heuristics to fix compile time explosion in certain cases."
msgstr ""

#: ../../../ReleaseNotes.md:358
msgid "Improve various cost functions."
msgstr ""

#: ../../../ReleaseNotes.md:359
msgid "Improve compatibility of the assembler parser with the GNU assembler."
msgstr ""

#: ../../../ReleaseNotes.md:361
msgid "Changes to the WebAssembly Backend"
msgstr ""

#: ../../../ReleaseNotes.md:364
msgid ""
"The default target CPU, \"generic\", now enables the `-mnontrapping-fptoint` "
"and `-mbulk-memory` flags, which correspond to the [Bulk Memory Operations] "
"and [Non-trapping float-to-int Conversions] language features, which are "
"[widely implemented in engines]."
msgstr ""

#: ../../../ReleaseNotes.md:369
msgid ""
"A new Lime1 target CPU is added, `-mcpu=lime1`. This CPU follows the "
"definition of the Lime1 CPU [here], and enables `-mmultivalue`, `-mmutable-"
"globals`, `-mcall-indirect-overlong`, `-msign-ext`, `-mbulk-memory-opt`, `-"
"mnontrapping-fptoint`, and `-mextended-const`."
msgstr ""

#: ../../../ReleaseNotes.md:374
msgid ""
"Support for the new standardized [Exception Handling] proposal is added. The "
"[legacy Exception Handling] proposal is still supported, and turned on by "
"the newly added `-wasm-use-legacy-eh` option. Given that major web browsers "
"still default to the legacy EH proposal, this option is turned on by default "
"for the moment."
msgstr ""

#: ../../../ReleaseNotes.md:387
msgid "Changes to the Windows Target"
msgstr ""

#: ../../../ReleaseNotes.md:390
msgid "Changes to the X86 Backend"
msgstr ""

#: ../../../ReleaseNotes.md:393
msgid ""
"`.balign N, 0x90`, `.p2align N, 0x90`, and `.align N, 0x90` in code sections "
"now fill the required alignment space with repeating `0x90` bytes, rather "
"than using optimised NOP filling. Optimised NOP filling fills the space with "
"NOP instructions of various widths, not just those that use the `0x90` byte "
"encoding. To use optimised NOP filling in a code section, leave off the "
"\"fillval\" argument, i.e. `.balign N`, `.p2align N` or `.align N` "
"respectively."
msgstr ""

#: ../../../ReleaseNotes.md:400
msgid ""
"Due to the removal of the `x86_mmx` IR type, functions with `x86_mmx` "
"arguments or return values will use a different, incompatible, calling "
"convention ABI. Such functions are not generally seen in the wild (Clang "
"never generates them!), so this is not expected to result in real-world "
"compatibility problems."
msgstr ""

#: ../../../ReleaseNotes.md:406
msgid "Support ISA of `AVX10.2-256` and `AVX10.2-512`."
msgstr ""

#: ../../../ReleaseNotes.md:408
msgid "Supported instructions of `MOVRS AND AVX10.2`"
msgstr ""

#: ../../../ReleaseNotes.md:410
msgid "Supported ISA of `SM4(EVEX)`."
msgstr ""

#: ../../../ReleaseNotes.md:412
msgid "Supported ISA of `MSR_IMM`."
msgstr ""

#: ../../../ReleaseNotes.md:414
msgid "Supported ``-mcpu=diamondrapids``"
msgstr ""

#: ../../../ReleaseNotes.md:416
msgid "Supported emitting relocation types for x86-64 target:"
msgstr ""

#: ../../../ReleaseNotes.md:417
msgid "`R_X86_64_CODE_4_GOTPCRELX`"
msgstr ""

#: ../../../ReleaseNotes.md:418
msgid "`R_X86_64_CODE_4_GOTTPOFF`"
msgstr ""

#: ../../../ReleaseNotes.md:419
msgid "`R_X86_64_CODE_4_GOTPC32_TLSDESC`"
msgstr ""

#: ../../../ReleaseNotes.md:420
msgid "`R_X86_64_CODE_6_GOTTPOFF`"
msgstr ""

#: ../../../ReleaseNotes.md:423
msgid "Changes to the OCaml bindings"
msgstr ""

#: ../../../ReleaseNotes.md:426
msgid "Changes to the Python bindings"
msgstr ""

#: ../../../ReleaseNotes.md:429
msgid "Changes to the C API"
msgstr ""

#: ../../../ReleaseNotes.md:432
msgid ""
"The following symbols are deleted due to the removal of the `x86_mmx` IR "
"type:"
msgstr ""

#: ../../../ReleaseNotes.md:434
msgid "`LLVMX86_MMXTypeKind`"
msgstr ""

#: ../../../ReleaseNotes.md:435
msgid "`LLVMX86MMXTypeInContext`"
msgstr ""

#: ../../../ReleaseNotes.md:436
msgid "`LLVMX86MMXType`"
msgstr ""

#: ../../../ReleaseNotes.md:438
msgid ""
"The following functions are added to further support non-null-terminated "
"strings:"
msgstr ""

#: ../../../ReleaseNotes.md:440
msgid "`LLVMGetNamedFunctionWithLength`"
msgstr ""

#: ../../../ReleaseNotes.md:441
msgid "`LLVMGetNamedGlobalWithLength`"
msgstr ""

#: ../../../ReleaseNotes.md:443
msgid ""
"The following functions are added to access the `LLVMContextRef` associated  "
"with `LLVMValueRef` and `LLVMBuilderRef` objects:"
msgstr ""

#: ../../../ReleaseNotes.md:446
msgid "`LLVMGetValueContext`"
msgstr ""

#: ../../../ReleaseNotes.md:447
msgid "`LLVMGetBuilderContext`"
msgstr ""

#: ../../../ReleaseNotes.md:449
msgid ""
"The new pass manager can now be invoked with a custom alias analysis "
"pipeline, using the `LLVMPassBuilderOptionsSetAAPipeline` function."
msgstr ""

#: ../../../ReleaseNotes.md:452
msgid ""
"It is now also possible to run the new pass manager on a single function, by "
"calling `LLVMRunPassesOnFunction` instead of `LLVMRunPasses`."
msgstr ""

#: ../../../ReleaseNotes.md:455
msgid ""
"Support for creating instructions with custom synchronization scopes has "
"been added:"
msgstr ""

#: ../../../ReleaseNotes.md:457
msgid "`LLVMGetSyncScopeID` to map a synchronization scope name to an ID."
msgstr ""

#: ../../../ReleaseNotes.md:458
msgid ""
"`LLVMBuildFenceSyncScope`, `LLVMBuildAtomicRMWSyncScope` and "
"`LLVMBuildAtomicCmpXchgSyncScope` versions of the existing builder functions "
"with an additional synchronization scope ID parameter."
msgstr ""

#: ../../../ReleaseNotes.md:461
msgid ""
"`LLVMGetAtomicSyncScopeID` and `LLVMSetAtomicSyncScopeID` to get and set the "
"synchronization scope of any atomic instruction."
msgstr ""

#: ../../../ReleaseNotes.md:463
msgid ""
"`LLVMIsAtomic` to check if an instruction is atomic, for use with the above "
"functions. Because of backwards compatibility, `LLVMIsAtomicSingleThread` "
"and `LLVMSetAtomicSingleThread` continue to work with any instruction type."
msgstr ""

#: ../../../ReleaseNotes.md:467
msgid ""
"The `LLVMSetPersonalityFn` and `LLVMSetInitializer` APIs now support "
"clearing the personality function and initializer respectively by passing a "
"null pointer."
msgstr ""

#: ../../../ReleaseNotes.md:470
msgid ""
"The following functions are added to allow iterating over debug records "
"attached to instructions:"
msgstr ""

#: ../../../ReleaseNotes.md:473
msgid "`LLVMGetFirstDbgRecord`"
msgstr ""

#: ../../../ReleaseNotes.md:474
msgid "`LLVMGetLastDbgRecord`"
msgstr ""

#: ../../../ReleaseNotes.md:475
msgid "`LLVMGetNextDbgRecord`"
msgstr ""

#: ../../../ReleaseNotes.md:476
msgid "`LLVMGetPreviousDbgRecord`"
msgstr ""

#: ../../../ReleaseNotes.md:478
msgid ""
"Added `LLVMAtomicRMWBinOpUSubCond` and `LLVMAtomicRMWBinOpUSubSat` to "
"`LLVMAtomicRMWBinOp` enum for AtomicRMW instructions."
msgstr ""

#: ../../../ReleaseNotes.md:480
msgid "Changes to the CodeGen infrastructure"
msgstr ""

#: ../../../ReleaseNotes.md:483
msgid ""
"GlobalOpt can now statically resolve calls to multi-versioned functions when "
"targeting AArch64. These calls would otherwise be routed through an IFunc "
"resolver function. This optimization can be applied when the caller is "
"either a multi-versioned function itself, or it is compiled with a "
"sufficiently high set of architecture features (including the `target` "
"attribute, and command line options)."
msgstr ""

#: ../../../ReleaseNotes.md:489
msgid "Changes to the Metadata Info"
msgstr ""

#: ../../../ReleaseNotes.md:492
msgid ""
"Multi-versioned functions targeting AArch64 are annotated with new metadata "
"named `fmv-features`. The metadata string value consists of a comma-"
"separated list of Function Multi Versioning feature names as defined in the "
"Arm C Language Extensions (ACLE)."
msgstr ""

#: ../../../ReleaseNotes.md:496
msgid "Changes to the Debug Info"
msgstr ""

#: ../../../ReleaseNotes.md:499
msgid "Changes to the LLVM tools"
msgstr ""

#: ../../../ReleaseNotes.md:502
msgid ""
"llvm-objcopy now supports the following options for Mach-O: `--globalize-"
"symbol`, `--globalize-symbols`, `--keep-global-symbol`, `--keep-global-"
"symbols`, `--localize-symbol`, `--localize-symbols`, `--skip-symbol`, `--"
"skip-symbols`."
msgstr ""

#: ../../../ReleaseNotes.md:508
msgid ""
"llvm-objcopy now prints the correct file path in the error message when the "
"output file specified by `--dump-section` cannot be opened."
msgstr ""

#: ../../../ReleaseNotes.md:510
msgid ""
"llvm-cxxfilt now supports demangling call expressions encoded using `cp` "
"instead of `cl`."
msgstr ""

#: ../../../ReleaseNotes.md:512
msgid ""
"llvm-objdump now supports printing the file header, load section header and "
"auxiliary header for XCOFF object files under the ``--private-headers`` "
"option."
msgstr ""

#: ../../../ReleaseNotes.md:514
msgid "Changes to LLDB"
msgstr ""

#: ../../../ReleaseNotes.md:517
msgid ""
"It is now recommended that LLDB be built with Python >= 3.8, but no changes "
"have been made to the supported Python versions. The next release, LLDB 21, "
"will require Python >= 3.8."
msgstr ""

#: ../../../ReleaseNotes.md:521
msgid ""
"LLDB now supports inline diagnostics for the expression evaluator and "
"command line parser."
msgstr ""

#: ../../../ReleaseNotes.md:523 ../../../ReleaseNotes.md:560
#: ../../../ReleaseNotes.md:619
msgid "Old:"
msgstr ""

#: ../../../ReleaseNotes.md:534 ../../../ReleaseNotes.md:577
#: ../../../ReleaseNotes.md:626
msgid "New:"
msgstr ""

#: ../../../ReleaseNotes.md:544
msgid ""
"Program stdout/stderr redirection will now open the file with O_TRUNC flag, "
"make sure to truncate the file if path already exists."
msgstr ""

#: ../../../ReleaseNotes.md:545
msgid "eg. `settings set target.output-path/target.error-path <path/to/file>`"
msgstr ""

#: ../../../ReleaseNotes.md:547
msgid ""
"A new setting `target.launch-working-dir` can be used to set a persistent "
"cwd that is used by default by `process launch` and `run`."
msgstr ""

#: ../../../ReleaseNotes.md:549
msgid ""
"LLDB now parses shared libraries in parallel, resulting in an average 2x "
"speedup when attaching (only available on Darwin platforms) and launching "
"(available on all platforms)."
msgstr ""

#: ../../../ReleaseNotes.md:551
msgid ""
"It is now possible to implement lldb commands in Python that use lldb's "
"native command-line parser.  In particular, that allows per-option/argument "
"completion, with all the basic completers automatically supported and auto-"
"generated help. The command template file in `lldb/examples/python/"
"cmdtemplate.py` has been updated to show how to use this."
msgstr ""

#: ../../../ReleaseNotes.md:555
msgid ""
"Breakpoints on \"inlined call sites\" are now supported.  Previous to this "
"fix, breakpoints on source lines that only contained inlined call sites "
"would be moved to the next source line, causing you to miss the inlined "
"executions."
msgstr ""

#: ../../../ReleaseNotes.md:558
msgid ""
"On the command line, LLDB now limits tab completions to your terminal width "
"to avoid wrapping."
msgstr ""

#: ../../../ReleaseNotes.md:586
msgid ""
"DWARF indexing speed (for binaries not using the `debug_names` index) "
"increased by [30-60%](https://github.com/llvm/llvm-project/pull/118657)."
msgstr ""

#: ../../../ReleaseNotes.md:589
msgid ""
"The `frame diagnose` now works on ELF-based systems. After a crash, LLDB "
"will try to determine the likely cause of the signal, matching Darwin "
"behavior. This feature requires using a new `lldb-server` version and (like "
"Darwin) only works on x86 binaries."
msgstr ""

#: ../../../ReleaseNotes.md:607
msgid "Minidumps generated by LLDB now support:"
msgstr ""

#: ../../../ReleaseNotes.md:608
msgid ""
"64 bit memory (due to 64b support, Minidumps are now paged to disk while "
"being written)."
msgstr ""

#: ../../../ReleaseNotes.md:609
msgid "Capturing of TLS variables."
msgstr ""

#: ../../../ReleaseNotes.md:610
msgid "Multiple signals or exceptions, including breakpoints."
msgstr ""

#: ../../../ReleaseNotes.md:612
msgid ""
"[New Core File API](https://lldb.llvm.org/python_api/lldb.SBSaveCoreOptions."
"html). This gives greater control on the data captured into the core file, "
"relative to the existing `process save-core` styles."
msgstr ""

#: ../../../ReleaseNotes.md:614
msgid ""
"When opening ELF core files, LLDB will print additional information about "
"the signal that killed the process and the disassembly view will display "
"actual (relocated) targets of the jump instructions instead of raw offsets "
"encoded in the instruction. This matches existing behavior for live "
"processes."
msgstr ""

#: ../../../ReleaseNotes.md:633
msgid ""
"`lldb-server` now listens to a single port for gdbserver connections and "
"provides that port to the connection handler processes. This means that only "
"2 ports need to be opened in the firewall (one for the `lldb-server` "
"platform, one for gdbserver connections). In addition, due to this work, "
"`lldb-server` now works on Windows in the server mode."
msgstr ""

#: ../../../ReleaseNotes.md:638
msgid ""
"LLDB can now read the `fpmr` register from AArch64 Linux processes and core "
"files."
msgstr ""

#: ../../../ReleaseNotes.md:641
msgid ""
"Support was added for debugging AArch64 Linux programs that use the Guarded "
"Control Stack extension (GCS). This includes live processes and core files."
msgstr ""

#: ../../../ReleaseNotes.md:645
msgid ""
"LLDB now supports execution of user expressions for non-trivial cases for "
"LoongArch and RISC-V targets, like function calls, when some code needs to "
"be executed on the target."
msgstr ""

#: ../../../ReleaseNotes.md:647
msgid ""
"LLDB now supports optionally enabled/disabled register sets (particularly "
"floating point registers) for RISC-V 64. This happens for targets like "
"`RV64IMAC` or `RV64IMACV`, that have no floating point registers. The change "
"is applied to native debugging and core-file usage."
msgstr ""

#: ../../../ReleaseNotes.md:650
msgid ""
"LLDB now supports [core-file for LoongArch](https://github.com/llvm/llvm-"
"project/pull/112296)."
msgstr ""

#: ../../../ReleaseNotes.md:652
msgid ""
"LLDB now supports [hardware breakpoint and watchpoint for LoongArch](https://"
"github.com/llvm/llvm-project/pull/118770)."
msgstr ""

#: ../../../ReleaseNotes.md:654
msgid ""
"LLDB now supports [vector registers for LoongArch](https://github.com/llvm/"
"llvm-project/pull/120664) when debugging a live process."
msgstr ""

#: ../../../ReleaseNotes.md:656
msgid ""
"Incorrect floating-point register DWARF numbers for LoongArch were [fixed]"
"(https://github.com/llvm/llvm-project/pull/120391)."
msgstr ""

#: ../../../ReleaseNotes.md:658
msgid ""
"Support was added for handling the GDB Remote Protocol `x` packet in the "
"format introduced by GDB 16.2. LLDB currently uses a different format for "
"`x` and LLDB is now able to handle both formats. At some point in the future "
"support for LLDB's format of `x` will be removed."
msgstr ""

#: ../../../ReleaseNotes.md:660
msgid "Changes to BOLT"
msgstr ""

#: ../../../ReleaseNotes.md:663
msgid "Changes to Sanitizers"
msgstr ""

#: ../../../ReleaseNotes.md:666
msgid "Changes to the Profile Runtime"
msgstr ""

#: ../../../ReleaseNotes.md:669
msgid ""
"On platforms where ``atexit``-registered functions are not called when a DSO "
"is ``dlclose``'d, a mechanism is added that implements this missing "
"functionality for calls to ``atexit`` in the profile runtime. [This is "
"currently only enabled on AIX](https://github.com/llvm/llvm-project/"
"pull/102940)."
msgstr ""

#: ../../../ReleaseNotes.md:674
msgid "Other Changes"
msgstr ""

#: ../../../ReleaseNotes.md:677
msgid "External Open Source Projects Using LLVM {{env.config.release}}"
msgstr ""

#: ../../../ReleaseNotes.md:680
msgid "A project..."
msgstr ""

#: ../../../ReleaseNotes.md:682
msgid "Additional Information"
msgstr ""

#: ../../../ReleaseNotes.md:685
msgid ""
"A wide variety of additional information is available on the [LLVM web page]"
"(https://llvm.org/), in particular in the [documentation](https://llvm.org/"
"docs/) section.  The web page also contains versions of the API "
"documentation which is up-to-date with the Git version of the source code.  "
"You can access versions of these documents specific to this release by going "
"into the `llvm/docs/` directory in the LLVM tree."
msgstr ""

#: ../../../ReleaseNotes.md:692
msgid ""
"If you have any questions or comments about LLVM, please feel free to "
"contact us via the [Discourse forums](https://discourse.llvm.org)."
msgstr ""
