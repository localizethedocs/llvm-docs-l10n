# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 21\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../DTLTO.rst:3
msgid "DTLTO"
msgstr ""

#: ../../../DTLTO.rst:12
msgid "Distributed ThinLTO (DTLTO)"
msgstr ""

#: ../../../DTLTO.rst:14
msgid ""
"Distributed ThinLTO (DTLTO) enables the distribution of backend ThinLTO "
"compilations via external distribution systems, such as Incredibuild, during "
"the link step."
msgstr ""

#: ../../../DTLTO.rst:18
msgid ""
"DTLTO extends the existing ThinLTO distribution support which uses separate "
"*thin-link*, *backend compilation*, and *link* steps. This method is "
"documented here:"
msgstr ""

#: ../../../DTLTO.rst:22
msgid "https://blog.llvm.org/2016/06/thinlto-scalable-and-incremental-lto.html"
msgstr ""

#: ../../../DTLTO.rst:24
msgid ""
"Using the *separate thin-link* approach requires a build system capable of "
"handling the dynamic dependencies specified in the individual summary index "
"files, such as Bazel. DTLTO removes this requirement, allowing it to be used "
"with any build process that supports in-process ThinLTO."
msgstr ""

#: ../../../DTLTO.rst:29
msgid ""
"The following commands show the steps used for the *separate thin-link* "
"approach for a basic example:"
msgstr ""

#: ../../../DTLTO.rst:40
msgid ""
"With DTLTO, steps 2-5 are performed internally as part of the link step. The "
"equivalent DTLTO commands for the above are:"
msgstr ""

#: ../../../DTLTO.rst:48
msgid ""
"For DTLTO, LLD prepares the following for each ThinLTO backend compilation "
"job:"
msgstr ""

#: ../../../DTLTO.rst:50
msgid ""
"An individual index file and a list of input and output files (corresponds "
"to step 2 above)."
msgstr ""

#: ../../../DTLTO.rst:52
msgid "A Clang command line to perform the ThinLTO backend compilations."
msgstr ""

#: ../../../DTLTO.rst:54
msgid ""
"This information is supplied, via a JSON file, to ``distributor_process``, "
"which executes the backend compilations using a distribution system "
"(corresponds to steps 3 and 4 above). Upon completion, LLD integrates the "
"compiled native object files into the link process and completes the link "
"(corresponds to step 5 above)."
msgstr ""

#: ../../../DTLTO.rst:60
msgid ""
"This design keeps the details of distribution systems out of the LLVM source "
"code."
msgstr ""

#: ../../../DTLTO.rst:63
msgid ""
"An example distributor that performs all work on the local system is "
"included in the LLVM source tree. To run an example with that distributor, a "
"command line such as the following can be used:"
msgstr ""

#: ../../../DTLTO.rst:73
msgid "Distributors"
msgstr ""

#: ../../../DTLTO.rst:75
msgid "Distributors are programs responsible for:"
msgstr ""

#: ../../../DTLTO.rst:77
msgid "Consuming the JSON backend compilations job description file."
msgstr ""

#: ../../../DTLTO.rst:78
msgid "Translating job descriptions into requests for the distribution system."
msgstr ""

#: ../../../DTLTO.rst:79
msgid "Blocking execution until all backend compilations are complete."
msgstr ""

#: ../../../DTLTO.rst:81
msgid ""
"Distributors must return a non-zero exit code on failure. They can be "
"implemented as platform native executables or in a scripting language, such "
"as Python."
msgstr ""

#: ../../../DTLTO.rst:85
msgid ""
"Clang and LLD provide options to specify a distributor program for managing "
"backend compilations. Distributor options and backend compilation options "
"can also be specified. Such options are transparently forwarded."
msgstr ""

#: ../../../DTLTO.rst:89
msgid ""
"The backend compilations are currently performed by invoking Clang. For "
"further details, refer to:"
msgstr ""

#: ../../../DTLTO.rst:92
msgid "Clang documentation: https://clang.llvm.org/docs/ThinLTO.html"
msgstr ""

#: ../../../DTLTO.rst:93
msgid "LLD documentation: https://lld.llvm.org/DTLTO.html"
msgstr ""

#: ../../../DTLTO.rst:95
msgid ""
"When invoked with a distributor, LLD generates a JSON file describing the "
"backend compilation jobs and executes the distributor, passing it this file."
msgstr ""

#: ../../../DTLTO.rst:99
msgid "JSON Schema"
msgstr ""

#: ../../../DTLTO.rst:101
msgid ""
"The JSON format is explained by reference to the following example, which "
"describes the backend compilation of the modules ``t1.o`` and ``t2.o``:"
msgstr ""

#: ../../../DTLTO.rst:126
msgid ""
"Each entry in the ``jobs`` array represents a single backend compilation "
"job. Each job object records its own command-line arguments and input/output "
"files. Shared arguments and inputs are defined once in the ``common`` object."
msgstr ""

#: ../../../DTLTO.rst:130
msgid "Reserved Entries:"
msgstr ""

#: ../../../DTLTO.rst:132
msgid ""
"The first entry in the ``common.args`` array specifies the compiler "
"executable to invoke."
msgstr ""

#: ../../../DTLTO.rst:134
msgid ""
"The first entry in each job's ``inputs`` array is the bitcode file for the "
"module being compiled."
msgstr ""

#: ../../../DTLTO.rst:136
msgid ""
"The second entry in each job's ``inputs`` array is the corresponding "
"individual summary index file."
msgstr ""

#: ../../../DTLTO.rst:138
msgid ""
"The first entry in each job's ``outputs`` array is the primary output object "
"file."
msgstr ""

#: ../../../DTLTO.rst:141
msgid ""
"For the ``outputs`` array, only the first entry is reserved for the primary "
"output file; there is no guaranteed order for the remaining entries. The "
"primary output file is specified in a reserved entry because some "
"distribution systems rely on this path - for example, to provide a "
"meaningful user label for compilation jobs. Initially, the DTLTO "
"implementation will not produce more than one output file. However, in the "
"future, if LTO options are added that imply additional output files, those "
"files will also be included in this array."
msgstr ""

#: ../../../DTLTO.rst:149
msgid ""
"Command-line arguments and input/output files are stored separately to allow "
"the remote compiler to be changed without updating the distributors, as the "
"distributors do not need to understand the details of the compiler command "
"line."
msgstr ""

#: ../../../DTLTO.rst:154
msgid ""
"To generate the backend compilation commands, the common and job-specific "
"arguments are concatenated."
msgstr ""

#: ../../../DTLTO.rst:157
msgid ""
"When consuming the example JSON above, a distributor is expected to issue "
"the following backend compilation commands with maximum parallelism:"
msgstr ""

#: ../../../DTLTO.rst:169
msgid "TODOs"
msgstr ""

#: ../../../DTLTO.rst:171
msgid "The following features are planned for DTLTO but not yet implemented:"
msgstr ""

#: ../../../DTLTO.rst:173
msgid "Support for the ThinLTO in-process cache."
msgstr ""

#: ../../../DTLTO.rst:174
msgid "Support for platforms other than ELF and COFF."
msgstr ""

#: ../../../DTLTO.rst:175
msgid "Support for archives with bitcode members."
msgstr ""

#: ../../../DTLTO.rst:176
msgid ""
"Support for more LTO configurations; only a very limited set of LTO "
"configurations is supported currently, e.g., support for basic block "
"sections is not currently available."
msgstr ""

#: ../../../DTLTO.rst:181
msgid "Constraints"
msgstr ""

#: ../../../DTLTO.rst:183
msgid "Matching versions of Clang and LLD should be used."
msgstr ""

#: ../../../DTLTO.rst:184
msgid ""
"The distributor used must support the JSON schema generated by the version "
"of LLD in use."
msgstr ""
