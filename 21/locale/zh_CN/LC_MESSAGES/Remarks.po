# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 21\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../Remarks.rst:3
msgid "Remarks"
msgstr ""

#: ../../../Remarks.rst:9
msgid "Introduction to the LLVM remark diagnostics"
msgstr ""

#: ../../../Remarks.rst:11
msgid ""
"LLVM is able to emit diagnostics from passes describing whether an "
"optimization has been performed or missed for a particular reason, which "
"should give more insight to users about what the compiler did during the "
"compilation pipeline."
msgstr ""

#: ../../../Remarks.rst:15
msgid "There are three main remark types:"
msgstr ""

#: ../../../Remarks.rst:17
msgid "``Passed``"
msgstr ""

#: ../../../Remarks.rst:19
msgid ""
"Remarks that describe a successful optimization performed by the compiler."
msgstr ""

#: ../../../Remarks.rst:0
msgid "Example"
msgstr ""

#: ../../../Remarks.rst:27
msgid "``Missed``"
msgstr ""

#: ../../../Remarks.rst:29
msgid ""
"Remarks that describe an attempt to an optimization by the compiler that "
"could not be performed."
msgstr ""

#: ../../../Remarks.rst:39
msgid "``Analysis``"
msgstr ""

#: ../../../Remarks.rst:41
msgid ""
"Remarks that describe the result of an analysis, that can bring more "
"information to the user regarding the generated code."
msgstr ""

#: ../../../Remarks.rst:55
msgid "Enabling optimization remarks"
msgstr ""

#: ../../../Remarks.rst:57
msgid ""
"There are two modes that are supported for enabling optimization remarks in "
"LLVM: through remark diagnostics, or through serialized remarks."
msgstr ""

#: ../../../Remarks.rst:60
msgid ""
"See also the clang flags `-Rpass <https://clang.llvm.org/docs/UsersManual."
"html#options-to-emit-optimization-reports>`_ and `-fsave-optimization-record "
"<http://clang.llvm.org/docs/UsersManual.html#cmdoption-f-no-save-"
"optimization-record>`_."
msgstr ""

#: ../../../Remarks.rst:66
msgid "Remark diagnostics"
msgstr ""

#: ../../../Remarks.rst:68
msgid ""
"Optimization remarks can be emitted as diagnostics. These diagnostics will "
"be propagated to front-ends if desired, or emitted by tools like :doc:`llc "
"<CommandGuide/llc>` or :doc:`opt <CommandGuide/opt>`."
msgstr ""

#: ../../../Remarks.rst:74
msgid ""
"Enables optimization remarks from passes whose name match the given (POSIX) "
"regular expression."
msgstr ""

#: ../../../Remarks.rst:79
msgid ""
"Enables missed optimization remarks from passes whose name match the given "
"(POSIX) regular expression."
msgstr ""

#: ../../../Remarks.rst:84
msgid ""
"Enables optimization analysis remarks from passes whose name match the given "
"(POSIX) regular expression."
msgstr ""

#: ../../../Remarks.rst:88
msgid "Serialized remarks"
msgstr ""

#: ../../../Remarks.rst:90
msgid ""
"While diagnostics are useful during development, it is often more useful to "
"refer to optimization remarks post-compilation, typically during performance "
"analysis."
msgstr ""

#: ../../../Remarks.rst:94
msgid ""
"For that, LLVM can serialize the remarks produced for each compilation unit "
"to a file that can be consumed later."
msgstr ""

#: ../../../Remarks.rst:97
msgid ""
"By default, the format of the serialized remarks is :ref:`YAML "
"<yamlremarks>`, and it can be accompanied by a :ref:`section "
"<remarkssection>` in the object files to easily retrieve it."
msgstr ""

#: ../../../Remarks.rst:101
msgid ""
":doc:`llc <CommandGuide/llc>` and :doc:`opt <CommandGuide/opt>` support the "
"following options:"
msgstr ""

#: ../../../Remarks.rst:105
msgid "``Basic options``"
msgstr ""

#: ../../../Remarks.rst:109
msgid "Enables the serialization of remarks to a file specified in <filename>."
msgstr ""

#: ../../../Remarks.rst:111
msgid "By default, the output is serialized to :ref:`YAML <yamlremarks>`."
msgstr ""

#: ../../../Remarks.rst:115
msgid "Specifies the output format of the serialized remarks."
msgstr ""

#: ../../../Remarks.rst:117
msgid "Supported formats:"
msgstr ""

#: ../../../Remarks.rst:119
msgid ":ref:`yaml <yamlremarks>` (default)"
msgstr ""

#: ../../../Remarks.rst:120
msgid ":ref:`bitstream <bitstreamremarks>`"
msgstr ""

#: ../../../Remarks.rst:122
msgid "``Content configuration``"
msgstr ""

#: ../../../Remarks.rst:126
msgid ""
"Only passes whose name match the given (POSIX) regular expression will be "
"serialized to the final output."
msgstr ""

#: ../../../Remarks.rst:131
msgid "With PGO, include profile count in optimization remarks."
msgstr ""

#: ../../../Remarks.rst:135
msgid ""
"The minimum profile count required for an optimization remark to be emitted."
msgstr ""

#: ../../../Remarks.rst:138
msgid "Other tools that support remarks:"
msgstr ""

#: ../../../Remarks.rst:140
msgid ":program:`llvm-lto`"
msgstr ""

#: ../../../Remarks.rst:148
msgid ":program:`gold-plugin` and :program:`lld`"
msgstr ""

#: ../../../Remarks.rst:156
msgid "Serialization modes"
msgstr ""

#: ../../../Remarks.rst:158
msgid "There are two modes available for serializing remarks:"
msgstr ""

#: ../../../Remarks.rst:160
msgid "``Separate``"
msgstr ""

#: ../../../Remarks.rst:162
msgid ""
"In this mode, the remarks and the metadata are serialized separately. The "
"client is responsible for parsing the metadata first, then use the metadata "
"to correctly parse the remarks."
msgstr ""

#: ../../../Remarks.rst:166 ../../../Remarks.rst:471
msgid "``Standalone``"
msgstr ""

#: ../../../Remarks.rst:168
msgid ""
"In this mode, the remarks and the metadata are serialized to the same "
"stream. The metadata will always come before the remarks."
msgstr ""

#: ../../../Remarks.rst:171
msgid ""
"The compiler does not support emitting standalone remarks. This mode is more "
"suited for post-processing tools like linkers, that can merge the remarks "
"for one whole project."
msgstr ""

#: ../../../Remarks.rst:178
msgid "YAML remarks"
msgstr ""

#: ../../../Remarks.rst:180
msgid "A typical remark serialized to YAML looks like this:"
msgstr ""

#: ../../../Remarks.rst:194
msgid "The following entries are mandatory:"
msgstr ""

#: ../../../Remarks.rst:196
msgid ""
"``<TYPE>``: can be ``Passed``, ``Missed``, ``Analysis``, "
"``AnalysisFPCommute``, ``AnalysisAliasing``, ``Failure``."
msgstr ""

#: ../../../Remarks.rst:198
msgid "``<pass>``: the name of the pass that emitted this remark."
msgstr ""

#: ../../../Remarks.rst:199
msgid "``<name>``: the name of the remark coming from ``<pass>``."
msgstr ""

#: ../../../Remarks.rst:200
msgid "``<function>``: the mangled name of the function."
msgstr ""

#: ../../../Remarks.rst:202
msgid ""
"If a ``DebugLoc`` entry is specified, the following fields are required:"
msgstr ""

#: ../../../Remarks.rst:204
msgid "``<file>``"
msgstr ""

#: ../../../Remarks.rst:205
msgid "``<line>``"
msgstr ""

#: ../../../Remarks.rst:206
msgid "``<column>``"
msgstr ""

#: ../../../Remarks.rst:208
msgid "If an ``arg`` entry is specified, the following fields are required:"
msgstr ""

#: ../../../Remarks.rst:210
msgid "``<key>``"
msgstr ""

#: ../../../Remarks.rst:211
msgid "``<value>``"
msgstr ""

#: ../../../Remarks.rst:213
msgid ""
"If a ``DebugLoc`` entry is specified within an ``arg`` entry, the following "
"fields are required:"
msgstr ""

#: ../../../Remarks.rst:216
msgid "``<arg-file>``"
msgstr ""

#: ../../../Remarks.rst:217
msgid "``<arg-line>``"
msgstr ""

#: ../../../Remarks.rst:218
msgid "``<arg-column>``"
msgstr ""

#: ../../../Remarks.rst:223
msgid "YAML metadata"
msgstr ""

#: ../../../Remarks.rst:225
msgid "The metadata used together with the YAML format is:"
msgstr ""

#: ../../../Remarks.rst:227
msgid "a magic number: \"REMARKS\\\\0\""
msgstr ""

#: ../../../Remarks.rst:228
msgid "the version number: a little-endian uint64_t"
msgstr ""

#: ../../../Remarks.rst:229
msgid ""
"8 zero bytes. This space was previously used to encode the size of a string "
"table. String table support for YAML remarks has been removed, use the "
"bitstream format instead."
msgstr ""

#: ../../../Remarks.rst:233
msgid "Optional:"
msgstr ""

#: ../../../Remarks.rst:235
msgid ""
"the absolute file path to the serialized remark diagnostics: a null-"
"terminated string."
msgstr ""

#: ../../../Remarks.rst:238
msgid ""
"When the metadata is serialized separately from the remarks, the file path "
"should be present and point to the file where the remarks are serialized to."
msgstr ""

#: ../../../Remarks.rst:241
msgid ""
"In case the metadata only acts as a header to the remarks, the file path can "
"be omitted."
msgstr ""

#: ../../../Remarks.rst:247
msgid "LLVM bitstream remarks"
msgstr ""

#: ../../../Remarks.rst:249
msgid ""
"This format is using :doc:`LLVM bitstream <BitCodeFormat>` to serialize "
"remarks and their associated metadata."
msgstr ""

#: ../../../Remarks.rst:252
msgid ""
"A bitstream remark stream can be identified by the magic number ``\"RMRK\"`` "
"that is placed at the very beginning."
msgstr ""

#: ../../../Remarks.rst:255
msgid ""
"The format for serializing remarks is composed of two different block types:"
msgstr ""

#: ../../../Remarks.rst:260
msgid "META_BLOCK"
msgstr ""

#: ../../../Remarks.rst:262
msgid ""
"The block providing information about the rest of the content in the stream."
msgstr ""

#: ../../../Remarks.rst:264
msgid ""
"Exactly one block is expected. Having multiple metadata blocks is an error."
msgstr ""

#: ../../../Remarks.rst:266 ../../../Remarks.rst:311
msgid "This block can contain the following records:"
msgstr ""

#: ../../../Remarks.rst:270
msgid "``RECORD_META_CONTAINER_INFO``"
msgstr ""

#: ../../../Remarks.rst:272
msgid "The container version and type."
msgstr ""

#: ../../../Remarks.rst:274 ../../../Remarks.rst:285
msgid "Version: u32"
msgstr ""

#: ../../../Remarks.rst:276
msgid "Type:    u2"
msgstr ""

#: ../../../Remarks.rst:280
msgid "``RECORD_META_REMARK_VERSION``"
msgstr ""

#: ../../../Remarks.rst:282
msgid ""
"The version of the remark entries. This can change independently from the "
"container version."
msgstr ""

#: ../../../Remarks.rst:289
msgid "``RECORD_META_STRTAB``"
msgstr ""

#: ../../../Remarks.rst:291
msgid ""
"The string table used by the remark entries. The format of the string table "
"is a sequence of strings separated by ``\\0``."
msgstr ""

#: ../../../Remarks.rst:296
msgid "``RECORD_META_EXTERNAL_FILE``"
msgstr ""

#: ../../../Remarks.rst:298
msgid ""
"The external remark file path that contains the remark blocks associated "
"with this metadata. This is an absolute path."
msgstr ""

#: ../../../Remarks.rst:304
msgid "REMARK_BLOCK"
msgstr ""

#: ../../../Remarks.rst:306
msgid "The block describing a remark entry."
msgstr ""

#: ../../../Remarks.rst:308
msgid ""
"0 or more blocks per file are allowed. Each block will depend on the :ref:"
"`META_BLOCK <bitstreamremarksmetablock>` in order to be parsed correctly."
msgstr ""

#: ../../../Remarks.rst:313
msgid "``RECORD_REMARK_HEADER``"
msgstr ""

#: ../../../Remarks.rst:315
msgid ""
"The header of the remark. This contains all the mandatory information about "
"a remark."
msgstr ""

#: ../../../Remarks.rst:319
msgid "Type"
msgstr ""

#: ../../../Remarks.rst:319
msgid "u3"
msgstr ""

#: ../../../Remarks.rst:321
msgid "Remark name"
msgstr ""

#: ../../../Remarks.rst:321 ../../../Remarks.rst:323 ../../../Remarks.rst:325
msgid "VBR6 (string table index)"
msgstr ""

#: ../../../Remarks.rst:323
msgid "Pass name"
msgstr ""

#: ../../../Remarks.rst:325
msgid "Function name"
msgstr ""

#: ../../../Remarks.rst:328
msgid "``RECORD_REMARK_DEBUG_LOC``"
msgstr ""

#: ../../../Remarks.rst:330
msgid ""
"The source location for the corresponding remark. This record is optional."
msgstr ""

#: ../../../Remarks.rst:333 ../../../Remarks.rst:357
msgid "File"
msgstr ""

#: ../../../Remarks.rst:333 ../../../Remarks.rst:353 ../../../Remarks.rst:355
#: ../../../Remarks.rst:357 ../../../Remarks.rst:369 ../../../Remarks.rst:371
msgid "VBR7 (string table index)"
msgstr ""

#: ../../../Remarks.rst:335 ../../../Remarks.rst:359
msgid "Line"
msgstr ""

#: ../../../Remarks.rst:335 ../../../Remarks.rst:337 ../../../Remarks.rst:359
#: ../../../Remarks.rst:361
msgid "u32"
msgstr ""

#: ../../../Remarks.rst:337 ../../../Remarks.rst:361
msgid "Column"
msgstr ""

#: ../../../Remarks.rst:340
msgid "``RECORD_REMARK_HOTNESS``"
msgstr ""

#: ../../../Remarks.rst:342
msgid "The hotness of the remark. This record is optional."
msgstr ""

#: ../../../Remarks.rst:345
msgid "Hotness | VBR8 (string table index)"
msgstr ""

#: ../../../Remarks.rst:348
msgid "``RECORD_REMARK_ARG_WITH_DEBUGLOC``"
msgstr ""

#: ../../../Remarks.rst:350 ../../../Remarks.rst:366
msgid "A remark argument with an associated debug location."
msgstr ""

#: ../../../Remarks.rst:353 ../../../Remarks.rst:369
msgid "Key"
msgstr ""

#: ../../../Remarks.rst:355 ../../../Remarks.rst:371
msgid "Value"
msgstr ""

#: ../../../Remarks.rst:364
msgid "``RECORD_REMARK_ARG_WITHOUT_DEBUGLOC``"
msgstr ""

#: ../../../Remarks.rst:375
msgid "The remark container"
msgstr ""

#: ../../../Remarks.rst:377
msgid "Bitstream remarks are designed to be used in two different modes:"
msgstr ""

#: ../../../Remarks.rst:379
msgid "``The separate mode``"
msgstr ""

#: ../../../Remarks.rst:381
msgid ""
"The separate mode is the mode that is typically used during compilation. It "
"provides a way to serialize the remark entries to a stream while some "
"metadata is kept in memory to be emitted in the product of the compilation "
"(typically, an object file)."
msgstr ""

#: ../../../Remarks.rst:386
msgid "``The standalone mode``"
msgstr ""

#: ../../../Remarks.rst:388
msgid ""
"The standalone mode is typically stored and used after the distribution of a "
"program. It contains all the information that allows the parsing of all the "
"remarks without having any external dependencies."
msgstr ""

#: ../../../Remarks.rst:392
msgid ""
"In order to support multiple modes, the format introduces the concept of a "
"bitstream remark container type."
msgstr ""

#: ../../../Remarks.rst:397
msgid "``SeparateRemarksMeta: the metadata emitted separately``"
msgstr ""

#: ../../../Remarks.rst:399 ../../../Remarks.rst:411 ../../../Remarks.rst:434
msgid ""
"This container type expects only a :ref:`META_BLOCK "
"<bitstreamremarksmetablock>` containing only:"
msgstr ""

#: ../../../Remarks.rst:401 ../../../Remarks.rst:413 ../../../Remarks.rst:436
msgid ""
":ref:`RECORD_META_CONTAINER_INFO <bitstreamremarksrecordmetacontainerinfo>`"
msgstr ""

#: ../../../Remarks.rst:402 ../../../Remarks.rst:438
msgid ":ref:`RECORD_META_STRTAB <bitstreamremarksrecordmetastrtab>`"
msgstr ""

#: ../../../Remarks.rst:403
msgid ""
":ref:`RECORD_META_EXTERNAL_FILE <bitstreamremarksrecordmetaexternalfile>`"
msgstr ""

#: ../../../Remarks.rst:405
msgid ""
"Typically, this is emitted in a section in the object files, allowing "
"clients to retrieve remarks and their associated metadata directly from "
"intermediate products."
msgstr ""

#: ../../../Remarks.rst:409
msgid "``SeparateRemarksFile: the remark entries emitted separately``"
msgstr ""

#: ../../../Remarks.rst:414 ../../../Remarks.rst:437
msgid ""
":ref:`RECORD_META_REMARK_VERSION <bitstreamremarksrecordmetaremarkversion>`"
msgstr ""

#: ../../../Remarks.rst:416 ../../../Remarks.rst:440
msgid ""
"This container type expects 0 or more :ref:`REMARK_BLOCK "
"<bitstreamremarksremarkblock>`."
msgstr ""

#: ../../../Remarks.rst:418
msgid ""
"Typically, this is emitted in a side-file alongside an object file, and is "
"made to be able to stream to without increasing the memory consumption of "
"the compiler. This is referenced by the :ref:`RECORD_META_EXTERNAL_FILE "
"<bitstreamremarksrecordmetaexternalfile>` entry in the :ref:"
"`SeparateRemarksMeta <bitstreamremarksseparateremarksmeta>` container."
msgstr ""

#: ../../../Remarks.rst:424
msgid ""
"When the parser tries to parse a container that contains the metadata for "
"the separate remarks, it should parse the version and type, then keep the "
"string table in memory while opening the external file, validating its "
"metadata and parsing the remark entries."
msgstr ""

#: ../../../Remarks.rst:429
msgid ""
"The container versions from the separate container should match in order to "
"have a well-formed file."
msgstr ""

#: ../../../Remarks.rst:432
msgid "``Standalone: the metadata and the remark entries emitted together``"
msgstr ""

#: ../../../Remarks.rst:442
msgid ""
"A complete output of :program:`llvm-bcanalyzer` on the different container "
"types:"
msgstr ""

#: ../../../Remarks.rst:444
msgid "``SeparateRemarksMeta``"
msgstr ""

#: ../../../Remarks.rst:455
msgid "``SeparateRemarksFile``"
msgstr ""

#: ../../../Remarks.rst:489
msgid "opt-viewer"
msgstr ""

#: ../../../Remarks.rst:491
msgid ""
"The ``opt-viewer`` directory contains a collection of tools that visualize "
"and summarize serialized remarks."
msgstr ""

#: ../../../Remarks.rst:494
msgid "The tools only support the ``yaml`` format."
msgstr ""

#: ../../../Remarks.rst:499
msgid "opt-viewer.py"
msgstr ""

#: ../../../Remarks.rst:501
msgid ""
"Output a HTML page which gives visual feedback on compiler interactions with "
"your program."
msgstr ""

#: ../../../Remarks.rst:0
msgid "Examples"
msgstr ""

#: ../../../Remarks.rst:516
msgid "opt-stats.py"
msgstr ""

#: ../../../Remarks.rst:518
msgid "Output statistics about the optimization remarks in the input set."
msgstr ""

#: ../../../Remarks.rst:540
msgid "opt-diff.py"
msgstr ""

#: ../../../Remarks.rst:542
msgid ""
"Produce a new YAML file which contains all of the changes in optimizations "
"between two YAML files."
msgstr ""

#: ../../../Remarks.rst:545
msgid "Typically, this tool should be used to do diffs between:"
msgstr ""

#: ../../../Remarks.rst:547
msgid "new compiler + fixed source vs old compiler + fixed source"
msgstr ""

#: ../../../Remarks.rst:548
msgid "fixed compiler + new source vs fixed compiler + old source"
msgstr ""

#: ../../../Remarks.rst:550
msgid ""
"This diff file can be displayed using :ref:`opt-viewer.py <optviewerpy>`."
msgstr ""

#: ../../../Remarks.rst:562
msgid "Emitting remark diagnostics in the object file"
msgstr ""

#: ../../../Remarks.rst:564
msgid ""
"A section containing metadata on remark diagnostics will be emitted for the "
"following formats:"
msgstr ""

#: ../../../Remarks.rst:567
msgid "``bitstream``"
msgstr ""

#: ../../../Remarks.rst:569
msgid "This can be overridden by using the flag ``-remarks-section=<bool>``."
msgstr ""

#: ../../../Remarks.rst:571
msgid "The section is named:"
msgstr ""

#: ../../../Remarks.rst:573
msgid "``__LLVM,__remarks`` (MachO)"
msgstr ""

#: ../../../Remarks.rst:576
msgid "C API"
msgstr ""

#: ../../../Remarks.rst:578
msgid ""
"LLVM provides a library that can be used to parse remarks through a shared "
"library named ``libRemarks``."
msgstr ""

#: ../../../Remarks.rst:581
msgid "The typical usage through the C API is like the following:"
msgstr ""

#: ../../../Remarks.rst:595
msgid "Remark streamers"
msgstr ""

#: ../../../Remarks.rst:597
msgid ""
"The ``RemarkStreamer`` interface is used to unify the serialization "
"capabilities of remarks across all the components that can generate remarks."
msgstr ""

#: ../../../Remarks.rst:600
msgid ""
"All remark serialization should go through the main remark streamer, the "
"``llvm::remarks::RemarkStreamer`` set up in the ``LLVMContext``. The "
"interface takes remark objects converted to ``llvm::remarks::Remark``, and "
"takes care of serializing it to the requested format, using the requested "
"type of metadata, etc."
msgstr ""

#: ../../../Remarks.rst:606
msgid ""
"Typically, a specialized remark streamer will hold a reference to the one "
"set up in the ``LLVMContext``, and will operate on its own type of "
"diagnostics."
msgstr ""

#: ../../../Remarks.rst:609
msgid ""
"For example, LLVM IR passes will emit ``llvm::DiagnosticInfoOptimization*`` "
"that get converted to ``llvm::remarks::Remark`` objects.  Then, clang could "
"set up its own specialized remark streamer that takes ``clang::Diagnostic`` "
"objects. This can allow various components of the frontend to emit remarks "
"using the same techniques as the LLVM remarks."
msgstr ""

#: ../../../Remarks.rst:615
msgid "This gives us the following advantages:"
msgstr ""

#: ../../../Remarks.rst:617
msgid ""
"Composition: during the compilation pipeline, multiple components can set up "
"their specialized remark streamers that all emit remarks through the same "
"main streamer."
msgstr ""

#: ../../../Remarks.rst:620
msgid "Re-using the remark infrastructure in ``lib/Remarks``."
msgstr ""

#: ../../../Remarks.rst:621
msgid ""
"Using the same file and format for the remark emitters created throughout "
"the compilation."
msgstr ""

#: ../../../Remarks.rst:624
msgid "at the cost of an extra layer of abstraction."
msgstr ""
