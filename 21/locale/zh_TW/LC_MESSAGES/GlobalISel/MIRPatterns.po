# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 21\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../GlobalISel/MIRPatterns.rst:6
msgid "MIR Patterns in TableGen"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:13
msgid "User's Guide"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:15
msgid ""
"This section is intended for developers who want to use MIR patterns in "
"their TableGen files."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:18
msgid ""
"``NOTE``: This feature is still in active development. This document may "
"become outdated over time. If you see something that's incorrect, please "
"update it."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:23
msgid "Use Cases"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:25
msgid "MIR patterns are supported in the following places:"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:27
msgid "GlobalISel ``GICombineRule``"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:28
msgid "GlobalISel ``GICombinePatFrag``"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:31
msgid "Syntax"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:33
msgid "MIR patterns use the DAG datatype in TableGen."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:39
msgid ""
"``inst`` must be a def which inherits from ``Instruction`` (e.g. "
"``G_FADD``), ``Intrinsic`` or ``GICombinePatFrag``."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:42
msgid "Operands essentially fall into one of two categories:"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:44
msgid "immediates"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:46
msgid "untyped, unnamed: ``0``"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:47
msgid "untyped, named: ``0:$y``"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:48
msgid "typed, unnamed: ``(i32 0)``"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:49
msgid "typed, named: ``(i32 0):$y``"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:51
msgid "machine operands"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:53
msgid "untyped: ``$x``"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:54
msgid "typed: ``i32:$x``"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:56
#: ../../../GlobalISel/MIRPatterns.rst:122
#: ../../../GlobalISel/MIRPatterns.rst:164
#: ../../../GlobalISel/MIRPatterns.rst:218
#: ../../../GlobalISel/MIRPatterns.rst:233
msgid "Semantics:"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:58
msgid "A typed operand always adds an operand type check to the matcher."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:59
msgid "There is a trivial type inference system to propagate types."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:61
msgid ""
"e.g. You only need to use ``i32:$x`` once in any pattern of a "
"``GICombinePatFrag`` alternative or ``GICombineRule``, then all other "
"patterns in that rule/alternative can simply use ``$x`` (``i32:$x`` is "
"redundant)."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:66
msgid ""
"A named operand's behavior depends on whether the name has been seen before."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:68
msgid ""
"For match patterns, reusing an operand name checks that the operands are "
"identical (see example 2 below)."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:70
msgid ""
"For apply patterns, reusing an operand name simply copies that operand into "
"the new instruction (see example 2 below)."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:73
msgid ""
"Operands are ordered just like they would be in a MachineInstr: the defs "
"(outs) come first, then the uses (ins)."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:76
msgid ""
"Patterns are generally grouped into another DAG datatype with a dummy "
"operator such as ``match``, ``apply``, ``combine`` or ``pattern``."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:79
msgid ""
"Finally, any DAG datatype in TableGen can be named. This also holds for "
"patterns. e.g. the following is valid: ``(G_FOO $root, (i32 0):$cst):"
"$mypat``. This may also be helpful to debug issues. Patterns are *always* "
"named, and if they don't have a name, an \"anonymous\" one is given to them. "
"If you're trying to debug an error related to a MIR pattern, but the error "
"mentions an anonymous pattern, you can try naming your patterns to see "
"exactly where the issue is."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:86
msgid "Pattern Example 1"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:95
msgid "Pattern Example 2"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:105
msgid "Types"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:108
msgid "ValueType"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:110
msgid "Subclasses of ``ValueType`` are valid types, e.g. ``i32``."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:113
msgid "GITypeOf"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:115
msgid ""
"``GITypeOf<\"$x\">`` is a ``GISpecialType`` that allows for the creation of "
"a register or immediate with the same type as another (register) operand."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:118
#: ../../../GlobalISel/MIRPatterns.rst:152
msgid "Type Parameters:"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:120
msgid "An operand name as a string, prefixed by ``$``."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:124
#: ../../../GlobalISel/MIRPatterns.rst:220
msgid "Can only appear in an 'apply' pattern."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:125
msgid ""
"The operand name used must appear in the 'match' pattern of the same "
"``GICombineRule``."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:128
msgid "Example: Immediate"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:137
msgid "Example: Temp Reg"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:147
msgid "GIVariadic"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:149
msgid ""
"``GIVariadic<>`` is a ``GISpecialType`` that allows for matching 1 or more "
"operands remaining on an instruction."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:154
msgid ""
"The minimum number of additional operands to match. Must be greater than "
"zero."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:156
msgid "Default is 1."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:158
msgid ""
"The maximum number of additional operands to match. Must be strictly greater "
"than the minimum."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:161
msgid "0 can be used to indicate there is no upper limit."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:162
msgid "Default is 0."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:166
msgid "``GIVariadic<>`` operands can only appear on variadic instructions."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:167
msgid "``GIVariadic<>`` operands cannot be defs."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:168
msgid ""
"``GIVariadic<>`` operands can only appear as the last operand in a 'match' "
"pattern."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:169
msgid "Each instance within a 'match' pattern must be uniquely named."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:170
msgid ""
"Re-using a ``GIVariadic<>`` operand in an 'apply' pattern will result in all "
"the matched operands being copied from the original instruction."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:172
msgid ""
"The min/max operands will result in the matcher checking that the number of "
"operands falls within that range."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:174
msgid ""
"``GIVariadic<>`` operands can be used in C++ code within a rule, which will "
"result in the operand name being expanded to a value of type "
"``ArrayRef<MachineOperand>``."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:200
msgid "Builtin Operations"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:202
msgid ""
"MIR Patterns also offer builtin operations, also called \"builtin "
"instructions\". They offer some powerful features that would otherwise "
"require use of C++ code."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:206
msgid "GIReplaceReg"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:208
#: ../../../GlobalISel/MIRPatterns.rst:228
msgid "Usage"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:213
msgid "Operands:"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:215
msgid "``$old`` (out) register defined by a matched instruction"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:216
msgid "``$new`` (in)  register"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:221
msgid ""
"If both old/new are operands of matched instructions, ``canReplaceReg`` is "
"checked before applying the rule."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:226
msgid "GIEraseRoot"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:235
msgid "Can only appear as the only pattern of an 'apply' pattern list."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:236
msgid "The root cannot have any output operands."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:237
msgid "The root must be a CodeGenInstruction"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:240
msgid "Instruction Flags"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:242
msgid "MIR Patterns support both matching & writing ``MIFlags``."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:244
#: ../../../GlobalISel/MIRPatterns.rst:255
#: ../../../GlobalISel/MIRPatterns.rst:268
msgid "Example"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:252
msgid ""
"In ``apply`` patterns, we also support referring to a matched instruction to "
"\"take\" its MIFlags."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:265
msgid ""
"The ``not`` operator can be used to check that a flag is NOT present on a "
"matched instruction, and to remove a flag from a generated instruction."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:279
msgid "Limitations"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:281
msgid ""
"This a non-exhaustive list of known issues with MIR patterns at this time."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:283
msgid ""
"Using ``GICombinePatFrag`` within another ``GICombinePatFrag`` is not "
"supported."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:285
msgid "``GICombinePatFrag`` can only have a single root."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:286
msgid ""
"Instructions with multiple defs cannot be the root of a ``GICombinePatFrag``."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:287
msgid ""
"Using ``GICombinePatFrag`` in the ``apply`` pattern of a ``GICombineRule`` "
"is not supported."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:289
msgid "We cannot rewrite a matched instruction other than the root."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:290
msgid ""
"Matching/creating a (CImm) immediate >64 bits is not supported (see comment "
"in ``GIM_CheckConstantInt``)"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:292
msgid ""
"There is currently no way to constrain two register/immediate types to "
"match. e.g. if a pattern needs to work on both i32 and i64, you either need "
"to leave it untyped and check the type in C++, or duplicate the pattern."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:296
msgid ""
"``GISpecialType`` operands are not allowed within a ``GICombinePatFrag``."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:297
msgid "``GIVariadic<>`` matched operands must each have a unique name."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:300
msgid "GICombineRule"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:302
msgid ""
"MIR patterns can appear in the ``match`` or ``apply`` patterns of a "
"``GICombineRule``."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:305
msgid ""
"The ``root`` of the rule can either be a def of an instruction, or a named "
"pattern. The latter is helpful when the instruction you want to match has no "
"defs. The former is generally preferred because it's less verbose."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:310
msgid "Combine Rule root is a def"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:321
msgid "Combine Rule root is a named pattern"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:331
msgid ""
"Combine Rules also allow mixing C++ code with MIR patterns, so that you may "
"perform additional checks when matching, or run a C++ action after matching."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:335
msgid ""
"Note that C++ code in ``apply`` pattern is mutually exclusive with other "
"patterns. However, you can freely mix C++ code with other types of patterns "
"in ``match`` patterns. C++ code in ``match`` patterns is always run last, "
"after all other patterns matched."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:341
msgid "Apply Pattern Examples with C++ code"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:359
msgid "The following expansions are available for MIR patterns:"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:361
msgid "operand names (``MachineOperand &``)"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:362
msgid ""
"pattern names (``MachineInstr *`` for ``match``, ``MachineInstrBuilder &`` "
"for apply)"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:365
msgid "Example C++ Expansions"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:374
msgid "``combine`` Operator"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:376
msgid ""
"``GICombineRule`` also supports a single ``combine`` pattern, which is a "
"shorter way to declare patterns that just match one or more instructions, "
"then defer all remaining matching and rewriting logic to C++ code."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:380
msgid "Example usage of the combine operator."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:394
msgid "This has a couple of advantages:"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:396
msgid "We only need one C++ function, not two."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:397
msgid ""
"We no longer need to use ``GIDefMatchData`` to pass information between the "
"match/apply functions."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:399
msgid ""
"As described above, this is syntactic sugar for the match+apply form. In a "
"``combine`` pattern:"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:401
msgid "Everything except C++ code is considered the ``match`` part."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:402
msgid ""
"The C++ code is the ``apply`` part. C++ code is emitted in order of "
"appearance."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:406
msgid ""
"The C++ code **must** return true if it changed any instruction. Returning "
"false when changing instructions is undefined behavior."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:410
msgid "Common Pattern #1: Replace a Register with Another"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:412
msgid ""
"The 'apply' pattern must always redefine all operands defined by the match "
"root. Sometimes, we do not need to create instructions, simply replace a def "
"with another matched register. The ``GIReplaceReg`` builtin can do just that."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:423
msgid ""
"This also works if the replacement register is a temporary register from the "
"``apply`` pattern."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:436
msgid "Common Pattern #2: Erasing a Def-less Root"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:438
msgid ""
"If we simply want to erase a def-less match root, we can use the "
"``GIEraseRoot`` builtin."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:449
msgid "Common Pattern #3: Emitting a Constant Value"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:451
msgid ""
"When an immediate operand appears in an 'apply' pattern, the behavior "
"depends on whether it's typed or not."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:454
msgid ""
"If the immediate is typed, ``MachineIRBuilder::buildConstant`` is used to "
"create a ``G_CONSTANT``. A ``G_BUILD_VECTOR`` will be used for vectors."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:456
msgid ""
"If the immediate is untyped, a simple immediate is added "
"(``MachineInstrBuilder::addImm``)."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:459
msgid ""
"There is of course a special case for ``G_CONSTANT``. Immediates for "
"``G_CONSTANT`` must always be typed, and a CImm is added "
"(``MachineInstrBuilder::addCImm``)."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:463
msgid "Constant Emission Examples:"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:491
msgid "GICombinePatFrag"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:493
msgid ""
"``GICombinePatFrag`` is an equivalent of ``PatFrags`` for MIR patterns. They "
"have two main usecases:"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:496
msgid ""
"Reduce repetition by creating a ``GICombinePatFrag`` for common patterns "
"(see example 1)."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:498
msgid ""
"Implicitly duplicate a CombineRule for multiple variants of a pattern (see "
"example 2)."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:501
msgid "A ``GICombinePatFrag`` is composed of three elements:"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:503
msgid "zero or more ``in`` (def) parameter"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:504
msgid "zero or more ``out`` parameter"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:505
msgid "A list of MIR patterns that can match."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:507
msgid ""
"When a ``GICombinePatFrag`` is used within a pattern, the pattern is cloned "
"once for each alternative that can match."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:510
msgid "Parameters can have the following types:"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:512
msgid "``gi_mo``, which is the implicit default (no type = ``gi_mo``)."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:514
msgid "Refers to any operand of an instruction (register, BB ref, imm, etc.)."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:515
msgid "Can be used in both ``in`` and ``out`` parameters."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:516
msgid ""
"Users of the PatFrag can only use an operand name for this parameter (e.g. "
"``(my_pat_frag $foo)``)."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:519
msgid "``root``"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:521
msgid "This is identical to ``gi_mo``."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:522
msgid ""
"Can only be used in ``out`` parameters to declare the root of the pattern."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:524
msgid ""
"Non-empty ``out`` parameter lists must always have exactly one ``root``."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:526
msgid "``gi_imm``"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:528
msgid "Refers to an (potentially typed) immediate."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:529
msgid "Can only be used in ``in`` parameters."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:530
msgid ""
"Users of the PatFrag can only use an immediate for this parameter (e.g. "
"``(my_pat_frag 0)`` or ``(my_pat_frag (i32 0))``)"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:533
msgid ""
"``out`` operands can only be empty if the ``GICombinePatFrag`` only contains "
"C++ code. If the fragment contains instruction patterns, it has to have at "
"least one ``out`` operand of type ``root``."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:537
msgid ""
"``in`` operands are less restricted, but there is one important concept to "
"remember: you can pass \"unbound\" operand names, but only if the "
"``GICombinePatFrag`` binds it. See example 3 below."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:541
msgid ""
"``GICombinePatFrag`` are used just like any other instructions. Note that "
"the ``out`` operands are defs, so they come first in the list of operands."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:545
msgid "Example 1: Reduce Repetition"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:565
msgid "Example 2: Generate Multiple Rules at Once"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:586
msgid "Example 3: Unbound Operand Names"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:637
msgid "Gallery"
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:639
msgid ""
"We should use precise patterns that state our intentions. Please avoid using "
"wip_match_opcode in patterns. It can lead to imprecise patterns."
msgstr ""

#: ../../../GlobalISel/MIRPatterns.rst:642
msgid "Example fold zext(trunc:nuw)"
msgstr ""
