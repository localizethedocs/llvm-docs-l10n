# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 21\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr_FR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../DirectXUsage.rst:3
msgid "User Guide for the DirectX Target"
msgstr ""

#: ../../../DirectXUsage.rst:6
msgid ""
"Disclaimer: The DirectX backend is experimental and under active "
"development. It is not yet feature complete or ready to be used outside of "
"experimental or demonstration contexts."
msgstr ""

#: ../../../DirectXUsage.rst:22
msgid "Introduction"
msgstr ""

#: ../../../DirectXUsage.rst:24
msgid ""
"The DirectX target implements the DirectX programmability interfaces. These "
"interfaces are documented in the `DirectX Specifications. <https://github."
"com/Microsoft/DirectX-Specs>`_"
msgstr ""

#: ../../../DirectXUsage.rst:27
msgid ""
"Initially the backend is aimed at supporting DirectX 12, and support for "
"DirectX 11 is planned at a later date."
msgstr ""

#: ../../../DirectXUsage.rst:30
msgid ""
"The DirectX backend is currently experimental and is not shipped with any "
"release builds of LLVM tools. To enable building the DirectX backend locally "
"add ``DirectX`` to the ``LLVM_EXPERIMENTAL_TARGETS_TO_BUILD`` CMake option. "
"For more information on building LLVM see the :doc:`CMake` documentation."
msgstr ""

#: ../../../DirectXUsage.rst:38
msgid "Target Triples"
msgstr ""

#: ../../../DirectXUsage.rst:40
msgid ""
"At present the DirectX target only supports the ``dxil`` architecture, which "
"generates code for the `DirectX Intermediate Language. <https://github.com/"
"microsoft/DirectXShaderCompiler/blob/main/docs/DXIL.rst>`_"
msgstr ""

#: ../../../DirectXUsage.rst:44
msgid ""
"In addition to target architecture, the DirectX backend also needs to know "
"the target runtime version and pipeline stage. These are expressed using the "
"OS and Environment triple component."
msgstr ""

#: ../../../DirectXUsage.rst:48
msgid ""
"Presently the DirectX backend requires targeting the ``shadermodel`` OS, and "
"supports versions 6.0+ (at time of writing the latest announced version is "
"6.7)."
msgstr ""

#: ../../../DirectXUsage.rst:51
msgid "DirectX Environments"
msgstr ""

#: ../../../DirectXUsage.rst:54
msgid "Environment"
msgstr ""

#: ../../../DirectXUsage.rst:54
msgid "Description"
msgstr "Description"

#: ../../../DirectXUsage.rst:56
msgid "``pixel``"
msgstr ""

#: ../../../DirectXUsage.rst:56
msgid "Pixel shader"
msgstr ""

#: ../../../DirectXUsage.rst:57
msgid "``vertex``"
msgstr ""

#: ../../../DirectXUsage.rst:57
msgid "Vertex shader"
msgstr ""

#: ../../../DirectXUsage.rst:58
msgid "``geometry``"
msgstr ""

#: ../../../DirectXUsage.rst:58
msgid "Geometry shader"
msgstr ""

#: ../../../DirectXUsage.rst:59
msgid "``hull``"
msgstr ""

#: ../../../DirectXUsage.rst:59
msgid "Hull shader (tesselation)"
msgstr ""

#: ../../../DirectXUsage.rst:60
msgid "``domain``"
msgstr ""

#: ../../../DirectXUsage.rst:60
msgid "Domain shader (tesselation)"
msgstr ""

#: ../../../DirectXUsage.rst:61
msgid "``compute``"
msgstr ""

#: ../../../DirectXUsage.rst:61
msgid "Compute kernel"
msgstr ""

#: ../../../DirectXUsage.rst:62
msgid "``library``"
msgstr ""

#: ../../../DirectXUsage.rst:62
msgid "Linkable ``dxil`` library"
msgstr ""

#: ../../../DirectXUsage.rst:63
msgid "``raygeneration``"
msgstr ""

#: ../../../DirectXUsage.rst:63
msgid "Ray generation (ray tracing)"
msgstr ""

#: ../../../DirectXUsage.rst:64
msgid "``intersection``"
msgstr ""

#: ../../../DirectXUsage.rst:64
msgid "Ray intersection (ray tracing)"
msgstr ""

#: ../../../DirectXUsage.rst:65
msgid "``anyhit``"
msgstr ""

#: ../../../DirectXUsage.rst:65
msgid "Ray any collision (ray tracing)"
msgstr ""

#: ../../../DirectXUsage.rst:66
msgid "``closesthit``"
msgstr ""

#: ../../../DirectXUsage.rst:66
msgid "Ray closest collision (ray tracing)"
msgstr ""

#: ../../../DirectXUsage.rst:67
msgid "``miss``"
msgstr ""

#: ../../../DirectXUsage.rst:67
msgid "Ray miss (ray tracing)"
msgstr ""

#: ../../../DirectXUsage.rst:68
msgid "``callable``"
msgstr ""

#: ../../../DirectXUsage.rst:68
msgid "Callable shader (ray tracing)"
msgstr ""

#: ../../../DirectXUsage.rst:69
msgid "``mesh``"
msgstr ""

#: ../../../DirectXUsage.rst:69
msgid "Mesh shader"
msgstr ""

#: ../../../DirectXUsage.rst:70
msgid "``amplification``"
msgstr ""

#: ../../../DirectXUsage.rst:70
msgid "Amplification shader"
msgstr ""

#: ../../../DirectXUsage.rst:74
msgid "Output Binaries"
msgstr ""

#: ../../../DirectXUsage.rst:76
msgid ""
"The DirectX runtime APIs read a file format based on the `DirectX "
"Specification. <https://github.com/Microsoft/DirectX-Specs>`_. In different "
"codebases the file format is referred to by different names (specifically "
"``DXBC`` and ``DXILContainer``). Since the format is used to store both "
"``DXBC`` and ``DXIL`` outputs, and the ultimate goal is to support both as "
"code generation targets in LLVM, the LLVM codebase uses a more neutral name, "
"``DXContainer``."
msgstr ""

#: ../../../DirectXUsage.rst:84
msgid ""
"The ``DXContainer`` format is sparsely documented in the functional "
"specification, but a reference implementation exists in the "
"`DirectXShaderCompiler. <https://github.com/microsoft/"
"DirectXShaderCompiler>`_. The format is documented in the LLVM project docs "
"as well (see :doc:`DirectX/DXContainer`)."
msgstr ""

#: ../../../DirectXUsage.rst:90
msgid ""
"Support for generating ``DXContainer`` files in LLVM, is being added to the "
"LLVM MC layer for object streamers and writers, and to the Object and "
"ObjectYAML libraries for testing and object file tooling."
msgstr ""

#: ../../../DirectXUsage.rst:94
msgid ""
"For ``dxil`` targeting, bitcode emission into ``DXContainer`` files follows "
"a similar model to the ``-fembed-bitcode`` flag supported by clang for other "
"targets."
msgstr ""
