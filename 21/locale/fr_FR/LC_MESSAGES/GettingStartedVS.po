# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 21\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr_FR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../GettingStartedVS.rst:3
msgid "Getting Started with the LLVM System using Microsoft Visual Studio"
msgstr ""

#: ../../../GettingStartedVS.rst:11
msgid "Overview"
msgstr ""

#: ../../../GettingStartedVS.rst:12
msgid ""
"Welcome to LLVM on Windows! This document only covers LLVM on Windows using "
"Visual Studio, not WSL, mingw or cygwin. In order to get started, you first "
"need to know some basic information."
msgstr ""

#: ../../../GettingStartedVS.rst:16
msgid ""
"There are many different projects that compose LLVM. The first piece is the "
"LLVM suite. This contains all of the tools, libraries, and header files "
"needed to use LLVM. It contains an assembler, disassembler, bitcode analyzer "
"and bitcode optimizer. It also contains basic regression tests that can be "
"used to test the LLVM tools and the Clang front end."
msgstr ""

#: ../../../GettingStartedVS.rst:22
msgid ""
"The second piece is the `Clang <https://clang.llvm.org/>`_ front end.  This "
"component compiles C, C++, Objective C, and Objective C++ code into LLVM "
"bitcode. Clang typically uses LLVM libraries to optimize the bitcode and "
"emit machine code. LLVM fully supports the COFF object file format, which is "
"compatible with all other existing Windows toolchains."
msgstr ""

#: ../../../GettingStartedVS.rst:28
msgid "There are more LLVM projects which this document does not discuss."
msgstr ""

#: ../../../GettingStartedVS.rst:32
msgid "Requirements"
msgstr ""

#: ../../../GettingStartedVS.rst:33
msgid ""
"Before you begin to use the LLVM system, review the requirements given "
"below.  This may save you some trouble by knowing ahead of time what "
"hardware and software you will need."
msgstr ""

#: ../../../GettingStartedVS.rst:38
msgid "Hardware"
msgstr ""

#: ../../../GettingStartedVS.rst:39
msgid ""
"Any system that can adequately run Visual Studio 2019 is fine. The LLVM "
"source tree including the git index consumes approximately 3GB. Object "
"files, libraries and executables consume approximately 5GB in Release mode "
"and much more in Debug mode. SSD drive and >16GB RAM are recommended."
msgstr ""

#: ../../../GettingStartedVS.rst:47
msgid "Software"
msgstr ""

#: ../../../GettingStartedVS.rst:48
msgid ""
"You will need `Visual Studio <https://visualstudio.microsoft.com/>`_ 2019 or "
"later, with the latest Update installed. Visual Studio Community Edition "
"suffices."
msgstr ""

#: ../../../GettingStartedVS.rst:52
msgid ""
"You will also need the `CMake <http://www.cmake.org/>`_ build system since "
"it generates the project files you will use to build with. CMake is bundled "
"with Visual Studio 2019 so separate installation is not required. If you do "
"install CMake separately, Visual Studio 2022 will require CMake Version 3.21 "
"or later."
msgstr ""

#: ../../../GettingStartedVS.rst:57
msgid ""
"If you would like to run the LLVM tests you will need `Python <http://www."
"python.org/>`_. Version 3.8 and newer are known to work. You can install "
"Python with Visual Studio 2019, from the Microsoft store or from the `Python "
"web site <http://www.python.org/>`_. We recommend the latter since it allows "
"you to adjust installation options."
msgstr ""

#: ../../../GettingStartedVS.rst:63
msgid ""
"You will need `Git for Windows <https://git-scm.com/>`_ with bash tools, "
"too. Git for Windows is also bundled with Visual Studio 2019."
msgstr ""

#: ../../../GettingStartedVS.rst:68
msgid "Getting Started"
msgstr ""

#: ../../../GettingStartedVS.rst:69
msgid ""
"Here's the short story for getting up and running quickly with LLVM. These "
"instruction were tested with Visual Studio 2019 and Python 3.9.6:"
msgstr ""

#: ../../../GettingStartedVS.rst:72
msgid ""
"Download and install `Visual Studio <https://visualstudio.microsoft.com/>`_."
msgstr ""

#: ../../../GettingStartedVS.rst:73
msgid ""
"In the Visual Studio installer, Workloads tab, select the **Desktop "
"development with C++** workload. Under Individual components tab, select "
"**Git for Windows**."
msgstr ""

#: ../../../GettingStartedVS.rst:76
msgid "Complete the Visual Studio installation."
msgstr ""

#: ../../../GettingStartedVS.rst:77
msgid ""
"Download and install the latest `Python 3 release <http://www.python.org/>`_."
msgstr ""

#: ../../../GettingStartedVS.rst:78
msgid ""
"In the first install screen, select both **Install launcher for all users** "
"and **Add Python to the PATH**. This will allow installing psutil for all "
"users for the regression tests and make Python available from the command "
"line."
msgstr ""

#: ../../../GettingStartedVS.rst:82
msgid ""
"In the second install screen, select (again) **Install for all users** and "
"if you want to develop `lldb <https://lldb.llvm.org/>`_, selecting "
"**Download debug binaries** is useful."
msgstr ""

#: ../../../GettingStartedVS.rst:85
msgid "Complete the Python installation."
msgstr ""

#: ../../../GettingStartedVS.rst:87
msgid ""
"Run a \"Developer Command Prompt for VS 2019\" **as administrator**. This "
"command"
msgstr ""

#: ../../../GettingStartedVS.rst:87
msgid ""
"prompt provides correct path and environment variables to Visual Studio and "
"the installed tools."
msgstr ""

#: ../../../GettingStartedVS.rst:89
msgid "In the terminal window, type the commands:"
msgstr ""

#: ../../../GettingStartedVS.rst:96
msgid ""
"You may install the llvm sources in other location than ``c:\\llvm`` but do "
"not install into a path containing spaces (e.g. ``c:\\Documents and "
"Settings\\...``) as it will fail."
msgstr ""

#: ../../../GettingStartedVS.rst:100
msgid "Register the Microsoft Debug Interface Access (DIA) DLLs"
msgstr ""

#: ../../../GettingStartedVS.rst:107
msgid ""
"The DIA library is required for LLVM PDB tests and `LLDB development "
"<https://lldb.llvm.org/resources/build.html>`_."
msgstr ""

#: ../../../GettingStartedVS.rst:110
msgid "Install psutil and obtain LLVM source code:"
msgstr ""

#: ../../../GettingStartedVS.rst:117
msgid ""
"Instead of ``git clone`` you may download a compressed source distribution "
"from the `releases page <https://github.com/llvm/llvm-project/releases>`_. "
"Select the last link: ``Source code (zip)`` and unpack the downloaded file "
"using Windows Explorer built-in zip support or any other unzip tool."
msgstr ""

#: ../../../GettingStartedVS.rst:122
msgid "Finally, configure LLVM using CMake:"
msgstr ""

#: ../../../GettingStartedVS.rst:129
msgid ""
"``LLVM_ENABLE_PROJECTS`` specifies any additional LLVM projects you want to "
"build while ``LLVM_TARGETS_TO_BUILD`` selects the compiler targets. If "
"``LLVM_TARGETS_TO_BUILD`` is omitted by default all targets are built "
"slowing compilation and using more disk space. See the :doc:`LLVM CMake "
"guide <CMake>` for detailed information about how to configure the LLVM "
"build."
msgstr ""

#: ../../../GettingStartedVS.rst:136
msgid ""
"The ``cmake`` command line tool is bundled with Visual Studio but its GUI is "
"not. You may install `CMake <http://www.cmake.org/>`_ to use its GUI to "
"change CMake variables or modify the above command line."
msgstr ""

#: ../../../GettingStartedVS.rst:140
msgid ""
"Once CMake is installed then the simplest way is to just start the CMake "
"GUI, select the directory where you have LLVM extracted to, and the default "
"options should all be fine.  One option you may really want to change, "
"regardless of anything else, might be the ``CMAKE_INSTALL_PREFIX`` setting "
"to select a directory to INSTALL to once compiling is complete, although "
"installation is not mandatory for using LLVM.  Another important option is "
"``LLVM_TARGETS_TO_BUILD``, which controls the LLVM target architectures that "
"are included on the build."
msgstr ""

#: ../../../GettingStartedVS.rst:149
msgid ""
"CMake generates project files for all build types. To select a specific "
"build type, use the Configuration manager from the VS IDE or the ``/property:"
"Configuration`` command line option when using MSBuild."
msgstr ""

#: ../../../GettingStartedVS.rst:152
msgid ""
"By default, the Visual Studio project files generated by CMake use the 32-"
"bit toolset. If you are developing on a 64-bit version of Windows and want "
"to use the 64-bit toolset, pass the ``-Thost=x64`` flag when generating the "
"Visual Studio solution. This requires CMake 3.8.0 or later."
msgstr ""

#: ../../../GettingStartedVS.rst:157
msgid "Start Visual Studio and select configuration:"
msgstr ""

#: ../../../GettingStartedVS.rst:159
msgid ""
"In the directory you created the project files will have an ``llvm.sln`` "
"file, just double-click on that to open Visual Studio. The default Visual "
"Studio configuration is **Debug** which is slow and generates a huge amount "
"of debug information on disk. For now, we recommend selecting **Release** "
"configuration for the LLVM project which will build the fastest or "
"**RelWithDebInfo** which is also several time larger than Release. Another "
"technique is to build all of LLVM in Release mode and change compiler flags, "
"disabling optimization and enabling debug information, only for specific "
"libraries or source files you actually need to debug."
msgstr ""

#: ../../../GettingStartedVS.rst:169
msgid "Test LLVM in Visual Studio:"
msgstr ""

#: ../../../GettingStartedVS.rst:171
msgid ""
"You can run LLVM tests by merely building the project \"check-all\". The "
"test results will be shown in the VS output window. Once the build succeeds, "
"you have verified a working LLVM development environment!"
msgstr ""

#: ../../../GettingStartedVS.rst:175
msgid ""
"You should not see any unexpected failures, but will see many unsupported "
"tests and expected failures:"
msgstr ""

#: ../../../GettingStartedVS.rst:188
msgid "Alternatives to manual installation"
msgstr ""

#: ../../../GettingStartedVS.rst:189
msgid ""
"Instead of the steps above, to simplify the installation procedure you can "
"use `Chocolatey <https://chocolatey.org/>`_ as package manager. After the "
"`installation <https://chocolatey.org/install>`_ of Chocolatey, run these "
"commands in an admin shell to install the required tools:"
msgstr ""

#: ../../../GettingStartedVS.rst:199
msgid ""
"There is also a Windows `Dockerfile <https://github.com/llvm/llvm-zorg/blob/"
"main/buildbot/google/docker/windows-base-vscode2019/Dockerfile>`_ with the "
"entire build tool chain. This can be used to test the build with a tool "
"chain different from your host installation or to create build servers."
msgstr ""

#: ../../../GettingStartedVS.rst:205
msgid "Next steps"
msgstr ""

#: ../../../GettingStartedVS.rst:206
msgid "Read the documentation."
msgstr ""

#: ../../../GettingStartedVS.rst:207
msgid "Seriously, read the documentation."
msgstr ""

#: ../../../GettingStartedVS.rst:208
msgid "Remember that you were warned twice about reading the documentation."
msgstr ""

#: ../../../GettingStartedVS.rst:211
msgid "Test LLVM on the command line:"
msgstr ""

#: ../../../GettingStartedVS.rst:212
msgid ""
"The LLVM tests can be run by changing directory to the llvm source directory "
"and running:"
msgstr ""

#: ../../../GettingStartedVS.rst:219
msgid ""
"This example assumes that Python is in your PATH variable, which would be "
"after **Add Python to the PATH** was selected during Python installation. If "
"you had opened a command window prior to Python installation, you would have "
"to close and reopen it to get the updated PATH."
msgstr ""

#: ../../../GettingStartedVS.rst:224
msgid "A specific test or test directory can be run with:"
msgstr ""

#: ../../../GettingStartedVS.rst:231
msgid "Build the LLVM Suite:"
msgstr ""

#: ../../../GettingStartedVS.rst:232
msgid ""
"The projects may still be built individually, but to build them all do not "
"just select all of them in batch build (as some are meant as configuration "
"projects), but rather select and build just the ``ALL_BUILD`` project to "
"build everything, or the ``INSTALL`` project, which first builds the "
"``ALL_BUILD`` project, then installs the LLVM headers, libs, and other "
"useful things to the directory set by the ``CMAKE_INSTALL_PREFIX`` setting "
"when you first configured CMake."
msgstr ""

#: ../../../GettingStartedVS.rst:239
msgid ""
"The Fibonacci project is a sample program that uses the JIT. Modify the "
"project's debugging properties to provide a numeric command line argument or "
"run it from the command line.  The program will print the corresponding "
"fibonacci value."
msgstr ""

#: ../../../GettingStartedVS.rst:246
msgid "Links"
msgstr ""

#: ../../../GettingStartedVS.rst:247
msgid ""
"This document is just an **introduction** to how to use LLVM to do some "
"simple things... there are many more interesting and complicated things that "
"you can do that aren't documented here (but we'll gladly accept a patch if "
"you want to write something up!).  For more information about LLVM, check "
"out:"
msgstr ""

#: ../../../GettingStartedVS.rst:252
msgid "`LLVM homepage <https://llvm.org/>`_"
msgstr ""

#: ../../../GettingStartedVS.rst:253
msgid "`LLVM doxygen tree <https://llvm.org/doxygen/>`_"
msgstr ""

#: ../../../GettingStartedVS.rst:254
msgid ""
"Additional information about the LLVM directory structure and tool chain can "
"be found on the main :doc:`GettingStarted` page."
msgstr ""

#: ../../../GettingStartedVS.rst:256
msgid ""
"If you are having problems building or using LLVM, or if you have any other "
"general questions about LLVM, please consult the :doc:`Frequently Asked "
"Questions <FAQ>` page."
msgstr ""
