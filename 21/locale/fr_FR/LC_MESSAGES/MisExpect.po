# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 21\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr_FR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../MisExpect.rst:3
msgid "Misexpect"
msgstr ""

#: ../../../MisExpect.rst:4
msgid "Contents"
msgstr ""

#: ../../../MisExpect.rst:9
msgid ""
"When developers use ``llvm.expect`` intrinsics, i.e., through use of "
"``__builtin_expect(...)``, they are trying to communicate how their code is "
"expected to behave at runtime to the optimizer. These annotations, however, "
"can be incorrect for a variety of reasons: changes to the code base "
"invalidate them silently, the developer mis-annotated them (e.g., using "
"``LIKELY`` instead of ``UNLIKELY``), or perhaps they assumed something "
"incorrectly when they wrote the annotation. Regardless of why, it is useful "
"to detect these situations so that the optimizer can make more useful "
"decisions about the code. MisExpect diagnostics are intended to help "
"developers identify and address these situations, by comparing the use of "
"the ``llvm.expect`` intrinsic to the ground truth provided by a profiling "
"input."
msgstr ""

#: ../../../MisExpect.rst:21
msgid ""
"The MisExpect checks in the LLVM backend follow a simple procedure: if there "
"is a mismatch between the branch weights collected during profiling and "
"those supplied by an ``llvm.expect`` intrinsic, then it will emit a "
"diagnostic message to the user."
msgstr ""

#: ../../../MisExpect.rst:26
msgid ""
"The most natural place to perform the verification is just prior to when "
"branch weights are assigned to the target instruction in the form of branch "
"weight metadata."
msgstr ""

#: ../../../MisExpect.rst:30
msgid ""
"There are 3 key places in the LLVM backend where branch weights are created "
"and assigned based on profiling information or the use of the ``llvm."
"expect`` intrinsic, and our implementation focuses on these places to "
"perform the verification."
msgstr ""

#: ../../../MisExpect.rst:35
msgid ""
"We calculate the threshold for emitting MisExpect related diagnostics based "
"on the values the compiler assigns to ``llvm.expect`` intrinsics, which can "
"be set through the ``-likely-branch-weight`` and ``-unlikely-branch-weight`` "
"LLVM options. During verification, if the profile weights mismatch the "
"calculated threshold, then we will emit a remark or warning detailing a "
"potential performance regression. The diagnostic also reports the percentage "
"of the time the annotation was correct during profiling to help developers "
"reason about how to proceed."
msgstr ""

#: ../../../MisExpect.rst:44
msgid ""
"The diagnostics are also available in the form of optimization remarks, "
"which can be serialized and processed through the ``opt-viewer.py`` scripts "
"in LLVM."
msgstr ""

#: ../../../MisExpect.rst:50
msgid ""
"Enables optimization remarks for misexpect when profiling data conflicts "
"with use of ``llvm.expect`` intrinsics."
msgstr ""

#: ../../../MisExpect.rst:56
msgid ""
"Enables misexpect warnings when profiling data conflicts with use of ``llvm."
"expect`` intrinsics."
msgstr ""

#: ../../../MisExpect.rst:59
msgid ""
"LLVM supports 4 types of profile formats: Frontend, IR, CS-IR, and Sampling. "
"MisExpect Diagnostics are compatible with all Profiling formats."
msgstr ""

#: ../../../MisExpect.rst:63
msgid "Profile Type"
msgstr ""

#: ../../../MisExpect.rst:63
msgid "Description"
msgstr "Description"

#: ../../../MisExpect.rst:65
msgid "Frontend"
msgstr ""

#: ../../../MisExpect.rst:65
msgid ""
"Profiling instrumentation added during compilation by the frontend, i.e. "
"``clang``"
msgstr ""

#: ../../../MisExpect.rst:67
msgid "IR"
msgstr ""

#: ../../../MisExpect.rst:67
msgid "Profiling instrumentation added during by the LLVM backend"
msgstr ""

#: ../../../MisExpect.rst:69
msgid "CS-IR"
msgstr ""

#: ../../../MisExpect.rst:69
msgid "Context Sensitive IR based profiles"
msgstr ""

#: ../../../MisExpect.rst:71
msgid "Sampling"
msgstr ""

#: ../../../MisExpect.rst:71
msgid ""
"Profiles collected through sampling with external tools, such as ``perf`` on "
"Linux"
msgstr ""
