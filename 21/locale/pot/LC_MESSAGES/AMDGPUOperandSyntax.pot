# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 21\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-28 09:16+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../AMDGPUOperandSyntax.rst:3
msgid "Syntax of AMDGPU Instruction Operands"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:9
msgid "Conventions"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:11
msgid "The following notation is used throughout this document:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:14
msgid "Notation"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:14 ../../../AMDGPUOperandSyntax.rst:37
#: ../../../AMDGPUOperandSyntax.rst:92 ../../../AMDGPUOperandSyntax.rst:130
#: ../../../AMDGPUOperandSyntax.rst:157 ../../../AMDGPUOperandSyntax.rst:232
#: ../../../AMDGPUOperandSyntax.rst:320 ../../../AMDGPUOperandSyntax.rst:380
#: ../../../AMDGPUOperandSyntax.rst:390 ../../../AMDGPUOperandSyntax.rst:406
#: ../../../AMDGPUOperandSyntax.rst:416 ../../../AMDGPUOperandSyntax.rst:432
#: ../../../AMDGPUOperandSyntax.rst:442 ../../../AMDGPUOperandSyntax.rst:462
#: ../../../AMDGPUOperandSyntax.rst:472 ../../../AMDGPUOperandSyntax.rst:492
#: ../../../AMDGPUOperandSyntax.rst:502 ../../../AMDGPUOperandSyntax.rst:519
#: ../../../AMDGPUOperandSyntax.rst:537 ../../../AMDGPUOperandSyntax.rst:547
#: ../../../AMDGPUOperandSyntax.rst:763 ../../../AMDGPUOperandSyntax.rst:1040
#: ../../../AMDGPUOperandSyntax.rst:1107
msgid "Description"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:16
msgid "{0..N}"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:16
msgid "Any integer value in the range from 0 to N (inclusive)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:17
msgid "<x>"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:17
msgid "Syntax and meaning of *x* are explained elsewhere."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:23
msgid "Operands"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:28
msgid "v (32-bit)"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:30
msgid "Vector registers. There are 256 32-bit vector registers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:32
msgid ""
"A sequence of *vector* registers may be used to operate with more than 32 "
"bits of data."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:34
msgid ""
"Assembler currently supports tuples with 1 to 12, 16 and 32 *vector* "
"registers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:37 ../../../AMDGPUOperandSyntax.rst:92
#: ../../../AMDGPUOperandSyntax.rst:130 ../../../AMDGPUOperandSyntax.rst:157
#: ../../../AMDGPUOperandSyntax.rst:232 ../../../AMDGPUOperandSyntax.rst:320
#: ../../../AMDGPUOperandSyntax.rst:380 ../../../AMDGPUOperandSyntax.rst:390
#: ../../../AMDGPUOperandSyntax.rst:406 ../../../AMDGPUOperandSyntax.rst:416
#: ../../../AMDGPUOperandSyntax.rst:432 ../../../AMDGPUOperandSyntax.rst:442
#: ../../../AMDGPUOperandSyntax.rst:462 ../../../AMDGPUOperandSyntax.rst:472
#: ../../../AMDGPUOperandSyntax.rst:492 ../../../AMDGPUOperandSyntax.rst:502
#: ../../../AMDGPUOperandSyntax.rst:519 ../../../AMDGPUOperandSyntax.rst:537
#: ../../../AMDGPUOperandSyntax.rst:547 ../../../AMDGPUOperandSyntax.rst:685
#: ../../../AMDGPUOperandSyntax.rst:763 ../../../AMDGPUOperandSyntax.rst:787
#: ../../../AMDGPUOperandSyntax.rst:809 ../../../AMDGPUOperandSyntax.rst:990
msgid "Syntax"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:39 ../../../AMDGPUOperandSyntax.rst:132
msgid "**v**\\<N>"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:39 ../../../AMDGPUOperandSyntax.rst:43
msgid "A single 32-bit *vector* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:41 ../../../AMDGPUOperandSyntax.rst:161
#: ../../../AMDGPUOperandSyntax.rst:236 ../../../AMDGPUOperandSyntax.rst:324
msgid ""
"*N* must be a decimal :ref:`integer number<amdgpu_synid_integer_number>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:43
msgid "**v[**\\ <N>\\ **]**"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:45 ../../../AMDGPUOperandSyntax.rst:165
#: ../../../AMDGPUOperandSyntax.rst:241 ../../../AMDGPUOperandSyntax.rst:328
msgid ""
"*N* may be specified as an :ref:`integer "
"number<amdgpu_synid_integer_number>` or an :ref:`absolute "
"expression<amdgpu_synid_absolute_expression>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:48
msgid "**v[**\\ <N>:<K>\\ **]**"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:48 ../../../AMDGPUOperandSyntax.rst:53
msgid "A sequence of (\\ *K-N+1*\\ ) *vector* registers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:50 ../../../AMDGPUOperandSyntax.rst:170
#: ../../../AMDGPUOperandSyntax.rst:246 ../../../AMDGPUOperandSyntax.rst:333
msgid ""
"*N* and *K* may be specified as :ref:`integer "
"numbers<amdgpu_synid_integer_number>` or :ref:`absolute "
"expressions<amdgpu_synid_absolute_expression>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:53
msgid "**[v**\\ <N>, \\ **v**\\ <N+1>, ... **v**\\ <K>\\ **]**"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:55 ../../../AMDGPUOperandSyntax.rst:175
#: ../../../AMDGPUOperandSyntax.rst:252 ../../../AMDGPUOperandSyntax.rst:338
msgid ""
"Register indices must be specified as decimal :ref:`integer "
"numbers<amdgpu_synid_integer_number>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:59 ../../../AMDGPUOperandSyntax.rst:179
#: ../../../AMDGPUOperandSyntax.rst:256 ../../../AMDGPUOperandSyntax.rst:342
msgid "Note: *N* and *K* must satisfy the following conditions:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:61 ../../../AMDGPUOperandSyntax.rst:181
#: ../../../AMDGPUOperandSyntax.rst:259 ../../../AMDGPUOperandSyntax.rst:345
msgid "*N* <= *K*."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:62 ../../../AMDGPUOperandSyntax.rst:182
msgid "0 <= *N* <= 255."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:63 ../../../AMDGPUOperandSyntax.rst:183
msgid "0 <= *K* <= 255."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:64 ../../../AMDGPUOperandSyntax.rst:184
#: ../../../AMDGPUOperandSyntax.rst:262
msgid "*K-N+1* must be in the range from 1 to 12 or equal to 16 or 32."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:66
msgid ""
"GFX90A and GFX942 have an additional alignment requirement: pairs of "
"*vector* registers must be even-aligned (first register must be even)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:70 ../../../AMDGPUOperandSyntax.rst:108
#: ../../../AMDGPUOperandSyntax.rst:139 ../../../AMDGPUOperandSyntax.rst:190
#: ../../../AMDGPUOperandSyntax.rst:264 ../../../AMDGPUOperandSyntax.rst:350
#: ../../../AMDGPUOperandSyntax.rst:843
msgid "Examples:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:86
msgid "**Non-Sequential Address (NSA) Syntax**"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:88
msgid ""
"GFX10+ *image* instructions may use special *NSA* (Non-Sequential Address) "
"syntax for *image addresses*:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:94
msgid "**[Vm**, \\ **Vn**, ... **Vk**\\ **]**"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:94
msgid ""
"A sequence of 32-bit *vector* registers. Each register may be specified "
"using the syntax defined :ref:`above<amdgpu_synid_v>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:98
msgid ""
"In contrast with the standard syntax, registers in *NSA* sequence are not "
"required to have consecutive indices. Moreover, the same register may appear "
"in the sequence more than once."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:103
msgid ""
"GFX11+ has an additional limitation: if address size occupies more than 5 "
"dwords, registers starting from the 5th element must be contiguous."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:119
msgid "v (16-bit)"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:121
msgid ""
"16-bit vector registers. Each :ref:`32-bit vector register<amdgpu_synid_v>` "
"is divided into two 16-bit low and high registers, so there are 512 16-bit "
"vector registers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:123
msgid ""
"Only VOP3, VOP3P and VINTERP instructions may access all 512 registers "
"(using :ref:`op_sel<amdgpu_synid_op_sel>` modifier). VOP1, VOP2 and VOPC "
"instructions may currently access only 128 low 16-bit registers using the "
"syntax described below."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:126
msgid ""
"This section is incomplete. The support of 16-bit registers in the assembler "
"is still WIP."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:133 ../../../AMDGPUOperandSyntax.rst:793
msgid "\\"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:132
msgid "A single 16-bit *vector* register (low half)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:135
msgid "Note: *N* must satisfy the following conditions:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:137
msgid "0 <= *N* <= 127."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:148
msgid "a"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:150
msgid "Accumulator registers. There are 256 32-bit accumulator registers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:152
msgid ""
"A sequence of *accumulator* registers may be used to operate with more than "
"32 bits of data."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:154
msgid ""
"Assembler currently supports tuples with 1 to 12, 16 and 32 *accumulator* "
"registers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:157 ../../../AMDGPUOperandSyntax.rst:685
msgid "Alternative Syntax (SP3)"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:159
msgid "**a**\\<N>"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:159
msgid "**acc**\\<N>"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:159 ../../../AMDGPUOperandSyntax.rst:163
msgid "A single 32-bit *accumulator* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:163
msgid "**a[**\\ <N>\\ **]**"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:163
msgid "**acc[**\\ <N>\\ **]**"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:168
msgid "**a[**\\ <N>:<K>\\ **]**"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:168
msgid "**acc[**\\ <N>:<K>\\ **]**"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:168 ../../../AMDGPUOperandSyntax.rst:173
msgid "A sequence of (\\ *K-N+1*\\ ) *accumulator* registers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:173
msgid "**[a**\\ <N>, \\ **a**\\ <N+1>, ... **a**\\ <K>\\ **]**"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:173
msgid "**[acc**\\ <N>, \\ **acc**\\ <N+1>, ... **acc**\\ <K>\\ **]**"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:186
msgid ""
"GFX90A and GFX942 have an additional alignment requirement: pairs of "
"*accumulator* registers must be even-aligned (first register must be even)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:212
msgid "s"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:214
msgid ""
"Scalar 32-bit registers. The number of available *scalar* registers depends "
"on the GPU:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:217 ../../../AMDGPUOperandSyntax.rst:305
msgid "GPU"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:217
msgid "Number of *scalar* registers"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:219 ../../../AMDGPUOperandSyntax.rst:307
msgid "GFX7"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:219
msgid "104"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:220 ../../../AMDGPUOperandSyntax.rst:308
msgid "GFX8"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:220 ../../../AMDGPUOperandSyntax.rst:221
msgid "102"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:221 ../../../AMDGPUOperandSyntax.rst:309
msgid "GFX9"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:222 ../../../AMDGPUOperandSyntax.rst:310
msgid "GFX10+"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:222
msgid "106"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:225
msgid ""
"A sequence of *scalar* registers may be used to operate with more than 32 "
"bits of data. Assembler currently supports tuples with 1 to 12, 16 and 32 "
"*scalar* registers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:228
msgid ""
"Pairs of *scalar* registers must be even-aligned (first register must be "
"even). Sequences of 4 and more *scalar* registers must be quad-aligned."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:234
msgid "**s**\\ <N>"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:234 ../../../AMDGPUOperandSyntax.rst:239
msgid "A single 32-bit *scalar* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:239
msgid "**s[**\\ <N>\\ **]**"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:244
msgid "**s[**\\ <N>:<K>\\ **]**"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:244 ../../../AMDGPUOperandSyntax.rst:250
msgid "A sequence of (\\ *K-N+1*\\ ) *scalar* registers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:250
msgid "**[s**\\ <N>, \\ **s**\\ <N+1>, ... **s**\\ <K>\\ **]**"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:258 ../../../AMDGPUOperandSyntax.rst:344
msgid "*N* must be properly aligned based on the sequence size."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:260
msgid ""
"0 <= *N* < *SMAX*\\ , where *SMAX* is the number of available *scalar* "
"registers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:261
msgid ""
"0 <= *K* < *SMAX*\\ , where *SMAX* is the number of available *scalar* "
"registers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:278
msgid "Examples of *scalar* registers with an invalid alignment:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:288
msgid "trap"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:290
msgid "A set of trap handler registers:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:292
msgid ":ref:`ttmp<amdgpu_synid_ttmp>`"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:293
msgid ":ref:`tba<amdgpu_synid_tba>`"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:294
msgid ":ref:`tma<amdgpu_synid_tma>`"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:299
msgid "ttmp"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:301
msgid ""
"Trap handler temporary scalar registers, 32-bits wide. The number of "
"available *ttmp* registers depends on the GPU:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:305
msgid "Number of *ttmp* registers"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:307 ../../../AMDGPUOperandSyntax.rst:308
msgid "12"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:309 ../../../AMDGPUOperandSyntax.rst:310
#: ../../../AMDGPUOperandSyntax.rst:1042 ../../../AMDGPUOperandSyntax.rst:1046
msgid "16"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:313
msgid ""
"A sequence of *ttmp* registers may be used to operate with more than 32 bits "
"of data. Assembler currently supports tuples with 1 to 12 and 16 *ttmp* "
"registers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:316
msgid ""
"Pairs of *ttmp* registers must be even-aligned (first register must be "
"even). Sequences of 4 and more *ttmp* registers must be quad-aligned."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:322
msgid "**ttmp**\\ <N>"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:322 ../../../AMDGPUOperandSyntax.rst:326
msgid "A single 32-bit *ttmp* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:326
msgid "**ttmp[**\\ <N>\\ **]**"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:331
msgid "**ttmp[**\\ <N>:<K>\\ **]**"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:331 ../../../AMDGPUOperandSyntax.rst:336
msgid "A sequence of (\\ *K-N+1*\\ ) *ttmp* registers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:336
msgid "**[ttmp**\\ <N>, \\ **ttmp**\\ <N+1>, ... **ttmp**\\ <K>\\ **]**"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:346
msgid ""
"0 <= *N* < *TMAX*, where *TMAX* is the number of available *ttmp* registers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:347
msgid ""
"0 <= *K* < *TMAX*, where *TMAX* is the number of available *ttmp* registers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:348
msgid "*K-N+1* must be in the range from 1 to 12 or equal to 16."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:364
msgid "Examples of *ttmp* registers with an invalid alignment:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:374 ../../../AMDGPUOperandSyntax.rst:382
msgid "tba"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:376
msgid ""
"Trap base address, 64-bits wide. Holds the pointer to the current trap "
"handler program."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:380 ../../../AMDGPUOperandSyntax.rst:390
#: ../../../AMDGPUOperandSyntax.rst:406 ../../../AMDGPUOperandSyntax.rst:416
#: ../../../AMDGPUOperandSyntax.rst:657 ../../../AMDGPUOperandSyntax.rst:685
msgid "Availability"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:382
msgid "64-bit *trap base address* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:382 ../../../AMDGPUOperandSyntax.rst:383
#: ../../../AMDGPUOperandSyntax.rst:384 ../../../AMDGPUOperandSyntax.rst:392
#: ../../../AMDGPUOperandSyntax.rst:393 ../../../AMDGPUOperandSyntax.rst:394
#: ../../../AMDGPUOperandSyntax.rst:395 ../../../AMDGPUOperandSyntax.rst:408
#: ../../../AMDGPUOperandSyntax.rst:409 ../../../AMDGPUOperandSyntax.rst:410
#: ../../../AMDGPUOperandSyntax.rst:418 ../../../AMDGPUOperandSyntax.rst:419
#: ../../../AMDGPUOperandSyntax.rst:420 ../../../AMDGPUOperandSyntax.rst:421
msgid "GFX7, GFX8"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:383
msgid "[tba]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:383 ../../../AMDGPUOperandSyntax.rst:384
msgid "64-bit *trap base address* register (an SP3 syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:384
msgid "[tba_lo,tba_hi]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:387
msgid ""
"High and low 32 bits of *trap base address* may be accessed as separate "
"registers:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:392
msgid "tba_lo"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:392
msgid "Low 32 bits of *trap base address* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:393
msgid "tba_hi"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:393
msgid "High 32 bits of *trap base address* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:394
msgid "[tba_lo]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:394
msgid "Low 32 bits of *trap base address* register (an SP3 syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:395
msgid "[tba_hi]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:395
msgid "High 32 bits of *trap base address* register (an SP3 syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:401 ../../../AMDGPUOperandSyntax.rst:408
msgid "tma"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:403
msgid "Trap memory address, 64-bits wide."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:408
msgid "64-bit *trap memory address* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:409
msgid "[tma]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:409 ../../../AMDGPUOperandSyntax.rst:410
msgid "64-bit *trap memory address* register (an SP3 syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:410
msgid "[tma_lo,tma_hi]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:413
msgid ""
"High and low 32 bits of *trap memory address* may be accessed as separate "
"registers:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:418
msgid "tma_lo"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:418
msgid "Low 32 bits of *trap memory address* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:419
msgid "tma_hi"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:419
msgid "High 32 bits of *trap memory address* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:420
msgid "[tma_lo]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:420
msgid "Low 32 bits of *trap memory address* register (an SP3 syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:421
msgid "[tma_hi]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:421
msgid "High 32 bits of *trap memory address* register (an SP3 syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:427 ../../../AMDGPUOperandSyntax.rst:434
msgid "flat_scratch"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:429
msgid ""
"Flat scratch address, 64-bits wide. Holds the base address of scratch memory."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:434
msgid "64-bit *flat scratch* address register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:435
msgid "[flat_scratch]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:435 ../../../AMDGPUOperandSyntax.rst:436
msgid "64-bit *flat scratch* address register (an SP3 syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:436
msgid "[flat_scratch_lo,flat_scratch_hi]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:439
msgid ""
"High and low 32 bits of *flat scratch* address may be accessed as separate "
"registers:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:444
msgid "flat_scratch_lo"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:444
msgid "Low 32 bits of *flat scratch* address register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:445
msgid "flat_scratch_hi"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:445
msgid "High 32 bits of *flat scratch* address register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:446
msgid "[flat_scratch_lo]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:446
msgid "Low 32 bits of *flat scratch* address register (an SP3 syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:447
msgid "[flat_scratch_hi]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:447
msgid "High 32 bits of *flat scratch* address register (an SP3 syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:454 ../../../AMDGPUOperandSyntax.rst:464
msgid "xnack_mask"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:456
msgid ""
"Xnack mask, 64-bits wide. Holds a 64-bit mask of which threads received an "
"*XNACK* due to a vector memory operation."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:459
msgid ""
"For availability of *xnack* feature, refer to :ref:`this table<amdgpu-"
"processors>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:464
msgid "64-bit *xnack mask* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:465
msgid "[xnack_mask]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:465 ../../../AMDGPUOperandSyntax.rst:466
msgid "64-bit *xnack mask* register (an SP3 syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:466
msgid "[xnack_mask_lo,xnack_mask_hi]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:469
msgid ""
"High and low 32 bits of *xnack mask* may be accessed as separate registers:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:474
msgid "xnack_mask_lo"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:474
msgid "Low 32 bits of *xnack mask* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:475
msgid "xnack_mask_hi"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:475
msgid "High 32 bits of *xnack mask* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:476
msgid "[xnack_mask_lo]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:476
msgid "Low 32 bits of *xnack mask* register (an SP3 syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:477
msgid "[xnack_mask_hi]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:477
msgid "High 32 bits of *xnack mask* register (an SP3 syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:484 ../../../AMDGPUOperandSyntax.rst:494
msgid "vcc"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:486
msgid ""
"Vector condition code, 64-bits wide. A bit mask with one bit per thread; it "
"holds the result of a vector compare operation."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:489
msgid ""
"Note that GFX10+ H/W does not use high 32 bits of *vcc* in *wave32* mode."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:494
msgid "64-bit *vector condition code* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:495
msgid "[vcc]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:495 ../../../AMDGPUOperandSyntax.rst:496
msgid "64-bit *vector condition code* register (an SP3 syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:496
msgid "[vcc_lo,vcc_hi]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:499
msgid ""
"High and low 32 bits of *vector condition code* may be accessed as separate "
"registers:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:504
msgid "vcc_lo"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:504
msgid "Low 32 bits of *vector condition code* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:505
msgid "vcc_hi"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:505
msgid "High 32 bits of *vector condition code* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:506
msgid "[vcc_lo]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:506
msgid "Low 32 bits of *vector condition code* register (an SP3 syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:507
msgid "[vcc_hi]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:507
msgid "High 32 bits of *vector condition code* register (an SP3 syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:513 ../../../AMDGPUOperandSyntax.rst:521
msgid "m0"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:515
msgid ""
"A 32-bit memory register. It has various uses, including register indexing "
"and bounds checking."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:521
msgid "A 32-bit *memory* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:522
msgid "[m0]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:522
msgid "A 32-bit *memory* register (an SP3 syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:528 ../../../AMDGPUOperandSyntax.rst:539
msgid "exec"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:530
msgid ""
"Execute mask, 64-bits wide. A bit mask with one bit per thread, which is "
"applied to vector instructions and controls which threads execute and which "
"ignore the instruction."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:534
msgid ""
"Note that GFX10+ H/W does not use high 32 bits of *exec* in *wave32* mode."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:539
msgid "64-bit *execute mask* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:540
msgid "[exec]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:540 ../../../AMDGPUOperandSyntax.rst:541
msgid "64-bit *execute mask* register (an SP3 syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:541
msgid "[exec_lo,exec_hi]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:544
msgid ""
"High and low 32 bits of *execute mask* may be accessed as separate registers:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:549
msgid "exec_lo"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:549
msgid "Low 32 bits of *execute mask* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:550
msgid "exec_hi"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:550
msgid "High 32 bits of *execute mask* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:551
msgid "[exec_lo]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:551
msgid "Low 32 bits of *execute mask* register (an SP3 syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:552
msgid "[exec_hi]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:552
msgid "High 32 bits of *execute mask* register (an SP3 syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:558
msgid "vccz"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:560
msgid ""
"A single bit flag indicating that the :ref:`vcc<amdgpu_synid_vcc>` is all "
"zeros."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:563
msgid ""
"Note: when GFX10+ operates in *wave32* mode, this register reflects the "
"state of :ref:`vcc_lo<amdgpu_synid_vcc_lo>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:569
msgid "execz"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:571
msgid ""
"A single bit flag indicating that the :ref:`exec<amdgpu_synid_exec>` is all "
"zeros."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:574
msgid ""
"Note: when GFX10+ operates in *wave32* mode, this register reflects the "
"state of :ref:`exec_lo<amdgpu_synid_exec>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:580
msgid "scc"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:582
msgid "A single bit flag indicating the result of a scalar compare operation."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:587
msgid "lds_direct"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:589
msgid ""
"A special operand which supplies a 32-bit value fetched from *LDS* memory "
"using :ref:`m0<amdgpu_synid_m0>` as an address."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:595
msgid "null"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:597
msgid ""
"This is a special operand that may be used as a source or a destination."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:599
msgid "When used as a destination, the result of the operation is discarded."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:601
msgid "When used as a source, it supplies zero value."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:606
msgid "inline constant"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:608
msgid ""
"An *inline constant* is an integer or a floating-point value encoded as a "
"part of an instruction. Compare *inline constants* with :ref:"
"`literals<amdgpu_synid_literal>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:612
msgid "Inline constants include:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:614
msgid ":ref:`Integer inline constants<amdgpu_synid_iconst>`;"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:615
msgid ":ref:`Floating-point inline constants<amdgpu_synid_fconst>`;"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:616
msgid ":ref:`Inline values<amdgpu_synid_ival>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:618
msgid ""
"If a number may be encoded as either a :ref:`literal<amdgpu_synid_literal>` "
"or a :ref:`constant<amdgpu_synid_constant>`, the assembler selects the "
"latter encoding as more efficient."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:626
msgid "iconst"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:628
msgid ""
"An :ref:`integer number<amdgpu_synid_integer_number>` or an :ref:`absolute "
"expression<amdgpu_synid_absolute_expression>` encoded as an *inline "
"constant*."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:632
msgid ""
"Only a small fraction of integer numbers may be encoded as *inline "
"constants*. They are enumerated in the table below. Other integer numbers "
"are encoded as :ref:`literals<amdgpu_synid_literal>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:637 ../../../AMDGPUOperandSyntax.rst:657
msgid "Value"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:637 ../../../AMDGPUOperandSyntax.rst:657
#: ../../../AMDGPUOperandSyntax.rst:685 ../../../AMDGPUOperandSyntax.rst:809
msgid "Note"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:639
msgid "{0..64}"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:639
msgid "Positive integer inline constants."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:640
msgid "{-16..-1}"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:640
msgid "Negative integer inline constants."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:646
msgid "fconst"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:648
msgid ""
"A :ref:`floating-point number<amdgpu_synid_floating-point_number>` encoded "
"as an *inline constant*."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:651
msgid ""
"Only a small fraction of floating-point numbers may be encoded as *inline "
"constants*. They are enumerated in the table below. Other floating-point "
"numbers are encoded as :ref:`literals<amdgpu_synid_literal>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:659
msgid "0.0"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:659
msgid "The same as integer constant 0."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:659 ../../../AMDGPUOperandSyntax.rst:660
#: ../../../AMDGPUOperandSyntax.rst:661 ../../../AMDGPUOperandSyntax.rst:662
#: ../../../AMDGPUOperandSyntax.rst:663 ../../../AMDGPUOperandSyntax.rst:664
#: ../../../AMDGPUOperandSyntax.rst:665 ../../../AMDGPUOperandSyntax.rst:666
#: ../../../AMDGPUOperandSyntax.rst:667
msgid "All GPUs"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:660
msgid "0.5"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:660
msgid "Floating-point constant 0.5"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:661
msgid "1.0"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:661
msgid "Floating-point constant 1.0"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:662
msgid "2.0"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:662
msgid "Floating-point constant 2.0"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:663
msgid "4.0"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:663
msgid "Floating-point constant 4.0"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:664
msgid "-0.5"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:664
msgid "Floating-point constant -0.5"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:665
msgid "-1.0"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:665
msgid "Floating-point constant -1.0"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:666
msgid "-2.0"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:666
msgid "Floating-point constant -2.0"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:667
msgid "-4.0"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:667
msgid "Floating-point constant -4.0"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:668
msgid "0.1592"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:668
msgid "1.0/(2.0*pi). Use only for 16-bit operands."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:668 ../../../AMDGPUOperandSyntax.rst:669
#: ../../../AMDGPUOperandSyntax.rst:670
msgid "GFX8+"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:669
msgid "0.15915494"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:669
msgid "1.0/(2.0*pi). Use only for 16- and 32-bit operands."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:670
msgid "0.15915494309189532"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:670
msgid "1.0/(2.0*pi)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:673
msgid ""
"Floating-point inline constants cannot be used with *16-bit integer* "
"operands. \\ Assembler encodes these values as literals."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:679
msgid "ival"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:681
msgid ""
"A symbolic operand encoded as an *inline constant*. These operands provide "
"read-only access to H/W registers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:687
msgid "shared_base"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:687
msgid "src_shared_base"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:687
msgid "Base address of shared memory region."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:687 ../../../AMDGPUOperandSyntax.rst:688
#: ../../../AMDGPUOperandSyntax.rst:689 ../../../AMDGPUOperandSyntax.rst:690
msgid "GFX9+"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:688
msgid "shared_limit"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:688
msgid "src_shared_limit"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:688
msgid "Address of the end of shared memory region."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:689
msgid "private_base"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:689
msgid "src_private_base"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:689
msgid "Base address of private memory region."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:690
msgid "private_limit"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:690
msgid "src_private_limit"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:690
msgid "Address of the end of private memory region."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:691
msgid "pops_exiting_wave_id"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:691
msgid "src_pops_exiting_wave_id"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:691
msgid "A dedicated counter for POPS."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:691
msgid "GFX9, GFX10"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:697
msgid "literal"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:699
msgid ""
"A *literal* is a 64-bit value encoded as a separate 32-bit dword in the "
"instruction stream. Compare *literals* with :ref:`inline "
"constants<amdgpu_synid_constant>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:703
msgid ""
"If a number may be encoded as either a :ref:`literal<amdgpu_synid_literal>` "
"or an :ref:`inline constant<amdgpu_synid_constant>`, assembler selects the "
"latter encoding as more efficient."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:708
msgid ""
"Literals may be specified as :ref:`integer "
"numbers<amdgpu_synid_integer_number>`, :ref:`floating-point "
"numbers<amdgpu_synid_floating-point_number>`, :ref:`absolute "
"expressions<amdgpu_synid_absolute_expression>` or :ref:`relocatable "
"expressions<amdgpu_synid_relocatable_expression>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:714
msgid ""
"An instruction may use only one literal, but several operands may refer to "
"the same literal."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:720
msgid "uimm8"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:722
msgid ""
"An 8-bit :ref:`integer number<amdgpu_synid_integer_number>` or an :ref:"
"`absolute expression<amdgpu_synid_absolute_expression>`. The value must be "
"in the range 0..0xFF."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:729
msgid "uimm32"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:731
msgid ""
"A 32-bit :ref:`integer number<amdgpu_synid_integer_number>` or an :ref:"
"`absolute expression<amdgpu_synid_absolute_expression>`. The value must be "
"in the range 0..0xFFFFFFFF."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:738
msgid "uimm20"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:740
msgid ""
"A 20-bit :ref:`integer number<amdgpu_synid_integer_number>` or an :ref:"
"`absolute expression<amdgpu_synid_absolute_expression>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:743
msgid "The value must be in the range 0..0xFFFFF."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:748
msgid "simm21"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:750
msgid ""
"A 21-bit :ref:`integer number<amdgpu_synid_integer_number>` or an :ref:"
"`absolute expression<amdgpu_synid_absolute_expression>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:753
msgid "The value must be in the range -0x100000..0x0FFFFF."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:758 ../../../AMDGPUOperandSyntax.rst:765
msgid "off"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:760
msgid ""
"A special entity which indicates that the value of this operand is not used."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:765
msgid "Indicates an unused operand."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:772
msgid "Numbers"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:777
msgid "Integer Numbers"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:779
msgid ""
"Integer numbers are 64 bits wide. They are converted to :ref:`expected "
"operand type<amdgpu_syn_instruction_type>` as described :ref:"
"`here<amdgpu_synid_int_conv>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:783
msgid ""
"Integer numbers may be specified in binary, octal, hexadecimal and decimal "
"formats:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:787 ../../../AMDGPUOperandSyntax.rst:809
msgid "Format"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:787
msgid "Example"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:789 ../../../AMDGPUOperandSyntax.rst:811
msgid "Decimal"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:789
msgid "[-]?[1-9][0-9]*"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:789
msgid "-1234"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:790
msgid "Binary"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:790
msgid "[-]?0b[01]+"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:790
msgid "0b1010"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:791
msgid "Octal"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:791
msgid "[-]?0[0-7]+"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:791
msgid "010"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:792 ../../../AMDGPUOperandSyntax.rst:814
msgid "Hexadecimal"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:792
msgid "[-]?0x[0-9a-fA-F]+"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:792
msgid "0xff"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:793
msgid "[-]?[0x]?[0-9][0-9a-fA-F]*[hH]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:793
msgid "0ffh"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:799
msgid "Floating-Point Numbers"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:801
msgid ""
"All floating-point numbers are handled as double (64 bits wide). They are "
"converted to :ref:`expected operand type<amdgpu_syn_instruction_type>` as "
"described :ref:`here<amdgpu_synid_fp_conv>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:806
msgid ""
"Floating-point numbers may be specified in hexadecimal and decimal formats:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:809
msgid "Examples"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:811
msgid "[-]?[0-9]*[.][0-9]*([eE][+-]?[0-9]*)?"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:811
msgid "-1.234, 234e2"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:811
msgid "Must include either a decimal separator or an exponent."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:814
msgid "[-]0x[0-9a-fA-F]*(.[0-9a-fA-F]*)?[pP][+-]?[0-9a-fA-F]+"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:814
msgid "-0x1afp-10, 0x.1afp10"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:820
msgid "Expressions"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:822
msgid ""
"An expression is evaluated to a 64-bit integer. Note that floating-point "
"expressions are not supported."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:825
msgid "There are two kinds of expressions:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:827
msgid ":ref:`Absolute<amdgpu_synid_absolute_expression>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:828
msgid ":ref:`Relocatable<amdgpu_synid_relocatable_expression>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:833
msgid "Absolute Expressions"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:835
msgid ""
"The value of an absolute expression does not change after program "
"relocation. Absolute expressions must not include unassigned and relocatable "
"values such as labels."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:839
msgid ""
"Absolute expressions are evaluated to 64-bit integer values and converted "
"to :ref:`expected operand type<amdgpu_syn_instruction_type>` as described :"
"ref:`here<amdgpu_synid_int_conv>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:853
msgid "Relocatable Expressions"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:855
msgid "The value of a relocatable expression depends on program relocation."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:857
msgid ""
"Note that use of relocatable expressions is limited to branch targets and 32-"
"bit integer operands."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:860
msgid ""
"A relocatable expression is evaluated to a 64-bit integer value, which "
"depends on operand kind and :ref:`relocation type<amdgpu-relocation-"
"records>` of symbol(s) used in the expression. For example, if an "
"instruction refers to a label, this reference is evaluated to an offset from "
"the address after the instruction to the label address:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:872
msgid ""
"Note that values of relocatable expressions are usually unknown at assembly "
"time; they are resolved later by a linker and converted to :ref:`expected "
"operand type<amdgpu_syn_instruction_type>` as described :ref:"
"`here<amdgpu_synid_rl_conv>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:878
msgid "Operands and Operations"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:880
msgid ""
"Expressions are composed of 64-bit integer operands and operations. Operands "
"include :ref:`integer numbers<amdgpu_synid_integer_number>` and :ref:"
"`symbols<amdgpu_synid_symbol>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:884
msgid ""
"Expressions may also use \".\" which is a reference to the current PC "
"(program counter)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:887
msgid ""
":ref:`Unary<amdgpu_synid_expression_un_op>` and :ref:"
"`binary<amdgpu_synid_expression_bin_op>` operations produce 64-bit integer "
"results."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:892
msgid "Syntax of Expressions"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:894
msgid "Syntax of expressions is shown below::"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:929
msgid "Binary Operators"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:931
msgid ""
"Binary operators are described in the following table. They operate on and "
"produce 64-bit integers. Operators with higher priority are performed first."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:936 ../../../AMDGPUOperandSyntax.rst:968
msgid "Operator"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:936
msgid "Priority"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:936 ../../../AMDGPUOperandSyntax.rst:968
#: ../../../AMDGPUOperandSyntax.rst:990
msgid "Meaning"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:938
msgid "\\*"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:938 ../../../AMDGPUOperandSyntax.rst:939
#: ../../../AMDGPUOperandSyntax.rst:940
msgid "5"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:938
msgid "Integer multiplication."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:939
msgid "/"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:939
msgid "Integer division."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:940
msgid "%"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:940
msgid "Integer signed remainder."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:941 ../../../AMDGPUOperandSyntax.rst:972
msgid "\\+"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:941 ../../../AMDGPUOperandSyntax.rst:942
msgid "4"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:941
msgid "Integer addition."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:942 ../../../AMDGPUOperandSyntax.rst:973
#: ../../../AMDGPUOperandSyntax.rst:1113
msgid "\\-"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:942
msgid "Integer subtraction."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:943
msgid "<<"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:943 ../../../AMDGPUOperandSyntax.rst:944
msgid "3"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:943
msgid "Integer shift left."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:944
msgid ">>"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:944
msgid "Logical shift right."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:945
msgid "=="
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:945 ../../../AMDGPUOperandSyntax.rst:946
#: ../../../AMDGPUOperandSyntax.rst:947 ../../../AMDGPUOperandSyntax.rst:948
#: ../../../AMDGPUOperandSyntax.rst:949 ../../../AMDGPUOperandSyntax.rst:950
#: ../../../AMDGPUOperandSyntax.rst:951
msgid "2"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:945
msgid "Equality comparison."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:946
msgid "!="
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:946 ../../../AMDGPUOperandSyntax.rst:947
msgid "Inequality comparison."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:947
msgid "<>"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:948
msgid "<"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:948
msgid "Signed less than comparison."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:949
msgid "<="
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:949
msgid "Signed less than or equal comparison."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:950
msgid ">"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:950
msgid "Signed greater than comparison."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:951
msgid ">="
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:951
msgid "Signed greater than or equal comparison."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:952
msgid "\\|"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:952 ../../../AMDGPUOperandSyntax.rst:953
#: ../../../AMDGPUOperandSyntax.rst:954
msgid "1"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:952
msgid "Bitwise or."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:953
msgid "^"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:953
msgid "Bitwise xor."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:954
msgid "&"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:954
msgid "Bitwise and."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:955
msgid "&&"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:955 ../../../AMDGPUOperandSyntax.rst:956
msgid "0"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:955
msgid "Logical and."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:956
msgid "||"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:956
msgid "Logical or."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:962
msgid "Unary Operators"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:964
msgid ""
"Unary operators are described in the following table. They operate on and "
"produce 64-bit integers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:970
msgid "!"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:970
msgid "Logical negation."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:971
msgid "~"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:971
msgid "Bitwise negation."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:972
msgid "Integer unary plus."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:973
msgid "Integer unary minus."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:979
msgid "Symbols"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:981
msgid ""
"A symbol is a named 64-bit integer value, representing a relocatable address "
"or an absolute (non-relocatable) number."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:985
msgid "Symbol names have the following syntax:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:985
msgid "``[a-zA-Z_.][a-zA-Z0-9_$.@]*``"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:987
msgid ""
"The table below provides several examples of syntax used for symbol "
"definition."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:992
msgid ".globl <S>"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:992
msgid "Declares a global symbol S without assigning it a value."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:993
msgid ".set <S>, <E>"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:993 ../../../AMDGPUOperandSyntax.rst:994
msgid "Assigns the value of an expression E to a symbol S."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:994
msgid "<S> = <E>"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:995
msgid "<S>:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:995
msgid "Declares a label S and assigns it the current PC value."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:998
msgid ""
"A symbol may be used before it is declared or assigned; unassigned symbols "
"are assumed to be PC-relative."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1001
msgid ""
"Additional information about symbols may be found :ref:`here<amdgpu-"
"symbols>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1006
msgid "Type and Size Conversion"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1008
msgid ""
"This section describes what happens when a 64-bit :ref:`integer "
"number<amdgpu_synid_integer_number>`, a :ref:`floating-point "
"number<amdgpu_synid_floating-point_number>` or an :ref:"
"`expression<amdgpu_synid_expression>` is used for an operand which has a "
"different type or size."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1017
msgid "Conversion of Integer Values"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1019
msgid ""
"Instruction operands may be specified as 64-bit :ref:`integer "
"numbers<amdgpu_synid_integer_number>` or :ref:`absolute "
"expressions<amdgpu_synid_absolute_expression>`. These values are converted "
"to the :ref:`expected operand type<amdgpu_syn_instruction_type>` using the "
"following steps:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1026
msgid ""
"1. *Validation*. Assembler checks if the input value may be truncated "
"without loss to the required *truncation width* (see the table below). There "
"are two cases when this operation is enabled:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1030
msgid "The truncated bits are all 0."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1031
msgid ""
"The truncated bits are all 1 and the value after truncation has its MSB bit "
"set."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1033
msgid "In all other cases, the assembler triggers an error."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1035
msgid ""
"2. *Conversion*. The input value is converted to the expected type as "
"described in the table below. Depending on operand kind, this conversion is "
"performed by either assembler or AMDGPU H/W (or both)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1040 ../../../AMDGPUOperandSyntax.rst:1107
msgid "Expected type"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1040
msgid "Truncation Width"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1040 ../../../AMDGPUOperandSyntax.rst:1107
msgid "Conversion"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1042 ../../../AMDGPUOperandSyntax.rst:1109
msgid "i16, u16, b16"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1042 ../../../AMDGPUOperandSyntax.rst:1046
msgid "num.u16"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1042
msgid "Truncate to 16 bits."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1043 ../../../AMDGPUOperandSyntax.rst:1112
msgid "i32, u32, b32"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1043 ../../../AMDGPUOperandSyntax.rst:1044
#: ../../../AMDGPUOperandSyntax.rst:1045 ../../../AMDGPUOperandSyntax.rst:1047
#: ../../../AMDGPUOperandSyntax.rst:1048
msgid "32"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1043 ../../../AMDGPUOperandSyntax.rst:1047
msgid "num.u32"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1043
msgid "Truncate to 32 bits."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1044
msgid "i64"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1044
msgid "{-1,num.i32}"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1044
msgid "Truncate to 32 bits and then sign-extend the result to 64 bits."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1045
msgid "u64, b64"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1045
msgid "{0,num.u32}"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1045
msgid "Truncate to 32 bits and then zero-extend the result to 64 bits."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1046 ../../../AMDGPUOperandSyntax.rst:1109
#: ../../../AMDGPUOperandSyntax.rst:1114
msgid "f16"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1046
msgid "Use low 16 bits as an f16 value."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1047 ../../../AMDGPUOperandSyntax.rst:1112
#: ../../../AMDGPUOperandSyntax.rst:1115
msgid "f32"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1047
msgid "Use low 32 bits as an f32 value."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1048 ../../../AMDGPUOperandSyntax.rst:1116
msgid "f64"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1048
msgid "{num.u32,0}"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1048
msgid ""
"Use low 32 bits of the number as high 32 bits of the result; low 32 bits of "
"the result are zeroed."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1052 ../../../AMDGPUOperandSyntax.rst:1122
msgid "Examples of enabled conversions:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1077 ../../../AMDGPUOperandSyntax.rst:1143
msgid "Examples of disabled conversions:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1089
msgid "Conversion of Floating-Point Values"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1091
msgid ""
"Instruction operands may be specified as 64-bit :ref:`floating-point "
"numbers<amdgpu_synid_floating-point_number>`. These values are converted to "
"the :ref:`expected operand type<amdgpu_syn_instruction_type>` using the "
"following steps:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1097
msgid ""
"1. *Validation*. Assembler checks if the input f64 number can be converted "
"to the *required floating-point type* (see the table below) without overflow "
"or underflow. Precision lost is allowed. If this conversion is not possible, "
"the assembler triggers an error."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1102
msgid ""
"2. *Conversion*. The input value is converted to the expected type as "
"described in the table below. Depending on operand kind, this is performed "
"by either assembler or AMDGPU H/W (or both)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1107
msgid "Required FP Type"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1109 ../../../AMDGPUOperandSyntax.rst:1114
msgid "f16(num)"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1109
msgid ""
"Convert to f16 and use bits of the result as an integer value. The value has "
"to be encoded as a literal, or an error occurs. Note that the value cannot "
"be encoded as an inline constant."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1112 ../../../AMDGPUOperandSyntax.rst:1115
msgid "f32(num)"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1112
msgid "Convert to f32 and use bits of the result as an integer value."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1113
msgid "i64, u64, b64"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1113
msgid "Conversion disabled."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1114
msgid "Convert to f16."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1115
msgid "Convert to f32."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1116
msgid "{num.u32.hi,0}"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1116
msgid ""
"Use high 32 bits of the number as high 32 bits of the result; zero-fill low "
"32 bits of the result."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1119
msgid "Note that the result may differ from the original number."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1154
msgid "Conversion of Relocatable Values"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1156
msgid ""
":ref:`Relocatable expressions<amdgpu_synid_relocatable_expression>` may be "
"used with 32-bit integer operands and jump targets."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1159
msgid ""
"When the value of a relocatable expression is resolved by a linker, it is "
"converted as needed and truncated to the operand size. The conversion "
"depends on :ref:`relocation type<amdgpu-relocation-records>` and operand "
"kind."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1163
msgid ""
"For example, when a 32-bit operand of an instruction refers to a relocatable "
"expression *expr*, this reference is evaluated to a 64-bit offset from the "
"address after the instruction to the address being referenced, *counted in "
"bytes*. Then the value is truncated to 32 bits and encoded as a literal:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1175
msgid ""
"As another example, when a branch instruction refers to a label, this "
"reference is evaluated to an offset from the address after the instruction "
"to the label address, *counted in dwords*. Then the value is truncated to 16 "
"bits:"
msgstr ""
