# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:12+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../ScudoHardenedAllocator.rst:3
msgid "Scudo Hardened Allocator"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:10
msgid "Introduction"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:12
msgid ""
"The Scudo Hardened Allocator is a user-mode allocator based on LLVM "
"Sanitizer's CombinedAllocator, which aims at providing additional "
"mitigations against heap based vulnerabilities, while maintaining good "
"performance."
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:16
msgid ""
"Currently, the allocator supports (was tested on) the following "
"architectures:"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:18
msgid "i386 (& i686) (32-bit);"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:19
msgid "x86_64 (64-bit);"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:20
msgid "armhf (32-bit);"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:21
msgid "AArch64 (64-bit)."
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:23
msgid ""
"The name \"Scudo\" has been retained from the initial implementation (Escudo "
"meaning Shield in Spanish and Portuguese)."
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:27
msgid "Design"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:30
msgid "Chunk Header"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:31
msgid ""
"Every chunk of heap memory will be preceded by a chunk header. This has two "
"purposes, the first one being to store various information about the chunk, "
"the second one being to detect potential heap overflows. In order to achieve "
"this, the header will be checksumed, involving the pointer to the chunk "
"itself and a global secret. Any corruption of the header will be detected "
"when said header is accessed, and the process terminated."
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:38
msgid "The following information is stored in the header:"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:40
msgid "the 16-bit checksum;"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:41
msgid ""
"the unused bytes amount for that chunk, which is necessary for computing the "
"size of the chunk;"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:43
msgid "the state of the chunk (available, allocated or quarantined);"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:44
msgid ""
"the allocation type (malloc, new, new[] or memalign), to detect potential "
"mismatches in the allocation APIs used;"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:46
msgid ""
"the offset of the chunk, which is the distance in bytes from the beginning "
"of the returned chunk to the beginning of the backend allocation;"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:48
msgid "a 8-bit salt."
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:50
msgid "This header fits within 8 bytes, on all platforms supported."
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:52
msgid ""
"The checksum is computed as a CRC32 (made faster with hardware support) of "
"the global secret, the chunk pointer itself, and the 8 bytes of header with "
"the checksum field zeroed out."
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:56
msgid ""
"The header is atomically loaded and stored to prevent races. This is "
"important as two consecutive chunks could belong to different threads. We "
"also want to avoid any type of double fetches of information located in the "
"header, and use local copies of the header for this purpose."
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:62
msgid "Delayed Freelist"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:63
msgid ""
"A delayed freelist allows us to not return a chunk directly to the backend, "
"but to keep it aside for a while. Once a criterion is met, the delayed "
"freelist is emptied, and the quarantined chunks are returned to the backend. "
"This helps mitigate use-after-free vulnerabilities by reducing the "
"determinism of the allocation and deallocation patterns."
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:69
msgid ""
"This feature is using the Sanitizer's Quarantine as its base, and the amount "
"of memory that it can hold is configurable by the user (see the Options "
"section below)."
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:74
msgid "Randomness"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:75
msgid ""
"It is important for the allocator to not make use of fixed addresses. We use "
"the dynamic base option for the SizeClassAllocator, allowing us to benefit "
"from the randomness of mmap."
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:80
msgid "Usage"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:83
msgid "Library"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:84
msgid ""
"The allocator static library can be built from the LLVM build tree thanks to "
"the ``scudo`` CMake rule. The associated tests can be exercised thanks to "
"the ``check-scudo`` CMake rule."
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:88
msgid ""
"Linking the static library to your project can require the use of the "
"``whole-archive`` linker flag (or equivalent), depending on your linker. "
"Additional flags might also be necessary."
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:92
msgid ""
"Your linked binary should now make use of the Scudo allocation and "
"deallocation functions."
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:95
msgid "You may also build Scudo like this:"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:104
msgid "and then use it with existing binaries as follows:"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:111
msgid "Options"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:112
msgid ""
"Several aspects of the allocator can be configured through the following "
"ways:"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:114
msgid ""
"by defining a ``__scudo_default_options`` function in one's program that "
"returns the options string to be parsed. Said function must have the "
"following prototype: ``extern \"C\" const char* __scudo_default_options()``."
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:118
msgid ""
"through the environment variable SCUDO_OPTIONS, containing the options "
"string to be parsed. Options defined this way will override any definition "
"made through ``__scudo_default_options``;"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:122
msgid ""
"The options string follows a syntax similar to ASan, where distinct options "
"can be assigned in the same string, separated by colons."
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:125
msgid "For example, using the environment variable:"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:131
msgid "Or using the function:"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:140
msgid "The following options are available:"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:143
msgid "Option"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:143
msgid "64-bit default"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:143
msgid "32-bit default"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:143
msgid "Description"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:145
msgid "QuarantineSizeMb"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:145
msgid "64"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:145
msgid "16"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:145
msgid ""
"The size (in Mb) of quarantine used to delay the actual deallocation of "
"chunks. Lower value may reduce memory usage but decrease the effectiveness "
"of the mitigation; a negative value will fallback to a default of 64Mb."
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:151
msgid "ThreadLocalQuarantineSizeKb"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:151
msgid "1024"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:151
msgid "256"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:151
msgid ""
"The size (in Kb) of per-thread cache use to offload the global quarantine. "
"Lower value may reduce memory usage but might increase contention on the "
"global quarantine."
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:156
msgid "DeallocationTypeMismatch"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:156
#: ../../../ScudoHardenedAllocator.rst:159
msgid "true"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:156
msgid ""
"Whether or not we report errors on malloc/delete, new/free, new/delete[], "
"etc."
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:159
msgid "DeleteSizeMismatch"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:159
msgid ""
"Whether or not we report errors on mismatch between sizes of new and delete."
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:162
msgid "ZeroContents"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:162
msgid "false"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:162
msgid "Whether or not we zero chunk contents on allocation and deallocation."
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:166
msgid ""
"Allocator related common Sanitizer options can also be passed through Scudo "
"options, such as ``allocator_may_return_null``. A detailed list including "
"those can be found here: https://github.com/google/sanitizers/wiki/"
"SanitizerCommonFlags."
msgstr ""
