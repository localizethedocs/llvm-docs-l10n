# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:12+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../XRay.rst:3
msgid "XRay Instrumentation"
msgstr ""

#: ../../../XRay.rst:0
msgid "Version"
msgstr ""

#: ../../../XRay.rst:5
msgid "1 as of 2016-11-08"
msgstr ""

#: ../../../XRay.rst:12
msgid "Introduction"
msgstr ""

#: ../../../XRay.rst:14
msgid ""
"XRay is a function call tracing system which combines compiler-inserted "
"instrumentation points and a runtime library that can dynamically enable and "
"disable the instrumentation."
msgstr ""

#: ../../../XRay.rst:18
msgid ""
"More high level information about XRay can be found in the `XRay "
"whitepaper`_."
msgstr ""

#: ../../../XRay.rst:20
msgid "This document describes how to use XRay as implemented in LLVM."
msgstr ""

#: ../../../XRay.rst:23
msgid "XRay in LLVM"
msgstr ""

#: ../../../XRay.rst:25
msgid "XRay consists of three main parts:"
msgstr ""

#: ../../../XRay.rst:27
msgid "Compiler-inserted instrumentation points."
msgstr ""

#: ../../../XRay.rst:28
msgid "A runtime library for enabling/disabling tracing at runtime."
msgstr ""

#: ../../../XRay.rst:29
msgid "A suite of tools for analysing the traces."
msgstr ""

#: ../../../XRay.rst:31
msgid ""
"**NOTE:** As of February 27, 2017 , XRay is only available for the following "
"architectures running Linux: x86_64, arm7 (no thumb), aarch64, powerpc64le, "
"mips, mipsel, mips64, mips64el."
msgstr ""

#: ../../../XRay.rst:35
msgid ""
"The compiler-inserted instrumentation points come in the form of nop-sleds "
"in the final generated binary, and an ELF section named ``xray_instr_map`` "
"which contains entries pointing to these instrumentation points. The runtime "
"library relies on being able to access the entries of the "
"``xray_instr_map``, and overwrite the instrumentation points at runtime."
msgstr ""

#: ../../../XRay.rst:42
msgid "Using XRay"
msgstr ""

#: ../../../XRay.rst:44
msgid "You can use XRay in a couple of ways:"
msgstr ""

#: ../../../XRay.rst:46
msgid "Instrumenting your C/C++/Objective-C/Objective-C++ application."
msgstr ""

#: ../../../XRay.rst:47
msgid "Generating LLVM IR with the correct function attributes."
msgstr ""

#: ../../../XRay.rst:49
msgid ""
"The rest of this section covers these main ways and later on how to "
"customise what XRay does in an XRay-instrumented binary."
msgstr ""

#: ../../../XRay.rst:53
msgid "Instrumenting your C/C++/Objective-C Application"
msgstr ""

#: ../../../XRay.rst:55
msgid ""
"The easiest way of getting XRay instrumentation for your application is by "
"enabling the ``-fxray-instrument`` flag in your clang invocation."
msgstr ""

#: ../../../XRay.rst:58
msgid "For example:"
msgstr ""

#: ../../../XRay.rst:64
msgid ""
"By default, functions that have at least 200 instructions will get XRay "
"instrumentation points. You can tweak that number through the ``-fxray-"
"instruction-threshold=`` flag:"
msgstr ""

#: ../../../XRay.rst:72
msgid ""
"You can also specifically instrument functions in your binary to either "
"always or never be instrumented using source-level attributes. You can do it "
"using the GCC-style attributes or C++11-style attributes."
msgstr ""

#: ../../../XRay.rst:86
msgid ""
"When linking a binary, you can either manually link in the `XRay Runtime "
"Library`_ or use ``clang`` to link it in automatically with the ``-fxray-"
"instrument`` flag. Alternatively, you can statically link-in the XRay "
"runtime library from compiler-rt -- those archive files will take the name "
"of `libclang_rt.xray-{arch}` where `{arch}` is the mnemonic supported by "
"clang (x86_64, arm7, etc.)."
msgstr ""

#: ../../../XRay.rst:94
msgid "LLVM Function Attribute"
msgstr ""

#: ../../../XRay.rst:96
msgid ""
"If you're using LLVM IR directly, you can add the ``function-instrument`` "
"string attribute to your functions, to get the similar effect that the C/C++/"
"Objective-C source-level attributes would get:"
msgstr ""

#: ../../../XRay.rst:110
msgid ""
"You can also set the ``xray-instruction-threshold`` attribute and provide a "
"numeric string value for how many instructions should be in the function "
"before it gets instrumented."
msgstr ""

#: ../../../XRay.rst:121
msgid "XRay Runtime Library"
msgstr ""

#: ../../../XRay.rst:123
msgid ""
"The XRay Runtime Library is part of the compiler-rt project, which "
"implements the runtime components that perform the patching and unpatching "
"of inserted instrumentation points. When you use ``clang`` to link your "
"binaries and the ``-fxray-instrument`` flag, it will automatically link in "
"the XRay runtime."
msgstr ""

#: ../../../XRay.rst:128
msgid ""
"The default implementation of the XRay runtime will enable XRay "
"instrumentation before ``main`` starts, which works for applications that "
"have a short lifetime. This implementation also records all function entry "
"and exit events which may result in a lot of records in the resulting trace."
msgstr ""

#: ../../../XRay.rst:133
msgid ""
"Also by default the filename of the XRay trace is ``xray-log.XXXXXX`` where "
"the ``XXXXXX`` part is randomly generated."
msgstr ""

#: ../../../XRay.rst:136
msgid ""
"These options can be controlled through the ``XRAY_OPTIONS`` environment "
"variable, where we list down the options and their defaults below."
msgstr ""

#: ../../../XRay.rst:140
msgid "Option"
msgstr ""

#: ../../../XRay.rst:140
msgid "Type"
msgstr ""

#: ../../../XRay.rst:140
msgid "Default"
msgstr ""

#: ../../../XRay.rst:140
msgid "Description"
msgstr ""

#: ../../../XRay.rst:142
msgid "patch_premain"
msgstr ""

#: ../../../XRay.rst:142 ../../../XRay.rst:146 ../../../XRay.rst:153
msgid "``bool``"
msgstr ""

#: ../../../XRay.rst:142 ../../../XRay.rst:153
msgid "``false``"
msgstr ""

#: ../../../XRay.rst:142
msgid "Whether to patch instrumentation points before main."
msgstr ""

#: ../../../XRay.rst:146
msgid "xray_naive_log"
msgstr ""

#: ../../../XRay.rst:146
msgid "``true``"
msgstr ""

#: ../../../XRay.rst:146
msgid "Whether to install the naive log implementation."
msgstr ""

#: ../../../XRay.rst:150
msgid "xray_logfile_base"
msgstr ""

#: ../../../XRay.rst:150
msgid "``const char*``"
msgstr ""

#: ../../../XRay.rst:150
msgid "``xray-log.``"
msgstr ""

#: ../../../XRay.rst:150
msgid "Filename base for the XRay logfile."
msgstr ""

#: ../../../XRay.rst:153
msgid "xray_fdr_log"
msgstr ""

#: ../../../XRay.rst:153
msgid "Whether to install the Flight Data Recorder (FDR) mode."
msgstr ""

#: ../../../XRay.rst:159
msgid ""
"If you choose to not use the default logging implementation that comes with "
"the XRay runtime and/or control when/how the XRay instrumentation runs, you "
"may use the XRay APIs directly for doing so. To do this, you'll need to "
"include the ``xray_interface.h`` from the compiler-rt ``xray`` directory. "
"The important API functions we list below:"
msgstr ""

#: ../../../XRay.rst:165
msgid ""
"``__xray_set_handler(void (*entry)(int32_t, XRayEntryType))``: Install your "
"own logging handler for when an event is encountered. See ``xray/"
"xray_interface.h`` for more details."
msgstr ""

#: ../../../XRay.rst:168
msgid "``__xray_remove_handler()``: Removes whatever the installed handler is."
msgstr ""

#: ../../../XRay.rst:169
msgid ""
"``__xray_patch()``: Patch all the instrumentation points defined in the "
"binary."
msgstr ""

#: ../../../XRay.rst:171
msgid ""
"``__xray_unpatch()``: Unpatch the instrumentation points defined in the "
"binary."
msgstr ""

#: ../../../XRay.rst:174
msgid ""
"There are some requirements on the logging handler to be installed for the "
"thread-safety of operations to be performed by the XRay runtime library:"
msgstr ""

#: ../../../XRay.rst:177
msgid ""
"The function should be thread-safe, as multiple threads may be invoking the "
"function at the same time. If the logging function needs to do "
"synchronisation, it must do so internally as XRay does not provide any "
"synchronisation guarantees outside from the atomicity of updates to the "
"pointer."
msgstr ""

#: ../../../XRay.rst:182
msgid ""
"The pointer provided to ``__xray_set_handler(...)`` must be live even after "
"calls to ``__xray_remove_handler()`` and ``__xray_unpatch()`` have "
"succeeded. XRay cannot guarantee that all threads that have ever gotten a "
"copy of the pointer will not invoke the function."
msgstr ""

#: ../../../XRay.rst:188
msgid "Flight Data Recorder Mode"
msgstr ""

#: ../../../XRay.rst:190
msgid ""
"XRay supports a logging mode which allows the application to only capture a "
"fixed amount of memory's worth of events. Flight Data Recorder (FDR) mode "
"works very much like a plane's \"black box\" which keeps recording data to "
"memory in a fixed-size circular queue of buffers, and have the data "
"available programmatically until the buffers are finalized and flushed. To "
"use FDR mode on your application, you may set the ``xray_fdr_log`` option to "
"``true`` in the ``XRAY_OPTIONS`` environment variable (while also optionally "
"setting the ``xray_naive_log`` to ``false``)."
msgstr ""

#: ../../../XRay.rst:199
msgid ""
"When FDR mode is on, it will keep writing and recycling memory buffers until "
"the logging implementation is finalized -- at which point it can be flushed "
"and re-initialised later. To do this programmatically, we follow the "
"workflow provided below:"
msgstr ""

#: ../../../XRay.rst:225
msgid ""
"The default settings for the FDR mode implementation will create logs named "
"similarly to the naive log implementation, but will have a different log "
"format. All the trace analysis tools (and the trace reading library) will "
"support all versions of the FDR mode format as we add more functionality and "
"record types in the future."
msgstr ""

#: ../../../XRay.rst:231
msgid ""
"**NOTE:** We do not however promise perpetual support for when we update the "
"log versions we support going forward. Deprecation of the formats will be "
"announced and discussed on the developers mailing list."
msgstr ""

#: ../../../XRay.rst:235
msgid ""
"XRay allows for replacing the default FDR mode logging implementation using "
"the following API:"
msgstr ""

#: ../../../XRay.rst:238
msgid ""
"``__xray_set_log_impl(...)``: This function takes a struct of type "
"``XRayLogImpl``, which is defined in ``xray/xray_log_interface.h``, part of "
"the XRay compiler-rt installation."
msgstr ""

#: ../../../XRay.rst:241
msgid ""
"``__xray_log_init(...)``: This function allows for initializing and re-"
"initializing an installed logging implementation. See ``xray/"
"xray_log_interface.h`` for details, part of the XRay compiler-rt "
"installation."
msgstr ""

#: ../../../XRay.rst:247
msgid "Trace Analysis Tools"
msgstr ""

#: ../../../XRay.rst:249
msgid ""
"We currently have the beginnings of a trace analysis tool in LLVM, which can "
"be found in the ``tools/llvm-xray`` directory. The ``llvm-xray`` tool "
"currently supports the following subcommands:"
msgstr ""

#: ../../../XRay.rst:253
msgid ""
"``extract``: Extract the instrumentation map from a binary, and return it as "
"YAML."
msgstr ""

#: ../../../XRay.rst:255
msgid ""
"``account``: Performs basic function call accounting statistics with various "
"options for sorting, and output formats (supports CSV, YAML, and console-"
"friendly TEXT)."
msgstr ""

#: ../../../XRay.rst:258
msgid ""
"``convert``: Converts an XRay log file from one format to another. Currently "
"only converts to YAML."
msgstr ""

#: ../../../XRay.rst:260
msgid ""
"``graph``: Generates a DOT graph of the function call relationships between "
"functions found in an XRay trace."
msgstr ""

#: ../../../XRay.rst:263
msgid ""
"These subcommands use various library components found as part of the XRay "
"libraries, distributed with the LLVM distribution. These are:"
msgstr ""

#: ../../../XRay.rst:266
msgid ""
"``llvm/XRay/Trace.h`` : A trace reading library for conveniently loading an "
"XRay trace of supported forms, into a convenient in-memory representation. "
"All the analysis tools that deal with traces use this implementation."
msgstr ""

#: ../../../XRay.rst:269
msgid ""
"``llvm/XRay/Graph.h`` : A semi-generic graph type used by the graph "
"subcommand to conveniently represent a function call graph with statistics "
"associated with edges and vertices."
msgstr ""

#: ../../../XRay.rst:272
msgid ""
"``llvm/XRay/InstrumentationMap.h``: A convenient tool for analyzing the "
"instrumentation map in XRay-instrumented object files and binaries. The "
"``extract`` subcommand uses this particular library."
msgstr ""

#: ../../../XRay.rst:277
msgid "Future Work"
msgstr ""

#: ../../../XRay.rst:279
msgid ""
"There are a number of ongoing efforts for expanding the toolset building "
"around the XRay instrumentation system."
msgstr ""

#: ../../../XRay.rst:283
msgid "Trace Analysis"
msgstr ""

#: ../../../XRay.rst:285
msgid ""
"We have more subcommands and modes that we're thinking of developing, in the "
"following forms:"
msgstr ""

#: ../../../XRay.rst:288
msgid "``stack``: Reconstruct the function call stacks in a timeline."
msgstr ""

#: ../../../XRay.rst:291
msgid "More Platforms"
msgstr ""

#: ../../../XRay.rst:293
msgid ""
"We're looking forward to contributions to port XRay to more architectures "
"and operating systems."
msgstr ""
