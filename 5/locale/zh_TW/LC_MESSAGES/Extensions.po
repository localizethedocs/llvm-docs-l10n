# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:12+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../Extensions.rst:3
msgid "LLVM Extensions"
msgstr ""

#: ../../../Extensions.rst:12
msgid "Introduction"
msgstr ""

#: ../../../Extensions.rst:14
msgid ""
"This document describes extensions to tools and formats LLVM seeks "
"compatibility with."
msgstr ""

#: ../../../Extensions.rst:18
msgid "General Assembly Syntax"
msgstr ""

#: ../../../Extensions.rst:21
msgid "C99-style Hexadecimal Floating-point Constants"
msgstr ""

#: ../../../Extensions.rst:23
msgid ""
"LLVM's assemblers allow floating-point constants to be written in C99's "
"hexadecimal format instead of decimal if desired."
msgstr ""

#: ../../../Extensions.rst:32
msgid "Machine-specific Assembly Syntax"
msgstr ""

#: ../../../Extensions.rst:35
msgid "X86/COFF-Dependent"
msgstr ""

#: ../../../Extensions.rst:38 ../../../Extensions.rst:232
msgid "Relocations"
msgstr ""

#: ../../../Extensions.rst:40
msgid "The following additional relocation types are supported:"
msgstr ""

#: ../../../Extensions.rst:42
msgid ""
"**@IMGREL** (AT&T syntax only) generates an image-relative relocation that "
"corresponds to the COFF relocation types ``IMAGE_REL_I386_DIR32NB`` (32-bit) "
"or ``IMAGE_REL_AMD64_ADDR32NB`` (64-bit)."
msgstr ""

#: ../../../Extensions.rst:57
msgid ""
"**.secrel32** generates a relocation that corresponds to the COFF relocation "
"types ``IMAGE_REL_I386_SECREL`` (32-bit) or ``IMAGE_REL_AMD64_SECREL`` (64-"
"bit)."
msgstr ""

#: ../../../Extensions.rst:60
msgid ""
"**.secidx** relocation generates an index of the section that contains the "
"target.  It corresponds to the COFF relocation types "
"``IMAGE_REL_I386_SECTION`` (32-bit) or ``IMAGE_REL_AMD64_SECTION`` (64-bit)."
msgstr ""

#: ../../../Extensions.rst:75
msgid "``.linkonce`` Directive"
msgstr ""

#: ../../../Extensions.rst:77
msgid "Syntax:"
msgstr ""

#: ../../../Extensions.rst:79
msgid "``.linkonce [ comdat type ]``"
msgstr ""

#: ../../../Extensions.rst:81
msgid "Supported COMDAT types:"
msgstr ""

#: ../../../Extensions.rst:85
msgid "``discard``"
msgstr ""

#: ../../../Extensions.rst:84
msgid ""
"Discards duplicate sections with the same COMDAT symbol. This is the default "
"if no type is specified."
msgstr ""

#: ../../../Extensions.rst:88
msgid "``one_only``"
msgstr ""

#: ../../../Extensions.rst:88
msgid "If the symbol is defined multiple times, the linker issues an error."
msgstr ""

#: ../../../Extensions.rst:92
msgid "``same_size``"
msgstr ""

#: ../../../Extensions.rst:91
msgid ""
"Duplicates are discarded, but the linker issues an error if any have "
"different sizes."
msgstr ""

#: ../../../Extensions.rst:96
msgid "``same_contents``"
msgstr ""

#: ../../../Extensions.rst:95
msgid ""
"Duplicates are discarded, but the linker issues an error if any duplicates "
"do not have exactly the same content."
msgstr ""

#: ../../../Extensions.rst:99
msgid "``largest``"
msgstr ""

#: ../../../Extensions.rst:99
msgid "Links the largest section from among the duplicates."
msgstr ""

#: ../../../Extensions.rst:103
msgid "``newest``"
msgstr ""

#: ../../../Extensions.rst:102
msgid "Links the newest section from among the duplicates."
msgstr ""

#: ../../../Extensions.rst:112 ../../../Extensions.rst:189
msgid "``.section`` Directive"
msgstr ""

#: ../../../Extensions.rst:114
msgid ""
"MC supports passing the information in ``.linkonce`` at the end of ``."
"section``. For example,  these two codes are equivalent"
msgstr ""

#: ../../../Extensions.rst:132
msgid ""
"Note that in the combined form the COMDAT symbol is explicit. This extension "
"exists to support multiple sections with the same name in different COMDATs:"
msgstr ""

#: ../../../Extensions.rst:149
msgid ""
"In addition to the types allowed with ``.linkonce``, ``.section`` also "
"accepts ``associative``. The meaning is that the section is linked  if a "
"certain other COMDAT section is linked. This other section is indicated by "
"the comdat symbol in this directive. It can be any symbol defined in the "
"associated section, but is usually the associated section's comdat."
msgstr ""

#: ../../../Extensions.rst:155
msgid "The following restrictions apply to the associated section:"
msgstr ""

#: ../../../Extensions.rst:157
msgid "It must be a COMDAT section."
msgstr ""

#: ../../../Extensions.rst:158
msgid "It cannot be another associative COMDAT section."
msgstr ""

#: ../../../Extensions.rst:160
msgid ""
"In the following example the symobl ``sym`` is the comdat symbol of ``.foo`` "
"and ``.bar`` is associated to ``.foo``."
msgstr ""

#: ../../../Extensions.rst:168
msgid "MC supports these flags in the COFF ``.section`` directive:"
msgstr ""

#: ../../../Extensions.rst:170
msgid "``b``: BSS section (``IMAGE_SCN_CNT_INITIALIZED_DATA``)"
msgstr ""

#: ../../../Extensions.rst:171
msgid "``d``: Data section (``IMAGE_SCN_CNT_UNINITIALIZED_DATA``)"
msgstr ""

#: ../../../Extensions.rst:172
msgid "``n``: Section is not loaded (``IMAGE_SCN_LNK_REMOVE``)"
msgstr ""

#: ../../../Extensions.rst:173
msgid "``r``: Read-only"
msgstr ""

#: ../../../Extensions.rst:174
msgid "``s``: Shared section"
msgstr ""

#: ../../../Extensions.rst:175
msgid "``w``: Writable"
msgstr ""

#: ../../../Extensions.rst:176
msgid "``x``: Executable section"
msgstr ""

#: ../../../Extensions.rst:177
msgid "``y``: Not readable"
msgstr ""

#: ../../../Extensions.rst:178
msgid "``D``: Discardable (``IMAGE_SCN_MEM_DISCARDABLE``)"
msgstr ""

#: ../../../Extensions.rst:180
msgid ""
"These flags are all compatible with gas, with the exception of the ``D`` "
"flag, which gnu as does not support. For gas compatibility, sections with a "
"name starting with \".debug\" are implicitly discardable."
msgstr ""

#: ../../../Extensions.rst:186
msgid "ELF-Dependent"
msgstr ""

#: ../../../Extensions.rst:191
msgid ""
"In order to support creating multiple sections with the same name and "
"comdat, it is possible to add an unique number at the end of the ``."
"seciton`` directive. For example, the following code creates two sections "
"named ``.text``."
msgstr ""

#: ../../../Extensions.rst:204
msgid ""
"The unique number is not present in the resulting object at all. It is just "
"used in the assembler to differentiate the sections."
msgstr ""

#: ../../../Extensions.rst:207
msgid ""
"The 'o' flag is mapped to SHF_LINK_ORDER. If it is present, a symbol must be "
"given that identifies the section to be placed is the .sh_link."
msgstr ""

#: ../../../Extensions.rst:217
msgid "which is equivalent to just"
msgstr ""

#: ../../../Extensions.rst:226
msgid "Target Specific Behaviour"
msgstr ""

#: ../../../Extensions.rst:229
msgid "X86"
msgstr ""

#: ../../../Extensions.rst:234
msgid ""
"``@ABS8`` can be applied to symbols which appear as immediate operands to "
"instructions that have an 8-bit immediate form for that operand. It causes "
"the assembler to use the 8-bit form and an 8-bit relocation (e.g. "
"``R_386_8`` or ``R_X86_64_8``) for the symbol."
msgstr ""

#: ../../../Extensions.rst:239
msgid "For example:"
msgstr ""

#: ../../../Extensions.rst:245
msgid ""
"This causes the assembler to select the form of the 64-bit ``cmpq`` "
"instruction that takes an 8-bit immediate operand that is sign extended to "
"64 bits, as opposed to ``cmpq $foo, %rdi`` which takes a 32-bit immediate "
"operand. This is also not the same as ``cmpb $foo, %dil``, which is an 8-bit "
"comparison."
msgstr ""

#: ../../../Extensions.rst:251
msgid "Windows on ARM"
msgstr ""

#: ../../../Extensions.rst:254
msgid "Stack Probe Emission"
msgstr ""

#: ../../../Extensions.rst:256
msgid ""
"The reference implementation (Microsoft Visual Studio 2012) emits stack "
"probes in the following fashion:"
msgstr ""

#: ../../../Extensions.rst:265
msgid ""
"However, this has the limitation of 32 MiB (Â±16MiB).  In order to "
"accommodate larger binaries, LLVM supports the use of ``-mcode-model=large`` "
"to allow a 4GiB range via a slight deviation.  It will generate an indirect "
"jump as follows:"
msgstr ""

#: ../../../Extensions.rst:278
msgid "Variable Length Arrays"
msgstr ""

#: ../../../Extensions.rst:280
msgid ""
"The reference implementation (Microsoft Visual Studio 2012) does not permit "
"the emission of Variable Length Arrays (VLAs)."
msgstr ""

#: ../../../Extensions.rst:283
msgid ""
"The Windows ARM Itanium ABI extends the base ABI by adding support for "
"emitting a dynamic stack allocation.  When emitting a variable stack "
"allocation, a call to ``__chkstk`` is emitted unconditionally to ensure that "
"guard pages are setup properly.  The emission of this stack probe emission "
"is handled similar to the standard stack probe emission."
msgstr ""

#: ../../../Extensions.rst:289
msgid "The MSVC environment does not emit code for VLAs currently."
msgstr ""
