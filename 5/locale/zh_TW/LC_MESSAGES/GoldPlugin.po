# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:12+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../GoldPlugin.rst:3
msgid "The LLVM gold plugin"
msgstr ""

#: ../../../GoldPlugin.rst:6
msgid "Introduction"
msgstr ""

#: ../../../GoldPlugin.rst:8
msgid ""
"Building with link time optimization requires cooperation from the system "
"linker. LTO support on Linux systems requires that you use the `gold "
"linker`_ or ld.bfd from binutils >= 2.21.51.0.2, as they support LTO via "
"plugins. This is the same mechanism used by the `GCC LTO`_ project."
msgstr ""

#: ../../../GoldPlugin.rst:13
msgid ""
"The LLVM gold plugin implements the gold plugin interface on top of :ref:"
"`libLTO`.  The same plugin can also be used by other tools such as ``ar`` "
"and ``nm``."
msgstr ""

#: ../../../GoldPlugin.rst:24
msgid "How to build it"
msgstr ""

#: ../../../GoldPlugin.rst:26
msgid ""
"Check for plugin support by running ``/usr/bin/ld -plugin``. If it complains "
"\"missing argument\" then you have plugin support. If not, such as an "
"\"unknown option\" error then you will either need to build gold or install "
"a recent version of ld.bfd with plugin support and then build gold plugin."
msgstr ""

#: ../../../GoldPlugin.rst:31
msgid "Download, configure and build ld.bfd with plugin support:"
msgstr ""

#: ../../../GoldPlugin.rst:41
msgid ""
"That should leave you with ``build/ld/ld-new`` which supports the ``-"
"plugin`` option. Running ``make`` will additionally build ``build/binutils/"
"ar`` and ``nm-new`` binaries supporting plugins."
msgstr ""

#: ../../../GoldPlugin.rst:45
msgid ""
"Build the LLVMgold plugin. Run CMake with ``-DLLVM_BINUTILS_INCDIR=/path/to/"
"binutils/include``.  The correct include path will contain the file ``plugin-"
"api.h``."
msgstr ""

#: ../../../GoldPlugin.rst:50
msgid "Usage"
msgstr ""

#: ../../../GoldPlugin.rst:52
msgid ""
"The linker takes a ``-plugin`` option that points to the path of the plugin "
"``.so`` file. To find out what link command ``gcc`` would run in a given "
"situation, run ``gcc -v [...]`` and look for the line where it runs "
"``collect2``. Replace that with ``ld-new -plugin /path/to/LLVMgold.so`` to "
"test it out. Once you're ready to switch to using gold, backup your existing "
"``/usr/bin/ld`` then replace it with ``ld-new``."
msgstr ""

#: ../../../GoldPlugin.rst:60
msgid ""
"You should produce bitcode files from ``clang`` with the option ``-flto``. "
"This flag will also cause ``clang`` to look for the gold plugin in the "
"``lib`` directory under its prefix and pass the ``-plugin`` option to "
"``ld``. It will not look for an alternate linker, which is why you need gold "
"to be the installed system linker in your path."
msgstr ""

#: ../../../GoldPlugin.rst:66
msgid ""
"``ar`` and ``nm`` also accept the ``-plugin`` option and it's possible to to "
"install ``LLVMgold.so`` to ``/usr/lib/bfd-plugins`` for a seamless setup. If "
"you built your own gold, be sure to install the ``ar`` and ``nm-new`` you "
"built to ``/usr/bin``."
msgstr ""

#: ../../../GoldPlugin.rst:73
msgid "Example of link time optimization"
msgstr ""

#: ../../../GoldPlugin.rst:75
msgid ""
"The following example shows a worked example of the gold plugin mixing LLVM "
"bitcode and native code."
msgstr ""

#: ../../../GoldPlugin.rst:119
msgid ""
"Gold informs the plugin that foo3 is never referenced outside the IR, "
"leading LLVM to delete that function. However, unlike in the :ref:`libLTO "
"example <libLTO-example>` gold does not currently eliminate foo4."
msgstr ""

#: ../../../GoldPlugin.rst:124
msgid "Quickstart for using LTO with autotooled projects"
msgstr ""

#: ../../../GoldPlugin.rst:126
msgid ""
"Once your system ``ld``, ``ar``, and ``nm`` all support LLVM bitcode, "
"everything is in place for an easy to use LTO build of autotooled projects:"
msgstr ""

#: ../../../GoldPlugin.rst:129
msgid ""
"Follow the instructions :ref:`on how to build LLVMgold.so <lto-how-to-"
"build>`."
msgstr ""

#: ../../../GoldPlugin.rst:132
msgid "Install the newly built binutils to ``$PREFIX``"
msgstr ""

#: ../../../GoldPlugin.rst:134
msgid "Copy ``Release/lib/LLVMgold.so`` to ``$PREFIX/lib/bfd-plugins/``"
msgstr ""

#: ../../../GoldPlugin.rst:136
msgid ""
"Set environment variables (``$PREFIX`` is where you installed clang and "
"binutils):"
msgstr ""

#: ../../../GoldPlugin.rst:147
msgid "Or you can just set your path:"
msgstr ""

#: ../../../GoldPlugin.rst:155
msgid "Configure and build the project as usual:"
msgstr ""

#: ../../../GoldPlugin.rst:161
msgid ""
"The environment variable settings may work for non-autotooled projects too, "
"but you may need to set the ``LD`` environment variable as well."
msgstr ""

#: ../../../GoldPlugin.rst:165
msgid "Licensing"
msgstr ""

#: ../../../GoldPlugin.rst:167
msgid ""
"Gold is licensed under the GPLv3. LLVMgold uses the interface file ``plugin-"
"api.h`` from gold which means that the resulting ``LLVMgold.so`` binary is "
"also GPLv3. This can still be used to link non-GPLv3 programs just as much "
"as gold could without the plugin."
msgstr ""
