# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../CMake.rst:3
msgid "Building LLVM with CMake"
msgstr ""

#: ../../../CMake.rst:9
msgid "Introduction"
msgstr ""

#: ../../../CMake.rst:11
msgid ""
"`CMake <http://www.cmake.org/>`_ is a cross-platform build-generator tool. "
"CMake does not build the project, it generates the files needed by your "
"build tool (GNU make, Visual Studio, etc.) for building LLVM."
msgstr ""

#: ../../../CMake.rst:15
msgid ""
"If **you are a new contributor**, please start with the :doc:"
"`GettingStarted` page.  This page is geared for existing contributors moving "
"from the legacy configure/make system."
msgstr ""

#: ../../../CMake.rst:19
msgid ""
"If you are really anxious about getting a functional LLVM build, go to the "
"`Quick start`_ section. If you are a CMake novice, start with `Basic CMake "
"usage`_ and then go back to the `Quick start`_ section once you know what "
"you are doing. The `Options and variables`_ section is a reference for "
"customizing your build. If you already have experience with CMake, this is "
"the recommended starting point."
msgstr ""

#: ../../../CMake.rst:25
msgid ""
"This page is geared towards users of the LLVM CMake build. If you're looking "
"for information about modifying the LLVM CMake build system you may want to "
"see the :doc:`CMakePrimer` page. It has a basic overview of the CMake "
"language."
msgstr ""

#: ../../../CMake.rst:32
msgid "Quick start"
msgstr ""

#: ../../../CMake.rst:34
msgid "We use here the command-line, non-interactive CMake interface."
msgstr ""

#: ../../../CMake.rst:36
msgid ""
"`Download <http://www.cmake.org/cmake/resources/software.html>`_ and install "
"CMake. Version 3.4.3 is the minimum required."
msgstr ""

#: ../../../CMake.rst:39
msgid ""
"Open a shell. Your development tools must be reachable from this shell "
"through the PATH environment variable."
msgstr ""

#: ../../../CMake.rst:42
msgid ""
"Create a build directory. Building LLVM in the source directory is not "
"supported. cd to this directory:"
msgstr ""

#: ../../../CMake.rst:50
msgid ""
"Execute this command in the shell replacing `path/to/llvm/source/root` with "
"the path to the root of your LLVM source tree:"
msgstr ""

#: ../../../CMake.rst:57
msgid ""
"CMake will detect your development environment, perform a series of tests, "
"and generate the files required for building LLVM. CMake will use default "
"values for all build parameters. See the `Options and variables`_ section "
"for a list of build parameters that you can modify."
msgstr ""

#: ../../../CMake.rst:62
msgid ""
"This can fail if CMake can't detect your toolset, or if it thinks that the "
"environment is not sane enough. In this case, make sure that the toolset "
"that you intend to use is the only one reachable from the shell, and that "
"the shell itself is the correct one for your development environment. CMake "
"will refuse to build MinGW makefiles if you have a POSIX shell reachable "
"through the PATH environment variable, for instance. You can force CMake to "
"use a given build tool; for instructions, see the `Usage`_ section, below."
msgstr ""

#: ../../../CMake.rst:70
msgid ""
"After CMake has finished running, proceed to use IDE project files, or start "
"the build from the build directory:"
msgstr ""

#: ../../../CMake.rst:77
msgid ""
"The ``--build`` option tells ``cmake`` to invoke the underlying build tool "
"(``make``, ``ninja``, ``xcodebuild``, ``msbuild``, etc.)"
msgstr ""

#: ../../../CMake.rst:80
msgid ""
"The underlying build tool can be invoked directly, of course, but the ``--"
"build`` option is portable."
msgstr ""

#: ../../../CMake.rst:83
msgid "After LLVM has finished building, install it from the build directory:"
msgstr ""

#: ../../../CMake.rst:89
msgid ""
"The ``--target`` option with ``install`` parameter in addition to the ``--"
"build`` option tells ``cmake`` to build the ``install`` target."
msgstr ""

#: ../../../CMake.rst:92
msgid ""
"It is possible to set a different install prefix at installation time by "
"invoking the ``cmake_install.cmake`` script generated in the build directory:"
msgstr ""

#: ../../../CMake.rst:104
msgid "Basic CMake usage"
msgstr ""

#: ../../../CMake.rst:106
msgid ""
"This section explains basic aspects of CMake which you may need in your day-"
"to-day usage."
msgstr ""

#: ../../../CMake.rst:109
msgid ""
"CMake comes with extensive documentation, in the form of html files, and as "
"online help accessible via the ``cmake`` executable itself. Execute ``cmake "
"--help`` for further help options."
msgstr ""

#: ../../../CMake.rst:113
msgid ""
"CMake allows you to specify a build tool (e.g., GNU make, Visual Studio, or "
"Xcode). If not specified on the command line, CMake tries to guess which "
"build tool to use, based on your environment. Once it has identified your "
"build tool, CMake uses the corresponding *Generator* to create files for "
"your build tool (e.g., Makefiles or Visual Studio or Xcode project files). "
"You can explicitly specify the generator with the command line option ``-G "
"\"Name of the generator\"``. To see a list of the available generators on "
"your system, execute"
msgstr ""

#: ../../../CMake.rst:125
msgid "This will list the generator names at the end of the help text."
msgstr ""

#: ../../../CMake.rst:127
msgid ""
"Generators' names are case-sensitive, and may contain spaces. For this "
"reason, you should enter them exactly as they are listed in the ``cmake --"
"help`` output, in quotes. For example, to generate project files "
"specifically for Visual Studio 12, you can execute:"
msgstr ""

#: ../../../CMake.rst:136
msgid ""
"For a given development platform there can be more than one adequate "
"generator. If you use Visual Studio, \"NMake Makefiles\" is a generator you "
"can use for building with NMake. By default, CMake chooses the most specific "
"generator supported by your development environment. If you want an "
"alternative generator, you must tell this to CMake with the ``-G`` option."
msgstr ""

#: ../../../CMake.rst:142
msgid "Todo"
msgstr ""

#: ../../../CMake.rst:144
msgid ""
"Explain variables and cache. Move explanation here from #options section."
msgstr ""

#: ../../../CMake.rst:149
msgid "Options and variables"
msgstr ""

#: ../../../CMake.rst:151
msgid ""
"Variables customize how the build will be generated. Options are boolean "
"variables, with possible values ON/OFF. Options and variables are defined on "
"the CMake command line like this:"
msgstr ""

#: ../../../CMake.rst:159
msgid ""
"You can set a variable after the initial CMake invocation to change its "
"value. You can also undefine a variable:"
msgstr ""

#: ../../../CMake.rst:166
msgid ""
"Variables are stored in the CMake cache. This is a file named ``CMakeCache."
"txt`` stored at the root of your build directory that is generated by "
"``cmake``. Editing it yourself is not recommended."
msgstr ""

#: ../../../CMake.rst:170
msgid ""
"Variables are listed in the CMake cache and later in this document with the "
"variable name and type separated by a colon. You can also specify the "
"variable and type on the CMake command line:"
msgstr ""

#: ../../../CMake.rst:179
msgid "Frequently-used CMake variables"
msgstr ""

#: ../../../CMake.rst:181
msgid ""
"Here are some of the CMake variables that are used often, along with a brief "
"explanation and LLVM-specific notes. For full documentation, consult the "
"CMake manual, or execute ``cmake --help-variable VARIABLE_NAME``."
msgstr ""

#: ../../../CMake.rst:188
msgid "**CMAKE_BUILD_TYPE**:STRING"
msgstr ""

#: ../../../CMake.rst:186
msgid ""
"Sets the build type for ``make``-based generators. Possible values are "
"Release, Debug, RelWithDebInfo and MinSizeRel. If you are using an IDE such "
"as Visual Studio, you should use the IDE settings to set the build type."
msgstr ""

#: ../../../CMake.rst:192
msgid "**CMAKE_INSTALL_PREFIX**:PATH"
msgstr ""

#: ../../../CMake.rst:191
msgid ""
"Path where LLVM will be installed if \"make install\" is invoked or the "
"\"install\" target is built."
msgstr ""

#: ../../../CMake.rst:197
msgid "**LLVM_LIBDIR_SUFFIX**:STRING"
msgstr ""

#: ../../../CMake.rst:195
msgid ""
"Extra suffix to append to the directory where libraries are to be installed. "
"On a 64-bit architecture, one could use ``-DLLVM_LIBDIR_SUFFIX=64`` to "
"install libraries to ``/usr/lib64``."
msgstr ""

#: ../../../CMake.rst:200
msgid "**CMAKE_C_FLAGS**:STRING"
msgstr ""

#: ../../../CMake.rst:200
msgid "Extra flags to use when compiling C source files."
msgstr ""

#: ../../../CMake.rst:203
msgid "**CMAKE_CXX_FLAGS**:STRING"
msgstr ""

#: ../../../CMake.rst:203
msgid "Extra flags to use when compiling C++ source files."
msgstr ""

#: ../../../CMake.rst:208
msgid "LLVM-specific variables"
msgstr ""

#: ../../../CMake.rst:213
msgid "**LLVM_TARGETS_TO_BUILD**:STRING"
msgstr ""

#: ../../../CMake.rst:211
msgid ""
"Semicolon-separated list of targets to build, or *all* for building all "
"targets. Case-sensitive. Defaults to *all*. Example: ``-"
"DLLVM_TARGETS_TO_BUILD=\"X86;PowerPC\"``."
msgstr ""

#: ../../../CMake.rst:219
msgid "**LLVM_BUILD_TOOLS**:BOOL"
msgstr ""

#: ../../../CMake.rst:216
msgid ""
"Build LLVM tools. Defaults to ON. Targets for building each tool are "
"generated in any case. You can build a tool separately by invoking its "
"target. For example, you can build *llvm-as* with a Makefile-based system by "
"executing *make llvm-as* at the root of your build directory."
msgstr ""

#: ../../../CMake.rst:223
msgid "**LLVM_INCLUDE_TOOLS**:BOOL"
msgstr ""

#: ../../../CMake.rst:222
msgid ""
"Generate build targets for the LLVM tools. Defaults to ON. You can use this "
"option to disable the generation of build targets for the LLVM tools."
msgstr ""

#: ../../../CMake.rst:228
msgid "**LLVM_BUILD_EXAMPLES**:BOOL"
msgstr ""

#: ../../../CMake.rst:226
msgid ""
"Build LLVM examples. Defaults to OFF. Targets for building each example are "
"generated in any case. See documentation for *LLVM_BUILD_TOOLS* above for "
"more details."
msgstr ""

#: ../../../CMake.rst:232
msgid "**LLVM_INCLUDE_EXAMPLES**:BOOL"
msgstr ""

#: ../../../CMake.rst:231
msgid ""
"Generate build targets for the LLVM examples. Defaults to ON. You can use "
"this option to disable the generation of build targets for the LLVM examples."
msgstr ""

#: ../../../CMake.rst:240
msgid "**LLVM_BUILD_TESTS**:BOOL"
msgstr ""

#: ../../../CMake.rst:235
msgid ""
"Build LLVM unit tests. Defaults to OFF. Targets for building each unit test "
"are generated in any case. You can build a specific unit test using the "
"targets defined under *unittests*, such as ADTTests, IRTests, SupportTests, "
"etc. (Search for ``add_llvm_unittest`` in the subdirectories of *unittests* "
"for a complete list of unit tests.) It is possible to build all unit tests "
"with the target *UnitTests*."
msgstr ""

#: ../../../CMake.rst:245
msgid "**LLVM_INCLUDE_TESTS**:BOOL"
msgstr ""

#: ../../../CMake.rst:243
msgid ""
"Generate build targets for the LLVM unit tests. Defaults to ON. You can use "
"this option to disable the generation of build targets for the LLVM unit "
"tests."
msgstr ""

#: ../../../CMake.rst:250
msgid "**LLVM_APPEND_VC_REV**:BOOL"
msgstr ""

#: ../../../CMake.rst:248
msgid ""
"Append version control revision info (svn revision number or Git revision "
"id) to LLVM version string (stored in the PACKAGE_VERSION macro). For this "
"to work cmake must be invoked before the build. Defaults to OFF."
msgstr ""

#: ../../../CMake.rst:253
msgid "**LLVM_ENABLE_THREADS**:BOOL"
msgstr ""

#: ../../../CMake.rst:253
msgid "Build with threads support, if available. Defaults to ON."
msgstr ""

#: ../../../CMake.rst:256
msgid "**LLVM_ENABLE_CXX1Y**:BOOL"
msgstr ""

#: ../../../CMake.rst:256
msgid "Build in C++1y mode, if available. Defaults to OFF."
msgstr ""

#: ../../../CMake.rst:260
msgid "**LLVM_ENABLE_ASSERTIONS**:BOOL"
msgstr ""

#: ../../../CMake.rst:259
msgid ""
"Enables code assertions. Defaults to ON if and only if ``CMAKE_BUILD_TYPE`` "
"is *Debug*."
msgstr ""

#: ../../../CMake.rst:265
msgid "**LLVM_ENABLE_EH**:BOOL"
msgstr ""

#: ../../../CMake.rst:263
msgid ""
"Build LLVM with exception-handling support. This is necessary if you wish to "
"link against LLVM libraries and make use of C++ exceptions in your own code "
"that need to propagate through LLVM code. Defaults to OFF."
msgstr ""

#: ../../../CMake.rst:268
msgid "**LLVM_ENABLE_EXPENSIVE_CHECKS**:BOOL"
msgstr ""

#: ../../../CMake.rst:268
msgid "Enable additional time/memory expensive checking. Defaults to OFF."
msgstr ""

#: ../../../CMake.rst:272
msgid "**LLVM_ENABLE_PIC**:BOOL"
msgstr ""

#: ../../../CMake.rst:271
msgid ""
"Add the ``-fPIC`` flag to the compiler command-line, if the compiler "
"supports this flag. Some systems, like Windows, do not need this flag. "
"Defaults to ON."
msgstr ""

#: ../../../CMake.rst:275
msgid "**LLVM_ENABLE_RTTI**:BOOL"
msgstr ""

#: ../../../CMake.rst:275
msgid "Build LLVM with run-time type information. Defaults to OFF."
msgstr ""

#: ../../../CMake.rst:278
msgid "**LLVM_ENABLE_WARNINGS**:BOOL"
msgstr ""

#: ../../../CMake.rst:278
msgid "Enable all compiler warnings. Defaults to ON."
msgstr ""

#: ../../../CMake.rst:282
msgid "**LLVM_ENABLE_PEDANTIC**:BOOL"
msgstr ""

#: ../../../CMake.rst:281
msgid ""
"Enable pedantic mode. This disables compiler-specific extensions, if "
"possible. Defaults to ON."
msgstr ""

#: ../../../CMake.rst:285
msgid "**LLVM_ENABLE_WERROR**:BOOL"
msgstr ""

#: ../../../CMake.rst:285
msgid ""
"Stop and fail the build, if a compiler warning is triggered. Defaults to OFF."
msgstr ""

#: ../../../CMake.rst:294
msgid "**LLVM_ABI_BREAKING_CHECKS**:STRING"
msgstr ""

#: ../../../CMake.rst:288
msgid ""
"Used to decide if LLVM should be built with ABI breaking checks or not.  "
"Allowed values are `WITH_ASSERTS` (default), `FORCE_ON` and `FORCE_OFF`.  "
"`WITH_ASSERTS` turns on ABI breaking checks in an assertion enabled build.  "
"`FORCE_ON` (`FORCE_OFF`) turns them on (off) irrespective of whether normal "
"(`NDEBUG`-based) assertions are enabled or not.  A version of LLVM built "
"with ABI breaking checks is not ABI compatible with a version built without "
"it."
msgstr ""

#: ../../../CMake.rst:298
msgid "**LLVM_BUILD_32_BITS**:BOOL"
msgstr ""

#: ../../../CMake.rst:297
msgid ""
"Build 32-bit executables and libraries on 64-bit systems. This option is "
"available only on some 64-bit Unix systems. Defaults to OFF."
msgstr ""

#: ../../../CMake.rst:304
msgid "**LLVM_TARGET_ARCH**:STRING"
msgstr ""

#: ../../../CMake.rst:301
msgid ""
"LLVM target to use for native code generation. This is required for JIT "
"generation. It defaults to \"host\", meaning that it shall pick the "
"architecture of the machine where LLVM is being built. If you are cross-"
"compiling, set it to the target architecture name."
msgstr ""

#: ../../../CMake.rst:309
msgid "**LLVM_TABLEGEN**:STRING"
msgstr ""

#: ../../../CMake.rst:307
msgid ""
"Full path to a native TableGen executable (usually named ``llvm-tblgen``). "
"This is intended for cross-compiling: if the user sets this variable, no "
"native TableGen will be created."
msgstr ""

#: ../../../CMake.rst:314
msgid "**LLVM_LIT_ARGS**:STRING"
msgstr ""

#: ../../../CMake.rst:312
msgid ""
"Arguments given to lit.  ``make check`` and ``make clang-test`` are "
"affected. By default, ``'-sv --no-progress-bar'`` on Visual C++ and Xcode, "
"``'-sv'`` on others."
msgstr ""

#: ../../../CMake.rst:321
msgid "**LLVM_LIT_TOOLS_DIR**:PATH"
msgstr ""

#: ../../../CMake.rst:317
msgid ""
"The path to GnuWin32 tools for tests. Valid on Windows host.  Defaults to "
"the empty string, in which case lit will look for tools needed for tests (e."
"g. ``grep``, ``sort``, etc.) in your %PATH%. If GnuWin32 is not in your "
"%PATH%, then you can set this variable to the GnuWin32 directory so that lit "
"can find tools needed for tests in that directory."
msgstr ""

#: ../../../CMake.rst:329
msgid "**LLVM_ENABLE_FFI**:BOOL"
msgstr ""

#: ../../../CMake.rst:324
msgid ""
"Indicates whether the LLVM Interpreter will be linked with the Foreign "
"Function Interface library (libffi) in order to enable calling external "
"functions. If the library or its headers are installed in a custom location, "
"you can also set the variables FFI_INCLUDE_DIR and FFI_LIBRARY_DIR to the "
"directories where ffi.h and libffi.so can be found, respectively. Defaults "
"to OFF."
msgstr ""

#: ../../../CMake.rst:337
msgid "**LLVM_EXTERNAL_{CLANG,LLD,POLLY}_SOURCE_DIR**:PATH"
msgstr ""

#: ../../../CMake.rst:332
msgid ""
"These variables specify the path to the source directory for the external "
"LLVM projects Clang, lld, and Polly, respectively, relative to the top-level "
"source directory.  If the in-tree subdirectory for an external project "
"exists (e.g., llvm/tools/clang for Clang), then the corresponding variable "
"will not be used.  If the variable for an external project does not point to "
"a valid path, then that project will not be built."
msgstr ""

#: ../../../CMake.rst:345
msgid "**LLVM_EXTERNAL_PROJECTS**:STRING"
msgstr ""

#: ../../../CMake.rst:340
msgid ""
"Semicolon-separated list of additional external projects to build as part of "
"llvm. For each project LLVM_EXTERNAL_<NAME>_SOURCE_DIR have to be specified "
"with the path for the source code of the project. Example: ``-"
"DLLVM_EXTERNAL_PROJECTS=\"Foo;Bar\" -DLLVM_EXTERNAL_FOO_SOURCE_DIR=/src/foo -"
"DLLVM_EXTERNAL_BAR_SOURCE_DIR=/src/bar``."
msgstr ""

#: ../../../CMake.rst:348
msgid "**LLVM_USE_OPROFILE**:BOOL"
msgstr ""

#: ../../../CMake.rst:348
msgid "Enable building OProfile JIT support. Defaults to OFF."
msgstr ""

#: ../../../CMake.rst:352
msgid "**LLVM_PROFDATA_FILE**:PATH"
msgstr ""

#: ../../../CMake.rst:351
msgid ""
"Path to a profdata file to pass into clang's -fprofile-instr-use flag. This "
"can only be specified if you're building with clang."
msgstr ""

#: ../../../CMake.rst:355
msgid "**LLVM_USE_INTEL_JITEVENTS**:BOOL"
msgstr ""

#: ../../../CMake.rst:355
msgid "Enable building support for Intel JIT Events API. Defaults to OFF."
msgstr ""

#: ../../../CMake.rst:359
msgid "**LLVM_ENABLE_ZLIB**:BOOL"
msgstr ""

#: ../../../CMake.rst:358
msgid ""
"Enable building with zlib to support compression/uncompression in LLVM "
"tools. Defaults to ON."
msgstr ""

#: ../../../CMake.rst:364
msgid "**LLVM_USE_SANITIZER**:STRING"
msgstr ""

#: ../../../CMake.rst:362
msgid ""
"Define the sanitizer used to build LLVM binaries and tests. Possible values "
"are ``Address``, ``Memory``, ``MemoryWithOrigins``, ``Undefined``, "
"``Thread``, and ``Address;Undefined``. Defaults to empty string."
msgstr ""

#: ../../../CMake.rst:369
msgid "**LLVM_ENABLE_LTO**:STRING"
msgstr ""

#: ../../../CMake.rst:367
msgid ""
"Add ``-flto`` or ``-flto=`` flags to the compile and link command lines, "
"enabling link-time optimization. Possible values are ``Off``, ``On``, "
"``Thin`` and ``Full``. Defaults to OFF."
msgstr ""

#: ../../../CMake.rst:372
msgid "**LLVM_PARALLEL_COMPILE_JOBS**:STRING"
msgstr ""

#: ../../../CMake.rst:372
msgid "Define the maximum number of concurrent compilation jobs."
msgstr ""

#: ../../../CMake.rst:375
msgid "**LLVM_PARALLEL_LINK_JOBS**:STRING"
msgstr ""

#: ../../../CMake.rst:375
msgid "Define the maximum number of concurrent link jobs."
msgstr ""

#: ../../../CMake.rst:383
msgid "**LLVM_BUILD_DOCS**:BOOL"
msgstr ""

#: ../../../CMake.rst:378
msgid ""
"Adds all *enabled* documentation targets (i.e. Doxgyen and Sphinx targets) "
"as dependencies of the default build targets.  This results in all of the "
"(enabled) documentation targets being as part of a normal build.  If the "
"``install`` target is run then this also enables all built documentation "
"targets to be installed. Defaults to OFF.  To enable a particular "
"documentation target, see see LLVM_ENABLE_SPHINX and LLVM_ENABLE_DOXYGEN."
msgstr ""

#: ../../../CMake.rst:387
msgid "**LLVM_ENABLE_DOXYGEN**:BOOL"
msgstr ""

#: ../../../CMake.rst:386
msgid ""
"Enables the generation of browsable HTML documentation using doxygen. "
"Defaults to OFF."
msgstr ""

#: ../../../CMake.rst:395
msgid "**LLVM_ENABLE_DOXYGEN_QT_HELP**:BOOL"
msgstr ""

#: ../../../CMake.rst:390
msgid ""
"Enables the generation of a Qt Compressed Help file. Defaults to OFF. This "
"affects the make target ``doxygen-llvm``. When enabled, apart from the "
"normal HTML output generated by doxygen, this will produce a QCH file named "
"``org.llvm.qch``. You can then load this file into Qt Creator. This option "
"is only useful in combination with ``-DLLVM_ENABLE_DOXYGEN=ON``; otherwise "
"this has no effect."
msgstr ""

#: ../../../CMake.rst:404
msgid "**LLVM_DOXYGEN_QCH_FILENAME**:STRING"
msgstr ""

#: ../../../CMake.rst:398
msgid ""
"The filename of the Qt Compressed Help file that will be generated when ``-"
"DLLVM_ENABLE_DOXYGEN=ON`` and ``-DLLVM_ENABLE_DOXYGEN_QT_HELP=ON`` are "
"given. Defaults to ``org.llvm.qch``. This option is only useful in "
"combination with ``-DLLVM_ENABLE_DOXYGEN_QT_HELP=ON``; otherwise it has no "
"effect."
msgstr ""

#: ../../../CMake.rst:411
msgid "**LLVM_DOXYGEN_QHP_NAMESPACE**:STRING"
msgstr ""

#: ../../../CMake.rst:407
msgid ""
"Namespace under which the intermediate Qt Help Project file lives. See `Qt "
"Help Project`_ for more information. Defaults to \"org.llvm\". This option "
"is only useful in combination with ``-DLLVM_ENABLE_DOXYGEN_QT_HELP=ON``; "
"otherwise it has no effect."
msgstr ""

#: ../../../CMake.rst:420
msgid "**LLVM_DOXYGEN_QHP_CUST_FILTER_NAME**:STRING"
msgstr ""

#: ../../../CMake.rst:414
msgid ""
"See `Qt Help Project`_ for more information. Defaults to the CMake variable "
"``${PACKAGE_STRING}`` which is a combination of the package name and version "
"string. This filter can then be used in Qt Creator to select only "
"documentation from LLVM when browsing through all the help files that you "
"might have loaded. This option is only useful in combination with ``-"
"DLLVM_ENABLE_DOXYGEN_QT_HELP=ON``; otherwise it has no effect."
msgstr ""

#: ../../../CMake.rst:428
msgid "**LLVM_DOXYGEN_QHELPGENERATOR_PATH**:STRING"
msgstr ""

#: ../../../CMake.rst:425
msgid ""
"The path to the ``qhelpgenerator`` executable. Defaults to whatever CMake's "
"``find_program()`` can find. This option is only useful in combination with "
"``-DLLVM_ENABLE_DOXYGEN_QT_HELP=ON``; otherwise it has no effect."
msgstr ""

#: ../../../CMake.rst:432
msgid "**LLVM_DOXYGEN_SVG**:BOOL"
msgstr ""

#: ../../../CMake.rst:431
msgid ""
"Uses .svg files instead of .png files for graphs in the Doxygen output. "
"Defaults to OFF."
msgstr ""

#: ../../../CMake.rst:437
msgid "**LLVM_ENABLE_SPHINX**:BOOL"
msgstr ""

#: ../../../CMake.rst:435
msgid ""
"If specified, CMake will search for the ``sphinx-build`` executable and will "
"make the ``SPHINX_OUTPUT_HTML`` and ``SPHINX_OUTPUT_MAN`` CMake options "
"available. Defaults to OFF."
msgstr ""

#: ../../../CMake.rst:440
msgid "**SPHINX_EXECUTABLE**:STRING"
msgstr ""

#: ../../../CMake.rst:440
msgid "The path to the ``sphinx-build`` executable detected by CMake."
msgstr ""

#: ../../../CMake.rst:447
msgid "**SPHINX_OUTPUT_HTML**:BOOL"
msgstr ""

#: ../../../CMake.rst:443
msgid ""
"If enabled (and ``LLVM_ENABLE_SPHINX`` is enabled) then the targets for "
"building the documentation as html are added (but not built by default "
"unless ``LLVM_BUILD_DOCS`` is enabled). There is a target for each project "
"in the source tree that uses sphinx (e.g.  ``docs-llvm-html``, ``docs-clang-"
"html`` and ``docs-lld-html``). Defaults to ON."
msgstr ""

#: ../../../CMake.rst:453
msgid "**SPHINX_OUTPUT_MAN**:BOOL"
msgstr ""

#: ../../../CMake.rst:450
msgid ""
"If enabled (and ``LLVM_ENABLE_SPHINX`` is enabled) the targets for building "
"the man pages are added (but not built by default unless ``LLVM_BUILD_DOCS`` "
"is enabled). Currently the only target added is ``docs-llvm-man``. Defaults "
"to ON."
msgstr ""

#: ../../../CMake.rst:457
msgid "**SPHINX_WARNINGS_AS_ERRORS**:BOOL"
msgstr ""

#: ../../../CMake.rst:456
msgid ""
"If enabled then sphinx documentation warnings will be treated as errors. "
"Defaults to ON."
msgstr ""

#: ../../../CMake.rst:463
msgid "**LLVM_CREATE_XCODE_TOOLCHAIN**:BOOL"
msgstr ""

#: ../../../CMake.rst:460
msgid ""
"OS X Only: If enabled CMake will generate a target named 'install-xcode-"
"toolchain'. This target will create a directory at $CMAKE_INSTALL_PREFIX/"
"Toolchains containing an xctoolchain directory which can be used to override "
"the default system tools."
msgstr ""

#: ../../../CMake.rst:472
msgid "**LLVM_BUILD_LLVM_DYLIB**:BOOL"
msgstr ""

#: ../../../CMake.rst:466
msgid ""
"If enabled, the target for building the libLLVM shared library is added. "
"This library contains all of LLVM's components in a single shared library. "
"Defaults to OFF. This cannot be used in conjunction with BUILD_SHARED_LIBS. "
"Tools will only be linked to the libLLVM shared library if "
"LLVM_LINK_LLVM_DYLIB is also ON. The components in the library can be "
"customised by setting LLVM_DYLIB_COMPONENTS to a list of the desired "
"components."
msgstr ""

#: ../../../CMake.rst:477
msgid "**LLVM_LINK_LLVM_DYLIB**:BOOL"
msgstr ""

#: ../../../CMake.rst:475
msgid ""
"If enabled, tools will be linked with the libLLVM shared library. Defaults "
"to OFF. Setting LLVM_LINK_LLVM_DYLIB to ON also sets LLVM_BUILD_LLVM_DYLIB "
"to ON."
msgstr ""

#: ../../../CMake.rst:487
msgid "**BUILD_SHARED_LIBS**:BOOL"
msgstr ""

#: ../../../CMake.rst:480
msgid ""
"Flag indicating if each LLVM component (e.g. Support) is built as a shared "
"library (ON) or as a static library (OFF). Its default value is OFF. On "
"Windows, shared libraries may be used when building with MinGW, including "
"mingw-w64, but not when building with the Microsoft toolchain."
msgstr ""

#: ../../../CMake.rst:485
msgid ""
"BUILD_SHARED_LIBS is only recommended for use by LLVM developers. If you "
"want to build LLVM as a shared library, you should use the "
"``LLVM_BUILD_LLVM_DYLIB`` option."
msgstr ""

#: ../../../CMake.rst:493
msgid "**LLVM_OPTIMIZED_TABLEGEN**:BOOL"
msgstr ""

#: ../../../CMake.rst:490
msgid ""
"If enabled and building a debug or asserts build the CMake build system will "
"generate a Release build tree to build a fully optimized tablegen for use "
"during the build. Enabling this option can significantly speed up build "
"times especially when building LLVM in Debug configurations."
msgstr ""

#: ../../../CMake.rst:496
msgid "CMake Caches"
msgstr ""

#: ../../../CMake.rst:498
msgid ""
"Recently LLVM and Clang have been adding some more complicated build system "
"features. Utilizing these new features often involves a complicated chain of "
"CMake variables passed on the command line. Clang provides a collection of "
"CMake cache scripts to make these features more approachable."
msgstr ""

#: ../../../CMake.rst:503
msgid "CMake cache files are utilized using CMake's -C flag:"
msgstr ""

#: ../../../CMake.rst:509
msgid ""
"CMake cache scripts are processed in an isolated scope, only cached "
"variables remain set when the main configuration runs. CMake cached "
"variables do not reset variables that are already set unless the FORCE "
"option is specified."
msgstr ""

#: ../../../CMake.rst:513
msgid "A few notes about CMake Caches:"
msgstr ""

#: ../../../CMake.rst:515
msgid "Order of command line arguments is important"
msgstr ""

#: ../../../CMake.rst:517
msgid ""
"-D arguments specified before -C are set before the cache is processed and "
"can be read inside the cache file"
msgstr ""

#: ../../../CMake.rst:519
msgid ""
"-D arguments specified after -C are set after the cache is processed and are "
"unset inside the cache file"
msgstr ""

#: ../../../CMake.rst:522
msgid "All -D arguments will override cache file settings"
msgstr ""

#: ../../../CMake.rst:523
msgid ""
"CMAKE_TOOLCHAIN_FILE is evaluated after both the cache file and the command "
"line arguments"
msgstr ""

#: ../../../CMake.rst:525
msgid "It is recommended that all -D options should be specified *before* -C"
msgstr ""

#: ../../../CMake.rst:527
msgid ""
"For more information about some of the advanced build configurations "
"supported via Cache files see :doc:`AdvancedBuilds`."
msgstr ""

#: ../../../CMake.rst:531
msgid "Executing the test suite"
msgstr ""

#: ../../../CMake.rst:533
msgid ""
"Testing is performed when the *check-all* target is built. For instance, if "
"you are using Makefiles, execute this command in the root of your build "
"directory:"
msgstr ""

#: ../../../CMake.rst:540
msgid ""
"On Visual Studio, you may run tests by building the project \"check-all\". "
"For more information about testing, see the :doc:`TestingGuide`."
msgstr ""

#: ../../../CMake.rst:544
msgid "Cross compiling"
msgstr ""

#: ../../../CMake.rst:546
msgid ""
"See `this wiki page <http://www.vtk.org/Wiki/CMake_Cross_Compiling>`_ for "
"generic instructions on how to cross-compile with CMake. It goes into "
"detailed explanations and may seem daunting, but it is not. On the wiki page "
"there are several examples including toolchain files. Go directly to `this "
"section <http://www.vtk.org/Wiki/"
"CMake_Cross_Compiling#Information_how_to_set_up_various_cross_compiling_toolchains>`_ "
"for a quick solution."
msgstr ""

#: ../../../CMake.rst:553
msgid ""
"Also see the `LLVM-specific variables`_ section for variables used when "
"cross-compiling."
msgstr ""

#: ../../../CMake.rst:557
msgid "Embedding LLVM in your project"
msgstr ""

#: ../../../CMake.rst:559
msgid ""
"From LLVM 3.5 onwards both the CMake and autoconf/Makefile build systems "
"export LLVM libraries as importable CMake targets. This means that clients "
"of LLVM can now reliably use CMake to develop their own LLVM-based projects "
"against an installed version of LLVM regardless of how it was built."
msgstr ""

#: ../../../CMake.rst:564
msgid ""
"Here is a simple example of a CMakeLists.txt file that imports the LLVM "
"libraries and uses them to build a simple application ``simple-tool``."
msgstr ""

#: ../../../CMake.rst:595
msgid ""
"The ``find_package(...)`` directive when used in CONFIG mode (as in the "
"above example) will look for the ``LLVMConfig.cmake`` file in various "
"locations (see cmake manual for details).  It creates a ``LLVM_DIR`` cache "
"entry to save the directory where ``LLVMConfig.cmake`` is found or allows "
"the user to specify the directory (e.g. by passing ``-DLLVM_DIR=/usr/lib/"
"cmake/llvm`` to the ``cmake`` command or by setting it directly in "
"``ccmake`` or ``cmake-gui``)."
msgstr ""

#: ../../../CMake.rst:602
msgid "This file is available in two different locations."
msgstr ""

#: ../../../CMake.rst:604
msgid ""
"``<INSTALL_PREFIX>/lib/cmake/llvm/LLVMConfig.cmake`` where "
"``<INSTALL_PREFIX>`` is the install prefix of an installed version of LLVM. "
"On Linux typically this is ``/usr/lib/cmake/llvm/LLVMConfig.cmake``."
msgstr ""

#: ../../../CMake.rst:608
msgid ""
"``<LLVM_BUILD_ROOT>/lib/cmake/llvm/LLVMConfig.cmake`` where "
"``<LLVM_BUILD_ROOT>`` is the root of the LLVM build tree. **Note: this is "
"only available when building LLVM with CMake.**"
msgstr ""

#: ../../../CMake.rst:612
msgid ""
"If LLVM is installed in your operating system's normal installation prefix "
"(e.g. on Linux this is usually ``/usr/``) ``find_package(LLVM ...)`` will "
"automatically find LLVM if it is installed correctly. If LLVM is not "
"installed or you wish to build directly against the LLVM build tree you can "
"use ``LLVM_DIR`` as previously mentioned."
msgstr ""

#: ../../../CMake.rst:618
msgid ""
"The ``LLVMConfig.cmake`` file sets various useful variables. Notable "
"variables include"
msgstr ""

#: ../../../CMake.rst:623
msgid "``LLVM_CMAKE_DIR``"
msgstr ""

#: ../../../CMake.rst:622
msgid ""
"The path to the LLVM CMake directory (i.e. the directory containing "
"LLVMConfig.cmake)."
msgstr ""

#: ../../../CMake.rst:626
msgid "``LLVM_DEFINITIONS``"
msgstr ""

#: ../../../CMake.rst:626
msgid ""
"A list of preprocessor defines that should be used when building against "
"LLVM."
msgstr ""

#: ../../../CMake.rst:629
msgid "``LLVM_ENABLE_ASSERTIONS``"
msgstr ""

#: ../../../CMake.rst:629
msgid "This is set to ON if LLVM was built with assertions, otherwise OFF."
msgstr ""

#: ../../../CMake.rst:633
msgid "``LLVM_ENABLE_EH``"
msgstr ""

#: ../../../CMake.rst:632
msgid ""
"This is set to ON if LLVM was built with exception handling (EH) enabled, "
"otherwise OFF."
msgstr ""

#: ../../../CMake.rst:637
msgid "``LLVM_ENABLE_RTTI``"
msgstr ""

#: ../../../CMake.rst:636
msgid ""
"This is set to ON if LLVM was built with run time type information (RTTI), "
"otherwise OFF."
msgstr ""

#: ../../../CMake.rst:640
msgid "``LLVM_INCLUDE_DIRS``"
msgstr ""

#: ../../../CMake.rst:640
msgid "A list of include paths to directories containing LLVM header files."
msgstr ""

#: ../../../CMake.rst:644
msgid "``LLVM_PACKAGE_VERSION``"
msgstr ""

#: ../../../CMake.rst:643
msgid ""
"The LLVM version. This string can be used with CMake conditionals, e.g., "
"``if (${LLVM_PACKAGE_VERSION} VERSION_LESS \"3.5\")``."
msgstr ""

#: ../../../CMake.rst:647
msgid "``LLVM_TOOLS_BINARY_DIR``"
msgstr ""

#: ../../../CMake.rst:647
msgid "The path to the directory containing the LLVM tools (e.g. ``llvm-as``)."
msgstr ""

#: ../../../CMake.rst:649
msgid ""
"Notice that in the above example we link ``simple-tool`` against several "
"LLVM libraries. The list of libraries is determined by using the "
"``llvm_map_components_to_libnames()`` CMake function. For a list of "
"available components look at the output of running ``llvm-config --"
"components``."
msgstr ""

#: ../../../CMake.rst:654
msgid ""
"Note that for LLVM < 3.5 ``llvm_map_components_to_libraries()`` was used "
"instead of ``llvm_map_components_to_libnames()``. This is now deprecated and "
"will be removed in a future version of LLVM."
msgstr ""

#: ../../../CMake.rst:661
msgid "Developing LLVM passes out of source"
msgstr ""

#: ../../../CMake.rst:663
msgid ""
"It is possible to develop LLVM passes out of LLVM's source tree (i.e. "
"against an installed or built LLVM). An example of a project layout is "
"provided below."
msgstr ""

#: ../../../CMake.rst:677
msgid "Contents of ``<project dir>/CMakeLists.txt``:"
msgstr ""

#: ../../../CMake.rst:688
msgid "Contents of ``<project dir>/<pass name>/CMakeLists.txt``:"
msgstr ""

#: ../../../CMake.rst:694
msgid ""
"Note if you intend for this pass to be merged into the LLVM source tree at "
"some point in the future it might make more sense to use LLVM's internal "
"``add_llvm_loadable_module`` function instead by..."
msgstr ""

#: ../../../CMake.rst:699
msgid ""
"Adding the following to ``<project dir>/CMakeLists.txt`` (after "
"``find_package(LLVM ...)``)"
msgstr ""

#: ../../../CMake.rst:707
msgid "And then changing ``<project dir>/<pass name>/CMakeLists.txt`` to"
msgstr ""

#: ../../../CMake.rst:715
msgid ""
"When you are done developing your pass, you may wish to integrate it into "
"the LLVM source tree. You can achieve it in two easy steps:"
msgstr ""

#: ../../../CMake.rst:718
msgid ""
"Copying ``<pass name>`` folder into ``<LLVM root>/lib/Transform`` directory."
msgstr ""

#: ../../../CMake.rst:720
msgid ""
"Adding ``add_subdirectory(<pass name>)`` line into ``<LLVM root>/lib/"
"Transform/CMakeLists.txt``."
msgstr ""

#: ../../../CMake.rst:724
msgid "Compiler/Platform-specific topics"
msgstr ""

#: ../../../CMake.rst:726
msgid "Notes for specific compilers and/or platforms."
msgstr ""

#: ../../../CMake.rst:729
msgid "Microsoft Visual C++"
msgstr ""

#: ../../../CMake.rst:733
msgid "**LLVM_COMPILER_JOBS**:STRING"
msgstr ""

#: ../../../CMake.rst:732
msgid ""
"Specifies the maximum number of parallel compiler jobs to use per project "
"when building with msbuild or Visual Studio. Only supported for the Visual "
"Studio 2010 CMake generator. 0 means use all processors. Default is 0."
msgstr ""
