# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../BitCodeFormat.rst:6
msgid "LLVM Bitcode File Format"
msgstr ""

#: ../../../BitCodeFormat.rst:12
msgid "Abstract"
msgstr ""

#: ../../../BitCodeFormat.rst:14
msgid ""
"This document describes the LLVM bitstream file format and the encoding of "
"the LLVM IR into it."
msgstr ""

#: ../../../BitCodeFormat.rst:18
msgid "Overview"
msgstr ""

#: ../../../BitCodeFormat.rst:20
msgid ""
"What is commonly known as the LLVM bitcode file format (also, sometimes "
"anachronistically known as bytecode) is actually two things: a `bitstream "
"container format`_ and an `encoding of LLVM IR`_ into the container format."
msgstr ""

#: ../../../BitCodeFormat.rst:24
msgid ""
"The bitstream format is an abstract encoding of structured data, very "
"similar to XML in some ways.  Like XML, bitstream files contain tags, and "
"nested structures, and you can parse the file without having to understand "
"the tags. Unlike XML, the bitstream format is a binary encoding, and unlike "
"XML it provides a mechanism for the file to self-describe \"abbreviations\", "
"which are effectively size optimizations for the content."
msgstr ""

#: ../../../BitCodeFormat.rst:31
msgid ""
"LLVM IR files may be optionally embedded into a `wrapper`_ structure, or in "
"a `native object file`_. Both of these mechanisms make it easy to embed "
"extra data along with LLVM IR files."
msgstr ""

#: ../../../BitCodeFormat.rst:35
msgid ""
"This document first describes the LLVM bitstream format, describes the "
"wrapper format, then describes the record structure used by LLVM IR files."
msgstr ""

#: ../../../BitCodeFormat.rst:41
msgid "Bitstream Format"
msgstr ""

#: ../../../BitCodeFormat.rst:43
msgid ""
"The bitstream format is literally a stream of bits, with a very simple "
"structure.  This structure consists of the following concepts:"
msgstr ""

#: ../../../BitCodeFormat.rst:46
msgid "A \"`magic number`_\" that identifies the contents of the stream."
msgstr ""

#: ../../../BitCodeFormat.rst:48
msgid "Encoding `primitives`_ like variable bit-rate integers."
msgstr ""

#: ../../../BitCodeFormat.rst:50
msgid "`Blocks`_, which define nested content."
msgstr ""

#: ../../../BitCodeFormat.rst:52
msgid "`Data Records`_, which describe entities within the file."
msgstr ""

#: ../../../BitCodeFormat.rst:54
msgid "Abbreviations, which specify compression optimizations for the file."
msgstr ""

#: ../../../BitCodeFormat.rst:56
msgid ""
"Note that the :doc:`llvm-bcanalyzer <CommandGuide/llvm-bcanalyzer>` tool can "
"be used to dump and inspect arbitrary bitstreams, which is very useful for "
"understanding the encoding."
msgstr ""

#: ../../../BitCodeFormat.rst:63
msgid "Magic Numbers"
msgstr ""

#: ../../../BitCodeFormat.rst:65
msgid ""
"The first two bytes of a bitcode file are 'BC' (``0x42``, ``0x43``).  The "
"second two bytes are an application-specific magic number.  Generic bitcode "
"tools can look at only the first two bytes to verify the file is bitcode, "
"while application-specific programs will want to look at all four."
msgstr ""

#: ../../../BitCodeFormat.rst:73
msgid "Primitives"
msgstr ""

#: ../../../BitCodeFormat.rst:75
msgid ""
"A bitstream literally consists of a stream of bits, which are read in order "
"starting with the least significant bit of each byte.  The stream is made up "
"of a number of primitive values that encode a stream of unsigned integer "
"values. These integers are encoded in two ways: either as `Fixed Width "
"Integers`_ or as `Variable Width Integers`_."
msgstr ""

#: ../../../BitCodeFormat.rst:85
msgid "Fixed Width Integers"
msgstr ""

#: ../../../BitCodeFormat.rst:87
msgid ""
"Fixed-width integer values have their low bits emitted directly to the file. "
"For example, a 3-bit integer value encodes 1 as 001.  Fixed width integers "
"are used when there are a well-known number of options for a field.  For "
"example, boolean values are usually encoded with a 1-bit wide integer."
msgstr ""

#: ../../../BitCodeFormat.rst:97
msgid "Variable Width Integers"
msgstr ""

#: ../../../BitCodeFormat.rst:99
msgid ""
"Variable-width integer (VBR) values encode values of arbitrary size, "
"optimizing for the case where the values are small.  Given a 4-bit VBR "
"field, any 3-bit value (0 through 7) is encoded directly, with the high bit "
"set to zero.  Values larger than N-1 bits emit their bits in a series of N-1 "
"bit chunks, where all but the last set the high bit."
msgstr ""

#: ../../../BitCodeFormat.rst:105
msgid ""
"For example, the value 27 (0x1B) is encoded as 1011 0011 when emitted as a "
"vbr4 value.  The first set of four bits indicates the value 3 (011) with a "
"continuation piece (indicated by a high bit of 1).  The next word indicates "
"a value of 24 (011 << 3) with no continuation.  The sum (3+24) yields the "
"value 27."
msgstr ""

#: ../../../BitCodeFormat.rst:114
msgid "6-bit characters"
msgstr ""

#: ../../../BitCodeFormat.rst:116
msgid ""
"6-bit characters encode common characters into a fixed 6-bit field.  They "
"represent the following characters with the following 6-bit values:"
msgstr ""

#: ../../../BitCodeFormat.rst:127
msgid ""
"This encoding is only suitable for encoding characters and strings that "
"consist only of the above characters.  It is completely incapable of "
"encoding characters not in the set."
msgstr ""

#: ../../../BitCodeFormat.rst:132
msgid "Word Alignment"
msgstr ""

#: ../../../BitCodeFormat.rst:134
msgid ""
"Occasionally, it is useful to emit zero bits until the bitstream is a "
"multiple of 32 bits.  This ensures that the bit position in the stream can "
"be represented as a multiple of 32-bit words."
msgstr ""

#: ../../../BitCodeFormat.rst:139
msgid "Abbreviation IDs"
msgstr ""

#: ../../../BitCodeFormat.rst:141
msgid ""
"A bitstream is a sequential series of `Blocks`_ and `Data Records`_.  Both "
"of these start with an abbreviation ID encoded as a fixed-bitwidth field.  "
"The width is specified by the current block, as described below.  The value "
"of the abbreviation ID specifies either a builtin ID (which have special "
"meanings, defined below) or one of the abbreviation IDs defined for the "
"current block by the stream itself."
msgstr ""

#: ../../../BitCodeFormat.rst:148
msgid "The set of builtin abbrev IDs is:"
msgstr ""

#: ../../../BitCodeFormat.rst:150
msgid "0 - `END_BLOCK`_ --- This abbrev ID marks the end of the current block."
msgstr ""

#: ../../../BitCodeFormat.rst:152
msgid ""
"1 - `ENTER_SUBBLOCK`_ --- This abbrev ID marks the beginning of a new block."
msgstr ""

#: ../../../BitCodeFormat.rst:155
msgid "2 - `DEFINE_ABBREV`_ --- This defines a new abbreviation."
msgstr ""

#: ../../../BitCodeFormat.rst:157
msgid ""
"3 - `UNABBREV_RECORD`_ --- This ID specifies the definition of an "
"unabbreviated record."
msgstr ""

#: ../../../BitCodeFormat.rst:160
msgid ""
"Abbreviation IDs 4 and above are defined by the stream itself, and specify "
"an `abbreviated record encoding`_."
msgstr ""

#: ../../../BitCodeFormat.rst:166
msgid "Blocks"
msgstr ""

#: ../../../BitCodeFormat.rst:168
msgid ""
"Blocks in a bitstream denote nested regions of the stream, and are "
"identified by a content-specific id number (for example, LLVM IR uses an ID "
"of 12 to represent function bodies).  Block IDs 0-7 are reserved for "
"`standard blocks`_ whose meaning is defined by Bitcode; block IDs 8 and "
"greater are application specific. Nested blocks capture the hierarchical "
"structure of the data encoded in it, and various properties are associated "
"with blocks as the file is parsed. Block definitions allow the reader to "
"efficiently skip blocks in constant time if the reader wants a summary of "
"blocks, or if it wants to efficiently skip data it does not understand.  The "
"LLVM IR reader uses this mechanism to skip function bodies, lazily reading "
"them on demand."
msgstr ""

#: ../../../BitCodeFormat.rst:179
msgid ""
"When reading and encoding the stream, several properties are maintained for "
"the block.  In particular, each block maintains:"
msgstr ""

#: ../../../BitCodeFormat.rst:182
msgid ""
"A current abbrev id width.  This value starts at 2 at the beginning of the "
"stream, and is set every time a block record is entered.  The block entry "
"specifies the abbrev id width for the body of the block."
msgstr ""

#: ../../../BitCodeFormat.rst:186
msgid ""
"A set of abbreviations.  Abbreviations may be defined within a block, in "
"which case they are only defined in that block (neither subblocks nor "
"enclosing blocks see the abbreviation).  Abbreviations can also be defined "
"inside a `BLOCKINFO`_ block, in which case they are defined in all blocks "
"that match the ID that the ``BLOCKINFO`` block is describing."
msgstr ""

#: ../../../BitCodeFormat.rst:192
msgid ""
"As sub blocks are entered, these properties are saved and the new sub-block "
"has its own set of abbreviations, and its own abbrev id width.  When a sub-"
"block is popped, the saved values are restored."
msgstr ""

#: ../../../BitCodeFormat.rst:199
msgid "ENTER_SUBBLOCK Encoding"
msgstr ""

#: ../../../BitCodeFormat.rst:201
msgid ""
":raw-html:`<tt>` [ENTER_SUBBLOCK, blockid\\ :sub:`vbr8`, newabbrevlen\\ :sub:"
"`vbr4`, <align32bits>, blocklen_32] :raw-html:`</tt>`"
msgstr ""

#: ../../../BitCodeFormat.rst:201 ../../../BitCodeFormat.rst:242
#: ../../../BitCodeFormat.rst:299 ../../../BitCodeFormat.rst:318
#: ../../../BitCodeFormat.rst:323 ../../../BitCodeFormat.rst:327
msgid ":raw-html:`<tt>`"
msgstr ""

#: ../../../BitCodeFormat.rst:201 ../../../BitCodeFormat.rst:242
#: ../../../BitCodeFormat.rst:299 ../../../BitCodeFormat.rst:318
#: ../../../BitCodeFormat.rst:323 ../../../BitCodeFormat.rst:327
msgid ":raw-html:`</tt>`"
msgstr ""

#: ../../../BitCodeFormat.rst:205
msgid ""
"The ``ENTER_SUBBLOCK`` abbreviation ID specifies the start of a new block "
"record.  The ``blockid`` value is encoded as an 8-bit VBR identifier, and "
"indicates the type of block being entered, which can be a `standard block`_ "
"or an application-specific block.  The ``newabbrevlen`` value is a 4-bit "
"VBR, which specifies the abbrev id width for the sub-block.  The "
"``blocklen`` value is a 32-bit aligned value that specifies the size of the "
"subblock in 32-bit words. This value allows the reader to skip over the "
"entire block in one jump."
msgstr ""

#: ../../../BitCodeFormat.rst:216
msgid "END_BLOCK Encoding"
msgstr ""

#: ../../../BitCodeFormat.rst:218
msgid "``[END_BLOCK, <align32bits>]``"
msgstr ""

#: ../../../BitCodeFormat.rst:220
msgid ""
"The ``END_BLOCK`` abbreviation ID specifies the end of the current block "
"record. Its end is aligned to 32-bits to ensure that the size of the block "
"is an even multiple of 32-bits."
msgstr ""

#: ../../../BitCodeFormat.rst:227
msgid "Data Records"
msgstr ""

#: ../../../BitCodeFormat.rst:229
msgid ""
"Data records consist of a record code and a number of (up to) 64-bit integer "
"values.  The interpretation of the code and values is application specific "
"and may vary between different block types.  Records can be encoded either "
"using an unabbrev record, or with an abbreviation.  In the LLVM IR format, "
"for example, there is a record which encodes the target triple of a module.  "
"The code is ``MODULE_CODE_TRIPLE``, and the values of the record are the "
"ASCII codes for the characters in the string."
msgstr ""

#: ../../../BitCodeFormat.rst:240
msgid "UNABBREV_RECORD Encoding"
msgstr ""

#: ../../../BitCodeFormat.rst:242
msgid ""
":raw-html:`<tt>` [UNABBREV_RECORD, code\\ :sub:`vbr6`, numops\\ :sub:`vbr6`, "
"op0\\ :sub:`vbr6`, op1\\ :sub:`vbr6`, ...] :raw-html:`</tt>`"
msgstr ""

#: ../../../BitCodeFormat.rst:246
msgid ""
"An ``UNABBREV_RECORD`` provides a default fallback encoding, which is both "
"completely general and extremely inefficient.  It can describe an arbitrary "
"record by emitting the code and operands as VBRs."
msgstr ""

#: ../../../BitCodeFormat.rst:250
msgid ""
"For example, emitting an LLVM IR target triple as an unabbreviated record "
"requires emitting the ``UNABBREV_RECORD`` abbrevid, a vbr6 for the "
"``MODULE_CODE_TRIPLE`` code, a vbr6 for the length of the string, which is "
"equal to the number of operands, and a vbr6 for each character.  Because "
"there are no letters with values less than 32, each letter would need to be "
"emitted as at least a two-part VBR, which means that each letter would "
"require at least 12 bits.  This is not an efficient encoding, but it is "
"fully general."
msgstr ""

#: ../../../BitCodeFormat.rst:261
msgid "Abbreviated Record Encoding"
msgstr ""

#: ../../../BitCodeFormat.rst:263
msgid "``[<abbrevid>, fields...]``"
msgstr ""

#: ../../../BitCodeFormat.rst:265
msgid ""
"An abbreviated record is a abbreviation id followed by a set of fields that "
"are encoded according to the `abbreviation definition`_.  This allows "
"records to be encoded significantly more densely than records encoded with "
"the `UNABBREV_RECORD`_ type, and allows the abbreviation types to be "
"specified in the stream itself, which allows the files to be completely self "
"describing.  The actual encoding of abbreviations is defined below."
msgstr ""

#: ../../../BitCodeFormat.rst:272
msgid ""
"The record code, which is the first field of an abbreviated record, may be "
"encoded in the abbreviation definition (as a literal operand) or supplied in "
"the abbreviated record (as a Fixed or VBR operand value)."
msgstr ""

#: ../../../BitCodeFormat.rst:279
msgid "Abbreviations"
msgstr ""

#: ../../../BitCodeFormat.rst:281
msgid ""
"Abbreviations are an important form of compression for bitstreams.  The idea "
"is to specify a dense encoding for a class of records once, then use that "
"encoding to emit many records.  It takes space to emit the encoding into the "
"file, but the space is recouped (hopefully plus some) when the records that "
"use it are emitted."
msgstr ""

#: ../../../BitCodeFormat.rst:287
msgid ""
"Abbreviations can be determined dynamically per client, per file. Because "
"the abbreviations are stored in the bitstream itself, different streams of "
"the same format can contain different sets of abbreviations according to the "
"needs of the specific stream.  As a concrete example, LLVM IR files usually "
"emit an abbreviation for binary operators.  If a specific LLVM module "
"contained no or few binary operators, the abbreviation does not need to be "
"emitted."
msgstr ""

#: ../../../BitCodeFormat.rst:297
msgid "DEFINE_ABBREV Encoding"
msgstr ""

#: ../../../BitCodeFormat.rst:299
msgid ""
":raw-html:`<tt>` [DEFINE_ABBREV, numabbrevops\\ :sub:`vbr5`, abbrevop0, "
"abbrevop1, ...] :raw-html:`</tt>`"
msgstr ""

#: ../../../BitCodeFormat.rst:303
msgid ""
"A ``DEFINE_ABBREV`` record adds an abbreviation to the list of currently "
"defined abbreviations in the scope of this block.  This definition only "
"exists inside this immediate block --- it is not visible in subblocks or "
"enclosing blocks. Abbreviations are implicitly assigned IDs sequentially "
"starting from 4 (the first application-defined abbreviation ID).  Any "
"abbreviations defined in a ``BLOCKINFO`` record for the particular block "
"type receive IDs first, in order, followed by any abbreviations defined "
"within the block itself.  Abbreviated data records reference this ID to "
"indicate what abbreviation they are invoking."
msgstr ""

#: ../../../BitCodeFormat.rst:312
msgid ""
"An abbreviation definition consists of the ``DEFINE_ABBREV`` abbrevid "
"followed by a VBR that specifies the number of abbrev operands, then the "
"abbrev operands themselves.  Abbreviation operands come in three forms.  "
"They all start with a single bit that indicates whether the abbrev operand "
"is a literal operand (when the bit is 1) or an encoding operand (when the "
"bit is 0)."
msgstr ""

#: ../../../BitCodeFormat.rst:318
msgid ""
"Literal operands --- :raw-html:`<tt>` [1\\ :sub:`1`, litvalue\\ :sub:"
"`vbr8`] :raw-html:`</tt>` --- Literal operands specify that the value in the "
"result is always a single specific value.  This specific value is emitted as "
"a vbr8 after the bit indicating that it is a literal operand."
msgstr ""

#: ../../../BitCodeFormat.rst:323
msgid ""
"Encoding info without data --- :raw-html:`<tt>` [0\\ :sub:`1`, encoding\\ :"
"sub:`3`] :raw-html:`</tt>` --- Operand encodings that do not have extra data "
"are just emitted as their code."
msgstr ""

#: ../../../BitCodeFormat.rst:327
msgid ""
"Encoding info with data --- :raw-html:`<tt>` [0\\ :sub:`1`, encoding\\ :sub:"
"`3`, value\\ :sub:`vbr5`] :raw-html:`</tt>` --- Operand encodings that do "
"have extra data are emitted as their code, followed by the extra data."
msgstr ""

#: ../../../BitCodeFormat.rst:331
msgid "The possible operand encodings are:"
msgstr ""

#: ../../../BitCodeFormat.rst:333
msgid ""
"Fixed (code 1): The field should be emitted as a `fixed-width value`_, whose "
"width is specified by the operand's extra data."
msgstr ""

#: ../../../BitCodeFormat.rst:336
msgid ""
"VBR (code 2): The field should be emitted as a `variable-width value`_, "
"whose width is specified by the operand's extra data."
msgstr ""

#: ../../../BitCodeFormat.rst:339
msgid ""
"Array (code 3): This field is an array of values.  The array operand has no "
"extra data, but expects another operand to follow it, indicating the element "
"type of the array.  When reading an array in an abbreviated record, the "
"first integer is a vbr6 that indicates the array length, followed by the "
"encoded elements of the array.  An array may only occur as the last operand "
"of an abbreviation (except for the one final operand that gives the array's "
"type)."
msgstr ""

#: ../../../BitCodeFormat.rst:347
msgid ""
"Char6 (code 4): This field should be emitted as a `char6-encoded value`_. "
"This operand type takes no extra data. Char6 encoding is normally used as an "
"array element type."
msgstr ""

#: ../../../BitCodeFormat.rst:351
msgid ""
"Blob (code 5): This field is emitted as a vbr6, followed by padding to a 32-"
"bit boundary (for alignment) and an array of 8-bit objects.  The array of "
"bytes is further followed by tail padding to ensure that its total length is "
"a multiple of 4 bytes.  This makes it very efficient for the reader to "
"decode the data without having to make a copy of it: it can use a pointer to "
"the data in the mapped in file and poke directly at it.  A blob may only "
"occur as the last operand of an abbreviation."
msgstr ""

#: ../../../BitCodeFormat.rst:359
msgid ""
"For example, target triples in LLVM modules are encoded as a record of the "
"form ``[TRIPLE, 'a', 'b', 'c', 'd']``.  Consider if the bitstream emitted "
"the following abbrev entry:"
msgstr ""

#: ../../../BitCodeFormat.rst:369
msgid ""
"When emitting a record with this abbreviation, the above entry would be "
"emitted as:"
msgstr ""

#: ../../../BitCodeFormat.rst:372
msgid ""
":raw-html:`<tt><blockquote>` [4\\ :sub:`abbrevwidth`, 2\\ :sub:`4`, 4\\ :sub:"
"`vbr6`, 0\\ :sub:`6`, 1\\ :sub:`6`, 2\\ :sub:`6`, 3\\ :sub:`6`] :raw-html:`</"
"blockquote></tt>`"
msgstr ""

#: ../../../BitCodeFormat.rst:372 ../../../BitCodeFormat.rst:453
#: ../../../BitCodeFormat.rst:498
msgid ":raw-html:`<tt><blockquote>`"
msgstr ""

#: ../../../BitCodeFormat.rst:372 ../../../BitCodeFormat.rst:453
#: ../../../BitCodeFormat.rst:498
msgid ":raw-html:`</blockquote></tt>`"
msgstr ""

#: ../../../BitCodeFormat.rst:376
msgid "These values are:"
msgstr ""

#: ../../../BitCodeFormat.rst:378
msgid "The first value, 4, is the abbreviation ID for this abbreviation."
msgstr ""

#: ../../../BitCodeFormat.rst:380
msgid ""
"The second value, 2, is the record code for ``TRIPLE`` records within LLVM "
"IR file ``MODULE_BLOCK`` blocks."
msgstr ""

#: ../../../BitCodeFormat.rst:383
msgid "The third value, 4, is the length of the array."
msgstr ""

#: ../../../BitCodeFormat.rst:385
msgid "The rest of the values are the char6 encoded values for ``\"abcd\"``."
msgstr ""

#: ../../../BitCodeFormat.rst:387
msgid ""
"With this abbreviation, the triple is emitted with only 37 bits (assuming a "
"abbrev id width of 3).  Without the abbreviation, significantly more space "
"would be required to emit the target triple.  Also, because the ``TRIPLE`` "
"value is not emitted as a literal in the abbreviation, the abbreviation can "
"also be used for any other string value."
msgstr ""

#: ../../../BitCodeFormat.rst:397
msgid "Standard Blocks"
msgstr ""

#: ../../../BitCodeFormat.rst:399
msgid ""
"In addition to the basic block structure and record encodings, the bitstream "
"also defines specific built-in block types.  These block types specify how "
"the stream is to be decoded or other metadata.  In the future, new standard "
"blocks may be added.  Block IDs 0-7 are reserved for standard blocks."
msgstr ""

#: ../../../BitCodeFormat.rst:407
msgid "#0 - BLOCKINFO Block"
msgstr ""

#: ../../../BitCodeFormat.rst:409
msgid ""
"The ``BLOCKINFO`` block allows the description of metadata for other blocks. "
"The currently specified records are:"
msgstr ""

#: ../../../BitCodeFormat.rst:419
msgid ""
"The ``SETBID`` record (code 1) indicates which block ID is being described. "
"``SETBID`` records can occur multiple times throughout the block to change "
"which block ID is being described.  There must be a ``SETBID`` record prior "
"to any other records."
msgstr ""

#: ../../../BitCodeFormat.rst:424
msgid ""
"Standard ``DEFINE_ABBREV`` records can occur inside ``BLOCKINFO`` blocks, "
"but unlike their occurrence in normal blocks, the abbreviation is defined "
"for blocks matching the block ID we are describing, *not* the ``BLOCKINFO`` "
"block itself.  The abbreviations defined in ``BLOCKINFO`` blocks receive "
"abbreviation IDs as described in `DEFINE_ABBREV`_."
msgstr ""

#: ../../../BitCodeFormat.rst:430
msgid ""
"The ``BLOCKNAME`` record (code 2) can optionally occur in this block.  The "
"elements of the record are the bytes of the string name of the block. llvm-"
"bcanalyzer can use this to dump out bitcode files symbolically."
msgstr ""

#: ../../../BitCodeFormat.rst:434
msgid ""
"The ``SETRECORDNAME`` record (code 3) can also optionally occur in this "
"block. The first operand value is a record ID number, and the rest of the "
"elements of the record are the bytes for the string name of the record.  "
"llvm-bcanalyzer can use this to dump out bitcode files symbolically."
msgstr ""

#: ../../../BitCodeFormat.rst:439
msgid ""
"Note that although the data in ``BLOCKINFO`` blocks is described as "
"\"metadata,\" the abbreviations they contain are essential for parsing "
"records from the corresponding blocks.  It is not safe to skip them."
msgstr ""

#: ../../../BitCodeFormat.rst:446
msgid "Bitcode Wrapper Format"
msgstr ""

#: ../../../BitCodeFormat.rst:448
msgid ""
"Bitcode files for LLVM IR may optionally be wrapped in a simple wrapper "
"structure.  This structure contains a simple header that indicates the "
"offset and size of the embedded BC file.  This allows additional information "
"to be stored alongside the BC file.  The structure of this file header is:"
msgstr ""

#: ../../../BitCodeFormat.rst:453
msgid ""
":raw-html:`<tt><blockquote>` [Magic\\ :sub:`32`, Version\\ :sub:`32`, "
"Offset\\ :sub:`32`, Size\\ :sub:`32`, CPUType\\ :sub:`32`] :raw-html:`</"
"blockquote></tt>`"
msgstr ""

#: ../../../BitCodeFormat.rst:457
msgid ""
"Each of the fields are 32-bit fields stored in little endian form (as with "
"the rest of the bitcode file fields).  The Magic number is always "
"``0x0B17C0DE`` and the version is currently always ``0``.  The Offset field "
"is the offset in bytes to the start of the bitcode stream in the file, and "
"the Size field is the size in bytes of the stream. CPUType is a target-"
"specific value that can be used to encode the CPU of the target."
msgstr ""

#: ../../../BitCodeFormat.rst:467
msgid "Native Object File Wrapper Format"
msgstr ""

#: ../../../BitCodeFormat.rst:469
msgid ""
"Bitcode files for LLVM IR may also be wrapped in a native object file (i.e. "
"ELF, COFF, Mach-O).  The bitcode must be stored in a section of the object "
"file named ``__LLVM,__bitcode`` for MachO and ``.llvmbc`` for the other "
"object formats.  This wrapper format is useful for accommodating LTO in "
"compilation pipelines where intermediate objects must be native object files "
"which contain metadata in other sections."
msgstr ""

#: ../../../BitCodeFormat.rst:476
msgid "Not all tools support this format."
msgstr ""

#: ../../../BitCodeFormat.rst:481
msgid "LLVM IR Encoding"
msgstr ""

#: ../../../BitCodeFormat.rst:483
msgid ""
"LLVM IR is encoded into a bitstream by defining blocks and records.  It uses "
"blocks for things like constant pools, functions, symbol tables, etc.  It "
"uses records for things like instructions, global variable descriptors, type "
"descriptions, etc.  This document does not describe the set of abbreviations "
"that the writer uses, as these are fully self-described in the file, and the "
"reader is not allowed to build in any knowledge of this."
msgstr ""

#: ../../../BitCodeFormat.rst:491
msgid "Basics"
msgstr ""

#: ../../../BitCodeFormat.rst:494
msgid "LLVM IR Magic Number"
msgstr ""

#: ../../../BitCodeFormat.rst:496
msgid "The magic number for LLVM IR files is:"
msgstr ""

#: ../../../BitCodeFormat.rst:498
msgid ""
":raw-html:`<tt><blockquote>` [0x0\\ :sub:`4`, 0xC\\ :sub:`4`, 0xE\\ :sub:"
"`4`, 0xD\\ :sub:`4`] :raw-html:`</blockquote></tt>`"
msgstr ""

#: ../../../BitCodeFormat.rst:502
msgid ""
"When combined with the bitcode magic number and viewed as bytes, this is "
"``\"BC 0xC0DE\"``."
msgstr ""

#: ../../../BitCodeFormat.rst:508
msgid "Signed VBRs"
msgstr ""

#: ../../../BitCodeFormat.rst:510
msgid ""
"`Variable Width Integer`_ encoding is an efficient way to encode arbitrary "
"sized unsigned values, but is an extremely inefficient for encoding signed "
"values, as signed values are otherwise treated as maximally large unsigned "
"values."
msgstr ""

#: ../../../BitCodeFormat.rst:514
msgid "As such, signed VBR values of a specific width are emitted as follows:"
msgstr ""

#: ../../../BitCodeFormat.rst:516
msgid ""
"Positive values are emitted as VBRs of the specified width, but with their "
"value shifted left by one."
msgstr ""

#: ../../../BitCodeFormat.rst:519
msgid ""
"Negative values are emitted as VBRs of the specified width, but the negated "
"value is shifted left by one, and the low bit is set."
msgstr ""

#: ../../../BitCodeFormat.rst:522
msgid ""
"With this encoding, small positive and small negative values can both be "
"emitted efficiently. Signed VBR encoding is used in ``CST_CODE_INTEGER`` and "
"``CST_CODE_WIDE_INTEGER`` records within ``CONSTANTS_BLOCK`` blocks. It is "
"also used for phi instruction operands in `MODULE_CODE_VERSION`_ 1."
msgstr ""

#: ../../../BitCodeFormat.rst:528
msgid "LLVM IR Blocks"
msgstr ""

#: ../../../BitCodeFormat.rst:530
msgid "LLVM IR is defined with the following blocks:"
msgstr ""

#: ../../../BitCodeFormat.rst:532
msgid ""
"8 --- `MODULE_BLOCK`_ --- This is the top-level block that contains the "
"entire module, and describes a variety of per-module information."
msgstr ""

#: ../../../BitCodeFormat.rst:535
msgid "9 --- `PARAMATTR_BLOCK`_ --- This enumerates the parameter attributes."
msgstr ""

#: ../../../BitCodeFormat.rst:537
msgid "10 --- `TYPE_BLOCK`_ --- This describes all of the types in the module."
msgstr ""

#: ../../../BitCodeFormat.rst:539
msgid ""
"11 --- `CONSTANTS_BLOCK`_ --- This describes constants for a module or "
"function."
msgstr ""

#: ../../../BitCodeFormat.rst:542
msgid "12 --- `FUNCTION_BLOCK`_ --- This describes a function body."
msgstr ""

#: ../../../BitCodeFormat.rst:544
msgid "13 --- `TYPE_SYMTAB_BLOCK`_ --- This describes the type symbol table."
msgstr ""

#: ../../../BitCodeFormat.rst:546
msgid "14 --- `VALUE_SYMTAB_BLOCK`_ --- This describes a value symbol table."
msgstr ""

#: ../../../BitCodeFormat.rst:548
msgid "15 --- `METADATA_BLOCK`_ --- This describes metadata items."
msgstr ""

#: ../../../BitCodeFormat.rst:550
msgid ""
"16 --- `METADATA_ATTACHMENT`_ --- This contains records associating metadata "
"with function instruction values."
msgstr ""

#: ../../../BitCodeFormat.rst:556
msgid "MODULE_BLOCK Contents"
msgstr ""

#: ../../../BitCodeFormat.rst:558
msgid ""
"The ``MODULE_BLOCK`` block (id 8) is the top-level block for LLVM bitcode "
"files, and each bitcode file must contain exactly one. In addition to "
"records (described below) containing information about the module, a "
"``MODULE_BLOCK`` block may contain the following sub-blocks:"
msgstr ""

#: ../../../BitCodeFormat.rst:563
msgid "`BLOCKINFO`_"
msgstr ""

#: ../../../BitCodeFormat.rst:564
msgid "`PARAMATTR_BLOCK`_"
msgstr ""

#: ../../../BitCodeFormat.rst:565
msgid "`TYPE_BLOCK`_"
msgstr ""

#: ../../../BitCodeFormat.rst:566
msgid "`TYPE_SYMTAB_BLOCK`_"
msgstr ""

#: ../../../BitCodeFormat.rst:567 ../../../BitCodeFormat.rst:1114
msgid "`VALUE_SYMTAB_BLOCK`_"
msgstr ""

#: ../../../BitCodeFormat.rst:568 ../../../BitCodeFormat.rst:1113
msgid "`CONSTANTS_BLOCK`_"
msgstr ""

#: ../../../BitCodeFormat.rst:569
msgid "`FUNCTION_BLOCK`_"
msgstr ""

#: ../../../BitCodeFormat.rst:570
msgid "`METADATA_BLOCK`_"
msgstr ""

#: ../../../BitCodeFormat.rst:575
msgid "MODULE_CODE_VERSION Record"
msgstr ""

#: ../../../BitCodeFormat.rst:577
msgid "``[VERSION, version#]``"
msgstr ""

#: ../../../BitCodeFormat.rst:579
msgid ""
"The ``VERSION`` record (code 1) contains a single value indicating the "
"format version. Versions 0 and 1 are supported at this time. The difference "
"between version 0 and 1 is in the encoding of instruction operands in each "
"`FUNCTION_BLOCK`_."
msgstr ""

#: ../../../BitCodeFormat.rst:584
msgid ""
"In version 0, each value defined by an instruction is assigned an ID unique "
"to the function. Function-level value IDs are assigned starting from "
"``NumModuleValues`` since they share the same namespace as module-level "
"values. The value enumerator resets after each function. When a value is an "
"operand of an instruction, the value ID is used to represent the operand. "
"For large functions or large modules, these operand values can be large."
msgstr ""

#: ../../../BitCodeFormat.rst:591
msgid ""
"The encoding in version 1 attempts to avoid large operand values in common "
"cases. Instead of using the value ID directly, operands are encoded as "
"relative to the current instruction. Thus, if an operand is the value "
"defined by the previous instruction, the operand will be encoded as 1."
msgstr ""

#: ../../../BitCodeFormat.rst:597
msgid "For example, instead of"
msgstr ""

#: ../../../BitCodeFormat.rst:605
msgid "version 1 will encode the instructions as"
msgstr ""

#: ../../../BitCodeFormat.rst:613
msgid ""
"Note in the example that operands which are constants also use the relative "
"encoding, while operands like basic block labels do not use the relative "
"encoding."
msgstr ""

#: ../../../BitCodeFormat.rst:617
msgid ""
"Forward references will result in a negative value. This can be inefficient, "
"as operands are normally encoded as unsigned VBRs. However, forward "
"references are rare, except in the case of phi instructions. For phi "
"instructions, operands are encoded as `Signed VBRs`_ to deal with forward "
"references."
msgstr ""

#: ../../../BitCodeFormat.rst:625
msgid "MODULE_CODE_TRIPLE Record"
msgstr ""

#: ../../../BitCodeFormat.rst:627
msgid "``[TRIPLE, ...string...]``"
msgstr ""

#: ../../../BitCodeFormat.rst:629
msgid ""
"The ``TRIPLE`` record (code 2) contains a variable number of values "
"representing the bytes of the ``target triple`` specification string."
msgstr ""

#: ../../../BitCodeFormat.rst:633
msgid "MODULE_CODE_DATALAYOUT Record"
msgstr ""

#: ../../../BitCodeFormat.rst:635
msgid "``[DATALAYOUT, ...string...]``"
msgstr ""

#: ../../../BitCodeFormat.rst:637
msgid ""
"The ``DATALAYOUT`` record (code 3) contains a variable number of values "
"representing the bytes of the ``target datalayout`` specification string."
msgstr ""

#: ../../../BitCodeFormat.rst:641
msgid "MODULE_CODE_ASM Record"
msgstr ""

#: ../../../BitCodeFormat.rst:643
msgid "``[ASM, ...string...]``"
msgstr ""

#: ../../../BitCodeFormat.rst:645
msgid ""
"The ``ASM`` record (code 4) contains a variable number of values "
"representing the bytes of ``module asm`` strings, with individual assembly "
"blocks separated by newline (ASCII 10) characters."
msgstr ""

#: ../../../BitCodeFormat.rst:652
msgid "MODULE_CODE_SECTIONNAME Record"
msgstr ""

#: ../../../BitCodeFormat.rst:654
msgid "``[SECTIONNAME, ...string...]``"
msgstr ""

#: ../../../BitCodeFormat.rst:656
msgid ""
"The ``SECTIONNAME`` record (code 5) contains a variable number of values "
"representing the bytes of a single section name string. There should be one "
"``SECTIONNAME`` record for each section name referenced (e.g., in global "
"variable or function ``section`` attributes) within the module. These "
"records can be referenced by the 1-based index in the *section* fields of "
"``GLOBALVAR`` or ``FUNCTION`` records."
msgstr ""

#: ../../../BitCodeFormat.rst:664
msgid "MODULE_CODE_DEPLIB Record"
msgstr ""

#: ../../../BitCodeFormat.rst:666
msgid "``[DEPLIB, ...string...]``"
msgstr ""

#: ../../../BitCodeFormat.rst:668
msgid ""
"The ``DEPLIB`` record (code 6) contains a variable number of values "
"representing the bytes of a single dependent library name string, one of the "
"libraries mentioned in a ``deplibs`` declaration.  There should be one "
"``DEPLIB`` record for each library name referenced."
msgstr ""

#: ../../../BitCodeFormat.rst:674
msgid "MODULE_CODE_GLOBALVAR Record"
msgstr ""

#: ../../../BitCodeFormat.rst:676
msgid ""
"``[GLOBALVAR, pointer type, isconst, initid, linkage, alignment, section, "
"visibility, threadlocal, unnamed_addr, externally_initialized, "
"dllstorageclass, comdat]``"
msgstr ""

#: ../../../BitCodeFormat.rst:678
msgid ""
"The ``GLOBALVAR`` record (code 7) marks the declaration or definition of a "
"global variable. The operand fields are:"
msgstr ""

#: ../../../BitCodeFormat.rst:681
msgid ""
"*pointer type*: The type index of the pointer type used to point to this "
"global variable"
msgstr ""

#: ../../../BitCodeFormat.rst:684
msgid ""
"*isconst*: Non-zero if the variable is treated as constant within the "
"module, or zero if it is not"
msgstr ""

#: ../../../BitCodeFormat.rst:687
msgid ""
"*initid*: If non-zero, the value index of the initializer for this variable, "
"plus 1."
msgstr ""

#: ../../../BitCodeFormat.rst:692
msgid "*linkage*: An encoding of the linkage type for this variable:"
msgstr ""

#: ../../../BitCodeFormat.rst:694
msgid "``external``: code 0"
msgstr ""

#: ../../../BitCodeFormat.rst:695
msgid "``weak``: code 1"
msgstr ""

#: ../../../BitCodeFormat.rst:696
msgid "``appending``: code 2"
msgstr ""

#: ../../../BitCodeFormat.rst:697
msgid "``internal``: code 3"
msgstr ""

#: ../../../BitCodeFormat.rst:698
msgid "``linkonce``: code 4"
msgstr ""

#: ../../../BitCodeFormat.rst:699
msgid "``dllimport``: code 5"
msgstr ""

#: ../../../BitCodeFormat.rst:700
msgid "``dllexport``: code 6"
msgstr ""

#: ../../../BitCodeFormat.rst:701
msgid "``extern_weak``: code 7"
msgstr ""

#: ../../../BitCodeFormat.rst:702
msgid "``common``: code 8"
msgstr ""

#: ../../../BitCodeFormat.rst:703
msgid "``private``: code 9"
msgstr ""

#: ../../../BitCodeFormat.rst:704
msgid "``weak_odr``: code 10"
msgstr ""

#: ../../../BitCodeFormat.rst:705
msgid "``linkonce_odr``: code 11"
msgstr ""

#: ../../../BitCodeFormat.rst:706
msgid "``available_externally``: code 12"
msgstr ""

#: ../../../BitCodeFormat.rst:707
msgid "deprecated : code 13"
msgstr ""

#: ../../../BitCodeFormat.rst:708
msgid "deprecated : code 14"
msgstr ""

#: ../../../BitCodeFormat.rst:710
msgid ""
"alignment*: The logarithm base 2 of the variable's requested alignment, plus "
"1"
msgstr ""

#: ../../../BitCodeFormat.rst:712 ../../../BitCodeFormat.rst:792
msgid ""
"*section*: If non-zero, the 1-based section index in the table of "
"`MODULE_CODE_SECTIONNAME`_ entries."
msgstr ""

#: ../../../BitCodeFormat.rst:717
msgid ""
"*visibility*: If present, an encoding of the visibility of this variable:"
msgstr ""

#: ../../../BitCodeFormat.rst:719 ../../../BitCodeFormat.rst:747
msgid "``default``: code 0"
msgstr ""

#: ../../../BitCodeFormat.rst:720
msgid "``hidden``: code 1"
msgstr ""

#: ../../../BitCodeFormat.rst:721
msgid "``protected``: code 2"
msgstr ""

#: ../../../BitCodeFormat.rst:725
msgid ""
"*threadlocal*: If present, an encoding of the thread local storage mode of "
"the variable:"
msgstr ""

#: ../../../BitCodeFormat.rst:728
msgid "``not thread local``: code 0"
msgstr ""

#: ../../../BitCodeFormat.rst:729
msgid "``thread local; default TLS model``: code 1"
msgstr ""

#: ../../../BitCodeFormat.rst:730
msgid "``localdynamic``: code 2"
msgstr ""

#: ../../../BitCodeFormat.rst:731
msgid "``initialexec``: code 3"
msgstr ""

#: ../../../BitCodeFormat.rst:732
msgid "``localexec``: code 4"
msgstr ""

#: ../../../BitCodeFormat.rst:736
msgid ""
"*unnamed_addr*: If present, an encoding of the ``unnamed_addr`` attribute of "
"this variable:"
msgstr ""

#: ../../../BitCodeFormat.rst:739
msgid "not ``unnamed_addr``: code 0"
msgstr ""

#: ../../../BitCodeFormat.rst:740
msgid "``unnamed_addr``: code 1"
msgstr ""

#: ../../../BitCodeFormat.rst:741
msgid "``local_unnamed_addr``: code 2"
msgstr ""

#: ../../../BitCodeFormat.rst:745
msgid ""
"*dllstorageclass*: If present, an encoding of the DLL storage class of this "
"variable:"
msgstr ""

#: ../../../BitCodeFormat.rst:748
msgid "``dllimport``: code 1"
msgstr ""

#: ../../../BitCodeFormat.rst:749
msgid "``dllexport``: code 2"
msgstr ""

#: ../../../BitCodeFormat.rst:751 ../../../BitCodeFormat.rst:809
msgid "*comdat*: An encoding of the COMDAT of this function"
msgstr ""

#: ../../../BitCodeFormat.rst:756
msgid "MODULE_CODE_FUNCTION Record"
msgstr ""

#: ../../../BitCodeFormat.rst:758
msgid ""
"``[FUNCTION, type, callingconv, isproto, linkage, paramattr, alignment, "
"section, visibility, gc, prologuedata, dllstorageclass, comdat, prefixdata, "
"personalityfn]``"
msgstr ""

#: ../../../BitCodeFormat.rst:760
msgid ""
"The ``FUNCTION`` record (code 8) marks the declaration or definition of a "
"function. The operand fields are:"
msgstr ""

#: ../../../BitCodeFormat.rst:763
msgid "*type*: The type index of the function type describing this function"
msgstr ""

#: ../../../BitCodeFormat.rst:765
msgid ""
"*callingconv*: The calling convention number: * ``ccc``: code 0 * "
"``fastcc``: code 8 * ``coldcc``: code 9 * ``webkit_jscc``: code 12 * "
"``anyregcc``: code 13 * ``preserve_mostcc``: code 14 * ``preserve_allcc``: "
"code 15 * ``swiftcc`` : code 16 * ``cxx_fast_tlscc``: code 17 * "
"``x86_stdcallcc``: code 64 * ``x86_fastcallcc``: code 65 * ``arm_apcscc``: "
"code 66 * ``arm_aapcscc``: code 67 * ``arm_aapcs_vfpcc``: code 68"
msgstr ""

#: ../../../BitCodeFormat.rst:781
msgid ""
"isproto*: Non-zero if this entry represents a declaration rather than a "
"definition"
msgstr ""

#: ../../../BitCodeFormat.rst:784
msgid "*linkage*: An encoding of the `linkage type`_ for this function"
msgstr ""

#: ../../../BitCodeFormat.rst:786
msgid ""
"*paramattr*: If nonzero, the 1-based parameter attribute index into the "
"table of `PARAMATTR_CODE_ENTRY`_ entries."
msgstr ""

#: ../../../BitCodeFormat.rst:789
msgid ""
"*alignment*: The logarithm base 2 of the function's requested alignment, "
"plus 1"
msgstr ""

#: ../../../BitCodeFormat.rst:795
msgid "*visibility*: An encoding of the `visibility`_ of this function"
msgstr ""

#: ../../../BitCodeFormat.rst:797
msgid ""
"*gc*: If present and nonzero, the 1-based garbage collector index in the "
"table of `MODULE_CODE_GCNAME`_ entries."
msgstr ""

#: ../../../BitCodeFormat.rst:800
msgid ""
"*unnamed_addr*: If present, an encoding of the :ref:"
"`unnamed_addr<bcunnamedaddr>` attribute of this function"
msgstr ""

#: ../../../BitCodeFormat.rst:803
msgid ""
"*prologuedata*: If non-zero, the value index of the prologue data for this "
"function, plus 1."
msgstr ""

#: ../../../BitCodeFormat.rst:806
msgid ""
"*dllstorageclass*: An encoding of the :ref:"
"`dllstorageclass<bcdllstorageclass>` of this function"
msgstr ""

#: ../../../BitCodeFormat.rst:811
msgid ""
"*prefixdata*: If non-zero, the value index of the prefix data for this "
"function, plus 1."
msgstr ""

#: ../../../BitCodeFormat.rst:814
msgid ""
"*personalityfn*: If non-zero, the value index of the personality function "
"for this function, plus 1."
msgstr ""

#: ../../../BitCodeFormat.rst:818
msgid "MODULE_CODE_ALIAS Record"
msgstr ""

#: ../../../BitCodeFormat.rst:820
msgid ""
"``[ALIAS, alias type, aliasee val#, linkage, visibility, dllstorageclass, "
"threadlocal, unnamed_addr]``"
msgstr ""

#: ../../../BitCodeFormat.rst:822
msgid ""
"The ``ALIAS`` record (code 9) marks the definition of an alias. The operand "
"fields are"
msgstr ""

#: ../../../BitCodeFormat.rst:825
msgid "*alias type*: The type index of the alias"
msgstr ""

#: ../../../BitCodeFormat.rst:827
msgid "*aliasee val#*: The value index of the aliased value"
msgstr ""

#: ../../../BitCodeFormat.rst:829
msgid "*linkage*: An encoding of the `linkage type`_ for this alias"
msgstr ""

#: ../../../BitCodeFormat.rst:831
msgid "*visibility*: If present, an encoding of the `visibility`_ of the alias"
msgstr ""

#: ../../../BitCodeFormat.rst:833
msgid ""
"*dllstorageclass*: If present, an encoding of the :ref:"
"`dllstorageclass<bcdllstorageclass>` of the alias"
msgstr ""

#: ../../../BitCodeFormat.rst:836
msgid ""
"*threadlocal*: If present, an encoding of the :ref:`thread local "
"property<bcthreadlocal>` of the alias"
msgstr ""

#: ../../../BitCodeFormat.rst:839
msgid ""
"*unnamed_addr*: If present, an encoding of the :ref:"
"`unnamed_addr<bcunnamedaddr>` attribute of this alias"
msgstr ""

#: ../../../BitCodeFormat.rst:843
msgid "MODULE_CODE_PURGEVALS Record"
msgstr ""

#: ../../../BitCodeFormat.rst:845
msgid "``[PURGEVALS, numvals]``"
msgstr ""

#: ../../../BitCodeFormat.rst:847
msgid ""
"The ``PURGEVALS`` record (code 10) resets the module-level value list to the "
"size given by the single operand value. Module-level value list items are "
"added by ``GLOBALVAR``, ``FUNCTION``, and ``ALIAS`` records.  After a "
"``PURGEVALS`` record is seen, new value indices will start from the given "
"*numvals* value."
msgstr ""

#: ../../../BitCodeFormat.rst:855
msgid "MODULE_CODE_GCNAME Record"
msgstr ""

#: ../../../BitCodeFormat.rst:857
msgid "``[GCNAME, ...string...]``"
msgstr ""

#: ../../../BitCodeFormat.rst:859
msgid ""
"The ``GCNAME`` record (code 11) contains a variable number of values "
"representing the bytes of a single garbage collector name string. There "
"should be one ``GCNAME`` record for each garbage collector name referenced "
"in function ``gc`` attributes within the module. These records can be "
"referenced by 1-based index in the *gc* fields of ``FUNCTION`` records."
msgstr ""

#: ../../../BitCodeFormat.rst:868
msgid "PARAMATTR_BLOCK Contents"
msgstr ""

#: ../../../BitCodeFormat.rst:870
msgid ""
"The ``PARAMATTR_BLOCK`` block (id 9) contains a table of entries describing "
"the attributes of function parameters. These entries are referenced by 1-"
"based index in the *paramattr* field of module block `FUNCTION`_ records, or "
"within the *attr* field of function block ``INST_INVOKE`` and ``INST_CALL`` "
"records."
msgstr ""

#: ../../../BitCodeFormat.rst:875
msgid ""
"Entries within ``PARAMATTR_BLOCK`` are constructed to ensure that each is "
"unique (i.e., no two indices represent equivalent attribute lists)."
msgstr ""

#: ../../../BitCodeFormat.rst:881
msgid "PARAMATTR_CODE_ENTRY Record"
msgstr ""

#: ../../../BitCodeFormat.rst:883
msgid "``[ENTRY, paramidx0, attr0, paramidx1, attr1...]``"
msgstr ""

#: ../../../BitCodeFormat.rst:885
msgid ""
"The ``ENTRY`` record (code 1) contains an even number of values describing a "
"unique set of function parameter attributes. Each *paramidx* value indicates "
"which set of attributes is represented, with 0 representing the return value "
"attributes, 0xFFFFFFFF representing function attributes, and other values "
"representing 1-based function parameters. Each *attr* value is a bitmap with "
"the following interpretation:"
msgstr ""

#: ../../../BitCodeFormat.rst:892
msgid "bit 0: ``zeroext``"
msgstr ""

#: ../../../BitCodeFormat.rst:893
msgid "bit 1: ``signext``"
msgstr ""

#: ../../../BitCodeFormat.rst:894
msgid "bit 2: ``noreturn``"
msgstr ""

#: ../../../BitCodeFormat.rst:895
msgid "bit 3: ``inreg``"
msgstr ""

#: ../../../BitCodeFormat.rst:896
msgid "bit 4: ``sret``"
msgstr ""

#: ../../../BitCodeFormat.rst:897
msgid "bit 5: ``nounwind``"
msgstr ""

#: ../../../BitCodeFormat.rst:898
msgid "bit 6: ``noalias``"
msgstr ""

#: ../../../BitCodeFormat.rst:899
msgid "bit 7: ``byval``"
msgstr ""

#: ../../../BitCodeFormat.rst:900
msgid "bit 8: ``nest``"
msgstr ""

#: ../../../BitCodeFormat.rst:901
msgid "bit 9: ``readnone``"
msgstr ""

#: ../../../BitCodeFormat.rst:902
msgid "bit 10: ``readonly``"
msgstr ""

#: ../../../BitCodeFormat.rst:903
msgid "bit 11: ``noinline``"
msgstr ""

#: ../../../BitCodeFormat.rst:904
msgid "bit 12: ``alwaysinline``"
msgstr ""

#: ../../../BitCodeFormat.rst:905
msgid "bit 13: ``optsize``"
msgstr ""

#: ../../../BitCodeFormat.rst:906
msgid "bit 14: ``ssp``"
msgstr ""

#: ../../../BitCodeFormat.rst:907
msgid "bit 15: ``sspreq``"
msgstr ""

#: ../../../BitCodeFormat.rst:908
msgid "bits 16-31: ``align n``"
msgstr ""

#: ../../../BitCodeFormat.rst:909
msgid "bit 32: ``nocapture``"
msgstr ""

#: ../../../BitCodeFormat.rst:910
msgid "bit 33: ``noredzone``"
msgstr ""

#: ../../../BitCodeFormat.rst:911
msgid "bit 34: ``noimplicitfloat``"
msgstr ""

#: ../../../BitCodeFormat.rst:912
msgid "bit 35: ``naked``"
msgstr ""

#: ../../../BitCodeFormat.rst:913
msgid "bit 36: ``inlinehint``"
msgstr ""

#: ../../../BitCodeFormat.rst:914
msgid ""
"bits 37-39: ``alignstack n``, represented as the logarithm base 2 of the "
"requested alignment, plus 1"
msgstr ""

#: ../../../BitCodeFormat.rst:920
msgid "TYPE_BLOCK Contents"
msgstr ""

#: ../../../BitCodeFormat.rst:922
msgid ""
"The ``TYPE_BLOCK`` block (id 10) contains records which constitute a table "
"of type operator entries used to represent types referenced within an LLVM "
"module. Each record (with the exception of `NUMENTRY`_) generates a single "
"type table entry, which may be referenced by 0-based index from "
"instructions, constants, metadata, type symbol table entries, or other type "
"operator records."
msgstr ""

#: ../../../BitCodeFormat.rst:928
msgid ""
"Entries within ``TYPE_BLOCK`` are constructed to ensure that each entry is "
"unique (i.e., no two indices represent structurally equivalent types)."
msgstr ""

#: ../../../BitCodeFormat.rst:935
msgid "TYPE_CODE_NUMENTRY Record"
msgstr ""

#: ../../../BitCodeFormat.rst:937
msgid "``[NUMENTRY, numentries]``"
msgstr ""

#: ../../../BitCodeFormat.rst:939
msgid ""
"The ``NUMENTRY`` record (code 1) contains a single value which indicates the "
"total number of type code entries in the type table of the module. If "
"present, ``NUMENTRY`` should be the first record in the block."
msgstr ""

#: ../../../BitCodeFormat.rst:944
msgid "TYPE_CODE_VOID Record"
msgstr ""

#: ../../../BitCodeFormat.rst:946
msgid "``[VOID]``"
msgstr ""

#: ../../../BitCodeFormat.rst:948
msgid "The ``VOID`` record (code 2) adds a ``void`` type to the type table."
msgstr ""

#: ../../../BitCodeFormat.rst:951
msgid "TYPE_CODE_HALF Record"
msgstr ""

#: ../../../BitCodeFormat.rst:953
msgid "``[HALF]``"
msgstr ""

#: ../../../BitCodeFormat.rst:955
msgid ""
"The ``HALF`` record (code 10) adds a ``half`` (16-bit floating point) type "
"to the type table."
msgstr ""

#: ../../../BitCodeFormat.rst:959
msgid "TYPE_CODE_FLOAT Record"
msgstr ""

#: ../../../BitCodeFormat.rst:961
msgid "``[FLOAT]``"
msgstr ""

#: ../../../BitCodeFormat.rst:963
msgid ""
"The ``FLOAT`` record (code 3) adds a ``float`` (32-bit floating point) type "
"to the type table."
msgstr ""

#: ../../../BitCodeFormat.rst:967
msgid "TYPE_CODE_DOUBLE Record"
msgstr ""

#: ../../../BitCodeFormat.rst:969
msgid "``[DOUBLE]``"
msgstr ""

#: ../../../BitCodeFormat.rst:971
msgid ""
"The ``DOUBLE`` record (code 4) adds a ``double`` (64-bit floating point) "
"type to the type table."
msgstr ""

#: ../../../BitCodeFormat.rst:975
msgid "TYPE_CODE_LABEL Record"
msgstr ""

#: ../../../BitCodeFormat.rst:977
msgid "``[LABEL]``"
msgstr ""

#: ../../../BitCodeFormat.rst:979
msgid "The ``LABEL`` record (code 5) adds a ``label`` type to the type table."
msgstr ""

#: ../../../BitCodeFormat.rst:982
msgid "TYPE_CODE_OPAQUE Record"
msgstr ""

#: ../../../BitCodeFormat.rst:984
msgid "``[OPAQUE]``"
msgstr ""

#: ../../../BitCodeFormat.rst:986
msgid ""
"The ``OPAQUE`` record (code 6) adds an ``opaque`` type to the type table. "
"Note that distinct ``opaque`` types are not unified."
msgstr ""

#: ../../../BitCodeFormat.rst:990
msgid "TYPE_CODE_INTEGER Record"
msgstr ""

#: ../../../BitCodeFormat.rst:992
msgid "``[INTEGER, width]``"
msgstr ""

#: ../../../BitCodeFormat.rst:994
msgid ""
"The ``INTEGER`` record (code 7) adds an integer type to the type table. The "
"single *width* field indicates the width of the integer type."
msgstr ""

#: ../../../BitCodeFormat.rst:998
msgid "TYPE_CODE_POINTER Record"
msgstr ""

#: ../../../BitCodeFormat.rst:1000
msgid "``[POINTER, pointee type, address space]``"
msgstr ""

#: ../../../BitCodeFormat.rst:1002
msgid ""
"The ``POINTER`` record (code 8) adds a pointer type to the type table. The "
"operand fields are"
msgstr ""

#: ../../../BitCodeFormat.rst:1005
msgid "*pointee type*: The type index of the pointed-to type"
msgstr ""

#: ../../../BitCodeFormat.rst:1007
msgid ""
"*address space*: If supplied, the target-specific numbered address space "
"where the pointed-to object resides. Otherwise, the default address space is "
"zero."
msgstr ""

#: ../../../BitCodeFormat.rst:1011
msgid "TYPE_CODE_FUNCTION Record"
msgstr ""

#: ../../../BitCodeFormat.rst:1013
msgid "``[FUNCTION, vararg, ignored, retty, ...paramty... ]``"
msgstr ""

#: ../../../BitCodeFormat.rst:1015
msgid ""
"The ``FUNCTION`` record (code 9) adds a function type to the type table. The "
"operand fields are"
msgstr ""

#: ../../../BitCodeFormat.rst:1018
msgid "*vararg*: Non-zero if the type represents a varargs function"
msgstr ""

#: ../../../BitCodeFormat.rst:1020
msgid ""
"*ignored*: This value field is present for backward compatibility only, and "
"is ignored"
msgstr ""

#: ../../../BitCodeFormat.rst:1023
msgid "*retty*: The type index of the function's return type"
msgstr ""

#: ../../../BitCodeFormat.rst:1025
msgid ""
"*paramty*: Zero or more type indices representing the parameter types of the "
"function"
msgstr ""

#: ../../../BitCodeFormat.rst:1029
msgid "TYPE_CODE_STRUCT Record"
msgstr ""

#: ../../../BitCodeFormat.rst:1031
msgid "``[STRUCT, ispacked, ...eltty...]``"
msgstr ""

#: ../../../BitCodeFormat.rst:1033
msgid ""
"The ``STRUCT`` record (code 10) adds a struct type to the type table. The "
"operand fields are"
msgstr ""

#: ../../../BitCodeFormat.rst:1036
msgid "*ispacked*: Non-zero if the type represents a packed structure"
msgstr ""

#: ../../../BitCodeFormat.rst:1038
msgid ""
"*eltty*: Zero or more type indices representing the element types of the "
"structure"
msgstr ""

#: ../../../BitCodeFormat.rst:1042
msgid "TYPE_CODE_ARRAY Record"
msgstr ""

#: ../../../BitCodeFormat.rst:1044
msgid "``[ARRAY, numelts, eltty]``"
msgstr ""

#: ../../../BitCodeFormat.rst:1046
msgid ""
"The ``ARRAY`` record (code 11) adds an array type to the type table.  The "
"operand fields are"
msgstr ""

#: ../../../BitCodeFormat.rst:1049
msgid "*numelts*: The number of elements in arrays of this type"
msgstr ""

#: ../../../BitCodeFormat.rst:1051
msgid "*eltty*: The type index of the array element type"
msgstr ""

#: ../../../BitCodeFormat.rst:1054
msgid "TYPE_CODE_VECTOR Record"
msgstr ""

#: ../../../BitCodeFormat.rst:1056
msgid "``[VECTOR, numelts, eltty]``"
msgstr ""

#: ../../../BitCodeFormat.rst:1058
msgid ""
"The ``VECTOR`` record (code 12) adds a vector type to the type table.  The "
"operand fields are"
msgstr ""

#: ../../../BitCodeFormat.rst:1061
msgid "*numelts*: The number of elements in vectors of this type"
msgstr ""

#: ../../../BitCodeFormat.rst:1063
msgid "*eltty*: The type index of the vector element type"
msgstr ""

#: ../../../BitCodeFormat.rst:1066
msgid "TYPE_CODE_X86_FP80 Record"
msgstr ""

#: ../../../BitCodeFormat.rst:1068
msgid "``[X86_FP80]``"
msgstr ""

#: ../../../BitCodeFormat.rst:1070
msgid ""
"The ``X86_FP80`` record (code 13) adds an ``x86_fp80`` (80-bit floating "
"point) type to the type table."
msgstr ""

#: ../../../BitCodeFormat.rst:1074
msgid "TYPE_CODE_FP128 Record"
msgstr ""

#: ../../../BitCodeFormat.rst:1076
msgid "``[FP128]``"
msgstr ""

#: ../../../BitCodeFormat.rst:1078
msgid ""
"The ``FP128`` record (code 14) adds an ``fp128`` (128-bit floating point) "
"type to the type table."
msgstr ""

#: ../../../BitCodeFormat.rst:1082
msgid "TYPE_CODE_PPC_FP128 Record"
msgstr ""

#: ../../../BitCodeFormat.rst:1084
msgid "``[PPC_FP128]``"
msgstr ""

#: ../../../BitCodeFormat.rst:1086
msgid ""
"The ``PPC_FP128`` record (code 15) adds a ``ppc_fp128`` (128-bit floating "
"point) type to the type table."
msgstr ""

#: ../../../BitCodeFormat.rst:1090
msgid "TYPE_CODE_METADATA Record"
msgstr ""

#: ../../../BitCodeFormat.rst:1092
msgid "``[METADATA]``"
msgstr ""

#: ../../../BitCodeFormat.rst:1094
msgid ""
"The ``METADATA`` record (code 16) adds a ``metadata`` type to the type table."
msgstr ""

#: ../../../BitCodeFormat.rst:1099
msgid "CONSTANTS_BLOCK Contents"
msgstr ""

#: ../../../BitCodeFormat.rst:1101
msgid "The ``CONSTANTS_BLOCK`` block (id 11) ..."
msgstr ""

#: ../../../BitCodeFormat.rst:1106
msgid "FUNCTION_BLOCK Contents"
msgstr ""

#: ../../../BitCodeFormat.rst:1108
msgid "The ``FUNCTION_BLOCK`` block (id 12) ..."
msgstr ""

#: ../../../BitCodeFormat.rst:1110
msgid ""
"In addition to the record types described below, a ``FUNCTION_BLOCK`` block "
"may contain the following sub-blocks:"
msgstr ""

#: ../../../BitCodeFormat.rst:1115
msgid "`METADATA_ATTACHMENT`_"
msgstr ""

#: ../../../BitCodeFormat.rst:1120
msgid "TYPE_SYMTAB_BLOCK Contents"
msgstr ""

#: ../../../BitCodeFormat.rst:1122
msgid ""
"The ``TYPE_SYMTAB_BLOCK`` block (id 13) contains entries which map between "
"module-level named types and their corresponding type indices."
msgstr ""

#: ../../../BitCodeFormat.rst:1128
msgid "TST_CODE_ENTRY Record"
msgstr ""

#: ../../../BitCodeFormat.rst:1130
msgid "``[ENTRY, typeid, ...string...]``"
msgstr ""

#: ../../../BitCodeFormat.rst:1132
msgid ""
"The ``ENTRY`` record (code 1) contains a variable number of values, with the "
"first giving the type index of the designated type, and the remaining values "
"giving the character codes of the type name. Each entry corresponds to a "
"single named type."
msgstr ""

#: ../../../BitCodeFormat.rst:1140
msgid "VALUE_SYMTAB_BLOCK Contents"
msgstr ""

#: ../../../BitCodeFormat.rst:1142
msgid "The ``VALUE_SYMTAB_BLOCK`` block (id 14) ..."
msgstr ""

#: ../../../BitCodeFormat.rst:1147
msgid "METADATA_BLOCK Contents"
msgstr ""

#: ../../../BitCodeFormat.rst:1149
msgid "The ``METADATA_BLOCK`` block (id 15) ..."
msgstr ""

#: ../../../BitCodeFormat.rst:1154
msgid "METADATA_ATTACHMENT Contents"
msgstr ""

#: ../../../BitCodeFormat.rst:1156
msgid "The ``METADATA_ATTACHMENT`` block (id 16) ..."
msgstr ""
