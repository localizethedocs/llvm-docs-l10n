# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../tutorial/LangImpl08.rst:3
msgid "Kaleidoscope: Compiling to Object Code"
msgstr ""

#: ../../../tutorial/LangImpl08.rst:9
msgid "Chapter 8 Introduction"
msgstr ""

#: ../../../tutorial/LangImpl08.rst:11
msgid ""
"Welcome to Chapter 8 of the \"`Implementing a language with LLVM <index."
"html>`_\" tutorial. This chapter describes how to compile our language down "
"to object files."
msgstr ""

#: ../../../tutorial/LangImpl08.rst:16
msgid "Choosing a target"
msgstr ""

#: ../../../tutorial/LangImpl08.rst:18
msgid ""
"LLVM has native support for cross-compilation. You can compile to the "
"architecture of your current machine, or just as easily compile for other "
"architectures. In this tutorial, we'll target the current machine."
msgstr ""

#: ../../../tutorial/LangImpl08.rst:23
msgid ""
"To specify the architecture that you want to target, we use a string called "
"a \"target triple\". This takes the form ``<arch><sub>-<vendor>-<sys>-"
"<abi>`` (see the `cross compilation docs <http://clang.llvm.org/docs/"
"CrossCompilation.html#target-triple>`_)."
msgstr ""

#: ../../../tutorial/LangImpl08.rst:28
msgid ""
"As an example, we can see what clang thinks is our current target triple:"
msgstr ""

#: ../../../tutorial/LangImpl08.rst:36
msgid ""
"Running this command may show something different on your machine as you "
"might be using a different architecture or operating system to me."
msgstr ""

#: ../../../tutorial/LangImpl08.rst:39
msgid ""
"Fortunately, we don't need to hard-code a target triple to target the "
"current machine. LLVM provides ``sys::getDefaultTargetTriple``, which "
"returns the target triple of the current machine."
msgstr ""

#: ../../../tutorial/LangImpl08.rst:47
msgid ""
"LLVM doesn't require us to to link in all the target functionality. For "
"example, if we're just using the JIT, we don't need the assembly printers. "
"Similarly, if we're only targeting certain architectures, we can only link "
"in the functionality for those architectures."
msgstr ""

#: ../../../tutorial/LangImpl08.rst:53
msgid ""
"For this example, we'll initialize all the targets for emitting object code."
msgstr ""

#: ../../../tutorial/LangImpl08.rst:64
msgid "We can now use our target triple to get a ``Target``:"
msgstr ""

#: ../../../tutorial/LangImpl08.rst:80
msgid "Target Machine"
msgstr ""

#: ../../../tutorial/LangImpl08.rst:82
msgid ""
"We will also need a ``TargetMachine``. This class provides a complete "
"machine description of the machine we're targeting. If we want to target a "
"specific feature (such as SSE) or a specific CPU (such as Intel's "
"Sandylake), we do so now."
msgstr ""

#: ../../../tutorial/LangImpl08.rst:87
msgid ""
"To see which features and CPUs that LLVM knows about, we can use ``llc``. "
"For example, let's look at x86:"
msgstr ""

#: ../../../tutorial/LangImpl08.rst:108
msgid ""
"For our example, we'll use the generic CPU without any additional features, "
"options or relocation model."
msgstr ""

#: ../../../tutorial/LangImpl08.rst:122
msgid "Configuring the Module"
msgstr ""

#: ../../../tutorial/LangImpl08.rst:124
msgid ""
"We're now ready to configure our module, to specify the target and data "
"layout. This isn't strictly necessary, but the `frontend performance guide "
"<../Frontend/PerformanceTips.html>`_ recommends this. Optimizations benefit "
"from knowing about the target and data layout."
msgstr ""

#: ../../../tutorial/LangImpl08.rst:136
msgid "Emit Object Code"
msgstr ""

#: ../../../tutorial/LangImpl08.rst:138
msgid ""
"We're ready to emit object code! Let's define where we want to write our "
"file to:"
msgstr ""

#: ../../../tutorial/LangImpl08.rst:152
msgid ""
"Finally, we define a pass that emits object code, then we run that pass:"
msgstr ""

#: ../../../tutorial/LangImpl08.rst:169
msgid "Putting It All Together"
msgstr ""

#: ../../../tutorial/LangImpl08.rst:171
msgid ""
"Does it work? Let's give it a try. We need to compile our code, but note "
"that the arguments to ``llvm-config`` are different to the previous chapters."
msgstr ""

#: ../../../tutorial/LangImpl08.rst:178
msgid ""
"Let's run it, and define a simple ``average`` function. Press Ctrl-D when "
"you're done."
msgstr ""

#: ../../../tutorial/LangImpl08.rst:188
msgid ""
"We have an object file! To test it, let's write a simple program and link it "
"with our output. Here's the source code:"
msgstr ""

#: ../../../tutorial/LangImpl08.rst:203
msgid ""
"We link our program to output.o and check the result is what we expected:"
msgstr ""

#: ../../../tutorial/LangImpl08.rst:213
msgid "Full Code Listing"
msgstr ""

#: ../../../tutorial/LangImpl08.rst:218
msgid "`Next: Adding Debug Information <LangImpl09.html>`_"
msgstr ""
