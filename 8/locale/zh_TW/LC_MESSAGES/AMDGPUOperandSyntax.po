# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../AMDGPUOperandSyntax.rst:3
msgid "Syntax of AMDGPU Instruction Operands"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:9
msgid "Conventions"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:11
msgid "The following notation is used throughout this document:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:14
msgid "Notation"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:14 ../../../AMDGPUOperandSyntax.rst:37
#: ../../../AMDGPUOperandSyntax.rst:100 ../../../AMDGPUOperandSyntax.rst:183
#: ../../../AMDGPUOperandSyntax.rst:240 ../../../AMDGPUOperandSyntax.rst:250
#: ../../../AMDGPUOperandSyntax.rst:269 ../../../AMDGPUOperandSyntax.rst:279
#: ../../../AMDGPUOperandSyntax.rst:298 ../../../AMDGPUOperandSyntax.rst:308
#: ../../../AMDGPUOperandSyntax.rst:329 ../../../AMDGPUOperandSyntax.rst:339
#: ../../../AMDGPUOperandSyntax.rst:356 ../../../AMDGPUOperandSyntax.rst:366
#: ../../../AMDGPUOperandSyntax.rst:383 ../../../AMDGPUOperandSyntax.rst:399
#: ../../../AMDGPUOperandSyntax.rst:409 ../../../AMDGPUOperandSyntax.rst:617
msgid "Description"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:16
msgid "{0..N}"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:16
msgid "Any integer value in the range from 0 to N (inclusive)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:17
msgid "<x>"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:17
msgid "Syntax and meaning of *x* is explained elsewhere."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:23
msgid "Operands"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:28
msgid "v"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:30
msgid "Vector registers. There are 256 32-bit vector registers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:32
msgid ""
"A sequence of *vector* registers may be used to operate with more than 32 "
"bits of data."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:34
msgid ""
"Assembler currently supports sequences of 1, 2, 3, 4, 8 and 16 *vector* "
"registers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:37 ../../../AMDGPUOperandSyntax.rst:100
#: ../../../AMDGPUOperandSyntax.rst:183 ../../../AMDGPUOperandSyntax.rst:240
#: ../../../AMDGPUOperandSyntax.rst:250 ../../../AMDGPUOperandSyntax.rst:269
#: ../../../AMDGPUOperandSyntax.rst:279 ../../../AMDGPUOperandSyntax.rst:298
#: ../../../AMDGPUOperandSyntax.rst:308 ../../../AMDGPUOperandSyntax.rst:329
#: ../../../AMDGPUOperandSyntax.rst:339 ../../../AMDGPUOperandSyntax.rst:356
#: ../../../AMDGPUOperandSyntax.rst:366 ../../../AMDGPUOperandSyntax.rst:383
#: ../../../AMDGPUOperandSyntax.rst:399 ../../../AMDGPUOperandSyntax.rst:409
#: ../../../AMDGPUOperandSyntax.rst:501 ../../../AMDGPUOperandSyntax.rst:617
#: ../../../AMDGPUOperandSyntax.rst:637 ../../../AMDGPUOperandSyntax.rst:666
#: ../../../AMDGPUOperandSyntax.rst:745 ../../../AMDGPUOperandSyntax.rst:852
msgid "Syntax"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:39
msgid "**v**\\<N>"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:39 ../../../AMDGPUOperandSyntax.rst:42
msgid "A single 32-bit *vector* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:41 ../../../AMDGPUOperandSyntax.rst:104
#: ../../../AMDGPUOperandSyntax.rst:187
msgid "*N* must be a decimal integer number."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:42
msgid "**v[**\\ <N>\\ **]**"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:44 ../../../AMDGPUOperandSyntax.rst:107
#: ../../../AMDGPUOperandSyntax.rst:190
msgid ""
"*N* may be specified as an :ref:`integer "
"number<amdgpu_synid_integer_number>` or an :ref:`absolute "
"expression<amdgpu_synid_absolute_expression>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:47
msgid "**v[**\\ <N>:<K>\\ **]**"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:47 ../../../AMDGPUOperandSyntax.rst:52
msgid "A sequence of (\\ *K-N+1*\\ ) *vector* registers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:49 ../../../AMDGPUOperandSyntax.rst:112
#: ../../../AMDGPUOperandSyntax.rst:195
msgid ""
"*N* and *K* may be specified as :ref:`integer "
"numbers<amdgpu_synid_integer_number>` or :ref:`absolute "
"expressions<amdgpu_synid_absolute_expression>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:52
msgid "**[v**\\ <N>, \\ **v**\\ <N+1>, ... **v**\\ <K>\\ **]**"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:54 ../../../AMDGPUOperandSyntax.rst:117
#: ../../../AMDGPUOperandSyntax.rst:200
msgid "Register indices must be specified as decimal integer numbers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:57 ../../../AMDGPUOperandSyntax.rst:120
#: ../../../AMDGPUOperandSyntax.rst:203
msgid "Note. *N* and *K* must satisfy the following conditions:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:59 ../../../AMDGPUOperandSyntax.rst:123
#: ../../../AMDGPUOperandSyntax.rst:206
msgid "*N* <= *K*."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:60
msgid "0 <= *N* <= 255."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:61
msgid "0 <= *K* <= 255."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:62
msgid "*K-N+1* must be equal to 1, 2, 3, 4, 8 or 16."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:64 ../../../AMDGPUOperandSyntax.rst:128
#: ../../../AMDGPUOperandSyntax.rst:211 ../../../AMDGPUOperandSyntax.rst:646
#: ../../../AMDGPUOperandSyntax.rst:672 ../../../AMDGPUOperandSyntax.rst:701
#: ../../../AMDGPUOperandSyntax.rst:720 ../../../AMDGPUOperandSyntax.rst:737
#: ../../../AMDGPUOperandSyntax.rst:898 ../../../AMDGPUOperandSyntax.rst:921
#: ../../../AMDGPUOperandSyntax.rst:1054
msgid "Examples:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:81
msgid "s"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:83
msgid ""
"Scalar 32-bit registers. The number of available *scalar* registers depends "
"on GPU:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:86 ../../../AMDGPUOperandSyntax.rst:169
msgid "GPU"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:86
msgid "Number of *scalar* registers"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:88 ../../../AMDGPUOperandSyntax.rst:171
msgid "GFX7"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:88
msgid "104"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:89 ../../../AMDGPUOperandSyntax.rst:172
msgid "GFX8"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:89 ../../../AMDGPUOperandSyntax.rst:90
msgid "102"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:90 ../../../AMDGPUOperandSyntax.rst:173
#: ../../../AMDGPUOperandSyntax.rst:503 ../../../AMDGPUOperandSyntax.rst:504
#: ../../../AMDGPUOperandSyntax.rst:505 ../../../AMDGPUOperandSyntax.rst:506
#: ../../../AMDGPUOperandSyntax.rst:507
msgid "GFX9"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:93
msgid ""
"A sequence of *scalar* registers may be used to operate with more than 32 "
"bits of data. Assembler currently supports sequences of 1, 2, 4, 8 and 16 "
"*scalar* registers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:96
msgid ""
"Pairs of *scalar* registers must be even-aligned (the first register must be "
"even). Sequences of 4 and more *scalar* registers must be quad-aligned."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:102
msgid "**s**\\ <N>"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:102 ../../../AMDGPUOperandSyntax.rst:105
msgid "A single 32-bit *scalar* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:105
msgid "**s[**\\ <N>\\ **]**"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:110
msgid "**s[**\\ <N>:<K>\\ **]**"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:110 ../../../AMDGPUOperandSyntax.rst:115
msgid "A sequence of (\\ *K-N+1*\\ ) *scalar* registers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:115
msgid "**[s**\\ <N>, \\ **s**\\ <N+1>, ... **s**\\ <K>\\ **]**"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:122 ../../../AMDGPUOperandSyntax.rst:205
msgid "*N* must be properly aligned based on sequence size."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:124
msgid ""
"0 <= *N* < *SMAX*\\ , where *SMAX* is the number of available *scalar* "
"registers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:125
msgid ""
"0 <= *K* < *SMAX*\\ , where *SMAX* is the number of available *scalar* "
"registers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:126 ../../../AMDGPUOperandSyntax.rst:209
msgid "*K-N+1* must be equal to 1, 2, 4, 8 or 16."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:142
msgid "Examples of *scalar* registers with an invalid alignment:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:152
msgid "trap"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:154
msgid "A set of trap handler registers:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:156
msgid ":ref:`ttmp<amdgpu_synid_ttmp>`"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:157
msgid ":ref:`tba<amdgpu_synid_tba>`"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:158
msgid ":ref:`tma<amdgpu_synid_tma>`"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:163
msgid "ttmp"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:165
msgid ""
"Trap handler temporary scalar registers, 32-bits wide. The number of "
"available *ttmp* registers depends on GPU:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:169
msgid "Number of *ttmp* registers"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:171 ../../../AMDGPUOperandSyntax.rst:172
msgid "12"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:173
msgid "16"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:176
msgid ""
"A sequence of *ttmp* registers may be used to operate with more than 32 bits "
"of data. Assembler currently supports sequences of 1, 2, 4, 8 and 16 *ttmp* "
"registers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:179
msgid ""
"Pairs of *ttmp* registers must be even-aligned (the first register must be "
"even). Sequences of 4 and more *ttmp* registers must be quad-aligned."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:185
msgid "**ttmp**\\ <N>"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:185 ../../../AMDGPUOperandSyntax.rst:188
msgid "A single 32-bit *ttmp* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:188
msgid "**ttmp[**\\ <N>\\ **]**"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:193
msgid "**ttmp[**\\ <N>:<K>\\ **]**"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:193 ../../../AMDGPUOperandSyntax.rst:198
msgid "A sequence of (\\ *K-N+1*\\ ) *ttmp* registers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:198
msgid "**[ttmp**\\ <N>, \\ **ttmp**\\ <N+1>, ... **ttmp**\\ <K>\\ **]**"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:207
msgid ""
"0 <= *N* < *TMAX*, where *TMAX* is the number of available *ttmp* registers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:208
msgid ""
"0 <= *K* < *TMAX*, where *TMAX* is the number of available *ttmp* registers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:225
msgid "Examples of *ttmp* registers with an invalid alignment:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:235 ../../../AMDGPUOperandSyntax.rst:242
msgid "tba"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:237
msgid ""
"Trap base address, 64-bits wide. Holds the pointer to the current trap "
"handler program."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:240 ../../../AMDGPUOperandSyntax.rst:250
#: ../../../AMDGPUOperandSyntax.rst:269 ../../../AMDGPUOperandSyntax.rst:279
#: ../../../AMDGPUOperandSyntax.rst:501 ../../../AMDGPUOperandSyntax.rst:527
msgid "Availability"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:242
msgid "64-bit *trap base address* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:242 ../../../AMDGPUOperandSyntax.rst:243
#: ../../../AMDGPUOperandSyntax.rst:244 ../../../AMDGPUOperandSyntax.rst:252
#: ../../../AMDGPUOperandSyntax.rst:253 ../../../AMDGPUOperandSyntax.rst:254
#: ../../../AMDGPUOperandSyntax.rst:255 ../../../AMDGPUOperandSyntax.rst:271
#: ../../../AMDGPUOperandSyntax.rst:272 ../../../AMDGPUOperandSyntax.rst:273
#: ../../../AMDGPUOperandSyntax.rst:281 ../../../AMDGPUOperandSyntax.rst:282
#: ../../../AMDGPUOperandSyntax.rst:283 ../../../AMDGPUOperandSyntax.rst:284
msgid "GFX7, GFX8"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:243
msgid "[tba]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:243 ../../../AMDGPUOperandSyntax.rst:244
msgid "64-bit *trap base address* register (an alternative syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:244
msgid "[tba_lo,tba_hi]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:247
msgid ""
"High and low 32 bits of *trap base address* may be accessed as separate "
"registers:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:252
msgid "tba_lo"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:252
msgid "Low 32 bits of *trap base address* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:253
msgid "tba_hi"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:253
msgid "High 32 bits of *trap base address* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:254
msgid "[tba_lo]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:254
msgid "Low 32 bits of *trap base address* register (an alternative syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:255
msgid "[tba_hi]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:255
msgid "High 32 bits of *trap base address* register (an alternative syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:258
msgid ""
"Note that *tba*, *tba_lo* and *tba_hi* are not accessible as assembler "
"registers in GFX9, but *tba* is readable/writable with the help of "
"*s_get_reg* and *s_set_reg* instructions."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:264 ../../../AMDGPUOperandSyntax.rst:271
msgid "tma"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:266
msgid "Trap memory address, 64-bits wide."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:271
msgid "64-bit *trap memory address* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:272
msgid "[tma]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:272 ../../../AMDGPUOperandSyntax.rst:273
msgid "64-bit *trap memory address* register (an alternative syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:273
msgid "[tma_lo,tma_hi]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:276
msgid ""
"High and low 32 bits of *trap memory address* may be accessed as separate "
"registers:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:281
msgid "tma_lo"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:281
msgid "Low 32 bits of *trap memory address* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:282
msgid "tma_hi"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:282
msgid "High 32 bits of *trap memory address* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:283
msgid "[tma_lo]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:283
msgid "Low 32 bits of *trap memory address* register (an alternative syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:284
msgid "[tma_hi]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:284
msgid "High 32 bits of *trap memory address* register (an alternative syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:287
msgid ""
"Note that *tma*, *tma_lo* and *tma_hi* are not accessible as assembler "
"registers in GFX9, but *tma* is readable/writable with the help of "
"*s_get_reg* and *s_set_reg* instructions."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:293 ../../../AMDGPUOperandSyntax.rst:300
msgid "flat_scratch"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:295
msgid ""
"Flat scratch address, 64-bits wide. Holds the base address of scratch memory."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:300
msgid "64-bit *flat scratch* address register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:301
msgid "[flat_scratch]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:301 ../../../AMDGPUOperandSyntax.rst:302
msgid "64-bit *flat scratch* address register (an alternative syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:302
msgid "[flat_scratch_lo,flat_scratch_hi]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:305
msgid ""
"High and low 32 bits of *flat scratch* address may be accessed as separate "
"registers:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:310
msgid "flat_scratch_lo"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:310
msgid "Low 32 bits of *flat scratch* address register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:311
msgid "flat_scratch_hi"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:311
msgid "High 32 bits of *flat scratch* address register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:312
msgid "[flat_scratch_lo]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:312
msgid "Low 32 bits of *flat scratch* address register (an alternative syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:313
msgid "[flat_scratch_hi]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:313
msgid ""
"High 32 bits of *flat scratch* address register (an alternative syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:319
msgid "xnack"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:321
msgid ""
"Xnack mask, 64-bits wide. Holds a 64-bit mask of which threads received an "
"*XNACK* due to a vector memory operation."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:324
msgid ""
"GFX7 does not support *xnack* feature. Not all GFX8 and GFX9 :ref:"
"`processors<amdgpu-processors>` support *xnack* feature."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:326 ../../../AMDGPUOperandSyntax.rst:498
#: ../../../AMDGPUOperandSyntax.rst:643
msgid "\\"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:331
msgid "xnack_mask"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:331
msgid "64-bit *xnack mask* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:332
msgid "[xnack_mask]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:332 ../../../AMDGPUOperandSyntax.rst:333
msgid "64-bit *xnack mask* register (an alternative syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:333
msgid "[xnack_mask_lo,xnack_mask_hi]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:336
msgid ""
"High and low 32 bits of *xnack mask* may be accessed as separate registers:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:341
msgid "xnack_mask_lo"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:341
msgid "Low 32 bits of *xnack mask* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:342
msgid "xnack_mask_hi"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:342
msgid "High 32 bits of *xnack mask* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:343
msgid "[xnack_mask_lo]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:343
msgid "Low 32 bits of *xnack mask* register (an alternative syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:344
msgid "[xnack_mask_hi]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:344
msgid "High 32 bits of *xnack mask* register (an alternative syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:350 ../../../AMDGPUOperandSyntax.rst:358
msgid "vcc"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:352
msgid ""
"Vector condition code, 64-bits wide. A bit mask with one bit per thread; it "
"holds the result of a vector compare operation."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:358
msgid "64-bit *vector condition code* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:359
msgid "[vcc]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:359 ../../../AMDGPUOperandSyntax.rst:360
msgid "64-bit *vector condition code* register (an alternative syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:360
msgid "[vcc_lo,vcc_hi]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:363
msgid ""
"High and low 32 bits of *vector condition code* may be accessed as separate "
"registers:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:368
msgid "vcc_lo"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:368
msgid "Low 32 bits of *vector condition code* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:369
msgid "vcc_hi"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:369
msgid "High 32 bits of *vector condition code* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:370
msgid "[vcc_lo]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:370
msgid ""
"Low 32 bits of *vector condition code* register (an alternative syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:371
msgid "[vcc_hi]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:371
msgid ""
"High 32 bits of *vector condition code* register (an alternative syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:377 ../../../AMDGPUOperandSyntax.rst:385
msgid "m0"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:379
msgid ""
"A 32-bit memory register. It has various uses, including register indexing "
"and bounds checking."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:385
msgid "A 32-bit *memory* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:386
msgid "[m0]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:386
msgid "A 32-bit *memory* register (an alternative syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:392 ../../../AMDGPUOperandSyntax.rst:401
msgid "exec"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:394
msgid ""
"Execute mask, 64-bits wide. A bit mask with one bit per thread, which is "
"applied to vector instructions and controls which threads execute and which "
"ignore the instruction."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:401
msgid "64-bit *execute mask* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:402
msgid "[exec]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:402 ../../../AMDGPUOperandSyntax.rst:403
msgid "64-bit *execute mask* register (an alternative syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:403
msgid "[exec_lo,exec_hi]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:406
msgid ""
"High and low 32 bits of *execute mask* may be accessed as separate registers:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:411
msgid "exec_lo"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:411
msgid "Low 32 bits of *execute mask* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:412
msgid "exec_hi"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:412
msgid "High 32 bits of *execute mask* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:413
msgid "[exec_lo]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:413
msgid "Low 32 bits of *execute mask* register (an alternative syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:414
msgid "[exec_hi]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:414
msgid "High 32 bits of *execute mask* register (an alternative syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:420
msgid "vccz"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:422
msgid ""
"A single bit-flag indicating that the :ref:`vcc<amdgpu_synid_vcc>` is all "
"zeros."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:424 ../../../AMDGPUOperandSyntax.rst:433
#: ../../../AMDGPUOperandSyntax.rst:442 ../../../AMDGPUOperandSyntax.rst:450
msgid "This operand is not currently supported by AMDGPU assembler."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:429
msgid "execz"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:431
msgid ""
"A single bit flag indicating that the :ref:`exec<amdgpu_synid_exec>` is all "
"zeros."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:438
msgid "scc"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:440
msgid "A single bit flag indicating the result of a scalar compare operation."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:445
msgid "lds_direct"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:447
msgid ""
"A special operand which supplies a 32-bit value fetched from *LDS* memory "
"using :ref:`m0<amdgpu_synid_m0>` as an address."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:455
msgid "constant"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:457
msgid "A set of integer and floating-point *inline constants*:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:459
msgid ":ref:`iconst<amdgpu_synid_iconst>`"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:460
msgid ":ref:`fconst<amdgpu_synid_fconst>`"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:462
msgid "These operands are encoded as a part of instruction."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:464 ../../../AMDGPUOperandSyntax.rst:552
msgid ""
"If a number may be encoded as either a :ref:`literal<amdgpu_synid_literal>` "
"or an :ref:`inline constant<amdgpu_synid_constant>`, assembler selects the "
"latter encoding as more efficient."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:472
msgid "iconst"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:474
msgid ""
"An :ref:`integer number<amdgpu_synid_integer_number>` encoded as an *inline "
"constant*."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:477
msgid ""
"Only a small fraction of integer numbers may be encoded as *inline "
"constants*. They are enumerated in the table below. Other integer numbers "
"have to be encoded as :ref:`literals<amdgpu_synid_literal>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:481
msgid ""
"Integer *inline constants* are converted to :ref:`expected operand "
"type<amdgpu_syn_instruction_type>` as described :ref:"
"`here<amdgpu_synid_int_const_conv>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:486 ../../../AMDGPUOperandSyntax.rst:527
msgid "Value"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:486 ../../../AMDGPUOperandSyntax.rst:501
#: ../../../AMDGPUOperandSyntax.rst:527 ../../../AMDGPUOperandSyntax.rst:666
#: ../../../AMDGPUOperandSyntax.rst:951 ../../../AMDGPUOperandSyntax.rst:1005
msgid "Note"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:488
msgid "{0..64}"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:488
msgid "Positive integer inline constants."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:489
msgid "{-16..-1}"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:489
msgid "Negative integer inline constants."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:492 ../../../AMDGPUOperandSyntax.rst:543
msgid "GFX7 does not support inline constants for *f16* operands."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:494
msgid ""
"There are also symbolic inline constants which provide read-only access to H/"
"W registers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:496
msgid "These inline constants are not currently supported by AMDGPU assembler."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:503
msgid "shared_base"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:503
msgid "Base address of shared memory region."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:504
msgid "shared_limit"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:504
msgid "Address of the end of shared memory region."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:505
msgid "private_base"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:505
msgid "Base address of private memory region."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:506
msgid "private_limit"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:506
msgid "Address of the end of private memory region."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:507
msgid "pops_exiting_wave_id"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:507
msgid "A dedicated counter for POPS."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:513
msgid "fconst"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:515
msgid ""
"A :ref:`floating-point number<amdgpu_synid_floating-point_number>` encoded "
"as an *inline constant*."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:518
msgid ""
"Only a small fraction of floating-point numbers may be encoded as *inline "
"constants*. They are enumerated in the table below. Other floating-point "
"numbers have to be encoded as :ref:`literals<amdgpu_synid_literal>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:522
msgid ""
"Floating-point *inline constants* are converted to :ref:`expected operand "
"type<amdgpu_syn_instruction_type>` as described :ref:"
"`here<amdgpu_synid_fp_const_conv>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:529
msgid "0.0"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:529
msgid "The same as integer constant 0."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:529 ../../../AMDGPUOperandSyntax.rst:530
#: ../../../AMDGPUOperandSyntax.rst:531 ../../../AMDGPUOperandSyntax.rst:532
#: ../../../AMDGPUOperandSyntax.rst:533 ../../../AMDGPUOperandSyntax.rst:534
#: ../../../AMDGPUOperandSyntax.rst:535 ../../../AMDGPUOperandSyntax.rst:536
#: ../../../AMDGPUOperandSyntax.rst:537
msgid "All GPUs"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:530
msgid "0.5"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:530
msgid "Floating-point constant 0.5"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:531
msgid "1.0"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:531
msgid "Floating-point constant 1.0"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:532
msgid "2.0"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:532
msgid "Floating-point constant 2.0"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:533
msgid "4.0"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:533
msgid "Floating-point constant 4.0"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:534
msgid "-0.5"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:534
msgid "Floating-point constant -0.5"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:535
msgid "-1.0"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:535
msgid "Floating-point constant -1.0"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:536
msgid "-2.0"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:536
msgid "Floating-point constant -2.0"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:537
msgid "-4.0"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:537
msgid "Floating-point constant -4.0"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:538
msgid "0.1592"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:538
msgid "1.0/(2.0*pi). Use only for 16-bit operands."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:538 ../../../AMDGPUOperandSyntax.rst:539
#: ../../../AMDGPUOperandSyntax.rst:540
msgid "GFX8, GFX9"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:539
msgid "0.15915494"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:539
msgid "1.0/(2.0*pi). Use only for 16- and 32-bit operands."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:540
msgid "0.159154943091895317852646485335"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:540
msgid "1.0/(2.0*pi)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:548
msgid "literal"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:550
msgid ""
"A literal is a 64-bit value which is encoded as a separate 32-bit dword in "
"the instruction stream."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:557
msgid ""
"Literals may be specified as :ref:`integer "
"numbers<amdgpu_synid_integer_number>`, :ref:`floating-point "
"numbers<amdgpu_synid_floating-point_number>` or :ref:"
"`expressions<amdgpu_synid_expression>` (expressions are currently supported "
"for 32-bit operands only)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:562
msgid ""
"A 64-bit literal value is converted by assembler to an :ref:`expected "
"operand type<amdgpu_syn_instruction_type>` as described :ref:"
"`here<amdgpu_synid_lit_conv>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:566
msgid ""
"An instruction may use only one literal but several operands may refer the "
"same literal."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:571
msgid "uimm8"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:573
msgid ""
"A 8-bit positive :ref:`integer number<amdgpu_synid_integer_number>`. The "
"value is encoded as part of the opcode so it is free to use."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:579
msgid "uimm32"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:581
msgid ""
"A 32-bit positive :ref:`integer number<amdgpu_synid_integer_number>`. The "
"value is stored as a separate 32-bit dword in the instruction stream."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:587
msgid "uimm20"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:589
msgid "A 20-bit positive :ref:`integer number<amdgpu_synid_integer_number>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:594
msgid "uimm21"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:596
msgid "A 21-bit positive :ref:`integer number<amdgpu_synid_integer_number>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:598
msgid ""
"Assembler currently supports 20-bit offsets only. Use :ref:"
"`uimm20<amdgpu_synid_uimm20>` as a replacement."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:603
msgid "simm21"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:605
msgid "A 21-bit :ref:`integer number<amdgpu_synid_integer_number>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:607
msgid ""
"Assembler currently supports 20-bit unsigned offsets only .Use :ref:"
"`uimm20<amdgpu_synid_uimm20>` as a replacement."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:612 ../../../AMDGPUOperandSyntax.rst:619
msgid "off"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:614
msgid ""
"A special entity which indicates that the value of this operand is not used."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:619
msgid "Indicates an unused operand."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:626
msgid "Numbers"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:631
msgid "Integer Numbers"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:633
msgid ""
"Integer numbers are 64 bits wide. They may be specified in binary, octal, "
"hexadecimal and decimal formats:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:637 ../../../AMDGPUOperandSyntax.rst:666
msgid "Format"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:639 ../../../AMDGPUOperandSyntax.rst:668
msgid "Decimal"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:639
msgid "[-]?[1-9][0-9]*"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:640
msgid "Binary"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:640
msgid "[-]?0b[01]+"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:641
msgid "Octal"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:641
msgid "[-]?0[0-7]+"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:642 ../../../AMDGPUOperandSyntax.rst:669
msgid "Hexadecimal"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:642
msgid "[-]?0x[0-9a-fA-F]+"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:643
msgid "[-]?[0x]?[0-9][0-9a-fA-F]*[hH]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:659
msgid "Floating-Point Numbers"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:661
msgid "All floating-point numbers are handled as double (64 bits wide)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:663
msgid ""
"Floating-point numbers may be specified in hexadecimal and decimal formats:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:668
msgid "[-]?[0-9]*[.][0-9]*([eE][+-]?[0-9]*)?"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:668
msgid "Must include either a decimal separator or an exponent."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:669
msgid "[-]0x[0-9a-fA-F]*(.[0-9a-fA-F]*)?[pP][+-]?[0-9a-fA-F]+"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:684 ../../../AMDGPUOperandSyntax.rst:1046
msgid "Expressions"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:686
msgid ""
"An expression specifies an address or a numeric value. There are two kinds "
"of expressions:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:689
msgid ":ref:`Absolute<amdgpu_synid_absolute_expression>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:690
msgid ":ref:`Relocatable<amdgpu_synid_relocatable_expression>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:695
msgid "Absolute Expressions"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:697
msgid ""
"The value of an absolute expression remains the same after program "
"relocation. Absolute expressions must not include unassigned and relocatable "
"values such as labels."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:711
msgid "Relocatable Expressions"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:713
msgid "The value of a relocatable expression depends on program relocation."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:715
msgid ""
"Note that use of relocatable expressions is limited with branch targets and "
"32-bit :ref:`literals<amdgpu_synid_literal>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:718
msgid ""
"Addition information about relocation may be found :ref:`here<amdgpu-"
"relocation-records>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:728
msgid "Expression Data Type"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:730
msgid ""
"Expressions and operands of expressions are interpreted as 64-bit integers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:732
msgid ""
"Expressions may include 64-bit :ref:`floating-point "
"numbers<amdgpu_synid_floating-point_number>` (double). However these "
"operands are also handled as 64-bit integers using binary representation of "
"specified floating-point numbers. No conversion from floating-point to "
"integer is performed."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:747
msgid ""
"Expressions are composed of :ref:`symbols<amdgpu_synid_symbol>`, :ref:"
"`integer numbers<amdgpu_synid_integer_number>`, :ref:`floating-point "
"numbers<amdgpu_synid_floating-point_number>`, :ref:`binary "
"operators<amdgpu_synid_expression_bin_op>`, :ref:`unary "
"operators<amdgpu_synid_expression_un_op>` and subexpressions."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:754
msgid ""
"Expressions may also use \".\" which is a reference to the current PC "
"(program counter)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:756
msgid "The syntax of expressions is shown below::"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:791
msgid "Binary Operators"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:793
msgid ""
"Binary operators are described in the following table. They operate on and "
"produce 64-bit integers. Operators with higher priority are performed first."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:798 ../../../AMDGPUOperandSyntax.rst:830
msgid "Operator"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:798
msgid "Priority"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:798 ../../../AMDGPUOperandSyntax.rst:830
#: ../../../AMDGPUOperandSyntax.rst:852
msgid "Meaning"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:800
msgid "\\*"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:800 ../../../AMDGPUOperandSyntax.rst:801
#: ../../../AMDGPUOperandSyntax.rst:802
msgid "5"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:800
msgid "Integer multiplication."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:801
msgid "/"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:801
msgid "Integer division."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:802
msgid "%"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:802
msgid "Integer signed remainder."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:803 ../../../AMDGPUOperandSyntax.rst:834
msgid "\\+"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:803 ../../../AMDGPUOperandSyntax.rst:804
msgid "4"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:803
msgid "Integer addition."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:804 ../../../AMDGPUOperandSyntax.rst:835
#: ../../../AMDGPUOperandSyntax.rst:1009
msgid "\\-"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:804
msgid "Integer subtraction."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:805
msgid "<<"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:805 ../../../AMDGPUOperandSyntax.rst:806
msgid "3"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:805
msgid "Integer shift left."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:806
msgid ">>"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:806
msgid "Logical shift right."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:807
msgid "=="
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:807 ../../../AMDGPUOperandSyntax.rst:808
#: ../../../AMDGPUOperandSyntax.rst:809 ../../../AMDGPUOperandSyntax.rst:810
#: ../../../AMDGPUOperandSyntax.rst:811 ../../../AMDGPUOperandSyntax.rst:812
#: ../../../AMDGPUOperandSyntax.rst:813
msgid "2"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:807
msgid "Equality comparison."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:808
msgid "!="
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:808 ../../../AMDGPUOperandSyntax.rst:809
msgid "Inequality comparison."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:809
msgid "<>"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:810
msgid "<"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:810
msgid "Signed less than comparison."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:811
msgid "<="
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:811
msgid "Signed less than or equal comparison."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:812
msgid ">"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:812
msgid "Signed greater than comparison."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:813
msgid ">="
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:813
msgid "Signed greater than or equal comparison."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:814
msgid "\\|"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:814 ../../../AMDGPUOperandSyntax.rst:815
#: ../../../AMDGPUOperandSyntax.rst:816
msgid "1"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:814
msgid "Bitwise or."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:815
msgid "^"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:815
msgid "Bitwise xor."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:816
msgid "&"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:816
msgid "Bitwise and."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:817
msgid "&&"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:817 ../../../AMDGPUOperandSyntax.rst:818
msgid "0"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:817
msgid "Logical and."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:818
msgid "||"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:818
msgid "Logical or."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:824
msgid "Unary Operators"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:826
msgid ""
"Unary operators are described in the following table. They operate on and "
"produce 64-bit integers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:832
msgid "!"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:832
msgid "Logical negation."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:833
msgid "~"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:833
msgid "Bitwise negation."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:834
msgid "Integer unary plus."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:835
msgid "Integer unary minus."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:841
msgid "Symbols"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:843
msgid ""
"A symbol is a named 64-bit value, representing a relocatable address or an "
"absolute (non-relocatable) number."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:847
msgid "Symbol names have the following syntax:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:847
msgid "``[a-zA-Z_.][a-zA-Z0-9_$.@]*``"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:849
msgid ""
"The table below provides several examples of syntax used for symbol "
"definition."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:854
msgid ".globl <S>"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:854
msgid "Declares a global symbol S without assigning it a value."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:855
msgid ".set <S>, <E>"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:855 ../../../AMDGPUOperandSyntax.rst:856
msgid "Assigns the value of an expression E to a symbol S."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:856
msgid "<S> = <E>"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:857
msgid "<S>:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:857
msgid "Declares a label S and assigns it the current PC value."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:860
msgid ""
"A symbol may be used before it is declared or assigned; unassigned symbols "
"are assumed to be PC-relative."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:863
msgid ""
"Addition information about symbols may be found :ref:`here<amdgpu-symbols>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:868
msgid "Conversions"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:870
msgid ""
"This section describes what happens when a 64-bit :ref:`integer "
"number<amdgpu_synid_integer_number>`, a :ref:`floating-point "
"numbers<amdgpu_synid_floating-point_number>` or a :ref:"
"`symbol<amdgpu_synid_symbol>` is used for an operand which has a different "
"type or size."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:876
msgid ""
"Depending on operand kind, this conversion is performed by either assembler "
"or AMDGPU H/W:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:878
msgid ""
"Values encoded as :ref:`inline constants<amdgpu_synid_constant>` are handled "
"by H/W."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:879
msgid ""
"Values encoded as :ref:`literals<amdgpu_synid_literal>` are converted by "
"assembler."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:884
msgid "Inline Constants"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:889
msgid "Integer Inline Constants"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:891
msgid ""
"Integer :ref:`inline constants<amdgpu_synid_constant>` may be thought of as "
"64-bit :ref:`integer numbers<amdgpu_synid_integer_number>`; when used as "
"operands they are truncated to the size of :ref:`expected operand "
"type<amdgpu_syn_instruction_type>`. No data type conversions are performed."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:913
msgid "Floating-Point Inline Constants"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:915
msgid ""
"Floating-point :ref:`inline constants<amdgpu_synid_constant>` may be thought "
"of as 64-bit :ref:`floating-point numbers<amdgpu_synid_floating-"
"point_number>`; when used as operands they are converted to a floating-point "
"number of :ref:`expected operand size<amdgpu_syn_instruction_type>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:937
msgid "Literals"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:942
msgid "Integer Literals"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:944
msgid ""
"Integer :ref:`literals<amdgpu_synid_literal>` are specified as 64-bit :ref:"
"`integer numbers<amdgpu_synid_integer_number>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:947 ../../../AMDGPUOperandSyntax.rst:1001
msgid ""
"When used as operands they are converted to :ref:`expected operand "
"type<amdgpu_syn_instruction_type>` as described below."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:951 ../../../AMDGPUOperandSyntax.rst:1005
msgid "Expected type"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:951 ../../../AMDGPUOperandSyntax.rst:1005
msgid "Condition"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:951 ../../../AMDGPUOperandSyntax.rst:1005
msgid "Result"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:953 ../../../AMDGPUOperandSyntax.rst:1007
msgid "i16, u16, b16"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:953 ../../../AMDGPUOperandSyntax.rst:957
#: ../../../AMDGPUOperandSyntax.rst:1007 ../../../AMDGPUOperandSyntax.rst:1010
msgid "cond(num,16)"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:953 ../../../AMDGPUOperandSyntax.rst:957
msgid "num.u16"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:953
msgid "Truncate to 16 bits."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:954 ../../../AMDGPUOperandSyntax.rst:1008
msgid "i32, u32, b32"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:954 ../../../AMDGPUOperandSyntax.rst:955
#: ../../../AMDGPUOperandSyntax.rst:956 ../../../AMDGPUOperandSyntax.rst:958
#: ../../../AMDGPUOperandSyntax.rst:959 ../../../AMDGPUOperandSyntax.rst:1008
#: ../../../AMDGPUOperandSyntax.rst:1011
msgid "cond(num,32)"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:954 ../../../AMDGPUOperandSyntax.rst:958
msgid "num.u32"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:954
msgid "Truncate to 32 bits."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:955
msgid "i64"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:955
msgid "{-1,num.i32}"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:955
msgid "Truncate to 32 bits and then sign-extend the result to 64 bits."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:956
msgid "u64, b64"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:956
msgid "{ 0,num.u32}"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:956
msgid "Truncate to 32 bits and then zero-extend the result to 64 bits."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:957 ../../../AMDGPUOperandSyntax.rst:1010
msgid "f16"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:957
msgid "Use low 16 bits as an f16 value."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:958 ../../../AMDGPUOperandSyntax.rst:1011
msgid "f32"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:958
msgid "Use low 32 bits as an f32 value."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:959 ../../../AMDGPUOperandSyntax.rst:1012
msgid "f64"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:959
msgid "{num.u32,0}"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:959
msgid ""
"Use low 32 bits of the number as high 32 bits of the result; low 32 bits of "
"the result are zeroed."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:963
msgid ""
"The condition *cond(X,S)* indicates if a 64-bit number *X* can be converted "
"to a smaller size *S* by truncation of upper bits. There are two cases when "
"the conversion is possible:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:967
msgid "The truncated bits are all 0."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:968
msgid ""
"The truncated bits are all 1 and the value after truncation has its MSB bit "
"set."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:970 ../../../AMDGPUOperandSyntax.rst:1022
msgid "Examples of valid literals:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:984 ../../../AMDGPUOperandSyntax.rst:1035
msgid "Examples of invalid literals:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:996
msgid "Floating-Point Literals"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:998
msgid ""
"Floating-point :ref:`literals<amdgpu_synid_literal>` are specified as 64-"
"bit :ref:`floating-point numbers<amdgpu_synid_floating-point_number>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1007 ../../../AMDGPUOperandSyntax.rst:1010
msgid "f16(num)"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1007
msgid "Convert to f16 and use bits of the result as an integer value."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1008 ../../../AMDGPUOperandSyntax.rst:1011
msgid "f32(num)"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1008
msgid "Convert to f32 and use bits of the result as an integer value."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1009
msgid "i64, u64, b64"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1009
msgid "false"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1009
msgid "Conversion disabled because of an unclear semantics."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1010
msgid "Convert to f16."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1011
msgid "Convert to f32."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1012
msgid "true"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1012
msgid "{num.u32.hi,0}"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1012
msgid ""
"Use high 32 bits of the number as high 32 bits of the result; zero-fill low "
"32 bits of the result."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1015
msgid "Note that the result may differ from the original number."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1018
msgid ""
"The condition *cond(X,S)* indicates if an f64 number *X* can be converted to "
"a smaller *S*-bit floating-point type without overflow or underflow. "
"Precision lost is allowed."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1048
msgid "Expressions operate with and result in 64-bit integers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1050
msgid ""
"When used as operands they are truncated to :ref:`expected operand "
"size<amdgpu_syn_instruction_type>`. No data type conversions are performed."
msgstr ""
