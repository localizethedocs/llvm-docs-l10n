# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr_FR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../ReleaseNotes.rst:3
msgid "LLVM 8.0.0 Release Notes"
msgstr ""

#: ../../../ReleaseNotes.rst:9
msgid "Introduction"
msgstr ""

#: ../../../ReleaseNotes.rst:11
msgid ""
"This document contains the release notes for the LLVM Compiler "
"Infrastructure, release 8.0.0.  Here we describe the status of LLVM, "
"including major improvements from the previous release, improvements in "
"various subprojects of LLVM, and some of the current users of the code.  All "
"LLVM releases may be downloaded from the `LLVM releases web site <https://"
"releases.llvm.org/>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:17
msgid ""
"For more information about LLVM, including information about the latest "
"release, please check out the `main LLVM web site <https://llvm.org/>`_.  If "
"you have questions or comments, the `LLVM Developer's Mailing List <https://"
"lists.llvm.org/mailman/listinfo/llvm-dev>`_ is a good place to send them."
msgstr ""

#: ../../../ReleaseNotes.rst:24
msgid "Minimum Required Compiler Version"
msgstr ""

#: ../../../ReleaseNotes.rst:25
msgid ""
"As `discussed on the mailing list <https://lists.llvm.org/pipermail/llvm-"
"dev/2019-January/129452.html>`_, building LLVM will soon require more recent "
"toolchains as follows:"
msgstr ""

#: ../../../ReleaseNotes.rst:30
msgid "Clang"
msgstr ""

#: ../../../ReleaseNotes.rst:30
msgid "3.5"
msgstr ""

#: ../../../ReleaseNotes.rst:31
msgid "Apple Clang"
msgstr ""

#: ../../../ReleaseNotes.rst:31
msgid "6.0"
msgstr ""

#: ../../../ReleaseNotes.rst:32
msgid "GCC"
msgstr ""

#: ../../../ReleaseNotes.rst:32
msgid "5.1"
msgstr ""

#: ../../../ReleaseNotes.rst:33
msgid "Visual Studio"
msgstr ""

#: ../../../ReleaseNotes.rst:33
msgid "2017"
msgstr ""

#: ../../../ReleaseNotes.rst:36
msgid ""
"A new CMake check when configuring LLVM provides a soft-error if your "
"toolchain will become unsupported soon. You can opt out of the soft-error by "
"setting the ``LLVM_TEMPORARILY_ALLOW_OLD_TOOLCHAIN`` CMake variable to "
"``ON``."
msgstr ""

#: ../../../ReleaseNotes.rst:43
msgid "Known Issues"
msgstr ""

#: ../../../ReleaseNotes.rst:45
msgid ""
"These are issues that couldn't be fixed before the release. See the bug "
"reports for the latest status."
msgstr ""

#: ../../../ReleaseNotes.rst:48
msgid ""
"`PR40547 <https://llvm.org/pr40547>`_ Clang gets miscompiled by trunk GCC."
msgstr ""

#: ../../../ReleaseNotes.rst:50
msgid ""
"`PR40761 <https://llvm.org/pr40761>`_ \"asan-dynamic\" doesn't work on "
"FreeBSD."
msgstr ""

#: ../../../ReleaseNotes.rst:54
msgid "Non-comprehensive list of changes in this release"
msgstr ""

#: ../../../ReleaseNotes.rst:56
msgid ""
"The **llvm-cov** tool can now export lcov trace files using the `-"
"format=lcov` option of the `export` command."
msgstr ""

#: ../../../ReleaseNotes.rst:59
msgid ""
"The ``add_llvm_loadable_module`` CMake macro has been removed.  The "
"``add_llvm_library`` macro with the ``MODULE`` argument now provides the "
"same functionality.  See `Writing an LLVM Pass <WritingAnLLVMPass."
"html#setting-up-the-build-environment>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:64
msgid ""
"For MinGW, references to data variables that might need to be imported from "
"a dll are accessed via a stub, to allow the linker to convert it to a "
"dllimport if needed."
msgstr ""

#: ../../../ReleaseNotes.rst:68
msgid "Added support for labels as offsets in ``.reloc`` directive."
msgstr ""

#: ../../../ReleaseNotes.rst:70
msgid ""
"Support for precise identification of X86 instructions with memory operands, "
"by using debug information. This supports profile-driven cache prefetching. "
"It is enabled with the ``-x86-discriminate-memops`` LLVM Flag."
msgstr ""

#: ../../../ReleaseNotes.rst:74
msgid ""
"Support for profile-driven software cache prefetching on X86. This is part "
"of a larger system, consisting of: an offline cache prefetches recommender, "
"AutoFDO tooling, and LLVM. In this system, a binary compiled with ``-x86-"
"discriminate-memops`` is run under the observation of the recommender. The "
"recommender identifies certain memory access instructions by their binary "
"file address, and recommends a prefetch of a specific type (NTA, T0, etc) be "
"performed at a specified fixed offset from such an instruction's memory "
"operand. Next, this information needs to be converted to the AutoFDO syntax "
"and the resulting profile may be passed back to the compiler with the LLVM "
"flag ``-prefetch-hints-file``, together with the exact same set of "
"compilation parameters used for the original binary. More information is "
"available in the `RFC <https://lists.llvm.org/pipermail/llvm-dev/2018-"
"November/127461.html>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:88
msgid "Windows support for libFuzzer (x86_64)."
msgstr ""

#: ../../../ReleaseNotes.rst:91
msgid "Changes to the LLVM IR"
msgstr ""

#: ../../../ReleaseNotes.rst:93
msgid ""
"Function attribute ``speculative_load_hardening`` has been introduced to "
"allow indicating that `Speculative Load Hardening <SpeculativeLoadHardening."
"html>`_ must be enabled for the function body."
msgstr ""

#: ../../../ReleaseNotes.rst:99
msgid "Changes to the JIT APIs"
msgstr ""

#: ../../../ReleaseNotes.rst:101
msgid ""
"The ORC (On Request Compilation) JIT APIs have been updated to support "
"concurrent compilation. The existing (non-concurrent) ORC layer classes and "
"related APIs are deprecated, have been renamed with a \"Legacy\" prefix (e."
"g. LegacyIRCompileLayer). The deprecated clasess will be removed in LLVM 9."
msgstr ""

#: ../../../ReleaseNotes.rst:106
msgid ""
"An example JIT stack using the concurrent ORC APIs, called LLJIT, has been "
"added (see include/llvm/ExecutionEngine/Orc/LLJIT.h). The lli tool has been "
"updated to use LLJIT."
msgstr ""

#: ../../../ReleaseNotes.rst:110
msgid ""
"MCJIT and ExecutionEngine continue to be supported, though ORC should be "
"preferred for new projects."
msgstr ""

#: ../../../ReleaseNotes.rst:114
msgid "Changes to the C++ APIs"
msgstr ""

#: ../../../ReleaseNotes.rst:116
msgid ""
"Three of the IR library methods related to debugging information for "
"functions and methods have changed their prototypes:"
msgstr ""

#: ../../../ReleaseNotes.rst:119
msgid ""
"DIBuilder::createMethod DIBuilder::createFunction DIBuilder::"
"createTempFunctionFwdDecl"
msgstr ""

#: ../../../ReleaseNotes.rst:123
msgid ""
"In all cases, several individual parameters were removed, and replaced by a "
"single 'SPFlags' (subprogram flags) parameter. The individual parameters "
"are: 'isLocalToUnit'; 'isDefinition'; 'isOptimized'; and for 'createMethod', "
"'Virtuality'.  The new 'SPFlags' parameter has a default value equivalent to "
"passing 'false' for the three 'bool' parameters, and zero (non-virtual) to "
"the 'Virtuality' parameter.  For any old-style API call that passed 'true' "
"or a non-zero virtuality to these methods, you will need to substitute the "
"correct 'SPFlags' value. The helper method 'DISubprogram::toSPFlags()' might "
"be useful in making this conversion."
msgstr ""

#: ../../../ReleaseNotes.rst:135
msgid "Changes to the AArch64 Target"
msgstr ""

#: ../../../ReleaseNotes.rst:137
msgid "Support for Speculative Load Hardening has been added."
msgstr ""

#: ../../../ReleaseNotes.rst:139
msgid ""
"Initial support for the Tiny code model, where code and its statically "
"defined symbols must live within 1MB of each other."
msgstr ""

#: ../../../ReleaseNotes.rst:142
msgid ""
"Added support for the ``.arch_extension`` assembler directive, just like on "
"ARM."
msgstr ""

#: ../../../ReleaseNotes.rst:147
msgid "Changes to the Hexagon Target"
msgstr ""

#: ../../../ReleaseNotes.rst:149
msgid "Added support for Hexagon/HVX V66 ISA."
msgstr ""

#: ../../../ReleaseNotes.rst:153
msgid "Changes to the MIPS Target"
msgstr ""

#: ../../../ReleaseNotes.rst:155
msgid "Improved support of GlobalISel instruction selection framework."
msgstr ""

#: ../../../ReleaseNotes.rst:157
msgid ""
"Implemented emission of ``R_MIPS_JALR`` and ``R_MICROMIPS_JALR`` "
"relocations. These relocations provide hints to a linker for optimization of "
"jumps to protected symbols."
msgstr ""

#: ../../../ReleaseNotes.rst:161
msgid "ORC JIT has been supported for MIPS and MIPS64 architectures."
msgstr ""

#: ../../../ReleaseNotes.rst:163
msgid ""
"Assembler now suggests alternative MIPS instruction mnemonics when an "
"invalid one is specified."
msgstr ""

#: ../../../ReleaseNotes.rst:166
msgid "Improved support for MIPS N32 ABI."
msgstr ""

#: ../../../ReleaseNotes.rst:168
msgid ""
"Added new instructions (``pll.ps``, ``plu.ps``, ``cvt.s.pu``, ``cvt.s.pl``, "
"``cvt.ps``, ``sigrie``)."
msgstr ""

#: ../../../ReleaseNotes.rst:171
msgid "Numerous bug fixes and code cleanups."
msgstr ""

#: ../../../ReleaseNotes.rst:175
msgid "Changes to the PowerPC Target"
msgstr ""

#: ../../../ReleaseNotes.rst:177
msgid "Switched to non-PIC default"
msgstr ""

#: ../../../ReleaseNotes.rst:179
msgid "Deprecated Darwin support"
msgstr ""

#: ../../../ReleaseNotes.rst:181
msgid "Enabled Out-of-Order scheduling for P9"
msgstr ""

#: ../../../ReleaseNotes.rst:183
msgid "Better overload rules for compatible vector type parameter"
msgstr ""

#: ../../../ReleaseNotes.rst:185
msgid "Support constraint 'wi', modifier 'x' and VSX registers in inline asm"
msgstr ""

#: ../../../ReleaseNotes.rst:187
msgid "More ``__float128`` support"
msgstr ""

#: ../../../ReleaseNotes.rst:189
msgid ""
"Added new builtins like vector int128 ``pack``/``unpack`` and ``stxvw4x.be``/"
"``stxvd2x.be``"
msgstr ""

#: ../../../ReleaseNotes.rst:192
msgid "Provided significant improvements to the automatic vectorizer"
msgstr ""

#: ../../../ReleaseNotes.rst:194
msgid "Code-gen improvements (especially for Power9)"
msgstr ""

#: ../../../ReleaseNotes.rst:196
msgid "Fixed some long-standing bugs in the back end"
msgstr ""

#: ../../../ReleaseNotes.rst:198
msgid "Added experimental prologue/epilogue improvements"
msgstr ""

#: ../../../ReleaseNotes.rst:200
msgid "Enabled builtins tests in compiler-rt"
msgstr ""

#: ../../../ReleaseNotes.rst:202
msgid ""
"Add ``___fixunstfti``/``floattitf`` in compiler-rt to support conversion "
"between IBM double-double and unsigned int128"
msgstr ""

#: ../../../ReleaseNotes.rst:205
msgid ""
"Disable randomized address space when running the sanitizers on Linux ppc64le"
msgstr ""

#: ../../../ReleaseNotes.rst:207
msgid "Completed support in LLD for ELFv2"
msgstr ""

#: ../../../ReleaseNotes.rst:209
msgid "Enabled llvm-exegesis latency mode for PPC"
msgstr ""

#: ../../../ReleaseNotes.rst:213
msgid "Changes to the SystemZ Target"
msgstr ""

#: ../../../ReleaseNotes.rst:215
msgid ""
"A number of bugs related to C/C++ language vector extension support were "
"fixed: the ``-mzvector`` option now actually enables the ``__vector`` and "
"``__bool`` keywords, the ``vec_step`` intrinsic now works, and the "
"``vec_insert_and_zero`` and ``vec_orc`` intrinsics now generate correct code."
msgstr ""

#: ../../../ReleaseNotes.rst:220
msgid ""
"The ``__float128`` keyword, which had been accidentally enabled in some "
"earlier releases, is now no longer supported.  On SystemZ, the ``long "
"double`` data type itself already uses the IEEE 128-bit floating-point "
"format."
msgstr ""

#: ../../../ReleaseNotes.rst:224
msgid ""
"When the compiler inlines ``strcmp`` or ``memcmp``, the generated code no "
"longer returns ``INT_MIN`` as the negative result value under any "
"circumstances."
msgstr ""

#: ../../../ReleaseNotes.rst:228
msgid ""
"Various code-gen improvements, in particular related to improved auto-"
"vectorization, inlining, and instruction scheduling."
msgstr ""

#: ../../../ReleaseNotes.rst:233
msgid "Changes to the X86 Target"
msgstr ""

#: ../../../ReleaseNotes.rst:235
msgid ""
"Machine model for AMD bdver2 (Piledriver) CPU was added. It is used to "
"support instruction scheduling and other instruction cost heuristics."
msgstr ""

#: ../../../ReleaseNotes.rst:238
msgid ""
"New AVX512F gather and scatter intrinsics were added that take a <X x i1> "
"mask instead of a scalar integer. This removes the need for a bitcast in IR. "
"The new intrinsics are named like the old intrinsics with ``llvm.avx512.`` "
"replaced with ``llvm.avx512.mask.``. The old intrinsics will be removed in a "
"future release."
msgstr ""

#: ../../../ReleaseNotes.rst:244
msgid ""
"Added ``cascadelake`` as a CPU name for -march. This is ``skylake-avx512`` "
"with the addition of the ``avx512vnni`` instruction set."
msgstr ""

#: ../../../ReleaseNotes.rst:247
msgid ""
"ADCX instruction will no longer be emitted. This instruction is rarely "
"better than the legacy ADC instruction and just increased code size."
msgstr ""

#: ../../../ReleaseNotes.rst:252
msgid "Changes to the WebAssembly Target"
msgstr ""

#: ../../../ReleaseNotes.rst:254
msgid ""
"The WebAssembly target is no longer \"experimental\"! It's now built by "
"default, rather than needing to be enabled with "
"LLVM_EXPERIMENTAL_TARGETS_TO_BUILD."
msgstr ""

#: ../../../ReleaseNotes.rst:257
msgid ""
"The object file format and core C ABI are now considered stable. That said, "
"the object file format has an ABI versioning capability, and one anticipated "
"use for it will be to add support for returning small structs as multiple "
"return values, once the underlying WebAssembly platform itself supports it. "
"Additionally, multithreading support is not yet included in the stable ABI."
msgstr ""

#: ../../../ReleaseNotes.rst:265
msgid "Changes to the Nios2 Target"
msgstr ""

#: ../../../ReleaseNotes.rst:267
msgid "The Nios2 target was removed from this release."
msgstr ""

#: ../../../ReleaseNotes.rst:271
msgid "Changes to LLDB"
msgstr ""

#: ../../../ReleaseNotes.rst:273
msgid ""
"Printed source code is now syntax highlighted in the terminal (only for C "
"languages)."
msgstr ""

#: ../../../ReleaseNotes.rst:276
msgid "The expression command now supports tab completing expressions."
msgstr ""

#: ../../../ReleaseNotes.rst:280
msgid "External Open Source Projects Using LLVM 8"
msgstr ""

#: ../../../ReleaseNotes.rst:283
msgid "LDC - the LLVM-based D compiler"
msgstr ""

#: ../../../ReleaseNotes.rst:285
msgid ""
"`D <http://dlang.org>`_ is a language with C-like syntax and static typing. "
"It pragmatically combines efficiency, control, and modeling power, with "
"safety and programmer productivity. D supports powerful concepts like "
"Compile-Time Function Execution (CTFE) and Template Meta-Programming, "
"provides an innovative approach to concurrency and offers many classical "
"paradigms."
msgstr ""

#: ../../../ReleaseNotes.rst:291
msgid ""
"`LDC <http://wiki.dlang.org/LDC>`_ uses the frontend from the reference "
"compiler combined with LLVM as backend to produce efficient native code. LDC "
"targets x86/x86_64 systems like Linux, OS X, FreeBSD and Windows and also "
"Linux on ARM and PowerPC (32/64 bit). Ports to other architectures like "
"AArch64 and MIPS64 are underway."
msgstr ""

#: ../../../ReleaseNotes.rst:298
msgid "Open Dylan Compiler"
msgstr ""

#: ../../../ReleaseNotes.rst:300
msgid ""
"`Dylan <https://opendylan.org/>`_ is a multi-paradigm functional and object-"
"oriented programming language.  It is dynamic while providing a programming "
"model designed to support efficient machine code generation, including fine-"
"grained control over dynamic and static behavior. Dylan also features a "
"powerful macro facility for expressive metaprogramming."
msgstr ""

#: ../../../ReleaseNotes.rst:307
msgid ""
"The Open Dylan compiler can use LLVM as one of its code-generating back-"
"ends, including full support for debug info generation. (Open Dylan "
"generates LLVM bitcode directly using a native Dylan IR and bitcode "
"library.) Development of a Dylan debugger and interactive REPL making use of "
"the LLDB libraries is in progress."
msgstr ""

#: ../../../ReleaseNotes.rst:314
msgid "Zig Programming Language"
msgstr ""

#: ../../../ReleaseNotes.rst:316
msgid ""
"`Zig <https://ziglang.org>`_  is a system programming language intended to "
"be an alternative to C. It provides high level features such as generics, "
"compile time function execution, and partial evaluation, while exposing low "
"level LLVM IR features such as aliases and intrinsics. Zig uses Clang to "
"provide automatic import of .h symbols, including inline functions and "
"simple macros. Zig uses LLD combined with lazily building compiler-rt to "
"provide out-of-the-box cross-compiling for all supported targets."
msgstr ""

#: ../../../ReleaseNotes.rst:326
msgid "Additional Information"
msgstr ""

#: ../../../ReleaseNotes.rst:328
msgid ""
"A wide variety of additional information is available on the `LLVM web page "
"<https://llvm.org/>`_, in particular in the `documentation <https://llvm.org/"
"docs/>`_ section.  The web page also contains versions of the API "
"documentation which is up-to-date with the Subversion version of the source "
"code.  You can access versions of these documents specific to this release "
"by going into the ``llvm/docs/`` directory in the LLVM tree."
msgstr ""

#: ../../../ReleaseNotes.rst:335
msgid ""
"If you have any questions or comments about LLVM, please feel free to "
"contact us via the `mailing lists <https://llvm.org/docs/#mailing-lists>`_."
msgstr ""
