# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr_FR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../TestingGuide.rst:3
msgid "LLVM Testing Infrastructure Guide"
msgstr ""

#: ../../../TestingGuide.rst:15
msgid "Overview"
msgstr ""

#: ../../../TestingGuide.rst:17
msgid ""
"This document is the reference manual for the LLVM testing infrastructure. "
"It documents the structure of the LLVM testing infrastructure, the tools "
"needed to use it, and how to add and run tests."
msgstr ""

#: ../../../TestingGuide.rst:23
msgid "Requirements"
msgstr ""

#: ../../../TestingGuide.rst:25
msgid ""
"In order to use the LLVM testing infrastructure, you will need all of the "
"software required to build LLVM, as well as `Python <http://python.org>`_ "
"2.7 or later."
msgstr ""

#: ../../../TestingGuide.rst:30
msgid "LLVM Testing Infrastructure Organization"
msgstr ""

#: ../../../TestingGuide.rst:32
msgid ""
"The LLVM testing infrastructure contains two major categories of tests: "
"regression tests and whole programs. The regression tests are contained "
"inside the LLVM repository itself under ``llvm/test`` and are expected to "
"always pass -- they should be run before every commit."
msgstr ""

#: ../../../TestingGuide.rst:37
msgid ""
"The whole programs tests are referred to as the \"LLVM test suite\" (or "
"\"test-suite\") and are in the ``test-suite`` module in subversion. For "
"historical reasons, these tests are also referred to as the \"nightly "
"tests\" in places, which is less ambiguous than \"test-suite\" and remains "
"in use although we run them much more often than nightly."
msgstr ""

#: ../../../TestingGuide.rst:44 ../../../TestingGuide.rst:102
msgid "Regression tests"
msgstr ""

#: ../../../TestingGuide.rst:46
msgid ""
"The regression tests are small pieces of code that test a specific feature "
"of LLVM or trigger a specific bug in LLVM. The language they are written in "
"depends on the part of LLVM being tested. These tests are driven by the :doc:"
"`Lit <CommandGuide/lit>` testing tool (which is part of LLVM), and are "
"located in the ``llvm/test`` directory."
msgstr ""

#: ../../../TestingGuide.rst:52
msgid ""
"Typically when a bug is found in LLVM, a regression test containing just "
"enough code to reproduce the problem should be written and placed somewhere "
"underneath this directory. For example, it can be a small piece of LLVM IR "
"distilled from an actual application or benchmark."
msgstr ""

#: ../../../TestingGuide.rst:58
msgid "``test-suite``"
msgstr ""

#: ../../../TestingGuide.rst:60
msgid ""
"The test suite contains whole programs, which are pieces of code which can "
"be compiled and linked into a stand-alone program that can be executed. "
"These programs are generally written in high level languages such as C or C+"
"+."
msgstr ""

#: ../../../TestingGuide.rst:65
msgid ""
"These programs are compiled using a user specified compiler and set of "
"flags, and then executed to capture the program output and timing "
"information. The output of these programs is compared to a reference output "
"to ensure that the program is being compiled correctly."
msgstr ""

#: ../../../TestingGuide.rst:70
msgid ""
"In addition to compiling and executing programs, whole program tests serve "
"as a way of benchmarking LLVM performance, both in terms of the efficiency "
"of the programs generated as well as the speed with which LLVM compiles, "
"optimizes, and generates code."
msgstr ""

#: ../../../TestingGuide.rst:75
msgid "The test-suite is located in the ``test-suite`` Subversion module."
msgstr ""

#: ../../../TestingGuide.rst:77
msgid "See the :doc:`TestSuiteGuide` for details."
msgstr ""

#: ../../../TestingGuide.rst:80 ../../../TestingGuide.rst:144
msgid "Debugging Information tests"
msgstr ""

#: ../../../TestingGuide.rst:82
msgid ""
"The test suite contains tests to check quality of debugging information. The "
"test are written in C based languages or in LLVM assembly language."
msgstr ""

#: ../../../TestingGuide.rst:85
msgid ""
"These tests are compiled and run under a debugger. The debugger output is "
"checked to validate of debugging information. See README.txt in the test "
"suite for more information . This test suite is located in the ``debuginfo-"
"tests`` Subversion module."
msgstr ""

#: ../../../TestingGuide.rst:91
msgid "Quick start"
msgstr ""

#: ../../../TestingGuide.rst:93
msgid ""
"The tests are located in two separate Subversion modules. The regressions "
"tests are in the main \"llvm\" module under the directory ``llvm/test`` (so "
"you get these tests for free with the main LLVM tree). Use ``make check-"
"all`` to run the regression tests after building LLVM."
msgstr ""

#: ../../../TestingGuide.rst:98
msgid ""
"The ``test-suite`` module contains more comprehensive tests including whole "
"C and C++ programs. See the :doc:`TestSuiteGuide` for details."
msgstr ""

#: ../../../TestingGuide.rst:104
msgid "To run all of the LLVM regression tests use the check-llvm target:"
msgstr ""

#: ../../../TestingGuide.rst:110
msgid ""
"If you have `Clang <http://clang.llvm.org/>`_ checked out and built, you can "
"run the LLVM and Clang tests simultaneously using:"
msgstr ""

#: ../../../TestingGuide.rst:117
msgid ""
"To run the tests with Valgrind (Memcheck by default), use the ``LIT_ARGS`` "
"make variable to pass the required options to lit. For example, you can use:"
msgstr ""

#: ../../../TestingGuide.rst:124
msgid "to enable testing with valgrind and with leak checking enabled."
msgstr ""

#: ../../../TestingGuide.rst:126
msgid ""
"To run individual tests or subsets of tests, you can use the ``llvm-lit`` "
"script which is built as part of LLVM. For example, to run the ``Integer/"
"BitPacked.ll`` test by itself you can run:"
msgstr ""

#: ../../../TestingGuide.rst:134
msgid "or to run all of the ARM CodeGen tests:"
msgstr ""

#: ../../../TestingGuide.rst:140
msgid ""
"For more information on using the :program:`lit` tool, see ``llvm-lit --"
"help`` or the :doc:`lit man page <CommandGuide/lit>`."
msgstr ""

#: ../../../TestingGuide.rst:146
msgid ""
"To run debugging information tests simply checkout the tests inside clang/"
"test directory."
msgstr ""

#: ../../../TestingGuide.rst:154
msgid ""
"These tests are already set up to run as part of clang regression tests."
msgstr ""

#: ../../../TestingGuide.rst:157
msgid "Regression test structure"
msgstr ""

#: ../../../TestingGuide.rst:159
msgid ""
"The LLVM regression tests are driven by :program:`lit` and are located in "
"the ``llvm/test`` directory."
msgstr ""

#: ../../../TestingGuide.rst:162
msgid ""
"This directory contains a large array of small tests that exercise various "
"features of LLVM and to ensure that regressions do not occur. The directory "
"is broken into several sub-directories, each focused on a particular area of "
"LLVM."
msgstr ""

#: ../../../TestingGuide.rst:168
msgid "Writing new regression tests"
msgstr ""

#: ../../../TestingGuide.rst:170
msgid ""
"The regression test structure is very simple, but does require some "
"information to be set. This information is gathered via ``configure`` and is "
"written to a file, ``test/lit.site.cfg`` in the build directory. The ``llvm/"
"test`` Makefile does this work for you."
msgstr ""

#: ../../../TestingGuide.rst:175
msgid ""
"In order for the regression tests to work, each directory of tests must have "
"a ``lit.local.cfg`` file. :program:`lit` looks for this file to determine "
"how to run the tests. This file is just Python code and thus is very "
"flexible, but we've standardized it for the LLVM regression tests. If you're "
"adding a directory of tests, just copy ``lit.local.cfg`` from another "
"directory to get running. The standard ``lit.local.cfg`` simply specifies "
"which files to look in for tests. Any directory that contains only "
"directories does not need the ``lit.local.cfg`` file. Read the :doc:`Lit "
"documentation <CommandGuide/lit>` for more information."
msgstr ""

#: ../../../TestingGuide.rst:185
msgid ""
"Each test file must contain lines starting with \"RUN:\" that tell :program:"
"`lit` how to run it. If there are no RUN lines, :program:`lit` will issue an "
"error while running a test."
msgstr ""

#: ../../../TestingGuide.rst:189
msgid ""
"RUN lines are specified in the comments of the test program using the "
"keyword ``RUN`` followed by a colon, and lastly the command (pipeline) to "
"execute. Together, these lines form the \"script\" that :program:`lit` "
"executes to run the test case. The syntax of the RUN lines is similar to a "
"shell's syntax for pipelines including I/O redirection and variable "
"substitution. However, even though these lines may *look* like a shell "
"script, they are not. RUN lines are interpreted by :program:`lit`. "
"Consequently, the syntax differs from shell in a few ways. You can specify "
"as many RUN lines as needed."
msgstr ""

#: ../../../TestingGuide.rst:199
msgid ""
":program:`lit` performs substitution on each RUN line to replace LLVM tool "
"names with the full paths to the executable built for each tool (in "
"``$(LLVM_OBJ_ROOT)/$(BuildMode)/bin)``. This ensures that :program:`lit` "
"does not invoke any stray LLVM tools in the user's path during testing."
msgstr ""

#: ../../../TestingGuide.rst:204
msgid ""
"Each RUN line is executed on its own, distinct from other lines unless its "
"last character is ``\\``. This continuation character causes the RUN line to "
"be concatenated with the next one. In this way you can build up long "
"pipelines of commands without making huge line lengths. The lines ending in "
"``\\`` are concatenated until a RUN line that doesn't end in ``\\`` is "
"found. This concatenated set of RUN lines then constitutes one execution. :"
"program:`lit` will substitute variables and arrange for the pipeline to be "
"executed. If any process in the pipeline fails, the entire line (and test "
"case) fails too."
msgstr ""

#: ../../../TestingGuide.rst:214
msgid "Below is an example of legal RUN lines in a ``.ll`` file:"
msgstr ""

#: ../../../TestingGuide.rst:222
msgid ""
"As with a Unix shell, the RUN lines permit pipelines and I/O redirection to "
"be used."
msgstr ""

#: ../../../TestingGuide.rst:225
msgid ""
"There are some quoting rules that you must pay attention to when writing "
"your RUN lines. In general nothing needs to be quoted. :program:`lit` won't "
"strip off any quote characters so they will get passed to the invoked "
"program. To avoid this use curly braces to tell :program:`lit` that it "
"should treat everything enclosed as one value."
msgstr ""

#: ../../../TestingGuide.rst:231
msgid ""
"In general, you should strive to keep your RUN lines as simple as possible, "
"using them only to run tools that generate textual output you can then "
"examine. The recommended way to examine output to figure out if the test "
"passes is using the :doc:`FileCheck tool <CommandGuide/FileCheck>`. *[The "
"usage of grep in RUN lines is deprecated - please do not send or commit "
"patches that use it.]*"
msgstr ""

#: ../../../TestingGuide.rst:237
msgid ""
"Put related tests into a single file rather than having a separate file per "
"test. Check if there are files already covering your feature and consider "
"adding your code there instead of creating a new file."
msgstr ""

#: ../../../TestingGuide.rst:242
msgid "Extra files"
msgstr ""

#: ../../../TestingGuide.rst:244
msgid ""
"If your test requires extra files besides the file containing the ``RUN:`` "
"lines, the idiomatic place to put them is in a subdirectory ``Inputs``. You "
"can then refer to the extra files as ``%S/Inputs/foo.bar``."
msgstr ""

#: ../../../TestingGuide.rst:248
msgid ""
"For example, consider ``test/Linker/ident.ll``. The directory structure is "
"as follows::"
msgstr ""

#: ../../../TestingGuide.rst:258
msgid "For convenience, these are the contents:"
msgstr ""

#: ../../../TestingGuide.rst:284
msgid ""
"For symmetry reasons, ``ident.ll`` is just a dummy file that doesn't "
"actually participate in the test besides holding the ``RUN:`` lines."
msgstr ""

#: ../../../TestingGuide.rst:289
msgid ""
"Some existing tests use ``RUN: true`` in extra files instead of just putting "
"the extra files in an ``Inputs/`` directory. This pattern is deprecated."
msgstr ""

#: ../../../TestingGuide.rst:294
msgid "Fragile tests"
msgstr ""

#: ../../../TestingGuide.rst:296
msgid ""
"It is easy to write a fragile test that would fail spuriously if the tool "
"being tested outputs a full path to the input file.  For example, :program:"
"`opt` by default outputs a ``ModuleID``:"
msgstr ""

#: ../../../TestingGuide.rst:314
msgid ""
"``ModuleID`` can unexpectedly match against ``CHECK`` lines.  For example:"
msgstr ""

#: ../../../TestingGuide.rst:325
msgid "This test will fail if placed into a ``download`` directory."
msgstr ""

#: ../../../TestingGuide.rst:327
msgid ""
"To make your tests robust, always use ``opt ... < %s`` in the RUN line. :"
"program:`opt` does not output a ``ModuleID`` when input comes from stdin."
msgstr ""

#: ../../../TestingGuide.rst:331
msgid "Platform-Specific Tests"
msgstr ""

#: ../../../TestingGuide.rst:333
msgid ""
"Whenever adding tests that require the knowledge of a specific platform, "
"either related to code generated, specific output or back-end features, you "
"must make sure to isolate the features, so that buildbots that run on "
"different architectures (and don't even compile all back-ends), don't fail."
msgstr ""

#: ../../../TestingGuide.rst:339
msgid ""
"The first problem is to check for target-specific output, for example sizes "
"of structures, paths and architecture names, for example:"
msgstr ""

#: ../../../TestingGuide.rst:342
msgid "Tests containing Windows paths will fail on Linux and vice-versa."
msgstr ""

#: ../../../TestingGuide.rst:343
msgid ""
"Tests that check for ``x86_64`` somewhere in the text will fail anywhere "
"else."
msgstr ""

#: ../../../TestingGuide.rst:344
msgid ""
"Tests where the debug information calculates the size of types and "
"structures."
msgstr ""

#: ../../../TestingGuide.rst:346
msgid ""
"Also, if the test rely on any behaviour that is coded in any back-end, it "
"must go in its own directory. So, for instance, code generator tests for ARM "
"go into ``test/CodeGen/ARM`` and so on. Those directories contain a special "
"``lit`` configuration file that ensure all tests in that directory will only "
"run if a specific back-end is compiled and available."
msgstr ""

#: ../../../TestingGuide.rst:352
msgid "For instance, on ``test/CodeGen/ARM``, the ``lit.local.cfg`` is:"
msgstr ""

#: ../../../TestingGuide.rst:360
msgid ""
"Other platform-specific tests are those that depend on a specific feature of "
"a specific sub-architecture, for example only to Intel chips that support "
"``AVX2``."
msgstr ""

#: ../../../TestingGuide.rst:363
msgid ""
"For instance, ``test/CodeGen/X86/psubus.ll`` tests three sub-architecture "
"variants:"
msgstr ""

#: ../../../TestingGuide.rst:372
msgid "And the checks are different:"
msgstr ""

#: ../../../TestingGuide.rst:383
msgid ""
"So, if you're testing for a behaviour that you know is platform-specific or "
"depends on special features of sub-architectures, you must add the specific "
"triple, test with the specific FileCheck and put it into the specific "
"directory that will filter out all other architectures."
msgstr ""

#: ../../../TestingGuide.rst:390
msgid "Constraining test execution"
msgstr ""

#: ../../../TestingGuide.rst:392
msgid ""
"Some tests can be run only in specific configurations, such as with debug "
"builds or on particular platforms. Use ``REQUIRES`` and ``UNSUPPORTED`` to "
"control when the test is enabled."
msgstr ""

#: ../../../TestingGuide.rst:396
msgid ""
"Some tests are expected to fail. For example, there may be a known bug that "
"the test detect. Use ``XFAIL`` to mark a test as an expected failure. An "
"``XFAIL`` test will be successful if its execution fails, and will be a "
"failure if its execution succeeds."
msgstr ""

#: ../../../TestingGuide.rst:410
msgid ""
"``REQUIRES`` and ``UNSUPPORTED`` and ``XFAIL`` all accept a comma-separated "
"list of boolean expressions. The values in each expression may be:"
msgstr ""

#: ../../../TestingGuide.rst:413
msgid ""
"Features added to ``config.available_features`` by configuration files such "
"as ``lit.cfg``."
msgstr ""

#: ../../../TestingGuide.rst:415
msgid "Substrings of the target triple (``UNSUPPORTED`` and ``XFAIL`` only)."
msgstr ""

#: ../../../TestingGuide.rst:417
msgid "``REQUIRES`` enables the test if all expressions are true."
msgstr ""

#: ../../../TestingGuide.rst:418
msgid "``UNSUPPORTED`` disables the test if any expression is true."
msgstr ""

#: ../../../TestingGuide.rst:419
msgid "``XFAIL`` expects the test to fail if any expression is true."
msgstr ""

#: ../../../TestingGuide.rst:421
msgid "As a special case, ``XFAIL: *`` is expected to fail everywhere."
msgstr ""

#: ../../../TestingGuide.rst:433
msgid "Substitutions"
msgstr ""

#: ../../../TestingGuide.rst:435
msgid ""
"Besides replacing LLVM tool names the following substitutions are performed "
"in RUN lines:"
msgstr ""

#: ../../../TestingGuide.rst:439
msgid "``%%``"
msgstr ""

#: ../../../TestingGuide.rst:439
msgid "Replaced by a single ``%``. This allows escaping other substitutions."
msgstr ""

#: ../../../TestingGuide.rst:445
msgid "``%s``"
msgstr ""

#: ../../../TestingGuide.rst:442
msgid ""
"File path to the test case's source. This is suitable for passing on the "
"command line as the input to an LLVM tool."
msgstr ""

#: ../../../TestingGuide.rst:445
msgid "Example: ``/home/user/llvm/test/MC/ELF/foo_test.s``"
msgstr ""

#: ../../../TestingGuide.rst:450
msgid "``%S``"
msgstr ""

#: ../../../TestingGuide.rst:448
msgid "Directory path to the test case's source."
msgstr ""

#: ../../../TestingGuide.rst:450
msgid "Example: ``/home/user/llvm/test/MC/ELF``"
msgstr ""

#: ../../../TestingGuide.rst:458
msgid "``%t``"
msgstr ""

#: ../../../TestingGuide.rst:453
msgid ""
"File path to a temporary file name that could be used for this test case. "
"The file name won't conflict with other test cases. You can append to it if "
"you need multiple temporaries. This is useful as the destination of some "
"redirected output."
msgstr ""

#: ../../../TestingGuide.rst:458
msgid "Example: ``/home/user/llvm.build/test/MC/ELF/Output/foo_test.s.tmp``"
msgstr ""

#: ../../../TestingGuide.rst:466
msgid "``%T``"
msgstr ""

#: ../../../TestingGuide.rst:461
msgid ""
"Directory of ``%t``. Deprecated. Shouldn't be used, because it can be easily "
"misused and cause race conditions between tests."
msgstr ""

#: ../../../TestingGuide.rst:464
msgid ""
"Use ``rm -rf %t && mkdir %t`` instead if a temporary directory is necessary."
msgstr ""

#: ../../../TestingGuide.rst:466
msgid "Example: ``/home/user/llvm.build/test/MC/ELF/Output``"
msgstr ""

#: ../../../TestingGuide.rst:468
msgid "``%{pathsep}``"
msgstr ""

#: ../../../TestingGuide.rst:470
msgid "Expands to the path separator, i.e. ``:`` (or ``;`` on Windows)."
msgstr ""

#: ../../../TestingGuide.rst:472
msgid "``%/s, %/S, %/t, %/T:``"
msgstr ""

#: ../../../TestingGuide.rst:474
msgid ""
"Act like the corresponding substitution above but replace any ``\\`` "
"character with a ``/``. This is useful to normalize path separators."
msgstr ""

#: ../../../TestingGuide.rst:477
msgid "Example: ``%s:  C:\\Desktop Files/foo_test.s.tmp``"
msgstr ""

#: ../../../TestingGuide.rst:479
msgid "Example: ``%/s: C:/Desktop Files/foo_test.s.tmp``"
msgstr ""

#: ../../../TestingGuide.rst:481
msgid "``%:s, %:S, %:t, %:T:``"
msgstr ""

#: ../../../TestingGuide.rst:483
msgid ""
"Act like the corresponding substitution above but remove colons at the "
"beginning of Windows paths. This is useful to allow concatenation of "
"absolute paths on Windows to produce a legal path."
msgstr ""

#: ../../../TestingGuide.rst:487
msgid "Example: ``%s:  C:\\Desktop Files\\foo_test.s.tmp``"
msgstr ""

#: ../../../TestingGuide.rst:489
msgid "Example: ``%:s: C\\Desktop Files\\foo_test.s.tmp``"
msgstr ""

#: ../../../TestingGuide.rst:492
msgid "**LLVM-specific substitutions:**"
msgstr ""

#: ../../../TestingGuide.rst:498
msgid "``%shlibext``"
msgstr ""

#: ../../../TestingGuide.rst:495
msgid ""
"The suffix for the host platforms shared library files. This includes the "
"period as the first character."
msgstr ""

#: ../../../TestingGuide.rst:498
msgid "Example: ``.so`` (Linux), ``.dylib`` (OS X), ``.dll`` (Windows)"
msgstr ""

#: ../../../TestingGuide.rst:504
msgid "``%exeext``"
msgstr ""

#: ../../../TestingGuide.rst:501
msgid ""
"The suffix for the host platforms executable files. This includes the period "
"as the first character."
msgstr ""

#: ../../../TestingGuide.rst:504
msgid "Example: ``.exe`` (Windows), empty on Linux."
msgstr ""

#: ../../../TestingGuide.rst:510
msgid "``%(line)``, ``%(line+<number>)``, ``%(line-<number>)``"
msgstr ""

#: ../../../TestingGuide.rst:507
msgid ""
"The number of the line where this substitution is used, with an optional "
"integer offset. This can be used in tests with multiple RUN lines, which "
"reference test file's line numbers."
msgstr ""

#: ../../../TestingGuide.rst:512
msgid "**Clang-specific substitutions:**"
msgstr ""

#: ../../../TestingGuide.rst:515
msgid "``%clang``"
msgstr ""

#: ../../../TestingGuide.rst:515
msgid "Invokes the Clang driver."
msgstr ""

#: ../../../TestingGuide.rst:518
msgid "``%clang_cpp``"
msgstr ""

#: ../../../TestingGuide.rst:518
msgid "Invokes the Clang driver for C++."
msgstr ""

#: ../../../TestingGuide.rst:521
msgid "``%clang_cl``"
msgstr ""

#: ../../../TestingGuide.rst:521
msgid "Invokes the CL-compatible Clang driver."
msgstr ""

#: ../../../TestingGuide.rst:524
msgid "``%clangxx``"
msgstr ""

#: ../../../TestingGuide.rst:524
msgid "Invokes the G++-compatible Clang driver."
msgstr ""

#: ../../../TestingGuide.rst:527
msgid "``%clang_cc1``"
msgstr ""

#: ../../../TestingGuide.rst:527
msgid "Invokes the Clang frontend."
msgstr ""

#: ../../../TestingGuide.rst:534
msgid "``%itanium_abi_triple``, ``%ms_abi_triple``"
msgstr ""

#: ../../../TestingGuide.rst:530
msgid ""
"These substitutions can be used to get the current target triple adjusted to "
"the desired ABI. For example, if the test suite is running with the ``i686-"
"pc-win32`` target, ``%itanium_abi_triple`` will expand to ``i686-pc-"
"mingw32``. This allows a test to run with a specific ABI without "
"constraining it to a specific triple."
msgstr ""

#: ../../../TestingGuide.rst:536
msgid ""
"To add more substituations, look at ``test/lit.cfg`` or ``lit.local.cfg``."
msgstr ""

#: ../../../TestingGuide.rst:540
msgid "Options"
msgstr ""

#: ../../../TestingGuide.rst:542
msgid ""
"The llvm lit configuration allows to customize some things with user options:"
msgstr ""

#: ../../../TestingGuide.rst:549
msgid "``llc``, ``opt``, ..."
msgstr ""

#: ../../../TestingGuide.rst:545
msgid ""
"Substitute the respective llvm tool name with a custom command line. This "
"allows to specify custom paths and default arguments for these tools. "
"Example:"
msgstr ""

#: ../../../TestingGuide.rst:549
msgid "% llvm-lit \"-Dllc=llc -verify-machineinstrs\""
msgstr ""

#: ../../../TestingGuide.rst:552
msgid "``run_long_tests``"
msgstr ""

#: ../../../TestingGuide.rst:552
msgid "Enable the execution of long running tests."
msgstr ""

#: ../../../TestingGuide.rst:556
msgid "``llvm_site_config``"
msgstr ""

#: ../../../TestingGuide.rst:555
msgid "Load the specified lit configuration instead of the default one."
msgstr ""

#: ../../../TestingGuide.rst:559
msgid "Other Features"
msgstr ""

#: ../../../TestingGuide.rst:561
msgid ""
"To make RUN line writing easier, there are several helper programs. These "
"helpers are in the PATH when running tests, so you can just call them using "
"their name. For example:"
msgstr ""

#: ../../../TestingGuide.rst:567
msgid "``not``"
msgstr ""

#: ../../../TestingGuide.rst:566
msgid ""
"This program runs its arguments and then inverts the result code from it. "
"Zero result codes become 1. Non-zero result codes become 0."
msgstr ""

#: ../../../TestingGuide.rst:569
msgid ""
"To make the output more useful, :program:`lit` will scan the lines of the "
"test case for ones that contain a pattern that matches ``PR[0-9]+``. This is "
"the syntax for specifying a PR (Problem Report) number that is related to "
"the test case. The number after \"PR\" specifies the LLVM bugzilla number. "
"When a PR number is specified, it will be used in the pass/fail reporting. "
"This is useful to quickly get some context when a test fails."
msgstr ""

#: ../../../TestingGuide.rst:577
msgid ""
"Finally, any line that contains \"END.\" will cause the special "
"interpretation of lines to terminate. This is generally done right after the "
"last RUN: line. This has two side effects:"
msgstr ""

#: ../../../TestingGuide.rst:581
msgid ""
"it prevents special interpretation of lines that are part of the test "
"program, not the instructions to the test case, and"
msgstr ""

#: ../../../TestingGuide.rst:584
msgid ""
"it speeds things up for really big test cases by avoiding interpretation of "
"the remainder of the file."
msgstr ""
