# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 16\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr_FR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../ReleaseNotes.rst:3
msgid "LLVM |release| Release Notes"
msgstr ""

#: ../../../ReleaseNotes.rst:11
msgid ""
"These are in-progress notes for the upcoming LLVM |version| release. Release "
"notes for previous releases can be found on `the Download Page <https://"
"releases.llvm.org/download.html>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:17
msgid "Introduction"
msgstr ""

#: ../../../ReleaseNotes.rst:19
msgid ""
"This document contains the release notes for the LLVM Compiler "
"Infrastructure, release |release|.  Here we describe the status of LLVM, "
"including major improvements from the previous release, improvements in "
"various subprojects of LLVM, and some of the current users of the code.  All "
"LLVM releases may be downloaded from the `LLVM releases web site <https://"
"llvm.org/releases/>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:25
msgid ""
"For more information about LLVM, including information about the latest "
"release, please check out the `main LLVM web site <https://llvm.org/>`_.  If "
"you have questions or comments, the `Discourse forums <https://discourse."
"llvm.org>`_ is a good place to ask them."
msgstr ""

#: ../../../ReleaseNotes.rst:31
msgid ""
"Note that if you are reading this file from a Git checkout or the main LLVM "
"web page, this document applies to the *next* release, not the current one.  "
"To see the release notes for a specific release, please see the `releases "
"page <https://llvm.org/releases/>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:37
msgid "Non-comprehensive list of changes in this release"
msgstr ""

#: ../../../ReleaseNotes.rst:45
msgid ""
"The ``readnone`` calls which are crossing suspend points in coroutines will "
"not be merged. Since ``readnone`` calls may access thread id and thread id "
"is not a constant in coroutines. This decision may cause unnecessary "
"performance regressions and we plan to fix it in later versions."
msgstr ""

#: ../../../ReleaseNotes.rst:50
msgid ""
"The LoongArch target is promoted to \"official\" (see below for more "
"details)."
msgstr ""

#: ../../../ReleaseNotes.rst:52 ../../../ReleaseNotes.rst:163
#: ../../../ReleaseNotes.rst:192 ../../../ReleaseNotes.rst:268
#: ../../../ReleaseNotes.rst:351
msgid "..."
msgstr ""

#: ../../../ReleaseNotes.rst:55
msgid "Update on required toolchains to build LLVM"
msgstr ""

#: ../../../ReleaseNotes.rst:57
msgid ""
"LLVM is now built with C++17 by default. This means C++17 can be used in the "
"code base."
msgstr ""

#: ../../../ReleaseNotes.rst:60
msgid ""
"The previous \"soft\" toolchain requirements have now been changed to "
"\"hard\". This means that the the following versions are now required to "
"build LLVM and there is no way to suppress this error."
msgstr ""

#: ../../../ReleaseNotes.rst:64
msgid "GCC >= 7.1"
msgstr ""

#: ../../../ReleaseNotes.rst:65
msgid "Clang >= 5.0"
msgstr ""

#: ../../../ReleaseNotes.rst:66
msgid "Apple Clang >= 10.0"
msgstr ""

#: ../../../ReleaseNotes.rst:67
msgid "Visual Studio 2019 >= 16.7"
msgstr ""

#: ../../../ReleaseNotes.rst:69
msgid ""
"With LLVM 16.x we will raise the version requirement of CMake used to build "
"LLVM. The new requirements are as follows:"
msgstr ""

#: ../../../ReleaseNotes.rst:72
msgid "CMake >= 3.20.0"
msgstr ""

#: ../../../ReleaseNotes.rst:74
msgid ""
"In LLVM 16.x this requirement will be \"soft\", there will only be a "
"diagnostic."
msgstr ""

#: ../../../ReleaseNotes.rst:76
msgid ""
"With the release of LLVM 17.x this requirement will be hard and LLVM "
"developers can start using CMake 3.20.0 features, making it impossible to "
"build with older versions of CMake."
msgstr ""

#: ../../../ReleaseNotes.rst:81
msgid "Changes to the LLVM IR"
msgstr ""

#: ../../../ReleaseNotes.rst:83
msgid ""
"The ``readnone``, ``readonly``, ``writeonly``, ``argmemonly``, "
"``inaccessiblememonly`` and ``inaccessiblemem_or_argmemonly`` function "
"attributes have been replaced by a single ``memory(...)`` attribute. The old "
"attributes may be mapped to the new one as follows:"
msgstr ""

#: ../../../ReleaseNotes.rst:88
msgid "``readnone`` -> ``memory(none)``"
msgstr ""

#: ../../../ReleaseNotes.rst:89
msgid "``readonly`` -> ``memory(read)``"
msgstr ""

#: ../../../ReleaseNotes.rst:90
msgid "``writeonly`` -> ``memory(write)``"
msgstr ""

#: ../../../ReleaseNotes.rst:91
msgid "``argmemonly`` -> ``memory(argmem: readwrite)``"
msgstr ""

#: ../../../ReleaseNotes.rst:92
msgid "``argmemonly readonly`` -> ``memory(argmem: read)``"
msgstr ""

#: ../../../ReleaseNotes.rst:93
msgid "``argmemonly writeonly`` -> ``memory(argmem: write)``"
msgstr ""

#: ../../../ReleaseNotes.rst:94
msgid "``inaccessiblememonly`` -> ``memory(inaccessiblemem: readwrite)``"
msgstr ""

#: ../../../ReleaseNotes.rst:95
msgid "``inaccessiblememonly readonly`` -> ``memory(inaccessiblemem: read)``"
msgstr ""

#: ../../../ReleaseNotes.rst:96
msgid "``inaccessiblememonly writeonly`` -> ``memory(inaccessiblemem: write)``"
msgstr ""

#: ../../../ReleaseNotes.rst:97
msgid ""
"``inaccessiblemem_or_argmemonly`` -> ``memory(argmem: readwrite, "
"inaccessiblemem: readwrite)``"
msgstr ""

#: ../../../ReleaseNotes.rst:99
msgid ""
"``inaccessiblemem_or_argmemonly readonly`` -> ``memory(argmem: read, "
"inaccessiblemem: read)``"
msgstr ""

#: ../../../ReleaseNotes.rst:101
msgid ""
"``inaccessiblemem_or_argmemonly writeonly`` -> ``memory(argmem: write, "
"inaccessiblemem: write)``"
msgstr ""

#: ../../../ReleaseNotes.rst:104
msgid ""
"The constant expression variants of the following instructions has been "
"removed:"
msgstr ""

#: ../../../ReleaseNotes.rst:107
msgid "``fneg``"
msgstr ""

#: ../../../ReleaseNotes.rst:109
msgid ""
"Target extension types have been added, which allow targets to have types "
"that need to be preserved through the optimizer, but otherwise are not "
"introspectable by target-independent optimizations."
msgstr ""

#: ../../../ReleaseNotes.rst:113
msgid "Added ``uinc_wrap`` and ``udec_wrap`` operations to ``atomicrmw``."
msgstr ""

#: ../../../ReleaseNotes.rst:115
msgid "Renamed ``llvm.flt.rounds`` intrinsic to ``llvm.get.rounding``."
msgstr ""

#: ../../../ReleaseNotes.rst:118
msgid "Changes to building LLVM"
msgstr ""

#: ../../../ReleaseNotes.rst:121
msgid "Changes to TableGen"
msgstr ""

#: ../../../ReleaseNotes.rst:124
msgid "Changes to Interprocedural Optimizations"
msgstr ""

#: ../../../ReleaseNotes.rst:126
msgid "Function Specialization has been integrated into IPSCCP."
msgstr ""

#: ../../../ReleaseNotes.rst:127
msgid ""
"Specialization of functions has been enabled by default at all optimization "
"levels except Os, Oz. This has exposed a mis-compilation in SPEC/"
"CINT2017rate/502.gcc_r when built via the LLVM Test Suite with both LTO and "
"PGO enabled, but without the option -fno-strict-aliasing."
msgstr ""

#: ../../../ReleaseNotes.rst:133
msgid "Changes to the AArch64 Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:135
msgid "Added support for the Cortex-A715 CPU."
msgstr ""

#: ../../../ReleaseNotes.rst:136
msgid "Added support for the Cortex-X3 CPU."
msgstr ""

#: ../../../ReleaseNotes.rst:137
msgid "Added support for the Neoverse V2 CPU."
msgstr ""

#: ../../../ReleaseNotes.rst:138
msgid "Added support for assembly for RME MEC (Memory Encryption Contexts)."
msgstr ""

#: ../../../ReleaseNotes.rst:139
msgid "Added codegen support for the Armv8.3 Complex Number extension."
msgstr ""

#: ../../../ReleaseNotes.rst:140
msgid ""
"Implemented `Function Multi Versioning <https://arm-software.github.io/acle/"
"main/acle.html#function-multi-versioning>`_ in accordance with Arm C "
"Language Extensions specification. Currently in Beta state."
msgstr ""

#: ../../../ReleaseNotes.rst:146
msgid "Changes to the AMDGPU Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:149
msgid "Changes to the ARM Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:151
msgid ""
"Support for targeting Armv2, Armv2A, Armv3 and Armv3M has been removed. LLVM "
"did not, and was not ever likely to generate correct code for those "
"architecture versions so their presence was misleading."
msgstr ""

#: ../../../ReleaseNotes.rst:154
msgid "Added codegen support for the complex arithmetic instructions in MVE."
msgstr ""

#: ../../../ReleaseNotes.rst:155
msgid ""
"Added Armv4 and Armv4T compatible thunks. LLD will no longer generate BX "
"instructions for Armv4 or BLX instructions for either Armv4 or Armv4T. "
"Armv4T is now fully supported."
msgstr ""

#: ../../../ReleaseNotes.rst:158
msgid "Added compiler-rt builtins support for Armv4T, Armv5TE and Armv6."
msgstr ""

#: ../../../ReleaseNotes.rst:161
msgid "Changes to the AVR Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:166
msgid "Changes to the DirectX Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:169
msgid "Changes to the Hexagon Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:171
msgid "The Hexagon backend now support V71 and V73 ISA."
msgstr ""

#: ../../../ReleaseNotes.rst:174
msgid "Changes to the LoongArch Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:176
msgid ""
"The LoongArch target is no longer \"experimental\"! It's now built by "
"default, rather than needing to be enabled with "
"``LLVM_EXPERIMENTAL_TARGETS_TO_BUILD``."
msgstr ""

#: ../../../ReleaseNotes.rst:179
msgid ""
"The backend has full codegen support for the base (both integer and floating-"
"point) instruction set and it conforms to psABI v2. Testing has been "
"performed with Linux, including native compilation of a large corpus of "
"Linux applications."
msgstr ""

#: ../../../ReleaseNotes.rst:184
msgid "Support GHC calling convention."
msgstr ""

#: ../../../ReleaseNotes.rst:186
msgid ""
"Initial JITLink support is added. (`D141036 <https://reviews.llvm.org/"
"D141036>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:190
msgid "Changes to the MIPS Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:195
msgid "Changes to the PowerPC Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:198
msgid "Common PowerPC improvements"
msgstr ""

#: ../../../ReleaseNotes.rst:200
msgid ""
"Supported selecting floating point and 'sync' family of instructions in "
"GlobalISel PowerPC."
msgstr ""

#: ../../../ReleaseNotes.rst:202
msgid "Comparison operations are now optimized by record form instructions."
msgstr ""

#: ../../../ReleaseNotes.rst:203
msgid ""
"``__test_data_class`` built-in now accepts ``__float128`` arguments for "
"Power9 and newer."
msgstr ""

#: ../../../ReleaseNotes.rst:205
msgid "Fixed incorrect fence insertion in atomic FP operations on PowerPC."
msgstr ""

#: ../../../ReleaseNotes.rst:206
msgid ""
"Fixed alignment of aggregate with smaller size than register in variadic "
"function on PowerPC 64-bit."
msgstr ""

#: ../../../ReleaseNotes.rst:208
msgid "CTR loops on PowerPC are now generated after instruction selection."
msgstr ""

#: ../../../ReleaseNotes.rst:209
msgid "Enabled track-subreg-liveness option by default."
msgstr ""

#: ../../../ReleaseNotes.rst:210
msgid ""
"Store of link register in function prologue are now generated in location "
"after stack pointer update instructions."
msgstr ""

#: ../../../ReleaseNotes.rst:212
msgid ""
"Code generation improvements for atomic operations, vector permutes, and "
"constant materialization for some floating point constants."
msgstr ""

#: ../../../ReleaseNotes.rst:214
msgid ""
"Implement new register classes and a number of new instructions for "
"``mcpu=future``."
msgstr ""

#: ../../../ReleaseNotes.rst:215
msgid ""
"Implement byte reverse instructions, and VSX Scalar Quad Precision compares "
"for ``mcpu=pwr10``."
msgstr ""

#: ../../../ReleaseNotes.rst:217
msgid "Improved load-store forwarding for big-endian mode."
msgstr ""

#: ../../../ReleaseNotes.rst:218
msgid "Bug fixes."
msgstr ""

#: ../../../ReleaseNotes.rst:221
msgid "AIX improvements"
msgstr ""

#: ../../../ReleaseNotes.rst:223
msgid "Supported TOC-data, overflow section, R_RBR relocation in XCOFF."
msgstr ""

#: ../../../ReleaseNotes.rst:224
msgid ""
"Fixed behavior of function sections, cold attribute, and handling of TLS "
"symbols' name prefixes in XCOFF."
msgstr ""

#: ../../../ReleaseNotes.rst:225
msgid ""
"Fixed redundant spill and reload on AIX 64-bit when paired vector are "
"enabled."
msgstr ""

#: ../../../ReleaseNotes.rst:226
msgid "Disabled location attribution generation of TLS variables."
msgstr ""

#: ../../../ReleaseNotes.rst:227
msgid ""
"Fixed the mapping of built-in functions ``__builtin_frexpl``, "
"``__builtin_ldexpl``, and ``__builtin_modfl`` to ``libm`` routines in 64-bit "
"``long double`` mode."
msgstr ""

#: ../../../ReleaseNotes.rst:230
msgid ""
"Implemented ``libunwind`` function ``_Unwind_FindEnclosingFunction`` using "
"traceback table on AIX."
msgstr ""

#: ../../../ReleaseNotes.rst:232
msgid "Changed to use non-unique implementation for ``typeinfo`` comparison."
msgstr ""

#: ../../../ReleaseNotes.rst:233
msgid ""
"Codegen work done for ``-pg`` to generate correct calls to ``__mcount``."
msgstr ""

#: ../../../ReleaseNotes.rst:236
msgid "Changes to the RISC-V Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:238
msgid ""
":doc:`RISCVUsage` was introduced to document the status of support within "
"LLVM for various RISC-V instruction set extensions."
msgstr ""

#: ../../../ReleaseNotes.rst:240
msgid ""
"Support for the unratified Zbe, Zbf, Zbm, Zbp, Zbr, and Zbt extensions have "
"been removed."
msgstr ""

#: ../../../ReleaseNotes.rst:242
msgid ""
"i32 is now a native type in the datalayout string. This enables "
"LoopStrengthReduce for loops with i32 induction variables, among other "
"optimizations."
msgstr ""

#: ../../../ReleaseNotes.rst:245
msgid ""
"MC layer support was added for the experimental Zca, Zcd, Zcf, Zihintntl, "
"Ztso, and Zawrs extensions."
msgstr ""

#: ../../../ReleaseNotes.rst:247
msgid ""
"Codegen support was added for the experimental Zca extension and for the "
"Zfhmin extension."
msgstr ""

#: ../../../ReleaseNotes.rst:249
msgid ""
"MC layer and codegen support was added for the custom XVentanaCondOps and "
"XTHeadVdot extensions."
msgstr ""

#: ../../../ReleaseNotes.rst:251
msgid "A target feature was introduced to force-enable atomics."
msgstr ""

#: ../../../ReleaseNotes.rst:252
msgid "Support was added for lowering HWASAN intrinsics."
msgstr ""

#: ../../../ReleaseNotes.rst:253
msgid ""
"The short forward branch optimisation beneficial to the SiFive Series 7 was "
"implemented."
msgstr ""

#: ../../../ReleaseNotes.rst:255
msgid "A Syntacore SCR1 CPU model was added."
msgstr ""

#: ../../../ReleaseNotes.rst:256
msgid "Various codegen improvements."
msgstr ""

#: ../../../ReleaseNotes.rst:259
msgid "Changes to the SystemZ Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:261
msgid ""
"The datalayout string now only depends on the target triple as expected."
msgstr ""

#: ../../../ReleaseNotes.rst:262
msgid "The GNU attribute for a visible vector ABI is now emitted."
msgstr ""

#: ../../../ReleaseNotes.rst:263
msgid "Align 128 bit integers to 8 bytes only, per the ABI."
msgstr ""

#: ../../../ReleaseNotes.rst:266
msgid "Changes to the WebAssembly Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:271
msgid "Changes to the Windows Target"
msgstr ""

#: ../../../ReleaseNotes.rst:273
msgid ""
"For MinGW, generate embedded ``-exclude-symbols:`` directives for symbols "
"with hidden visibility, omitting them from automatic export of all symbols. "
"This roughly makes hidden visibility work like it does for other object file "
"formats."
msgstr ""

#: ../../../ReleaseNotes.rst:278
msgid ""
"When using multi-threaded LLVM tools (such as LLD) on a Windows host with a "
"large number of processors or CPU sockets, previously the LLVM ThreadPool "
"would span out threads to use all processors. Starting with Windows Server "
"2022 and Windows 11, the behavior has changed, the OS now spans out threads "
"automatically to all processors. This also fixes an affinity mask issue. "
"(`D138747 <https://reviews.llvm.org/D138747>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:286
msgid ""
"When building LLVM and related tools for Windows with Clang in MinGW mode, "
"hidden symbol visiblity is now used to reduce the number of exports in "
"builds with dylibs (``LLVM_BUILD_LLVM_DYLIB`` or ``LLVM_LINK_LLVM_DYLIB``), "
"making such builds more manageable without running into the limit of number "
"of exported symbols."
msgstr ""

#: ../../../ReleaseNotes.rst:292
msgid ""
"AArch64 SEH unwind info generation bugs have been fixed; there were minor "
"cases of mismatches between the generated unwind info and actual prologues/"
"epilogues earlier in some cases."
msgstr ""

#: ../../../ReleaseNotes.rst:296
msgid ""
"AArch64 SEH unwind info is now generated correctly for the AArch64 security "
"features BTI (Branch Target Identification) and PAC (Pointer Authentication "
"Code). In particular, using PAC with older versions of LLVM would generate "
"code that would fail to unwind at runtime, if the host actually would use "
"the pointer authentication feature."
msgstr ""

#: ../../../ReleaseNotes.rst:302
msgid ""
"Fixed stack alignment on Windows on AArch64, for stack frames with a large "
"enough allocation that requires stack probing."
msgstr ""

#: ../../../ReleaseNotes.rst:306
msgid "Changes to the X86 Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:308
msgid "Add support for the ``RDMSRLIST and WRMSRLIST`` instructions."
msgstr ""

#: ../../../ReleaseNotes.rst:309
msgid "Add support for the ``WRMSRNS`` instruction."
msgstr ""

#: ../../../ReleaseNotes.rst:310
msgid "Support ISA of ``AMX-FP16`` which contains ``tdpfp16ps`` instruction."
msgstr ""

#: ../../../ReleaseNotes.rst:311
msgid "Support ISA of ``CMPCCXADD``."
msgstr ""

#: ../../../ReleaseNotes.rst:312
msgid "Support ISA of ``AVX-IFMA``."
msgstr ""

#: ../../../ReleaseNotes.rst:313
msgid "Support ISA of ``AVX-VNNI-INT8``."
msgstr ""

#: ../../../ReleaseNotes.rst:314
msgid "Support ISA of ``AVX-NE-CONVERT``."
msgstr ""

#: ../../../ReleaseNotes.rst:315
msgid ""
"``-mcpu=raptorlake``, ``-mcpu=meteorlake`` and ``-mcpu=emeraldrapids`` are "
"now supported."
msgstr ""

#: ../../../ReleaseNotes.rst:316
msgid ""
"``-mcpu=sierraforest``, ``-mcpu=graniterapids`` and ``-mcpu=grandridge`` are "
"now supported."
msgstr ""

#: ../../../ReleaseNotes.rst:319
msgid "Changes to the OCaml bindings"
msgstr ""

#: ../../../ReleaseNotes.rst:323
msgid "Changes to the C API"
msgstr ""

#: ../../../ReleaseNotes.rst:325
msgid ""
"The following functions for creating constant expressions have been removed, "
"because the underlying constant expressions are no longer supported. "
"Instead, an instruction should be created using the ``LLVMBuildXYZ`` APIs, "
"which will constant fold the operands if possible and create an instruction "
"otherwise:"
msgstr ""

#: ../../../ReleaseNotes.rst:330
msgid "``LLVMConstFNeg``"
msgstr ""

#: ../../../ReleaseNotes.rst:333
msgid ""
"The following deprecated functions have been removed, because they are "
"incompatible with opaque pointers. Use the new functions accepting a "
"separate function/element type instead."
msgstr ""

#: ../../../ReleaseNotes.rst:337
msgid "``LLVMBuildLoad`` -> ``LLVMBuildLoad2``"
msgstr ""

#: ../../../ReleaseNotes.rst:338
msgid "``LLVMBuildCall`` -> ``LLVMBuildCall2``"
msgstr ""

#: ../../../ReleaseNotes.rst:339
msgid "``LLVMBuildInvoke`` -> ``LLVMBuildInvoke2``"
msgstr ""

#: ../../../ReleaseNotes.rst:340
msgid "``LLVMBuildGEP`` -> ``LLVMBuildGEP2``"
msgstr ""

#: ../../../ReleaseNotes.rst:341
msgid "``LLVMBuildInBoundsGEP`` -> ``LLVMBuildInBoundsGEP2``"
msgstr ""

#: ../../../ReleaseNotes.rst:342
msgid "``LLVMBuildStructGEP`` -> ``LLVMBuildStructGEP2``"
msgstr ""

#: ../../../ReleaseNotes.rst:343
msgid "``LLVMBuildPtrDiff`` -> ``LLVMBuildPtrDiff2``"
msgstr ""

#: ../../../ReleaseNotes.rst:344
msgid "``LLVMConstGEP`` -> ``LLVMConstGEP2``"
msgstr ""

#: ../../../ReleaseNotes.rst:345
msgid "``LLVMConstInBoundsGEP`` -> ``LLVMConstInBoundsGEP2``"
msgstr ""

#: ../../../ReleaseNotes.rst:346
msgid "``LLVMAddAlias`` -> ``LLVMAddAlias2``"
msgstr ""

#: ../../../ReleaseNotes.rst:349
msgid "Changes to the FastISel infrastructure"
msgstr ""

#: ../../../ReleaseNotes.rst:354
msgid "Changes to the DAG infrastructure"
msgstr ""

#: ../../../ReleaseNotes.rst:358
msgid "Changes to the Metadata Info"
msgstr ""

#: ../../../ReleaseNotes.rst:360
msgid ""
"Add Module Flags Metadata ``stack-protector-guard-symbol`` which specify a "
"symbol for addressing the stack-protector guard."
msgstr ""

#: ../../../ReleaseNotes.rst:364
msgid "Changes to the Debug Info"
msgstr ""

#: ../../../ReleaseNotes.rst:366
msgid ""
"Previously when emitting DWARF v4 and tuning for GDB, llc would use DWARF "
"v2's ``DW_AT_bit_offset`` and ``DW_AT_data_member_location``. llc now uses "
"DWARF v4's ``DW_AT_data_bit_offset`` regardless of tuning."
msgstr ""

#: ../../../ReleaseNotes.rst:370
msgid ""
"Support for ``DW_AT_data_bit_offset`` was added in GDB 8.0. For earlier "
"versions, you can use llc's ``-dwarf-version=3`` option to emit compatible "
"DWARF."
msgstr ""

#: ../../../ReleaseNotes.rst:373
msgid ""
"When emitting CodeView debug information, LLVM will now emit S_CONSTANT "
"records for variables optimized into a constant via the SROA and SCCP "
"passes. (`D138995 <https://reviews.llvm.org/D138995>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:377
msgid "``DW_LANG_C11`` now respects ``-gstrict-dwarf`` option."
msgstr ""

#: ../../../ReleaseNotes.rst:380
msgid "Changes to the LLVM tools"
msgstr ""

#: ../../../ReleaseNotes.rst:382
msgid ""
"``llvm-readobj --elf-output-style=JSON`` no longer prefixes each JSON object "
"with the file name. Previously, each object file's output looked like "
"``\"main.o\":{\"FileSummary\":{\"File\":\"main.o\"},...}`` but is now "
"``{\"FileSummary\":{\"File\":\"main.o\"},...}``. This allows each JSON "
"object to be parsed in the same way, since each object no longer has a "
"unique key. Tools that consume ``llvm-readobj``'s JSON output should update "
"their parsers accordingly."
msgstr ""

#: ../../../ReleaseNotes.rst:390
msgid ""
"``llvm-readobj`` now supports a new option ``--loader-section-header`` to "
"display the loader section header of XCOFF object tiles"
msgstr ""

#: ../../../ReleaseNotes.rst:393
msgid ""
"``llvm-readobj`` now supports a new option ``--loader-section-header`` to "
"display the symbol table of the loader section of XCOFF object files"
msgstr ""

#: ../../../ReleaseNotes.rst:396
msgid ""
"``llvm-readobj`` now supports a new option ``--loader-section-header`` to "
"display relocation entries in the loader section of XCOFF object files"
msgstr ""

#: ../../../ReleaseNotes.rst:399
msgid ""
"``llvm-readobj`` now supports a new option ``--exception-section`` to "
"display exception section entries from XCOFF object files"
msgstr ""

#: ../../../ReleaseNotes.rst:402
msgid ""
"``llvm-objdump`` now uses ``--print-imm-hex`` by default, which brings its "
"default behavior closer in line with ``objdump``."
msgstr ""

#: ../../../ReleaseNotes.rst:405
msgid ""
"``llvm-objcopy`` no longer writes corrupt addresses to empty sections if the "
"input file had a nonzero address to an empty section."
msgstr ""

#: ../../../ReleaseNotes.rst:408
msgid ""
"``llvm-nm`` now supports the environment variable ``OBJECT_MODE`` for the ``-"
"X`` option on AIX OS"
msgstr ""

#: ../../../ReleaseNotes.rst:412
msgid "Changes to LLDB"
msgstr ""

#: ../../../ReleaseNotes.rst:414
msgid "Initial support for debugging Linux LoongArch 64-bit binaries."
msgstr ""

#: ../../../ReleaseNotes.rst:416
msgid ""
"Improvements in COFF symbol handling; previously a DLL (without any other "
"debug info) would only use the DLL's exported symbols, while it now also "
"uses the full list of internal symbols, if available."
msgstr ""

#: ../../../ReleaseNotes.rst:420
msgid ""
"Avoiding duplicate DLLs in the runtime list of loaded modules on Windows."
msgstr ""

#: ../../../ReleaseNotes.rst:423
msgid "Changes to Sanitizers"
msgstr ""

#: ../../../ReleaseNotes.rst:425
msgid ""
"Many Sanitizers (asan, fuzzer, lsan, safestack, scudo, tsan, ubsan) have "
"support for Linux LoongArch 64-bit variant. Some of them may be rudimentary."
msgstr ""

#: ../../../ReleaseNotes.rst:429
msgid "Other Changes"
msgstr ""

#: ../../../ReleaseNotes.rst:431
msgid ""
"lit no longer supports using substrings of the default target triple as "
"feature names in ``UNSUPPORTED:`` and ``XFAIL:`` directives. These have been "
"replaced by the ``target=<triple>`` feature, and tests can use regex "
"matching to achieve the same effect. For example, ``UNSUPPORTED: arm`` would "
"now be ``UNSUPPORTED: target=arm{{.*}}`` and ``XFAIL: windows`` would now be "
"``XFAIL: target={{.*}}-windows{{.*}}``."
msgstr ""

#: ../../../ReleaseNotes.rst:438
msgid ""
"When cross compiling LLVM (or building with ``LLVM_OPTIMIZED_TABLEGEN``), it "
"is now possible to point the build to prebuilt versions of all the host "
"tools with one CMake variable, ``LLVM_NATIVE_TOOL_DIR``, instead of having "
"to point out each individual tool with variables such as ``LLVM_TABLEGEN``, "
"``CLANG_TABLEGEN``, ``LLDB_TABLEGEN`` etc."
msgstr ""

#: ../../../ReleaseNotes.rst:445
msgid "External Open Source Projects Using LLVM 15"
msgstr ""

#: ../../../ReleaseNotes.rst:447
msgid "A project..."
msgstr ""

#: ../../../ReleaseNotes.rst:450
msgid "Additional Information"
msgstr ""

#: ../../../ReleaseNotes.rst:452
msgid ""
"A wide variety of additional information is available on the `LLVM web page "
"<https://llvm.org/>`_, in particular in the `documentation <https://llvm.org/"
"docs/>`_ section.  The web page also contains versions of the API "
"documentation which is up-to-date with the Git version of the source code.  "
"You can access versions of these documents specific to this release by going "
"into the ``llvm/docs/`` directory in the LLVM tree."
msgstr ""

#: ../../../ReleaseNotes.rst:459
msgid ""
"If you have any questions or comments about LLVM, please feel free to "
"contact us via the `Discourse forums <https://discourse.llvm.org>`_."
msgstr ""
