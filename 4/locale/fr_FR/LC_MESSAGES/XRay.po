# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr_FR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../XRay.rst:3
msgid "XRay Instrumentation"
msgstr ""

#: ../../../XRay.rst:0
msgid "Version"
msgstr ""

#: ../../../XRay.rst:5
msgid "1 as of 2016-11-08"
msgstr ""

#: ../../../XRay.rst:12
msgid "Introduction"
msgstr ""

#: ../../../XRay.rst:14
msgid ""
"XRay is a function call tracing system which combines compiler-inserted "
"instrumentation points and a runtime library that can dynamically enable and "
"disable the instrumentation."
msgstr ""

#: ../../../XRay.rst:18
msgid ""
"More high level information about XRay can be found in the `XRay "
"whitepaper`_."
msgstr ""

#: ../../../XRay.rst:20
msgid "This document describes how to use XRay as implemented in LLVM."
msgstr ""

#: ../../../XRay.rst:23
msgid "XRay in LLVM"
msgstr ""

#: ../../../XRay.rst:25
msgid "XRay consists of three main parts:"
msgstr ""

#: ../../../XRay.rst:27
msgid "Compiler-inserted instrumentation points."
msgstr ""

#: ../../../XRay.rst:28
msgid "A runtime library for enabling/disabling tracing at runtime."
msgstr ""

#: ../../../XRay.rst:29
msgid "A suite of tools for analysing the traces."
msgstr ""

#: ../../../XRay.rst:31
msgid ""
"**NOTE:** As of the time of this writing, XRay is only available for x86_64 "
"and arm7 32-bit (no-thumb) Linux."
msgstr ""

#: ../../../XRay.rst:34
msgid ""
"The compiler-inserted instrumentation points come in the form of nop-sleds "
"in the final generated binary, and an ELF section named ``xray_instr_map`` "
"which contains entries pointing to these instrumentation points. The runtime "
"library relies on being able to access the entries of the "
"``xray_instr_map``, and overwrite the instrumentation points at runtime."
msgstr ""

#: ../../../XRay.rst:41
msgid "Using XRay"
msgstr ""

#: ../../../XRay.rst:43
msgid "You can use XRay in a couple of ways:"
msgstr ""

#: ../../../XRay.rst:45
msgid "Instrumenting your C/C++/Objective-C/Objective-C++ application."
msgstr ""

#: ../../../XRay.rst:46
msgid "Generating LLVM IR with the correct function attributes."
msgstr ""

#: ../../../XRay.rst:48
msgid ""
"The rest of this section covers these main ways and later on how to "
"customise what XRay does in an XRay-instrumented binary."
msgstr ""

#: ../../../XRay.rst:52
msgid "Instrumenting your C/C++/Objective-C Application"
msgstr ""

#: ../../../XRay.rst:54
msgid ""
"The easiest way of getting XRay instrumentation for your application is by "
"enabling the ``-fxray-instrument`` flag in your clang invocation."
msgstr ""

#: ../../../XRay.rst:57
msgid "For example:"
msgstr ""

#: ../../../XRay.rst:63
msgid ""
"By default, functions that have at least 200 instructions will get XRay "
"instrumentation points. You can tweak that number through the ``-fxray-"
"instruction-threshold=`` flag:"
msgstr ""

#: ../../../XRay.rst:71
msgid ""
"You can also specifically instrument functions in your binary to either "
"always or never be instrumented using source-level attributes. You can do it "
"using the GCC-style attributes or C++11-style attributes."
msgstr ""

#: ../../../XRay.rst:85
msgid ""
"When linking a binary, you can either manually link in the `XRay Runtime "
"Library`_ or use ``clang`` to link it in automatically with the ``-fxray-"
"instrument`` flag."
msgstr ""

#: ../../../XRay.rst:90
msgid "LLVM Function Attribute"
msgstr ""

#: ../../../XRay.rst:92
msgid ""
"If you're using LLVM IR directly, you can add the ``function-instrument`` "
"string attribute to your functions, to get the similar effect that the C/C++/"
"Objective-C source-level attributes would get:"
msgstr ""

#: ../../../XRay.rst:106
msgid ""
"You can also set the ``xray-instruction-threshold`` attribute and provide a "
"numeric string value for how many instructions should be in the function "
"before it gets instrumented."
msgstr ""

#: ../../../XRay.rst:117
msgid "XRay Runtime Library"
msgstr ""

#: ../../../XRay.rst:119
msgid ""
"The XRay Runtime Library is part of the compiler-rt project, which "
"implements the runtime components that perform the patching and unpatching "
"of inserted instrumentation points. When you use ``clang`` to link your "
"binaries and the ``-fxray-instrument`` flag, it will automatically link in "
"the XRay runtime."
msgstr ""

#: ../../../XRay.rst:124
msgid ""
"The default implementation of the XRay runtime will enable XRay "
"instrumentation before ``main`` starts, which works for applications that "
"have a short lifetime. This implementation also records all function entry "
"and exit events which may result in a lot of records in the resulting trace."
msgstr ""

#: ../../../XRay.rst:129
msgid ""
"Also by default the filename of the XRay trace is ``xray-log.XXXXXX`` where "
"the ``XXXXXX`` part is randomly generated."
msgstr ""

#: ../../../XRay.rst:132
msgid ""
"These options can be controlled through the ``XRAY_OPTIONS`` environment "
"variable, where we list down the options and their defaults below."
msgstr ""

#: ../../../XRay.rst:136
msgid "Option"
msgstr ""

#: ../../../XRay.rst:136
msgid "Type"
msgstr ""

#: ../../../XRay.rst:136
msgid "Default"
msgstr ""

#: ../../../XRay.rst:136
msgid "Description"
msgstr ""

#: ../../../XRay.rst:138
msgid "patch_premain"
msgstr ""

#: ../../../XRay.rst:138 ../../../XRay.rst:142
msgid "``bool``"
msgstr ""

#: ../../../XRay.rst:138 ../../../XRay.rst:142
msgid "``true``"
msgstr ""

#: ../../../XRay.rst:138
msgid "Whether to patch instrumentation points before main."
msgstr ""

#: ../../../XRay.rst:142
msgid "xray_naive_log"
msgstr ""

#: ../../../XRay.rst:142
msgid "Whether to install the naive log implementation."
msgstr ""

#: ../../../XRay.rst:146
msgid "xray_logfile_base"
msgstr ""

#: ../../../XRay.rst:146
msgid "``const char*``"
msgstr ""

#: ../../../XRay.rst:146
msgid "``xray-log.``"
msgstr ""

#: ../../../XRay.rst:146
msgid "Filename base for the XRay logfile."
msgstr ""

#: ../../../XRay.rst:150
msgid ""
"If you choose to not use the default logging implementation that comes with "
"the XRay runtime and/or control when/how the XRay instrumentation runs, you "
"may use the XRay APIs directly for doing so. To do this, you'll need to "
"include the ``xray_interface.h`` from the compiler-rt ``xray`` directory. "
"The important API functions we list below:"
msgstr ""

#: ../../../XRay.rst:156
msgid ""
"``__xray_set_handler(void (*entry)(int32_t, XRayEntryType))``: Install your "
"own logging handler for when an event is encountered. See ``xray/"
"xray_interface.h`` for more details."
msgstr ""

#: ../../../XRay.rst:159
msgid "``__xray_remove_handler()``: Removes whatever the installed handler is."
msgstr ""

#: ../../../XRay.rst:160
msgid ""
"``__xray_patch()``: Patch all the instrumentation points defined in the "
"binary."
msgstr ""

#: ../../../XRay.rst:162
msgid ""
"``__xray_unpatch()``: Unpatch the instrumentation points defined in the "
"binary."
msgstr ""

#: ../../../XRay.rst:165
msgid ""
"There are some requirements on the logging handler to be installed for the "
"thread-safety of operations to be performed by the XRay runtime library:"
msgstr ""

#: ../../../XRay.rst:168
msgid ""
"The function should be thread-safe, as multiple threads may be invoking the "
"function at the same time. If the logging function needs to do "
"synchronisation, it must do so internally as XRay does not provide any "
"synchronisation guarantees outside from the atomicity of updates to the "
"pointer."
msgstr ""

#: ../../../XRay.rst:173
msgid ""
"The pointer provided to ``__xray_set_handler(...)`` must be live even after "
"calls to ``__xray_remove_handler()`` and ``__xray_unpatch()`` have "
"succeeded. XRay cannot guarantee that all threads that have ever gotten a "
"copy of the pointer will not invoke the function."
msgstr ""

#: ../../../XRay.rst:180
msgid "Trace Analysis Tools"
msgstr ""

#: ../../../XRay.rst:182
msgid ""
"We currently have the beginnings of a trace analysis tool in LLVM, which can "
"be found in the ``tools/llvm-xray`` directory. The ``llvm-xray`` tool "
"currently supports the following subcommands:"
msgstr ""

#: ../../../XRay.rst:186
msgid ""
"``extract``: Extract the instrumentation map from a binary, and return it as "
"YAML."
msgstr ""

#: ../../../XRay.rst:191
msgid "Future Work"
msgstr ""

#: ../../../XRay.rst:193
msgid ""
"There are a number of ongoing efforts for expanding the toolset building "
"around the XRay instrumentation system."
msgstr ""

#: ../../../XRay.rst:197
msgid "Flight Data Recorder Mode"
msgstr ""

#: ../../../XRay.rst:199
msgid ""
"The `XRay whitepaper`_ mentions a mode for when events are kept in memory, "
"and have the traces be dumped on demand through a triggering API. This work "
"is currently ongoing."
msgstr ""

#: ../../../XRay.rst:204
msgid "Trace Analysis"
msgstr ""

#: ../../../XRay.rst:206
msgid ""
"There are a few more subcommands making its way to the ``llvm-xray`` tool, "
"that are currently under review:"
msgstr ""

#: ../../../XRay.rst:209
msgid ""
"``convert``: Turns an XRay trace from one format to another. Currently "
"supporting conversion from the binary XRay log to YAML."
msgstr ""

#: ../../../XRay.rst:211
msgid "``account``: Do function call accounting based on data in the XRay log."
msgstr ""

#: ../../../XRay.rst:213
msgid ""
"We have more subcommands and modes that we're thinking of developing, in the "
"following forms:"
msgstr ""

#: ../../../XRay.rst:216
msgid "``stack``: Reconstruct the function call stacks in a timeline."
msgstr ""

#: ../../../XRay.rst:217
msgid ""
"``convert``: Converting from one version of the XRay log to another (higher) "
"version, and converting to other trace formats (i.e. Chrome Trace Viewer, "
"pprof, etc.)."
msgstr ""

#: ../../../XRay.rst:220
msgid ""
"``graph``: Generate a function call graph with relative timings and "
"distributions."
msgstr ""

#: ../../../XRay.rst:223
msgid "More Platforms"
msgstr ""

#: ../../../XRay.rst:225
msgid ""
"Since XRay is only currently available in x86_64 and arm7 32-bit (no-thumb) "
"running Linux, we're looking to supporting more platforms (architectures and "
"operating systems)."
msgstr ""
