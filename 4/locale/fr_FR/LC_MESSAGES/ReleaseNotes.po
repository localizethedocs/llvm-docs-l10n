# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr_FR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../ReleaseNotes.rst:3
msgid "LLVM 4.0.0 Release Notes"
msgstr ""

#: ../../../ReleaseNotes.rst:9
msgid "Introduction"
msgstr ""

#: ../../../ReleaseNotes.rst:11
msgid ""
"This document contains the release notes for the LLVM Compiler "
"Infrastructure, release 4.0.0.  Here we describe the status of LLVM, "
"including major improvements from the previous release, improvements in "
"various subprojects of LLVM, and some of the current users of the code.  All "
"LLVM releases may be downloaded from the `LLVM releases web site <http://"
"llvm.org/releases/>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:17
msgid ""
"For more information about LLVM, including information about the latest "
"release, please check out the `main LLVM web site <http://llvm.org/>`_.  If "
"you have questions or comments, the `LLVM Developer's Mailing List <http://"
"lists.llvm.org/mailman/listinfo/llvm-dev>`_ is a good place to send them."
msgstr ""

#: ../../../ReleaseNotes.rst:24
msgid "New Versioning Scheme"
msgstr ""

#: ../../../ReleaseNotes.rst:25
msgid ""
"Starting with this release, LLVM is using a `new versioning scheme <http://"
"blog.llvm.org/2016/12/llvms-new-versioning-scheme.html>`_, increasing the "
"major version number with each major release. Stable updates to this release "
"will be versioned 4.0.x, and the next major release, six months from now, "
"will be version 5.0.0."
msgstr ""

#: ../../../ReleaseNotes.rst:32
msgid "Non-comprehensive list of changes in this release"
msgstr ""

#: ../../../ReleaseNotes.rst:33
msgid ""
"The minimum compiler version required for building LLVM has been raised to "
"4.8 for GCC and 2015 for Visual Studio."
msgstr ""

#: ../../../ReleaseNotes.rst:36
msgid ""
"The C API functions ``LLVMAddFunctionAttr``, ``LLVMGetFunctionAttr``, "
"``LLVMRemoveFunctionAttr``, ``LLVMAddAttribute``, ``LLVMRemoveAttribute``, "
"``LLVMGetAttribute``, ``LLVMAddInstrAttribute`` and "
"``LLVMRemoveInstrAttribute`` have been removed."
msgstr ""

#: ../../../ReleaseNotes.rst:41
msgid "The C API enum ``LLVMAttribute`` has been deleted."
msgstr ""

#: ../../../ReleaseNotes.rst:43
msgid ""
"The definition and uses of ``LLVM_ATRIBUTE_UNUSED_RESULT`` in the LLVM "
"source were replaced with ``LLVM_NODISCARD``, which matches the C++17 "
"``[[nodiscard]]`` semantics rather than gcc's "
"``__attribute__((warn_unused_result))``."
msgstr ""

#: ../../../ReleaseNotes.rst:47
msgid ""
"The Timer related APIs now expect a Name and Description. When upgrading "
"code the previously used names should become descriptions and a short name "
"in the style of a programming language identifier should be added."
msgstr ""

#: ../../../ReleaseNotes.rst:51
msgid ""
"LLVM now handles ``invariant.group`` across different basic blocks, which "
"makes it possible to devirtualize virtual calls inside loops."
msgstr ""

#: ../../../ReleaseNotes.rst:54
msgid ""
"The aggressive dead code elimination phase (\"adce\") now removes branches "
"which do not effect program behavior. Loops are retained by default since "
"they may be infinite but these can also be removed with LLVM option ``-adce-"
"remove-loops`` when the loop body otherwise has no live operations."
msgstr ""

#: ../../../ReleaseNotes.rst:60
msgid ""
"The llvm-cov tool can now export coverage data as json. Its html output mode "
"has also improved."
msgstr ""

#: ../../../ReleaseNotes.rst:64
msgid "Improvements to ThinLTO (-flto=thin)"
msgstr ""

#: ../../../ReleaseNotes.rst:65
msgid ""
"Integration with profile data (PGO). When available, profile data enables "
"more accurate function importing decisions, as well as cross-module indirect "
"call promotion."
msgstr ""

#: ../../../ReleaseNotes.rst:69
msgid ""
"Significant build-time and binary-size improvements when compiling with "
"debug info (-g)."
msgstr ""

#: ../../../ReleaseNotes.rst:73
msgid "LLVM Coroutines"
msgstr ""

#: ../../../ReleaseNotes.rst:75
msgid ""
"Experimental support for :doc:`Coroutines` was added, which can be enabled "
"with ``-enable-coroutines`` in ``opt`` the command tool or using the "
"``addCoroutinePassesToExtensionPoints`` API when building the optimization "
"pipeline."
msgstr ""

#: ../../../ReleaseNotes.rst:80
msgid ""
"For more information on LLVM Coroutines and the LLVM implementation, see "
"`2016 LLVM Developersâ€™ Meeting talk on LLVM Coroutines <http://llvm.org/"
"devmtg/2016-11/#talk4>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:85
msgid "Regcall and Vectorcall Calling Conventions"
msgstr ""

#: ../../../ReleaseNotes.rst:87
msgid ""
"Support was added for ``_regcall`` calling convention. Existing "
"``__vectorcall`` calling convention support was extended to include correct "
"handling of HVAs."
msgstr ""

#: ../../../ReleaseNotes.rst:91
msgid ""
"The ``__vectorcall`` calling convention was introduced by Microsoft to "
"enhance register usage when passing parameters. For more information please "
"read `__vectorcall documentation <https://msdn.microsoft.com/en-us/library/"
"dn375768.aspx>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:96
msgid ""
"The ``__regcall`` calling convention was introduced by Intel to optimize "
"parameter transfer on function call. This calling convention ensures that as "
"many values as possible are passed or returned in registers. For more "
"information please read `__regcall documentation <https://software.intel.com/"
"en-us/node/693069>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:104
msgid "Code Generation Testing"
msgstr ""

#: ../../../ReleaseNotes.rst:106
msgid ""
"Passes that work on the machine instruction representation can be tested "
"with the .mir serialization format. ``llc`` supports the ``-run-pass``, ``-"
"stop-after``, ``-stop-before``, ``-start-after``, ``-start-before`` to run a "
"single pass of the code generation pipeline, or to stop or start the code "
"generation pipeline at a given point."
msgstr ""

#: ../../../ReleaseNotes.rst:112
msgid ""
"Additional information can be found in the :doc:`MIRLangRef`. The format is "
"used by the tests ending in ``.mir`` in the ``test/CodeGen`` directory."
msgstr ""

#: ../../../ReleaseNotes.rst:115
msgid ""
"This feature is available since 2015. It is used more often lately and was "
"not mentioned in the release notes yet."
msgstr ""

#: ../../../ReleaseNotes.rst:119
msgid "Intrusive list API overhaul"
msgstr ""

#: ../../../ReleaseNotes.rst:121
msgid ""
"The intrusive list infrastructure was substantially rewritten over the last "
"couple of releases, primarily to excise undefined behaviour.  The biggest "
"changes landed in this release."
msgstr ""

#: ../../../ReleaseNotes.rst:125
msgid ""
"``simple_ilist<T>`` is a lower-level intrusive list that never takes "
"ownership of its nodes.  New intrusive-list clients should consider using it "
"instead of ``ilist<T>``."
msgstr ""

#: ../../../ReleaseNotes.rst:129
msgid ""
"``ilist_tag<class>`` allows a single data type to be inserted into two "
"parallel intrusive lists.  A type can inherit twice from ``ilist_node``, "
"first using ``ilist_node<T,ilist_tag<A>>`` (enabling insertion into "
"``simple_ilist<T,ilist_tag<A>>``) and second using ``ilist_node<T,"
"ilist_tag<B>>`` (enabling insertion into ``simple_ilist<T,ilist_tag<B>>``), "
"where ``A`` and ``B`` are arbitrary types."
msgstr ""

#: ../../../ReleaseNotes.rst:137
msgid ""
"``ilist_sentinel_tracking<bool>`` controls whether an iterator knows whether "
"it's pointing at the sentinel (``end()``).  By default, sentinel tracking is "
"on when ABI-breaking checks are enabled, and off otherwise; this is used for "
"an assertion when dereferencing ``end()`` (this assertion triggered often in "
"practice, and many backend bugs were fixed).  Explicitly turning on sentinel "
"tracking also enables ``iterator::isEnd()``.  This is used by "
"``MachineInstrBundleIterator`` to iterate over bundles."
msgstr ""

#: ../../../ReleaseNotes.rst:145
msgid ""
"``ilist<T>`` is built on top of ``simple_ilist<T>``, and supports the same "
"configuration options.  As before (and unlike ``simple_ilist<T>``), "
"``ilist<T>`` takes ownership of its nodes.  However, it no longer supports "
"*allocating* nodes, and is now equivalent to ``iplist<T>``.  ``iplist<T>`` "
"will likely be removed in the future."
msgstr ""

#: ../../../ReleaseNotes.rst:151
msgid ""
"``ilist<T>`` now always uses ``ilist_traits<T>``.  Instead of passing a "
"custom traits class in via a template parameter, clients that want to "
"customize the traits should specialize ``ilist_traits<T>``.  Clients that "
"want to avoid ownership can specialize ``ilist_alloc_traits<T>`` to inherit "
"from ``ilist_noalloc_traits<T>`` (or to do something funky); clients that "
"need callbacks can specialize ``ilist_callback_traits<T>`` directly."
msgstr ""

#: ../../../ReleaseNotes.rst:158
msgid ""
"The underlying data structure is now a simple recursive linked list.  The "
"sentinel node contains only a \"next\" (``begin()``) and "
"\"prev\" (``rbegin()``) pointer and is stored in the same allocation as "
"``simple_ilist<T>``. Previously, it was malloc-allocated on-demand by "
"default, although the now-defunct ``ilist_sentinel_traits<T>`` was sometimes "
"specialized to avoid this."
msgstr ""

#: ../../../ReleaseNotes.rst:165
msgid ""
"The ``reverse_iterator`` class no longer uses ``std::reverse_iterator``. "
"Instead, it now has a handle to the same node that it dereferences to. "
"Reverse iterators now have the same iterator invalidation semantics as "
"forward iterators."
msgstr ""

#: ../../../ReleaseNotes.rst:170
msgid ""
"``iterator`` and ``reverse_iterator`` have explicit conversion constructors "
"that match ``std::reverse_iterator``'s off-by-one semantics, so that "
"reversing the end points of an iterator range results in the same range "
"(albeit in reverse).  I.e., ``reverse_iterator(begin())`` equals ``rend()``."
msgstr ""

#: ../../../ReleaseNotes.rst:176
msgid ""
"``iterator::getReverse()`` and ``reverse_iterator::getReverse()`` return an "
"iterator that dereferences to the *same* node.  I.e., ``begin()."
"getReverse()`` equals ``--rend()``."
msgstr ""

#: ../../../ReleaseNotes.rst:180
msgid ""
"``ilist_node<T>::getIterator()`` and ``ilist_node<T>::getReverseIterator()`` "
"return the forward and reverse iterators that dereference to the current "
"node.  I.e., ``begin()->getIterator()`` equals ``begin()`` and ``rbegin()-"
">getReverseIterator()`` equals ``rbegin()``."
msgstr ""

#: ../../../ReleaseNotes.rst:186
msgid ""
"``iterator`` now stores an ``ilist_node_base*`` instead of a ``T*``.  The "
"implicit conversions between ``ilist<T>::iterator`` and ``T*`` have been "
"removed.  Clients may use ``N->getIterator()`` (if not ``nullptr``) or "
"``&*I`` (if not ``end()``); alternatively, clients may refactor to use "
"references for known-good nodes."
msgstr ""

#: ../../../ReleaseNotes.rst:193
msgid "Changes to the ARM Targets"
msgstr ""

#: ../../../ReleaseNotes.rst:195
msgid "**During this release the AArch64 target has:**"
msgstr ""

#: ../../../ReleaseNotes.rst:197
msgid "Gained support for ILP32 relocations."
msgstr ""

#: ../../../ReleaseNotes.rst:198 ../../../ReleaseNotes.rst:213
msgid "Gained support for XRay."
msgstr ""

#: ../../../ReleaseNotes.rst:199
msgid ""
"Made even more progress on GlobalISel. There is still some work left before "
"it is production-ready though."
msgstr ""

#: ../../../ReleaseNotes.rst:201
msgid "Refined the support for Qualcomm's Falkor and Samsung's Exynos CPUs."
msgstr ""

#: ../../../ReleaseNotes.rst:202
msgid ""
"Learned a few new tricks for lowering multiplications by constants, folding "
"spilled/refilled copies etc."
msgstr ""

#: ../../../ReleaseNotes.rst:205
msgid "**During this release the ARM target has:**"
msgstr ""

#: ../../../ReleaseNotes.rst:207
msgid ""
"Gained support for ROPI (read-only position independence) and RWPI (read-"
"write position independence), which can be used to remove the need for a "
"dynamic linker."
msgstr ""

#: ../../../ReleaseNotes.rst:210
msgid ""
"Gained support for execute-only code, which is placed in pages without read "
"permissions."
msgstr ""

#: ../../../ReleaseNotes.rst:212
msgid "Gained a machine scheduler for Cortex-R52."
msgstr ""

#: ../../../ReleaseNotes.rst:214
msgid ""
"Gained Thumb1 implementations for several compiler-rt builtins. It also has "
"some support for building the builtins for HF targets."
msgstr ""

#: ../../../ReleaseNotes.rst:216
msgid "Started using the generic bitreverse intrinsic instead of rbit."
msgstr ""

#: ../../../ReleaseNotes.rst:217
msgid "Gained very basic support for GlobalISel."
msgstr ""

#: ../../../ReleaseNotes.rst:219
msgid ""
"A lot of work has also been done in LLD for ARM, which now supports more "
"relocations and TLS."
msgstr ""

#: ../../../ReleaseNotes.rst:222
msgid ""
"Note: From the next release (5.0), the \"vulcan\" target will be renamed to "
"\"thunderx2t99\", including command line options, assembly directives, etc. "
"This release (4.0) will be the last one to accept \"vulcan\" as its name."
msgstr ""

#: ../../../ReleaseNotes.rst:227
msgid "Changes to the AVR Target"
msgstr ""

#: ../../../ReleaseNotes.rst:229
msgid ""
"This marks the first release where the AVR backend has been completely "
"merged from a fork into LLVM trunk. The backend is still marked "
"experimental, but is generally quite usable. All downstream development has "
"halted on `GitHub <https://github.com/avr-llvm/llvm>`_, and changes now go "
"directly into LLVM trunk."
msgstr ""

#: ../../../ReleaseNotes.rst:235
msgid "Instruction selector and pseudo instruction expansion pass landed"
msgstr ""

#: ../../../ReleaseNotes.rst:236
msgid "`read_register` and `write_register` intrinsics are now supported"
msgstr ""

#: ../../../ReleaseNotes.rst:237
msgid "Support stack stores greater than 63-bytes from the bottom of the stack"
msgstr ""

#: ../../../ReleaseNotes.rst:238
msgid "A number of assertion errors have been fixed"
msgstr ""

#: ../../../ReleaseNotes.rst:239
msgid "Support stores to `undef` locations"
msgstr ""

#: ../../../ReleaseNotes.rst:240
msgid "Very basic support for the target has been added to clang"
msgstr ""

#: ../../../ReleaseNotes.rst:241
msgid "Small optimizations to some 16-bit boolean expressions"
msgstr ""

#: ../../../ReleaseNotes.rst:243
msgid ""
"Most of the work behind the scenes has been on correctness of generated "
"assembly, and also fixing some assertions we would hit on some well-formed "
"inputs."
msgstr ""

#: ../../../ReleaseNotes.rst:248
msgid "Changes to the MIPS Target"
msgstr ""

#: ../../../ReleaseNotes.rst:250
msgid "**During this release the MIPS target has:**"
msgstr ""

#: ../../../ReleaseNotes.rst:252
msgid "IAS is now enabled by default for Debian mips64el."
msgstr ""

#: ../../../ReleaseNotes.rst:253
msgid "Added support for the two operand form for many instructions."
msgstr ""

#: ../../../ReleaseNotes.rst:254
msgid ""
"Added the following macros: unaligned load/store, seq, double word load/"
"store for O32."
msgstr ""

#: ../../../ReleaseNotes.rst:255
msgid "Improved the parsing of complex memory offset expressions."
msgstr ""

#: ../../../ReleaseNotes.rst:256
msgid "Enabled the integrated assembler by default for Debian mips64el."
msgstr ""

#: ../../../ReleaseNotes.rst:257
msgid "Added a generic scheduler based on the interAptiv CPU."
msgstr ""

#: ../../../ReleaseNotes.rst:258
msgid "Added support for thread local relocations."
msgstr ""

#: ../../../ReleaseNotes.rst:259
msgid "Added recip, rsqrt, evp, dvp, synci instructions in IAS."
msgstr ""

#: ../../../ReleaseNotes.rst:260
msgid "Optimized the generation of constants from some cases."
msgstr ""

#: ../../../ReleaseNotes.rst:262
msgid "**The following issues have been fixed:**"
msgstr ""

#: ../../../ReleaseNotes.rst:264
msgid "Thread local debug information is correctly recorded."
msgstr ""

#: ../../../ReleaseNotes.rst:265
msgid "MSA intrinsics are now range checked."
msgstr ""

#: ../../../ReleaseNotes.rst:266
msgid "Fixed an issue with MSA and the no-odd-spreg abi."
msgstr ""

#: ../../../ReleaseNotes.rst:267
msgid "Fixed some corner cases in handling forbidden slots for MIPSR6."
msgstr ""

#: ../../../ReleaseNotes.rst:268
msgid ""
"Fixed an issue with jumps not being converted to relative branches for "
"assembly."
msgstr ""

#: ../../../ReleaseNotes.rst:269
msgid "Fixed the handling of local symbols and jal instruction."
msgstr ""

#: ../../../ReleaseNotes.rst:270
msgid ""
"N32/N64 no longer have their relocation tables sorted as per their ABIs."
msgstr ""

#: ../../../ReleaseNotes.rst:271
msgid ""
"Fixed a crash when half-precision floating point conversion MSA intrinsics "
"are used."
msgstr ""

#: ../../../ReleaseNotes.rst:272
msgid "Fixed several crashes involving FastISel."
msgstr ""

#: ../../../ReleaseNotes.rst:273
msgid "Corrected the corrected definitions for aui/daui/dahi/dati for MIPSR6."
msgstr ""

#: ../../../ReleaseNotes.rst:276
msgid "Changes to the X86 Target"
msgstr ""

#: ../../../ReleaseNotes.rst:278
msgid "**During this release the X86 target has:**"
msgstr ""

#: ../../../ReleaseNotes.rst:280
msgid "Added support AMD Ryzen (znver1) CPUs."
msgstr ""

#: ../../../ReleaseNotes.rst:281
msgid ""
"Gained support for using VEX encoding on AVX-512 CPUs to reduce code size "
"when possible."
msgstr ""

#: ../../../ReleaseNotes.rst:282
msgid "Improved AVX-512 codegen."
msgstr ""

#: ../../../ReleaseNotes.rst:285
msgid "Changes to the OCaml bindings"
msgstr ""

#: ../../../ReleaseNotes.rst:287
msgid ""
"The attribute API was completely overhauled, following the changes to the C "
"API."
msgstr ""

#: ../../../ReleaseNotes.rst:292
msgid "External Open Source Projects Using LLVM 4.0.0"
msgstr ""

#: ../../../ReleaseNotes.rst:295
msgid "LDC - the LLVM-based D compiler"
msgstr ""

#: ../../../ReleaseNotes.rst:297
msgid ""
"`D <http://dlang.org>`_ is a language with C-like syntax and static typing. "
"It pragmatically combines efficiency, control, and modeling power, with "
"safety and programmer productivity. D supports powerful concepts like "
"Compile-Time Function Execution (CTFE) and Template Meta-Programming, "
"provides an innovative approach to concurrency and offers many classical "
"paradigms."
msgstr ""

#: ../../../ReleaseNotes.rst:303
msgid ""
"`LDC <http://wiki.dlang.org/LDC>`_ uses the frontend from the reference "
"compiler combined with LLVM as backend to produce efficient native code. LDC "
"targets x86/x86_64 systems like Linux, OS X, FreeBSD and Windows and also "
"Linux on ARM and PowerPC (32/64 bit). Ports to other architectures like "
"AArch64 and MIPS64 are underway."
msgstr ""

#: ../../../ReleaseNotes.rst:310
msgid "Portable Computing Language (pocl)"
msgstr ""

#: ../../../ReleaseNotes.rst:312
msgid ""
"In addition to producing an easily portable open source OpenCL "
"implementation, another major goal of `pocl <http://pocl.sourceforge.net/>`_ "
"is improving performance portability of OpenCL programs with compiler "
"optimizations, reducing the need for target-dependent manual optimizations. "
"An important part of pocl is a set of LLVM passes used to statically "
"parallelize multiple work-items with the kernel compiler, even in the "
"presence of work-group barriers. This enables static parallelization of the "
"fine-grained static concurrency in the work groups in multiple ways."
msgstr ""

#: ../../../ReleaseNotes.rst:322
msgid "TTA-based Co-design Environment (TCE)"
msgstr ""

#: ../../../ReleaseNotes.rst:324
msgid ""
"`TCE <http://tce.cs.tut.fi/>`_ is a toolset for designing customized "
"processors based on the Transport Triggered Architecture (TTA). The toolset "
"provides a complete co-design flow from C/C++ programs down to synthesizable "
"VHDL/Verilog and parallel program binaries. Processor customization points "
"include register files, function units, supported operations, and the "
"interconnection network."
msgstr ""

#: ../../../ReleaseNotes.rst:331
msgid ""
"TCE uses Clang and LLVM for C/C++/OpenCL C language support, target "
"independent optimizations and also for parts of code generation. It "
"generates new LLVM-based code generators \"on the fly\" for the designed TTA "
"processors and loads them in to the compiler backend as runtime libraries to "
"avoid per-target recompilation of larger parts of the compiler chain."
msgstr ""

#: ../../../ReleaseNotes.rst:339
msgid "Additional Information"
msgstr ""

#: ../../../ReleaseNotes.rst:341
msgid ""
"A wide variety of additional information is available on the `LLVM web page "
"<http://llvm.org/>`_, in particular in the `documentation <http://llvm.org/"
"docs/>`_ section.  The web page also contains versions of the API "
"documentation which is up-to-date with the Subversion version of the source "
"code.  You can access versions of these documents specific to this release "
"by going into the ``llvm/docs/`` directory in the LLVM tree."
msgstr ""

#: ../../../ReleaseNotes.rst:348
msgid ""
"If you have any questions or comments about LLVM, please feel free to "
"contact us via the `mailing lists <http://llvm.org/docs/#maillist>`_."
msgstr ""
