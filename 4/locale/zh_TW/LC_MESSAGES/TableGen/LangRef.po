# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../TableGen/LangRef.rst:3
msgid "TableGen Language Reference"
msgstr ""

#: ../../../TableGen/LangRef.rst:9
msgid ""
"This document is extremely rough. If you find something lacking, please fix "
"it, file a documentation bug, or ask about it on llvm-dev."
msgstr ""

#: ../../../TableGen/LangRef.rst:13
msgid "Introduction"
msgstr "簡介"

#: ../../../TableGen/LangRef.rst:15
msgid ""
"This document is meant to be a normative spec about the TableGen language in "
"and of itself (i.e. how to understand a given construct in terms of how it "
"affects the final set of records represented by the TableGen file). If you "
"are unsure if this document is really what you are looking for, please read "
"the :doc:`introduction to TableGen <index>` first."
msgstr ""

#: ../../../TableGen/LangRef.rst:22
msgid "Notation"
msgstr ""

#: ../../../TableGen/LangRef.rst:24
msgid ""
"The lexical and syntax notation used here is intended to imitate "
"`Python's`_. In particular, for lexical definitions, the productions operate "
"at the character level and there is no implied whitespace between elements. "
"The syntax definitions operate at the token level, so there is implied "
"whitespace between tokens."
msgstr ""

#: ../../../TableGen/LangRef.rst:33
msgid "Lexical Analysis"
msgstr ""

#: ../../../TableGen/LangRef.rst:35
msgid ""
"TableGen supports BCPL (``// ...``) and nestable C-style (``/* ... */``) "
"comments."
msgstr ""

#: ../../../TableGen/LangRef.rst:38
msgid "The following is a listing of the basic punctuation tokens::"
msgstr ""

#: ../../../TableGen/LangRef.rst:42
msgid "Numeric literals take one of the following forms:"
msgstr ""

#: ../../../TableGen/LangRef.rst:54
msgid ""
"One aspect to note is that the :token:`DecimalInteger` token *includes* the "
"``+`` or ``-``, as opposed to having ``+`` and ``-`` be unary operators as "
"most languages do."
msgstr ""

#: ../../../TableGen/LangRef.rst:58
msgid ""
"Also note that :token:`BinInteger` creates a value of type ``bits<n>`` "
"(where ``n`` is the number of bits).  This will implicitly convert to "
"integers when needed."
msgstr ""

#: ../../../TableGen/LangRef.rst:62
msgid "TableGen has identifier-like tokens:"
msgstr ""

#: ../../../TableGen/LangRef.rst:69
msgid ""
"Note that unlike most languages, TableGen allows :token:`TokIdentifier` to "
"begin with a number. In case of ambiguity, a token will be interpreted as a "
"numeric literal rather than an identifier."
msgstr ""

#: ../../../TableGen/LangRef.rst:73
msgid "TableGen also has two string-like literals:"
msgstr ""

#: ../../../TableGen/LangRef.rst:79
msgid ""
":token:`TokCodeFragment` is essentially a multiline string literal delimited "
"by ``[{`` and ``}]``."
msgstr ""

#: ../../../TableGen/LangRef.rst:83
msgid "The current implementation accepts the following C-like escapes::"
msgstr ""

#: ../../../TableGen/LangRef.rst:87
msgid "TableGen also has the following keywords::"
msgstr ""

#: ../../../TableGen/LangRef.rst:93
msgid ""
"TableGen also has \"bang operators\" which have a wide variety of meanings:"
msgstr ""

#: ../../../TableGen/LangRef.rst:105
msgid "Syntax"
msgstr "語法"

#: ../../../TableGen/LangRef.rst:107
msgid ""
"TableGen has an ``include`` mechanism. It does not play a role in the syntax "
"per se, since it is lexically replaced with the contents of the included "
"file."
msgstr ""

#: ../../../TableGen/LangRef.rst:114
msgid "TableGen's top-level production consists of \"objects\"."
msgstr ""

#: ../../../TableGen/LangRef.rst:121
msgid "``class``\\es"
msgstr ""

#: ../../../TableGen/LangRef.rst:126
msgid ""
"A ``class`` declaration creates a record which other records can inherit "
"from. A class can be parametrized by a list of \"template arguments\", whose "
"values can be used in the class body."
msgstr ""

#: ../../../TableGen/LangRef.rst:130
msgid ""
"A given class can only be defined once. A ``class`` declaration is "
"considered to define the class if any of the following is true:"
msgstr ""

#: ../../../TableGen/LangRef.rst:135
msgid "The :token:`TemplateArgList` is present."
msgstr ""

#: ../../../TableGen/LangRef.rst:136
msgid ""
"The :token:`Body` in the :token:`ObjectBody` is present and is not empty."
msgstr ""

#: ../../../TableGen/LangRef.rst:137
msgid "The :token:`BaseClassList` in the :token:`ObjectBody` is present."
msgstr ""

#: ../../../TableGen/LangRef.rst:139
msgid ""
"You can declare an empty class by giving and empty :token:`TemplateArgList` "
"and an empty :token:`ObjectBody`. This can serve as a restricted form of "
"forward declaration: note that records deriving from the forward-declared "
"class will inherit no fields from it since the record expansion is done when "
"the record is parsed."
msgstr ""

#: ../../../TableGen/LangRef.rst:149
msgid "Declarations"
msgstr ""

#: ../../../TableGen/LangRef.rst:153
msgid ""
"The declaration syntax is pretty much what you would expect as a C++ "
"programmer."
msgstr ""

#: ../../../TableGen/LangRef.rst:159
msgid "It assigns the value to the identifier."
msgstr ""

#: ../../../TableGen/LangRef.rst:162
msgid "Types"
msgstr ""

#: ../../../TableGen/LangRef.rst:171
msgid ""
"Both ``string`` and ``code`` correspond to the string type; the difference "
"is purely to indicate programmer intention."
msgstr ""

#: ../../../TableGen/LangRef.rst:174
msgid ""
"The :token:`ClassID` must identify a class that has been previously declared "
"or defined."
msgstr ""

#: ../../../TableGen/LangRef.rst:178
msgid "Values"
msgstr ""

#: ../../../TableGen/LangRef.rst:190
msgid ""
"The peculiar last form of :token:`RangePiece` is due to the fact that the "
"\"``-``\" is included in the :token:`TokInteger`, hence ``1-5`` gets lexed "
"as two consecutive :token:`TokInteger`'s, with values ``1`` and ``-5``, "
"instead of \"1\", \"-\", and \"5\". The :token:`RangeList` can be thought of "
"as specifying \"list slice\" in some contexts."
msgstr ""

#: ../../../TableGen/LangRef.rst:198
msgid ":token:`SimpleValue` has a number of forms:"
msgstr ""

#: ../../../TableGen/LangRef.rst:204
msgid ""
"The value will be the variable referenced by the identifier. It can be one "
"of:"
msgstr ""

#: ../../../TableGen/LangRef.rst:210
msgid "name of a ``def``, such as the use of ``Bar`` in::"
msgstr ""

#: ../../../TableGen/LangRef.rst:220
msgid "value local to a ``def``, such as the use of ``Bar`` in::"
msgstr ""

#: ../../../TableGen/LangRef.rst:227
msgid "a template arg of a ``class``, such as the use of ``Bar`` in::"
msgstr ""

#: ../../../TableGen/LangRef.rst:233
msgid "value local to a ``multiclass``, such as the use of ``Bar`` in::"
msgstr ""

#: ../../../TableGen/LangRef.rst:240
msgid "a template arg to a ``multiclass``, such as the use of ``Bar`` in::"
msgstr ""

#: ../../../TableGen/LangRef.rst:249
msgid "This represents the numeric value of the integer."
msgstr ""

#: ../../../TableGen/LangRef.rst:254
msgid ""
"Multiple adjacent string literals are concatenated like in C/C++. The value "
"is the concatenation of the strings."
msgstr ""

#: ../../../TableGen/LangRef.rst:260
msgid "The value is the string value of the code fragment."
msgstr ""

#: ../../../TableGen/LangRef.rst:265
msgid "``?`` represents an \"unset\" initializer."
msgstr ""

#: ../../../TableGen/LangRef.rst:272
msgid ""
"This represents a sequence of bits, as would be used to initialize a "
"``bits<n>`` field (where ``n`` is the number of bits)."
msgstr ""

#: ../../../TableGen/LangRef.rst:278
msgid ""
"This generates a new anonymous record definition (as would be created by an "
"unnamed ``def`` inheriting from the given class with the given template "
"arguments) and the value is the value of that record definition."
msgstr ""

#: ../../../TableGen/LangRef.rst:285
msgid ""
"A list initializer. The optional :token:`Type` can be used to indicate a "
"specific element type, otherwise the element type will be deduced from the "
"given values."
msgstr ""

#: ../../../TableGen/LangRef.rst:298
msgid "The initial :token:`DagArg` is called the \"operator\" of the dag."
msgstr ""

#: ../../../TableGen/LangRef.rst:304
msgid "Bodies"
msgstr ""

#: ../../../TableGen/LangRef.rst:313
msgid ""
"The version with the :token:`MultiClassID` is only valid in the :token:"
"`BaseClassList` of a ``defm``. The :token:`MultiClassID` should be the name "
"of a ``multiclass``."
msgstr ""

#: ../../../TableGen/LangRef.rst:319
msgid ""
"It is after parsing the base class list that the \"let stack\" is applied."
msgstr ""

#: ../../../TableGen/LangRef.rst:327
msgid "The ``let`` form allows overriding the value of an inherited field."
msgstr ""

#: ../../../TableGen/LangRef.rst:330
msgid "``def``"
msgstr ""

#: ../../../TableGen/LangRef.rst:332
msgid "Todo"
msgstr ""

#: ../../../TableGen/LangRef.rst:333
msgid ""
"There can be pastes in the names here, like ``#NAME#``. Look into that and "
"document it (it boils down to ParseIDValue with IDParseMode == "
"ParseNameMode). ParseObjectName calls into the general ParseValue, with the "
"only different from \"arbitrary expression parsing\" being IDParseMode == "
"Mode."
msgstr ""

#: ../../../TableGen/LangRef.rst:342
msgid ""
"Defines a record whose name is given by the :token:`TokIdentifier`. The "
"fields of the record are inherited from the base classes and defined in the "
"body."
msgstr ""

#: ../../../TableGen/LangRef.rst:346
msgid ""
"Special handling occurs if this ``def`` appears inside a ``multiclass`` or a "
"``foreach``."
msgstr ""

#: ../../../TableGen/LangRef.rst:350
msgid "``defm``"
msgstr ""

#: ../../../TableGen/LangRef.rst:355
msgid ""
"Note that in the :token:`BaseClassList`, all of the ``multiclass``'s must "
"precede any ``class``'s that appear."
msgstr ""

#: ../../../TableGen/LangRef.rst:359
msgid "``foreach``"
msgstr ""

#: ../../../TableGen/LangRef.rst:365
msgid ""
"The value assigned to the variable in the declaration is iterated over and "
"the object or object list is reevaluated with the variable set at each "
"iterated value."
msgstr ""

#: ../../../TableGen/LangRef.rst:370
msgid "Top-Level ``let``"
msgstr ""

#: ../../../TableGen/LangRef.rst:378
msgid ""
"This is effectively equivalent to ``let`` inside the body of a record except "
"that it applies to multiple records at a time. The bindings are applied at "
"the end of parsing the base classes of a record."
msgstr ""

#: ../../../TableGen/LangRef.rst:383
msgid "``multiclass``"
msgstr ""
