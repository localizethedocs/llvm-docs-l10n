# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../HowToReleaseLLVM.rst:3
msgid "How To Release LLVM To The Public"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:6
msgid "Introduction"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:8
msgid ""
"This document contains information about successfully releasing LLVM --- "
"including sub-projects: e.g., ``clang`` and ``compiler-rt`` --- to the "
"public. It is the Release Manager's responsibility to ensure that a high "
"quality build of LLVM is released."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:13
msgid ""
"If you're looking for the document on how to test the release candidates and "
"create the binary packages, please refer to the :doc:`ReleaseProcess` "
"instead."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:19
msgid "Release Timeline"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:21
msgid ""
"LLVM is released on a time based schedule --- with major releases roughly "
"every 6 months.  In between major releases there may be dot releases. The "
"release manager will determine if and when to make a dot release based on "
"feedback from the community.  Typically, dot releases should be made if "
"there are large number of bug-fixes in the stable branch or a critical bug "
"has been discovered that affects a large number of users."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:28
msgid ""
"Unless otherwise stated, dot releases will follow the same procedure as "
"major releases."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:31
msgid "The release process is roughly as follows:"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:33
msgid ""
"Set code freeze and branch creation date for 6 months after last code freeze "
"date.  Announce release schedule to the LLVM community and update the "
"website."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:36
msgid "Create release branch and begin release process."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:38
msgid ""
"Send out release candidate sources for first round of testing.  Testing "
"lasts 7-10 days.  During the first round of testing, any regressions found "
"should be fixed.  Patches are merged from mainline into the release branch.  "
"Also, all features need to be completed during this time.  Any features not "
"completed at the end of the first round of testing will be removed or "
"disabled for the release."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:45
msgid ""
"Generate and send out the second release candidate sources.  Only *critical* "
"bugs found during this testing phase will be fixed.  Any bugs introduced by "
"merged patches will be fixed.  If so a third round of testing is needed."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:49
msgid "The release notes are updated."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:51
msgid "Finally, release!"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:53
msgid ""
"The release process will be accelerated for dot releases.  If the first "
"round of testing finds no critical bugs and no regressions since the last "
"major release, then additional rounds of testing will not be required."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:58
msgid "Release Process"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:64
msgid "Release Administrative Tasks"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:66
msgid ""
"This section describes a few administrative tasks that need to be done for "
"the release process to begin.  Specifically, it involves:"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:69
msgid "Creating the release branch,"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:71
msgid "Setting version numbers, and"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:73
msgid "Tagging release candidates for the release team to begin testing."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:76
msgid "Create Release Branch"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:78
msgid "Branch the Subversion trunk using the following procedure:"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:80
msgid ""
"Remind developers that the release branching is imminent and to refrain from "
"committing patches that might break the build.  E.g., new features, large "
"patches for works in progress, an overhaul of the type system, an exciting "
"new TableGen feature, etc."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:85
msgid ""
"Verify that the current Subversion trunk is in decent shape by examining "
"nightly tester and buildbot results."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:88
msgid ""
"Create the release branch for ``llvm``, ``clang``, and other sub-projects, "
"from the last known good revision.  The branch's name is ``release_XY``, "
"where ``X`` is the major and ``Y`` the minor release numbers.  Use ``utils/"
"release/tag.sh`` to tag the release."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:93
msgid ""
"Advise developers that they may now check their patches into the Subversion "
"tree again."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:96
msgid ""
"The Release Manager should switch to the release branch, because all changes "
"to the release will now be done in the branch.  The easiest way to do this "
"is to grab a working copy using the following commands:"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:109
msgid "Update LLVM Version"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:111
msgid ""
"After creating the LLVM release branch, update the release branches' "
"``autoconf`` and ``configure.ac`` versions from '``X.Ysvn``' to '``X.Y``'. "
"Update it on mainline as well to be the next version ('``X.Y+1svn``'). "
"Regenerate the configure scripts for both ``llvm`` and the ``test-suite``."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:116
msgid ""
"In addition, the version numbers of all the Bugzilla components must be "
"updated for the next release."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:120
msgid "Tagging the LLVM Release Candidates"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:122
msgid "Tag release candidates using the tag.sh script in utils/release."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:128
msgid ""
"The Release Manager may supply pre-packaged source tarballs for users.  This "
"can be done with the export.sh script in utils/release."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:135
msgid ""
"This will generate source tarballs for each LLVM project being validated, "
"which can be uploaded to the website for further testing."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:139
msgid "Build Clang Binary Distribution"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:141
msgid ""
"Creating the ``clang`` binary distribution requires following the "
"instructions :doc:`here <ReleaseProcess>`."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:144
msgid ""
"That process will perform both Release+Asserts and Release builds but only "
"pack the Release build for upload. You should use the Release+Asserts "
"sysroot, normally under ``final/Phase3/Release+Asserts/llvmCore-3.8.1-RCn."
"install/``, for test-suite and run-time benchmarks, to make sure nothing "
"serious has passed through the net. For compile-time benchmarks, use the "
"Release version."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:150
msgid ""
"The minimum required version of the tools you'll need are :doc:`here "
"<GettingStarted>`"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:153
msgid "Release Qualification Criteria"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:155
msgid ""
"A release is qualified when it has no regressions from the previous release "
"(or baseline).  Regressions are related to correctness first and performance "
"second. (We may tolerate some minor performance regressions if they are "
"deemed necessary for the general quality of the compiler.)"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:160
msgid ""
"More specifically, Clang/LLVM is qualified when it has a clean test with all "
"supported sub-projects included (``make check-all``), per target, and it has "
"no regressions with the ``test-suite`` in relation to the previous release."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:164
msgid ""
"Regressions are new failures in the set of tests that are used to qualify "
"each product and only include things on the list.  Every release will have "
"some bugs in it.  It is the reality of developing a complex piece of "
"software.  We need a very concrete and definitive release criteria that "
"ensures we have monotonically improving quality on some metric.  The metric "
"we use is described below.  This doesn't mean that we don't care about other "
"criteria, but these are the criteria which we found to be most important and "
"which must be satisfied before a release can go out."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:174
msgid "Official Testing"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:176
msgid ""
"A few developers in the community have dedicated time to validate the "
"release candidates and volunteered to be the official release testers for "
"each architecture."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:180
msgid ""
"These will be the ones testing, generating and uploading the official "
"binaries to the server, and will be the minimum tests *necessary* for the "
"release to proceed."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:184
msgid ""
"This will obviously not cover all OSs and distributions, so additional "
"community validation is important. However, if community input is not "
"reached before the release is out, all bugs reported will have to go on the "
"next stable release."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:188
msgid "The official release managers are:"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:190
msgid "Major releases (X.0): Hans Wennborg"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:191
msgid "Stable releases (X.n): Tom Stellard"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:193
msgid ""
"The official release testers are volunteered from the community and have "
"consistently validated and released binaries for their targets/OSs. To "
"contact them, you should email the ``release-testers@lists.llvm.org`` "
"mailing list."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:197
msgid ""
"The official testers list is in the file ``RELEASE_TESTERS.TXT``, in the "
"``LLVM`` repository."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:201
msgid "Community Testing"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:203
msgid ""
"Once all testing has been completed and appropriate bugs filed, the release "
"candidate tarballs are put on the website and the LLVM community is notified."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:206
msgid ""
"We ask that all LLVM developers test the release in any the following ways:"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:208
msgid ""
"Download ``llvm-X.Y``, ``llvm-test-X.Y``, and the appropriate ``clang`` "
"binary.  Build LLVM.  Run ``make check`` and the full LLVM test suite "
"(``make TEST=nightly report``)."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:212
msgid ""
"Download ``llvm-X.Y``, ``llvm-test-X.Y``, and the ``clang`` sources.  "
"Compile everything.  Run ``make check`` and the full LLVM test suite (``make "
"TEST=nightly report``)."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:216
msgid ""
"Download ``llvm-X.Y``, ``llvm-test-X.Y``, and the appropriate ``clang`` "
"binary. Build whole programs with it (ex. Chromium, Firefox, Apache) for "
"your platform."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:220
msgid ""
"Download ``llvm-X.Y``, ``llvm-test-X.Y``, and the appropriate ``clang`` "
"binary. Build *your* programs with it and check for conformance and "
"performance regressions."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:224
msgid ""
"Run the :doc:`release process <ReleaseProcess>`, if your platform is "
"*different* than that which is officially supported, and report back errors "
"only if they were not reported by the official release tester for that "
"architecture."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:229
msgid ""
"We also ask that the OS distribution release managers test their packages "
"with the first candidate of every release, and report any *new* errors in "
"Bugzilla. If the bug can be reproduced with an unpatched upstream version of "
"the release candidate (as opposed to the distribution's own build), the "
"priority should be release blocker."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:235
msgid ""
"During the first round of testing, all regressions must be fixed before the "
"second release candidate is tagged."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:238
msgid ""
"In the subsequent stages, the testing is only to ensure that bug fixes "
"previously merged in have not created new major problems. *This is not the "
"time to solve additional and unrelated bugs!* If no patches are merged in, "
"the release is determined to be ready and the release manager may move onto "
"the next stage."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:245
msgid "Reporting Regressions"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:247
msgid ""
"Every regression that is found during the tests (as per the criteria above), "
"should be filled in a bug in Bugzilla with the priority *release blocker* "
"and blocking a specific release."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:251
msgid ""
"To help manage all the bugs reported and which ones are blockers or not, a "
"new \"[meta]\" bug should be created and all regressions *blocking* that "
"Meta. Once all blockers are done, the Meta can be closed."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:255
msgid ""
"If a bug can't be reproduced, or stops being a blocker, it should be removed "
"from the Meta and its priority decreased to *normal*. Debugging can "
"continue, but on trunk."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:260
msgid "Release Patch Rules"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:262
msgid "Below are the rules regarding patching the release branch:"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:264
msgid ""
"Patches applied to the release branch may only be applied by the release "
"manager, the official release testers or the code owners with approval from "
"the release manager."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:268
msgid ""
"During the first round of testing, patches that fix regressions or that are "
"small and relatively risk free (verified by the appropriate code owner) are "
"applied to the branch.  Code owners are asked to be very conservative in "
"approving patches for the branch.  We reserve the right to reject any patch "
"that does not fix a regression as previously defined."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:274
msgid ""
"During the remaining rounds of testing, only patches that fix critical "
"regressions may be applied."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:277
msgid ""
"For dot releases all patches must maintain both API and ABI compatibility "
"with the previous major release.  Only bug-fixes will be accepted."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:281
msgid "Merging Patches"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:283
msgid ""
"The ``utils/release/merge.sh`` script can be used to merge individual "
"revisions into any one of the llvm projects. To merge revision ``$N`` into "
"project ``$PROJ``, do:"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:287
msgid ""
"``svn co https://llvm.org/svn/llvm-project/$PROJ/branches/release_XX $PROJ."
"src``"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:290
msgid "``$PROJ.src/utils/release/merge.sh --proj $PROJ --rev $N``"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:292
msgid "Run regression tests."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:294
msgid ""
"``cd $PROJ.src``. Run the ``svn commit`` command printed out by ``merge.sh`` "
"in step 2."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:298
msgid "Release Final Tasks"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:300
msgid ""
"The final stages of the release process involves tagging the \"final\" "
"release branch, updating documentation that refers to the release, and "
"updating the demo page."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:305
msgid "Update Documentation"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:307
msgid ""
"Review the documentation and ensure that it is up to date.  The \"Release "
"Notes\" must be updated to reflect new features, bug fixes, new known "
"issues, and changes in the list of supported platforms.  The \"Getting "
"Started Guide\" should be updated to reflect the new release version number "
"tag available from Subversion and changes in basic system requirements.  "
"Merge both changes from mainline into the release branch."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:317
msgid "Tag the LLVM Final Release"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:319
msgid "Tag the final release sources using the tag.sh script in utils/release."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:326
msgid "Update the LLVM Demo Page"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:328
msgid ""
"The LLVM demo page must be updated to use the new release.  This consists of "
"using the new ``clang`` binary and building LLVM."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:332
msgid "Update the LLVM Website"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:334
msgid ""
"The website must be updated before the release announcement is sent out.  "
"Here is what to do:"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:337
msgid "Check out the ``www`` module from Subversion."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:339
msgid "Create a new sub-directory ``X.Y`` in the releases directory."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:341
msgid ""
"Commit the ``llvm``, ``test-suite``, ``clang`` source and binaries in this "
"new directory."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:344
msgid ""
"Copy and commit the ``llvm/docs`` and ``LICENSE.txt`` files into this new "
"directory.  The docs should be built with ``BUILD_FOR_WEBSITE=1``."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:347
msgid ""
"Commit the ``index.html`` to the ``release/X.Y`` directory to redirect (use "
"from previous release)."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:350
msgid "Update the ``releases/download.html`` file with the new release."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:352
msgid ""
"Update the ``releases/index.html`` with the new release and link to release "
"documentation."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:355
msgid ""
"Finally, update the main page (``index.html`` and sidebar) to point to the "
"new release and release announcement.  Make sure this all gets committed "
"back into Subversion."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:360
msgid "Announce the Release"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:362
msgid ""
"Send an email to the list announcing the release, pointing people to all the "
"relevant documentation, download pages and bugs fixed."
msgstr ""
