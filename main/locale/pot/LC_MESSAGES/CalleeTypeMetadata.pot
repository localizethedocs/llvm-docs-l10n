# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM main\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 08:36+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../CalleeTypeMetadata.rst:3
msgid "Callee Type Metadata"
msgstr ""

#: ../../../CalleeTypeMetadata.rst:6
msgid "Introduction"
msgstr ""

#: ../../../CalleeTypeMetadata.rst:7
msgid ""
"This ``!callee_type`` metadata is introduced to support the generation of a "
"call graph section in the object file.  The ``!callee_type`` metadata is "
"used to identify the types of the intended callees of indirect call "
"instructions. The ``!callee_type`` metadata is a list of one or more "
"generalized ``!type`` metadata objects (See :doc:`TypeMetadata`) with each "
"``!type`` metadata pointing to a callee's :ref:`type identifier <calleetype-"
"type-identifier>`. LLVM's `Control Flow Integrity (CFI)`_ also uses the ``!"
"type`` metadata in its implementation."
msgstr ""

#: ../../../CalleeTypeMetadata.rst:19
msgid "Type identifier"
msgstr ""

#: ../../../CalleeTypeMetadata.rst:21
msgid ""
"The type for an indirect call target is the callee's function signature. "
"Mapping from a type to an identifier is an ABI detail. In the current "
"implementation, an identifier of type T is computed as follows:"
msgstr ""

#: ../../../CalleeTypeMetadata.rst:26
msgid "Obtain the generalized mangled name for “typeinfo name for T”."
msgstr ""

#: ../../../CalleeTypeMetadata.rst:27
msgid "Compute MD5 hash of the name as a string."
msgstr ""

#: ../../../CalleeTypeMetadata.rst:28
msgid ""
"Reinterpret the first 8 bytes of the hash as a little-endian 64-bit integer."
msgstr ""

#: ../../../CalleeTypeMetadata.rst:30
msgid ""
"To avoid mismatched pointer types, generalizations are applied. Pointers in "
"return and argument types are treated as equivalent as long as the "
"qualifiers for the type they point to match. For example, ``char*``, "
"``char**``, and ``int*`` are considered equivalent types. However, ``char*`` "
"and ``const char*`` are considered distinct types."
msgstr ""
