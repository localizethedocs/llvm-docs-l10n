# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM main\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:10+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../CommandGuide/llvm-ir2vec.rst:2
msgid "llvm-ir2vec - IR2Vec Embedding Generation Tool"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:7
msgid "SYNOPSIS"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:9
msgid ":program:`llvm-ir2vec` [*subcommand*] [*options*]"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:12
msgid "DESCRIPTION"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:14
msgid ""
":program:`llvm-ir2vec` is a standalone command-line tool for IR2Vec. It "
"generates IR2Vec embeddings for LLVM IR and supports triplet generation for "
"vocabulary training."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:18
msgid "The tool provides three main subcommands:"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:20
msgid ""
"**triplets**: Generates numeric triplets in train2id format for vocabulary "
"training from LLVM IR."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:23
msgid ""
"**entities**: Generates entity mapping files (entity2id.txt) for vocabulary "
"training."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:26
msgid ""
"**embeddings**: Generates IR2Vec embeddings using a trained vocabulary at "
"different granularity levels (instruction, basic block, or function)."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:29
msgid ""
"The tool is designed to facilitate machine learning applications that work "
"with LLVM IR by converting the IR into numerical representations that can be "
"used by ML models. The `triplets` subcommand generates numeric IDs directly "
"instead of string triplets, streamlining the training data preparation "
"workflow."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:36
msgid ""
"For information about using IR2Vec programmatically within LLVM passes and "
"the C++ API, see the `IR2Vec Embeddings <https://llvm.org/docs/MLGO."
"html#ir2vec-embeddings>`_ section in the MLGO documentation."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:41
msgid "OPERATION MODES"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:43
msgid ""
"Triplet Generation and Entity Mapping Modes are used for preparing "
"vocabulary and training data for knowledge graph embeddings. The Embedding "
"Mode is used for generating embeddings from LLVM IR using a pre-trained "
"vocabulary."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:47
msgid ""
"The Seed Embedding Vocabulary of IR2Vec is trained on a large corpus of LLVM "
"IR by modeling the relationships between opcodes, types, and operands as a "
"knowledge graph. For this purpose, Triplet Generation and Entity Mapping "
"Modes generate triplets and entity mappings in the standard format used for "
"knowledge graph embedding training (see <https://github.com/thunlp/OpenKE/"
"tree/OpenKE-PyTorch?tab=readme-ov-file#data-format> for details)."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:55
msgid ""
"See `llvm/utils/mlgo-utils/IR2Vec/generateTriplets.py` for more details on "
"how these two modes are used to generate the triplets and entity mappings."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:59
msgid "Triplet Generation"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:61
msgid ""
"With the `triplets` subcommand, :program:`llvm-ir2vec` analyzes LLVM IR and "
"extracts numeric triplets consisting of opcode IDs, type IDs, and operand "
"IDs. These triplets are generated in the standard format used for knowledge "
"graph embedding training. The tool outputs numeric IDs directly using the "
"ir2vec::Vocabulary mapping infrastructure, eliminating the need for string-"
"to-ID preprocessing."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:67
#: ../../../CommandGuide/llvm-ir2vec.rst:82
msgid "Usage:"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:74
msgid "Entity Mapping Generation"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:76
msgid ""
"With the `entities` subcommand, :program:`llvm-ir2vec` generates the entity "
"mappings supported by IR2Vec in the standard format used for knowledge graph "
"embedding training. This subcommand outputs all supported entities (opcodes, "
"types, and operands) with their corresponding numeric IDs, and is not "
"specific for an LLVM IR file."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:89
msgid "Embedding Generation"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:91
msgid ""
"With the `embeddings` subcommand, :program:`llvm-ir2vec` uses a pre-trained "
"vocabulary to generate numerical embeddings for LLVM IR at different levels "
"of granularity."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:94
msgid "Example Usage:"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:101
msgid "OPTIONS"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:103
msgid "Global options:"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:107
msgid ""
"Specify the output filename. Use ``-`` to write to standard output (default)."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:111
msgid "Print a summary of command line options."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:113
msgid "Subcommand-specific options:"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:115
msgid "**embeddings** subcommand:"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:119
msgid ""
"The input LLVM IR or bitcode file to process. This positional argument is "
"required for the `embeddings` subcommand."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:124
msgid "Specify the embedding generation level. Valid values are:"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:126
msgid "``inst`` - Generate instruction-level embeddings"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:127
msgid "``bb`` - Generate basic block-level embeddings"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:128
msgid "``func`` - Generate function-level embeddings (default)"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:132
msgid ""
"Process only the specified function instead of all functions in the module."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:136
msgid "Specify the kind of IR2Vec embeddings to generate. Valid values are:"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:138
msgid "``symbolic`` - Generate symbolic embeddings (default)"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:139
msgid "``flow-aware`` - Generate flow-aware embeddings"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:141
msgid ""
"Flow-aware embeddings consider control flow relationships between "
"instructions, while symbolic embeddings focus on the symbolic representation "
"of instructions."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:146
msgid ""
"Specify the path to the vocabulary file (required for embedding generation). "
"The vocabulary file should be in JSON format and contain the trained "
"vocabulary for embedding generation. See `llvm/lib/Analysis/models` for pre-"
"trained vocabulary files."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:153
msgid ""
"Specify the weight for opcode embeddings (default: 1.0). This controls the "
"relative importance of instruction opcodes in the final embedding."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:158
msgid ""
"Specify the weight for type embeddings (default: 0.5). This controls the "
"relative importance of type information in the final embedding."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:163
msgid ""
"Specify the weight for argument embeddings (default: 0.2). This controls the "
"relative importance of operand information in the final embedding."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:167
msgid "**triplets** subcommand:"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:171
msgid ""
"The input LLVM IR or bitcode file to process. This positional argument is "
"required for the `triplets` subcommand."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:174
msgid "**entities** subcommand:"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:176
msgid "No subcommand-specific options."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:179
msgid "OUTPUT FORMAT"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:182
msgid "Triplet Mode Output"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:184
msgid ""
"In triplet mode, the output consists of numeric triplets in train2id format "
"with metadata headers. The format includes:"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:194
msgid ""
"Each line after the metadata header represents one instruction relationship, "
"with numeric IDs for head entity, relation, and tail entity. The metadata "
"header (MAX_RELATIONS) provides counts for post-processing and training "
"setup."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:199
msgid "Entity Mode Output"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:201
msgid "In entity mode, the output consists of entity mapping in the format:"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:210
msgid ""
"The first line contains the total number of entities, followed by one entity "
"mapping per line with tab-separated entity string and numeric ID."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:214
msgid "Embedding Mode Output"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:216
msgid "In embedding mode, the output format depends on the specified level:"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:218
msgid "**Function Level**: One embedding vector per function"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:219
msgid ""
"**Basic Block Level**: One embedding vector per basic block, grouped by "
"function"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:220
msgid ""
"**Instruction Level**: One embedding vector per instruction, grouped by "
"basic block and function"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:222
msgid "Each embedding is represented as a floating point vector."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:225
msgid "EXIT STATUS"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:227
msgid ""
":program:`llvm-ir2vec` returns 0 on success, and a non-zero value on failure."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:229
msgid "Common failure cases include:"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:231
msgid "Invalid or missing input file"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:232
msgid "Missing or invalid vocabulary file (in embedding mode)"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:233
msgid "Specified function not found in the module"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:234
msgid "Invalid command line options"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:237
msgid "SEE ALSO"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:239
msgid ":doc:`../MLGO`"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:241
msgid ""
"For more information about the IR2Vec algorithm and approach, see: `IR2Vec: "
"LLVM IR Based Scalable Program Embeddings <https://doi."
"org/10.1145/3418463>`_."
msgstr ""
