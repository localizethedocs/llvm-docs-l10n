# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM main\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:10+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../PDB/CodeViewSymbols.rst:3
msgid "CodeView Symbol Records"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:12
msgid "Introduction"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:14
msgid ""
"This document describes the usage and serialization format of the various "
"CodeView symbol records that LLVM understands.  Like :doc:`CodeView Type "
"Records <CodeViewTypes>`, we describe only the important types which are "
"generated by modern C++ toolchains."
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:20
msgid "Record Categories"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:22
msgid ""
"Symbol records share one major similarity with :doc:`type records "
"<CodeViewTypes>`: They start with the same :ref:`record prefix "
"<leaf_types>`, which we will not describe again (refer to the previous link "
"for a description).  As a result of this, a sequence of symbol records can "
"be processed with largely the same code as that which processes type "
"records.  There are several important differences between symbol and type "
"records:"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:28
msgid ""
"Symbol records only appear in the :doc:`PublicStream`, :doc:`GlobalStream`, "
"and :doc:`Module Info Streams <ModiStream>`."
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:30
msgid "Type records only appear in the :doc:`TPI & IPI streams <TpiStream>`."
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:31
msgid ""
"While types are referenced from other CodeView records via :ref:`type "
"indices <type_indices>`, symbol records are referenced by the byte offset of "
"the record in the stream that it appears in."
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:34
msgid ""
"Types can reference types (via type indices), and symbols can reference both "
"types (via type indices) and symbols (via offsets), but types can never "
"reference symbols."
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:36
msgid ""
"There is no notion of :ref:`Leaf Records <leaf_types>` and :ref:`Member "
"Records <member_types>` as there are with types.  Every symbol record "
"describes is own length."
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:38
msgid ""
"Certain special symbol records begin a \"scope\".  For these records, all "
"following records up until the next ``S_END`` record are \"children\" of "
"this symbol record.  For example, given a symbol record which describes a "
"certain function, all local variables of this function would appear "
"following the function up until the corresponding ``S_END`` record."
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:43
msgid ""
"Finally, there are three general categories of symbol record, grouped by "
"where they are legal to appear in a PDB file.  Public Symbols (which appear "
"only in the :doc:`publics stream <PublicStream>`), Global Symbols (which "
"appear only in the :doc:`globals stream <GlobalStream>`) and module symbols "
"(which appear in the :doc:`module info stream <ModiStream>`)."
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:53
msgid "Public Symbols"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:55
msgid ""
"Public symbols are the CodeView equivalent of DWARF ``.debug_pubnames``.  "
"There is one public symbol record for every function or variable in the "
"program that has a mangled name.  The :doc:`Publics Stream <PublicStream>`, "
"which contains these records, additionally contains a hash table that allows "
"one to quickly locate a record by mangled name."
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:62
msgid "S_PUB32 (0x110e)"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:64
msgid ""
"There is only type of public symbol, an ``S_PUB32`` which describes a "
"mangled name, a flag indicating what kind of symbol it is (e.g. function, "
"variable), and the symbol's address.  The :ref:`dbi_section_map_substream` "
"of the :doc:`DBI Stream <DbiStream>` can be consulted to determine what "
"module this address corresponds to, and from there that module's :doc:"
"`module debug stream <ModiStream>` can be consulted to locate full "
"information for the symbol with the given address."
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:74
msgid "Global Symbols"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:76
msgid ""
"While there is one :ref:`public symbol <public_symbols>` for every symbol in "
"the program with `external` linkage, there is one global symbol for every "
"symbol in the program with linkage (including internal linkage).  As a "
"result, global symbols do not describe a mangled name *or* an address, since "
"symbols with internal linkage need not have any mangling at all, and also "
"may not have an address.  Thus, all global symbols simply refer directly to "
"the full symbol record via a module/offset combination."
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:84
msgid ""
"Similarly to :ref:`public symbols <public_symbols>`, all global symbols are "
"contained in a single :doc:`Globals Stream <GlobalStream>`, which contains a "
"hash table mapping fully qualified name to the corresponding record in the "
"globals stream (which as mentioned, then contains information allowing one "
"to locate the full record in the corresponding module symbol stream)."
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:90
msgid ""
"Note that a consequence and limitation of this design is that program-wide "
"lookup by anything other than an exact textually matching fully-qualified "
"name of whatever the compiler decided to emit is impractical.  This differs "
"from DWARF, where even though we don't necessarily have O(1) lookup by "
"basename within a given scope (including O(1) scope, we at least have O(n) "
"access within a given scope)."
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:97
msgid ""
"Program-wide lookup of names by anything other than an exact textually "
"matching fully qualified name is not possible."
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:102
msgid "S_GDATA32"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:105
msgid "S_GTHREAD32 (0x1113)"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:108
msgid "S_PROCREF (0x1125)"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:111
msgid "S_LPROCREF (0x1127)"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:114
msgid "S_GMANDATA (0x111d)"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:119
msgid "Module Symbols"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:122
msgid "S_END (0x0006)"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:125
msgid "S_FRAMEPROC (0x1012)"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:128
msgid "S_OBJNAME (0x1101)"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:131
msgid "S_THUNK32 (0x1102)"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:134
msgid "S_BLOCK32 (0x1103)"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:137
msgid "S_LABEL32 (0x1105)"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:140
msgid "S_REGISTER (0x1106)"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:143
msgid "S_BPREL32 (0x110b)"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:146
msgid "S_LPROC32 (0x110f)"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:149
msgid "S_GPROC32 (0x1110)"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:152
msgid "S_REGREL32 (0x1111)"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:155
msgid "S_COMPILE2 (0x1116)"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:158
msgid "S_UNAMESPACE (0x1124)"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:161
msgid "S_TRAMPOLINE (0x112c)"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:164
msgid "S_SECTION (0x1136)"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:167
msgid "S_COFFGROUP (0x1137)"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:170
msgid "S_EXPORT (0x1138)"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:173
msgid "S_CALLSITEINFO (0x1139)"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:176
msgid "S_FRAMECOOKIE (0x113a)"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:179
msgid "S_COMPILE3 (0x113c)"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:182
msgid "S_ENVBLOCK (0x113d)"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:185
msgid "S_LOCAL (0x113e)"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:188
msgid "S_DEFRANGE (0x113f)"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:191
msgid "S_DEFRANGE_SUBFIELD (0x1140)"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:194
msgid "S_DEFRANGE_REGISTER (0x1141)"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:197
msgid "S_DEFRANGE_FRAMEPOINTER_REL (0x1142)"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:200
msgid "S_DEFRANGE_SUBFIELD_REGISTER (0x1143)"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:203
msgid "S_DEFRANGE_FRAMEPOINTER_REL_FULL_SCOPE (0x1144)"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:206
msgid "S_DEFRANGE_REGISTER_REL (0x1145)"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:209
msgid "S_LPROC32_ID (0x1146)"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:212
msgid "S_GPROC32_ID (0x1147)"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:215
msgid "S_BUILDINFO (0x114c)"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:218
msgid "S_INLINESITE (0x114d)"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:221
msgid "S_INLINESITE_END (0x114e)"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:224
msgid "S_PROC_ID_END (0x114f)"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:227
msgid "S_FILESTATIC (0x1153)"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:230
msgid "S_LPROC32_DPC (0x1155)"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:233
msgid "S_LPROC32_DPC_ID (0x1156)"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:236
msgid "S_CALLEES (0x115a)"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:239
msgid "S_CALLERS (0x115b)"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:242
msgid "S_HEAPALLOCSITE (0x115e)"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:245
msgid "S_FASTLINK (0x1167)"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:248
msgid "S_INLINEES (0x1168)"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:253
msgid ""
"Symbols which can go in either/both of the module info stream & global stream"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:256
msgid "S_CONSTANT (0x1107)"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:259
msgid "S_UDT (0x1108)"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:262
msgid "S_LDATA32 (0x110c)"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:265
msgid "S_LTHREAD32 (0x1112)"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:268
msgid "S_LMANDATA (0x111c)"
msgstr ""

#: ../../../PDB/CodeViewSymbols.rst:271
msgid "S_MANCONSTANT (0x112d)"
msgstr ""
