# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM main\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:10+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr_FR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../GitHub.rst:5
msgid "LLVM GitHub User Guide"
msgstr ""

#: ../../../GitHub.rst:11
msgid "Introduction"
msgstr ""

#: ../../../GitHub.rst:12
msgid ""
"The LLVM Project uses `GitHub <https://github.com/>`_ for `Source Code "
"<https://github.com/llvm/llvm-project>`_, `Releases <https://github.com/llvm/"
"llvm-project/releases>`_, `Issue Tracking <https://github.com/llvm/llvm-"
"project/issues>`_., and `Code Reviews <https://github.com/llvm/llvm-project/"
"pulls>`_."
msgstr ""

#: ../../../GitHub.rst:18
msgid ""
"This page describes how the LLVM Project users and developers can "
"participate in the project using GitHub."
msgstr ""

#: ../../../GitHub.rst:22
msgid "Before your first PR"
msgstr ""

#: ../../../GitHub.rst:24
msgid ""
"Please ensure that you have set a valid email address in your GitHub "
"account, see :ref:`github-email-address`."
msgstr ""

#: ../../../GitHub.rst:28
msgid "Pull Requests"
msgstr ""

#: ../../../GitHub.rst:29
msgid ""
"The LLVM project is using GitHub Pull Requests for Code Reviews. This "
"document describes the typical workflow of creating a Pull Request and "
"getting it reviewed and accepted. This is meant as an overview of the GitHub "
"workflow, for complete documentation refer to `GitHub's documentation "
"<https://docs.github.com/pull-requests>`_."
msgstr ""

#: ../../../GitHub.rst:35
msgid ""
"If you are using a Pull Request for purposes other than review (eg: "
"precommit CI results, convenient web-based reverts, etc) add the `skip-"
"precommit-approval <https://github.com/llvm/llvm-project/labels?q=skip-"
"precommit-approval>`_ label to the PR."
msgstr ""

#: ../../../GitHub.rst:41
msgid "GitHub Tools"
msgstr ""

#: ../../../GitHub.rst:42
msgid ""
"You can interact with GitHub in several ways: via git command line tools, "
"the web browser, `GitHub Desktop <https://desktop.github.com/>`_, or the "
"`GitHub CLI <https://cli.github.com>`_. This guide will cover the git "
"command line tools and the GitHub CLI."
msgstr ""

#: ../../../GitHub.rst:48
msgid "Creating Pull Requests"
msgstr ""

#: ../../../GitHub.rst:49
msgid ""
"Keep in mind that when creating a pull request, it should generally only "
"contain one self-contained commit initially. This makes it easier for "
"reviewers to understand the introduced changes and provide feedback. It also "
"helps maintain a clear and organized commit history for the project. If you "
"have multiple changes you want to introduce, it's recommended to create "
"separate pull requests for each change."
msgstr ""

#: ../../../GitHub.rst:56
msgid ""
"Create a local branch per commit you want to submit and then push that "
"branch to your `fork <https://docs.github.com/en/pull-requests/collaborating-"
"with-pull-requests/working-with-forks>`_ of the llvm-project and `create a "
"pull request from the fork <https://docs.github.com/en/pull-requests/"
"collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-"
"requests/creating-a-pull-request-from-a-fork>`_. As GitHub uses the first "
"line of the commit message truncated to 72 characters as the pull request "
"title, you may have to edit to reword or to undo this truncation."
msgstr ""

#: ../../../GitHub.rst:65
msgid "Creating Pull Requests with GitHub CLI"
msgstr ""

#: ../../../GitHub.rst:66
msgid "With the CLI it's enough to create the branch locally and then run:"
msgstr ""

#: ../../../GitHub.rst:72
msgid ""
"When prompted select to create and use your own fork and follow the "
"instructions to add more information needed."
msgstr ""

#: ../../../GitHub.rst:77
msgid ""
"When you let the GitHub CLI create a fork of llvm-project to your user, it "
"will change the git \"remotes\" so that \"origin\" points to your fork and "
"\"upstream\" points to the main llvm-project repository."
msgstr ""

#: ../../../GitHub.rst:82
msgid "Updating Pull Requests"
msgstr ""

#: ../../../GitHub.rst:83
msgid ""
"In order to update your pull request, the only thing you need to do is to "
"push your new commits to the branch in your fork. That will automatically "
"update the pull request."
msgstr ""

#: ../../../GitHub.rst:87
msgid ""
"When updating a pull request, you should push additional \"fix up\" commits "
"to your branch instead of force pushing. This makes it easier for GitHub to "
"track the context of previous review comments. Consider using the `built-in "
"support for fixups <https://git-scm.com/docs/git-commit#Documentation/git-"
"commit.txt---fixupamendrewordltcommitgt>`_ in git."
msgstr ""

#: ../../../GitHub.rst:93
msgid ""
"If you do this, you must squash and merge before landing the PR and you must "
"use the pull request title and description as the commit message. You can do "
"this manually with an interactive git rebase or with GitHub's built-in tool. "
"See the section about landing your fix below."
msgstr ""

#: ../../../GitHub.rst:98
msgid ""
"When pushing to your branch, make sure you push to the correct fork. Check "
"your remotes with:"
msgstr ""

#: ../../../GitHub.rst:105
msgid "And make sure you push to the remote that's pointing to your fork."
msgstr ""

#: ../../../GitHub.rst:108
msgid "Rebasing Pull Requests and Force Pushes"
msgstr ""

#: ../../../GitHub.rst:109
msgid ""
"In general, you should avoid rebasing a Pull Request and force pushing to "
"the branch that's the root of the Pull Request during the review. This "
"action will make the context of the old changes and comments harder to find "
"and read."
msgstr ""

#: ../../../GitHub.rst:113
msgid ""
"Sometimes, a rebase might be needed to update your branch with a fix for a "
"test or in some dependent code."
msgstr ""

#: ../../../GitHub.rst:116
msgid ""
"After your PR is reviewed and accepted, you want to rebase your branch to "
"ensure you won't encounter merge conflicts when landing the PR."
msgstr ""

#: ../../../GitHub.rst:120
msgid ""
"This guide assumes that the PR branch only has 1 author. If you are "
"collaborating with others on a single branch, be careful how and when you "
"push changes. ``--force-with-lease`` may be useful in this situation."
msgstr ""

#: ../../../GitHub.rst:125
msgid "Approvals"
msgstr ""

#: ../../../GitHub.rst:127
msgid ""
"Before merging a PR you must have the required approvals. See :ref:"
"`lgtm_how_a_patch_is_accepted` for more details."
msgstr ""

#: ../../../GitHub.rst:132
msgid "Landing your change"
msgstr ""

#: ../../../GitHub.rst:134
msgid "After your PR is approved, ensure that:"
msgstr ""

#: ../../../GitHub.rst:136
msgid ""
"The PR title and description describe the final changes. These will be used "
"as the title and message of the final squashed commit. The titles and "
"messages of commits in the PR will **not** be used."
msgstr ""

#: ../../../GitHub.rst:139
msgid ""
"You have set a valid email address in your GitHub account, see :ref:`github-"
"email-address`."
msgstr ""

#: ../../../GitHub.rst:142
msgid ""
"The LLVM Project monorepo on GitHub is configured to always use \"Squash and "
"Merge\" as the pull request merge option when using the web interface. With "
"this option, GitHub uses the PR summary as the default commit message."
msgstr ""

#: ../../../GitHub.rst:147
msgid ""
"Users with write access who can merge PRs have a final opportunity to edit "
"the commit title and message before merging. However, this option is not "
"available to contributors without write access."
msgstr ""

#: ../../../GitHub.rst:151
msgid ""
"At this point, you can merge your changes. If you do not have write "
"permissions for the repository, the merge button in GitHub's web interface "
"will be disabled. If this is the case, continue following the steps here but "
"ask one of your reviewers to click the merge button on your behalf."
msgstr ""

#: ../../../GitHub.rst:156
msgid ""
"If the PR is a single commit, all you need to do is click the merge button "
"in GitHub's web interface."
msgstr ""

#: ../../../GitHub.rst:159
msgid ""
"If your PR contains multiple commits, you need to consolidate those commits "
"into one commit. There are three different ways to do this, shown here with "
"the most commonly used first:"
msgstr ""

#: ../../../GitHub.rst:163
msgid ""
"Use the button `Squash and merge` in GitHub's web interface, if you do this "
"remember to review the commit message when prompted."
msgstr ""

#: ../../../GitHub.rst:166
msgid ""
"Afterwards you can select the option `Delete branch` to delete the branch "
"from your fork."
msgstr ""

#: ../../../GitHub.rst:169
msgid ""
"`Interactive rebase <https://git-scm.com/docs/git-"
"rebase#_interactive_mode>`_ with fixups. This is the recommended method "
"since you can control the final commit message and check that the final "
"commit looks as you expect. When your local state is correct, remember to "
"force-push to your branch and press the merge button in GitHub's web "
"interface afterwards."
msgstr ""

#: ../../../GitHub.rst:175
msgid ""
"Merge using the GitHub command line interface. Switch to your branch locally "
"and run:"
msgstr ""

#: ../../../GitHub.rst:182
msgid ""
"If you observe an error message from the above informing you that your pull "
"request is not mergeable, then that is likely because upstream has been "
"modified since your pull request was authored in a way that now results in a "
"merge conflict. You must first resolve this merge conflict in order to merge "
"your pull request. In order to do that:"
msgstr ""

#: ../../../GitHub.rst:193
msgid ""
"Then fix the source files causing merge conflicts and make sure to rebuild "
"and retest the result. Then:"
msgstr ""

#: ../../../GitHub.rst:201
msgid ""
"Finally, you'll need to force push to your branch one more time before you "
"can merge:"
msgstr ""

#: ../../../GitHub.rst:209
msgid ""
"This force push may ask if you intend to push hundreds, or potentially "
"thousands of patches (depending on how long it's been since your pull "
"request was initially authored vs. when you intended to merge it). Since "
"you're pushing to a branch in your fork, this is ok and expected. Github's "
"UI for the pull request will understand that you're rebasing just your "
"patches, and display this result correctly with a note that a force push did "
"occur."
msgstr ""

#: ../../../GitHub.rst:219
msgid "Branches"
msgstr ""

#: ../../../GitHub.rst:221
msgid ""
"It is possible to create branches in `llvm/llvm-project/` that start with "
"`users/<username>/`, however this is intended to be able to support "
"\"stacked\" pull-request. Do not create any branches in the `llvm/llvm-"
"project` repository otherwise, please use a fork (see above). User branches "
"that aren't associated with a pull-request **will be deleted**."
msgstr ""

#: ../../../GitHub.rst:228
msgid "Stacked Pull Requests"
msgstr ""

#: ../../../GitHub.rst:230
msgid ""
"To separate related changes or to break down a larger PR into smaller, "
"reviewable pieces, use \"stacked pull requests\" — this helps make the "
"review process smoother."
msgstr ""

#: ../../../GitHub.rst:235
msgid ""
"The LLVM Project monorepo on GitHub is configured to always use \"Squash and "
"Merge\" as the pull request merge option. As a result, each PR results in "
"exactly one commit being merged into the project."
msgstr ""

#: ../../../GitHub.rst:239
msgid ""
"This means that stacked pull requests are the only available option for "
"landing a series of related changes. In contrast, submitting a PR with "
"multiple commits and merging them as-is (without squashing) is not supported "
"in LLVM."
msgstr ""

#: ../../../GitHub.rst:244
msgid ""
"While GitHub does not natively support stacked pull requests, there are "
"several common alternatives."
msgstr ""

#: ../../../GitHub.rst:247
msgid ""
"To illustrate, assume that you are working on two branches in your fork of "
"the ``llvm/llvm-project`` repository, and you want to eventually merge both "
"into ``main``:"
msgstr ""

#: ../../../GitHub.rst:251
msgid "`feature_1`, which contains commit `feature_commit_1`"
msgstr ""

#: ../../../GitHub.rst:252
msgid ""
"`feature_2`, which contains commit `feature_commit_2` and depends on "
"`feature_1` (so it also includes `feature_commit_1`)"
msgstr ""

#: ../../../GitHub.rst:255
msgid "Your options are as follows:"
msgstr ""

#: ../../../GitHub.rst:257
msgid "Use user branches in ``llvm/llvm-project``"
msgstr ""

#: ../../../GitHub.rst:259
msgid ""
"Create user branches in the main repository, as described :ref:"
"`above<github_branches>`. Then:"
msgstr ""

#: ../../../GitHub.rst:262
msgid "Open a pull request from `users/<username>/feature_1` → `main`"
msgstr ""

#: ../../../GitHub.rst:263
msgid ""
"Open another from `users/<username>/feature_2` → `users/<username>/feature_1`"
msgstr ""

#: ../../../GitHub.rst:265
msgid ""
"This approach allows GitHub to display clean, incremental diffs for each PR "
"in the stack, making it much easier for reviewers to see what has changed at "
"each step. Once `feature_1` is merged, GitHub will automatically rebase and "
"re-target your branch `feature_2` to `main`. For more complex stacks, you "
"can perform this step using the web interface."
msgstr ""

#: ../../../GitHub.rst:271
msgid ""
"This approach requires commit access. See how to obtain it `here <https://"
"llvm.org/docs/DeveloperPolicy.html#obtaining-commit-access>`_."
msgstr ""

#: ../../../GitHub.rst:274
msgid "Two PRs with a dependency note"
msgstr ""

#: ../../../GitHub.rst:276
msgid ""
"Create PR_1 for `feature_1` and PR_2 for `feature_2`. In PR_2, include a "
"note in the PR summary indicating that it depends on PR_1 (e.g., “Depends on "
"#PR_1”)."
msgstr ""

#: ../../../GitHub.rst:280
msgid ""
"To make review easier, make it clear which commits are part of the base PR "
"and which are new, e.g. \"The first N commits are from the base PR\". This "
"helps reviewers focus only on the incremental changes."
msgstr ""

#: ../../../GitHub.rst:284
msgid "Use a stacked PR tool"
msgstr ""

#: ../../../GitHub.rst:286
msgid ""
"Use tools like SPR or Graphite (described below) to automate managing "
"stacked PRs. These tools are also based on using user branches in ``llvm/"
"llvm-project``."
msgstr ""

#: ../../../GitHub.rst:291
msgid ""
"When not using user branches, GitHub will not display proper diffs for "
"subsequent PRs in a stack. Instead, it will show a combined diff that "
"includes all commits from earlier PRs."
msgstr ""

#: ../../../GitHub.rst:295
msgid ""
"As described above, it is the PR author’s responsibility to clearly indicate "
"which commits are relevant to the current PR. For example: “The first N "
"commits are from the base PR.”"
msgstr ""

#: ../../../GitHub.rst:299
msgid ""
"You can avoid this issue by using user branches directly in the ``llvm/llvm-"
"project`` repository."
msgstr ""

#: ../../../GitHub.rst:304
msgid "Using Graphite for stacked Pull Requests"
msgstr ""

#: ../../../GitHub.rst:306
msgid ""
"`Graphite <https://app.graphite.dev/>`_ is a stacked pull request tool "
"supported by the LLVM repo (the other being `reviewable.io <https://"
"reviewable.io>`_)."
msgstr ""

#: ../../../GitHub.rst:309
msgid ""
"Graphite will want to create branches under ``llvm/llvm-project`` rather "
"than your private fork, so the guidance above, about branch naming, is "
"critical, otherwise ``gt submit`` (i.e. publish your PRs for review) will "
"fail."
msgstr ""

#: ../../../GitHub.rst:313
msgid ""
"Use ``gt config`` then ``Branch naming settings`` and ``Set a prefix for "
"branch names``. Include the last ``/``."
msgstr ""

#: ../../../GitHub.rst:316
msgid ""
"If you didn't do the above and Graphite created non-prefixed branches, a "
"simple way to unblock is to rename (``git -m <old name> <new name>``), and "
"then checkout the branch and ``gt track``."
msgstr ""

#: ../../../GitHub.rst:321
msgid "Pre-merge Continuous Integration (CI)"
msgstr ""

#: ../../../GitHub.rst:323
msgid ""
"Multiple checks will be applied on a pull-request, either for linting/"
"formatting or some build and tests. None of these are perfect and you will "
"encounter false positive, infrastructure failures (unstable or unavailable "
"worker), or you will be unlucky and based your change on a broken revision "
"of the main branch."
msgstr ""

#: ../../../GitHub.rst:328
msgid ""
"None of the checks are strictly mandatory: these are tools to help us build "
"a better codebase and be more productive (by avoiding issues found post-"
"merge and possible reverts). As a developer you're empowered to exercise "
"your judgement about bypassing any of the checks when merging code."
msgstr ""

#: ../../../GitHub.rst:333
msgid ""
"The infrastructure can print messages that make it seem like these are "
"mandatory, but this is just an artifact of GitHub infrastructure and not a "
"policy of the project."
msgstr ""

#: ../../../GitHub.rst:337
msgid ""
"However, please make sure you do not force-merge any changes that have clear "
"test failures directly linked to your changes. Our policy is still to keep "
"the ``main`` branch in a good condition, and introducing failures to be "
"fixed later violates that policy."
msgstr ""

#: ../../../GitHub.rst:343
msgid "Problems After Landing Your Change"
msgstr ""

#: ../../../GitHub.rst:345
msgid ""
"Even though your PR passed the pre-commit checks and is approved by "
"reviewers, it may cause problems for some configurations after it lands. You "
"will be notified if this happens and the community is ready to help you fix "
"the problems."
msgstr ""

#: ../../../GitHub.rst:349
msgid ""
"This process is described in detail :ref:`here <MyFirstTypoFix Issues After "
"Landing Your PR>`."
msgstr ""

#: ../../../GitHub.rst:354
msgid "Checking out another PR locally"
msgstr ""

#: ../../../GitHub.rst:355
msgid ""
"Sometimes you want to review another person's PR on your local machine to "
"run tests or inspect code in your preferred editor. This is easily done with "
"the CLI:"
msgstr ""

#: ../../../GitHub.rst:363
msgid ""
"This is also possible with the web interface and the normal git command line "
"tools, but the process is a bit more complicated. See GitHub's "
"`documentation <https://docs.github.com/en/pull-requests/collaborating-with-"
"pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-"
"locally?platform=linux&tool=webui#modifying-an-inactive-pull-request-"
"locally>`_ on the topic."
msgstr ""

#: ../../../GitHub.rst:369
msgid "Example Pull Request with GitHub CLI"
msgstr ""

#: ../../../GitHub.rst:370
msgid "Here is an example for creating a Pull Request with the GitHub CLI:"
msgstr ""

#: ../../../GitHub.rst:417 ../../../GitHub.rst:512
msgid ""
"Before merging the PR, it is recommended that you rebase locally and re-run "
"test checks:"
msgstr ""

#: ../../../GitHub.rst:438 ../../../GitHub.rst:532
msgid ""
"See more in-depth information about how to contribute in the following "
"documentation:"
msgstr ""

#: ../../../GitHub.rst:440 ../../../GitHub.rst:534
msgid ":doc:`Contributing`"
msgstr ""

#: ../../../GitHub.rst:441 ../../../GitHub.rst:535
msgid ":doc:`MyFirstTypoFix`"
msgstr ""

#: ../../../GitHub.rst:444
msgid "Example Pull Request with git"
msgstr ""

#: ../../../GitHub.rst:446
msgid ""
"Instead of using the GitHub CLI to create a PR, you can push your code to a "
"remote branch on your fork and create the PR to upstream using the GitHub "
"web interface."
msgstr ""

#: ../../../GitHub.rst:450
msgid ""
"Here is an example of making a PR using git and the GitHub web interface:"
msgstr ""

#: ../../../GitHub.rst:452
msgid ""
"First follow the instructions to `fork the repository <https://docs.github."
"com/en/get-started/quickstart/fork-a-repo?tool=webui#forking-a-repository>`_."
msgstr ""

#: ../../../GitHub.rst:454
msgid ""
"Next follow the instructions to `clone your forked repository <https://docs."
"github.com/en/get-started/quickstart/fork-a-repo?tool=webui#cloning-your-"
"forked-repository>`_."
msgstr ""

#: ../../../GitHub.rst:456
msgid "Once you've cloned your forked repository,"
msgstr ""

#: ../../../GitHub.rst:484
msgid ""
"Navigate to the URL printed to the console from the git push command in the "
"last step. Create a pull request from your branch to llvm::main."
msgstr ""

#: ../../../GitHub.rst:529
msgid ""
"Once your PR is approved, rebased, and tests are passing, click `Squash and "
"Merge` on your PR in the GitHub web interface."
msgstr ""

#: ../../../GitHub.rst:538
msgid "Releases"
msgstr ""

#: ../../../GitHub.rst:543
msgid "Backporting Fixes to the Release Branches"
msgstr ""

#: ../../../GitHub.rst:544
msgid ""
"You can use special comments on issues or pull requests to make backport "
"requests for the release branches.  To do this, after your pull request has "
"been merged:"
msgstr ""

#: ../../../GitHub.rst:548
msgid ""
"Edit \"Milestone\" at the right side of the issue or pull request to say "
"\"LLVM X.Y Release\""
msgstr ""

#: ../../../GitHub.rst:551
msgid "Add a comment to it in the following format:"
msgstr ""

#: ../../../GitHub.rst:557
msgid ""
"This command takes one or more git commit hashes as arguments and will "
"attempt to cherry-pick the commit(s) to the release branch.  If the "
"commit(s) fail to apply cleanly, then a comment with a link to the failing "
"job will be added to the issue/pull request.  If the commit(s) do apply "
"cleanly, then a pull request will be created with the specified commits."
msgstr ""

#: ../../../GitHub.rst:563
msgid ""
"If a commit you want to backport does not apply cleanly, you may resolve the "
"conflicts locally and then create a pull request against the release "
"branch.  Just make sure to add the release milestone to the pull request."
msgstr ""

#: ../../../GitHub.rst:568
msgid "Getting admin access to CI infrastructure"
msgstr ""

#: ../../../GitHub.rst:570
msgid ""
"Any individual who is responsible for setting up and/or maintaining CI "
"infrastructure for a LLVM project can request to be granted the CI/CD role "
"by the LLVM infrastructure area team. The request can be made by creating `a "
"Github issue <https://github.com/llvm/llvm-project/issues/new>`_ and using "
"the ``infrastructure`` label.  Applicants must include a justification for "
"why the role is being requested. Applications are reviewed on a case-by-case "
"basis by the LLVM infrastructure area team and the role can be revoked at "
"any point as the area team sees fit."
msgstr ""
