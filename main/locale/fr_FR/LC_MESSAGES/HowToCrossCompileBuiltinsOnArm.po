# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM main\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:10+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr_FR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:3
msgid "How to Cross Compile Compiler-rt Builtins For Arm"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:6
msgid "Introduction"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:8
msgid ""
"This document contains information about building and testing the builtins "
"part of compiler-rt for an Arm target, from an x86_64 Linux machine."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:11
msgid ""
"While this document concentrates on Arm and Linux the general principles "
"should apply to other targets supported by compiler-rt. Further "
"contributions for other targets are welcome."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:15
msgid ""
"The instructions in this document depend on libraries and programs external "
"to LLVM, there are many ways to install and configure these dependencies so "
"you may need to adapt the instructions here to fit your own situation."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:20
msgid "Prerequisites"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:22
msgid ""
"In this use case we will be using cmake on a Debian-based Linux system, "
"cross-compiling from an x86_64 host to a hard-float Armv7-A target. We will "
"be using as many of the LLVM tools as we can, but it is possible to use GNU "
"equivalents."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:32
msgid "You will need:"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:28
msgid "A build of LLVM for the llvm-tools and LLVM CMake files."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:29
msgid "A clang executable with support for the ``ARM`` target."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:30
msgid "``compiler-rt`` sources."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:31
msgid "The ``qemu-arm`` user mode emulator."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:32
msgid "An ``arm-linux-gnueabihf`` sysroot."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:35
msgid ""
"An existing sysroot is required because some of the builtins include C "
"library headers and a sysroot is the easiest way to get those."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:38
msgid "In this example we will be using ``ninja`` as the build tool."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:40
msgid ""
"See https://compiler-rt.llvm.org/ for information about the dependencies on "
"clang and LLVM."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:43
msgid ""
"See https://llvm.org/docs/GettingStarted.html for information about "
"obtaining the source for LLVM and compiler-rt."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:46
msgid ""
"``qemu-arm`` should be available as a package for your Linux distribution."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:48
msgid ""
"The most complicated of the prerequisites to satisfy is the ``arm-linux-"
"gnueabihf`` sysroot. In theory it is possible to use the Linux distributions "
"multiarch support to fulfill the dependencies for building but unfortunately "
"due to ``/usr/local/include`` being added some host includes are selected."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:53
msgid ""
"The easiest way to supply a sysroot is to download an ``arm-linux-"
"gnueabihf`` toolchain from https://developer.arm.com/open-source/gnu-"
"toolchain/gnu-a/downloads."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:57
msgid "Building compiler-rt builtins for Arm"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:59
msgid ""
"We will be doing a standalone build of compiler-rt. The command is shown "
"below. Shell variables are used to simplify some of the options::"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:102
msgid ""
"The command above also enables tests. Enabling tests is not required, more "
"details in the testing section."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:105
msgid ""
"``CMAKE_<LANGUAGE>_<OPTION>`` options are set so that the correct ``--"
"target``, ``--sysroot``, ``--gcc-toolchain`` and ``-march`` options will be "
"given to the compilers."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:109
msgid ""
"The combination of these settings needs to be enough to pass CMake's "
"compiler checks, compile compiler-rt and build the test cases."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:115
msgid "The flags need to select:"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:113
msgid "The Arm target (``--target arm-none-linux-gnueabihf``)"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:114
msgid "The Arm architecture level (``-march=armv7-a``)"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:115
msgid ""
"Whether to generate Arm (``-marm``, the default) or Thumb (``-mthumb``) "
"instructions."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:117
msgid ""
"It is possible to pass all these flags to CMake using "
"``CMAKE_<LANGUAGE>_FLAGS``, but the command above uses standard CMake "
"options instead. If you need to add flags that CMake cannot generate "
"automatically, add them to ``CMAKE_<LANGUAGE>_FLAGS``."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:122
msgid "When CMake has finished, build with Ninja::"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:127
msgid "Testing compiler-rt builtins using qemu-arm"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:129
msgid "The following options are required to enable tests::"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:136
msgid ""
"This tells compiler-rt that we want to run tests on ``qemu-arm``. If you do "
"not want to run tests, remove these options from the CMake command."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:139
msgid ""
"Note that ``COMPILER_RT_TEST_COMPILER_CFLAGS`` contains the equivalent of "
"the options CMake generated for us with the first command. We must pass them "
"manually here because standard options like "
"``CMAKE_C_COMPILER_EXTERNAL_TOOLCHAIN`` do not apply here."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:144
msgid "When CMake has finished, run the tests::"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:149
msgid "Troubleshooting"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:152
msgid "The cmake try compile stage fails"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:153
msgid ""
"At an early stage cmake will attempt to compile and link a simple C program "
"to test if the toolchain is working."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:156
msgid ""
"This stage can often fail at link time if the ``--sysroot=``, ``--target`` "
"or ``--gcc-toolchain=`` options are not passed to the compiler. Check the "
"``CMAKE_<LANGUAGE>_FLAGS`` and ``CMAKE_<LANGAUGE>_COMPILER_TARGET`` flags "
"along with any of the specific CMake sysroot and toolchain options."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:161
msgid ""
"It can be useful to build a simple example outside of cmake with your "
"toolchain to make sure it is working. For example::"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:167
msgid "Clang uses the host header files"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:168
msgid ""
"On debian based systems it is possible to install multiarch support for "
"``arm-linux-gnueabi`` and ``arm-linux-gnueabihf``. In many cases clang can "
"successfully use this multiarch support when ``--gcc-toolchain=`` and ``--"
"sysroot=`` are not supplied. Unfortunately clang adds ``/usr/local/include`` "
"before ``/usr/include/arm-linux-gnueabihf`` leading to errors when compiling "
"the hosts header files."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:175
msgid ""
"The multiarch support is not sufficient to build the builtins you will need "
"to use a separate ``arm-linux-gnueabihf`` toolchain."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:179
msgid "No target passed to clang"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:180
msgid ""
"If clang is not given a target it will typically use the host target, this "
"will not understand the Arm assembly language files resulting in error "
"messages such as ``error: unknown directive .syntax unified``."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:184
msgid ""
"You can check the clang invocation in the error message to see if there is "
"no ``--target`` or if it is set incorrectly. The cause is usually "
"``CMAKE_ASM_FLAGS`` not containing ``--target`` or "
"``CMAKE_ASM_COMPILER_TARGET`` not being present."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:190
msgid "Arm architecture not given"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:191
msgid ""
"The ``--target=arm-linux-gnueabihf`` will default to Arm architecture v4t "
"which cannot assemble the barrier instructions used in the "
"``synch_and_fetch`` source files."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:195
msgid ""
"The cause is usually a missing ``-march=armv7a`` from the "
"``CMAKE_ASM_FLAGS``."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:198
msgid "Compiler-rt builds but the tests fail to build"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:199
msgid ""
"The flags used to build the tests are not the same as those used to build "
"the builtins. The c flags are provided by "
"``COMPILER_RT_TEST_COMPILE_CFLAGS`` and the ``CMAKE_C_COMPILER_TARGET``, "
"``CMAKE_ASM_COMPILER_TARGET``, ``CMAKE_C_COMPILER_EXTERNAL_TOOLCHAIN`` and "
"``CMAKE_SYSROOT`` flags are not applied to tests."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:205
msgid ""
"Make sure that ``COMPILER_RT_TEST_COMPILE_CFLAGS`` contains all the "
"necessary flags."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:210
msgid "Modifications for other Targets"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:213
msgid "Arm Soft-Float Target"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:214
msgid ""
"The instructions for the Arm hard-float target can be used for the soft-"
"float target by substituting soft-float equivalents for the sysroot and "
"target. The target to use is:"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:218
msgid "``-DCMAKE_C_COMPILER_TARGET=arm-linux-gnueabi``"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:220
msgid ""
"Depending on whether you want to use floating point instructions or not you "
"may need extra c-flags such as ``-mfloat-abi=softfp`` for use of floating-"
"point instructions, and ``-mfloat-abi=soft -mfpu=none`` for software "
"floating-point emulation."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:225
msgid ""
"You will need to use an ``arm-linux-gnueabi`` GNU toolchain for soft-float."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:228
msgid "AArch64 Target"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:229
msgid ""
"The instructions for Arm can be used for AArch64 by substituting AArch64 "
"equivalents for the sysroot, emulator and target::"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:235
msgid ""
"You will also have to update any use of the target triple in compiler flags. "
"For instance in ``CMAKE_C_FLAGS`` and ``COMPILER_RT_TEST_COMPILER_CFLAGS``."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:239
msgid "Armv6-m, Armv7-m and Armv7E-M targets"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:240
msgid ""
"To build and test the libraries using a similar method to Armv7-A is "
"possible but more difficult. The main problems are:"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:243
msgid ""
"There is not a ``qemu-arm`` user-mode emulator for bare-metal systems. "
"``qemu-system-arm`` can be used but this is significantly more difficult to "
"setup. This document does not explain how to do this."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:246
msgid ""
"The targets to compile compiler-rt have the suffix ``-none-eabi``. This uses "
"the BareMetal driver in clang and by default will not find the libraries "
"needed to pass the cmake compiler check."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:250
msgid ""
"As the Armv6-M, Armv7-M and Armv7E-M builds of compiler-rt only use "
"instructions that are supported on Armv7-A we can still get most of the "
"value of running the tests using the same ``qemu-arm`` that we used for "
"Armv7-A by building and running the test cases for Armv7-A but using the "
"builtins compiled for Armv6-M, Armv7-M or Armv7E-M. This will test that the "
"builtins can be linked into a binary and execute the tests correctly but it "
"will not catch if the builtins use instructions that are supported on Armv7-"
"A but not Armv6-M, Armv7-M and Armv7E-M."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:259
msgid ""
"This requires a second ``arm-none-eabi`` toolchain for building the "
"builtins. Using a bare-metal toolchain ensures that the target and C library "
"details are specific to bare-metal instead of using Linux settings. This "
"means that some tests may behave differently compared to real hardware, but "
"at least the content of the builtins library is correct."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:265
msgid ""
"Below is an example that builds the builtins for Armv7-M, but runs the tests "
"as Armv7-A. It is presented in full, but is very similar to the earlier "
"command for Armv7-A build and test::"
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:319
msgid ""
"The sysroot used for compiling the tests is ``arm-linux-gnueabihf``, not "
"``arm-none-eabi`` which is used when compiling the builtins."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:322
msgid ""
"The Armv6-M builtins will use the soft-float ABI. When compiling the tests "
"for Armv7-A we must include ``\"-mthumb -mfloat-abi=soft -mfpu=none\"`` in "
"the test-c-flags. We must use an Armv7-A soft-float abi sysroot for ``qemu-"
"arm``."
msgstr ""

#: ../../../HowToCrossCompileBuiltinsOnArm.rst:326
msgid ""
"Depending on the linker used for the test cases you may encounter "
"BuildAttribute mismatches between the M-profile objects from compiler-rt and "
"the A-profile objects from the test. The lld linker does not check the "
"profile BuildAttribute so it can be used to link the tests by adding ``-fuse-"
"ld=lld`` to the ``COMPILER_RT_TEST_COMPILER_CFLAGS``."
msgstr ""
