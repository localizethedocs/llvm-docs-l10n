# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM main\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:10+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr_FR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../HowToUseAttributes.rst:3
msgid "How To Use Attributes"
msgstr ""

#: ../../../HowToUseAttributes.rst:9
msgid "Introduction"
msgstr ""

#: ../../../HowToUseAttributes.rst:11
msgid ""
"Attributes in LLVM have changed in some fundamental ways.  It was necessary "
"to do this to support expanding the attributes to encompass more than a "
"handful of attributes --- e.g. command line options.  The old way of "
"handling attributes consisted of representing them as a bit mask of values.  "
"This bit mask was stored in a \"list\" structure that was reference "
"counted.  The advantage of this was that attributes could be manipulated "
"with 'or's and 'and's.  The disadvantage of this was that there was limited "
"room for expansion, and virtually no support for attribute-value pairs other "
"than alignment."
msgstr ""

#: ../../../HowToUseAttributes.rst:20
msgid ""
"In the new scheme, an ``Attribute`` object represents a single attribute "
"that's uniqued.  You use the ``Attribute::get`` methods to create a new "
"``Attribute`` object.  An attribute can be a single \"enum\" value (the enum "
"being the ``Attribute::AttrKind`` enum), a string representing a target-"
"dependent attribute, or an attribute-value pair.  Some examples:"
msgstr ""

#: ../../../HowToUseAttributes.rst:26
msgid "Target-independent: ``noinline``, ``zext``"
msgstr ""

#: ../../../HowToUseAttributes.rst:27
msgid "Target-dependent: ``\"no-sse\"``, ``\"thumb2\"``"
msgstr ""

#: ../../../HowToUseAttributes.rst:28
msgid "Attribute-value pair: ``\"cpu\" = \"cortex-a8\"``, ``align = 4``"
msgstr ""

#: ../../../HowToUseAttributes.rst:30
msgid ""
"Note: for an attribute value pair, we expect a target-dependent attribute to "
"have a string for the value."
msgstr ""

#: ../../../HowToUseAttributes.rst:34
msgid "``Attribute``"
msgstr ""

#: ../../../HowToUseAttributes.rst:35
msgid "An ``Attribute`` object is designed to be passed around by value."
msgstr ""

#: ../../../HowToUseAttributes.rst:37
msgid ""
"Because attributes are no longer represented as a bit mask, you will need to "
"convert any code which does treat them as a bit mask to use the new query "
"methods on the Attribute class."
msgstr ""

#: ../../../HowToUseAttributes.rst:42
msgid "``AttributeList``"
msgstr ""

#: ../../../HowToUseAttributes.rst:44
msgid ""
"The ``AttributeList`` stores a collection of Attribute objects for each kind "
"of object that may have an attribute associated with it: the function as a "
"whole, the return type, or the function's parameters.  A function's "
"attributes are at index ``AttributeList::FunctionIndex``; the return type's "
"attributes are at index ``AttributeList::ReturnIndex``; and the function's "
"parameters' attributes are at indices 1, ..., n (where 'n' is the number of "
"parameters).  Most methods on the ``AttributeList`` class take an index "
"parameter."
msgstr ""

#: ../../../HowToUseAttributes.rst:52
msgid ""
"An ``AttributeList`` is also a uniqued and immutable object.  You create an "
"``AttributeList`` through the ``AttributeList::get`` methods.  You can add "
"and remove attributes, which result in the creation of a new "
"``AttributeList``."
msgstr ""

#: ../../../HowToUseAttributes.rst:56
msgid "An ``AttributeList`` object is designed to be passed around by value."
msgstr ""

#: ../../../HowToUseAttributes.rst:58
msgid ""
"Note: It is advised that you do *not* use the ``AttributeList`` "
"\"introspection\" methods (e.g. ``Raw``, ``getRawPointer``, etc.).  These "
"methods break encapsulation, and may be removed in a future release."
msgstr ""

#: ../../../HowToUseAttributes.rst:63
msgid "``AttrBuilder``"
msgstr ""

#: ../../../HowToUseAttributes.rst:65
msgid ""
"Lastly, we have a \"builder\" class to help create the ``AttributeList`` "
"object without having to create several different intermediate uniqued "
"``AttributeList`` objects.  The ``AttrBuilder`` class allows you to add and "
"remove attributes at will.  The attributes won't be uniqued until you call "
"the appropriate ``AttributeList::get`` method."
msgstr ""

#: ../../../HowToUseAttributes.rst:71
msgid ""
"An ``AttrBuilder`` object is *not* designed to be passed around by value.  "
"It should be passed by reference."
msgstr ""

#: ../../../HowToUseAttributes.rst:74
msgid ""
"Note: It is advised that you do *not* use the ``AttrBuilder::addRawValue()`` "
"method or the ``AttrBuilder(uint64_t Val)`` constructor.  These are for "
"backwards compatibility and may be removed in a future release."
msgstr ""

#: ../../../HowToUseAttributes.rst:78
msgid ""
"And that's basically it! A lot of functionality is hidden behind these "
"classes, but the interfaces are pretty straight forward."
msgstr ""
