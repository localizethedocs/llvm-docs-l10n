# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM main\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-27 08:36+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr_FR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../CommandGuide/llvm-ir2vec.rst:2
msgid "llvm-ir2vec - IR2Vec and MIR2Vec Embedding Generation Tool"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:7
msgid "SYNOPSIS"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:9
msgid ":program:`llvm-ir2vec` [*subcommand*] [*options*]"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:12
msgid "DESCRIPTION"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:14
msgid ""
":program:`llvm-ir2vec` is a standalone command-line tool for IR2Vec and "
"MIR2Vec. It generates embeddings for both LLVM IR and Machine IR (MIR) and "
"supports triplet generation for vocabulary training."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:18
msgid "The tool provides three main subcommands:"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:20
msgid ""
"**triplets**: Generates numeric triplets in train2id format for vocabulary "
"training from LLVM IR."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:23
msgid ""
"**entities**: Generates entity mapping files (entity2id.txt) for vocabulary "
"training."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:26
msgid ""
"**embeddings**: Generates IR2Vec or MIR2Vec embeddings using a trained "
"vocabulary at different granularity levels (instruction, basic block, or "
"function)."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:29
msgid "The tool supports two operation modes:"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:31
msgid ""
"**LLVM IR mode** (``--mode=llvm``): Process LLVM IR bitcode files and "
"generate IR2Vec embeddings"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:33
msgid ""
"**Machine IR mode** (``--mode=mir``): Process Machine IR (.mir) files and "
"generate MIR2Vec embeddings"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:36
msgid ""
"The tool is designed to facilitate machine learning applications that work "
"with LLVM IR or Machine IR by converting them into numerical representations "
"that can be used by ML models. The `triplets` subcommand generates numeric "
"IDs directly instead of string triplets, streamlining the training data "
"preparation workflow."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:43
msgid ""
"For information about using IR2Vec and MIR2Vec programmatically within LLVM "
"passes and the C++ API, see the `IR2Vec Embeddings <https://llvm.org/docs/"
"MLGO.html#ir2vec-embeddings>`_ section in the MLGO documentation."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:48
msgid "OPERATION MODES"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:50
msgid ""
"The tool operates in two modes: **LLVM IR mode** and **Machine IR mode**. "
"The mode is selected using the ``--mode`` option (default: ``llvm``)."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:53
msgid ""
"Triplet Generation and Entity Mapping Modes are used for preparing "
"vocabulary and training data for knowledge graph embeddings. The Embedding "
"Mode is used for generating embeddings from LLVM IR using a pre-trained "
"vocabulary."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:57
msgid ""
"The Seed Embedding Vocabulary of IR2Vec is trained on a large corpus of LLVM "
"IR by modeling the relationships between opcodes, types, and operands as a "
"knowledge graph. For this purpose, Triplet Generation and Entity Mapping "
"Modes generate triplets and entity mappings in the standard format used for "
"knowledge graph embedding training (see <https://github.com/thunlp/OpenKE/"
"tree/OpenKE-PyTorch?tab=readme-ov-file#data-format> for details)."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:65
msgid ""
"See `llvm/utils/mlgo-utils/IR2Vec/generateTriplets.py` for more details on "
"how these two modes are used to generate the triplets and entity mappings."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:69
msgid "Triplet Generation"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:71
msgid ""
"With the `triplets` subcommand, :program:`llvm-ir2vec` analyzes LLVM IR or "
"Machine IR and extracts numeric triplets consisting of opcode IDs and "
"operand IDs. These triplets are generated in the standard format used for "
"knowledge graph embedding training. The tool outputs numeric IDs directly "
"using the vocabulary mapping infrastructure, eliminating the need for string-"
"to-ID preprocessing."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:77
#: ../../../CommandGuide/llvm-ir2vec.rst:99
msgid "Usage for LLVM IR:"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:83
#: ../../../CommandGuide/llvm-ir2vec.rst:105
msgid "Usage for Machine IR:"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:90
msgid "Entity Mapping Generation"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:92
msgid ""
"With the `entities` subcommand, :program:`llvm-ir2vec` generates the entity "
"mappings supported by IR2Vec or MIR2Vec in the standard format used for "
"knowledge graph embedding training. This subcommand outputs all supported "
"entities with their corresponding numeric IDs."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:96
msgid ""
"For LLVM IR, entities include opcodes, types, and operands. For Machine IR, "
"entities include machine opcodes, common operands, and register classes "
"(both physical and virtual)."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:113
msgid ""
"For LLVM IR mode, the entity mapping is target-independent and does not "
"require an input file. For Machine IR mode, an input .mir file is required "
"to determine the target architecture, as entity mappings vary by target "
"(different architectures have different instruction sets and register "
"classes)."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:119
msgid "Embedding Generation"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:121
msgid ""
"With the `embeddings` subcommand, :program:`llvm-ir2vec` uses a pre-trained "
"vocabulary to generate numerical embeddings for LLVM IR or Machine IR at "
"different levels of granularity."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:124
msgid "Example Usage for LLVM IR:"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:130
msgid "Example Usage for Machine IR:"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:137
msgid "OPTIONS"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:139
msgid "Common options (applicable to both LLVM IR and Machine IR modes):"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:143
msgid "Specify the operation mode. Valid values are:"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:145
msgid "``llvm`` - Process LLVM IR bitcode files (default)"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:146
msgid "``mir`` - Process Machine IR (.mir) files"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:150
msgid ""
"Specify the output filename. Use ``-`` to write to standard output (default)."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:154
msgid "Print a summary of command line options."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:156
msgid "Subcommand-specific options:"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:158
msgid "**embeddings** subcommand:"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:162
msgid ""
"The input LLVM IR/bitcode file (.ll/.bc) or Machine IR file (.mir) to "
"process. This positional argument is required for the `embeddings` "
"subcommand."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:167
msgid "Specify the embedding generation level. Valid values are:"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:169
msgid "``inst`` - Generate instruction-level embeddings"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:170
msgid "``bb`` - Generate basic block-level embeddings"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:171
msgid "``func`` - Generate function-level embeddings (default)"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:175
msgid ""
"Process only the specified function instead of all functions in the module."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:177
msgid "**IR2Vec-specific options** (for ``--mode=llvm``):"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:181
msgid "Specify the kind of IR2Vec embeddings to generate. Valid values are:"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:183
#: ../../../CommandGuide/llvm-ir2vec.rst:223
msgid "``symbolic`` - Generate symbolic embeddings (default)"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:184
msgid "``flow-aware`` - Generate flow-aware embeddings"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:186
msgid ""
"Flow-aware embeddings consider control flow relationships between "
"instructions, while symbolic embeddings focus on the symbolic representation "
"of instructions."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:191
msgid ""
"Specify the path to the IR2Vec vocabulary file (required for LLVM IR "
"embedding generation). The vocabulary file should be in JSON format and "
"contain the trained vocabulary for embedding generation. See `llvm/lib/"
"Analysis/models` for pre-trained vocabulary files."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:198
msgid ""
"Specify the weight for opcode embeddings (default: 1.0). This controls the "
"relative importance of instruction opcodes in the final embedding."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:203
msgid ""
"Specify the weight for type embeddings (default: 0.5). This controls the "
"relative importance of type information in the final embedding."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:208
msgid ""
"Specify the weight for argument embeddings (default: 0.2). This controls the "
"relative importance of operand information in the final embedding."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:211
msgid "**MIR2Vec-specific options** (for ``--mode=mir``):"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:215
msgid ""
"Specify the path to the MIR2Vec vocabulary file (required for Machine IR "
"embedding generation). The vocabulary file should be in JSON format and "
"contain the trained vocabulary for embedding generation."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:221
msgid "Specify the kind of MIR2Vec embeddings to generate. Valid values are:"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:227
msgid ""
"Specify the weight for machine opcode embeddings (default: 1.0). This "
"controls the relative importance of machine instruction opcodes in the final "
"embedding."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:232
msgid ""
"Specify the weight for common operand embeddings (default: 1.0). This "
"controls the relative importance of common operand types in the final "
"embedding."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:237
msgid ""
"Specify the weight for register operand embeddings (default: 1.0). This "
"controls the relative importance of register operands in the final embedding."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:241
msgid "**triplets** subcommand:"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:245
msgid ""
"The input LLVM IR/bitcode file (.ll/.bc) or Machine IR file (.mir) to "
"process. This positional argument is required for the `triplets` subcommand."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:248
msgid "**entities** subcommand:"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:252
msgid ""
"The input Machine IR file (.mir) to process. This positional argument is "
"required for the `entities` subcommand when using ``--mode=mir``, as the "
"entity mappings are target-specific. For ``--mode=llvm``, no input file is "
"required as IR2Vec entity mappings are target-independent."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:258
msgid "OUTPUT FORMAT"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:261
msgid "Triplet Mode Output"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:263
msgid ""
"In triplet mode, the output consists of numeric triplets in train2id format "
"with metadata headers. The format includes:"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:273
msgid ""
"Each line after the metadata header represents one instruction relationship, "
"with numeric IDs for head entity, tail entity, and relation type. The "
"metadata header (MAX_RELATION) indicates the maximum relation ID used."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:277
msgid "**Relation Types:**"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:282
msgid "For LLVM IR (IR2Vec):"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:280
msgid "**0** = Type relationship (instruction to its type)"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:281
msgid "**1** = Next relationship (sequential instructions)"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:282
msgid "**2+** = Argument relationships (Arg0, Arg1, Arg2, ...)"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:286
msgid "For Machine IR (MIR2Vec):"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:285
msgid "**0** = Next relationship (sequential instructions)"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:286
msgid "**1+** = Argument relationships (Arg0, Arg1, Arg2, ...)"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:288
msgid "**Entity IDs:**"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:290
msgid ""
"For LLVM IR: Entity IDs represent opcodes, types, and operands as defined by "
"the IR2Vec vocabulary."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:292
msgid ""
"For Machine IR: Entity IDs represent machine opcodes, common operands "
"(immediate, frame index, etc.), physical register classes, and virtual "
"register classes as defined by the MIR2Vec vocabulary. The entity layout is "
"target-specific."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:296
msgid "Entity Mode Output"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:298
msgid "In entity mode, the output consists of entity mappings in the format:"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:307
msgid ""
"The first line contains the total number of entities, followed by one entity "
"mapping per line with tab-separated entity string and numeric ID."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:310
msgid ""
"For LLVM IR, entities include instruction opcodes (e.g., \"Add\", \"Ret\"), "
"types (e.g., \"INT\", \"PTR\"), and operand kinds."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:313
msgid ""
"For Machine IR, entities include machine opcodes (e.g., \"COPY\", \"ADD\"), "
"common operands (e.g., \"Immediate\", \"FrameIndex\"), physical register "
"classes (e.g., \"PhyReg_GR32\"), and virtual register classes (e.g., "
"\"VirtReg_GR32\")."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:318
msgid "Embedding Mode Output"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:320
msgid "In embedding mode, the output format depends on the specified level:"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:322
msgid "**Function Level**: One embedding vector per function"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:323
msgid ""
"**Basic Block Level**: One embedding vector per basic block, grouped by "
"function"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:324
msgid ""
"**Instruction Level**: One embedding vector per instruction, grouped by "
"basic block and function"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:326
msgid "Each embedding is represented as a floating point vector."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:329
msgid "EXIT STATUS"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:331
msgid ""
":program:`llvm-ir2vec` returns 0 on success, and a non-zero value on failure."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:333
msgid "Common failure cases include:"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:335
msgid "Invalid or missing input file"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:336
msgid "Missing or invalid vocabulary file (in embedding mode)"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:337
msgid "Specified function not found in the module"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:338
msgid "Invalid command line options"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:341
msgid "SEE ALSO"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:343
msgid ":doc:`../MLGO`"
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:345
msgid ""
"For more information about the IR2Vec algorithm and approach, see: `IR2Vec: "
"LLVM IR Based Scalable Program Embeddings <https://doi."
"org/10.1145/3418463>`_."
msgstr ""

#: ../../../CommandGuide/llvm-ir2vec.rst:348
msgid ""
"For more information about the MIR2Vec algorithm and approach, see: "
"`RL4ReAl: Reinforcement Learning for Register Allocation <https://doi."
"org/10.1145/3578360.3580273>`_."
msgstr ""
