# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 18\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../TestingGuide.rst:3
msgid "LLVM Testing Infrastructure Guide"
msgstr "LLVM 測試基礎設施指南"

#: ../../../TestingGuide.rst:15
msgid "Overview"
msgstr ""

#: ../../../TestingGuide.rst:17
msgid ""
"This document is the reference manual for the LLVM testing infrastructure. "
"It documents the structure of the LLVM testing infrastructure, the tools "
"needed to use it, and how to add and run tests."
msgstr ""

#: ../../../TestingGuide.rst:23
msgid "Requirements"
msgstr ""

#: ../../../TestingGuide.rst:25
msgid ""
"In order to use the LLVM testing infrastructure, you will need all of the "
"software required to build LLVM, as well as `Python <http://python.org>`_ "
"3.6 or later."
msgstr ""

#: ../../../TestingGuide.rst:30
msgid "LLVM Testing Infrastructure Organization"
msgstr ""

#: ../../../TestingGuide.rst:32
msgid ""
"The LLVM testing infrastructure contains three major categories of tests: "
"unit tests, regression tests and whole programs. The unit tests and "
"regression tests are contained inside the LLVM repository itself under "
"``llvm/unittests`` and ``llvm/test`` respectively and are expected to always "
"pass -- they should be run before every commit."
msgstr ""

#: ../../../TestingGuide.rst:38
msgid ""
"The whole programs tests are referred to as the \"LLVM test suite\" (or "
"\"test-suite\") and are in the ``test-suite`` `repository on GitHub <https://"
"github.com/llvm/llvm-test-suite.git>`_. For historical reasons, these tests "
"are also referred to as the \"nightly tests\" in places, which is less "
"ambiguous than \"test-suite\" and remains in use although we run them much "
"more often than nightly."
msgstr ""

#: ../../../TestingGuide.rst:46
msgid "Unit tests"
msgstr ""

#: ../../../TestingGuide.rst:48
msgid ""
"Unit tests are written using `Google Test <https://github.com/google/"
"googletest/blob/master/docs/primer.md>`_ and `Google Mock <https://github."
"com/google/googletest/blob/master/docs/gmock_for_dummies.md>`_ and are "
"located in the ``llvm/unittests`` directory. In general unit tests are "
"reserved for targeting the support library and other generic data structure, "
"we prefer relying on regression tests for testing transformations and "
"analysis on the IR."
msgstr ""

#: ../../../TestingGuide.rst:56
msgid "Regression tests"
msgstr ""

#: ../../../TestingGuide.rst:58
msgid ""
"The regression tests are small pieces of code that test a specific feature "
"of LLVM or trigger a specific bug in LLVM. The language they are written in "
"depends on the part of LLVM being tested. These tests are driven by the :doc:"
"`Lit <CommandGuide/lit>` testing tool (which is part of LLVM), and are "
"located in the ``llvm/test`` directory."
msgstr ""

#: ../../../TestingGuide.rst:64
msgid ""
"Typically when a bug is found in LLVM, a regression test containing just "
"enough code to reproduce the problem should be written and placed somewhere "
"underneath this directory. For example, it can be a small piece of LLVM IR "
"distilled from an actual application or benchmark."
msgstr ""

#: ../../../TestingGuide.rst:70
msgid "Testing Analysis"
msgstr ""

#: ../../../TestingGuide.rst:72
msgid ""
"An analysis is a pass that infer properties on some part of the IR and not "
"transforming it. They are tested in general using the same infrastructure as "
"the regression tests, by creating a separate \"Printer\" pass to consume the "
"analysis result and print it on the standard output in a textual format "
"suitable for FileCheck. See `llvm/test/Analysis/BranchProbabilityInfo/loop."
"ll <https://github.com/llvm/llvm-project/blob/main/llvm/test/Analysis/"
"BranchProbabilityInfo/loop.ll>`_ for an example of such test."
msgstr ""

#: ../../../TestingGuide.rst:81
msgid "``test-suite``"
msgstr ""

#: ../../../TestingGuide.rst:83
msgid ""
"The test suite contains whole programs, which are pieces of code which can "
"be compiled and linked into a stand-alone program that can be executed. "
"These programs are generally written in high level languages such as C or C+"
"+."
msgstr ""

#: ../../../TestingGuide.rst:88
msgid ""
"These programs are compiled using a user specified compiler and set of "
"flags, and then executed to capture the program output and timing "
"information. The output of these programs is compared to a reference output "
"to ensure that the program is being compiled correctly."
msgstr ""

#: ../../../TestingGuide.rst:93
msgid ""
"In addition to compiling and executing programs, whole program tests serve "
"as a way of benchmarking LLVM performance, both in terms of the efficiency "
"of the programs generated as well as the speed with which LLVM compiles, "
"optimizes, and generates code."
msgstr ""

#: ../../../TestingGuide.rst:98
msgid ""
"The test-suite is located in the ``test-suite`` `repository on GitHub "
"<https://github.com/llvm/llvm-test-suite.git>`_."
msgstr ""

#: ../../../TestingGuide.rst:101
msgid "See the :doc:`TestSuiteGuide` for details."
msgstr ""

#: ../../../TestingGuide.rst:104 ../../../TestingGuide.rst:187
msgid "Debugging Information tests"
msgstr ""

#: ../../../TestingGuide.rst:106
msgid ""
"The test suite contains tests to check quality of debugging information. The "
"test are written in C based languages or in LLVM assembly language."
msgstr ""

#: ../../../TestingGuide.rst:109
msgid ""
"These tests are compiled and run under a debugger. The debugger output is "
"checked to validate of debugging information. See README.txt in the test "
"suite for more information. This test suite is located in the ``cross-"
"project-tests/debuginfo-tests`` directory."
msgstr ""

#: ../../../TestingGuide.rst:115
msgid "Quick start"
msgstr ""

#: ../../../TestingGuide.rst:117
msgid ""
"The tests are located in two separate repositories. The unit and regression "
"tests are in the main \"llvm\"/ directory under the directories ``llvm/"
"unittests`` and ``llvm/test`` (so you get these tests for free with the main "
"LLVM tree). Use ``make check-all`` to run the unit and regression tests "
"after building LLVM."
msgstr ""

#: ../../../TestingGuide.rst:123
msgid ""
"The ``test-suite`` module contains more comprehensive tests including whole "
"C and C++ programs. See the :doc:`TestSuiteGuide` for details."
msgstr ""

#: ../../../TestingGuide.rst:127
msgid "Unit and Regression tests"
msgstr ""

#: ../../../TestingGuide.rst:129
msgid "To run all of the LLVM unit tests use the check-llvm-unit target:"
msgstr ""

#: ../../../TestingGuide.rst:135
msgid "To run all of the LLVM regression tests use the check-llvm target:"
msgstr ""

#: ../../../TestingGuide.rst:141
msgid ""
"In order to get reasonable testing performance, build LLVM and subprojects "
"in release mode, i.e."
msgstr ""

#: ../../../TestingGuide.rst:148
msgid ""
"If you have `Clang <https://clang.llvm.org/>`_ checked out and built, you "
"can run the LLVM and Clang tests simultaneously using:"
msgstr ""

#: ../../../TestingGuide.rst:155
msgid ""
"To run the tests with Valgrind (Memcheck by default), use the ``LIT_ARGS`` "
"make variable to pass the required options to lit. For example, you can use:"
msgstr ""

#: ../../../TestingGuide.rst:162
msgid "to enable testing with valgrind and with leak checking enabled."
msgstr ""

#: ../../../TestingGuide.rst:164
msgid ""
"To run individual tests or subsets of tests, you can use the ``llvm-lit`` "
"script which is built as part of LLVM. For example, to run the ``Integer/"
"BitPacked.ll`` test by itself you can run:"
msgstr ""

#: ../../../TestingGuide.rst:172
msgid "or to run all of the ARM CodeGen tests:"
msgstr ""

#: ../../../TestingGuide.rst:178
msgid ""
"The regression tests will use the Python psutil module only if installed in "
"a **non-user** location. Under Linux, install with sudo or within a virtual "
"environment. Under Windows, install Python for all users and then run ``pip "
"install psutil`` in an elevated command prompt."
msgstr ""

#: ../../../TestingGuide.rst:183
msgid ""
"For more information on using the :program:`lit` tool, see ``llvm-lit --"
"help`` or the :doc:`lit man page <CommandGuide/lit>`."
msgstr ""

#: ../../../TestingGuide.rst:189
msgid ""
"To run debugging information tests simply add the ``cross-project-tests`` "
"project to your ``LLVM_ENABLE_PROJECTS`` define on the cmake command-line."
msgstr ""

#: ../../../TestingGuide.rst:194
msgid "Regression test structure"
msgstr ""

#: ../../../TestingGuide.rst:196
msgid ""
"The LLVM regression tests are driven by :program:`lit` and are located in "
"the ``llvm/test`` directory."
msgstr ""

#: ../../../TestingGuide.rst:199
msgid ""
"This directory contains a large array of small tests that exercise various "
"features of LLVM and to ensure that regressions do not occur. The directory "
"is broken into several sub-directories, each focused on a particular area of "
"LLVM."
msgstr ""

#: ../../../TestingGuide.rst:205
msgid "Writing new regression tests"
msgstr ""

#: ../../../TestingGuide.rst:207
msgid ""
"The regression test structure is very simple, but does require some "
"information to be set. This information is gathered via ``cmake`` and is "
"written to a file, ``test/lit.site.cfg.py`` in the build directory. The "
"``llvm/test`` Makefile does this work for you."
msgstr ""

#: ../../../TestingGuide.rst:212
msgid ""
"In order for the regression tests to work, each directory of tests must have "
"a ``lit.local.cfg`` file. :program:`lit` looks for this file to determine "
"how to run the tests. This file is just Python code and thus is very "
"flexible, but we've standardized it for the LLVM regression tests. If you're "
"adding a directory of tests, just copy ``lit.local.cfg`` from another "
"directory to get running. The standard ``lit.local.cfg`` simply specifies "
"which files to look in for tests. Any directory that contains only "
"directories does not need the ``lit.local.cfg`` file. Read the :doc:`Lit "
"documentation <CommandGuide/lit>` for more information."
msgstr ""

#: ../../../TestingGuide.rst:222
msgid ""
"Each test file must contain lines starting with \"RUN:\" that tell :program:"
"`lit` how to run it. If there are no RUN lines, :program:`lit` will issue an "
"error while running a test."
msgstr ""

#: ../../../TestingGuide.rst:226
msgid ""
"RUN lines are specified in the comments of the test program using the "
"keyword ``RUN`` followed by a colon, and lastly the command (pipeline) to "
"execute. Together, these lines form the \"script\" that :program:`lit` "
"executes to run the test case. The syntax of the RUN lines is similar to a "
"shell's syntax for pipelines including I/O redirection and variable "
"substitution. However, even though these lines may *look* like a shell "
"script, they are not. RUN lines are interpreted by :program:`lit`. "
"Consequently, the syntax differs from shell in a few ways. You can specify "
"as many RUN lines as needed."
msgstr ""

#: ../../../TestingGuide.rst:236
msgid ""
":program:`lit` performs substitution on each RUN line to replace LLVM tool "
"names with the full paths to the executable built for each tool (in "
"``$(LLVM_OBJ_ROOT)/bin``). This ensures that :program:`lit` does not invoke "
"any stray LLVM tools in the user's path during testing."
msgstr ""

#: ../../../TestingGuide.rst:241
msgid ""
"Each RUN line is executed on its own, distinct from other lines unless its "
"last character is ``\\``. This continuation character causes the RUN line to "
"be concatenated with the next one. In this way you can build up long "
"pipelines of commands without making huge line lengths. The lines ending in "
"``\\`` are concatenated until a RUN line that doesn't end in ``\\`` is "
"found. This concatenated set of RUN lines then constitutes one execution. :"
"program:`lit` will substitute variables and arrange for the pipeline to be "
"executed. If any process in the pipeline fails, the entire line (and test "
"case) fails too."
msgstr ""

#: ../../../TestingGuide.rst:251
msgid "Below is an example of legal RUN lines in a ``.ll`` file:"
msgstr ""

#: ../../../TestingGuide.rst:259
msgid ""
"As with a Unix shell, the RUN lines permit pipelines and I/O redirection to "
"be used."
msgstr ""

#: ../../../TestingGuide.rst:262
msgid ""
"There are some quoting rules that you must pay attention to when writing "
"your RUN lines. In general nothing needs to be quoted. :program:`lit` won't "
"strip off any quote characters so they will get passed to the invoked "
"program. To avoid this use curly braces to tell :program:`lit` that it "
"should treat everything enclosed as one value."
msgstr ""

#: ../../../TestingGuide.rst:268
msgid ""
"In general, you should strive to keep your RUN lines as simple as possible, "
"using them only to run tools that generate textual output you can then "
"examine. The recommended way to examine output to figure out if the test "
"passes is using the :doc:`FileCheck tool <CommandGuide/FileCheck>`. *[The "
"usage of grep in RUN lines is deprecated - please do not send or commit "
"patches that use it.]*"
msgstr ""

#: ../../../TestingGuide.rst:274
msgid ""
"Put related tests into a single file rather than having a separate file per "
"test. Check if there are files already covering your feature and consider "
"adding your code there instead of creating a new file."
msgstr ""

#: ../../../TestingGuide.rst:279
msgid "Generating assertions in regression tests"
msgstr ""

#: ../../../TestingGuide.rst:281
msgid ""
"Some regression test cases are very large and complex to write/update by "
"hand. In that case to reduce the human work we can use the scripts available "
"in llvm/utils/ to generate the assertions."
msgstr ""

#: ../../../TestingGuide.rst:285
msgid ""
"For example to generate assertions in an :program:`llc`-based test, after "
"adding one or more RUN lines use:"
msgstr ""

#: ../../../TestingGuide.rst:292
msgid ""
"This will generate FileCheck assertions, and insert a ``NOTE:`` line at the "
"top to indicate that assertions were automatically generated."
msgstr ""

#: ../../../TestingGuide.rst:295
msgid ""
"If you want to update assertions in an existing test case, pass the `-u` "
"option which first checks the ``NOTE:`` line exists and matches the script "
"name."
msgstr ""

#: ../../../TestingGuide.rst:298
msgid ""
"Sometimes a test absolutely depends on hand-written assertions and should "
"not have assertions automatically generated. In that case, add the text "
"``NOTE: Do not autogenerate`` to the first line, and the scripts will skip "
"that test. It is a good idea to explain why generated assertions will not "
"work for the test so future developers will understand what is going on."
msgstr ""

#: ../../../TestingGuide.rst:304
msgid ""
"These are the most common scripts and their purposes/applications in "
"generating assertions:"
msgstr ""

#: ../../../TestingGuide.rst:328
msgid "Precommit workflow for tests"
msgstr ""

#: ../../../TestingGuide.rst:330
msgid ""
"If the test does not crash, assert, or infinite loop, commit the test with "
"baseline check-lines first. That is, the test will show a miscompile or "
"missing optimization. Add a \"TODO\" or \"FIXME\" comment to indicate that "
"something is expected to change in a test."
msgstr ""

#: ../../../TestingGuide.rst:335
msgid ""
"A follow-up patch with code changes to the compiler will then show check-"
"line differences to the tests, so it is easier to see the effect of the "
"patch. Remove TODO/FIXME comments added in the previous step if a problem is "
"solved."
msgstr ""

#: ../../../TestingGuide.rst:339
msgid ""
"Baseline tests (no-functional-change or NFC patch) may be pushed to main "
"without pre-commit review if you have commit access."
msgstr ""

#: ../../../TestingGuide.rst:343
msgid "Best practices for regression tests"
msgstr ""

#: ../../../TestingGuide.rst:345
msgid ""
"Use auto-generated check lines (produced by the scripts mentioned above) "
"whenever feasible."
msgstr ""

#: ../../../TestingGuide.rst:347
msgid ""
"Include comments about what is tested/expected in a particular test. If "
"there are relevant issues in the bug tracker, add references to those bug "
"reports (for example, \"See PR999 for more details\")."
msgstr ""

#: ../../../TestingGuide.rst:350
msgid ""
"Avoid undefined behavior and poison/undef values unless necessary. For "
"example, do not use patterns like ``br i1 undef``, which are likely to break "
"as a result of future optimizations."
msgstr ""

#: ../../../TestingGuide.rst:353
msgid ""
"Minimize tests by removing unnecessary instructions, metadata, attributes, "
"etc. Tools like ``llvm-reduce`` can help automate this."
msgstr ""

#: ../../../TestingGuide.rst:355
msgid ""
"Outside PhaseOrdering tests, only run a minimal set of passes. For example, "
"prefer ``opt -S -passes=instcombine`` over ``opt -S -O3``."
msgstr ""

#: ../../../TestingGuide.rst:357
msgid ""
"Avoid unnamed instructions/blocks (such as ``%0`` or ``1:``), because they "
"may require renumbering on future test modifications. These can be removed "
"by running the test through ``opt -S -passes=instnamer``."
msgstr ""

#: ../../../TestingGuide.rst:360
msgid ""
"Try to give values (including variables, blocks and functions) meaningful "
"names, and avoid retaining complex names generated by the optimization "
"pipeline (such as ``%foo.0.0.0.0.0.0``)."
msgstr ""

#: ../../../TestingGuide.rst:365
msgid "Extra files"
msgstr ""

#: ../../../TestingGuide.rst:367
msgid ""
"If your test requires extra files besides the file containing the ``RUN:`` "
"lines and the extra files are small, consider specifying them in the same "
"file and using ``split-file`` to extract them. For example,"
msgstr ""

#: ../../../TestingGuide.rst:383
msgid "The parts are separated by the regex ``^(.|//)--- <part>``."
msgstr ""

#: ../../../TestingGuide.rst:385
msgid ""
"If you want to test relative line numbers like ``[[#@LINE+1]]``, specify ``--"
"leading-lines`` to add leading empty lines to preserve line numbers."
msgstr ""

#: ../../../TestingGuide.rst:388
msgid ""
"If the extra files are large, the idiomatic place to put them is in a "
"subdirectory ``Inputs``. You can then refer to the extra files as ``%S/"
"Inputs/foo.bar``."
msgstr ""

#: ../../../TestingGuide.rst:391
msgid ""
"For example, consider ``test/Linker/ident.ll``. The directory structure is "
"as follows::"
msgstr ""

#: ../../../TestingGuide.rst:401
msgid "For convenience, these are the contents:"
msgstr ""

#: ../../../TestingGuide.rst:427
msgid ""
"For symmetry reasons, ``ident.ll`` is just a dummy file that doesn't "
"actually participate in the test besides holding the ``RUN:`` lines."
msgstr ""

#: ../../../TestingGuide.rst:432
msgid ""
"Some existing tests use ``RUN: true`` in extra files instead of just putting "
"the extra files in an ``Inputs/`` directory. This pattern is deprecated."
msgstr ""

#: ../../../TestingGuide.rst:437
msgid "Fragile tests"
msgstr ""

#: ../../../TestingGuide.rst:439
msgid ""
"It is easy to write a fragile test that would fail spuriously if the tool "
"being tested outputs a full path to the input file.  For example, :program:"
"`opt` by default outputs a ``ModuleID``:"
msgstr ""

#: ../../../TestingGuide.rst:457
msgid ""
"``ModuleID`` can unexpectedly match against ``CHECK`` lines.  For example:"
msgstr ""

#: ../../../TestingGuide.rst:468
msgid "This test will fail if placed into a ``download`` directory."
msgstr ""

#: ../../../TestingGuide.rst:470
msgid ""
"To make your tests robust, always use ``opt ... < %s`` in the RUN line. :"
"program:`opt` does not output a ``ModuleID`` when input comes from stdin."
msgstr ""

#: ../../../TestingGuide.rst:474
msgid "Platform-Specific Tests"
msgstr ""

#: ../../../TestingGuide.rst:476
msgid ""
"Whenever adding tests that require the knowledge of a specific platform, "
"either related to code generated, specific output or back-end features, you "
"must make sure to isolate the features, so that buildbots that run on "
"different architectures (and don't even compile all back-ends), don't fail."
msgstr ""

#: ../../../TestingGuide.rst:482
msgid ""
"The first problem is to check for target-specific output, for example sizes "
"of structures, paths and architecture names, for example:"
msgstr ""

#: ../../../TestingGuide.rst:485
msgid "Tests containing Windows paths will fail on Linux and vice-versa."
msgstr ""

#: ../../../TestingGuide.rst:486
msgid ""
"Tests that check for ``x86_64`` somewhere in the text will fail anywhere "
"else."
msgstr ""

#: ../../../TestingGuide.rst:487
msgid ""
"Tests where the debug information calculates the size of types and "
"structures."
msgstr ""

#: ../../../TestingGuide.rst:489
msgid ""
"Also, if the test rely on any behaviour that is coded in any back-end, it "
"must go in its own directory. So, for instance, code generator tests for ARM "
"go into ``test/CodeGen/ARM`` and so on. Those directories contain a special "
"``lit`` configuration file that ensure all tests in that directory will only "
"run if a specific back-end is compiled and available."
msgstr ""

#: ../../../TestingGuide.rst:495
msgid "For instance, on ``test/CodeGen/ARM``, the ``lit.local.cfg`` is:"
msgstr ""

#: ../../../TestingGuide.rst:503
msgid ""
"Other platform-specific tests are those that depend on a specific feature of "
"a specific sub-architecture, for example only to Intel chips that support "
"``AVX2``."
msgstr ""

#: ../../../TestingGuide.rst:506
msgid ""
"For instance, ``test/CodeGen/X86/psubus.ll`` tests three sub-architecture "
"variants:"
msgstr ""

#: ../../../TestingGuide.rst:515
msgid "And the checks are different:"
msgstr ""

#: ../../../TestingGuide.rst:526
msgid ""
"So, if you're testing for a behaviour that you know is platform-specific or "
"depends on special features of sub-architectures, you must add the specific "
"triple, test with the specific FileCheck and put it into the specific "
"directory that will filter out all other architectures."
msgstr ""

#: ../../../TestingGuide.rst:533
msgid "Constraining test execution"
msgstr ""

#: ../../../TestingGuide.rst:535
msgid ""
"Some tests can be run only in specific configurations, such as with debug "
"builds or on particular platforms. Use ``REQUIRES`` and ``UNSUPPORTED`` to "
"control when the test is enabled."
msgstr ""

#: ../../../TestingGuide.rst:539
msgid ""
"Some tests are expected to fail. For example, there may be a known bug that "
"the test detect. Use ``XFAIL`` to mark a test as an expected failure. An "
"``XFAIL`` test will be successful if its execution fails, and will be a "
"failure if its execution succeeds."
msgstr ""

#: ../../../TestingGuide.rst:553
msgid ""
"``REQUIRES`` and ``UNSUPPORTED`` and ``XFAIL`` all accept a comma-separated "
"list of boolean expressions. The values in each expression may be:"
msgstr ""

#: ../../../TestingGuide.rst:556
msgid ""
"Features added to ``config.available_features`` by configuration files such "
"as ``lit.cfg``. String comparison of features is case-sensitive. "
"Furthermore, a boolean expression can contain any Python regular expression "
"enclosed in ``{{ }}``, in which case the boolean expression is satisfied if "
"any feature matches the regular expression. Regular expressions can appear "
"inside an identifier, so for example ``he{{l+}}o`` would match ``helo``, "
"``hello``, ``helllo``, and so on."
msgstr ""

#: ../../../TestingGuide.rst:562
msgid ""
"The default target triple, preceded by the string ``target=`` (for example, "
"``target=x86_64-pc-windows-msvc``). Typically regular expressions are used "
"to match parts of the triple (for example, ``target={{.*}}-windows{{.*}}`` "
"to match any Windows target triple)."
msgstr ""

#: ../../../TestingGuide.rst:567
msgid "``REQUIRES`` enables the test if all expressions are true."
msgstr ""

#: ../../../TestingGuide.rst:568
msgid "``UNSUPPORTED`` disables the test if any expression is true."
msgstr ""

#: ../../../TestingGuide.rst:569
msgid "``XFAIL`` expects the test to fail if any expression is true."
msgstr ""

#: ../../../TestingGuide.rst:571
msgid "As a special case, ``XFAIL: *`` is expected to fail everywhere."
msgstr ""

#: ../../../TestingGuide.rst:583
msgid "Tips for writing constraints"
msgstr ""

#: ../../../TestingGuide.rst:585
msgid "**``REQUIRES`` and ``UNSUPPORTED``**"
msgstr ""

#: ../../../TestingGuide.rst:587
msgid ""
"These are logical inverses. In principle, ``UNSUPPORTED`` isn't absolutely "
"necessary (the logical negation could be used with ``REQUIRES`` to get "
"exactly the same effect), but it can make these clauses easier to read and "
"understand. Generally, people use ``REQUIRES`` to state things that the test "
"depends on to operate correctly, and ``UNSUPPORTED`` to exclude cases where "
"the test is expected never to work."
msgstr ""

#: ../../../TestingGuide.rst:594
msgid "**``UNSUPPORTED`` and ``XFAIL``**"
msgstr ""

#: ../../../TestingGuide.rst:596
msgid ""
"Both of these indicate that the test isn't expected to work; however, they "
"have different effects. ``UNSUPPORTED`` causes the test to be skipped; this "
"saves execution time, but then you'll never know whether the test actually "
"would start working. Conversely, ``XFAIL`` actually runs the test but "
"expects a failure output, taking extra execution time but alerting you if/"
"when the test begins to behave correctly (an XPASS test result). You need to "
"decide which is more appropriate in each case."
msgstr ""

#: ../../../TestingGuide.rst:604
msgid "**Using ``target=...``**"
msgstr ""

#: ../../../TestingGuide.rst:606
msgid ""
"Checking the target triple can be tricky; it's easy to mis-specify. For "
"example, ``target=mips{{.*}}`` will match not only mips, but also mipsel, "
"mips64, and mips64el. ``target={{.*}}-linux-gnu`` will match x86_64-unknown-"
"linux-gnu, but not armv8l-unknown-linux-gnueabihf. Prefer to use hyphens to "
"delimit triple components (``target=mips-{{.*}}``) and it's generally a good "
"idea to use a trailing wildcard to allow for unexpected suffixes."
msgstr ""

#: ../../../TestingGuide.rst:614
msgid ""
"Also, it's generally better to write regular expressions that use entire "
"triple components, than to do something clever to shorten them. For example, "
"to match both freebsd and netbsd in an expression, you could write "
"``target={{.*(free|net)bsd.*}}`` and that would work. However, it would "
"prevent a ``grep freebsd`` from finding this test. Better to use: "
"``target={{.+-freebsd.*}} || target={{.+-netbsd.*}}``"
msgstr ""

#: ../../../TestingGuide.rst:623
msgid "Substitutions"
msgstr ""

#: ../../../TestingGuide.rst:625
msgid ""
"Besides replacing LLVM tool names the following substitutions are performed "
"in RUN lines:"
msgstr ""

#: ../../../TestingGuide.rst:629
msgid "``%%``"
msgstr ""

#: ../../../TestingGuide.rst:629
msgid "Replaced by a single ``%``. This allows escaping other substitutions."
msgstr ""

#: ../../../TestingGuide.rst:635
msgid "``%s``"
msgstr ""

#: ../../../TestingGuide.rst:632
msgid ""
"File path to the test case's source. This is suitable for passing on the "
"command line as the input to an LLVM tool."
msgstr ""

#: ../../../TestingGuide.rst:635
msgid "Example: ``/home/user/llvm/test/MC/ELF/foo_test.s``"
msgstr ""

#: ../../../TestingGuide.rst:640
msgid "``%S``"
msgstr ""

#: ../../../TestingGuide.rst:638
msgid "Directory path to the test case's source."
msgstr ""

#: ../../../TestingGuide.rst:640
msgid "Example: ``/home/user/llvm/test/MC/ELF``"
msgstr ""

#: ../../../TestingGuide.rst:648
msgid "``%t``"
msgstr ""

#: ../../../TestingGuide.rst:643
msgid ""
"File path to a temporary file name that could be used for this test case. "
"The file name won't conflict with other test cases. You can append to it if "
"you need multiple temporaries. This is useful as the destination of some "
"redirected output."
msgstr ""

#: ../../../TestingGuide.rst:648
msgid "Example: ``/home/user/llvm.build/test/MC/ELF/Output/foo_test.s.tmp``"
msgstr ""

#: ../../../TestingGuide.rst:656
msgid "``%T``"
msgstr ""

#: ../../../TestingGuide.rst:651
msgid ""
"Directory of ``%t``. Deprecated. Shouldn't be used, because it can be easily "
"misused and cause race conditions between tests."
msgstr ""

#: ../../../TestingGuide.rst:654
msgid ""
"Use ``rm -rf %t && mkdir %t`` instead if a temporary directory is necessary."
msgstr ""

#: ../../../TestingGuide.rst:656
msgid "Example: ``/home/user/llvm.build/test/MC/ELF/Output``"
msgstr ""

#: ../../../TestingGuide.rst:658
msgid "``%{pathsep}``"
msgstr ""

#: ../../../TestingGuide.rst:660
msgid "Expands to the path separator, i.e. ``:`` (or ``;`` on Windows)."
msgstr ""

#: ../../../TestingGuide.rst:664
msgid "``${fs-src-root}``"
msgstr ""

#: ../../../TestingGuide.rst:663
msgid ""
"Expands to the root component of file system paths for the source directory, "
"i.e. ``/`` on Unix systems or ``C:\\`` (or another drive) on Windows."
msgstr ""

#: ../../../TestingGuide.rst:669
msgid "``${fs-tmp-root}``"
msgstr ""

#: ../../../TestingGuide.rst:667
msgid ""
"Expands to the root component of file system paths for the test's temporary "
"directory, i.e. ``/`` on Unix systems or ``C:\\`` (or another drive) on "
"Windows."
msgstr ""

#: ../../../TestingGuide.rst:672
msgid "``${fs-sep}``"
msgstr ""

#: ../../../TestingGuide.rst:672
msgid "Expands to the file system separator, i.e. ``/`` or ``\\`` on Windows."
msgstr ""

#: ../../../TestingGuide.rst:674
msgid "``%/s, %/S, %/t, %/T``"
msgstr ""

#: ../../../TestingGuide.rst:676
msgid ""
"Act like the corresponding substitution above but replace any ``\\`` "
"character with a ``/``. This is useful to normalize path separators."
msgstr ""

#: ../../../TestingGuide.rst:679
msgid "Example: ``%s:  C:\\Desktop Files/foo_test.s.tmp``"
msgstr ""

#: ../../../TestingGuide.rst:681
msgid "Example: ``%/s: C:/Desktop Files/foo_test.s.tmp``"
msgstr ""

#: ../../../TestingGuide.rst:683
msgid ""
"``%{s:real}, %{S:real}, %{t:real}, %{T:real}`` ``%{/s:real}, %{/S:real}, %{/"
"t:real}, %{/T:real}``"
msgstr ""

#: ../../../TestingGuide.rst:686
msgid ""
"Act like the corresponding substitution, including with ``/``, but use the "
"real path by expanding all symbolic links and substitute drives."
msgstr ""

#: ../../../TestingGuide.rst:689
msgid "Example: ``%s:  S:\\foo_test.s.tmp``"
msgstr ""

#: ../../../TestingGuide.rst:691
msgid "Example: ``%{/s:real}: C:/SDrive/foo_test.s.tmp``"
msgstr ""

#: ../../../TestingGuide.rst:693
msgid "``%:s, %:S, %:t, %:T``"
msgstr ""

#: ../../../TestingGuide.rst:695
msgid ""
"Act like the corresponding substitution above but remove colons at the "
"beginning of Windows paths. This is useful to allow concatenation of "
"absolute paths on Windows to produce a legal path."
msgstr ""

#: ../../../TestingGuide.rst:699
msgid "Example: ``%s:  C:\\Desktop Files\\foo_test.s.tmp``"
msgstr ""

#: ../../../TestingGuide.rst:701
msgid "Example: ``%:s: C\\Desktop Files\\foo_test.s.tmp``"
msgstr ""

#: ../../../TestingGuide.rst:703
msgid "``%errc_<ERRCODE>``"
msgstr ""

#: ../../../TestingGuide.rst:705
msgid ""
"Some error messages may be substituted to allow different spellings based on "
"the host platform."
msgstr ""

#: ../../../TestingGuide.rst:708
msgid ""
"The following error codes are currently supported: ENOENT, EISDIR, EINVAL, "
"EACCES."
msgstr ""

#: ../../../TestingGuide.rst:711
msgid "Example: ``Linux %errc_ENOENT: No such file or directory``"
msgstr ""

#: ../../../TestingGuide.rst:713
msgid "Example: ``Windows %errc_ENOENT: no such file or directory``"
msgstr ""

#: ../../../TestingGuide.rst:715
msgid "``%if feature %{<if branch>%} %else %{<else branch>%}``"
msgstr ""

#: ../../../TestingGuide.rst:717
msgid ""
"Conditional substitution: if ``feature`` is available it expands to ``<if "
"branch>``, otherwise it expands to ``<else branch>``. ``%else %{<else "
"branch>%}`` is optional and treated like ``%else %{%}`` if not present."
msgstr ""

#: ../../../TestingGuide.rst:722
msgid "``%(line)``, ``%(line+<number>)``, ``%(line-<number>)``"
msgstr ""

#: ../../../TestingGuide.rst:724
msgid ""
"The number of the line where this substitution is used, with an optional "
"integer offset.  These expand only if they appear immediately in ``RUN:``, "
"``DEFINE:``, and ``REDEFINE:`` directives. Occurrences in substitutions "
"defined elsewhere are never expanded. For example, this can be used in tests "
"with multiple RUN lines, which reference the test file's line numbers."
msgstr ""

#: ../../../TestingGuide.rst:731
msgid "**LLVM-specific substitutions:**"
msgstr ""

#: ../../../TestingGuide.rst:737
msgid "``%shlibext``"
msgstr ""

#: ../../../TestingGuide.rst:734
msgid ""
"The suffix for the host platforms shared library files. This includes the "
"period as the first character."
msgstr ""

#: ../../../TestingGuide.rst:737
msgid "Example: ``.so`` (Linux), ``.dylib`` (macOS), ``.dll`` (Windows)"
msgstr ""

#: ../../../TestingGuide.rst:743
msgid "``%exeext``"
msgstr ""

#: ../../../TestingGuide.rst:740
msgid ""
"The suffix for the host platforms executable files. This includes the period "
"as the first character."
msgstr ""

#: ../../../TestingGuide.rst:743
msgid "Example: ``.exe`` (Windows), empty on Linux."
msgstr ""

#: ../../../TestingGuide.rst:745
msgid "**Clang-specific substitutions:**"
msgstr ""

#: ../../../TestingGuide.rst:748
msgid "``%clang``"
msgstr ""

#: ../../../TestingGuide.rst:748
msgid "Invokes the Clang driver."
msgstr ""

#: ../../../TestingGuide.rst:751
msgid "``%clang_cpp``"
msgstr ""

#: ../../../TestingGuide.rst:751
msgid "Invokes the Clang driver for C++."
msgstr ""

#: ../../../TestingGuide.rst:754
msgid "``%clang_cl``"
msgstr ""

#: ../../../TestingGuide.rst:754
msgid "Invokes the CL-compatible Clang driver."
msgstr ""

#: ../../../TestingGuide.rst:757
msgid "``%clangxx``"
msgstr ""

#: ../../../TestingGuide.rst:757
msgid "Invokes the G++-compatible Clang driver."
msgstr ""

#: ../../../TestingGuide.rst:760
msgid "``%clang_cc1``"
msgstr ""

#: ../../../TestingGuide.rst:760
msgid "Invokes the Clang frontend."
msgstr ""

#: ../../../TestingGuide.rst:767
msgid "``%itanium_abi_triple``, ``%ms_abi_triple``"
msgstr ""

#: ../../../TestingGuide.rst:763
msgid ""
"These substitutions can be used to get the current target triple adjusted to "
"the desired ABI. For example, if the test suite is running with the ``i686-"
"pc-win32`` target, ``%itanium_abi_triple`` will expand to ``i686-pc-"
"mingw32``. This allows a test to run with a specific ABI without "
"constraining it to a specific triple."
msgstr ""

#: ../../../TestingGuide.rst:769
msgid "**FileCheck-specific substitutions:**"
msgstr ""

#: ../../../TestingGuide.rst:774
msgid "``%ProtectFileCheckOutput``"
msgstr ""

#: ../../../TestingGuide.rst:772
msgid ""
"This should precede a ``FileCheck`` call if and only if the call's textual "
"output affects test results.  It's usually easy to tell: just look for "
"redirection or piping of the ``FileCheck`` call's stdout or stderr."
msgstr ""

#: ../../../TestingGuide.rst:778
msgid "**Test-specific substitutions:**"
msgstr ""

#: ../../../TestingGuide.rst:780
msgid "Additional substitutions can be defined as follows:"
msgstr ""

#: ../../../TestingGuide.rst:782
msgid ""
"Lit configuration files (e.g., ``lit.cfg`` or ``lit.local.cfg``) can define "
"substitutions for all tests in a test directory.  They do so by extending "
"the substitution list, ``config.substitutions``.  Each item in the list is a "
"tuple consisting of a pattern and its replacement, which lit applies using "
"python's ``re.sub`` function."
msgstr ""

#: ../../../TestingGuide.rst:787
msgid ""
"To define substitutions within a single test file, lit supports the ``DEFINE:"
"`` and ``REDEFINE:`` directives, described in detail below.  So that they "
"have no effect on other test files, these directives modify a copy of the "
"substitution list that is produced by lit configuration files."
msgstr ""

#: ../../../TestingGuide.rst:792
msgid ""
"For example, the following directives can be inserted into a test file to "
"define ``%{cflags}`` and ``%{fcflags}`` substitutions with empty initial "
"values, which serve as the parameters of another newly defined ``%{check}`` "
"substitution:"
msgstr ""

#: ../../../TestingGuide.rst:806
msgid ""
"Alternatively, the above substitutions can be defined in a lit configuration "
"file to be shared with other test files.  Either way, the test file can then "
"specify directives like the following to redefine the parameter "
"substitutions as desired before each use of ``%{check}`` in a ``RUN:`` line:"
msgstr ""

#: ../../../TestingGuide.rst:829
msgid ""
"Besides providing initial values, the initial ``DEFINE:`` directives for the "
"parameter substitutions in the above example serve a second purpose: they "
"establish the substitution order so that both ``%{check}`` and its "
"parameters expand as desired.  There's a simple way to remember the required "
"definition order in a test file: define a substitution before any "
"substitution that might refer to it."
msgstr ""

#: ../../../TestingGuide.rst:836
msgid "In general, substitution expansion behaves as follows:"
msgstr ""

#: ../../../TestingGuide.rst:838
msgid ""
"Upon arriving at each ``RUN:`` line, lit expands all substitutions in that "
"``RUN:`` line using their current values from the substitution list.  No "
"substitution expansion is performed immediately at ``DEFINE:`` and "
"``REDEFINE:`` directives except ``%(line)``, ``%(line+<number>)``, and "
"``%(line-<number>)``."
msgstr ""

#: ../../../TestingGuide.rst:843
msgid ""
"When expanding substitutions in a ``RUN:`` line, lit makes only one pass "
"through the substitution list by default.  In this case, a substitution must "
"have been inserted earlier in the substitution list than any substitution "
"appearing in its value in order for the latter to expand.  (For greater "
"flexibility, you can enable multiple passes through the substitution list by "
"setting `recursiveExpansionLimit`_ in a lit configuration file.)"
msgstr ""

#: ../../../TestingGuide.rst:849
msgid ""
"While lit configuration files can insert anywhere in the substitution list, "
"the insertion behavior of the ``DEFINE:`` and ``REDEFINE:`` directives is "
"specified below and is designed specifically for the use case presented in "
"the example above."
msgstr ""

#: ../../../TestingGuide.rst:853
msgid ""
"Defining a substitution in terms of itself, whether directly or via other "
"substitutions, should be avoided.  It usually produces an infinitely "
"recursive definition that cannot be fully expanded.  It does *not* define "
"the substitution in terms of its previous value, even when using ``REDEFINE:"
"``."
msgstr ""

#: ../../../TestingGuide.rst:858
msgid ""
"The relationship between the ``DEFINE:`` and ``REDEFINE:`` directive is "
"analogous to the relationship between a variable declaration and variable "
"assignment in many programming languages:"
msgstr ""

#: ../../../TestingGuide.rst:862
msgid "``DEFINE: %{name} = value``"
msgstr ""

#: ../../../TestingGuide.rst:864
msgid ""
"This directive assigns the specified value to a new substitution whose "
"pattern is ``%{name}``, or it reports an error if there is already a "
"substitution whose pattern contains ``%{name}`` because that could produce "
"confusing expansions (e.g., a lit configuration file might define a "
"substitution with the pattern ``%{name}\\[0\\]``).  The new substitution is "
"inserted at the start of the substitution list so that it will expand first. "
"Thus, its value can contain any substitution previously defined, whether in "
"the same test file or in a lit configuration file, and both will expand."
msgstr ""

#: ../../../TestingGuide.rst:873
msgid "``REDEFINE: %{name} = value``"
msgstr ""

#: ../../../TestingGuide.rst:875
msgid ""
"This directive assigns the specified value to an existing substitution whose "
"pattern is ``%{name}``, or it reports an error if there are no substitutions "
"with that pattern or if there are multiple substitutions whose patterns "
"contain ``%{name}``.  The substitution's current position in the "
"substitution list does not change so that expansion order relative to other "
"existing substitutions is preserved."
msgstr ""

#: ../../../TestingGuide.rst:882
msgid ""
"The following properties apply to both the ``DEFINE:`` and ``REDEFINE:`` "
"directives:"
msgstr ""

#: ../../../TestingGuide.rst:885
msgid ""
"**Substitution name**: In the directive, whitespace immediately before or "
"after ``%{name}`` is optional and discarded.  ``%{name}`` must start with "
"``%{``, it must end with ``}``, and the rest must start with a letter or "
"underscore and contain only alphanumeric characters, hyphens, underscores, "
"and colons.  This syntax has a few advantages:"
msgstr ""

#: ../../../TestingGuide.rst:891
msgid ""
"It is impossible for ``%{name}`` to contain sequences that are special in "
"python's ``re.sub`` patterns.  Otherwise, attempting to specify ``%{name}`` "
"as a substitution pattern in a lit configuration file could produce "
"confusing expansions."
msgstr ""

#: ../../../TestingGuide.rst:895
msgid ""
"The braces help avoid the possibility that another substitution's pattern "
"will match part of ``%{name}`` or vice-versa, producing confusing "
"expansions.  However, the patterns of substitutions defined by lit "
"configuration files and by lit itself are not restricted to this form, so "
"overlaps are still theoretically possible."
msgstr ""

#: ../../../TestingGuide.rst:901
msgid ""
"**Substitution value**: The value includes all text from the first non-"
"whitespace character after ``=`` to the last non-whitespace character.  If "
"there is no non-whitespace character after ``=``, the value is the empty "
"string.  Escape sequences that can appear in python ``re.sub`` replacement "
"strings are treated as plain text in the value."
msgstr ""

#: ../../../TestingGuide.rst:906
msgid ""
"**Line continuations**: If the last non-whitespace character on the line "
"after ``:`` is ``\\``, then the next directive must use the same directive "
"keyword (e.g., ``DEFINE:``) , and it is an error if there is no additional "
"directive. That directive serves as a continuation.  That is, before "
"following the rules above to parse the text after ``:`` in either directive, "
"lit joins that text together to form a single directive, replaces the ``\\`` "
"with a single space, and removes any other whitespace that is now adjacent "
"to that space.  A continuation can be continued in the same manner.  A "
"continuation containing only whitespace after its ``:`` is an error."
msgstr ""

#: ../../../TestingGuide.rst:918
msgid "**recursiveExpansionLimit:**"
msgstr ""

#: ../../../TestingGuide.rst:920
msgid ""
"As described in the previous section, when expanding substitutions in a "
"``RUN:`` line, lit makes only one pass through the substitution list by "
"default.  Thus, if substitutions are not defined in the proper order, some "
"will remain in the ``RUN:`` line unexpanded.  For example, the following "
"directives refer to ``%{inner}`` within ``%{outer}`` but do not define "
"``%{inner}`` until after ``%{outer}``:"
msgstr ""

#: ../../../TestingGuide.rst:936
msgid ""
"``DEFINE:`` inserts substitutions at the start of the substitution list, so "
"``%{inner}`` expands first but has no effect because the original ``RUN:`` "
"line does not contain ``%{inner}``.  Next, ``%{outer}`` expands, and the "
"output of the ``echo`` command becomes:"
msgstr ""

#: ../../../TestingGuide.rst:945
msgid ""
"Of course, one way to fix this simple case is to reverse the definitions of "
"``%{outer}`` and ``%{inner}``.  However, if a test has a complex set of "
"substitutions that can all reference each other, there might not exist a "
"sufficient substitution order."
msgstr ""

#: ../../../TestingGuide.rst:950
msgid ""
"To address such use cases, lit configuration files support ``config."
"recursiveExpansionLimit``, which can be set to a non-negative integer to "
"specify the maximum number of passes through the substitution list.  Thus, "
"in the above example, setting the limit to 2 would cause lit to make a "
"second pass that expands ``%{inner}`` in the ``RUN:`` line, and the output "
"from the ``echo`` command when then be:"
msgstr ""

#: ../../../TestingGuide.rst:961
msgid ""
"To improve performance, lit will stop making passes when it notices the "
"``RUN:`` line has stopped changing.  In the above example, setting the limit "
"higher than 2 is thus harmless."
msgstr ""

#: ../../../TestingGuide.rst:965
msgid ""
"To facilitate debugging, after reaching the limit, lit will make one extra "
"pass and report an error if the ``RUN:`` line changes again.  In the above "
"example, setting the limit to 1 will thus cause lit to report an error "
"instead of producing incorrect output."
msgstr ""

#: ../../../TestingGuide.rst:971
msgid "Options"
msgstr ""

#: ../../../TestingGuide.rst:973
msgid ""
"The llvm lit configuration allows to customize some things with user options:"
msgstr ""

#: ../../../TestingGuide.rst:980
msgid "``llc``, ``opt``, ..."
msgstr ""

#: ../../../TestingGuide.rst:976
msgid ""
"Substitute the respective llvm tool name with a custom command line. This "
"allows to specify custom paths and default arguments for these tools. "
"Example:"
msgstr ""

#: ../../../TestingGuide.rst:980
msgid "% llvm-lit \"-Dllc=llc -verify-machineinstrs\""
msgstr ""

#: ../../../TestingGuide.rst:983
msgid "``run_long_tests``"
msgstr ""

#: ../../../TestingGuide.rst:983
msgid "Enable the execution of long running tests."
msgstr ""

#: ../../../TestingGuide.rst:987
msgid "``llvm_site_config``"
msgstr ""

#: ../../../TestingGuide.rst:986
msgid "Load the specified lit configuration instead of the default one."
msgstr ""

#: ../../../TestingGuide.rst:990
msgid "Other Features"
msgstr ""

#: ../../../TestingGuide.rst:992
msgid ""
"To make RUN line writing easier, there are several helper programs. These "
"helpers are in the PATH when running tests, so you can just call them using "
"their name. For example:"
msgstr ""

#: ../../../TestingGuide.rst:998
msgid "``not``"
msgstr ""

#: ../../../TestingGuide.rst:997
msgid ""
"This program runs its arguments and then inverts the result code from it. "
"Zero result codes become 1. Non-zero result codes become 0."
msgstr ""

#: ../../../TestingGuide.rst:1000
msgid ""
"To make the output more useful, :program:`lit` will scan the lines of the "
"test case for ones that contain a pattern that matches ``PR[0-9]+``. This is "
"the syntax for specifying a PR (Problem Report) number that is related to "
"the test case. The number after \"PR\" specifies the LLVM Bugzilla number. "
"When a PR number is specified, it will be used in the pass/fail reporting. "
"This is useful to quickly get some context when a test fails."
msgstr ""

#: ../../../TestingGuide.rst:1008
msgid ""
"Finally, any line that contains \"END.\" will cause the special "
"interpretation of lines to terminate. This is generally done right after the "
"last RUN: line. This has two side effects:"
msgstr ""

#: ../../../TestingGuide.rst:1012
msgid ""
"it prevents special interpretation of lines that are part of the test "
"program, not the instructions to the test case, and"
msgstr ""

#: ../../../TestingGuide.rst:1015
msgid ""
"it speeds things up for really big test cases by avoiding interpretation of "
"the remainder of the file."
msgstr ""
