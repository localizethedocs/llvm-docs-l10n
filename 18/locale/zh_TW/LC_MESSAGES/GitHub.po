# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 18\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../GitHub.rst:5
msgid "LLVM GitHub User Guide"
msgstr "LLVM GitHub 使用者指南"

#: ../../../GitHub.rst:8
msgid "Introduction"
msgstr "簡介"

#: ../../../GitHub.rst:9
msgid ""
"The LLVM Project uses `GitHub <https://github.com/>`_ for `Source Code "
"<https://github.com/llvm/llvm-project>`_, `Releases <https://github.com/llvm/"
"llvm-project/releases>`_, `Issue Tracking <https://github.com/llvm/llvm-"
"project/issues>`_., and `Code Reviews <https://github.com/llvm/llvm-project/"
"pulls>`_."
msgstr ""

#: ../../../GitHub.rst:15
msgid ""
"This page describes how the LLVM Project users and developers can "
"participate in the project using GitHub."
msgstr ""

#: ../../../GitHub.rst:19
msgid "Branches"
msgstr "分支"

#: ../../../GitHub.rst:21
msgid ""
"It is possible to create branches that starts with `users/<username>/`, "
"however this is intended to be able to support \"stacked\" pull-request. Do "
"not create any branches in the llvm/llvm-project repository otherwise, "
"please use a fork (see below). User branches that aren't associated with a "
"pull-request **will be deleted**."
msgstr ""

#: ../../../GitHub.rst:27
msgid "Pull Requests"
msgstr "拉取請求"

#: ../../../GitHub.rst:28
msgid ""
"The LLVM project is using GitHub Pull Requests for Code Reviews. This "
"document describes the typical workflow of creating a Pull Request and "
"getting it reviewed and accepted. This is meant as an overview of the GitHub "
"workflow, for complete documentation refer to `GitHub's documentation "
"<https://docs.github.com/pull-requests>`_."
msgstr ""

#: ../../../GitHub.rst:34
msgid "GitHub Tools"
msgstr ""

#: ../../../GitHub.rst:35
msgid ""
"You can interact with GitHub in several ways: via git command line tools, "
"the web browser, `GitHub Desktop <https://desktop.github.com/>`_, or the "
"`GitHub CLI <https://cli.github.com>`_. This guide will cover the git "
"command line tools and the GitHub CLI. The GitHub CLI (`gh`) will be most "
"like the `arc` workflow and recommended."
msgstr ""

#: ../../../GitHub.rst:42
msgid "Creating Pull Requests"
msgstr "建立拉取請求"

#: ../../../GitHub.rst:43
msgid ""
"Keep in mind that when creating a pull request, it should generally only "
"contain one self-contained commit initially. This makes it easier for "
"reviewers to understand the introduced changes and provide feedback. It also "
"helps maintain a clear and organized commit history for the project. If you "
"have multiple changes you want to introduce, it's recommended to create "
"separate pull requests for each change."
msgstr ""

#: ../../../GitHub.rst:50
msgid ""
"Create a local branch per commit you want to submit and then push that "
"branch to your `fork <https://docs.github.com/en/pull-requests/collaborating-"
"with-pull-requests/working-with-forks>`_ of the llvm-project and `create a "
"pull request from the fork <https://docs.github.com/en/pull-requests/"
"collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-"
"requests/creating-a-pull-request-from-a-fork>`_. As GitHub uses the first "
"line of the commit message truncated to 72 characters as the pull request "
"title, you may have to edit to reword or to undo this truncation."
msgstr ""

#: ../../../GitHub.rst:59
msgid "Creating Pull Requests with GitHub CLI"
msgstr ""

#: ../../../GitHub.rst:60
msgid "With the CLI it's enough to create the branch locally and then run:"
msgstr ""

#: ../../../GitHub.rst:66
msgid ""
"When prompted select to create and use your own fork and follow the "
"instructions to add more information needed."
msgstr ""

#: ../../../GitHub.rst:71
msgid ""
"When you let the GitHub CLI create a fork of llvm-project to your user, it "
"will change the git \"remotes\" so that \"origin\" points to your fork and "
"\"upstream\" points to the main llvm-project repository."
msgstr ""

#: ../../../GitHub.rst:76
msgid "Updating Pull Requests"
msgstr "更新拉取請求"

#: ../../../GitHub.rst:77
msgid ""
"In order to update your pull request, the only thing you need to do is to "
"push your new commits to the branch in your fork. That will automatically "
"update the pull request."
msgstr ""

#: ../../../GitHub.rst:81
msgid ""
"When updating a pull request, you should push additional \"fix up\" commits "
"to your branch instead of force pushing. This makes it easier for GitHub to "
"track the context of previous review comments. Consider using the `built-in "
"support for fixups <https://git-scm.com/docs/git-commit#Documentation/git-"
"commit.txt---fixupamendrewordltcommitgt>`_ in git."
msgstr ""

#: ../../../GitHub.rst:87
msgid ""
"If you do this, you must squash and merge before landing the PR and you must "
"use the pull request title and description as the commit message. You can do "
"this manually with an interactive git rebase or with GitHub's built-in tool. "
"See the section about landing your fix below."
msgstr ""

#: ../../../GitHub.rst:92
msgid ""
"When pushing to your branch, make sure you push to the correct fork. Check "
"your remotes with:"
msgstr ""

#: ../../../GitHub.rst:99
msgid "And make sure you push to the remote that's pointing to your fork."
msgstr ""

#: ../../../GitHub.rst:102
msgid "Rebasing Pull Requests and Force Pushes"
msgstr ""

#: ../../../GitHub.rst:103
msgid ""
"In general, you should avoid rebasing a Pull Request and force pushing to "
"the branch that's the root of the Pull Request during the review. This "
"action will make the context of the old changes and comments harder to find "
"and read."
msgstr ""

#: ../../../GitHub.rst:107
msgid ""
"Sometimes, a rebase might be needed to update your branch with a fix for a "
"test or in some dependent code."
msgstr ""

#: ../../../GitHub.rst:110
msgid ""
"After your PR is reviewed and accepted, you want to rebase your branch to "
"ensure you won't encounter merge conflicts when landing the PR."
msgstr ""

#: ../../../GitHub.rst:114
msgid "Landing your change"
msgstr ""

#: ../../../GitHub.rst:115
msgid ""
"When your PR has been accepted you can use the web interface to land your "
"change. If you have created multiple commits to address feedback at this "
"point you need to consolidate those commits into one commit. There are two "
"different ways to do this:"
msgstr ""

#: ../../../GitHub.rst:120
msgid ""
"`Interactive rebase <https://git-scm.com/docs/git-"
"rebase#_interactive_mode>`_ with fixup's. This is the recommended method "
"since you can control the final commit message and inspect that the final "
"commit looks as you expect. When your local state is correct, remember to "
"force-push to your branch and press the merge button afterwards."
msgstr ""

#: ../../../GitHub.rst:126
msgid ""
"Use the button `Squash and merge` in GitHub's web interface, if you do this "
"remember to review the commit message when prompted."
msgstr ""

#: ../../../GitHub.rst:129
msgid ""
"Afterwards you can select the option `Delete branch` to delete the branch "
"from your fork."
msgstr ""

#: ../../../GitHub.rst:132
msgid ""
"You can also merge via the CLI by switching to your branch locally and run:"
msgstr ""

#: ../../../GitHub.rst:138
msgid ""
"If you observe an error message from the above informing you that your pull "
"request is not mergeable, then that is likely because upstream has been "
"modified since your pull request was authored in a way that now results in a "
"merge conflict. You must first resolve this merge conflict in order to merge "
"your pull request. In order to do that:"
msgstr ""

#: ../../../GitHub.rst:149
msgid ""
"Then fix the source files causing merge conflicts and make sure to rebuild "
"and retest the result. Then:"
msgstr ""

#: ../../../GitHub.rst:157
msgid ""
"Finally, you'll need to force push to your branch one more time before you "
"can merge:"
msgstr ""

#: ../../../GitHub.rst:165
msgid ""
"This force push may ask if you intend to push hundreds, or potentially "
"thousands of patches (depending on how long it's been since your pull "
"request was initially authored vs. when you intended to merge it). Since "
"you're pushing to a branch in your fork, this is ok and expected. Github's "
"UI for the pull request will understand that you're rebasing just your "
"patches, and display this result correctly with a note that a force push did "
"occur."
msgstr ""

#: ../../../GitHub.rst:174
msgid "Checking out another PR locally"
msgstr ""

#: ../../../GitHub.rst:175
msgid ""
"Sometimes you want to review another person's PR on your local machine to "
"run tests or inspect code in your preferred editor. This is easily done with "
"the CLI:"
msgstr ""

#: ../../../GitHub.rst:183
msgid ""
"This is also possible with the web interface and the normal git command line "
"tools, but the process is a bit more complicated. See GitHub's "
"`documentation <https://docs.github.com/en/pull-requests/collaborating-with-"
"pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-"
"locally?platform=linux&tool=webui#modifying-an-inactive-pull-request-"
"locally>`_ on the topic."
msgstr ""

#: ../../../GitHub.rst:189
msgid "Example Pull Request with GitHub CLI"
msgstr ""

#: ../../../GitHub.rst:190
msgid "Here is an example for creating a Pull Request with the GitHub CLI:"
msgstr ""

#: ../../../GitHub.rst:237 ../../../GitHub.rst:332
msgid ""
"Before merging the PR, it is recommended that you rebase locally and re-run "
"test checks:"
msgstr ""

#: ../../../GitHub.rst:258 ../../../GitHub.rst:352
msgid ""
"See more in-depth information about how to contribute in the following "
"documentation:"
msgstr ""

#: ../../../GitHub.rst:260 ../../../GitHub.rst:354
msgid ":doc:`Contributing`"
msgstr ""

#: ../../../GitHub.rst:261 ../../../GitHub.rst:355
msgid ":doc:`MyFirstTypoFix`"
msgstr ""

#: ../../../GitHub.rst:264
msgid "Example Pull Request with git"
msgstr ""

#: ../../../GitHub.rst:266
msgid ""
"Instead of using the GitHub CLI to create a PR, you can push your code to a "
"remote branch on your fork and create the PR to upstream using the GitHub "
"web interface."
msgstr ""

#: ../../../GitHub.rst:270
msgid ""
"Here is an example of making a PR using git and the GitHub web interface:"
msgstr ""

#: ../../../GitHub.rst:272
msgid ""
"First follow the instructions to [fork the repository](https://docs.github."
"com/en/get-started/quickstart/fork-a-repo?tool=webui#forking-a-repository)."
msgstr ""

#: ../../../GitHub.rst:274
msgid ""
"Next follow the instructions to [clone your forked repository](https://docs."
"github.com/en/get-started/quickstart/fork-a-repo?tool=webui#cloning-your-"
"forked-repository)."
msgstr ""

#: ../../../GitHub.rst:276
msgid "Once you've cloned your forked repository,"
msgstr ""

#: ../../../GitHub.rst:304
msgid ""
"Navigate to the URL printed to the console from the git push command in the "
"last step. Create a pull request from your branch to llvm::main."
msgstr ""

#: ../../../GitHub.rst:349
msgid ""
"Once your PR is approved, rebased, and tests are passing, click `Squash and "
"Merge` on your PR in the GitHub web interface."
msgstr ""

#: ../../../GitHub.rst:358
msgid "Releases"
msgstr ""

#: ../../../GitHub.rst:361
msgid "Backporting Fixes to the Release Branches"
msgstr ""

#: ../../../GitHub.rst:362
msgid ""
"You can use special comments on issues to make backport requests for the "
"release branches.  This is done by making a comment containing one of the "
"following commands on any issue that has been added to one of the \"X.Y.Z "
"Release\" milestones."
msgstr ""

#: ../../../GitHub.rst:371
msgid ""
"This command takes one or more git commit hashes as arguments and will "
"attempt to cherry-pick the commit(s) to the release branch.  If the "
"commit(s) fail to apply cleanly, then a comment with a link to the failing "
"job will be added to the issue.  If the commit(s) do apply cleanly, then a "
"pull request will be created with the specified commits."
msgstr ""

#: ../../../GitHub.rst:381
msgid ""
"This command will create a pull request against the latest release branch "
"using the <branch> from the <owner>/<repo> repository.  <branch> cannot "
"contain any forward slash '/' characters."
msgstr ""
