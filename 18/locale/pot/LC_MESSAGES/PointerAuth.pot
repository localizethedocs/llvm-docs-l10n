# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 18\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../PointerAuth.md:1
msgid "Pointer Authentication"
msgstr ""

#: ../../../PointerAuth.md:3
msgid "Introduction"
msgstr ""

#: ../../../PointerAuth.md:5
msgid ""
"Pointer Authentication is a mechanism by which certain pointers are signed. "
"When a pointer gets signed, a cryptographic hash of its value and other "
"values (pepper and salt) is stored in unused bits of that pointer."
msgstr ""

#: ../../../PointerAuth.md:9
msgid ""
"Before the pointer is used, it needs to be authenticated, i.e., have its "
"signature checked.  This prevents pointer values of unknown origin from "
"being used to replace the signed pointer value."
msgstr ""

#: ../../../PointerAuth.md:13
msgid "At the IR level, it is represented using:"
msgstr ""

#: ../../../PointerAuth.md:15
msgid "a [set of intrinsics](#intrinsics) (to sign/authenticate pointers)"
msgstr ""

#: ../../../PointerAuth.md:16
msgid ""
"a [call operand bundle](#operand-bundle) (to authenticate called pointers)"
msgstr ""

#: ../../../PointerAuth.md:18
msgid ""
"The current implementation leverages the [Armv8.3-A PAuth/Pointer "
"Authentication Code](#armv8-3-a-pauth-pointer-authentication-code) "
"instructions in the [AArch64 backend](#aarch64-support). This support is "
"used to implement the Darwin arm64e ABI, as well as the [PAuth ABI Extension "
"to ELF](https://github.com/ARM-software/abi-aa/blob/main/pauthabielf64/"
"pauthabielf64.rst)."
msgstr ""

#: ../../../PointerAuth.md:25
msgid "LLVM IR Representation"
msgstr ""

#: ../../../PointerAuth.md:27
msgid "Intrinsics"
msgstr ""

#: ../../../PointerAuth.md:29
msgid ""
"These intrinsics are provided by LLVM to expose pointer authentication "
"operations."
msgstr ""

#: ../../../PointerAuth.md:33
msgid "'`llvm.ptrauth.sign`'"
msgstr ""

#: ../../../PointerAuth.md:35 ../../../PointerAuth.md:67
#: ../../../PointerAuth.md:95 ../../../PointerAuth.md:135
#: ../../../PointerAuth.md:170 ../../../PointerAuth.md:201
msgid "Syntax:"
msgstr ""

#: ../../../PointerAuth.md:41 ../../../PointerAuth.md:73
#: ../../../PointerAuth.md:101 ../../../PointerAuth.md:143
#: ../../../PointerAuth.md:176 ../../../PointerAuth.md:207
msgid "Overview:"
msgstr ""

#: ../../../PointerAuth.md:43
msgid "The '`llvm.ptrauth.sign`' intrinsic signs a raw pointer."
msgstr ""

#: ../../../PointerAuth.md:46 ../../../PointerAuth.md:77
#: ../../../PointerAuth.md:107 ../../../PointerAuth.md:148
#: ../../../PointerAuth.md:181 ../../../PointerAuth.md:212
msgid "Arguments:"
msgstr ""

#: ../../../PointerAuth.md:48
msgid ""
"The `value` argument is the raw pointer value to be signed. The `key` "
"argument is the identifier of the key to be used to generate the signed "
"value. The `discriminator` argument is the additional diversity data to be "
"used as a discriminator (an integer, an address, or a blend of the two)."
msgstr ""

#: ../../../PointerAuth.md:54 ../../../PointerAuth.md:85
#: ../../../PointerAuth.md:113 ../../../PointerAuth.md:160
#: ../../../PointerAuth.md:187 ../../../PointerAuth.md:218
msgid "Semantics:"
msgstr ""

#: ../../../PointerAuth.md:56
msgid ""
"The '`llvm.ptrauth.sign`' intrinsic implements the `sign`_ operation. It "
"returns a signed value."
msgstr ""

#: ../../../PointerAuth.md:59
msgid "If `value` is already a signed value, the behavior is undefined."
msgstr ""

#: ../../../PointerAuth.md:61
msgid ""
"If `value` is not a pointer value for which `key` is appropriate, the "
"behavior is undefined."
msgstr ""

#: ../../../PointerAuth.md:65
msgid "'`llvm.ptrauth.auth`'"
msgstr ""

#: ../../../PointerAuth.md:75
msgid "The '`llvm.ptrauth.auth`' intrinsic authenticates a signed pointer."
msgstr ""

#: ../../../PointerAuth.md:79
msgid ""
"The `value` argument is the signed pointer value to be authenticated. The "
"`key` argument is the identifier of the key that was used to generate the "
"signed value. The `discriminator` argument is the additional diversity data "
"to be used as a discriminator."
msgstr ""

#: ../../../PointerAuth.md:87
msgid ""
"The '`llvm.ptrauth.auth`' intrinsic implements the `auth`_ operation. It "
"returns a raw pointer value. If `value` does not have a correct signature "
"for `key` and `discriminator`, the intrinsic traps in a target-specific way."
msgstr ""

#: ../../../PointerAuth.md:93
msgid "'`llvm.ptrauth.strip`'"
msgstr ""

#: ../../../PointerAuth.md:103
msgid ""
"The '`llvm.ptrauth.strip`' intrinsic strips the embedded signature out of a "
"possibly-signed pointer."
msgstr ""

#: ../../../PointerAuth.md:109
msgid ""
"The `value` argument is the signed pointer value to be stripped. The `key` "
"argument is the identifier of the key that was used to generate the signed "
"value."
msgstr ""

#: ../../../PointerAuth.md:115
msgid ""
"The '`llvm.ptrauth.strip`' intrinsic implements the `strip`_ operation. It "
"returns a raw pointer value.  It does **not** check that the signature is "
"valid."
msgstr ""

#: ../../../PointerAuth.md:119
msgid ""
"`key` should identify a key that is appropriate for `value`, as defined by "
"the target-specific [keys](#keys))."
msgstr ""

#: ../../../PointerAuth.md:122
msgid ""
"If `value` is a raw pointer value, it is returned as-is (provided the `key` "
"is appropriate for the pointer)."
msgstr ""

#: ../../../PointerAuth.md:125
msgid ""
"If `value` is not a pointer value for which `key` is appropriate, the "
"behavior is target-specific."
msgstr ""

#: ../../../PointerAuth.md:128
msgid ""
"If `value` is a signed pointer value, but `key` does not identify the same "
"key that was used to generate `value`, the behavior is target-specific."
msgstr ""

#: ../../../PointerAuth.md:133
msgid "'`llvm.ptrauth.resign`'"
msgstr ""

#: ../../../PointerAuth.md:145
msgid ""
"The '`llvm.ptrauth.resign`' intrinsic re-signs a signed pointer using a "
"different key and diversity data."
msgstr ""

#: ../../../PointerAuth.md:150
msgid ""
"The `value` argument is the signed pointer value to be authenticated. The "
"`old key` argument is the identifier of the key that was used to generate "
"the signed value. The `old discriminator` argument is the additional "
"diversity data to be used as a discriminator in the auth operation. The `new "
"key` argument is the identifier of the key to use to generate the resigned "
"value. The `new discriminator` argument is the additional diversity data to "
"be used as a discriminator in the sign operation."
msgstr ""

#: ../../../PointerAuth.md:162
msgid ""
"The '`llvm.ptrauth.resign`' intrinsic performs a combined `auth`_ and "
"`sign`_ operation, without exposing the intermediate raw pointer. It returns "
"a signed pointer value. If `value` does not have a correct signature for "
"`old key` and `old discriminator`, the intrinsic traps in a target-specific "
"way."
msgstr ""

#: ../../../PointerAuth.md:168
msgid "'`llvm.ptrauth.sign_generic`'"
msgstr ""

#: ../../../PointerAuth.md:178
msgid ""
"The '`llvm.ptrauth.sign_generic`' intrinsic computes a generic signature of "
"arbitrary data."
msgstr ""

#: ../../../PointerAuth.md:183
msgid ""
"The `value` argument is the arbitrary data value to be signed. The "
"`discriminator` argument is the additional diversity data to be used as a "
"discriminator."
msgstr ""

#: ../../../PointerAuth.md:189
msgid ""
"The '`llvm.ptrauth.sign_generic`' intrinsic computes the signature of a "
"given combination of value and additional diversity data."
msgstr ""

#: ../../../PointerAuth.md:192
msgid ""
"It returns a full signature value (as opposed to a signed pointer value, "
"with an embedded partial signature)."
msgstr ""

#: ../../../PointerAuth.md:195
msgid ""
"As opposed to [`llvm.ptrauth.sign`](#llvm-ptrauth-sign), it does not "
"interpret `value` as a pointer value.  Instead, it is an arbitrary data "
"value."
msgstr ""

#: ../../../PointerAuth.md:199
msgid "'`llvm.ptrauth.blend`'"
msgstr ""

#: ../../../PointerAuth.md:209
msgid ""
"The '`llvm.ptrauth.blend`' intrinsic blends a pointer address discriminator "
"with a small integer discriminator to produce a new \"blended\" "
"discriminator."
msgstr ""

#: ../../../PointerAuth.md:214
msgid ""
"The `address discriminator` argument is a pointer value. The `integer "
"discriminator` argument is a small integer, as specified by the target."
msgstr ""

#: ../../../PointerAuth.md:220
msgid ""
"The '`llvm.ptrauth.blend`' intrinsic combines a small integer discriminator "
"with a pointer address discriminator, in a way that is specified by the "
"target implementation."
msgstr ""

#: ../../../PointerAuth.md:225
msgid "Operand Bundle"
msgstr ""

#: ../../../PointerAuth.md:227
msgid ""
"Function pointers used as indirect call targets can be signed when "
"materialized, and authenticated before calls.  This can be accomplished with "
"the [`llvm.ptrauth.auth`](#llvm-ptrauth-auth) intrinsic, feeding its result "
"to an indirect call."
msgstr ""

#: ../../../PointerAuth.md:232
msgid ""
"However, that exposes the intermediate, unauthenticated pointer, e.g., if it "
"gets spilled to the stack.  An attacker can then overwrite the pointer in "
"memory, negating the security benefit provided by pointer authentication. To "
"prevent that, the `ptrauth` operand bundle may be used: it guarantees that "
"the intermediate call target is kept in a register and never stored to "
"memory. This hardening benefit is similar to that provided by [`llvm.ptrauth."
"resign`](#llvm-ptrauth-resign))."
msgstr ""

#: ../../../PointerAuth.md:240
msgid "Concretely:"
msgstr ""

#: ../../../PointerAuth.md:249
msgid "is functionally equivalent to:"
msgstr ""

#: ../../../PointerAuth.md:261
msgid ""
"but with the added guarantee that `%fp_i`, `%fp_auth`, and `%fp_auth_p` are "
"not stored to (and reloaded from) memory."
msgstr ""

#: ../../../PointerAuth.md:265
msgid "AArch64 Support"
msgstr ""

#: ../../../PointerAuth.md:267
msgid ""
"AArch64 is currently the only architecture with full support of the pointer "
"authentication primitives, based on Armv8.3-A instructions."
msgstr ""

#: ../../../PointerAuth.md:270
msgid "Armv8.3-A PAuth Pointer Authentication Code"
msgstr ""

#: ../../../PointerAuth.md:272
msgid ""
"The Armv8.3-A architecture extension defines the PAuth feature, which "
"provides support for instructions that manipulate Pointer Authentication "
"Codes (PAC)."
msgstr ""

#: ../../../PointerAuth.md:275
msgid "Keys"
msgstr ""

#: ../../../PointerAuth.md:277
msgid "5 keys are supported by the PAuth feature."
msgstr ""

#: ../../../PointerAuth.md:279
msgid ""
"Of those, 4 keys are interchangeably usable to specify the key used in IR "
"constructs:"
msgstr ""

#: ../../../PointerAuth.md:281
msgid "`ASIA`/`ASIB` are instruction keys (encoded as respectively 0 and 1)."
msgstr ""

#: ../../../PointerAuth.md:282
msgid "`ASDA`/`ASDB` are data keys (encoded as respectively 2 and 3)."
msgstr ""

#: ../../../PointerAuth.md:284
msgid ""
"`ASGA` is a special key that cannot be explicitly specified, and is only "
"ever used implicitly, to implement the [`llvm.ptrauth.sign_generic`](#llvm-"
"ptrauth-sign-generic) intrinsic."
msgstr ""

#: ../../../PointerAuth.md:288
msgid "Instructions"
msgstr ""

#: ../../../PointerAuth.md:290
msgid ""
"The IR [Intrinsics](#intrinsics) described above map onto these instructions "
"as such:"
msgstr ""

#: ../../../PointerAuth.md:292
msgid "[`llvm.ptrauth.sign`](#llvm-ptrauth-sign): `PAC{I,D}{A,B}{Z,SP,}`"
msgstr ""

#: ../../../PointerAuth.md:293
msgid "[`llvm.ptrauth.auth`](#llvm-ptrauth-auth): `AUT{I,D}{A,B}{Z,SP,}`"
msgstr ""

#: ../../../PointerAuth.md:294
msgid "[`llvm.ptrauth.strip`](#llvm-ptrauth-strip): `XPAC{I,D}`"
msgstr ""

#: ../../../PointerAuth.md:295
msgid ""
"[`llvm.ptrauth.blend`](#llvm-ptrauth-blend): The semantics of the blend "
"operation are specified by the ABI.  In both the ELF PAuth ABI Extension and "
"arm64e, it's a `MOVK` into the high 16 bits.  Consequently, this limits the "
"width of the integer discriminator used in blends to 16 bits."
msgstr ""

#: ../../../PointerAuth.md:299
msgid "[`llvm.ptrauth.sign_generic`](#llvm-ptrauth-sign-generic): `PACGA`"
msgstr ""

#: ../../../PointerAuth.md:300
msgid ""
"[`llvm.ptrauth.resign`](#llvm-ptrauth-resign): `AUT*+PAC*`.  These are "
"represented as a single pseudo-instruction in the backend to guarantee that "
"the intermediate raw pointer value is not spilled and attackable."
msgstr ""

#: ../../../PointerAuth.md:304
msgid "Assembly Representation"
msgstr ""

#: ../../../PointerAuth.md:306
msgid ""
"At the assembly level, authenticated relocations are represented using the "
"`@AUTH` modifier:"
msgstr ""

#: ../../../PointerAuth.md:313
msgid "where:"
msgstr ""

#: ../../../PointerAuth.md:314
msgid "`key` is the Armv8.3-A key identifier (`ia`, `ib`, `da`, `db`)"
msgstr ""

#: ../../../PointerAuth.md:315
msgid "`discriminator` is the 16-bit unsigned discriminator value"
msgstr ""

#: ../../../PointerAuth.md:316
msgid ""
"`addr` signifies that the authenticated pointer is address-discriminated "
"(that is, that the relocation's target address is to be blended into the "
"`discriminator` before it is used in the sign operation."
msgstr ""

#: ../../../PointerAuth.md:320
msgid "For example:"
msgstr ""

#: ../../../PointerAuth.md:328
msgid "ELF Object File Representation"
msgstr ""

#: ../../../PointerAuth.md:330
msgid ""
"At the object file level, authenticated relocations are represented using "
"the `R_AARCH64_AUTH_ABS64` relocation kind (with value `0xE100`)."
msgstr ""

#: ../../../PointerAuth.md:333
msgid ""
"The signing schema is encoded in the place of relocation to be applied as "
"follows:"
msgstr ""
