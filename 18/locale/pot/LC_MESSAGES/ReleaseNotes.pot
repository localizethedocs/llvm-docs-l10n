# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 18\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../ReleaseNotes.rst:3
msgid "LLVM |release| Release Notes"
msgstr ""

#: ../../../ReleaseNotes.rst:11
msgid ""
"These are in-progress notes for the upcoming LLVM |version| release. Release "
"notes for previous releases can be found on `the Download Page <https://"
"releases.llvm.org/download.html>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:17
msgid "Introduction"
msgstr ""

#: ../../../ReleaseNotes.rst:19
msgid ""
"This document contains the release notes for the LLVM Compiler "
"Infrastructure, release |release|.  Here we describe the status of LLVM, "
"including major improvements from the previous release, improvements in "
"various subprojects of LLVM, and some of the current users of the code.  All "
"LLVM releases may be downloaded from the `LLVM releases web site <https://"
"llvm.org/releases/>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:25
msgid ""
"For more information about LLVM, including information about the latest "
"release, please check out the `main LLVM web site <https://llvm.org/>`_.  If "
"you have questions or comments, the `Discourse forums <https://discourse."
"llvm.org>`_ is a good place to ask them."
msgstr ""

#: ../../../ReleaseNotes.rst:31
msgid ""
"Note that if you are reading this file from a Git checkout or the main LLVM "
"web page, this document applies to the *next* release, not the current one.  "
"To see the release notes for a specific release, please see the `releases "
"page <https://llvm.org/releases/>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:37
msgid "Non-comprehensive list of changes in this release"
msgstr ""

#: ../../../ReleaseNotes.rst:45
msgid "..."
msgstr ""

#: ../../../ReleaseNotes.rst:48
msgid "Update on required toolchains to build LLVM"
msgstr ""

#: ../../../ReleaseNotes.rst:51
msgid "Changes to the LLVM IR"
msgstr ""

#: ../../../ReleaseNotes.rst:53
msgid ""
"The `llvm.stacksave` and `llvm.stackrestore` intrinsics now use an "
"overloaded pointer type to support non-0 address spaces."
msgstr ""

#: ../../../ReleaseNotes.rst:55
msgid ""
"The constant expression variants of the following instructions have been "
"removed:"
msgstr ""

#: ../../../ReleaseNotes.rst:58
msgid "``and``"
msgstr ""

#: ../../../ReleaseNotes.rst:59
msgid "``or``"
msgstr ""

#: ../../../ReleaseNotes.rst:60
msgid "``lshr``"
msgstr ""

#: ../../../ReleaseNotes.rst:61
msgid "``ashr``"
msgstr ""

#: ../../../ReleaseNotes.rst:62
msgid "``zext``"
msgstr ""

#: ../../../ReleaseNotes.rst:63
msgid "``sext``"
msgstr ""

#: ../../../ReleaseNotes.rst:64
msgid "``fptrunc``"
msgstr ""

#: ../../../ReleaseNotes.rst:65
msgid "``fpext``"
msgstr ""

#: ../../../ReleaseNotes.rst:66
msgid "``fptoui``"
msgstr ""

#: ../../../ReleaseNotes.rst:67
msgid "``fptosi``"
msgstr ""

#: ../../../ReleaseNotes.rst:68
msgid "``uitofp``"
msgstr ""

#: ../../../ReleaseNotes.rst:69
msgid "``sitofp``"
msgstr ""

#: ../../../ReleaseNotes.rst:71
msgid "Added `llvm.exp10` intrinsic."
msgstr ""

#: ../../../ReleaseNotes.rst:73
msgid ""
"Added a ``code_model`` attribute for the `global variable <LangRef."
"html#global-variables>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:76
msgid "Changes to LLVM infrastructure"
msgstr ""

#: ../../../ReleaseNotes.rst:78
msgid ""
"Minimum Clang version to build LLVM in C++20 configuration has been updated "
"to clang-17.0.6."
msgstr ""

#: ../../../ReleaseNotes.rst:81
msgid "Changes to building LLVM"
msgstr ""

#: ../../../ReleaseNotes.rst:84
msgid "Changes to TableGen"
msgstr ""

#: ../../../ReleaseNotes.rst:86
msgid "Added constructs for debugging TableGen files:"
msgstr ""

#: ../../../ReleaseNotes.rst:88
msgid "`dump` keyword to dump messages to standard error, see"
msgstr ""

#: ../../../ReleaseNotes.rst:89
msgid "https://github.com/llvm/llvm-project/pull/68793."
msgstr ""

#: ../../../ReleaseNotes.rst:91
msgid "`!repr` bang operator to inspect the content of values, see"
msgstr ""

#: ../../../ReleaseNotes.rst:91
msgid "https://github.com/llvm/llvm-project/pull/68716."
msgstr ""

#: ../../../ReleaseNotes.rst:94
msgid "Changes to Interprocedural Optimizations"
msgstr ""

#: ../../../ReleaseNotes.rst:97
msgid "Changes to the AArch64 Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:99
msgid "Added support for Cortex-A520, Cortex-A720 and Cortex-X4 CPUs."
msgstr ""

#: ../../../ReleaseNotes.rst:101
msgid ""
"Neoverse-N2 was incorrectly marked as an Armv8.5a core. This has been "
"changed to an Armv9.0a core. However, crypto options are not enabled by "
"default for Armv9 cores, so `-mcpu=neoverse-n2+crypto` is now required to "
"enable crypto for this core. As far as the compiler is concerned, Armv9.0a "
"has the same features enabled as Armv8.5a, with the exception of crypto."
msgstr ""

#: ../../../ReleaseNotes.rst:108
msgid ""
"Assembler/disassembler support has been added for 2023 architecture "
"extensions."
msgstr ""

#: ../../../ReleaseNotes.rst:111
msgid ""
"Support has been added for Stack Clash Protection. During function frame "
"creation and dynamic stack allocations, the compiler will issue memory "
"accesses at reguilar intervals so that a guard area at the top of the stack "
"can't be skipped over."
msgstr ""

#: ../../../ReleaseNotes.rst:117
msgid "Changes to the AMDGPU Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:119
msgid ""
"`llvm.sqrt.f32` is now lowered correctly. Use `llvm.amdgcn.sqrt.f32` for raw "
"instruction access."
msgstr ""

#: ../../../ReleaseNotes.rst:122
msgid "Implemented `llvm.stacksave` and `llvm.stackrestore` intrinsics."
msgstr ""

#: ../../../ReleaseNotes.rst:124
msgid "Implemented :ref:`llvm.get.rounding <int_get_rounding>`"
msgstr ""

#: ../../../ReleaseNotes.rst:126
msgid ""
"The default :ref:`AMDHSA code object version <amdgpu-amdhsa-code-object-"
"metadata-v5>` is now 5."
msgstr ""

#: ../../../ReleaseNotes.rst:129
msgid "Changes to the ARM Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:131
msgid "Added support for Cortex-M52 CPUs."
msgstr ""

#: ../../../ReleaseNotes.rst:132
msgid "Added execute-only support for Armv6-M."
msgstr ""

#: ../../../ReleaseNotes.rst:135
msgid "Changes to the AVR Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:138
msgid "Changes to the DirectX Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:141
msgid "Changes to the Hexagon Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:144
msgid "Changes to the LoongArch Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:146
msgid ""
"Added intrinsics support for all LSX (128-bits SIMD) and LASX (256-bits "
"SIMD) instructions."
msgstr ""

#: ../../../ReleaseNotes.rst:148
msgid ""
"Added definition and intrinsics support for new instructions that were "
"introduced in LoongArch Reference Manual V1.10."
msgstr ""

#: ../../../ReleaseNotes.rst:150
msgid ""
"Emitted adjacent ``pcaddu18i+jirl`` instrunction sequence with one "
"relocation ``R_LARCH_CALL36`` instead of ``pcalau12i+jirl`` with two "
"relocations ``R_LARCH_PCALA_{HI20,LO12}`` for function call in medium code "
"model."
msgstr ""

#: ../../../ReleaseNotes.rst:153
msgid ""
"The code model of global variables can now be overridden by means of the "
"newly added LLVM IR attribute, ``code_model``."
msgstr ""

#: ../../../ReleaseNotes.rst:155
msgid "Added support for the ``llvm.is.fpclass`` intrinsic."
msgstr ""

#: ../../../ReleaseNotes.rst:156
msgid ""
"``mulodi4`` and ``muloti4`` libcalls were disabled due to absence in libgcc."
msgstr ""

#: ../../../ReleaseNotes.rst:157
msgid "Added initial support for auto vectorization."
msgstr ""

#: ../../../ReleaseNotes.rst:158
msgid "Added initial support for linker relaxation."
msgstr ""

#: ../../../ReleaseNotes.rst:159
msgid "Assorted codegen improvements."
msgstr ""

#: ../../../ReleaseNotes.rst:162
msgid "Changes to the MIPS Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:165
msgid "Changes to the PowerPC Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:167
msgid "LLJIT's JIT linker now defaults to JITLink on 64-bit ELFv2 targets."
msgstr ""

#: ../../../ReleaseNotes.rst:168
msgid "Initial-exec TLS model is supported on AIX."
msgstr ""

#: ../../../ReleaseNotes.rst:169
msgid "Implemented new resource based scheduling model of POWER7 and POWER8."
msgstr ""

#: ../../../ReleaseNotes.rst:170
msgid "``frexp`` libcall now references correct symbol name for ``fp128``."
msgstr ""

#: ../../../ReleaseNotes.rst:171
msgid ""
"Optimized materialization of 64-bit immediates, code generation of "
"``vec_promote`` and atomics."
msgstr ""

#: ../../../ReleaseNotes.rst:173
msgid ""
"Global constant strings are pooled in the TOC under one entry to reduce the "
"number of entries in the TOC."
msgstr ""

#: ../../../ReleaseNotes.rst:175
msgid "Added a number of missing Power10 extended mnemonics."
msgstr ""

#: ../../../ReleaseNotes.rst:176
msgid "Added the SCV instruction."
msgstr ""

#: ../../../ReleaseNotes.rst:177
msgid "Fixed register class for the paddi instruction."
msgstr ""

#: ../../../ReleaseNotes.rst:178
msgid "Optimize VPERM and fix code order for swapping vector operands on LE."
msgstr ""

#: ../../../ReleaseNotes.rst:179
msgid "Added various bug fixes and code gen improvements."
msgstr ""

#: ../../../ReleaseNotes.rst:181
msgid "AIX Support/improvements:"
msgstr ""

#: ../../../ReleaseNotes.rst:183
msgid ""
"Support for a non-TOC-based access sequence for the local-exec TLS model "
"(called small local-exec)."
msgstr ""

#: ../../../ReleaseNotes.rst:184
msgid "XCOFF toc-data peephole optimization and bug fixes."
msgstr ""

#: ../../../ReleaseNotes.rst:185
msgid ""
"Move less often used __ehinfo TOC entries to the end of the TOC section."
msgstr ""

#: ../../../ReleaseNotes.rst:186
msgid ""
"Fixed problems when the AIX libunwind unwinds starting from a signal handler "
"and the function that raised the signal happens to be a leaf function that "
"shares the stack frame with its caller or a leaf function that does not "
"store the stack frame backchain."
msgstr ""

#: ../../../ReleaseNotes.rst:192
msgid "Changes to the RISC-V Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:194
msgid ""
"The Zfa extension version was upgraded to 1.0 and is no longer experimental."
msgstr ""

#: ../../../ReleaseNotes.rst:195
msgid ""
"Zihintntl extension version was upgraded to 1.0 and is no longer "
"experimental."
msgstr ""

#: ../../../ReleaseNotes.rst:196
msgid ""
"Intrinsics were added for Zk*, Zbb, and Zbc. See https://github.com/riscv-"
"non-isa/riscv-c-api-doc/blob/master/riscv-c-api.md#scalar-bit-manipulation-"
"extension-intrinsics"
msgstr ""

#: ../../../ReleaseNotes.rst:197
msgid ""
"Default ABI with F but without D was changed to ilp32f for RV32 and to lp64f "
"for RV64."
msgstr ""

#: ../../../ReleaseNotes.rst:198
msgid ""
"The Zvbb, Zvbc, Zvkb, Zvkg, Zvkn, Zvknc, Zvkned, Zvkng, Zvknha, Zvknhb, "
"Zvks, Zvksc, Zvksed, Zvksg, Zvksh, and Zvkt extension version was upgraded "
"to 1.0 and is no longer experimental.  However, the C intrinsics for these "
"extensions are still experimental.  To use the C intrinsics for these "
"extensions, ``-menable-experimental-extensions`` needs to be passed to Clang."
msgstr ""

#: ../../../ReleaseNotes.rst:203
msgid ""
"XSfcie extension and SiFive CSRs and instructions that were associated with "
"it have been removed. None of these CSRs and instructions were part of "
"\"SiFive Custom Instruction Extension\" as SiFive defines it. The LLVM "
"project needs to work with SiFive to define and document real extension "
"names for individual CSRs and instructions."
msgstr ""

#: ../../../ReleaseNotes.rst:208
msgid "``-mcpu=sifive-p450`` was added."
msgstr ""

#: ../../../ReleaseNotes.rst:209
msgid "CodeGen of RV32E/RV64E was supported experimentally."
msgstr ""

#: ../../../ReleaseNotes.rst:210
msgid "CodeGen of ilp32e/lp64e was supported experimentally."
msgstr ""

#: ../../../ReleaseNotes.rst:211
msgid ""
"Support was added for the Ziccif, Ziccrse, Ziccamoa, Zicclsm, Za64rs, "
"Za128rs and Zic64b extensions which were introduced as a part of the RISC-V "
"Profiles specification."
msgstr ""

#: ../../../ReleaseNotes.rst:214
msgid "The Smepmp 1.0 extension is now supported."
msgstr ""

#: ../../../ReleaseNotes.rst:215
msgid "``-mcpu=sifive-p670`` was added."
msgstr ""

#: ../../../ReleaseNotes.rst:216
msgid "Support for the Zicond extension is no longer experimental."
msgstr ""

#: ../../../ReleaseNotes.rst:219
msgid "Changes to the SystemZ Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:221
msgid "Properly support 16 byte atomic int/fp types and ops."
msgstr ""

#: ../../../ReleaseNotes.rst:222
msgid "Support i128 as legal type in VRs."
msgstr ""

#: ../../../ReleaseNotes.rst:223
msgid "Add an i128 cost model."
msgstr ""

#: ../../../ReleaseNotes.rst:224
msgid ""
"Support building individual functions with backchain using the "
"__attribute__((target(\"backchain\"))) syntax."
msgstr ""

#: ../../../ReleaseNotes.rst:226
msgid "Add exception handling for XPLINK."
msgstr ""

#: ../../../ReleaseNotes.rst:227
msgid "Add support for llvm-objcopy."
msgstr ""

#: ../../../ReleaseNotes.rst:230
msgid "Changes to the WebAssembly Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:233
msgid "Changes to the Windows Target"
msgstr ""

#: ../../../ReleaseNotes.rst:235
msgid ""
"The LLVM filesystem class ``UniqueID`` and function ``equivalent()`` no "
"longer determine that distinct different path names for the same hard linked "
"file actually are equal. This is an intentional tradeoff in a bug fix, where "
"the bug used to cause distinct files to be considered equivalent on some "
"file systems. This change fixed the issues https://github.com/llvm/llvm-"
"project/issues/61401 and https://github.com/llvm/llvm-project/issues/22079."
msgstr ""

#: ../../../ReleaseNotes.rst:244
msgid "Changes to the X86 Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:246
msgid ""
"The ``i128`` type now matches GCC and clang's ``__int128`` type. This mainly "
"benefits external projects such as Rust which aim to be binary compatible "
"with C, but also fixes code generation where LLVM already assumed that the "
"type matched and called into libgcc helper functions."
msgstr ""

#: ../../../ReleaseNotes.rst:250
msgid "Support ISA of ``USER_MSR``."
msgstr ""

#: ../../../ReleaseNotes.rst:251
msgid "Support ISA of ``AVX10.1-256`` and ``AVX10.1-512``."
msgstr ""

#: ../../../ReleaseNotes.rst:252
msgid "``-mcpu=pantherlake`` and ``-mcpu=clearwaterforest`` are now supported."
msgstr ""

#: ../../../ReleaseNotes.rst:253
msgid "``-mapxf`` is supported."
msgstr ""

#: ../../../ReleaseNotes.rst:254
msgid ""
"Marking global variables with ``code_model = \"small\"/\"large\"`` in the IR "
"now overrides the global code model to allow 32-bit relocations or require "
"64-bit relocations to the global variable."
msgstr ""

#: ../../../ReleaseNotes.rst:257
msgid ""
"The medium code model's code generation was audited to be more similar to "
"the small code model where possible."
msgstr ""

#: ../../../ReleaseNotes.rst:261
msgid "Changes to the OCaml bindings"
msgstr ""

#: ../../../ReleaseNotes.rst:264
msgid "Changes to the Python bindings"
msgstr ""

#: ../../../ReleaseNotes.rst:266
msgid "The python bindings have been removed."
msgstr ""

#: ../../../ReleaseNotes.rst:270
msgid "Changes to the C API"
msgstr ""

#: ../../../ReleaseNotes.rst:272
msgid ""
"Added ``LLVMGetTailCallKind`` and ``LLVMSetTailCallKind`` to allow getting "
"and setting ``tail``, ``musttail``, and ``notail`` attributes on call "
"instructions."
msgstr ""

#: ../../../ReleaseNotes.rst:275
msgid ""
"The following functions for creating constant expressions have been removed, "
"because the underlying constant expressions are no longer supported. "
"Instead, an instruction should be created using the ``LLVMBuildXYZ`` APIs, "
"which will constant fold the operands if possible and create an instruction "
"otherwise:"
msgstr ""

#: ../../../ReleaseNotes.rst:280
msgid "``LLVMConstAnd``"
msgstr ""

#: ../../../ReleaseNotes.rst:281
msgid "``LLVMConstOr``"
msgstr ""

#: ../../../ReleaseNotes.rst:282
msgid "``LLVMConstLShr``"
msgstr ""

#: ../../../ReleaseNotes.rst:283
msgid "``LLVMConstAShr``"
msgstr ""

#: ../../../ReleaseNotes.rst:284
msgid "``LLVMConstZExt``"
msgstr ""

#: ../../../ReleaseNotes.rst:285
msgid "``LLVMConstSExt``"
msgstr ""

#: ../../../ReleaseNotes.rst:286
msgid "``LLVMConstZExtOrBitCast``"
msgstr ""

#: ../../../ReleaseNotes.rst:287
msgid "``LLVMConstSExtOrBitCast``"
msgstr ""

#: ../../../ReleaseNotes.rst:288
msgid "``LLVMConstIntCast``"
msgstr ""

#: ../../../ReleaseNotes.rst:289
msgid "``LLVMConstFPTrunc``"
msgstr ""

#: ../../../ReleaseNotes.rst:290
msgid "``LLVMConstFPExt``"
msgstr ""

#: ../../../ReleaseNotes.rst:291
msgid "``LLVMConstFPToUI``"
msgstr ""

#: ../../../ReleaseNotes.rst:292
msgid "``LLVMConstFPToSI``"
msgstr ""

#: ../../../ReleaseNotes.rst:293
msgid "``LLVMConstUIToFP``"
msgstr ""

#: ../../../ReleaseNotes.rst:294
msgid "``LLVMConstSIToFP``"
msgstr ""

#: ../../../ReleaseNotes.rst:295
msgid "``LLVMConstFPCast``"
msgstr ""

#: ../../../ReleaseNotes.rst:297
msgid ""
"Added ``LLVMCreateTargetMachineWithOptions``, along with helper functions "
"for an opaque option structure, as an alternative to "
"``LLVMCreateTargetMachine``. The option structure exposes an additional "
"setting (i.e., the target ABI) and provides default values for unspecified "
"settings."
msgstr ""

#: ../../../ReleaseNotes.rst:302
msgid ""
"Added ``LLVMGetNNeg`` and ``LLVMSetNNeg`` for getting/setting the new nneg "
"flag on zext instructions, and ``LLVMGetIsDisjoint`` and "
"``LLVMSetIsDisjoint`` for getting/setting the new disjoint flag on or "
"instructions."
msgstr ""

#: ../../../ReleaseNotes.rst:306
msgid ""
"Added the following functions for manipulating operand bundles, as well as "
"building ``call`` and ``invoke`` instructions that use operand bundles:"
msgstr ""

#: ../../../ReleaseNotes.rst:309
msgid "``LLVMBuildCallWithOperandBundles``"
msgstr ""

#: ../../../ReleaseNotes.rst:310
msgid "``LLVMBuildInvokeWithOperandBundles``"
msgstr ""

#: ../../../ReleaseNotes.rst:311
msgid "``LLVMCreateOperandBundle``"
msgstr ""

#: ../../../ReleaseNotes.rst:312
msgid "``LLVMDisposeOperandBundle``"
msgstr ""

#: ../../../ReleaseNotes.rst:313
msgid "``LLVMGetNumOperandBundles``"
msgstr ""

#: ../../../ReleaseNotes.rst:314
msgid "``LLVMGetOperandBundleAtIndex``"
msgstr ""

#: ../../../ReleaseNotes.rst:315
msgid "``LLVMGetNumOperandBundleArgs``"
msgstr ""

#: ../../../ReleaseNotes.rst:316
msgid "``LLVMGetOperandBundleArgAtIndex``"
msgstr ""

#: ../../../ReleaseNotes.rst:317
msgid "``LLVMGetOperandBundleTag``"
msgstr ""

#: ../../../ReleaseNotes.rst:319
msgid ""
"Added ``LLVMGetFastMathFlags`` and ``LLVMSetFastMathFlags`` for getting/"
"setting the fast-math flags of an instruction, as well as "
"``LLVMCanValueUseFastMathFlags`` for checking if an instruction can use such "
"flags"
msgstr ""

#: ../../../ReleaseNotes.rst:324
msgid "Changes to the CodeGen infrastructure"
msgstr ""

#: ../../../ReleaseNotes.rst:326
msgid ""
"A new debug type ``isel-dump`` is added to show only the SelectionDAG dumps "
"after each ISel phase (i.e. ``-debug-only=isel-dump``). This new debug type "
"can be filtered by function names using ``-filter-print-funcs=<function "
"names>``, the same flag used to filter IR dumps after each Pass. Note that "
"the existing ``-debug-only=isel`` will take precedence over the new behavior "
"and print SelectionDAG dumps of every single function regardless of ``-"
"filter-print-funcs``'s values."
msgstr ""

#: ../../../ReleaseNotes.rst:334
msgid ""
"``PrologEpilogInserter`` no longer supports register scavenging during "
"forwards frame index elimination. Targets should use backwards frame index "
"elimination instead."
msgstr ""

#: ../../../ReleaseNotes.rst:338
msgid ""
"``RegScavenger`` no longer supports forwards register scavenging. Clients "
"should use backwards register scavenging instead, which is preferred because "
"it does not depend on accurate kill flags."
msgstr ""

#: ../../../ReleaseNotes.rst:344
msgid "Changes to the Metadata Info"
msgstr ""

#: ../../../ReleaseNotes.rst:345
msgid "Added a new loop metadata `!{!\"llvm.loop.align\", i32 64}`"
msgstr ""

#: ../../../ReleaseNotes.rst:348
msgid "Changes to the Debug Info"
msgstr ""

#: ../../../ReleaseNotes.rst:351
msgid "Changes to the LLVM tools"
msgstr ""

#: ../../../ReleaseNotes.rst:353
msgid ""
"``llvm-symbolizer`` now treats invalid input as an address for which source "
"information is not found."
msgstr ""

#: ../../../ReleaseNotes.rst:355
msgid ""
"Fixed big-endian support in ``llvm-symbolizer``'s DWARF location parser."
msgstr ""

#: ../../../ReleaseNotes.rst:356
msgid ""
"``llvm-readelf`` now supports ``--extra-sym-info`` (``-X``) to display extra "
"information (section name) when showing symbols."
msgstr ""

#: ../../../ReleaseNotes.rst:358
msgid ""
"``llvm-readobj``/``llvm-readelf`` now supports ``--decompress``/``-z`` with "
"string and hex dump for ELF object files."
msgstr ""

#: ../../../ReleaseNotes.rst:361
msgid ""
"``llvm-symbolizer`` and ``llvm-addr2line`` now support addresses specified "
"as symbol names."
msgstr ""

#: ../../../ReleaseNotes.rst:363
msgid ""
"``llvm-objcopy`` now supports ``--gap-fill`` and ``--pad-to`` options, for "
"ELF input and binary output files only."
msgstr ""

#: ../../../ReleaseNotes.rst:365
msgid "``llvm-objcopy`` now supports ``-O elf64-s390`` for SystemZ."
msgstr ""

#: ../../../ReleaseNotes.rst:367
msgid "Supported parsing XCOFF auxiliary symbols in ``obj2yaml``."
msgstr ""

#: ../../../ReleaseNotes.rst:369
msgid ""
"``llvm-ranlib`` now supports ``-X`` on AIX to specify the type of object "
"file ranlib should examine."
msgstr ""

#: ../../../ReleaseNotes.rst:372
msgid ""
"``llvm-cxxfilt`` now supports ``--no-params``/``-p`` to skip function "
"parameters."
msgstr ""

#: ../../../ReleaseNotes.rst:375
msgid ""
"``llvm-nm`` now supports ``--export-symbol`` to ignore the import symbol "
"file."
msgstr ""

#: ../../../ReleaseNotes.rst:376
msgid ""
"``llvm-nm`` now supports the ``--line-numbers`` (``-l``) option to use "
"debugging information to print symbols' filenames and line numbers."
msgstr ""

#: ../../../ReleaseNotes.rst:379
msgid ""
"``llvm-rc`` and ``llvm-windres`` now accept file path references in ``.rc`` "
"files concatenated from multiple string literals."
msgstr ""

#: ../../../ReleaseNotes.rst:382
msgid ""
"The ``llvm-windres`` option ``--preprocessor`` now resolves its argument in "
"the ``PATH`` environment variable as expected, and options passed with ``--"
"preprocessor-arg`` are placed before the input file as they should be."
msgstr ""

#: ../../../ReleaseNotes.rst:387
msgid ""
"The ``llvm-windres`` option ``--preprocessor`` has been updated with the "
"breaking behaviour change from GNU windres from binutils 2.36, where the "
"whole argument is considered as one path, not considered as a sequence of "
"tool name and parameters."
msgstr ""

#: ../../../ReleaseNotes.rst:393
msgid "Changes to LLDB"
msgstr ""

#: ../../../ReleaseNotes.rst:395
msgid ""
"``SBWatchpoint::GetHardwareIndex`` is deprecated and now returns -1 to "
"indicate the index is unavailable."
msgstr ""

#: ../../../ReleaseNotes.rst:397
msgid ""
"Methods in SBHostOS related to threads have had their implementations "
"removed. These methods will return a value indicating failure."
msgstr ""

#: ../../../ReleaseNotes.rst:399
msgid ""
"``SBType::FindDirectNestedType`` function is added. It's useful for "
"formatters to quickly find directly nested type when it's known where to "
"search for it, avoiding more expensive global search via ``SBTarget::"
"FindFirstType``."
msgstr ""

#: ../../../ReleaseNotes.rst:403
msgid ""
"``lldb-vscode`` was renamed to ``lldb-dap`` and and its installation "
"instructions have been updated to reflect this. The underlying functionality "
"remains unchanged."
msgstr ""

#: ../../../ReleaseNotes.rst:406
msgid ""
"The ``mte_ctrl`` register can now be read from AArch64 Linux core files."
msgstr ""

#: ../../../ReleaseNotes.rst:407
msgid ""
"LLDB on AArch64 Linux now supports debugging the Scalable Matrix Extension "
"(SME) and Scalable Matrix Extension 2 (SME2) for both live processes and "
"core files. For details refer to the `AArch64 Linux documentation <https://"
"lldb.llvm.org/use/aarch64-linux.html>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:411
msgid ""
"LLDB now supports symbol and binary acquisition automatically using the "
"DEBUFINFOD protocol. The standard mechanism of specifying DEBUFINOD servers "
"in the ``DEBUGINFOD_URLS`` environment variable is used by default. In "
"addition, users can specify servers to request symbols from using the LLDB "
"setting ``plugin.symbol-locator.debuginfod.server_urls``, override or adding "
"to the environment variable."
msgstr ""

#: ../../../ReleaseNotes.rst:419
msgid ""
"When running on AArch64 Linux, ``lldb-server`` now provides register field "
"information for the following registers: ``cpsr``, ``fpcr``, ``fpsr``, "
"``svcr`` and ``mte_ctrl``. ::"
msgstr ""

#: ../../../ReleaseNotes.rst:427
msgid ""
"This is only available when ``lldb`` is built with XML support. Where "
"possible the CPU's capabilities are used to decide which fields are present, "
"however this is not always possible or entirely accurate. If in doubt, refer "
"to the numerical value."
msgstr ""

#: ../../../ReleaseNotes.rst:432
msgid "On Windows, LLDB can now read the thread names."
msgstr ""

#: ../../../ReleaseNotes.rst:435
msgid "Changes to Sanitizers"
msgstr ""

#: ../../../ReleaseNotes.rst:436
msgid "HWASan now defaults to detecting use-after-scope bugs."
msgstr ""

#: ../../../ReleaseNotes.rst:438
msgid ""
"`SpecialCaseList <https://clang.llvm.org/docs/SanitizerSpecialCaseList."
"html#format>`_ used by sanitizer ignore lists (e.g. ``*_ignorelist.txt`` in "
"the Clang resource directory) now uses glob patterns instead of a variant of "
"POSIX Extended Regular Expression (where ``*`` is translated to ``.*``) by "
"default. Search for ``|`` to find patterns that may have different meanings "
"now, and replace ``a|b`` with ``{a,b}``."
msgstr ""

#: ../../../ReleaseNotes.rst:446
msgid "Changes to the Profile Runtime"
msgstr ""

#: ../../../ReleaseNotes.rst:448
msgid ""
"Public header ``profile/instr_prof_interface.h`` is added to declare four "
"API functions to fine tune profile collection."
msgstr ""

#: ../../../ReleaseNotes.rst:452
msgid "Other Changes"
msgstr ""

#: ../../../ReleaseNotes.rst:454
msgid ""
"The ``Flags`` field of ``llvm::opt::Option`` has been split into ``Flags`` "
"and ``Visibility`` to simplify option sharing between various drivers (such "
"as ``clang``, ``clang-cl``, or ``flang``) that rely on Clang's Options.td. "
"Overloads of ``llvm::opt::OptTable`` that use ``FlagsToInclude`` have been "
"deprecated. There is a script and instructions on how to resolve conflicts - "
"see https://reviews.llvm.org/D157150 and https://reviews.llvm.org/D157151 "
"for details."
msgstr ""

#: ../../../ReleaseNotes.rst:462
msgid ""
"On Linux, FreeBSD, and NetBSD, setting the environment variable "
"``LLVM_ENABLE_SYMBOLIZER_MARKUP`` causes tools to print stacktraces using :"
"doc:`Symbolizer Markup <SymbolizerMarkupFormat>`. This works even if the "
"tools have no embedded symbol information (i.e. are fully stripped); :doc:"
"`llvm-symbolizer <CommandGuide/llvm-symbolizer>` can symbolize the markup "
"afterwards using ``debuginfod``."
msgstr ""

#: ../../../ReleaseNotes.rst:470
msgid "External Open Source Projects Using LLVM 15"
msgstr ""

#: ../../../ReleaseNotes.rst:472
msgid "A project..."
msgstr ""

#: ../../../ReleaseNotes.rst:475
msgid "Additional Information"
msgstr ""

#: ../../../ReleaseNotes.rst:477
msgid ""
"A wide variety of additional information is available on the `LLVM web page "
"<https://llvm.org/>`_, in particular in the `documentation <https://llvm.org/"
"docs/>`_ section.  The web page also contains versions of the API "
"documentation which is up-to-date with the Git version of the source code.  "
"You can access versions of these documents specific to this release by going "
"into the ``llvm/docs/`` directory in the LLVM tree."
msgstr ""

#: ../../../ReleaseNotes.rst:484
msgid ""
"If you have any questions or comments about LLVM, please feel free to "
"contact us via the `Discourse forums <https://discourse.llvm.org>`_."
msgstr ""
