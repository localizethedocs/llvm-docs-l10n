# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../CommandGuide/FileCheck.rst:2
msgid "FileCheck - Flexible pattern matching file verifier"
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:5
msgid "SYNOPSIS"
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:7
msgid ""
":program:`FileCheck` *match-filename* [*--check-prefix=XXX*] [*--strict-"
"whitespace*]"
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:10
msgid "DESCRIPTION"
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:12
msgid ""
":program:`FileCheck` reads two files (one from standard input, and one "
"specified on the command line) and uses one to verify the other.  This "
"behavior is particularly useful for the testsuite, which wants to verify "
"that the output of some tool (e.g. :program:`llc`) contains the expected "
"information (for example, a movsd from esp or whatever is interesting).  "
"This is similar to using :program:`grep`, but it is optimized for matching "
"multiple different inputs in one file in a specific order."
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:20
msgid ""
"The ``match-filename`` file specifies the file that contains the patterns to "
"match.  The file to verify is read from standard input unless the :option:`--"
"input-file` option is used."
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:25
msgid "OPTIONS"
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:29
msgid "Print a summary of command line options."
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:33
msgid ""
"FileCheck searches the contents of ``match-filename`` for patterns to "
"match.  By default, these patterns are prefixed with \"``CHECK:``\". If "
"you'd like to use a different prefix (e.g. because the same input file is "
"checking multiple different tool or options), the :option:`--check-prefix` "
"argument allows you to specify one or more prefixes to match. Multiple "
"prefixes are useful for tests which might change for different run options, "
"but most lines remain the same."
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:43
msgid ""
"An alias of :option:`--check-prefix` that allows multiple prefixes to be "
"specified as a comma separated list."
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:48
msgid "File to check (defaults to stdin)."
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:52
msgid ""
"By default, FileCheck allows matches of anywhere on a line. This option will "
"require all positive matches to cover an entire line. Leading and trailing "
"whitespace is ignored, unless :option:`--strict-whitespace` is also "
"specified. (Note: negative matches from ``CHECK-NOT`` are not affected by "
"this option!)"
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:58
msgid ""
"Passing this option is equivalent to inserting ``{{^ *}}`` or ``{{^}}`` "
"before, and ``{{ *$}}`` or ``{{$}}`` after every positive check pattern."
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:64
msgid ""
"By default, FileCheck canonicalizes input horizontal whitespace (spaces and "
"tabs) which causes it to ignore these differences (a space will match a "
"tab). The :option:`--strict-whitespace` argument disables this behavior. End-"
"of-line sequences are canonicalized to UNIX-style ``\\n`` in all modes."
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:71
msgid ""
"Adds implicit negative checks for the specified patterns between positive "
"checks. The option allows writing stricter tests without stuffing them with "
"``CHECK-NOT``\\ s."
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:75
msgid ""
"For example, \"``--implicit-check-not warning:``\" can be useful when "
"testing diagnostic messages from tools that don't have an option similar to "
"``clang -verify``. With this option FileCheck will verify that input does "
"not contain warnings not covered by any ``CHECK:`` patterns."
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:82
msgid "Enables scope for regex variables."
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:84
msgid ""
"Variables with names that start with ``$`` are considered global and remain "
"set throughout the file."
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:87
msgid ""
"All other variables get undefined after each encountered ``CHECK-LABEL``."
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:91
msgid ""
"Sets a filecheck variable ``VAR`` with value ``VALUE`` that can be used in "
"``CHECK:`` lines."
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:96
msgid "Show the version number of this program."
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:99
msgid "EXIT STATUS"
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:101
msgid ""
"If :program:`FileCheck` verifies that the file matches the expected "
"contents, it exits with 0.  Otherwise, if not, or if an error occurs, it "
"will exit with a non-zero value."
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:106
msgid "TUTORIAL"
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:108
msgid ""
"FileCheck is typically used from LLVM regression tests, being invoked on the "
"RUN line of the test.  A simple example of using FileCheck from a RUN line "
"looks like this:"
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:116
msgid ""
"This syntax says to pipe the current file (\"``%s``\") into ``llvm-as``, "
"pipe that into ``llc``, then pipe the output of ``llc`` into ``FileCheck``.  "
"This means that FileCheck will be verifying its standard input (the llc "
"output) against the filename argument specified (the original ``.ll`` file "
"specified by \"``%s``\").  To see how this works, let's look at the rest of "
"the ``.ll`` file (after the RUN line):"
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:141
msgid ""
"Here you can see some \"``CHECK:``\" lines specified in comments.  Now you "
"can see how the file is piped into ``llvm-as``, then ``llc``, and the "
"machine code output is what we are verifying.  FileCheck checks the machine "
"code output to verify that it matches what the \"``CHECK:``\" lines specify."
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:146
msgid ""
"The syntax of the \"``CHECK:``\" lines is very simple: they are fixed "
"strings that must occur in order.  FileCheck defaults to ignoring horizontal "
"whitespace differences (e.g. a space is allowed to match a tab) but "
"otherwise, the contents of the \"``CHECK:``\" line is required to match some "
"thing in the test file exactly."
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:151
msgid ""
"One nice thing about FileCheck (compared to grep) is that it allows merging "
"test cases together into logical groups.  For example, because the test "
"above is checking for the \"``sub1:``\" and \"``inc4:``\" labels, it will "
"not match unless there is a \"``subl``\" in between those labels.  If it "
"existed somewhere else in the file, that would not count: \"``grep subl``\" "
"matches if \"``subl``\" exists anywhere in the file."
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:159
msgid "The FileCheck -check-prefix option"
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:161
msgid ""
"The FileCheck `-check-prefix` option allows multiple test configurations to "
"be driven from one `.ll` file.  This is useful in many circumstances, for "
"example, testing different architectural variants with :program:`llc`.  "
"Here's a simple example:"
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:183
msgid ""
"In this case, we're testing that we get the expected code generation with "
"both 32-bit and 64-bit code generation."
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:187
msgid "The \"CHECK-NEXT:\" directive"
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:189
msgid ""
"Sometimes you want to match lines and would like to verify that matches "
"happen on exactly consecutive lines with no other lines in between them.  In "
"this case, you can use \"``CHECK:``\" and \"``CHECK-NEXT:``\" directives to "
"specify this.  If you specified a custom check prefix, just use \"``<PREFIX>-"
"NEXT:``\". For example, something like this works as you'd expect:"
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:215
msgid ""
"\"``CHECK-NEXT:``\" directives reject the input unless there is exactly one "
"newline between it and the previous directive.  A \"``CHECK-NEXT:``\" cannot "
"be the first directive in a file."
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:220
msgid "The \"CHECK-SAME:\" directive"
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:222
msgid ""
"Sometimes you want to match lines and would like to verify that matches "
"happen on the same line as the previous match.  In this case, you can use "
"\"``CHECK:``\" and \"``CHECK-SAME:``\" directives to specify this.  If you "
"specified a custom check prefix, just use \"``<PREFIX>-SAME:``\"."
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:227
msgid ""
"\"``CHECK-SAME:``\" is particularly powerful in conjunction with \"``CHECK-"
"NOT:``\" (described below)."
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:230
msgid "For example, the following works like you'd expect:"
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:240
msgid ""
"\"``CHECK-SAME:``\" directives reject the input if there are any newlines "
"between it and the previous directive.  A \"``CHECK-SAME:``\" cannot be the "
"first directive in a file."
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:245
msgid "The \"CHECK-NOT:\" directive"
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:247
msgid ""
"The \"``CHECK-NOT:``\" directive is used to verify that a string doesn't "
"occur between two matches (or before the first match, or after the last "
"match).  For example, to verify that a load is removed by a transformation, "
"a test like this can be used:"
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:268
msgid "The \"CHECK-DAG:\" directive"
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:270
msgid ""
"If it's necessary to match strings that don't occur in a strictly sequential "
"order, \"``CHECK-DAG:``\" could be used to verify them between two matches "
"(or before the first match, or after the last match). For example, clang "
"emits vtable globals in reverse order. Using ``CHECK-DAG:``, we can keep the "
"checks in the natural order:"
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:288
msgid ""
"``CHECK-NOT:`` directives could be mixed with ``CHECK-DAG:`` directives to "
"exclude strings between the surrounding ``CHECK-DAG:`` directives. As a "
"result, the surrounding ``CHECK-DAG:`` directives cannot be reordered, i.e. "
"all occurrences matching ``CHECK-DAG:`` before ``CHECK-NOT:`` must not fall "
"behind occurrences matching ``CHECK-DAG:`` after ``CHECK-NOT:``. For example,"
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:300
msgid ""
"This case will reject input strings where ``BEFORE`` occurs after ``AFTER``."
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:302
msgid ""
"With captured variables, ``CHECK-DAG:`` is able to match valid topological "
"orderings of a DAG with edges from the definition of a variable to its use. "
"It's useful, e.g., when your test cases need to match different output "
"sequences from the instruction scheduler. For example,"
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:313
msgid ""
"In this case, any order of that two ``add`` instructions will be allowed."
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:315
msgid ""
"If you are defining `and` using variables in the same ``CHECK-DAG:`` block, "
"be aware that the definition rule can match `after` its use."
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:318
msgid "So, for instance, the code below will pass:"
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:327
msgid "While this other code, will not:"
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:336
msgid ""
"While this can be very useful, it's also dangerous, because in the case of "
"register sequence, you must have a strong order (read before write, copy "
"before use, etc). If the definition your test is looking for doesn't match "
"(because of a bug in the compiler), it may match further away from the use, "
"and mask real bugs away."
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:342
msgid ""
"In those cases, to enforce the order, use a non-DAG directive between DAG-"
"blocks."
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:345
msgid "The \"CHECK-LABEL:\" directive"
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:347
msgid ""
"Sometimes in a file containing multiple tests divided into logical blocks, "
"one or more ``CHECK:`` directives may inadvertently succeed by matching "
"lines in a later block. While an error will usually eventually be generated, "
"the check flagged as causing the error may not actually bear any "
"relationship to the actual source of the problem."
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:353
msgid ""
"In order to produce better error messages in these cases, the \"``CHECK-"
"LABEL:``\" directive can be used. It is treated identically to a normal "
"``CHECK`` directive except that FileCheck makes an additional assumption "
"that a line matched by the directive cannot also be matched by any other "
"check present in ``match-filename``; this is intended to be used for lines "
"containing labels or other unique identifiers. Conceptually, the presence of "
"``CHECK-LABEL`` divides the input stream into separate blocks, each of which "
"is processed independently, preventing a ``CHECK:`` directive in one block "
"matching a line in another block. If ``--enable-var-scope`` is in effect, "
"all local variables are cleared at the beginning of the block."
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:364
msgid "For example,"
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:385
msgid ""
"The use of ``CHECK-LABEL:`` directives in this case ensures that the three "
"``CHECK:`` directives only accept lines corresponding to the body of the "
"``@C_ctor_base`` function, even if the patterns match lines found later in "
"the file. Furthermore, if one of these three ``CHECK:`` directives fail, "
"FileCheck will recover by continuing to the next block, allowing multiple "
"test failures to be detected in a single invocation."
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:392
msgid ""
"There is no requirement that ``CHECK-LABEL:`` directives contain strings "
"that correspond to actual syntactic labels in a source or output language: "
"they must simply uniquely match a single line in the file being verified."
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:396
msgid ""
"``CHECK-LABEL:`` directives cannot contain variable definitions or uses."
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:399
msgid "FileCheck Pattern Matching Syntax"
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:401
msgid ""
"All FileCheck directives take a pattern to match. For most uses of "
"FileCheck, fixed string matching is perfectly sufficient.  For some things, "
"a more flexible form of matching is desired.  To support this, FileCheck "
"allows you to specify regular expressions in matching strings, surrounded by "
"double braces: ``{{yourregex}}``. FileCheck implements a POSIX regular "
"expression matcher; it supports Extended POSIX regular expressions (ERE). "
"Because we want to use fixed string matching for a majority of what we do, "
"FileCheck has been designed to support mixing and matching fixed string "
"matching with regular expressions.  This allows you to write things like "
"this:"
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:415
msgid ""
"In this case, any offset from the ESP register will be allowed, and any xmm "
"register will be allowed."
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:418
msgid ""
"Because regular expressions are enclosed with double braces, they are "
"visually distinct, and you don't need to use escape characters within the "
"double braces like you would in C.  In the rare case that you want to match "
"double braces explicitly from the input, you can use something ugly like "
"``{{[{][{]}}`` as your pattern."
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:425
msgid "FileCheck Variables"
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:427
msgid ""
"It is often useful to match a pattern and then verify that it occurs again "
"later in the file.  For codegen tests, this can be useful to allow any "
"register, but verify that that register is used consistently later.  To do "
"this, :program:`FileCheck` allows named variables to be defined and "
"substituted into patterns.  Here is a simple example:"
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:439
msgid ""
"The first check line matches a regex ``%[a-z]+`` and captures it into the "
"variable ``REGISTER``.  The second line verifies that whatever is in "
"``REGISTER`` occurs later in the file after an \"``andw``\".  :program:"
"`FileCheck` variable references are always contained in ``[[ ]]`` pairs, and "
"their names can be formed with the regex ``[a-zA-Z_][a-zA-Z0-9_]*``.  If a "
"colon follows the name, then it is a definition of the variable; otherwise, "
"it is a use."
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:446
msgid ""
":program:`FileCheck` variables can be defined multiple times, and uses "
"always get the latest value.  Variables can also be used later on the same "
"line they were defined on. For example:"
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:454
msgid ""
"Can be useful if you want the operands of ``op`` to be the same register, "
"and don't care exactly which register it is."
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:457
msgid ""
"If ``--enable-var-scope`` is in effect, variables with names that start with "
"``$`` are considered to be global. All others variables are local.  All "
"local variables get undefined at the beginning of each CHECK-LABEL block. "
"Global variables are not affected by CHECK-LABEL. This makes it easier to "
"ensure that individual tests are not affected by variables set in preceding "
"tests."
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:465
msgid "FileCheck Expressions"
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:467
msgid ""
"Sometimes there's a need to verify output which refers line numbers of the "
"match file, e.g. when testing compiler diagnostics.  This introduces a "
"certain fragility of the match file structure, as \"``CHECK:``\" lines "
"contain absolute line numbers in the same file, which have to be updated "
"whenever line numbers change due to text addition or deletion."
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:473
msgid ""
"To support this case, FileCheck allows using ``[[@LINE]]``, "
"``[[@LINE+<offset>]]``, ``[[@LINE-<offset>]]`` expressions in patterns. "
"These expressions expand to a number of the line where a pattern is located "
"(with an optional integer offset)."
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:478
msgid ""
"This way match patterns can be put near the relevant test lines and include "
"relative line number references, for example:"
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:490
msgid "Matching Newline Characters"
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:492
msgid ""
"To match newline characters in regular expressions the character class ``[[:"
"space:]]`` can be used. For example, the following pattern:"
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:499
msgid "matches output of the form (from llvm-dwarfdump):"
msgstr ""

#: ../../../CommandGuide/FileCheck.rst:506
msgid ""
"letting us set the :program:`FileCheck` variable ``DLOC`` to the desired "
"value ``0x00000233``, extracted from the line immediately preceding "
"\"``intd``\"."
msgstr ""
