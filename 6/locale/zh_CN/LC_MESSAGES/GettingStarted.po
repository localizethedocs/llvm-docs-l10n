# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../GettingStarted.rst:3
msgid "Getting Started with the LLVM System"
msgstr ""

#: ../../../GettingStarted.rst:9
msgid "Overview"
msgstr ""

#: ../../../GettingStarted.rst:11
msgid ""
"Welcome to LLVM! In order to get started, you first need to know some basic "
"information."
msgstr ""

#: ../../../GettingStarted.rst:14
msgid ""
"First, LLVM comes in three pieces. The first piece is the LLVM suite. This "
"contains all of the tools, libraries, and header files needed to use LLVM.  "
"It contains an assembler, disassembler, bitcode analyzer and bitcode "
"optimizer.  It also contains basic regression tests that can be used to test "
"the LLVM tools and the Clang front end."
msgstr ""

#: ../../../GettingStarted.rst:20
msgid ""
"The second piece is the `Clang <http://clang.llvm.org/>`_ front end.  This "
"component compiles C, C++, Objective C, and Objective C++ code into LLVM "
"bitcode. Once compiled into LLVM bitcode, a program can be manipulated with "
"the LLVM tools from the LLVM suite."
msgstr ""

#: ../../../GettingStarted.rst:25
msgid ""
"There is a third, optional piece called Test Suite.  It is a suite of "
"programs with a testing harness that can be used to further test LLVM's "
"functionality and performance."
msgstr ""

#: ../../../GettingStarted.rst:30
msgid "Getting Started Quickly (A Summary)"
msgstr ""

#: ../../../GettingStarted.rst:32
msgid ""
"The LLVM Getting Started documentation may be out of date.  So, the `Clang "
"Getting Started <http://clang.llvm.org/get_started.html>`_ page might also "
"be a good place to start."
msgstr ""

#: ../../../GettingStarted.rst:36
msgid "Here's the short story for getting up and running quickly with LLVM:"
msgstr ""

#: ../../../GettingStarted.rst:38 ../../../GettingStarted.rst:39
msgid "Read the documentation."
msgstr ""

#: ../../../GettingStarted.rst:40
msgid "Remember that you were warned twice about reading the documentation."
msgstr ""

#: ../../../GettingStarted.rst:42
msgid "In particular, the *relative paths specified are important*."
msgstr ""

#: ../../../GettingStarted.rst:44
msgid "Checkout LLVM:"
msgstr ""

#: ../../../GettingStarted.rst:46 ../../../GettingStarted.rst:51
#: ../../../GettingStarted.rst:57 ../../../GettingStarted.rst:63
#: ../../../GettingStarted.rst:69 ../../../GettingStarted.rst:75
#: ../../../GettingStarted.rst:81 ../../../GettingStarted.rst:87
#: ../../../GettingStarted.rst:94 ../../../GettingStarted.rst:460
msgid "``cd where-you-want-llvm-to-live``"
msgstr ""

#: ../../../GettingStarted.rst:47
msgid "``svn co http://llvm.org/svn/llvm-project/llvm/trunk llvm``"
msgstr ""

#: ../../../GettingStarted.rst:49
msgid "Checkout Clang:"
msgstr ""

#: ../../../GettingStarted.rst:52 ../../../GettingStarted.rst:64
#: ../../../GettingStarted.rst:70
msgid "``cd llvm/tools``"
msgstr ""

#: ../../../GettingStarted.rst:53
msgid "``svn co http://llvm.org/svn/llvm-project/cfe/trunk clang``"
msgstr ""

#: ../../../GettingStarted.rst:55
msgid "Checkout Extra Clang Tools **[Optional]**:"
msgstr ""

#: ../../../GettingStarted.rst:58
msgid "``cd llvm/tools/clang/tools``"
msgstr ""

#: ../../../GettingStarted.rst:59
msgid ""
"``svn co http://llvm.org/svn/llvm-project/clang-tools-extra/trunk extra``"
msgstr ""

#: ../../../GettingStarted.rst:61
msgid "Checkout LLD linker **[Optional]**:"
msgstr ""

#: ../../../GettingStarted.rst:65
msgid "``svn co http://llvm.org/svn/llvm-project/lld/trunk lld``"
msgstr ""

#: ../../../GettingStarted.rst:67
msgid "Checkout Polly Loop Optimizer **[Optional]**:"
msgstr ""

#: ../../../GettingStarted.rst:71
msgid "``svn co http://llvm.org/svn/llvm-project/polly/trunk polly``"
msgstr ""

#: ../../../GettingStarted.rst:73
msgid "Checkout Compiler-RT (required to build the sanitizers) **[Optional]**:"
msgstr ""

#: ../../../GettingStarted.rst:76 ../../../GettingStarted.rst:82
#: ../../../GettingStarted.rst:88 ../../../GettingStarted.rst:95
msgid "``cd llvm/projects``"
msgstr ""

#: ../../../GettingStarted.rst:77
msgid ""
"``svn co http://llvm.org/svn/llvm-project/compiler-rt/trunk compiler-rt``"
msgstr ""

#: ../../../GettingStarted.rst:79
msgid "Checkout Libomp (required for OpenMP support) **[Optional]**:"
msgstr ""

#: ../../../GettingStarted.rst:83
msgid "``svn co http://llvm.org/svn/llvm-project/openmp/trunk openmp``"
msgstr ""

#: ../../../GettingStarted.rst:85
msgid "Checkout libcxx and libcxxabi **[Optional]**:"
msgstr ""

#: ../../../GettingStarted.rst:89
msgid "``svn co http://llvm.org/svn/llvm-project/libcxx/trunk libcxx``"
msgstr ""

#: ../../../GettingStarted.rst:90
msgid "``svn co http://llvm.org/svn/llvm-project/libcxxabi/trunk libcxxabi``"
msgstr ""

#: ../../../GettingStarted.rst:92
msgid "Get the Test Suite Source Code **[Optional]**"
msgstr ""

#: ../../../GettingStarted.rst:96
msgid "``svn co http://llvm.org/svn/llvm-project/test-suite/trunk test-suite``"
msgstr ""

#: ../../../GettingStarted.rst:98
msgid "Configure and build LLVM and Clang:"
msgstr ""

#: ../../../GettingStarted.rst:100
msgid ""
"*Warning:* Make sure you've checked out *all of* the source code before "
"trying to configure with cmake.  cmake does not pickup newly added source "
"directories in incremental builds."
msgstr ""

#: ../../../GettingStarted.rst:104
msgid ""
"The build uses `CMake <CMake.html>`_. LLVM requires CMake 3.4.3 to build. It "
"is generally recommended to use a recent CMake, especially if you're "
"generating Ninja build files. This is because the CMake project is "
"constantly improving the quality of the generators, and the Ninja generator "
"gets a lot of attention."
msgstr ""

#: ../../../GettingStarted.rst:110
msgid "``cd where you want to build llvm``"
msgstr ""

#: ../../../GettingStarted.rst:111
msgid "``mkdir build``"
msgstr ""

#: ../../../GettingStarted.rst:112
msgid "``cd build``"
msgstr ""

#: ../../../GettingStarted.rst:113
msgid "``cmake -G <generator> [options] <path to llvm sources>``"
msgstr ""

#: ../../../GettingStarted.rst:115
msgid "Some common generators are:"
msgstr ""

#: ../../../GettingStarted.rst:117
msgid ""
"``Unix Makefiles`` --- for generating make-compatible parallel makefiles."
msgstr ""

#: ../../../GettingStarted.rst:118
msgid ""
"``Ninja`` --- for generating `Ninja <https://ninja-build.org>`_ build files. "
"Most llvm developers use Ninja."
msgstr ""

#: ../../../GettingStarted.rst:120
msgid ""
"``Visual Studio`` --- for generating Visual Studio projects and solutions."
msgstr ""

#: ../../../GettingStarted.rst:122
msgid "``Xcode`` --- for generating Xcode projects."
msgstr ""

#: ../../../GettingStarted.rst:124
msgid "Some Common options:"
msgstr ""

#: ../../../GettingStarted.rst:126
msgid ""
"``-DCMAKE_INSTALL_PREFIX=directory`` --- Specify for *directory* the full "
"pathname of where you want the LLVM tools and libraries to be installed "
"(default ``/usr/local``)."
msgstr ""

#: ../../../GettingStarted.rst:130
msgid ""
"``-DCMAKE_BUILD_TYPE=type`` --- Valid options for *type* are Debug, Release, "
"RelWithDebInfo, and MinSizeRel. Default is Debug."
msgstr ""

#: ../../../GettingStarted.rst:133
msgid ""
"``-DLLVM_ENABLE_ASSERTIONS=On`` --- Compile with assertion checks enabled "
"(default is Yes for Debug builds, No for all other build types)."
msgstr ""

#: ../../../GettingStarted.rst:136
msgid "Run your build tool of choice!"
msgstr ""

#: ../../../GettingStarted.rst:138
msgid "The default target (i.e. ``make``) will build all of LLVM"
msgstr ""

#: ../../../GettingStarted.rst:140
msgid ""
"The ``check-all`` target (i.e. ``make check-all``) will run the regression "
"tests to ensure everything is in working order."
msgstr ""

#: ../../../GettingStarted.rst:143
msgid ""
"CMake will generate build targets for each tool and library, and most LLVM "
"sub-projects generate their own ``check-<project>`` target."
msgstr ""

#: ../../../GettingStarted.rst:146
msgid ""
"Running a serial build will be *slow*.  Make sure you run a parallel build; "
"for ``make``, use ``make -j``."
msgstr ""

#: ../../../GettingStarted.rst:149
msgid "For more information see `CMake <CMake.html>`_"
msgstr ""

#: ../../../GettingStarted.rst:151
msgid ""
"If you get an \"internal compiler error (ICE)\" or test failures, see "
"`below`_."
msgstr ""

#: ../../../GettingStarted.rst:154
msgid ""
"Consult the `Getting Started with LLVM`_ section for detailed information on "
"configuring and compiling LLVM.  Go to `Directory Layout`_ to learn about "
"the layout of the source code tree."
msgstr ""

#: ../../../GettingStarted.rst:159
msgid "Requirements"
msgstr ""

#: ../../../GettingStarted.rst:161
msgid ""
"Before you begin to use the LLVM system, review the requirements given "
"below. This may save you some trouble by knowing ahead of time what hardware "
"and software you will need."
msgstr ""

#: ../../../GettingStarted.rst:166
msgid "Hardware"
msgstr ""

#: ../../../GettingStarted.rst:168
msgid "LLVM is known to work on the following host platforms:"
msgstr ""

#: ../../../GettingStarted.rst:171
msgid "OS"
msgstr ""

#: ../../../GettingStarted.rst:171
msgid "Arch"
msgstr ""

#: ../../../GettingStarted.rst:171
msgid "Compilers"
msgstr ""

#: ../../../GettingStarted.rst:173 ../../../GettingStarted.rst:174
#: ../../../GettingStarted.rst:175 ../../../GettingStarted.rst:176
msgid "Linux"
msgstr ""

#: ../../../GettingStarted.rst:173 ../../../GettingStarted.rst:178
#: ../../../GettingStarted.rst:180 ../../../GettingStarted.rst:185
msgid "x86\\ :sup:`1`"
msgstr ""

#: ../../../GettingStarted.rst:173 ../../../GettingStarted.rst:174
#: ../../../GettingStarted.rst:175 ../../../GettingStarted.rst:176
#: ../../../GettingStarted.rst:178 ../../../GettingStarted.rst:179
#: ../../../GettingStarted.rst:180 ../../../GettingStarted.rst:181
#: ../../../GettingStarted.rst:183
msgid "GCC, Clang"
msgstr ""

#: ../../../GettingStarted.rst:174 ../../../GettingStarted.rst:179
#: ../../../GettingStarted.rst:181
msgid "amd64"
msgstr ""

#: ../../../GettingStarted.rst:175
msgid "ARM\\ :sup:`4`"
msgstr ""

#: ../../../GettingStarted.rst:176 ../../../GettingStarted.rst:182
msgid "PowerPC"
msgstr ""

#: ../../../GettingStarted.rst:177
msgid "Solaris"
msgstr ""

#: ../../../GettingStarted.rst:177
msgid "V9 (Ultrasparc)"
msgstr ""

#: ../../../GettingStarted.rst:177 ../../../GettingStarted.rst:182
#: ../../../GettingStarted.rst:184
msgid "GCC"
msgstr ""

#: ../../../GettingStarted.rst:178 ../../../GettingStarted.rst:179
msgid "FreeBSD"
msgstr ""

#: ../../../GettingStarted.rst:180 ../../../GettingStarted.rst:181
msgid "NetBSD"
msgstr ""

#: ../../../GettingStarted.rst:182
msgid "MacOS X\\ :sup:`2`"
msgstr ""

#: ../../../GettingStarted.rst:183
msgid "MacOS X"
msgstr ""

#: ../../../GettingStarted.rst:183
msgid "x86"
msgstr ""

#: ../../../GettingStarted.rst:184
msgid "Cygwin/Win32"
msgstr ""

#: ../../../GettingStarted.rst:184
msgid "x86\\ :sup:`1, 3`"
msgstr ""

#: ../../../GettingStarted.rst:185
msgid "Windows"
msgstr ""

#: ../../../GettingStarted.rst:185 ../../../GettingStarted.rst:186
msgid "Visual Studio"
msgstr ""

#: ../../../GettingStarted.rst:186
msgid "Windows x64"
msgstr ""

#: ../../../GettingStarted.rst:186
msgid "x86-64"
msgstr ""

#: ../../../GettingStarted.rst:191
msgid "Code generation supported for Pentium processors and up"
msgstr ""

#: ../../../GettingStarted.rst:192
msgid "Code generation supported for 32-bit ABI only"
msgstr ""

#: ../../../GettingStarted.rst:193
msgid ""
"To use LLVM modules on Win32-based system, you may configure LLVM with ``-"
"DBUILD_SHARED_LIBS=On``."
msgstr ""

#: ../../../GettingStarted.rst:195
msgid "MCJIT not working well pre-v7, old JIT engine not supported any more."
msgstr ""

#: ../../../GettingStarted.rst:197
msgid ""
"Note that Debug builds require a lot of time and disk space.  An LLVM-only "
"build will need about 1-3 GB of space.  A full build of LLVM and Clang will "
"need around 15-20 GB of disk space.  The exact space requirements will vary "
"by system.  (It is so large because of all the debugging information and the "
"fact that the libraries are statically linked into multiple tools)."
msgstr ""

#: ../../../GettingStarted.rst:203
msgid ""
"If you you are space-constrained, you can build only selected tools or only "
"selected targets.  The Release build requires considerably less space."
msgstr ""

#: ../../../GettingStarted.rst:206
msgid ""
"The LLVM suite *may* compile on other platforms, but it is not guaranteed to "
"do so.  If compilation is successful, the LLVM utilities should be able to "
"assemble, disassemble, analyze, and optimize LLVM bitcode.  Code generation "
"should work as well, although the generated native code may not work on your "
"platform."
msgstr ""

#: ../../../GettingStarted.rst:213
msgid "Software"
msgstr ""

#: ../../../GettingStarted.rst:215
msgid ""
"Compiling LLVM requires that you have several software packages installed. "
"The table below lists those required packages. The Package column is the "
"usual name for the software package that LLVM depends on. The Version column "
"provides \"known to work\" versions of the package. The Notes column "
"describes how LLVM uses the package and provides other details."
msgstr ""

#: ../../../GettingStarted.rst:222
msgid "Package"
msgstr ""

#: ../../../GettingStarted.rst:222
msgid "Version"
msgstr ""

#: ../../../GettingStarted.rst:222
msgid "Notes"
msgstr ""

#: ../../../GettingStarted.rst:224
msgid "`GNU Make <http://savannah.gnu.org/projects/make>`_"
msgstr ""

#: ../../../GettingStarted.rst:224
msgid "3.79, 3.79.1"
msgstr ""

#: ../../../GettingStarted.rst:224
msgid "Makefile/build processor"
msgstr ""

#: ../../../GettingStarted.rst:225
msgid "`GCC <http://gcc.gnu.org/>`_"
msgstr ""

#: ../../../GettingStarted.rst:225
msgid ">=4.8.0"
msgstr ""

#: ../../../GettingStarted.rst:225
msgid "C/C++ compiler\\ :sup:`1`"
msgstr ""

#: ../../../GettingStarted.rst:226
msgid "`python <http://www.python.org/>`_"
msgstr ""

#: ../../../GettingStarted.rst:226
msgid ">=2.7"
msgstr ""

#: ../../../GettingStarted.rst:226
msgid "Automated test suite\\ :sup:`2`"
msgstr ""

#: ../../../GettingStarted.rst:227
msgid "`zlib <http://zlib.net>`_"
msgstr ""

#: ../../../GettingStarted.rst:227
msgid ">=1.2.3.4"
msgstr ""

#: ../../../GettingStarted.rst:227
msgid "Compression library\\ :sup:`3`"
msgstr ""

#: ../../../GettingStarted.rst:232
msgid ""
"Only the C and C++ languages are needed so there's no need to build the "
"other languages for LLVM's purposes. See `below` for specific version info."
msgstr ""

#: ../../../GettingStarted.rst:235
msgid ""
"Only needed if you want to run the automated test suite in the ``llvm/test`` "
"directory."
msgstr ""

#: ../../../GettingStarted.rst:237
msgid ""
"Optional, adds compression / uncompression capabilities to selected LLVM "
"tools."
msgstr ""

#: ../../../GettingStarted.rst:240
msgid ""
"Additionally, your compilation host is expected to have the usual plethora "
"of Unix utilities. Specifically:"
msgstr ""

#: ../../../GettingStarted.rst:243
msgid "**ar** --- archive library builder"
msgstr ""

#: ../../../GettingStarted.rst:244
msgid "**bzip2** --- bzip2 command for distribution generation"
msgstr ""

#: ../../../GettingStarted.rst:245
msgid "**bunzip2** --- bunzip2 command for distribution checking"
msgstr ""

#: ../../../GettingStarted.rst:246
msgid "**chmod** --- change permissions on a file"
msgstr ""

#: ../../../GettingStarted.rst:247
msgid "**cat** --- output concatenation utility"
msgstr ""

#: ../../../GettingStarted.rst:248
msgid "**cp** --- copy files"
msgstr ""

#: ../../../GettingStarted.rst:249
msgid "**date** --- print the current date/time"
msgstr ""

#: ../../../GettingStarted.rst:250
msgid "**echo** --- print to standard output"
msgstr ""

#: ../../../GettingStarted.rst:251
msgid "**egrep** --- extended regular expression search utility"
msgstr ""

#: ../../../GettingStarted.rst:252
msgid "**find** --- find files/dirs in a file system"
msgstr ""

#: ../../../GettingStarted.rst:253
msgid "**grep** --- regular expression search utility"
msgstr ""

#: ../../../GettingStarted.rst:254
msgid "**gzip** --- gzip command for distribution generation"
msgstr ""

#: ../../../GettingStarted.rst:255
msgid "**gunzip** --- gunzip command for distribution checking"
msgstr ""

#: ../../../GettingStarted.rst:256
msgid "**install** --- install directories/files"
msgstr ""

#: ../../../GettingStarted.rst:257
msgid "**mkdir** --- create a directory"
msgstr ""

#: ../../../GettingStarted.rst:258
msgid "**mv** --- move (rename) files"
msgstr ""

#: ../../../GettingStarted.rst:259
msgid "**ranlib** --- symbol table builder for archive libraries"
msgstr ""

#: ../../../GettingStarted.rst:260
msgid "**rm** --- remove (delete) files and directories"
msgstr ""

#: ../../../GettingStarted.rst:261
msgid "**sed** --- stream editor for transforming output"
msgstr ""

#: ../../../GettingStarted.rst:262
msgid "**sh** --- Bourne shell for make build scripts"
msgstr ""

#: ../../../GettingStarted.rst:263
msgid "**tar** --- tape archive for distribution generation"
msgstr ""

#: ../../../GettingStarted.rst:264
msgid "**test** --- test things in file system"
msgstr ""

#: ../../../GettingStarted.rst:265
msgid "**unzip** --- unzip command for distribution checking"
msgstr ""

#: ../../../GettingStarted.rst:266
msgid "**zip** --- zip command for distribution generation"
msgstr ""

#: ../../../GettingStarted.rst:272
msgid "Host C++ Toolchain, both Compiler and Standard Library"
msgstr ""

#: ../../../GettingStarted.rst:274
msgid ""
"LLVM is very demanding of the host C++ compiler, and as such tends to expose "
"bugs in the compiler. We are also planning to follow improvements and "
"developments in the C++ language and library reasonably closely. As such, we "
"require a modern host C++ toolchain, both compiler and standard library, in "
"order to build LLVM."
msgstr ""

#: ../../../GettingStarted.rst:280
msgid ""
"For the most popular host toolchains we check for specific minimum versions "
"in our build systems:"
msgstr ""

#: ../../../GettingStarted.rst:283
msgid "Clang 3.1"
msgstr ""

#: ../../../GettingStarted.rst:284
msgid "GCC 4.8"
msgstr ""

#: ../../../GettingStarted.rst:285
msgid "Visual Studio 2015 (Update 3)"
msgstr ""

#: ../../../GettingStarted.rst:287
msgid ""
"Anything older than these toolchains *may* work, but will require forcing "
"the build system with a special option and is not really a supported host "
"platform. Also note that older versions of these compilers have often "
"crashed or miscompiled LLVM."
msgstr ""

#: ../../../GettingStarted.rst:292
msgid ""
"For less widely used host toolchains such as ICC or xlC, be aware that a "
"very recent version may be required to support all of the C++ features used "
"in LLVM."
msgstr ""

#: ../../../GettingStarted.rst:295
msgid ""
"We track certain versions of software that are *known* to fail when used as "
"part of the host toolchain. These even include linkers at times."
msgstr ""

#: ../../../GettingStarted.rst:298
msgid ""
"**GNU ld 2.16.X**. Some 2.16.X versions of the ld linker will produce very "
"long warning messages complaining that some \"``.gnu.linkonce.t.*``\" symbol "
"was defined in a discarded section. You can safely ignore these messages as "
"they are erroneous and the linkage is correct.  These messages disappear "
"using ld 2.17."
msgstr ""

#: ../../../GettingStarted.rst:303
msgid ""
"**GNU binutils 2.17**: Binutils 2.17 contains `a bug <http://sourceware.org/"
"bugzilla/show_bug.cgi?id=3111>`__ which causes huge link times (minutes "
"instead of seconds) when building LLVM.  We recommend upgrading to a newer "
"version (2.17.50.0.4 or later)."
msgstr ""

#: ../../../GettingStarted.rst:308
msgid ""
"**GNU Binutils 2.19.1 Gold**: This version of Gold contained `a bug <http://"
"sourceware.org/bugzilla/show_bug.cgi?id=9836>`__ which causes intermittent "
"failures when building LLVM with position independent code.  The symptom is "
"an error about cyclic dependencies.  We recommend upgrading to a newer "
"version of Gold."
msgstr ""

#: ../../../GettingStarted.rst:315
msgid "Getting a Modern Host C++ Toolchain"
msgstr ""

#: ../../../GettingStarted.rst:317
msgid ""
"This section mostly applies to Linux and older BSDs. On Mac OS X, you should "
"have a sufficiently modern Xcode, or you will likely need to upgrade until "
"you do. Windows does not have a \"system compiler\", so you must install "
"either Visual Studio 2015 or a recent version of mingw64. FreeBSD 10.0 and "
"newer have a modern Clang as the system compiler."
msgstr ""

#: ../../../GettingStarted.rst:323
msgid ""
"However, some Linux distributions and some other or older BSDs sometimes "
"have extremely old versions of GCC. These steps attempt to help you upgrade "
"you compiler even on such a system. However, if at all possible, we "
"encourage you to use a recent version of a distribution with a modern system "
"compiler that meets these requirements. Note that it is tempting to to "
"install a prior version of Clang and libc++ to be the host compiler, however "
"libc++ was not well tested or set up to build on Linux until relatively "
"recently. As a consequence, this guide suggests just using libstdc++ and a "
"modern GCC as the initial host in a bootstrap, and then using Clang (and "
"potentially libc++)."
msgstr ""

#: ../../../GettingStarted.rst:333
msgid ""
"The first step is to get a recent GCC toolchain installed. The most common "
"distribution on which users have struggled with the version requirements is "
"Ubuntu Precise, 12.04 LTS. For this distribution, one easy option is to "
"install the `toolchain testing PPA`_ and use it to install a modern GCC. "
"There is a really nice discussions of this on the `ask ubuntu stack "
"exchange`_. However, not all users can use PPAs and there are many other "
"distributions, so it may be necessary (or just useful, if you're here you "
"*are* doing compiler development after all) to build and install GCC from "
"source. It is also quite easy to do these days."
msgstr ""

#: ../../../GettingStarted.rst:348
msgid "Easy steps for installing GCC 4.8.2:"
msgstr ""

#: ../../../GettingStarted.rst:367
msgid ""
"For more details, check out the excellent `GCC wiki entry`_, where I got "
"most of this information from."
msgstr ""

#: ../../../GettingStarted.rst:373
msgid ""
"Once you have a GCC toolchain, configure your build of LLVM to use the new "
"toolchain for your host compiler and C++ standard library. Because the new "
"version of libstdc++ is not on the system library search path, you need to "
"pass extra linker flags so that it can be found at link time (``-L``) and at "
"runtime (``-rpath``). If you are using CMake, this invocation should produce "
"working binaries:"
msgstr ""

#: ../../../GettingStarted.rst:387
msgid ""
"If you fail to set rpath, most LLVM binaries will fail on startup with a "
"message from the loader similar to ``libstdc++.so.6: version "
"`GLIBCXX_3.4.20' not found``. This means you need to tweak the -rpath linker "
"flag."
msgstr ""

#: ../../../GettingStarted.rst:391
msgid ""
"When you build Clang, you will need to give *it* access to modern C++11 "
"standard library in order to use it as your new host in part of a bootstrap. "
"There are two easy ways to do this, either build (and install) libc++ along "
"with Clang and then use it with the ``-stdlib=libc++`` compile and link "
"flag, or install Clang into the same prefix (``$HOME/toolchains`` above) as "
"GCC. Clang will look within its own prefix for libstdc++ and use it if "
"found. You can also add an explicit prefix for Clang to look in for a GCC "
"toolchain with the ``--gcc-toolchain=/opt/my/gcc/prefix`` flag, passing it "
"to both compile and link commands when using your just-built-Clang to "
"bootstrap."
msgstr ""

#: ../../../GettingStarted.rst:404
msgid "Getting Started with LLVM"
msgstr ""

#: ../../../GettingStarted.rst:406
msgid ""
"The remainder of this guide is meant to get you up and running with LLVM and "
"to give you some basic information about the LLVM environment."
msgstr ""

#: ../../../GettingStarted.rst:409
msgid ""
"The later sections of this guide describe the `general layout`_ of the LLVM "
"source tree, a `simple example`_ using the LLVM tool chain, and `links`_ to "
"find more information about LLVM or to get help via e-mail."
msgstr ""

#: ../../../GettingStarted.rst:414
msgid "Terminology and Notation"
msgstr ""

#: ../../../GettingStarted.rst:416
msgid ""
"Throughout this manual, the following names are used to denote paths "
"specific to the local system and working environment.  *These are not "
"environment variables you need to set but just strings used in the rest of "
"this document below*.  In any of the examples below, simply replace each of "
"these names with the appropriate pathname on your local system.  All these "
"paths are absolute:"
msgstr ""

#: ../../../GettingStarted.rst:422
msgid "``SRC_ROOT``"
msgstr ""

#: ../../../GettingStarted.rst:424
msgid "This is the top level directory of the LLVM source tree."
msgstr ""

#: ../../../GettingStarted.rst:426
msgid "``OBJ_ROOT``"
msgstr ""

#: ../../../GettingStarted.rst:428
msgid ""
"This is the top level directory of the LLVM object tree (i.e. the tree where "
"object files and compiled programs will be placed.  It can be the same as "
"SRC_ROOT)."
msgstr ""

#: ../../../GettingStarted.rst:433
msgid "Unpacking the LLVM Archives"
msgstr ""

#: ../../../GettingStarted.rst:435
msgid ""
"If you have the LLVM distribution, you will need to unpack it before you can "
"begin to compile it.  LLVM is distributed as a set of two files: the LLVM "
"suite and the LLVM GCC front end compiled for your platform.  There is an "
"additional test suite that is optional.  Each file is a TAR archive that is "
"compressed with the gzip program."
msgstr ""

#: ../../../GettingStarted.rst:441
msgid "The files are as follows, with *x.y* marking the version number:"
msgstr ""

#: ../../../GettingStarted.rst:443
msgid "``llvm-x.y.tar.gz``"
msgstr ""

#: ../../../GettingStarted.rst:445
msgid "Source release for the LLVM libraries and tools."
msgstr ""

#: ../../../GettingStarted.rst:447
msgid "``llvm-test-x.y.tar.gz``"
msgstr ""

#: ../../../GettingStarted.rst:449
msgid "Source release for the LLVM test-suite."
msgstr ""

#: ../../../GettingStarted.rst:454
msgid "Checkout LLVM from Subversion"
msgstr ""

#: ../../../GettingStarted.rst:456
msgid ""
"If you have access to our Subversion repository, you can get a fresh copy of "
"the entire source code.  All you need to do is check it out from Subversion "
"as follows:"
msgstr ""

#: ../../../GettingStarted.rst:461
msgid "Read-Only: ``svn co http://llvm.org/svn/llvm-project/llvm/trunk llvm``"
msgstr ""

#: ../../../GettingStarted.rst:462
msgid ""
"Read-Write: ``svn co https://user@llvm.org/svn/llvm-project/llvm/trunk llvm``"
msgstr ""

#: ../../../GettingStarted.rst:464
msgid ""
"This will create an '``llvm``' directory in the current directory and fully "
"populate it with the LLVM source code, Makefiles, test directories, and "
"local copies of documentation files."
msgstr ""

#: ../../../GettingStarted.rst:468
msgid ""
"If you want to get a specific release (as opposed to the most recent "
"revision), you can check it out from the '``tags``' directory (instead of "
"'``trunk``'). The following releases are located in the following "
"subdirectories of the '``tags``' directory:"
msgstr ""

#: ../../../GettingStarted.rst:473
msgid "Release 3.5.0 and later: **RELEASE_350/final** and so on"
msgstr ""

#: ../../../GettingStarted.rst:474
msgid "Release 2.9 through 3.4: **RELEASE_29/final** and so on"
msgstr ""

#: ../../../GettingStarted.rst:475
msgid "Release 1.1 through 2.8: **RELEASE_11** and so on"
msgstr ""

#: ../../../GettingStarted.rst:476
msgid "Release 1.0: **RELEASE_1**"
msgstr ""

#: ../../../GettingStarted.rst:478
msgid ""
"If you would like to get the LLVM test suite (a separate package as of 1.4), "
"you get it from the Subversion repository:"
msgstr ""

#: ../../../GettingStarted.rst:486
msgid ""
"By placing it in the ``llvm/projects``, it will be automatically configured "
"by the LLVM cmake configuration."
msgstr ""

#: ../../../GettingStarted.rst:490
msgid "Git Mirror"
msgstr ""

#: ../../../GettingStarted.rst:492
msgid ""
"Git mirrors are available for a number of LLVM subprojects. These mirrors "
"sync automatically with each Subversion commit and contain all necessary git-"
"svn marks (so, you can recreate git-svn metadata locally). Note that right "
"now mirrors reflect only ``trunk`` for each project. You can do the read-"
"only Git clone of LLVM via:"
msgstr ""

#: ../../../GettingStarted.rst:502
msgid "If you want to check out clang too, run:"
msgstr ""

#: ../../../GettingStarted.rst:509
msgid ""
"If you want to check out compiler-rt (required to build the sanitizers), run:"
msgstr ""

#: ../../../GettingStarted.rst:516
msgid "If you want to check out libomp (required for OpenMP support), run:"
msgstr ""

#: ../../../GettingStarted.rst:523
msgid "If you want to check out libcxx and libcxxabi (optional), run:"
msgstr ""

#: ../../../GettingStarted.rst:531
msgid "If you want to check out the Test Suite Source Code (optional), run:"
msgstr ""

#: ../../../GettingStarted.rst:538
msgid ""
"Since the upstream repository is in Subversion, you should use ``git pull --"
"rebase`` instead of ``git pull`` to avoid generating a non-linear history in "
"your clone.  To configure ``git pull`` to pass ``--rebase`` by default on "
"the master branch, run the following command:"
msgstr ""

#: ../../../GettingStarted.rst:548
msgid "Sending patches with Git"
msgstr ""

#: ../../../GettingStarted.rst:550
msgid ""
"Please read `Developer Policy <DeveloperPolicy.html#one-off-patches>`_, too."
msgstr ""

#: ../../../GettingStarted.rst:552
msgid ""
"Assume ``master`` points the upstream and ``mybranch`` points your working "
"branch, and ``mybranch`` is rebased onto ``master``.  At first you may check "
"sanity of whitespaces:"
msgstr ""

#: ../../../GettingStarted.rst:560
msgid "The easiest way to generate a patch is as below:"
msgstr ""

#: ../../../GettingStarted.rst:566
msgid ""
"It is a little different from svn-generated diff. git-diff-generated diff "
"has prefixes like ``a/`` and ``b/``. Don't worry, most developers might know "
"it could be accepted with ``patch -p1 -N``."
msgstr ""

#: ../../../GettingStarted.rst:570
msgid ""
"But you may generate patchset with git-format-patch. It generates by-each-"
"commit patchset. To generate patch files to attach to your article:"
msgstr ""

#: ../../../GettingStarted.rst:577
msgid ""
"If you would like to send patches directly, you may use git-send-email or "
"git-imap-send. Here is an example to generate the patchset in Gmail's "
"[Drafts]."
msgstr ""

#: ../../../GettingStarted.rst:584
msgid "Then, your .git/config should have [imap] sections."
msgstr ""

#: ../../../GettingStarted.rst:604
msgid "For developers to work with git-svn"
msgstr ""

#: ../../../GettingStarted.rst:606
msgid "To set up clone from which you can submit code using ``git-svn``, run:"
msgstr ""

#: ../../../GettingStarted.rst:624 ../../../GettingStarted.rst:638
msgid "Likewise for compiler-rt, libomp and test-suite."
msgstr ""

#: ../../../GettingStarted.rst:626
msgid ""
"To update this clone without generating git-svn tags that conflict with the "
"upstream Git repo, run:"
msgstr ""

#: ../../../GettingStarted.rst:640
msgid ""
"This leaves your working directories on their master branches, so you'll "
"need to ``checkout`` each working branch individually and ``rebase`` it on "
"top of its parent branch."
msgstr ""

#: ../../../GettingStarted.rst:644
msgid ""
"For those who wish to be able to update an llvm repo/revert patches easily "
"using git-svn, please look in the directory for the scripts ``git-svnup`` "
"and ``git-svnrevert``."
msgstr ""

#: ../../../GettingStarted.rst:648
msgid ""
"To perform the aforementioned update steps go into your source directory and "
"just type ``git-svnup`` or ``git svnup`` and everything will just work."
msgstr ""

#: ../../../GettingStarted.rst:651
msgid ""
"If one wishes to revert a commit with git-svn, but do not want the git hash "
"to escape into the commit message, one can use the script ``git-svnrevert`` "
"or ``git svnrevert`` which will take in the git hash for the commit you want "
"to revert, look up the appropriate svn revision, and output a message where "
"all references to the git hash have been replaced with the svn revision."
msgstr ""

#: ../../../GettingStarted.rst:657
msgid "To commit back changes via git-svn, use ``git svn dcommit``:"
msgstr ""

#: ../../../GettingStarted.rst:663
msgid ""
"Note that git-svn will create one SVN commit for each Git commit you have "
"pending, so squash and edit each commit before executing ``dcommit`` to make "
"sure they all conform to the coding standards and the developers' policy."
msgstr ""

#: ../../../GettingStarted.rst:667
msgid ""
"On success, ``dcommit`` will rebase against the HEAD of SVN, so to avoid "
"conflict, please make sure your current branch is up-to-date (via fetch/"
"rebase) before proceeding."
msgstr ""

#: ../../../GettingStarted.rst:671
msgid ""
"The git-svn metadata can get out of sync after you mess around with branches "
"and ``dcommit``. When that happens, ``git svn dcommit`` stops working, "
"complaining about files with uncommitted changes. The fix is to rebuild the "
"metadata:"
msgstr ""

#: ../../../GettingStarted.rst:680
msgid ""
"Please, refer to the Git-SVN manual (``man git-svn``) for more information."
msgstr ""

#: ../../../GettingStarted.rst:683
msgid "For developers to work with a git monorepo"
msgstr ""

#: ../../../GettingStarted.rst:687
msgid ""
"This set-up is using an unofficial mirror hosted on GitHub, use with caution."
msgstr ""

#: ../../../GettingStarted.rst:689
msgid "To set up a clone of all the llvm projects using a unified repository:"
msgstr ""

#: ../../../GettingStarted.rst:698
msgid ""
"You can configure various build directory from this clone, starting with a "
"build of LLVM alone:"
msgstr ""

#: ../../../GettingStarted.rst:707
msgid "Or lldb:"
msgstr ""

#: ../../../GettingStarted.rst:715
msgid "Or a combination of multiple projects:"
msgstr ""

#: ../../../GettingStarted.rst:723
msgid ""
"A helper script is provided in ``llvm/utils/git-svn/git-llvm``. After you "
"add it to your path, you can push committed changes upstream with ``git llvm "
"push``."
msgstr ""

#: ../../../GettingStarted.rst:731
msgid ""
"While this is using SVN under the hood, it does not require any interaction "
"from you with git-svn. After a few minutes, ``git pull`` should get back the "
"changes as they were committed. Note that a current limitation is that "
"``git`` does not directly record file rename, and thus it is propagated to "
"SVN as a combination of delete-add instead of a file rename."
msgstr ""

#: ../../../GettingStarted.rst:738
msgid ""
"The SVN revision of each monorepo commit can be found in the commit notes.  "
"git does not fetch notes by default. The following commands will fetch the "
"notes and configure git to fetch future notes. Use ``git notes show "
"$commit`` to look up the SVN revision of a git commit. The notes show up "
"``git log``, and searching the log is currently the recommended way to look "
"up the git commit for a given SVN revision."
msgstr ""

#: ../../../GettingStarted.rst:750
msgid ""
"If you are using `arc` to interact with Phabricator, you need to manually "
"put it at the root of the checkout:"
msgstr ""

#: ../../../GettingStarted.rst:762
msgid "Local LLVM Configuration"
msgstr ""

#: ../../../GettingStarted.rst:764
msgid ""
"Once checked out from the Subversion repository, the LLVM suite source code "
"must be configured before being built. This process uses CMake. Unlinke the "
"normal ``configure`` script, CMake generates the build files in whatever "
"format you request as well as various ``*.inc`` files, and ``llvm/include/"
"Config/config.h``."
msgstr ""

#: ../../../GettingStarted.rst:770
msgid ""
"Variables are passed to ``cmake`` on the command line using the format ``-"
"D<variable name>=<value>``. The following variables are some common options "
"used by people developing LLVM."
msgstr ""

#: ../../../GettingStarted.rst:775
msgid "Variable"
msgstr ""

#: ../../../GettingStarted.rst:775
msgid "Purpose"
msgstr ""

#: ../../../GettingStarted.rst:777
msgid "CMAKE_C_COMPILER"
msgstr ""

#: ../../../GettingStarted.rst:777
msgid ""
"Tells ``cmake`` which C compiler to use. By default, this will be /usr/bin/"
"cc."
msgstr ""

#: ../../../GettingStarted.rst:780
msgid "CMAKE_CXX_COMPILER"
msgstr ""

#: ../../../GettingStarted.rst:780
msgid ""
"Tells ``cmake`` which C++ compiler to use. By default, this will be /usr/bin/"
"c++."
msgstr ""

#: ../../../GettingStarted.rst:783
msgid "CMAKE_BUILD_TYPE"
msgstr ""

#: ../../../GettingStarted.rst:783
msgid ""
"Tells ``cmake`` what type of build you are trying to generate files for. "
"Valid options are Debug, Release, RelWithDebInfo, and MinSizeRel. Default is "
"Debug."
msgstr ""

#: ../../../GettingStarted.rst:788
msgid "CMAKE_INSTALL_PREFIX"
msgstr ""

#: ../../../GettingStarted.rst:788
msgid ""
"Specifies the install directory to target when running the install action of "
"the build files."
msgstr ""

#: ../../../GettingStarted.rst:791
msgid "LLVM_TARGETS_TO_BUILD"
msgstr ""

#: ../../../GettingStarted.rst:791
msgid ""
"A semicolon delimited list controlling which targets will be built and "
"linked into llc. This is equivalent to the ``--enable-targets`` option in "
"the configure script. The default list is defined as ``LLVM_ALL_TARGETS``, "
"and can be set to include out-of-tree targets. The default value includes: "
"``AArch64, AMDGPU, ARM, BPF, Hexagon, Mips, MSP430, NVPTX, PowerPC, Sparc, "
"SystemZ, X86, XCore``."
msgstr ""

#: ../../../GettingStarted.rst:801
msgid "LLVM_ENABLE_DOXYGEN"
msgstr ""

#: ../../../GettingStarted.rst:801
msgid ""
"Build doxygen-based documentation from the source code This is disabled by "
"default because it is slow and generates a lot of output."
msgstr ""

#: ../../../GettingStarted.rst:805
msgid "LLVM_ENABLE_SPHINX"
msgstr ""

#: ../../../GettingStarted.rst:805
msgid ""
"Build sphinx-based documentation from the source code. This is disabled by "
"default because it is slow and generates a lot of output. Sphinx version 1.5 "
"or later recommended."
msgstr ""

#: ../../../GettingStarted.rst:810
msgid "LLVM_BUILD_LLVM_DYLIB"
msgstr ""

#: ../../../GettingStarted.rst:810
msgid ""
"Generate libLLVM.so. This library contains a default set of LLVM components "
"that can be overridden with ``LLVM_DYLIB_COMPONENTS``. The default contains "
"most of LLVM and is defined in ``tools/llvm-shlib/CMakelists.txt``."
msgstr ""

#: ../../../GettingStarted.rst:816
msgid "LLVM_OPTIMIZED_TABLEGEN"
msgstr ""

#: ../../../GettingStarted.rst:816
msgid ""
"Builds a release tablegen that gets used during the LLVM build. This can "
"dramatically speed up debug builds."
msgstr ""

#: ../../../GettingStarted.rst:821
msgid "To configure LLVM, follow these steps:"
msgstr ""

#: ../../../GettingStarted.rst:823
msgid "Change directory into the object root directory:"
msgstr ""

#: ../../../GettingStarted.rst:829
msgid "Run the ``cmake``:"
msgstr ""

#: ../../../GettingStarted.rst:837
msgid "Compiling the LLVM Suite Source Code"
msgstr ""

#: ../../../GettingStarted.rst:839
msgid ""
"Unlike with autotools, with CMake your build type is defined at "
"configuration. If you want to change your build type, you can re-run cmake "
"with the following invocation:"
msgstr ""

#: ../../../GettingStarted.rst:847
msgid ""
"Between runs, CMake preserves the values set for all options. CMake has the "
"following build types defined:"
msgstr ""

#: ../../../GettingStarted.rst:850
msgid "Debug"
msgstr ""

#: ../../../GettingStarted.rst:852
msgid ""
"These builds are the default. The build system will compile the tools and "
"libraries unoptimized, with debugging information, and asserts enabled."
msgstr ""

#: ../../../GettingStarted.rst:855
msgid "Release"
msgstr ""

#: ../../../GettingStarted.rst:857
msgid ""
"For these builds, the build system will compile the tools and libraries with "
"optimizations enabled and not generate debug info. CMakes default "
"optimization level is -O3. This can be configured by setting the "
"``CMAKE_CXX_FLAGS_RELEASE`` variable on the CMake command line."
msgstr ""

#: ../../../GettingStarted.rst:862
msgid "RelWithDebInfo"
msgstr ""

#: ../../../GettingStarted.rst:864
msgid ""
"These builds are useful when debugging. They generate optimized binaries "
"with debug information. CMakes default optimization level is -O2. This can "
"be configured by setting the ``CMAKE_CXX_FLAGS_RELWITHDEBINFO`` variable on "
"the CMake command line."
msgstr ""

#: ../../../GettingStarted.rst:869
msgid ""
"Once you have LLVM configured, you can build it by entering the *OBJ_ROOT* "
"directory and issuing the following command:"
msgstr ""

#: ../../../GettingStarted.rst:876
msgid ""
"If the build fails, please `check here`_ to see if you are using a version "
"of GCC that is known not to compile LLVM."
msgstr ""

#: ../../../GettingStarted.rst:879
msgid ""
"If you have multiple processors in your machine, you may wish to use some of "
"the parallel build options provided by GNU Make.  For example, you could use "
"the command:"
msgstr ""

#: ../../../GettingStarted.rst:887
msgid ""
"There are several special targets which are useful when working with the "
"LLVM source code:"
msgstr ""

#: ../../../GettingStarted.rst:890
msgid "``make clean``"
msgstr ""

#: ../../../GettingStarted.rst:892
msgid ""
"Removes all files generated by the build.  This includes object files, "
"generated C/C++ files, libraries, and executables."
msgstr ""

#: ../../../GettingStarted.rst:895
msgid "``make install``"
msgstr ""

#: ../../../GettingStarted.rst:897
msgid ""
"Installs LLVM header files, libraries, tools, and documentation in a "
"hierarchy under ``$PREFIX``, specified with ``CMAKE_INSTALL_PREFIX``, which "
"defaults to ``/usr/local``."
msgstr ""

#: ../../../GettingStarted.rst:901
msgid "``make docs-llvm-html``"
msgstr ""

#: ../../../GettingStarted.rst:903
msgid ""
"If configured with ``-DLLVM_ENABLE_SPHINX=On``, this will generate a "
"directory at ``OBJ_ROOT/docs/html`` which contains the HTML formatted "
"documentation."
msgstr ""

#: ../../../GettingStarted.rst:907
msgid "Cross-Compiling LLVM"
msgstr ""

#: ../../../GettingStarted.rst:909
msgid ""
"It is possible to cross-compile LLVM itself. That is, you can create LLVM "
"executables and libraries to be hosted on a platform different from the "
"platform where they are built (a Canadian Cross build). To generate build "
"files for cross-compiling CMake provides a variable ``CMAKE_TOOLCHAIN_FILE`` "
"which can define compiler flags and variables used during the CMake test "
"operations."
msgstr ""

#: ../../../GettingStarted.rst:915
msgid ""
"The result of such a build is executables that are not runnable on on the "
"build host but can be executed on the target. As an example the following "
"CMake invocation can generate build files targeting iOS. This will work on "
"Mac OS X with the latest Xcode:"
msgstr ""

#: ../../../GettingStarted.rst:928
msgid ""
"Note: There are some additional flags that need to be passed when building "
"for iOS due to limitations in the iOS SDK."
msgstr ""

#: ../../../GettingStarted.rst:931
msgid ""
"Check :doc:`HowToCrossCompileLLVM` and `Clang docs on how to cross-compile "
"in general <http://clang.llvm.org/docs/CrossCompilation.html>`_ for more "
"information about cross-compiling."
msgstr ""

#: ../../../GettingStarted.rst:936
msgid "The Location of LLVM Object Files"
msgstr ""

#: ../../../GettingStarted.rst:938
msgid ""
"The LLVM build system is capable of sharing a single LLVM source tree among "
"several LLVM builds.  Hence, it is possible to build LLVM for several "
"different platforms or configurations using the same source tree."
msgstr ""

#: ../../../GettingStarted.rst:942
msgid "Change directory to where the LLVM object files should live:"
msgstr ""

#: ../../../GettingStarted.rst:948
msgid "Run ``cmake``:"
msgstr ""

#: ../../../GettingStarted.rst:954
msgid ""
"The LLVM build will create a structure underneath *OBJ_ROOT* that matches "
"the LLVM source tree. At each level where source files are present in the "
"source tree there will be a corresponding ``CMakeFiles`` directory in the "
"*OBJ_ROOT*. Underneath that directory there is another directory with a name "
"ending in ``.dir`` under which you'll find object files for each source."
msgstr ""

#: ../../../GettingStarted.rst:960
msgid "For example:"
msgstr ""

#: ../../../GettingStarted.rst:969
msgid "Optional Configuration Items"
msgstr ""

#: ../../../GettingStarted.rst:971
msgid ""
"If you're running on a Linux system that supports the `binfmt_misc <http://"
"en.wikipedia.org/wiki/binfmt_misc>`_ module, and you have root access on the "
"system, you can set your system up to execute LLVM bitcode files directly. "
"To do this, use commands like this (the first command may not be required if "
"you are already using the module):"
msgstr ""

#: ../../../GettingStarted.rst:984
msgid ""
"This allows you to execute LLVM bitcode files directly.  On Debian, you can "
"also use this command instead of the 'echo' command above:"
msgstr ""

#: ../../../GettingStarted.rst:995
msgid "Directory Layout"
msgstr ""

#: ../../../GettingStarted.rst:997
msgid ""
"One useful source of information about the LLVM source base is the LLVM "
"`doxygen <http://www.doxygen.org/>`_ documentation available at `<http://"
"llvm.org/doxygen/>`_.  The following is a brief introduction to code layout:"
msgstr ""

#: ../../../GettingStarted.rst:1003
msgid "``llvm/examples``"
msgstr ""

#: ../../../GettingStarted.rst:1005
msgid "Simple examples using the LLVM IR and JIT."
msgstr ""

#: ../../../GettingStarted.rst:1008
msgid "``llvm/include``"
msgstr ""

#: ../../../GettingStarted.rst:1010
msgid ""
"Public header files exported from the LLVM library. The three main "
"subdirectories:"
msgstr ""

#: ../../../GettingStarted.rst:1012
msgid "``llvm/include/llvm``"
msgstr ""

#: ../../../GettingStarted.rst:1014
msgid ""
"All LLVM-specific header files, and  subdirectories for different portions "
"of LLVM: ``Analysis``, ``CodeGen``, ``Target``, ``Transforms``, etc..."
msgstr ""

#: ../../../GettingStarted.rst:1017
msgid "``llvm/include/llvm/Support``"
msgstr ""

#: ../../../GettingStarted.rst:1019
msgid ""
"Generic support libraries provided with LLVM but not necessarily specific to "
"LLVM. For example, some C++ STL utilities and a Command Line option "
"processing library store header files here."
msgstr ""

#: ../../../GettingStarted.rst:1023
msgid "``llvm/include/llvm/Config``"
msgstr ""

#: ../../../GettingStarted.rst:1025
msgid ""
"Header files configured by the ``configure`` script. They wrap \"standard\" "
"UNIX and C header files.  Source code can include these header files which "
"automatically take care of the conditional #includes that the ``configure`` "
"script generates."
msgstr ""

#: ../../../GettingStarted.rst:1031
msgid "``llvm/lib``"
msgstr ""

#: ../../../GettingStarted.rst:1033
msgid ""
"Most source files are here. By putting code in libraries, LLVM makes it easy "
"to share code among the `tools`_."
msgstr ""

#: ../../../GettingStarted.rst:1036
msgid "``llvm/lib/IR/``"
msgstr ""

#: ../../../GettingStarted.rst:1038
msgid ""
"Core LLVM source files that implement core classes like Instruction and "
"BasicBlock."
msgstr ""

#: ../../../GettingStarted.rst:1041
msgid "``llvm/lib/AsmParser/``"
msgstr ""

#: ../../../GettingStarted.rst:1043
msgid "Source code for the LLVM assembly language parser library."
msgstr ""

#: ../../../GettingStarted.rst:1045
msgid "``llvm/lib/Bitcode/``"
msgstr ""

#: ../../../GettingStarted.rst:1047
msgid "Code for reading and writing bitcode."
msgstr ""

#: ../../../GettingStarted.rst:1049
msgid "``llvm/lib/Analysis/``"
msgstr ""

#: ../../../GettingStarted.rst:1051
msgid ""
"A variety of program analyses, such as Call Graphs, Induction Variables, "
"Natural Loop Identification, etc."
msgstr ""

#: ../../../GettingStarted.rst:1054
msgid "``llvm/lib/Transforms/``"
msgstr ""

#: ../../../GettingStarted.rst:1056
msgid ""
"IR-to-IR program transformations, such as Aggressive Dead Code Elimination, "
"Sparse Conditional Constant Propagation, Inlining, Loop Invariant Code "
"Motion, Dead Global Elimination, and many others."
msgstr ""

#: ../../../GettingStarted.rst:1060
msgid "``llvm/lib/Target/``"
msgstr ""

#: ../../../GettingStarted.rst:1062
msgid ""
"Files describing target architectures for code generation.  For example, "
"``llvm/lib/Target/X86`` holds the X86 machine description."
msgstr ""

#: ../../../GettingStarted.rst:1065
msgid "``llvm/lib/CodeGen/``"
msgstr ""

#: ../../../GettingStarted.rst:1067
msgid ""
"The major parts of the code generator: Instruction Selector, Instruction "
"Scheduling, and Register Allocation."
msgstr ""

#: ../../../GettingStarted.rst:1070
msgid "``llvm/lib/MC/``"
msgstr ""

#: ../../../GettingStarted.rst:1072
msgid "(FIXME: T.B.D.)  ....?"
msgstr ""

#: ../../../GettingStarted.rst:1074
msgid "``llvm/lib/ExecutionEngine/``"
msgstr ""

#: ../../../GettingStarted.rst:1076
msgid ""
"Libraries for directly executing bitcode at runtime in interpreted and JIT-"
"compiled scenarios."
msgstr ""

#: ../../../GettingStarted.rst:1079
msgid "``llvm/lib/Support/``"
msgstr ""

#: ../../../GettingStarted.rst:1081
msgid ""
"Source code that corresponding to the header files in ``llvm/include/ADT/`` "
"and ``llvm/include/Support/``."
msgstr ""

#: ../../../GettingStarted.rst:1085
msgid "``llvm/projects``"
msgstr ""

#: ../../../GettingStarted.rst:1087
msgid ""
"Projects not strictly part of LLVM but shipped with LLVM. This is also the "
"directory for creating your own LLVM-based projects which leverage the LLVM "
"build system."
msgstr ""

#: ../../../GettingStarted.rst:1092
msgid "``llvm/test``"
msgstr ""

#: ../../../GettingStarted.rst:1094
msgid ""
"Feature and regression tests and other sanity checks on LLVM infrastructure. "
"These are intended to run quickly and cover a lot of territory without being "
"exhaustive."
msgstr ""

#: ../../../GettingStarted.rst:1098
msgid "``test-suite``"
msgstr ""

#: ../../../GettingStarted.rst:1100
msgid ""
"A comprehensive correctness, performance, and benchmarking test suite for "
"LLVM. Comes in a separate Subversion module because not every LLVM user is "
"interested in such a comprehensive suite. For details see the :doc:`Testing "
"Guide <TestingGuide>` document."
msgstr ""

#: ../../../GettingStarted.rst:1108
msgid "``llvm/tools``"
msgstr ""

#: ../../../GettingStarted.rst:1110
msgid ""
"Executables built out of the libraries above, which form the main part of "
"the user interface.  You can always get help for a tool by typing "
"``tool_name -help``.  The following is a brief introduction to the most "
"important tools.  More detailed information is in the `Command Guide "
"<CommandGuide/index.html>`_."
msgstr ""

#: ../../../GettingStarted.rst:1116
msgid "``bugpoint``"
msgstr ""

#: ../../../GettingStarted.rst:1118
msgid ""
"``bugpoint`` is used to debug optimization passes or code generation "
"backends by narrowing down the given test case to the minimum number of "
"passes and/or instructions that still cause a problem, whether it is a crash "
"or miscompilation. See `<HowToSubmitABug.html>`_ for more information on "
"using ``bugpoint``."
msgstr ""

#: ../../../GettingStarted.rst:1124
msgid "``llvm-ar``"
msgstr ""

#: ../../../GettingStarted.rst:1126
msgid ""
"The archiver produces an archive containing the given LLVM bitcode files, "
"optionally with an index for faster lookup."
msgstr ""

#: ../../../GettingStarted.rst:1129
msgid "``llvm-as``"
msgstr ""

#: ../../../GettingStarted.rst:1131
msgid ""
"The assembler transforms the human readable LLVM assembly to LLVM bitcode."
msgstr ""

#: ../../../GettingStarted.rst:1133
msgid "``llvm-dis``"
msgstr ""

#: ../../../GettingStarted.rst:1135
msgid ""
"The disassembler transforms the LLVM bitcode to human readable LLVM assembly."
msgstr ""

#: ../../../GettingStarted.rst:1137
msgid "``llvm-link``"
msgstr ""

#: ../../../GettingStarted.rst:1139
msgid ""
"``llvm-link``, not surprisingly, links multiple LLVM modules into a single "
"program."
msgstr ""

#: ../../../GettingStarted.rst:1142
msgid "``lli``"
msgstr ""

#: ../../../GettingStarted.rst:1144
msgid ""
"``lli`` is the LLVM interpreter, which can directly execute LLVM bitcode "
"(although very slowly...). For architectures that support it (currently x86, "
"Sparc, and PowerPC), by default, ``lli`` will function as a Just-In-Time "
"compiler (if the functionality was compiled in), and will execute the code "
"*much* faster than the interpreter."
msgstr ""

#: ../../../GettingStarted.rst:1150
msgid "``llc``"
msgstr ""

#: ../../../GettingStarted.rst:1152
msgid ""
"``llc`` is the LLVM backend compiler, which translates LLVM bitcode to a "
"native code assembly file."
msgstr ""

#: ../../../GettingStarted.rst:1155
msgid "``opt``"
msgstr ""

#: ../../../GettingStarted.rst:1157
msgid ""
"``opt`` reads LLVM bitcode, applies a series of LLVM to LLVM transformations "
"(which are specified on the command line), and outputs the resultant "
"bitcode.   '``opt -help``'  is a good way to get a list of the program "
"transformations available in LLVM."
msgstr ""

#: ../../../GettingStarted.rst:1162
msgid ""
"``opt`` can also  run a specific analysis on an input LLVM bitcode file and "
"print  the results.  Primarily useful for debugging analyses, or "
"familiarizing yourself with what an analysis does."
msgstr ""

#: ../../../GettingStarted.rst:1167
msgid "``llvm/utils``"
msgstr ""

#: ../../../GettingStarted.rst:1169
msgid ""
"Utilities for working with LLVM source code; some are part of the build "
"process because they are code generators for parts of the infrastructure."
msgstr ""

#: ../../../GettingStarted.rst:1173
msgid "``codegen-diff``"
msgstr ""

#: ../../../GettingStarted.rst:1175
msgid ""
"``codegen-diff`` finds differences between code that LLC generates and code "
"that LLI generates. This is useful if you are debugging one of them, "
"assuming that the other generates correct output. For the full user manual, "
"run ```perldoc codegen-diff'``."
msgstr ""

#: ../../../GettingStarted.rst:1180
msgid "``emacs/``"
msgstr ""

#: ../../../GettingStarted.rst:1182
msgid ""
"Emacs and XEmacs syntax highlighting  for LLVM   assembly files and TableGen "
"description files.  See the ``README`` for information on using them."
msgstr ""

#: ../../../GettingStarted.rst:1185
msgid "``getsrcs.sh``"
msgstr ""

#: ../../../GettingStarted.rst:1187
msgid ""
"Finds and outputs all non-generated source files, useful if one wishes to do "
"a lot of development across directories and does not want to find each file. "
"One way to use it is to run, for example: ``xemacs `utils/getsources.sh``` "
"from the top of the LLVM source tree."
msgstr ""

#: ../../../GettingStarted.rst:1193
msgid "``llvmgrep``"
msgstr ""

#: ../../../GettingStarted.rst:1195
msgid ""
"Performs an ``egrep -H -n`` on each source file in LLVM and passes to it a "
"regular expression provided on ``llvmgrep``'s command line. This is an "
"efficient way of searching the source base for a particular regular "
"expression."
msgstr ""

#: ../../../GettingStarted.rst:1200
msgid "``makellvm``"
msgstr ""

#: ../../../GettingStarted.rst:1202
msgid ""
"Compiles all files in the current directory, then compiles and links the "
"tool that is the first argument. For example, assuming you are in  ``llvm/"
"lib/Target/Sparc``, if ``makellvm`` is in your path,  running ``makellvm "
"llc`` will make a build of the current directory, switch to directory ``llvm/"
"tools/llc`` and build it, causing a re-linking of LLC."
msgstr ""

#: ../../../GettingStarted.rst:1209
msgid "``TableGen/``"
msgstr ""

#: ../../../GettingStarted.rst:1211
msgid ""
"Contains the tool used to generate register descriptions, instruction set "
"descriptions, and even assemblers from common TableGen description files."
msgstr ""

#: ../../../GettingStarted.rst:1215
msgid "``vim/``"
msgstr ""

#: ../../../GettingStarted.rst:1217
msgid ""
"vim syntax-highlighting for LLVM assembly files and TableGen description "
"files. See the    ``README`` for how to use them."
msgstr ""

#: ../../../GettingStarted.rst:1223
msgid "An Example Using the LLVM Tool Chain"
msgstr ""

#: ../../../GettingStarted.rst:1225
msgid "This section gives an example of using LLVM with the Clang front end."
msgstr ""

#: ../../../GettingStarted.rst:1228
msgid "Example with clang"
msgstr ""

#: ../../../GettingStarted.rst:1230
msgid "First, create a simple C file, name it 'hello.c':"
msgstr ""

#: ../../../GettingStarted.rst:1241
msgid "Next, compile the C file into a native executable:"
msgstr ""

#: ../../../GettingStarted.rst:1249
msgid ""
"Clang works just like GCC by default.  The standard -S and -c arguments work "
"as usual (producing a native .s or .o file, respectively)."
msgstr ""

#: ../../../GettingStarted.rst:1252
msgid "Next, compile the C file into an LLVM bitcode file:"
msgstr ""

#: ../../../GettingStarted.rst:1258
msgid ""
"The -emit-llvm option can be used with the -S or -c options to emit an LLVM "
"``.ll`` or ``.bc`` file (respectively) for the code.  This allows you to use "
"the `standard LLVM tools <CommandGuide/index.html>`_ on the bitcode file."
msgstr ""

#: ../../../GettingStarted.rst:1262
msgid "Run the program in both forms. To run the program, use:"
msgstr ""

#: ../../../GettingStarted.rst:1268
msgid "and"
msgstr ""

#: ../../../GettingStarted.rst:1274
msgid ""
"The second examples shows how to invoke the LLVM JIT, :doc:`lli "
"<CommandGuide/lli>`."
msgstr ""

#: ../../../GettingStarted.rst:1277
msgid "Use the ``llvm-dis`` utility to take a look at the LLVM assembly code:"
msgstr ""

#: ../../../GettingStarted.rst:1283
msgid "Compile the program to native assembly using the LLC code generator:"
msgstr ""

#: ../../../GettingStarted.rst:1289
msgid "Assemble the native assembly language file into a program:"
msgstr ""

#: ../../../GettingStarted.rst:1297
msgid "Execute the native code program:"
msgstr ""

#: ../../../GettingStarted.rst:1303
msgid ""
"Note that using clang to compile directly to native code (i.e. when the ``-"
"emit-llvm`` option is not present) does steps 6/7/8 for you."
msgstr ""

#: ../../../GettingStarted.rst:1307
msgid "Common Problems"
msgstr ""

#: ../../../GettingStarted.rst:1309
msgid ""
"If you are having problems building or using LLVM, or if you have any other "
"general questions about LLVM, please consult the `Frequently Asked Questions "
"<FAQ.html>`_ page."
msgstr ""

#: ../../../GettingStarted.rst:1316
msgid "Links"
msgstr ""

#: ../../../GettingStarted.rst:1318
msgid ""
"This document is just an **introduction** on how to use LLVM to do some "
"simple things... there are many more interesting and complicated things that "
"you can do that aren't documented here (but we'll gladly accept a patch if "
"you want to write something up!).  For more information about LLVM, check "
"out:"
msgstr ""

#: ../../../GettingStarted.rst:1323
msgid "`LLVM Homepage <http://llvm.org/>`_"
msgstr ""

#: ../../../GettingStarted.rst:1324
msgid "`LLVM Doxygen Tree <http://llvm.org/doxygen/>`_"
msgstr ""

#: ../../../GettingStarted.rst:1325
msgid ""
"`Starting a Project that Uses LLVM <http://llvm.org/docs/Projects.html>`_"
msgstr ""
