# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../TableGen/BackEnds.rst:3
msgid "TableGen BackEnds"
msgstr ""

#: ../../../TableGen/BackEnds.rst:9
msgid "Introduction"
msgstr ""

#: ../../../TableGen/BackEnds.rst:11
msgid ""
"TableGen backends are at the core of TableGen's functionality. The source "
"files provide the semantics to a generated (in memory) structure, but it's "
"up to the backend to print this out in a way that is meaningful to the user "
"(normally a C program including a file or a textual list of warnings, "
"options and error messages)."
msgstr ""

#: ../../../TableGen/BackEnds.rst:17
msgid ""
"TableGen is used by both LLVM and Clang with very different goals. LLVM uses "
"it as a way to automate the generation of massive amounts of information "
"regarding instructions, schedules, cores and architecture features. Some "
"backends generate output that is consumed by more than one source file, so "
"they need to be created in a way that is easy to use pre-processor tricks. "
"Some backends can also print C code structures, so that they can be directly "
"included as-is."
msgstr ""

#: ../../../TableGen/BackEnds.rst:24
msgid ""
"Clang, on the other hand, uses it mainly for diagnostic messages (errors, "
"warnings, tips) and attributes, so more on the textual end of the scale."
msgstr ""

#: ../../../TableGen/BackEnds.rst:28
msgid "LLVM BackEnds"
msgstr ""

#: ../../../TableGen/BackEnds.rst:31
msgid ""
"This document is raw. Each section below needs three sub-sections: "
"description of its purpose with a list of users, output generated from "
"generic input, and finally why it needed a new backend (in case there's "
"something similar)."
msgstr ""

#: ../../../TableGen/BackEnds.rst:35
msgid ""
"Overall, each backend will take the same TableGen file type and transform "
"into similar output for different targets/uses. There is an implicit "
"contract between the TableGen files, the back-ends and their users."
msgstr ""

#: ../../../TableGen/BackEnds.rst:39
msgid ""
"For instance, a global contract is that each back-end produces macro-guarded "
"sections. Based on whether the file is included by a header or a source "
"file, or even in which context of each file the include is being used, you "
"have todefine a macro just before including it, to get the right output:"
msgstr ""

#: ../../../TableGen/BackEnds.rst:49
msgid ""
"And just part of the generated file would be included. This is useful if you "
"need the same information in multiple formats (instantiation, "
"initialization, getter/setter functions, etc) from the same source TableGen "
"file without having to re-compile the TableGen file multiple times."
msgstr ""

#: ../../../TableGen/BackEnds.rst:54
msgid ""
"Sometimes, multiple macros might be defined before the same include file to "
"output multiple blocks:"
msgstr ""

#: ../../../TableGen/BackEnds.rst:64
msgid ""
"The macros will be undef'd automatically as they're used, in the include "
"file."
msgstr ""

#: ../../../TableGen/BackEnds.rst:66
msgid ""
"On all LLVM back-ends, the ``llvm-tblgen`` binary will be executed on the "
"root TableGen file ``<Target>.td``, which should include all others. This "
"guarantees that all information needed is accessible, and that no "
"duplication is needed in the TableGen files."
msgstr ""

#: ../../../TableGen/BackEnds.rst:72
msgid "CodeEmitter"
msgstr ""

#: ../../../TableGen/BackEnds.rst:74
msgid ""
"**Purpose**: CodeEmitterGen uses the descriptions of instructions and their "
"fields to construct an automated code emitter: a function that, given a "
"MachineInstr, returns the (currently, 32-bit unsigned) value of the "
"instruction."
msgstr ""

#: ../../../TableGen/BackEnds.rst:78
msgid ""
"**Output**: C++ code, implementing the target's CodeEmitter class by "
"overriding the virtual functions as ``<Target>CodeEmitter::function()``."
msgstr ""

#: ../../../TableGen/BackEnds.rst:81
msgid ""
"**Usage**: Used to include directly at the end of ``<Target>MCCodeEmitter."
"cpp``."
msgstr ""

#: ../../../TableGen/BackEnds.rst:84
msgid "RegisterInfo"
msgstr ""

#: ../../../TableGen/BackEnds.rst:86
msgid ""
"**Purpose**: This tablegen backend is responsible for emitting a description "
"of a target register file for a code generator.  It uses instances of the "
"Register, RegisterAliases, and RegisterClass classes to gather this "
"information."
msgstr ""

#: ../../../TableGen/BackEnds.rst:90
msgid ""
"**Output**: C++ code with enums and structures representing the register "
"mappings, properties, masks, etc."
msgstr ""

#: ../../../TableGen/BackEnds.rst:93
msgid ""
"**Usage**: Both on ``<Target>BaseRegisterInfo`` and ``<Target>MCTargetDesc`` "
"(headers and source files) with macros defining in which they are for "
"declaration vs. initialization issues."
msgstr ""

#: ../../../TableGen/BackEnds.rst:98
msgid "InstrInfo"
msgstr ""

#: ../../../TableGen/BackEnds.rst:100
msgid ""
"**Purpose**: This tablegen backend is responsible for emitting a description "
"of the target instruction set for the code generator. (what are the "
"differences from CodeEmitter?)"
msgstr ""

#: ../../../TableGen/BackEnds.rst:103
msgid ""
"**Output**: C++ code with enums and structures representing the instruction "
"mappings, properties, masks, etc."
msgstr ""

#: ../../../TableGen/BackEnds.rst:106
msgid ""
"**Usage**: Both on ``<Target>BaseInstrInfo`` and ``<Target>MCTargetDesc`` "
"(headers and source files) with macros defining in which they are for "
"declaration vs. initialization issues."
msgstr ""

#: ../../../TableGen/BackEnds.rst:111
msgid "AsmWriter"
msgstr ""

#: ../../../TableGen/BackEnds.rst:113
msgid "**Purpose**: Emits an assembly printer for the current target."
msgstr ""

#: ../../../TableGen/BackEnds.rst:115
msgid ""
"**Output**: Implementation of ``<Target>InstPrinter::printInstruction()``, "
"among other things."
msgstr ""

#: ../../../TableGen/BackEnds.rst:118
msgid ""
"**Usage**: Included directly into ``InstPrinter/<Target>InstPrinter.cpp``."
msgstr ""

#: ../../../TableGen/BackEnds.rst:121
msgid "AsmMatcher"
msgstr ""

#: ../../../TableGen/BackEnds.rst:123
msgid ""
"**Purpose**: Emits a target specifier matcher for converting parsed assembly "
"operands in the MCInst structures. It also emits a matcher for custom "
"operand parsing. Extensive documentation is written on the "
"``AsmMatcherEmitter.cpp`` file."
msgstr ""

#: ../../../TableGen/BackEnds.rst:128
msgid "**Output**: Assembler parsers' matcher functions, declarations, etc."
msgstr ""

#: ../../../TableGen/BackEnds.rst:130
msgid ""
"**Usage**: Used in back-ends' ``AsmParser/<Target>AsmParser.cpp`` for "
"building the AsmParser class."
msgstr ""

#: ../../../TableGen/BackEnds.rst:134
msgid "Disassembler"
msgstr ""

#: ../../../TableGen/BackEnds.rst:136
msgid ""
"**Purpose**: Contains disassembler table emitters for various architectures. "
"Extensive documentation is written on the ``DisassemblerEmitter.cpp`` file."
msgstr ""

#: ../../../TableGen/BackEnds.rst:140
msgid "**Output**: Decoding tables, static decoding functions, etc."
msgstr ""

#: ../../../TableGen/BackEnds.rst:142
msgid ""
"**Usage**: Directly included in ``Disassembler/<Target>Disassembler.cpp`` to "
"cater for all default decodings, after all hand-made ones."
msgstr ""

#: ../../../TableGen/BackEnds.rst:146
msgid "PseudoLowering"
msgstr ""

#: ../../../TableGen/BackEnds.rst:148
msgid "**Purpose**: Generate pseudo instruction lowering."
msgstr ""

#: ../../../TableGen/BackEnds.rst:150
msgid ""
"**Output**: Implements ``<Target>AsmPrinter::emitPseudoExpansionLowering()``."
msgstr ""

#: ../../../TableGen/BackEnds.rst:152
msgid "**Usage**: Included directly into ``<Target>AsmPrinter.cpp``."
msgstr ""

#: ../../../TableGen/BackEnds.rst:155
msgid "CallingConv"
msgstr ""

#: ../../../TableGen/BackEnds.rst:157
msgid ""
"**Purpose**: Responsible for emitting descriptions of the calling "
"conventions supported by this target."
msgstr ""

#: ../../../TableGen/BackEnds.rst:160
msgid ""
"**Output**: Implement static functions to deal with calling conventions "
"chained by matching styles, returning false on no match."
msgstr ""

#: ../../../TableGen/BackEnds.rst:163
msgid ""
"**Usage**: Used in ISelLowering and FastIsel as function pointers to "
"implementation returned by a CC selection function."
msgstr ""

#: ../../../TableGen/BackEnds.rst:167
msgid "DAGISel"
msgstr ""

#: ../../../TableGen/BackEnds.rst:169
msgid "**Purpose**: Generate a DAG instruction selector."
msgstr ""

#: ../../../TableGen/BackEnds.rst:171
msgid "**Output**: Creates huge functions for automating DAG selection."
msgstr ""

#: ../../../TableGen/BackEnds.rst:173
msgid ""
"**Usage**: Included in ``<Target>ISelDAGToDAG.cpp`` inside the target's "
"implementation of ``SelectionDAGISel``."
msgstr ""

#: ../../../TableGen/BackEnds.rst:177
msgid "DFAPacketizer"
msgstr ""

#: ../../../TableGen/BackEnds.rst:179
msgid ""
"**Purpose**: This class parses the Schedule.td file and produces an API that "
"can be used to reason about whether an instruction can be added to a packet "
"on a VLIW architecture. The class internally generates a deterministic "
"finite automaton (DFA) that models all possible mappings of machine "
"instructions to functional units as instructions are added to a packet."
msgstr ""

#: ../../../TableGen/BackEnds.rst:185
msgid "**Output**: Scheduling tables for GPU back-ends (Hexagon, AMD)."
msgstr ""

#: ../../../TableGen/BackEnds.rst:187
msgid "**Usage**: Included directly on ``<Target>InstrInfo.cpp``."
msgstr ""

#: ../../../TableGen/BackEnds.rst:190
msgid "FastISel"
msgstr ""

#: ../../../TableGen/BackEnds.rst:192
msgid ""
"**Purpose**: This tablegen backend emits code for use by the \"fast\" "
"instruction selection algorithm. See the comments at the top of lib/CodeGen/"
"SelectionDAG/FastISel.cpp for background. This file scans through the "
"target's tablegen instruction-info files and extracts instructions with "
"obvious-looking patterns, and it emits code to look up these instructions by "
"type and operator."
msgstr ""

#: ../../../TableGen/BackEnds.rst:199
msgid "**Output**: Generates ``Predicate`` and ``FastEmit`` methods."
msgstr ""

#: ../../../TableGen/BackEnds.rst:201
msgid ""
"**Usage**: Implements private methods of the targets' implementation of "
"``FastISel`` class."
msgstr ""

#: ../../../TableGen/BackEnds.rst:205
msgid "Subtarget"
msgstr ""

#: ../../../TableGen/BackEnds.rst:207
msgid "**Purpose**: Generate subtarget enumerations."
msgstr ""

#: ../../../TableGen/BackEnds.rst:209
msgid "**Output**: Enums, globals, local tables for sub-target information."
msgstr ""

#: ../../../TableGen/BackEnds.rst:211
msgid ""
"**Usage**: Populates ``<Target>Subtarget`` and ``MCTargetDesc/"
"<Target>MCTargetDesc`` files (both headers and source)."
msgstr ""

#: ../../../TableGen/BackEnds.rst:215
msgid "Intrinsic"
msgstr ""

#: ../../../TableGen/BackEnds.rst:217
msgid "**Purpose**: Generate (target) intrinsic information."
msgstr ""

#: ../../../TableGen/BackEnds.rst:220
msgid "OptParserDefs"
msgstr ""

#: ../../../TableGen/BackEnds.rst:222
msgid "**Purpose**: Print enum values for a class."
msgstr ""

#: ../../../TableGen/BackEnds.rst:225
msgid "CTags"
msgstr ""

#: ../../../TableGen/BackEnds.rst:227
msgid ""
"**Purpose**: This tablegen backend emits an index of definitions in ctags(1) "
"format. A helper script, utils/TableGen/tdtags, provides an easier-to-use "
"interface; run 'tdtags -H' for documentation."
msgstr ""

#: ../../../TableGen/BackEnds.rst:232
msgid "X86EVEX2VEX"
msgstr ""

#: ../../../TableGen/BackEnds.rst:234
msgid ""
"**Purpose**: This X86 specific tablegen backend emits tables that map EVEX "
"encoded instructions to their VEX encoded identical instruction."
msgstr ""

#: ../../../TableGen/BackEnds.rst:238
msgid "Clang BackEnds"
msgstr ""

#: ../../../TableGen/BackEnds.rst:241
msgid "ClangAttrClasses"
msgstr ""

#: ../../../TableGen/BackEnds.rst:243
msgid ""
"**Purpose**: Creates Attrs.inc, which contains semantic attribute class "
"declarations for any attribute in ``Attr.td`` that has not set ``ASTNode = "
"0``. This file is included as part of ``Attr.h``."
msgstr ""

#: ../../../TableGen/BackEnds.rst:248
msgid "ClangAttrParserStringSwitches"
msgstr ""

#: ../../../TableGen/BackEnds.rst:250
msgid ""
"**Purpose**: Creates AttrParserStringSwitches.inc, which contains "
"StringSwitch::Case statements for parser-related string switches. Each "
"switch is given its own macro (such as ``CLANG_ATTR_ARG_CONTEXT_LIST``, or "
"``CLANG_ATTR_IDENTIFIER_ARG_LIST``), which is expected to be defined before "
"including AttrParserStringSwitches.inc, and undefined after."
msgstr ""

#: ../../../TableGen/BackEnds.rst:257
msgid "ClangAttrImpl"
msgstr ""

#: ../../../TableGen/BackEnds.rst:259
msgid ""
"**Purpose**: Creates AttrImpl.inc, which contains semantic attribute class "
"definitions for any attribute in ``Attr.td`` that has not set ``ASTNode = "
"0``. This file is included as part of ``AttrImpl.cpp``."
msgstr ""

#: ../../../TableGen/BackEnds.rst:264
msgid "ClangAttrList"
msgstr ""

#: ../../../TableGen/BackEnds.rst:266
msgid ""
"**Purpose**: Creates AttrList.inc, which is used when a list of semantic "
"attribute identifiers is required. For instance, ``AttrKinds.h`` includes "
"this file to generate the list of ``attr::Kind`` enumeration values. This "
"list is separated out into multiple categories: attributes, inheritable "
"attributes, and inheritable parameter attributes. This categorization "
"happens automatically based on information in ``Attr.td`` and is used to "
"implement the ``classof`` functionality required for ``dyn_cast`` and "
"similar APIs."
msgstr ""

#: ../../../TableGen/BackEnds.rst:275
msgid "ClangAttrPCHRead"
msgstr ""

#: ../../../TableGen/BackEnds.rst:277
msgid ""
"**Purpose**: Creates AttrPCHRead.inc, which is used to deserialize "
"attributes in the ``ASTReader::ReadAttributes`` function."
msgstr ""

#: ../../../TableGen/BackEnds.rst:281
msgid "ClangAttrPCHWrite"
msgstr ""

#: ../../../TableGen/BackEnds.rst:283
msgid ""
"**Purpose**: Creates AttrPCHWrite.inc, which is used to serialize attributes "
"in the ``ASTWriter::WriteAttributes`` function."
msgstr ""

#: ../../../TableGen/BackEnds.rst:287
msgid "ClangAttrSpellings"
msgstr ""

#: ../../../TableGen/BackEnds.rst:289
msgid ""
"**Purpose**: Creates AttrSpellings.inc, which is used to implement the "
"``__has_attribute`` feature test macro."
msgstr ""

#: ../../../TableGen/BackEnds.rst:293
msgid "ClangAttrSpellingListIndex"
msgstr ""

#: ../../../TableGen/BackEnds.rst:295
msgid ""
"**Purpose**: Creates AttrSpellingListIndex.inc, which is used to map parsed "
"attribute spellings (including which syntax or scope was used) to an "
"attribute spelling list index. These spelling list index values are internal "
"implementation details exposed via ``AttributeList::"
"getAttributeSpellingListIndex``."
msgstr ""

#: ../../../TableGen/BackEnds.rst:302
msgid "ClangAttrVisitor"
msgstr ""

#: ../../../TableGen/BackEnds.rst:304
msgid ""
"**Purpose**: Creates AttrVisitor.inc, which is used when implementing "
"recursive AST visitors."
msgstr ""

#: ../../../TableGen/BackEnds.rst:308
msgid "ClangAttrTemplateInstantiate"
msgstr ""

#: ../../../TableGen/BackEnds.rst:310
msgid ""
"**Purpose**: Creates AttrTemplateInstantiate.inc, which implements the "
"``instantiateTemplateAttribute`` function, used when instantiating a "
"template that requires an attribute to be cloned."
msgstr ""

#: ../../../TableGen/BackEnds.rst:315
msgid "ClangAttrParsedAttrList"
msgstr ""

#: ../../../TableGen/BackEnds.rst:317
msgid ""
"**Purpose**: Creates AttrParsedAttrList.inc, which is used to generate the "
"``AttributeList::Kind`` parsed attribute enumeration."
msgstr ""

#: ../../../TableGen/BackEnds.rst:321
msgid "ClangAttrParsedAttrImpl"
msgstr ""

#: ../../../TableGen/BackEnds.rst:323
msgid ""
"**Purpose**: Creates AttrParsedAttrImpl.inc, which is used by "
"``AttributeList.cpp`` to implement several functions on the "
"``AttributeList`` class. This functionality is implemented via the "
"``AttrInfoMap ParsedAttrInfo`` array, which contains one element per parsed "
"attribute object."
msgstr ""

#: ../../../TableGen/BackEnds.rst:329
msgid "ClangAttrParsedAttrKinds"
msgstr ""

#: ../../../TableGen/BackEnds.rst:331
msgid ""
"**Purpose**: Creates AttrParsedAttrKinds.inc, which is used to implement the "
"``AttributeList::getKind`` function, mapping a string (and syntax) to a "
"parsed attribute ``AttributeList::Kind`` enumeration."
msgstr ""

#: ../../../TableGen/BackEnds.rst:336
msgid "ClangAttrDump"
msgstr ""

#: ../../../TableGen/BackEnds.rst:338
msgid ""
"**Purpose**: Creates AttrDump.inc, which dumps information about an "
"attribute. It is used to implement ``ASTDumper::dumpAttr``."
msgstr ""

#: ../../../TableGen/BackEnds.rst:342
msgid "ClangDiagsDefs"
msgstr ""

#: ../../../TableGen/BackEnds.rst:344
msgid "Generate Clang diagnostics definitions."
msgstr ""

#: ../../../TableGen/BackEnds.rst:347
msgid "ClangDiagGroups"
msgstr ""

#: ../../../TableGen/BackEnds.rst:349
msgid "Generate Clang diagnostic groups."
msgstr ""

#: ../../../TableGen/BackEnds.rst:352
msgid "ClangDiagsIndexName"
msgstr ""

#: ../../../TableGen/BackEnds.rst:354
msgid "Generate Clang diagnostic name index."
msgstr ""

#: ../../../TableGen/BackEnds.rst:357
msgid "ClangCommentNodes"
msgstr ""

#: ../../../TableGen/BackEnds.rst:359
msgid "Generate Clang AST comment nodes."
msgstr ""

#: ../../../TableGen/BackEnds.rst:362
msgid "ClangDeclNodes"
msgstr ""

#: ../../../TableGen/BackEnds.rst:364
msgid "Generate Clang AST declaration nodes."
msgstr ""

#: ../../../TableGen/BackEnds.rst:367
msgid "ClangStmtNodes"
msgstr ""

#: ../../../TableGen/BackEnds.rst:369
msgid "Generate Clang AST statement nodes."
msgstr ""

#: ../../../TableGen/BackEnds.rst:372
msgid "ClangSACheckers"
msgstr ""

#: ../../../TableGen/BackEnds.rst:374
msgid "Generate Clang Static Analyzer checkers."
msgstr ""

#: ../../../TableGen/BackEnds.rst:377
msgid "ClangCommentHTMLTags"
msgstr ""

#: ../../../TableGen/BackEnds.rst:379
msgid ""
"Generate efficient matchers for HTML tag names that are used in "
"documentation comments."
msgstr ""

#: ../../../TableGen/BackEnds.rst:382
msgid "ClangCommentHTMLTagsProperties"
msgstr ""

#: ../../../TableGen/BackEnds.rst:384
msgid "Generate efficient matchers for HTML tag properties."
msgstr ""

#: ../../../TableGen/BackEnds.rst:387
msgid "ClangCommentHTMLNamedCharacterReferences"
msgstr ""

#: ../../../TableGen/BackEnds.rst:389
msgid ""
"Generate function to translate named character references to UTF-8 sequences."
msgstr ""

#: ../../../TableGen/BackEnds.rst:392
msgid "ClangCommentCommandInfo"
msgstr ""

#: ../../../TableGen/BackEnds.rst:394
msgid ""
"Generate command properties for commands that are used in documentation "
"comments."
msgstr ""

#: ../../../TableGen/BackEnds.rst:397
msgid "ClangCommentCommandList"
msgstr ""

#: ../../../TableGen/BackEnds.rst:399
msgid "Generate list of commands that are used in documentation comments."
msgstr ""

#: ../../../TableGen/BackEnds.rst:402
msgid "ArmNeon"
msgstr ""

#: ../../../TableGen/BackEnds.rst:404
msgid "Generate arm_neon.h for clang."
msgstr ""

#: ../../../TableGen/BackEnds.rst:407
msgid "ArmNeonSema"
msgstr ""

#: ../../../TableGen/BackEnds.rst:409
msgid "Generate ARM NEON sema support for clang."
msgstr ""

#: ../../../TableGen/BackEnds.rst:412
msgid "ArmNeonTest"
msgstr ""

#: ../../../TableGen/BackEnds.rst:414
msgid "Generate ARM NEON tests for clang."
msgstr ""

#: ../../../TableGen/BackEnds.rst:417
msgid "AttrDocs"
msgstr ""

#: ../../../TableGen/BackEnds.rst:419
msgid ""
"**Purpose**: Creates ``AttributeReference.rst`` from ``AttrDocs.td``, and is "
"used for documenting user-facing attributes."
msgstr ""

#: ../../../TableGen/BackEnds.rst:423
msgid "How to write a back-end"
msgstr ""

#: ../../../TableGen/BackEnds.rst:425
msgid "TODO."
msgstr ""

#: ../../../TableGen/BackEnds.rst:427
msgid ""
"Until we get a step-by-step HowTo for writing TableGen backends, you can at "
"least grab the boilerplate (build system, new files, etc.) from Clang's "
"r173931."
msgstr ""

#: ../../../TableGen/BackEnds.rst:431
msgid ""
"TODO: How they work, how to write one.  This section should not contain "
"details about any particular backend, except maybe ``-print-enums`` as an "
"example.  This should highlight the APIs in ``TableGen/Record.h``."
msgstr ""
