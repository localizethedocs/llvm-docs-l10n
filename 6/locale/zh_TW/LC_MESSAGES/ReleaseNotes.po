# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../ReleaseNotes.rst:3
msgid "LLVM 6.0.0 Release Notes"
msgstr ""

#: ../../../ReleaseNotes.rst:9
msgid "Introduction"
msgstr "簡介"

#: ../../../ReleaseNotes.rst:11
msgid ""
"This document contains the release notes for the LLVM Compiler "
"Infrastructure, release 6.0.0.  Here we describe the status of LLVM, "
"including major improvements from the previous release, improvements in "
"various subprojects of LLVM, and some of the current users of the code.  All "
"LLVM releases may be downloaded from the `LLVM releases web site <http://"
"llvm.org/releases/>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:17
msgid ""
"For more information about LLVM, including information about the latest "
"release, please check out the `main LLVM web site <http://llvm.org/>`_.  If "
"you have questions or comments, the `LLVM Developer's Mailing List <http://"
"lists.llvm.org/mailman/listinfo/llvm-dev>`_ is a good place to send them."
msgstr ""

#: ../../../ReleaseNotes.rst:24
msgid "Non-comprehensive list of changes in this release"
msgstr ""

#: ../../../ReleaseNotes.rst:26
msgid ""
"Support for `retpolines <https://support.google.com/faqs/answer/7625886>`_ "
"was added to help mitigate \"branch target injection\" (variant #2) of the "
"\"Spectre\" speculative side channels described by `Project Zero <https://"
"googleprojectzero.blogspot.com/2018/01/reading-privileged-memory-with-side."
"html>`_ and the `Spectre paper <https://spectreattack.com/spectre.pdf>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:32
msgid ""
"The ``Redirects`` argument of ``llvm::sys::ExecuteAndWait`` and ``llvm::sys::"
"ExecuteNoWait`` was changed to an ``ArrayRef`` of optional ``StringRef``'s "
"to make it safer and more convenient to use."
msgstr ""

#: ../../../ReleaseNotes.rst:36
msgid ""
"The backend name was added to the Target Registry to allow run-time "
"information to be fed back into TableGen. Out-of-tree targets will need to "
"add the name used in the `def X : Target` definition to the call to "
"`RegisterTarget`."
msgstr ""

#: ../../../ReleaseNotes.rst:41
msgid ""
"The ``Debugify`` pass was added to ``opt`` to facilitate testing of debug "
"info preservation. This pass attaches synthetic ``DILocations`` and "
"``DIVariables`` to the instructions in a ``Module``. The ``CheckDebugify`` "
"pass determines how much of the metadata is lost."
msgstr ""

#: ../../../ReleaseNotes.rst:46
msgid "Significantly improved quality of CodeView debug info for Windows."
msgstr ""

#: ../../../ReleaseNotes.rst:48
msgid ""
"Preliminary support for Sanitizers and sibling features on X86(_64) NetBSD "
"(ASan, UBsan, TSan, MSan, SafeStack, libFuzzer)."
msgstr ""

#: ../../../ReleaseNotes.rst:53
msgid "Changes to the LLVM IR"
msgstr ""

#: ../../../ReleaseNotes.rst:55
msgid ""
"The fast-math-flags (FMF) have been updated. Previously, the 'fast' flag "
"indicated that floating-point reassociation was allowed and all other flags "
"were set too. The 'fast' flag still exists, but there is a new flag called "
"'reassoc' to indicate specifically that reassociation is allowed. A new bit "
"called 'afn' was also added to selectively allow approximations for common "
"mathlib functions like square-root. The new flags provide more flexibility "
"to enable/disable specific floating-point optimizations. Making the "
"optimizer respond appropriately to these flags is an ongoing effort."
msgstr ""

#: ../../../ReleaseNotes.rst:66
msgid "Changes to the AArch64 Target"
msgstr ""

#: ../../../ReleaseNotes.rst:68
msgid ""
"Enabled the new GlobalISel instruction selection framework by default at ``-"
"O0``."
msgstr ""

#: ../../../ReleaseNotes.rst:72
msgid "Changes to the ARM Target"
msgstr ""

#: ../../../ReleaseNotes.rst:74
msgid ""
"Support for enabling SjLj exception handling on platforms where it isn't the "
"default."
msgstr ""

#: ../../../ReleaseNotes.rst:79
msgid "Changes to the Hexagon Target"
msgstr ""

#: ../../../ReleaseNotes.rst:81
msgid "The Hexagon backend now supports V65 ISA."
msgstr ""

#: ../../../ReleaseNotes.rst:83
msgid ""
"The ``-mhvx`` option now takes an optional value that specifies the ISA "
"version of the HVX coprocessor.  The available values are v60, v62 and v65. "
"By default, the value is set to be the same as the CPU version."
msgstr ""

#: ../../../ReleaseNotes.rst:87
msgid ""
"The compiler option ``-mhvx-double`` is deprecated and will be removed in "
"the next release of the compiler. Programmers should use the ``-mhvx-"
"length`` option to specify the desired vector length: ``-mhvx-length=64b`` "
"for 64-byte vectors and ``-mhvx-length=128b`` for 128-byte vectors. While "
"the current default vector length is 64 bytes, users should always specify "
"the length explicitly, since the default value may change in the future."
msgstr ""

#: ../../../ReleaseNotes.rst:94
msgid ""
"The target feature ``hvx-double`` is deprecated and will be removed in the "
"next release. LLVM IR generators should use target features ``hvx-"
"length64b`` and ``hvx-length128b`` to indicate the vector length. The length "
"should always be specified when HVX code generation is enabled."
msgstr ""

#: ../../../ReleaseNotes.rst:101
msgid "Changes to the MIPS Target"
msgstr ""

#: ../../../ReleaseNotes.rst:103
msgid "Fixed numerous bugs:"
msgstr ""

#: ../../../ReleaseNotes.rst:105
msgid ""
"fpowi on MIPS64 giving incorrect results when used with a negative integer."
msgstr ""

#: ../../../ReleaseNotes.rst:106
msgid ""
"Usage of the asm 'c' constraint with the wrong datatype causing an assert/"
"crash."
msgstr ""

#: ../../../ReleaseNotes.rst:108
msgid "Fixed a conversion bug when using the DSP ASE."
msgstr ""

#: ../../../ReleaseNotes.rst:109
msgid ""
"Fixed an inconsistency where objects were not marked as using the microMIPS "
"as when the micromips function attribute or the \".set micromips\" directive "
"was used."
msgstr ""

#: ../../../ReleaseNotes.rst:112
msgid ""
"Reordered the MIPSR6 specific hazard scheduler pass to after the delay slot "
"filler, fixing a class of rare edge case bugs where the delay slot filler "
"would violate ISA restrictions."
msgstr ""

#: ../../../ReleaseNotes.rst:115
msgid ""
"Fixed a crash when using a type of unknown size with gp relative addressing."
msgstr ""

#: ../../../ReleaseNotes.rst:116
msgid "Corrected the j macro for microMIPS."
msgstr ""

#: ../../../ReleaseNotes.rst:117
msgid "Corrected the encoding of movep for microMIPS32r6."
msgstr ""

#: ../../../ReleaseNotes.rst:118
msgid ""
"Fixed an issue with the usage of insert instructions having an invalid set "
"of operands."
msgstr ""

#: ../../../ReleaseNotes.rst:120
msgid "Fixed an issue where TLS symbols were not marked as such."
msgstr ""

#: ../../../ReleaseNotes.rst:121
msgid ""
"Enabled the usage of register scavenging with MSA, due to its shorter "
"offsets for loads and stores."
msgstr ""

#: ../../../ReleaseNotes.rst:123
msgid "Corrected the ELF headers when using the DSP ASE."
msgstr ""

#: ../../../ReleaseNotes.rst:125
msgid "New features:"
msgstr ""

#: ../../../ReleaseNotes.rst:127
msgid ""
"The long branch pass now generates some R6 specific instructions when "
"targeting MIPSR6."
msgstr ""

#: ../../../ReleaseNotes.rst:129
msgid ""
"The delay slot filler now performs more branch conversions if delay slots "
"cannot be filled."
msgstr ""

#: ../../../ReleaseNotes.rst:131
msgid "The MIPS MT ASE is now fully supported."
msgstr ""

#: ../../../ReleaseNotes.rst:132
msgid "Added support for the ``lapc`` pseudo instruction."
msgstr ""

#: ../../../ReleaseNotes.rst:133
msgid ""
"Improved the selection of multiple instructions (``dext``, ``nmadd``, "
"``nmsub``)."
msgstr ""

#: ../../../ReleaseNotes.rst:135
msgid "Further improved microMIPS codesize reduction."
msgstr ""

#: ../../../ReleaseNotes.rst:137
msgid "Deprecation notices:"
msgstr ""

#: ../../../ReleaseNotes.rst:139
msgid ""
"microMIPS64R6 support was been deprecated since 5.0, and has now been "
"completely removed."
msgstr ""

#: ../../../ReleaseNotes.rst:144
msgid "Changes to the SystemZ Target"
msgstr ""

#: ../../../ReleaseNotes.rst:146
msgid "During this release the SystemZ target has:"
msgstr ""

#: ../../../ReleaseNotes.rst:148
msgid "Added support for 128-bit atomic operations."
msgstr ""

#: ../../../ReleaseNotes.rst:150
msgid "Added support for the \"o\" constraint for inline asm statements."
msgstr ""

#: ../../../ReleaseNotes.rst:153
msgid "Changes to the X86 Target"
msgstr ""

#: ../../../ReleaseNotes.rst:155
msgid "During this release the X86 target has:"
msgstr ""

#: ../../../ReleaseNotes.rst:157
msgid ""
"Added support for enabling SjLj exception handling on platforms where it "
"isn't the default."
msgstr ""

#: ../../../ReleaseNotes.rst:160
msgid ""
"Added intrinsics for Intel Extensions: VAES, GFNI, VPCLMULQDQ, AVX512VBMI2, "
"AVX512BITALG, AVX512VNNI."
msgstr ""

#: ../../../ReleaseNotes.rst:162
msgid "Added support for Intel Icelake CPU."
msgstr ""

#: ../../../ReleaseNotes.rst:164
msgid "Fixed some X87 codegen bugs."
msgstr ""

#: ../../../ReleaseNotes.rst:166
msgid ""
"Added instruction scheduling information for Intel Sandy Bridge, Ivy Bridge, "
"Haswell, Broadwell, and Skylake CPUs."
msgstr ""

#: ../../../ReleaseNotes.rst:168
msgid "Improved scheduler model for AMD Jaguar CPUs."
msgstr ""

#: ../../../ReleaseNotes.rst:170
msgid "Improved llvm-mc's disassembler for some EVEX encoded instructions."
msgstr ""

#: ../../../ReleaseNotes.rst:172
msgid ""
"Add support for i8 and i16 vector signed/unsigned min/max horizontal "
"reductions."
msgstr ""

#: ../../../ReleaseNotes.rst:174
msgid "Improved codegen for memory comparisons"
msgstr ""

#: ../../../ReleaseNotes.rst:176
msgid "Improved codegen for i32 vector multiplies"
msgstr ""

#: ../../../ReleaseNotes.rst:178
msgid "Improved codegen for scalar integer absolute values"
msgstr ""

#: ../../../ReleaseNotes.rst:180
msgid "Improved codegen for vector integer rotations (XOP and AVX512)"
msgstr ""

#: ../../../ReleaseNotes.rst:182
msgid ""
"Improved codegen of data being transferred between GPRs and K-registers."
msgstr ""

#: ../../../ReleaseNotes.rst:184
msgid "Improved codegen for vector truncations."
msgstr ""

#: ../../../ReleaseNotes.rst:186
msgid ""
"Improved folding of address computations into gather/scatter instructions."
msgstr ""

#: ../../../ReleaseNotes.rst:188
msgid ""
"Gained initial support recognizing variable shuffles from vector element "
"extracts and inserts."
msgstr ""

#: ../../../ReleaseNotes.rst:190
msgid "Improved documentation for SSE/AVX intrinsics in intrin.h header files."
msgstr ""

#: ../../../ReleaseNotes.rst:192
msgid ""
"Gained support for emitting `retpolines <https://support.google.com/faqs/"
"answer/7625886>`_, including automatic insertion of the necessary thunks or "
"using external thunks."
msgstr ""

#: ../../../ReleaseNotes.rst:198
msgid "External Open Source Projects Using LLVM 6"
msgstr ""

#: ../../../ReleaseNotes.rst:201
msgid "LDC - the LLVM-based D compiler"
msgstr ""

#: ../../../ReleaseNotes.rst:203
msgid ""
"`D <http://dlang.org>`_ is a language with C-like syntax and static typing. "
"It pragmatically combines efficiency, control, and modeling power, with "
"safety and programmer productivity. D supports powerful concepts like "
"Compile-Time Function Execution (CTFE) and Template Meta-Programming, "
"provides an innovative approach to concurrency and offers many classical "
"paradigms."
msgstr ""

#: ../../../ReleaseNotes.rst:209
msgid ""
"`LDC <http://wiki.dlang.org/LDC>`_ uses the frontend from the reference "
"compiler combined with LLVM as backend to produce efficient native code. LDC "
"targets x86/x86_64 systems like Linux, OS X, FreeBSD and Windows and also "
"Linux on ARM and PowerPC (32/64 bit). Ports to other architectures like "
"AArch64 and MIPS64 are underway."
msgstr ""

#: ../../../ReleaseNotes.rst:216
msgid "JFS - JIT Fuzzing Solver"
msgstr ""

#: ../../../ReleaseNotes.rst:218
msgid ""
"`JFS <https://github.com/delcypher/jfs>`_ is an experimental constraint "
"solver designed to investigate using coverage guided fuzzing as an "
"incomplete strategy for solving boolean, BitVector, and floating-point "
"constraints. It is built on top of LLVM, Clang, LibFuzzer, and Z3."
msgstr ""

#: ../../../ReleaseNotes.rst:223
msgid ""
"The solver works by generating a C++ program where the reachability of an "
"`abort()` statement is equivalent to finding a satisfying assignment to the "
"constraints. This program is then compiled by Clang with `SanitizerCoverage "
"<https://releases.llvm.org/6.0.0/tools/clang/docs/SanitizerCoverage.html>`_ "
"instrumentation and then fuzzed using :doc:`LibFuzzer <LibFuzzer>`."
msgstr ""

#: ../../../ReleaseNotes.rst:230
msgid "Zig Programming Language"
msgstr ""

#: ../../../ReleaseNotes.rst:232
msgid ""
"`Zig <http://ziglang.org>`_  is an open-source programming language designed "
"for robustness, optimality, and clarity. It is intended to replace C. It "
"provides high level features such as Generics, Compile Time Function "
"Execution, and Partial Evaluation, yet exposes low level LLVM IR features "
"such as Aliases. Zig uses Clang to provide automatic import of .h symbols - "
"even inline functions and macros. Zig uses LLD combined with lazily building "
"compiler-rt to provide out-of-the-box cross-compiling for all supported "
"targets."
msgstr ""

#: ../../../ReleaseNotes.rst:242
msgid "Additional Information"
msgstr ""

#: ../../../ReleaseNotes.rst:244
msgid ""
"A wide variety of additional information is available on the `LLVM web page "
"<http://llvm.org/>`_, in particular in the `documentation <http://llvm.org/"
"docs/>`_ section.  The web page also contains versions of the API "
"documentation which is up-to-date with the Subversion version of the source "
"code.  You can access versions of these documents specific to this release "
"by going into the ``llvm/docs/`` directory in the LLVM tree."
msgstr ""

#: ../../../ReleaseNotes.rst:251
msgid ""
"If you have any questions or comments about LLVM, please feel free to "
"contact us via the `mailing lists <http://llvm.org/docs/#maillist>`_."
msgstr ""
