# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr_FR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../CommandGuide/llvm-objcopy.rst:2
msgid "llvm-objcopy - object copying and editing tool"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:7
msgid "SYNOPSIS"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:9
msgid ":program:`llvm-objcopy` [*options*] *input* [*output*]"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:12
msgid "DESCRIPTION"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:14
msgid ""
":program:`llvm-objcopy` is a tool to copy and manipulate objects. In basic "
"usage, it makes a semantic copy of the input to the output. If any options "
"are specified, the output may be modified along the way, e.g. by removing "
"sections."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:18
msgid ""
"If no output file is specified, the input file is modified in-place. If \"-"
"\" is specified for the input file, the input is read from the program's "
"standard input stream. If \"-\" is specified for the output file, the output "
"is written to the standard output stream of the program."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:23
msgid ""
"If the input is an archive, any requested operations will be applied to each "
"archive member individually."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:26
msgid ""
"The tool is still in active development, but in most scenarios it works as a "
"drop-in replacement for GNU's :program:`objcopy`."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:30
msgid "GENERIC AND CROSS-PLATFORM OPTIONS"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:32
msgid ""
"The following options are either agnostic of the file format, or apply to "
"multiple file formats."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:37
msgid "Add a .gnu_debuglink section for ``<debug-file>`` to the output."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:41
msgid ""
"Use real values for UIDs, GIDs and timestamps when updating archive member "
"headers."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:46
msgid ""
"Remove most local symbols from the output. Different file formats may limit "
"this to a subset of the local symbols. For example, file and section symbols "
"in ELF objects will not be discarded."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:52
msgid ""
"Enable deterministic mode when copying archives, i.e. use 0 for archive "
"member header UIDs, GIDs and timestamp fields. On by default."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:57
msgid "Print a summary of command line options."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:61
msgid ""
"Remove all sections from the output, except for sections named "
"``<section>``. Can be specified multiple times to keep multiple sections."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:66
msgid ""
"If specified, symbol and section names specified by other switches are "
"treated as extended POSIX regular expression patterns."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:71
msgid ""
"Remove the specified section from the output. Can be specified multiple "
"times to remove multiple sections simultaneously."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:76
msgid ""
"Remove all symbols, debug sections and relocations from the output. This "
"option is equivalent to GNU :program:`objcopy`'s ``--strip-all`` switch."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:81
msgid ""
"For ELF objects, remove from the output all symbols and non-alloc sections "
"not within segments, except for .gnu.warning, .ARM.attribute sections and "
"the section name table."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:85
msgid ""
"For COFF objects, remove all symbols, debug sections, and relocations from "
"the output."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:90
msgid "Remove all debug sections from the output."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:94
msgid ""
"Remove all symbols named ``<symbol>`` from the output. Can be specified "
"multiple times to remove multiple symbols."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:99
msgid ""
"Remove all symbols whose names appear in the file ``<filename>``, from the "
"output. In the file, each line represents a single symbol name, with leading "
"and trailing whitespace ignored, as is anything following a '#'. Can be "
"specified multiple times to read names from multiple files."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:106
msgid ""
"Remove from the output all symbols named ``<symbol>`` that are local or "
"undefined and are not required by any relocation."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:111
msgid ""
"Remove all symbols whose names appear in the file ``<filename>``, from the "
"output, if they are local or undefined and are not required by any "
"relocation. In the file, each line represents a single symbol name, with "
"leading and trailing whitespace ignored, as is anything following a '#'. Can "
"be specified multiple times to read names from multiple files."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:119
msgid ""
"Remove from the output all local or undefined symbols that are not required "
"by relocations."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:124
msgid "Display the version of this program."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:127
msgid "COFF-SPECIFIC OPTIONS"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:129
msgid ""
"The following options are implemented only for COFF objects. If used with "
"other objects, :program:`llvm-objcopy` will either emit an error or silently "
"ignore them."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:135
msgid ""
"Remove the contents of non-debug sections from the output, but keep the "
"section headers."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:139
msgid "ELF-SPECIFIC OPTIONS"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:141
msgid ""
"The following options are implemented only for ELF objects. If used with "
"other objects, :program:`llvm-objcopy` will either emit an error or silently "
"ignore them."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:147
msgid ""
"Add a section named ``<section>`` with the contents of ``<file>`` to the "
"output. The section will be of type `SHT_NOTE`, if the name starts with \"."
"note\". Otherwise, it will have type `SHT_PROGBITS`. Can be specified "
"multiple times to add multiple sections."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:154
msgid ""
"Add a new symbol called ``<name>`` to the output symbol table, in the "
"section named ``<section>``, with value ``<value>``. If ``<section>`` is not "
"specified, the symbol is added as an absolute symbol. The ``<flags>`` affect "
"the symbol properties. Accepted values are:"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:159
msgid "`global` = the symbol will have global binding."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:160
msgid "`local` = the symbol will have local binding."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:161
msgid "`weak` = the symbol will have weak binding."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:162
msgid "`default` = the symbol will have default visibility."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:163
msgid "`hidden` = the symbol will have hidden visibility."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:164
msgid "`file` = the symbol will be an `STT_FILE` symbol."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:165
msgid "`section` = the symbol will be an `STT_SECTION` symbol."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:166
msgid "`object` = the symbol will be an `STT_OBJECT` symbol."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:167
msgid "`function` = the symbol will be an `STT_FUNC` symbol."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:168
msgid "`indirect-function` = the symbol will be an `STT_GNU_IFUNC` symbol."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:170
msgid ""
"Additionally, the following flags are accepted but ignored: `debug`, "
"`constructor`, `warning`, `indirect`, `synthetic`, `unique-object`, `before`."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:173
msgid "Can be specified multiple times to add multiple symbols."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:177
msgid ""
"Allow llvm-objcopy to remove sections even if it would leave invalid section "
"references. Any invalid sh_link fields will be set to zero."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:182
msgid ""
"Specify the architecture to use, when transforming an architecture-less "
"format (e.g. binary) to another format. Valid options are:"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:185
msgid "`aarch64`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:186
msgid "`arm`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:187
msgid "`i386`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:188
msgid "`i386:x86-64`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:189
msgid "`mips`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:190
msgid "`powerpc:common64`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:191
msgid "`riscv:rv32`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:192
msgid "`riscv:rv64`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:193
msgid "`sparc`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:194
msgid "`sparcel`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:195
msgid "`x86-64`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:199
msgid ""
"Set the directory used by :option:`--build-id-link-input` and :option:`--"
"build-id-link-output`."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:204
msgid ""
"Hard-link the input to ``<dir>/xx/xxx<suffix>``, where ``<dir>`` is the "
"directory specified by :option:`--build-id-link-dir`. The path used is "
"derived from the hex build ID."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:210
msgid ""
"Hard-link the output to ``<dir>/xx/xxx<suffix>``, where ``<dir>`` is the "
"directory specified by :option:`--build-id-link-dir`. The path used is "
"derived from the hex build ID."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:216
msgid ""
"Add ``<incr>`` to the program's start address. Can be specified multiple "
"times, in which case the values will be applied cumulatively."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:221
msgid ""
"Compress DWARF debug sections in the output, using the specified style. "
"Supported styles are `zlib-gnu` and `zlib`. Defaults to `zlib` if no style "
"is specified."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:227
msgid "Decompress any compressed DWARF debug sections in the output."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:231
msgid "Remove local symbols starting with \".L\" from the output."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:235
msgid ""
"Dump the contents of section ``<section>`` into the file ``<file>``. Can be "
"specified multiple times to dump multiple sections to different files. "
"``<file>`` is unrelated to the input and output files provided to :program:"
"`llvm-objcopy` and as such the normal copying and editing operations will "
"still be performed. No operations are performed on the sections prior to "
"dumping them."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:244
msgid "Remove all sections that are not DWARF .dwo sections from the output."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:248
msgid "Extract the main partition from the output."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:252
msgid "Extract the named partition from the output."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:256
msgid ""
"Mark any defined symbols named ``<symbol>`` as global symbols in the output. "
"Can be specified multiple times to mark multiple symbols."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:261
msgid ""
"Read a list of names from the file ``<filename>`` and mark defined symbols "
"with those names as global in the output. In the file, each line represents "
"a single symbol, with leading and trailing whitespace ignored, as is "
"anything following a '#'. Can be specified multiple times to read names from "
"multiple files."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:268
msgid ""
"Read the input as the specified format. See `SUPPORTED FORMATS`_ for a list "
"of valid ``<format>`` values. If unspecified, :program:`llvm-objcopy` will "
"attempt to determine the format automatically."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:274
msgid ""
"Keep symbols of type `STT_FILE`, even if they would otherwise be stripped."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:278
msgid ""
"Make all symbols local in the output, except for symbols with the name "
"``<symbol>``. Can be specified multiple times to ignore multiple symbols."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:283
msgid ""
"Make all symbols local in the output, except for symbols named in the file "
"``<filename>``. In the file, each line represents a single symbol, with "
"leading and trailing whitespace ignored, as is anything following a '#'. Can "
"be specified multiple times to read names from multiple files."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:290
msgid ""
"When removing sections from the output, do not remove sections named "
"``<section>``. Can be specified multiple times to keep multiple sections."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:295
msgid ""
"When removing symbols from the output, do not remove symbols named "
"``<symbol>``. Can be specified multiple times to keep multiple symbols."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:300
msgid ""
"When removing symbols from the output do not remove symbols named in the "
"file ``<filename>``. In the file, each line represents a single symbol, with "
"leading and trailing whitespace ignored, as is anything following a '#'. Can "
"be specified multiple times to read names from multiple files."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:307
msgid ""
"Make all symbols with hidden or internal visibility local in the output."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:311
msgid ""
"Mark any defined non-common symbol named ``<symbol>`` as a local symbol in "
"the output. Can be specified multiple times to mark multiple symbols as "
"local."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:316
msgid ""
"Read a list of names from the file ``<filename>`` and mark defined non-"
"common symbols with those names as local in the output. In the file, each "
"line represents a single symbol, with leading and trailing whitespace "
"ignored, as is anything following a '#'. Can be specified multiple times to "
"read names from multiple files."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:324
msgid ""
"Write the output as the specified format. See `SUPPORTED FORMATS`_ for a "
"list of valid ``<format>`` values. If unspecified, the output format is "
"assumed to be the same as the input file's format."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:330
msgid ""
"Add ``<prefix>`` to the front of the names of all allocatable sections in "
"the output."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:335
msgid "Add ``<prefix>`` to the front of every symbol name in the output."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:339
msgid "Preserve access and modification timestamps in the output."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:343
msgid ""
"Rename symbols called ``<old>`` to ``<new>`` in the output. Can be specified "
"multiple times to rename multiple symbols."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:348
msgid ""
"Rename symbols in the output as described in the file ``<filename>``. In the "
"file, each line represents a single symbol to rename, with the old name and "
"new name separated by an equals sign. Leading and trailing whitespace is "
"ignored, as is anything following a '#'. Can be specified multiple times to "
"read names from multiple files."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:356
msgid ""
"Rename sections called ``<old>`` to ``<new>`` in the output, and apply any "
"specified ``<flag>`` values. See :option:`--set-section-flags` for a list of "
"supported flags. Can be specified multiple times to rename multiple sections."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:362
msgid ""
"Set section properties in the output of section ``<section>`` based on the "
"specified ``<flag>`` values. Can be specified multiple times to update "
"multiple sections."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:366
msgid "Following is a list of supported flags and their effects:"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:368
msgid "`alloc` = add the `SHF_ALLOC` flag."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:369
msgid ""
"`load` = if the section has `SHT_NOBITS` type, mark it as a `SHT_PROGBITS` "
"section."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:371
msgid "`readonly` = if this flag is not specified, add the `SHF_WRITE` flag."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:372
msgid "`code` = add the `SHF_EXECINSTR` flag."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:373
msgid "`merge` = add the `SHF_MERGE` flag."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:374
msgid "`strings` = add the `SHF_STRINGS` flag."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:375
msgid ""
"`contents` = if the section has `SHT_NOBITS` type, mark it as a "
"`SHT_PROGBITS` section."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:378
msgid ""
"The following flags are also accepted, but are ignored for GNU "
"compatibility: `noload`, `debug`, `data`, `rom`, `share`."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:383
msgid ""
"Set the start address of the output to ``<addr>``. Overrides any previously "
"specified :option:`--change-start` or :option:`--adjust-start` options."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:388
msgid ""
"Equivalent to running :program:`llvm-objcopy` with :option:`--extract-dwo` "
"and ``<dwo-file>`` as the output file and no other options, and then with :"
"option:`--strip-dwo` on the input file."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:394
msgid "Remove all DWARF .dwo sections from the output."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:398
msgid ""
"Remove from the output all non-allocatable sections that are not within "
"segments."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:403
msgid ""
"Remove from the output all section headers and all section data not within "
"segments. Note that many tools will not be able to use an object without "
"section headers."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:409
msgid ""
"Equivalent to :option:`--input-target` and :option:`--output-target` for the "
"specified format. See `SUPPORTED FORMATS`_ for a list of valid ``<format>`` "
"values."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:415
msgid ""
"Mark any global symbol named ``<symbol>`` as a weak symbol in the output. "
"Can be specified multiple times to mark multiple symbols as weak."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:420
msgid ""
"Read a list of names from the file ``<filename>`` and mark global symbols "
"with those names as weak in the output. In the file, each line represents a "
"single symbol, with leading and trailing whitespace ignored, as is anything "
"following a '#'. Can be specified multiple times to read names from multiple "
"files."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:427
msgid "Mark all defined global symbols as weak in the output."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:430
msgid "SUPPORTED FORMATS"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:432
msgid ""
"The following values are currently supported by :program:`llvm-objcopy` for "
"the :option:`--input-target`, :option:`--output-target`, and :option:`--"
"target` options. For GNU :program:`objcopy` compatibility, the values are "
"all bfdnames."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:436
msgid "`binary`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:437
msgid "`ihex`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:438
msgid "`elf32-i386`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:439
msgid "`elf32-x86-64`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:440
msgid "`elf64-x86-64`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:441
msgid "`elf32-iamcu`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:442
msgid "`elf32-littlearm`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:443
msgid "`elf64-aarch64`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:444
msgid "`elf64-littleaarch64`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:445
msgid "`elf32-littleriscv`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:446
msgid "`elf64-littleriscv`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:447
msgid "`elf32-powerpc`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:448
msgid "`elf32-powerpcle`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:449
msgid "`elf64-powerpc`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:450
msgid "`elf64-powerpcle`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:451
msgid "`elf32-bigmips`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:452
msgid "`elf32-ntradbigmips`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:453
msgid "`elf32-ntradlittlemips`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:454
msgid "`elf32-tradbigmips`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:455
msgid "`elf32-tradlittlemips`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:456
msgid "`elf64-tradbigmips`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:457
msgid "`elf64-tradlittlemips`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:458
msgid "`elf32-sparc`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:459
msgid "`elf32-sparcel`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:461
msgid ""
"Additionally, all targets except `binary` and `ihex` can have `-freebsd` as "
"a suffix."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:465
msgid "BINARY INPUT AND OUTPUT"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:467
msgid ""
"If `binary` is used as the value for :option:`--input-target`, the input "
"file will be embedded as a data section in an ELF relocatable object, with "
"symbols ``_binary_<file_name>_start``, ``_binary_<file_name>_end``, and "
"``_binary_<file_name>_size`` representing the start, end and size of the "
"data, where ``<file_name>`` is the path of the input file as specified on "
"the command line with non-alphanumeric characters converted to ``_``."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:474
msgid ""
"If `binary` is used as the value for :option:`--output-target`, the output "
"file will be a raw binary file, containing the memory image of the input "
"file. Symbols and relocation information will be discarded. The image will "
"start at the address of the first loadable section in the output."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:480
msgid "EXIT STATUS"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:482
msgid ""
":program:`llvm-objcopy` exits with a non-zero exit code if there is an "
"error. Otherwise, it exits with code 0."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:486
msgid "BUGS"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:488
msgid "To report bugs, please visit <http://llvm.org/bugs/>."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:490
msgid ""
"There is a known issue with :option:`--input-target` and :option:`--target` "
"causing only ``binary`` and ``ihex`` formats to have any effect. Other "
"values will be ignored and :program:`llvm-objcopy` will attempt to guess the "
"input format."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:496
msgid "SEE ALSO"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:498
msgid ":manpage:`llvm-strip(1)`"
msgstr ""
