# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM main\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 08:36+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr_FR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:2
msgid ""
"llvm-debuginfo-analyzer - Print a logical representation of low-level debug "
"information."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:10
msgid "SYNOPSIS"
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:11
msgid ":program:`llvm-debuginfo-analyzer` [*options*] [*filename ...*]"
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:14
msgid "DESCRIPTION"
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:15
msgid ""
":program:`llvm-debuginfo-analyzer` parses debug and text sections in binary "
"object files and prints their contents in a logical view, which is a human-"
"readable representation that closely matches the structure of the original "
"user source code. Supported object file formats include ELF, Mach-O, "
"WebAssembly, PDB and COFF."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:21
msgid ""
"The **logical view** abstracts the complexity associated with the different "
"low-level representations of the debugging information that is embedded in "
"the object file. :program:`llvm-debuginfo-analyzer` produces a canonical "
"view of the debug information regardless of how it is formatted. The same "
"logical view will be seen regardless of object file format, assuming the "
"debug information correctly represents the same original source code."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:29
msgid ""
"The logical view includes the following **logical elements**: *type*, "
"*scope*, *symbol* and *line*, which are the basic software elements used in "
"the C/C++ programming language. Each logical element has a set of "
"**attributes**, such as *types*, *classes*, *functions*, *variables*, "
"*parameters*, etc. The :option:`--attribute` can be used to specify which "
"attributes to include when printing a logical element. A logical element may "
"have a **kind** that describes specific types of elements. For instance, a "
"*scope* could have a kind value of *function*, *class*, *namespace*."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:39
msgid ""
":program:`llvm-debuginfo-analyzer` defaults to print a pre-defined layout of "
"logical elements and attributes. The command line options can be used to "
"control the printed elements (:option:`--print`), using a specific layout (:"
"option:`--report`), matching a given pattern (:option:`--select`, :option:`--"
"select-offsets`). Also, the output can be limited to specified logical "
"elements using (:option:`--select-lines`, :option:`--select-scopes`, :option:"
"`--select-symbols`, :option:`--select-types`)."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:48
msgid ""
":program:`llvm-debuginfo-analyzer` can also compare a set of logical views (:"
"option:`--compare`), to find differences and identify possible debug "
"information syntax issues (:option:`--warning`) in any object file."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:53
msgid "OPTIONS"
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:54
msgid ""
":program:`llvm-debuginfo-analyzer` options are separated into several "
"categories, each tailored to a different purpose:"
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:57
msgid ":ref:`general_` - Standard LLVM options to display help, version, etc."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:58
msgid ""
":ref:`attributes_` - Describe how to include different details when printing "
"an element."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:60
msgid ""
":ref:`print_` - Specify which elements will be included when printing the "
"view."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:62
msgid ":ref:`output_` - Describe the supported formats when printing the view."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:63
msgid ":ref:`report_` - Describe the format layouts for view printing."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:64
msgid ""
":ref:`select_` - Allows to use specific criteria or conditions to select "
"which elements to print."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:66
msgid ""
":ref:`compare_` - Compare logical views and print missing and/or added "
"elements."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:68
msgid ""
":ref:`warning_` - Print the warnings detected during the creation of the "
"view."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:70
msgid ":ref:`internal_` - Internal analysis of the logical view."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:75
msgid "GENERAL"
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:76
msgid ""
"This section describes the standard help options, used to display the usage, "
"version, response files, etc."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:81
msgid "Show help and usage for this command. (--help-hidden for more)."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:85
msgid ""
"Show help and usage for this command without grouping the options into "
"categories (--help-list-hidden for more)."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:90
msgid "Display all available options."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:94
msgid "Print all option values after command line parsing."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:98
msgid "Print non-default options after command line parsing"
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:102
msgid "Display the version of the tool."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:106
msgid "Read command-line options from `<FILE>`."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:108
msgid ""
"If no input file is specified, :program:`llvm-debuginfo-analyzer` defaults "
"to read `a.out` and return an error when no input file is found."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:111
msgid ""
"If `-` is used as the input file, :program:`llvm-debuginfo-analyzer` reads "
"the input from its standard input stream."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:117
msgid "ATTRIBUTES"
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:118
msgid ""
"The following options enable attributes given for the printed elements. The "
"attributes are divided in categories based on the type of data being added, "
"such as: internal offsets in the binary file, location descriptors, register "
"names, user source filenames, additional element transformations, toolchain "
"name, binary file format, etc."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:126
#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:281
#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:345
msgid "With **value** being one of the options in the following lists."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:134
msgid ""
"The following attributes describe the most common information for a logical "
"element. They help to identify the lexical scope level; the element "
"visibility across modules (global, local); the toolchain name and source "
"language that produced the binary file."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:148
msgid ""
"The following attributes describe files and directory names from the user "
"source code, where the elements are declared or defined; functions with "
"public visibility across modules. These options allow to map the elements to "
"their user code location, for cross references purposes."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:161
msgid ""
"The following attributes describe additional logical element source "
"transformations, in order to display built-in types (int, bool, etc.); "
"parameters and arguments used during template instantiation; parent name "
"hierarchy; array dimensions information; compiler generated elements; type "
"sizes and the underlying types associated with the types aliases."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:181
msgid ""
"The following attributes describe the debug location information for a "
"symbol or scope. It includes the symbol percentage coverage and any gaps "
"within the location layout; ranges determining the code sections attached to "
"a function. When descriptors are used, the target processor registers are "
"displayed."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:195
msgid ""
"The following attributes are associated with low level details, such as: "
"offsets in the binary file; discriminators added to the lines of inlined "
"functions in order to distinguish specific instances; debug lines state "
"machine registers; elements discarded by the compiler (inlining) or by the "
"linker optimizations (dead-stripping); system compile units generated by the "
"MS toolchain in PDBs."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:212
msgid ""
"The following attribute described specific information for the **PE/COFF** "
"file format. It includes MS runtime types."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:219
msgid ""
"The above attributes are grouped into *standard* and *extended* categories "
"that can be enabled."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:222
msgid ""
"The *standard* group, contains those attributes that add sufficient "
"information to describe a logical element and that can cover the normal "
"situations while dealing with debug information."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:243
msgid ""
"The *extended* group, contains those attributes that require a more extended "
"knowledge about debug information. They are intended when a lower level of "
"detail is required."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:273
msgid "PRINT"
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:274
msgid ""
"The following options describe the elements to print. The layout used is "
"determined by the :option:`--report`. In the tree layout, all the elements "
"have their enclosing lexical scopes printed, even when not explicitly "
"specified."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:287
msgid ""
"The following options print the requested elements; in the case of any given "
"select conditions (:option:`--select`), only those elements that match them, "
"will be printed. The **elements** value is a convenient way to specify "
"instructions, lines, scopes, symbols and types all at once."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:302
msgid ""
"The following options print information, collected during the creation of "
"the elements, such as: scope contributions to the debug information; summary "
"of elements created, printed or matched (:option:`--select`); warnings "
"produced during the view creation."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:313
msgid "Note: The **--print=sizes** option is ELF specific."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:318
msgid "OUTPUT"
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:319
msgid ""
"The following options describe how to control the output generated when "
"printing the logical elements."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:324
msgid ""
"Redirect the output to a file specified by <path>, where - is the standard "
"output stream."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:327
msgid ""
":program:`llvm-debuginfo-analyzer` has the concept of **split view**. When "
"redirecting the output from a complex binary format, it is **divided** into "
"individual files, each one containing the logical view output for a single "
"compilation unit."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:334
msgid ""
"The folder to write a file per compilation unit when **--output=split** is "
"specified."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:339
msgid ""
"Only print elements up to the given **lexical level** value. The input file "
"is at lexical level zero and a compilation unit is at lexical level one."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:359
msgid ""
"Primary key when ordering the elements in the output (default: line). "
"Sorting by logical element kind, requires be familiarity with the element "
"kind selection options (:option:`--select-lines`, :option:`--select-"
"scopes`, :option:`--select-symbols`, :option:`--select-types`), as those "
"options describe the different logical element kinds."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:378
msgid "REPORT"
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:379
msgid ""
"Depending on the task being executed (print, compare, select), several "
"layouts are supported to display the elements in a more suitable way, to "
"make the output easier to understand."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:385
#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:616
#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:654
#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:685
msgid "With **value** being one of the options in the following list."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:398
msgid ""
"The **list** layout presents the logical elements in a tabular form without "
"any parent-child relationship. This may be the preferred way to display "
"elements that match specific conditions when comparing logical views, making "
"it easier to find differences."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:403
msgid ""
"The **children**, **parents** and **view** layout displays the elements in a "
"tree format, with the scopes representing their nodes, and types, symbols, "
"lines and other scopes representing the children. The layout shows the "
"lexical scoping relationship between elements, with the binary file being "
"the tree root (level 0) and each compilation unit being a child (level 1)."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:410
msgid ""
"The **children** layout includes the elements that match any given criteria "
"(:option:`--select`) or (:option:`--compare`) and its children."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:413
msgid ""
"The **parents** layout includes the elements that match any given criteria (:"
"option:`--select`) or (:option:`--compare`) and its parents."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:416
msgid ""
"The combined **view** layout includes the elements that match any given "
"criteria (:option:`--select`) or (:option:`--compare`), its parents and "
"children."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:420
msgid "**Notes**:"
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:422
msgid ""
"When a selection criteria (:option:`--select`) is specified with no report "
"option, the **list** layout is selected."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:424
msgid "The comparison mode always uses the **view** layout."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:429
msgid "SELECTION"
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:430
msgid ""
"When printing an element, different data can be included and it varies (:"
"option:`--attribute`) from data directly associated with the binary file "
"(offset) to high level details such as coverage, lexical scope level, "
"location. As the printed output can reach a considerable size, several "
"selection options, enable printing of specific elements."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:436
msgid ""
"The pattern matching can ignore the case (:option:`--select-nocase`) and be "
"extended to use regular expressions (:option:`--select-regex`)."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:440
msgid "ELEMENTS"
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:441
msgid ""
"The following options allow printing of elements that match the given "
"<pattern>, offset <value> or an element <condition>."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:446
msgid ""
"Print all elements whose name or line number matches the given <pattern>."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:450
msgid ""
"Print all elements whose offset matches the given values. See :option:`--"
"attribute` option."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:455
msgid ""
"Print all elements that satisfy the given <condition>. With **condition** "
"being one of the options in the following list."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:466
msgid "Pattern matching is case-insensitive when using :option:`--select`."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:470
msgid ""
"Treat any <pattern> strings as regular expressions when selecting with :"
"option:`--select` option. If :option:`--select-nocase` is specified, the "
"regular expression becomes case-insensitive."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:474
msgid ""
"If the <pattern> criteria is too general, a more selective option can be "
"specified to target a particular category of elements: lines (:option:`--"
"select-lines`), scopes (:option:`--select-scopes`), symbols (:option:`--"
"select-symbols`) and types (:option:`--select-types`)."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:479
msgid ""
"These options require knowledge of the debug information format (DWARF, "
"CodeView), as the given **kind** describes a very specific type of element."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:484
msgid "LINES"
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:485
msgid ""
"The following options allow printing of lines that match the given <kind>. "
"The given criteria describes the debug line state machine registers."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:490
#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:511
#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:546
#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:564
msgid "With **kind** being one of the options in the following list."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:506
msgid "SCOPES"
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:507
msgid ""
"The following options allow printing of scopes that match the given <kind>."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:541
msgid "SYMBOLS"
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:542
msgid ""
"The following options allow printing of symbols that match the given <kind>."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:559
msgid "TYPES"
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:560
msgid ""
"The following options allow printing of types that match the given <kind>."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:591
msgid "COMPARE"
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:592
msgid ""
"When dealing with debug information, there are situations when the printing "
"of the elements is not the correct approach. That is the case, when we are "
"interested in the effects caused by different versions of the same "
"toolchain, or the impact of specific compiler optimizations."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:597
msgid ""
"For those cases, we are looking to see which elements have been added or "
"removed. Due to the complicated debug information format, it is very "
"difficult to use a regular diff tool to find those elements; even impossible "
"when dealing with different debug formats."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:602
msgid ""
":program:`llvm-debuginfo-analyzer` supports a logical element comparison, "
"allowing to find semantic differences between logical views, produced by "
"different toolchain versions or even debug information formats."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:606
msgid ""
"When comparing logical views created from different debug formats, its "
"accuracy depends on how close the debug information represents the user "
"code. For instance, a logical view created from a binary file with DWARF "
"debug information may include more detailed data than a logical view created "
"from a binary file with CodeView debug information."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:612
msgid "The following options describe the elements to compare."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:629
msgid ""
":program:`llvm-debuginfo-analyzer` takes the first binary file on the "
"command line as the **reference** and the second one as the **target**. To "
"get a more descriptive report, the comparison is done twice. The reference "
"and target views are swapped, in order to produce those **missing** elements "
"from the target view and those **added** elements to the reference view."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:636
msgid ""
"See :option:`--report` options on how to describe the comparison reports."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:642
msgid "WARNING"
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:643
msgid ""
"When reading the input object files, :program:`llvm-debuginfo-analyzer` can "
"detect issues in the raw debug information. These may not be considered "
"fatal to the purpose of printing a logical view but they can give an "
"indication about the quality and potentially expose issues with the "
"generated debug information."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:649
msgid ""
"The following options describe the warnings to be recorded for later "
"printing, if they are requested by :option:`--print`."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:660
msgid ""
"The following options collect additional information during the creation of "
"the logical view, to include invalid coverage values and locations for "
"symbols; invalid code ranges; lines that are zero."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:674
msgid "INTERNAL"
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:675
msgid ""
"For a better understanding of the logical view, access to more detailed "
"internal information could be needed. Such data would help to identify debug "
"information processed or incorrect logical element management. Typically "
"these kind of options are available only in *debug* builds."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:680
msgid ""
":program:`llvm-debuginfo-analyzer` supports these advanced options in both "
"*release* and *debug* builds."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:691
msgid ""
"The following options allow to check the integrity of the logical view; "
"collect the debug tags that are processed or not implemented; ignore the "
"logical element line number, to facilitate the logical view comparison when "
"using external comparison tools; print the command line options used to "
"invoke :program:`llvm-debuginfo-analyzer`."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:705
msgid ""
"**Note:** For ELF format, the collected tags represent the debug tags that "
"are not processed. For PE/COFF format, they represent the tags that are "
"processed."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:710
msgid "EXAMPLES"
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:711
msgid ""
"This section includes some real binary files to show how to use :program:"
"`llvm-debuginfo-analyzer` to print a logical view and to diagnose possible "
"debug information issues."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:716
msgid "TEST CASE 1 - GENERAL OPTIONS"
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:717
msgid ""
"The below example is used to show different output generated by :program:"
"`llvm-debuginfo-analyzer`. We compiled the example for an X86 ELF target "
"with Clang (-O0 -g):"
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:734
msgid "PRINTING MODE"
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:735
msgid ""
"In this mode :program:`llvm-debuginfo-analyzer` prints the *logical view* or "
"portions of it, based on criteria patterns (including regular expressions) "
"to select the kind of *logical elements* to be included in the output."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:741
msgid "BASIC DETAILS"
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:742
#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:1983
msgid ""
"The following command prints basic details for all the logical elements "
"sorted by the debug information internal offset; it includes its lexical "
"level and debug info format."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:753
#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:1994
msgid "or"
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:762
#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:2003
msgid ""
"Each row represents an element that is present within the debug information. "
"The first column represents the scope level, followed by the associated line "
"number (if any), and finally the description of the element."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:807
msgid "On closer inspection, we can see what could be a potential debug issue:"
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:814
msgid ""
"The **'INTEGER'** definition is at level **[003]**, the same lexical scope "
"as the anonymous **{Block}** ('true' branch for the 'if' statement) whereas "
"in the original source code the typedef statement is clearly inside that "
"block, so the **'INTEGER'** definition should also be at level **[004]** "
"inside the block."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:821
#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:2097
msgid "SELECT LOGICAL ELEMENTS"
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:822
msgid ""
"The following prints all *instructions*, *symbols* and *types* that contain "
"**'inte'** or **'movl'** in their names or types, using a tab layout and "
"given the number of matches."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:859
#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:2135
msgid "COMPARISON MODE"
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:860
msgid ""
"In this mode :program:`llvm-debuginfo-analyzer` compares logical views to "
"produce a report with the logical elements that are missing or added. This a "
"very powerful aid in finding semantic differences in the debug information "
"produced by different toolchain versions or even completely different "
"toolchains altogether (For example a compiler producing DWARF can be "
"directly compared against a completely different compiler that produces "
"CodeView)."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:868
#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:2136
msgid ""
"Given the previous example we found the above debug information issue "
"(related to the previous invalid scope location for the **'typedef int "
"INTEGER'**) by comparing against another compiler."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:872
#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:2140
msgid ""
"Using GCC to generate test-dwarf-gcc.o, we can apply a selection pattern "
"with the printing mode to obtain the following logical view output."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:897
#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:2165
msgid ""
"The output shows that both objects contain the same elements. But the "
"**'typedef INTEGER'** is located at different scope level. The GCC generated "
"object, shows **'4'**, which is the correct value."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:901
msgid ""
"Note that there is no requirement that GCC must produce identical or similar "
"DWARF to Clang to allow the comparison. We're only comparing the semantics. "
"The same case when comparing CodeView debug information generated by MSVC "
"and Clang."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:906
#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:2169
msgid "There are 2 comparison methods: logical view and logical elements."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:909
#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:2172
msgid "LOGICAL VIEW"
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:910
#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:2173
msgid ""
"It compares the logical view as a whole unit; for a match, each compared "
"logical element must have the same parents and children."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:913
msgid ""
"Using the :program:`llvm-debuginfo-analyzer` comparison functionality, that "
"issue can be seen in a more global context, that can include the logical "
"view."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:917
#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:2176
msgid ""
"The output shows in view form the **missing (-), added (+)** elements, "
"giving more context by swapping the reference and target object files."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:945
#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:2204
msgid ""
"The output shows the merging view path (reference and target) with the "
"missing and added elements."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:949
#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:2208
msgid "LOGICAL ELEMENTS"
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:950
#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:2209
msgid ""
"It compares individual logical elements without considering if their parents "
"are the same. For both comparison methods, the equal criteria includes the "
"name, source code location, type, lexical scope level."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:981
#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:2240
msgid "Changing the *Reference* and *Target* order:"
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:1010
#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:2269
msgid ""
"As the *Reference* and *Target* are switched, the *Added Types* from the "
"first case now are listed as *Missing Types*."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:1014
msgid "TEST CASE 2 - ASSEMBLER INSTRUCTIONS"
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:1015
msgid ""
"The below example is used to show different output generated by :program:"
"`llvm-debuginfo-analyzer`. We compiled the example for an X86 Codeview and "
"ELF targets with recent versions of Clang, GCC and MSVC (-O0 -g) for Windows "
"and Linux."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:1030
msgid ""
"These are the logical views that :program:`llvm-debuginfo-analyzer` "
"generates for 3 different compilers (MSVC, Clang and GCC), emitting "
"different debug information formats (CodeView, DWARF) on Windows and Linux."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:1045
#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:1199
#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:1416
msgid "CodeView - Clang (Windows)"
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:1067
#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:1225
#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:1434
msgid "CodeView - MSVC (Windows)"
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:1091
#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:1253
#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:1452
#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:1736
msgid "DWARF - Clang (Linux)"
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:1118
#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:1292
#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:1466
#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:1761
msgid "DWARF - GCC (Linux)"
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:1143
msgid ""
"The logical views shows the intermixed lines and assembler instructions, "
"allowing to compare the code generated by the different toolchains."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:1147
msgid "TEST CASE 3 - INCORRECT LEXICAL SCOPE FOR TYPEDEF"
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:1148
#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:1376
#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:1626
msgid ""
"The below example is used to show different output generated by :program:"
"`llvm-debuginfo-analyzer`. We compiled the example for an X86 Codeview and "
"ELF targets with recent versions of Clang, GCC and MSVC (-O0 -g)."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:1170
msgid ""
"The above test is used to illustrate a scope issue found in the Clang "
"compiler: `PR44884 (Bugs LLVM) <https://bugs.llvm.org/show_bug.cgi?"
"id=44884>`_ / `PR44229 (GitHub LLVM) <https://github.com/llvm/llvm-project/"
"issues/44229>`_"
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:1175
msgid ""
"The lines 4 and 7 contains 2 typedefs, defined at different lexical scopes."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:1183
#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:1400
#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:1679
msgid ""
"These are the logical views that :program:`llvm-debuginfo-analyzer` "
"generates for 3 different compilers (MSVC, Clang and GCC), emitting "
"different debug information formats (CodeView, DWARF) on different platforms."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:1325
msgid ""
"From the previous logical views, we can see that the Clang compiler emits "
"**both typedefs at the same lexical scope (3)**, which is wrong. GCC and "
"MSVC emit correct lexical scope for both typedefs."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:1329
msgid ""
"Using the :program:`llvm-debuginfo-analyzer` selection facilities, we can "
"produce a simple tabular output showing just the logical types that are "
"**Typedef**."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:1370
msgid ""
"It also shows, that the CodeView debug information does not generate source "
"code line numbers for the those logical types. The logical view is sorted by "
"the types name."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:1375
msgid "TEST CASE 4 - MISSING NESTED ENUMERATIONS"
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:1395
msgid ""
"The above test is used to illustrate a scope issue found in the Clang "
"compiler: `PR46466 (Bugs LLVM) <https://bugs.llvm.org/show_bug.cgi?"
"id=46466>`_ / `PR45811 (GitHub LLVM) <https://github.com/llvm/llvm-project/"
"issues/45811>`_"
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:1483
msgid ""
"From the previous logical views, we can see that the DWARF debug information "
"generated by the Clang compiler does not include any references to the "
"enumerators **RED** and **BLUE**. The DWARF generated by GCC, CodeView "
"generated by Clang and MSVC, they do include such references."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:1489
msgid ""
"Using the :program:`llvm-debuginfo-analyzer` selection facilities, we can "
"produce a logical view showing just the logical types that are "
"**Enumerator** and its parents. The logical view is sorted by the types name."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:1540
msgid ""
"Using the :program:`llvm-debuginfo-analyzer` selection facilities, we can "
"produce a simple tabular output including a summary for the logical types "
"that are **Enumerator**. The logical view is sorted by the types name."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:1621
msgid ""
"From the values printed under the **Found** column, we can see that no "
"**Types** were found in the DWARF debug information generated by Clang."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:1625
msgid "TEST CASE 5 - INCORRECT LEXICAL SCOPE FOR VARIABLE"
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:1649
msgid ""
"As the test is dependent on inline compiler options, the above header file "
"defines *forceinline*."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:1674
msgid ""
"The above test is used to illustrate a variable issue found in the Clang "
"compiler: `PR43860 (Bugs LLVM) <https://bugs.llvm.org/show_bug.cgi?"
"id=43860>`_ / `PR43205 (GitHub) <https://github.com/llvm/llvm-project/"
"issues/43205>`_"
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:1695
msgid "CODEVIEW - Clang (Windows)"
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:1716
msgid "CODEVIEW - MSVC (Windows)"
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:1785
msgid ""
"From the previous logical views, we can see that the CodeView debug "
"information generated by the Clang compiler shows the variables **Var_1** "
"and **Var_2** are at the same lexical scope (**4**) in the function "
"**InlineFuction**. The DWARF generated by GCC/Clang and CodeView generated "
"by MSVC, show those variables at the correct lexical scope: **3** and **4** "
"respectively."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:1792
msgid ""
"Using the :program:`llvm-debuginfo-analyzer` selection facilities, we can "
"produce a simple tabular output showing just the logical elements that have "
"in their name the *var* pattern. The logical view is sorted by the variables "
"name."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:1840
msgid ""
"It also shows, that the CodeView debug information does not generate source "
"code line numbers for the those logical symbols. The logical view is sorted "
"by the types name."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:1845
msgid "TEST CASE 6 - FULL LOGICAL VIEW"
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:1846
msgid ""
"For advanced users, :program:`llvm-debuginfo-analyzer` can display low level "
"information that includes offsets within the debug information section, "
"debug location operands, linkage names, etc."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:1939
msgid ""
"The **Scope Sizes** table shows the contribution in bytes to the debug "
"information by each scope, which can be used to determine unexpected size "
"changes in the DWARF sections between different versions of the same "
"toolchain."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:1956
msgid ""
"The **{Range}** attribute describe the line ranges for a logical scope. For "
"this case, the function **foo** is within the lines **2** and **9**."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:1959
msgid ""
"The **{Coverage}** and **{Location}** attributes describe the debug location "
"and coverage for logical symbols. For optimized code, the coverage value "
"decreases and it affects the program debuggability."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:1964
msgid "WEBASSEMBLY SUPPORT"
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:1965
msgid ""
"The below example is used to show the WebAssembly output generated by :"
"program:`llvm-debuginfo-analyzer`. We compiled the example for a WebAssembly "
"32-bit target with Clang (-O0 -g --target=wasm32):"
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:1982
msgid "PRINT BASIC DETAILS"
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:2098
msgid ""
"The following prints all *instructions*, *symbols* and *types* that contain "
"**'block'** or **'.store'** in their names or types, using a tab layout and "
"given the number of matches."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:2273
msgid "EXIT STATUS"
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:2274
msgid ""
":program:`llvm-debuginfo-analyzer` returns 0 if the input files were parsed "
"and printed successfully. Otherwise, it returns 1."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:2278
msgid "LIMITATIONS AND KNOWN ISSUES"
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:2279
msgid ""
"See :download:`Limitations <../../tools/llvm-debuginfo-analyzer/README.md>`."
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:2282
msgid "SEE ALSO"
msgstr ""

#: ../../../CommandGuide/llvm-debuginfo-analyzer.rst:2283
msgid ":manpage:`llvm-dwarfdump`"
msgstr ""
