# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 17\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr_FR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../CommandGuide/llvm-symbolizer.rst:2
msgid "llvm-symbolizer - convert addresses into source code locations"
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:7
msgid "SYNOPSIS"
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:9
msgid ":program:`llvm-symbolizer` [*options*] [*addresses...*]"
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:12
msgid "DESCRIPTION"
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:14
msgid ""
":program:`llvm-symbolizer` reads input names and addresses from the command-"
"line and prints corresponding source code locations to standard output. It "
"can also symbolize logs containing :doc:`Symbolizer Markup </"
"SymbolizerMarkupFormat>` via :option:`--filter-markup`."
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:19
msgid ""
"If no address is specified on the command-line, it reads the addresses from "
"standard input. If no input name is specified on the command-line, but "
"addresses are, or if at any time an input value is not recognized, the input "
"is simply echoed to the output."
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:24
msgid ""
"Input names can be specified together with the addresses either on standard "
"input or as positional arguments on the command-line. By default, input "
"names are interpreted as object file paths. However, prefixing a name with "
"``BUILDID:`` states that it is a hex build ID rather than a path. This will "
"look up the corresponding debug binary. For consistency, prefixing a name "
"with ``FILE:`` explicitly states that it is an object file path (the "
"default)."
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:31
msgid ""
"A positional argument or standard input value can be preceded by \"DATA\" or "
"\"CODE\" to indicate that the address should be symbolized as data or "
"executable code respectively. If neither is specified, \"CODE\" is assumed. "
"DATA is symbolized as address and symbol size rather than line number."
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:36
msgid ""
":program:`llvm-symbolizer` parses options from the environment variable "
"``LLVM_SYMBOLIZER_OPTS`` after parsing options from the command line. "
"``LLVM_SYMBOLIZER_OPTS`` is primarily useful for supplementing the command-"
"line options when :program:`llvm-symbolizer` is invoked by another program "
"or runtime."
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:43
msgid "EXAMPLES"
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:45
msgid ""
"All of the following examples use the following two source files as input. "
"They use a mixture of C-style and C++-style linkage to illustrate how these "
"names are printed differently (see :option:`--demangle`)."
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:75
msgid "These files are built as follows:"
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:82
msgid "Example 1 - addresses and object on command-line:"
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:93
msgid "Example 2 - addresses on standard input:"
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:111
msgid "Example 3 - object specified with address:"
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:133
msgid "Example 4 - BUILDID and FILE prefixes:"
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:155
msgid "Example 5 - CODE and DATA prefixes:"
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:177
msgid "Example 6 - path-style options:"
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:179
msgid ""
"This example uses the same source file as above, but the source file's full "
"path is /tmp/foo/test.cpp and is compiled as follows. The first case shows "
"the default absolute path, the second --basenames, and the third shows --"
"relativenames."
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:200
msgid "OPTIONS"
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:204
msgid ""
"Add the specified offset to object file addresses when performing lookups. "
"This can be used to perform lookups as if the object were relocated by the "
"offset."
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:210
msgid ""
"Print just the file's name without any directories, instead of the absolute "
"path."
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:215
msgid ""
"Look up the object using the given build ID, specified as a hexadecimal "
"string. Mutually exclusive with :option:`--obj`."
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:220
msgid ""
"Specify whether to use color in :option:`--filter-markup` mode. Defaults to "
"``auto``, which detects whether standard output supports color. Specifying "
"``--color`` alone is equivalent to ``--color=always``."
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:226
msgid ""
"Provide a path to a directory with a `.build-id` subdirectory to search for "
"debug information for stripped binaries. Multiple instances of this argument "
"are searched in the order given."
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:232
msgid ""
"Whether or not to try debuginfod lookups for debug binaries. Unless "
"specified, debuginfod is only enabled if libcurl was compiled in "
"(``LLVM_ENABLE_CURL``) and at least one server URL was provided by the "
"environment variable ``DEBUGINFOD_URLS``."
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:241
msgid ""
"Print demangled function names, if the names are mangled (e.g. the mangled "
"name `_Z3bazv` becomes `baz()`, whilst the non-mangled name `foz` is printed "
"as is). Defaults to true."
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:247
msgid ""
"Use the specified DWP file at ``<path>`` for any CUs that have split DWARF "
"debug data."
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:252
msgid ""
"When a separate file contains debug data, and is referenced by a GNU debug "
"link section, use the specified path as a basis for locating the debug data "
"if it cannot be found relative to the object."
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:258
msgid ""
"Reads from standard input, converts contained :doc:`Symbolizer Markup </"
"SymbolizerMarkupFormat>` into human-readable form, and prints the results to "
"standard output. The following markup elements are not yet supported:"
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:263
msgid "``{{{hexdict}}}``"
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:264
msgid "``{{{dumpfile}}}``"
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:266
msgid ""
"The ``{{{bt}}}`` backtrace element reports frames using the following syntax:"
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:268
msgid ""
"``#<number>[.<inline>] <address> <function> <file>:<line>:<col> "
"(<module>+<relative address>)``"
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:270
msgid ""
"``<inline>`` provides frame numbers for calls inlined into the caller "
"coresponding to ``<number>``. The inlined call numbers start at 1 and "
"increase from callee to caller."
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:274
msgid ""
"``<address>`` is an address inside the call instruction to the function.  "
"The address may not be the start of the instruction.  ``<relative address>`` "
"is the corresponding virtual offset in the ``<module>`` loaded at that "
"address."
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:283
msgid ""
"Specify the way function names are printed (omit function name, print short "
"function name, or print full linkage name, respectively). Defaults to "
"``linkage``."
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:289
msgid "Show help and usage for this command."
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:295
msgid ""
"If a source code location is in an inlined function, prints all the inlined "
"frames. This is the default."
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:300
msgid "Don't print inlined frames."
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:304
msgid "Don't print demangled function names."
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:308
msgid ""
"Path to object file to be symbolized. If ``-`` is specified, read the object "
"directly from the standard input stream. Mutually exclusive with :option:`--"
"build-id`."
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:316
msgid ""
"Specify the preferred output style. Defaults to ``LLVM``. When the output "
"style is set to ``GNU``, the tool follows the style of GNU's **addr2line**. "
"The differences from the ``LLVM`` style are:"
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:320
msgid "Does not print the column of a source code location."
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:322
msgid "Does not add an empty line after the report for an address."
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:324
msgid ""
"Does not replace the name of an inlined function with the name of the "
"topmost caller when inlined frames are not shown."
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:327
msgid ""
"Prints an address's debug-data discriminator when it is non-zero. One way to "
"produce discriminators is to compile with clang's -fdebug-info-for-profiling."
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:332
msgid ""
"``JSON`` style provides a machine readable output in JSON. If addresses are"
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:331
msgid ""
"supplied via stdin, the output JSON will be a series of individual objects. "
"Otherwise, all results will be contained in a single array."
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:403
msgid ""
"Print human readable output. If :option:`--inlining` is specified, the "
"enclosing scope is prefixed by (inlined by). For JSON output, the option "
"will cause JSON to be indented and split over new lines. Otherwise, the JSON "
"output will be printed in a compact form."
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:416
msgid "Print address before the source code location. Defaults to false."
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:433
msgid "Print ``N`` lines of source context for each symbolized address."
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:446
msgid ""
"Print the file's path relative to the compilation directory, instead of the "
"absolute path. If the command-line to the compiler included the full path, "
"this will be the same as the default."
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:452
msgid "Print verbose address, line and column information."
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:474
msgid "Print version information for the tool."
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:478
msgid "Read command-line options from response file `<FILE>`."
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:481
msgid "WINDOWS/PDB SPECIFIC OPTIONS"
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:485
msgid ""
"Use the Windows DIA SDK for symbolization. If the DIA SDK is not found, llvm-"
"symbolizer will fall back to the native implementation."
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:489
msgid "MACH-O SPECIFIC OPTIONS"
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:493
msgid ""
"If a binary contains object files for multiple architectures (e.g. it is a "
"Mach-O universal binary), symbolize the object file for a given "
"architecture. You can also specify the architecture by writing ``binary_name:"
"arch_name`` in the input (see example below). If the architecture is not "
"specified in either way, the address will not be symbolized. Defaults to "
"empty string."
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:514
msgid ""
"If the debug info for a binary isn't present in the default location, look "
"for the debug info at the .dSYM path provided via this option. This flag can "
"be used multiple times."
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:519
msgid "EXIT STATUS"
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:521
msgid ""
":program:`llvm-symbolizer` returns 0. Other exit codes imply an internal "
"program error."
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:525
msgid "SEE ALSO"
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:527
msgid ":manpage:`llvm-addr2line(1)`"
msgstr ""
