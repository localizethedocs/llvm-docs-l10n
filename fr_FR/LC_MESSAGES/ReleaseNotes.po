# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 15\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr_FR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../ReleaseNotes.rst:3
msgid "LLVM |release| Release Notes"
msgstr ""

#: ../../../ReleaseNotes.rst:10
msgid "Introduction"
msgstr ""

#: ../../../ReleaseNotes.rst:12
msgid ""
"This document contains the release notes for the LLVM Compiler "
"Infrastructure, release |release|.  Here we describe the status of LLVM, "
"including major improvements from the previous release, improvements in "
"various subprojects of LLVM, and some of the current users of the code.  All "
"LLVM releases may be downloaded from the `LLVM releases web site <https://"
"llvm.org/releases/>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:18
msgid ""
"For more information about LLVM, including information about the latest "
"release, please check out the `main LLVM web site <https://llvm.org/>`_.  If "
"you have questions or comments, the `LLVM Developer's Mailing List <https://"
"lists.llvm.org/mailman/listinfo/llvm-dev>`_ is a good place to send them."
msgstr ""

#: ../../../ReleaseNotes.rst:24
msgid ""
"Note that if you are reading this file from a Git checkout or the main LLVM "
"web page, this document applies to the *next* release, not the current one.  "
"To see the release notes for a specific release, please see the `releases "
"page <https://llvm.org/releases/>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:30
msgid "Non-comprehensive list of changes in this release"
msgstr ""

#: ../../../ReleaseNotes.rst:38 ../../../ReleaseNotes.rst:150
#: ../../../ReleaseNotes.rst:165 ../../../ReleaseNotes.rst:170
#: ../../../ReleaseNotes.rst:228 ../../../ReleaseNotes.rst:334
msgid "..."
msgstr ""

#: ../../../ReleaseNotes.rst:41
msgid "Update on required toolchains to build LLVM"
msgstr ""

#: ../../../ReleaseNotes.rst:43
msgid ""
"With LLVM 15.x we will raise the version requirements of the toolchain used "
"to build LLVM. The new requirements are as follows:"
msgstr ""

#: ../../../ReleaseNotes.rst:46
msgid "GCC >= 7.1"
msgstr ""

#: ../../../ReleaseNotes.rst:47
msgid "Clang >= 5.0"
msgstr ""

#: ../../../ReleaseNotes.rst:48
msgid "Apple Clang >= 9.3"
msgstr ""

#: ../../../ReleaseNotes.rst:49
msgid "Visual Studio 2019 >= 16.7"
msgstr ""

#: ../../../ReleaseNotes.rst:51
msgid ""
"In LLVM 15.x these requirements will be \"soft\" requirements and the "
"version check can be skipped by passing ``-"
"DLLVM_TEMPORARILY_ALLOW_OLD_TOOLCHAIN=ON`` to CMake."
msgstr ""

#: ../../../ReleaseNotes.rst:55
msgid ""
"With the release of LLVM 16.x these requirements will be hard and LLVM "
"developers can start using C++17 features, making it impossible to build "
"with older versions of these toolchains."
msgstr ""

#: ../../../ReleaseNotes.rst:60
msgid "Changes to the LLVM IR"
msgstr ""

#: ../../../ReleaseNotes.rst:62
msgid ""
"LLVM now uses `opaque pointers <OpaquePointers.html>`__. This means that "
"different pointer types like ``i8*``, ``i32*`` or ``void()**`` are now "
"represented as a single ``ptr`` type. See the linked document for migration "
"instructions."
msgstr ""

#: ../../../ReleaseNotes.rst:66
msgid ""
"Renamed ``llvm.experimental.vector.extract`` intrinsic to ``llvm.vector."
"extract``."
msgstr ""

#: ../../../ReleaseNotes.rst:67
msgid ""
"Renamed ``llvm.experimental.vector.insert`` intrinsic to ``llvm.vector."
"insert``."
msgstr ""

#: ../../../ReleaseNotes.rst:68
msgid ""
"The constant expression variants of the following instructions have been "
"removed:"
msgstr ""

#: ../../../ReleaseNotes.rst:71
msgid "``extractvalue``"
msgstr ""

#: ../../../ReleaseNotes.rst:72
msgid "``insertvalue``"
msgstr ""

#: ../../../ReleaseNotes.rst:73
msgid "``udiv``"
msgstr ""

#: ../../../ReleaseNotes.rst:74
msgid "``sdiv``"
msgstr ""

#: ../../../ReleaseNotes.rst:75
msgid "``urem``"
msgstr ""

#: ../../../ReleaseNotes.rst:76
msgid "``srem``"
msgstr ""

#: ../../../ReleaseNotes.rst:77
msgid "``fadd``"
msgstr ""

#: ../../../ReleaseNotes.rst:78
msgid "``fsub``"
msgstr ""

#: ../../../ReleaseNotes.rst:79
msgid "``fmul``"
msgstr ""

#: ../../../ReleaseNotes.rst:80
msgid "``fdiv``"
msgstr ""

#: ../../../ReleaseNotes.rst:81
msgid "``frem``"
msgstr ""

#: ../../../ReleaseNotes.rst:83
msgid ""
"Added the support for ``fmax`` and ``fmin`` in ``atomicrmw`` instruction. "
"The comparison is expected to match the behavior of ``llvm.maxnum.*`` and "
"``llvm.minnum.*`` respectively."
msgstr ""

#: ../../../ReleaseNotes.rst:86
msgid ""
"``callbr`` instructions no longer use ``blockaddress`` arguments for labels. "
"Instead, label constraints starting with ``!`` refer directly to entries in "
"the ``callbr`` indirect destination list."
msgstr ""

#: ../../../ReleaseNotes.rst:100
msgid "Changes to building LLVM"
msgstr ""

#: ../../../ReleaseNotes.rst:102
msgid ""
"Omitting ``CMAKE_BUILD_TYPE`` when using a single configuration generator is "
"now an error. You now have to pass ``-DCMAKE_BUILD_TYPE=<type>`` in order to "
"configure LLVM. This is done to help new users of LLVM select the correct "
"type: since building LLVM in Debug mode is very resource intensive, we want "
"to make sure that new users make the choice that lines up with their usage. "
"We have also improved documentation around this setting that should help new "
"users. You can find this documentation `here <https://llvm.org/docs/CMake."
"html#cmake-build-type>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:111
msgid "Changes to TableGen"
msgstr ""

#: ../../../ReleaseNotes.rst:114
msgid "Changes to Loop Optimizations"
msgstr ""

#: ../../../ReleaseNotes.rst:116
msgid "Loop interchange legality and cost model improvements"
msgstr ""

#: ../../../ReleaseNotes.rst:120
msgid "Changes to the AArch64 Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:123
msgid "Changes to the AMDGPU Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:125
msgid "8 and 16-bit atomic loads and stores are now supported"
msgstr ""

#: ../../../ReleaseNotes.rst:129
msgid "Changes to the ARM Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:131 ../../../ReleaseNotes.rst:133
msgid "Added support for the Armv9-A, Armv9.1-A and Armv9.2-A architectures."
msgstr ""

#: ../../../ReleaseNotes.rst:132 ../../../ReleaseNotes.rst:134
msgid "Added support for the Armv8.1-M PACBTI-M extension."
msgstr ""

#: ../../../ReleaseNotes.rst:135
msgid ""
"Removed the deprecation of ARMv8-A T32 Complex IT blocks. No deprecation "
"warnings will be generated and -mrestrict-it is now always off by default. "
"Previously it was on by default for Armv8 and off for all other architecture "
"versions."
msgstr ""

#: ../../../ReleaseNotes.rst:139
msgid ""
"Added a pass to workaround Cortex-A57 Erratum 1742098 and Cortex-A72 Erratum "
"1655431. This is enabled by default when targeting either CPU."
msgstr ""

#: ../../../ReleaseNotes.rst:141
msgid "Implemented generation of Windows SEH unwind information."
msgstr ""

#: ../../../ReleaseNotes.rst:142
msgid ""
"Switched the MinGW target to use SEH instead of DWARF for unwind information."
msgstr ""

#: ../../../ReleaseNotes.rst:143
msgid "Added support for the Cortex-M85 CPU."
msgstr ""

#: ../../../ReleaseNotes.rst:144
msgid ""
"Added support for a new ``-mframe-chain=(none|aapcs|aapcs+leaf)`` command-"
"line option, which controls the generation of AAPCS-compliant Frame Records."
msgstr ""

#: ../../../ReleaseNotes.rst:148
msgid "Changes to the AVR Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:153
msgid "Changes to the DirectX Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:155
msgid ""
"DirectX has been added as an experimental target. Specify ``-"
"DLLVM_EXPERIMENTAL_TARGETS_TO_BUILD=DirectX`` in your CMake configuration to "
"enable it. The target is not packaged in pre-built binaries."
msgstr ""

#: ../../../ReleaseNotes.rst:158
msgid ""
"The DirectX backend supports the ``dxil`` architecture which is based on "
"LLVM 3.6 IR encoded as bitcode and is the format used for DirectX GPU Shader "
"programs."
msgstr ""

#: ../../../ReleaseNotes.rst:163
msgid "Changes to the Hexagon Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:168
msgid "Changes to the MIPS Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:173
msgid "Changes to the PowerPC Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:175
msgid ""
"Common PowerPC improvements: * Add a new post instruction selection pass to "
"generate CTR loops. * Add SSE4 and BMI compatible intrinsics implementation. "
"* Supported 16-byte lock free atomics on PowerPC8 and up. * Supported atomic "
"load/store for pointer types. * Supported stack size larger than 2G * Add "
"__builtin_min/__builtin_max/__abs builtins. * Code generation improvements "
"for splat load/vector shuffle/mulli, etc. * Emit VSX instructions for vector "
"loads and stores regardless of alignment. * The mcpu=future has its own ISA "
"now (FutureISA). * Added the ppc-set-dscr option to set the Data Stream "
"Control Register (DSCR). * Bug fixes."
msgstr ""

#: ../../../ReleaseNotes.rst:188
msgid ""
"AIX improvements: * Supported 64 bit XCOFF for integrated-as path. * "
"Supported X86-compatible vector intrinsics. * Program code csect default "
"alignment now is 32-byte. * Supported auxiliary header in integrated-as "
"path. * Improved alias symbol handling."
msgstr ""

#: ../../../ReleaseNotes.rst:196
msgid "Changes to the RISC-V Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:198
msgid ""
"A RISCVRedundantCopyElimination pass was added to remove unnecessary zero "
"copies."
msgstr ""

#: ../../../ReleaseNotes.rst:200
msgid "A RISC-V specific CodeGenPrepare pass was added."
msgstr ""

#: ../../../ReleaseNotes.rst:201
msgid ""
"The machine outliner was enabled by default for RISC-V at ``-Oz``. "
"Additionally, the newly introduced RISCVMakeCompressible pass will make "
"modify instructions prior to emission at ``-Oz`` in order to increase "
"opportunities for the compression with the RISC-V C extension."
msgstr ""

#: ../../../ReleaseNotes.rst:205
msgid ""
"Various bug fixes and improvements to code generation for the RISC-V vector "
"extensions."
msgstr ""

#: ../../../ReleaseNotes.rst:207
msgid ""
"Various improvements were made to RISC-V specific optimisation passes such "
"as RISCVSExtWRemoval and RISCVMergeBaseOffset."
msgstr ""

#: ../../../ReleaseNotes.rst:209
msgid ""
"llc now computes the target ABI based on the target architecture using the "
"same logic as Clang if not explicit ABI is given."
msgstr ""

#: ../../../ReleaseNotes.rst:211
msgid ""
"``generic`` is now recognized as a valid CPU name and is mapped to ``generic-"
"rv32`` or ``generic-rv64`` depending on the target triple."
msgstr ""

#: ../../../ReleaseNotes.rst:213
msgid ""
"Support for the experimental Zvfh extension was added, enabling half-"
"precision floating point in vectors."
msgstr ""

#: ../../../ReleaseNotes.rst:215
msgid "Support for the Zihintpause (Pause Hint) extension."
msgstr ""

#: ../../../ReleaseNotes.rst:216
msgid ""
"Assembler and disassembler support for the Zfinx and Zdinx (float / double "
"in integer register) extensions."
msgstr ""

#: ../../../ReleaseNotes.rst:218
msgid ""
"Assembler and disassembler support for the Zicbom, Zicboz, and Zicbop cache "
"management operation extensions."
msgstr ""

#: ../../../ReleaseNotes.rst:220
msgid ""
"Support for the Zmmul extension (a subextension of the M extension, adding "
"multiplication instructions only)."
msgstr ""

#: ../../../ReleaseNotes.rst:222
msgid ""
"Assembler and disassembler support for the hypervisor extension and for the "
"Sinval supervisor memory-management extension."
msgstr ""

#: ../../../ReleaseNotes.rst:226
msgid "Changes to the WebAssembly Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:231
msgid "Changes to the SystemZ Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:233
msgid "Support z16 processor name."
msgstr ""

#: ../../../ReleaseNotes.rst:234
msgid "Machine scheduler description for z16."
msgstr ""

#: ../../../ReleaseNotes.rst:235
msgid ""
"Add support for inline assembly address operands (\"p\") as well as for "
"SystemZ specific address operands (\"ZQ\", \"ZR\", \"ZS\" and \"ZT\")."
msgstr ""

#: ../../../ReleaseNotes.rst:237
msgid "Efficient handling of small memcpy/memset operations up to 32 bytes."
msgstr ""

#: ../../../ReleaseNotes.rst:238
msgid "Tuning of the inliner."
msgstr ""

#: ../../../ReleaseNotes.rst:239
msgid ""
"Fixing emission of library calls so that narrow integer arguments are sign "
"or zero extended per the SystemZ ABI."
msgstr ""

#: ../../../ReleaseNotes.rst:241
msgid "Support added for libunwind."
msgstr ""

#: ../../../ReleaseNotes.rst:242
msgid "Various minor improvements and bugfixes."
msgstr ""

#: ../../../ReleaseNotes.rst:245
msgid "Changes to the X86 Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:247
msgid "Support ``half`` type on SSE2 and above targets following X86 psABI."
msgstr ""

#: ../../../ReleaseNotes.rst:248
msgid "Support ``rdpru`` instruction on Zen2 and above targets."
msgstr ""

#: ../../../ReleaseNotes.rst:250
msgid ""
"During this release, ``half`` type has an ABI breaking change to provide the "
"support for the ABI of ``_Float16`` type on SSE2 and above following X86 "
"psABI. (`D107082 <https://reviews.llvm.org/D107082>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:254
msgid ""
"The change may affect the current use of ``half`` includes (but is not "
"limited to):"
msgstr ""

#: ../../../ReleaseNotes.rst:257
msgid ""
"Frontends generating ``half`` type in function passing and/or returning "
"arguments."
msgstr ""

#: ../../../ReleaseNotes.rst:259
msgid ""
"Downstream runtimes providing any ``half`` conversion builtins assuming the "
"old ABI."
msgstr ""

#: ../../../ReleaseNotes.rst:261
msgid "Projects built with LLVM 15.0 but using early versions of compiler-rt."
msgstr ""

#: ../../../ReleaseNotes.rst:263
msgid ""
"When you find failures with ``half`` type, check the calling conversion of "
"the code and switch it to the new ABI."
msgstr ""

#: ../../../ReleaseNotes.rst:267
msgid "Changes to the OCaml bindings"
msgstr ""

#: ../../../ReleaseNotes.rst:271
msgid "Changes to the C API"
msgstr ""

#: ../../../ReleaseNotes.rst:273
msgid ""
"Add ``LLVMGetCastOpcode`` function to aid users of ``LLVMBuildCast`` in "
"resolving the best cast operation given a source value and destination type. "
"This function is a direct wrapper of ``CastInst::getCastOpcode``."
msgstr ""

#: ../../../ReleaseNotes.rst:277
msgid ""
"Add ``LLVMGetAggregateElement`` function as a wrapper for ``Constant::"
"getAggregateElement``, which can be used to fetch an element of a constant "
"struct, array or vector, independently of the underlying representation. The "
"``LLVMGetElementAsConstant`` function is deprecated in favor of the new "
"function, which works on all constant aggregates, rather than only instances "
"of ``ConstantDataSequential``."
msgstr ""

#: ../../../ReleaseNotes.rst:284
msgid ""
"The following functions for creating constant expressions have been removed, "
"because the underlying constant expressions are no longer supported. "
"Instead, an instruction should be created using the ``LLVMBuildXYZ`` APIs, "
"which will constant fold the operands if possible and create an instruction "
"otherwise:"
msgstr ""

#: ../../../ReleaseNotes.rst:289
msgid "``LLVMConstExtractValue``"
msgstr ""

#: ../../../ReleaseNotes.rst:290
msgid "``LLVMConstInsertValue``"
msgstr ""

#: ../../../ReleaseNotes.rst:291
msgid "``LLVMConstUDiv``"
msgstr ""

#: ../../../ReleaseNotes.rst:292
msgid "``LLVMConstExactUDiv``"
msgstr ""

#: ../../../ReleaseNotes.rst:293
msgid "``LLVMConstSDiv``"
msgstr ""

#: ../../../ReleaseNotes.rst:294
msgid "``LLVMConstExactSDiv``"
msgstr ""

#: ../../../ReleaseNotes.rst:295
msgid "``LLVMConstURem``"
msgstr ""

#: ../../../ReleaseNotes.rst:296
msgid "``LLVMConstSRem``"
msgstr ""

#: ../../../ReleaseNotes.rst:297
msgid "``LLVMConstFAdd``"
msgstr ""

#: ../../../ReleaseNotes.rst:298
msgid "``LLVMConstFSub``"
msgstr ""

#: ../../../ReleaseNotes.rst:299
msgid "``LLVMConstFMul``"
msgstr ""

#: ../../../ReleaseNotes.rst:300
msgid "``LLVMConstFDiv``"
msgstr ""

#: ../../../ReleaseNotes.rst:301
msgid "``LLVMConstFRem``"
msgstr ""

#: ../../../ReleaseNotes.rst:303
msgid ""
"Add ``LLVMDeleteInstruction`` function which allows deleting instructions "
"that are not inserted into a basic block."
msgstr ""

#: ../../../ReleaseNotes.rst:306
msgid ""
"As part of the opaque pointer migration, the following APIs are deprecated "
"and will be removed in the next release:"
msgstr ""

#: ../../../ReleaseNotes.rst:309
msgid "``LLVMBuildLoad`` -> ``LLVMBuildLoad2``"
msgstr ""

#: ../../../ReleaseNotes.rst:310
msgid "``LLVMBuildCall`` -> ``LLVMBuildCall2``"
msgstr ""

#: ../../../ReleaseNotes.rst:311
msgid "``LLVMBuildInvoke`` -> ``LLVMBuildInvoke2``"
msgstr ""

#: ../../../ReleaseNotes.rst:312
msgid "``LLVMBuildGEP`` -> ``LLVMBuildGEP2``"
msgstr ""

#: ../../../ReleaseNotes.rst:313
msgid "``LLVMBuildInBoundsGEP`` -> ``LLVMBuildInBoundsGEP2``"
msgstr ""

#: ../../../ReleaseNotes.rst:314
msgid "``LLVMBuildStructGEP`` -> ``LLVMBuildStructGEP2``"
msgstr ""

#: ../../../ReleaseNotes.rst:315
msgid "``LLVMBuildPtrDiff`` -> ``LLVMBuildPtrDiff2``"
msgstr ""

#: ../../../ReleaseNotes.rst:316
msgid "``LLVMConstGEP`` -> ``LLVMConstGEP2``"
msgstr ""

#: ../../../ReleaseNotes.rst:317
msgid "``LLVMConstInBoundsGEP`` -> ``LLVMConstInBoundsGEP2``"
msgstr ""

#: ../../../ReleaseNotes.rst:318
msgid "``LLVMAddAlias`` -> ``LLVMAddAlias2``"
msgstr ""

#: ../../../ReleaseNotes.rst:320
msgid ""
"Refactor compression namespaces across the project, making way for a "
"possible introduction of alternatives to zlib compression in the llvm "
"toolchain. Changes are as follows:"
msgstr ""

#: ../../../ReleaseNotes.rst:324
msgid "Relocate the ``llvm::zlib`` namespace to ``llvm::compression::zlib``."
msgstr ""

#: ../../../ReleaseNotes.rst:325
msgid ""
"Remove crc32 from zlib compression namespace, people should use the ``llvm::"
"crc32`` instead."
msgstr ""

#: ../../../ReleaseNotes.rst:328
msgid "Changes to the Go bindings"
msgstr ""

#: ../../../ReleaseNotes.rst:332
msgid "Changes to the FastISel infrastructure"
msgstr ""

#: ../../../ReleaseNotes.rst:337
msgid "Changes to the DAG infrastructure"
msgstr ""

#: ../../../ReleaseNotes.rst:341
msgid "Changes to the Metadata Info"
msgstr ""

#: ../../../ReleaseNotes.rst:343
msgid ""
"Add Module Flags Metadata ``stack-protector-guard-symbol`` which specify a "
"symbol for addressing the stack-protector guard."
msgstr ""

#: ../../../ReleaseNotes.rst:347
msgid "Changes to the Debug Info"
msgstr ""

#: ../../../ReleaseNotes.rst:349
msgid "During this release ..."
msgstr ""

#: ../../../ReleaseNotes.rst:352
msgid "Changes to the LLVM tools"
msgstr ""

#: ../../../ReleaseNotes.rst:354
msgid ""
"(Experimental) :doc:`llvm-symbolizer <CommandGuide/llvm-symbolizer>` now has "
"``--filter-markup`` to filter :doc:`Symbolizer Markup </"
"SymbolizerMarkupFormat>` into human-readable form."
msgstr ""

#: ../../../ReleaseNotes.rst:357
msgid ""
":doc:`llvm-objcopy <CommandGuide/llvm-objcopy>` has removed support for the "
"legacy ``zlib-gnu`` format."
msgstr ""

#: ../../../ReleaseNotes.rst:358
msgid ""
":doc:`llvm-objcopy <CommandGuide/llvm-objcopy>` now allows ``--set-section-"
"flags src=... --rename-section src=tst``. ``--add-section=.foo1=... --rename-"
"section=.foo1=.foo2`` now adds ``.foo1`` instead of ``.foo2``."
msgstr ""

#: ../../../ReleaseNotes.rst:360
msgid "New features supported on AIX for ``llvm-ar``:"
msgstr ""

#: ../../../ReleaseNotes.rst:362
msgid ""
"AIX big-format archive write operation (`D123949 <https://reviews.llvm.org/"
"D123949>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:364
msgid ""
"A new object mode option, ``-X`` , to specify the type of object file ``llvm-"
"ar`` should operate upon (`D127864 <https://reviews.llvm.org/D127864>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:366
msgid ""
"Read global symbols of AIX big archive (`D124865 <https://reviews.llvm.org/"
"D124865>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:368
msgid "New options supported for ``llvm-nm``:"
msgstr ""

#: ../../../ReleaseNotes.rst:370
msgid ""
"``-X``, to specify the type of object file that ``llvm-nm`` should examine "
"(`D118193 <https://reviews.llvm.org/D118193>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:372
msgid ""
"``--export-symbols``, to create a list of symbols to export (`D112735 "
"<https://reviews.llvm.org/D112735>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:374
msgid ""
"The LLVM gold plugin now ignores bitcode from the ``.llvmbc`` section of ELF "
"files when doing LTO.  https://github.com/llvm/llvm-project/issues/47216"
msgstr ""

#: ../../../ReleaseNotes.rst:376
msgid "llvm-objcopy now supports 32 bit XCOFF."
msgstr ""

#: ../../../ReleaseNotes.rst:377
msgid "llvm-objdump: improved assembly printing for XCOFF."
msgstr ""

#: ../../../ReleaseNotes.rst:378
msgid "llc now parses code-model attribute from input file."
msgstr ""

#: ../../../ReleaseNotes.rst:381
msgid "Changes to LLDB"
msgstr ""

#: ../../../ReleaseNotes.rst:383
msgid ""
"The \"memory region\" command now has a \"--all\" option to list all memory "
"regions (including unmapped ranges). This is the equivalent of using address "
"0 then repeating the command until all regions have been listed."
msgstr ""

#: ../../../ReleaseNotes.rst:387
msgid ""
"Added \"--show-tags\" option to the \"memory find\" command. This is off by "
"default. When enabled, if the target value is found in tagged memory, the "
"tags for that memory will be shown inline with the memory contents."
msgstr ""

#: ../../../ReleaseNotes.rst:390
msgid ""
"Various memory related parts of LLDB have been updated to handle non-address "
"bits (such as AArch64 pointer signatures):"
msgstr ""

#: ../../../ReleaseNotes.rst:393
msgid ""
"\"memory read\", \"memory write\" and \"memory find\" can now be used with "
"addresses with non-address bits."
msgstr ""

#: ../../../ReleaseNotes.rst:395
msgid ""
"All the read and write memory methods on SBProccess and SBTarget can be used "
"with addreses with non-address bits."
msgstr ""

#: ../../../ReleaseNotes.rst:397
msgid ""
"When printing a pointer expression, LLDB can now dereference the result even "
"if it has non-address bits."
msgstr ""

#: ../../../ReleaseNotes.rst:399
msgid ""
"The memory cache now ignores non-address bits when looking up memory "
"locations. This prevents us reading locations multiple times, or not writing "
"out new values if the addresses have different non-address bits."
msgstr ""

#: ../../../ReleaseNotes.rst:403
msgid "LLDB now supports reading memory tags from AArch64 Linux core files."
msgstr ""

#: ../../../ReleaseNotes.rst:405
msgid ""
"LLDB now supports the gnu debuglink section for reading debug information "
"from a separate file on Windows"
msgstr ""

#: ../../../ReleaseNotes.rst:408
msgid ""
"LLDB now allows selecting the C++ ABI to use on Windows (between Itanium, "
"used for MingW, and MSVC) via the ``plugin.object-file.pe-coff.abi`` "
"setting. In Windows builds of LLDB, this defaults to the style used for "
"LLVM's default target."
msgstr ""

#: ../../../ReleaseNotes.rst:414
msgid "Changes to Sanitizers"
msgstr ""

#: ../../../ReleaseNotes.rst:418
msgid "Other Changes"
msgstr ""

#: ../../../ReleaseNotes.rst:419
msgid ""
"The code for the `LLVM Visual Studio integration <https://marketplace."
"visualstudio.com/items?itemName=LLVMExtensions.llvm-toolchain>`_ has been "
"removed. This had been obsolete and abandoned since Visual Studio started "
"including an integration by default in 2019."
msgstr ""

#: ../../../ReleaseNotes.rst:424
msgid ""
"Added the unwinder, personality, and helper functions for exception handling "
"on AIX. (`D100132 <https://reviews.llvm.org/D100132>`_) (`D100504 <https://"
"reviews.llvm.org/D100504>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:428
msgid ""
"PGO on AIX: A new implementation that requires linker support "
"(__start_SECTION/__stop_SECTION symbols) available on AIX 7.2 TL5 SP4 and "
"AIX 7.3 TL0 SP2."
msgstr ""

#: ../../../ReleaseNotes.rst:433
msgid "External Open Source Projects Using LLVM 15"
msgstr ""

#: ../../../ReleaseNotes.rst:435
msgid "A project..."
msgstr ""

#: ../../../ReleaseNotes.rst:438
msgid "Additional Information"
msgstr ""

#: ../../../ReleaseNotes.rst:440
msgid ""
"A wide variety of additional information is available on the `LLVM web page "
"<https://llvm.org/>`_, in particular in the `documentation <https://llvm.org/"
"docs/>`_ section.  The web page also contains versions of the API "
"documentation which is up-to-date with the Git version of the source code.  "
"You can access versions of these documents specific to this release by going "
"into the ``llvm/docs/`` directory in the LLVM tree."
msgstr ""

#: ../../../ReleaseNotes.rst:447
msgid ""
"If you have any questions or comments about LLVM, please feel free to "
"contact us via the `mailing lists <https://llvm.org/docs/#mailing-lists>`_."
msgstr ""
