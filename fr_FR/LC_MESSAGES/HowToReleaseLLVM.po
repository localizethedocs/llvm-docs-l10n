# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 19\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr_FR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../HowToReleaseLLVM.rst:3
msgid "How To Release LLVM To The Public"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:6
msgid "Introduction"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:8
msgid ""
"This document contains information about successfully releasing LLVM --- "
"including sub-projects: e.g., ``clang`` and ``compiler-rt`` --- to the "
"public. It is the Release Manager's responsibility to ensure that a high "
"quality build of LLVM is released."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:13
msgid ""
"If you're looking for the document on how to test the release candidates and "
"create the binary packages, please refer to the :doc:`ReleaseProcess` "
"instead."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:19
msgid "Release Timeline"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:21
msgid ""
"LLVM is released on a time based schedule --- with major releases roughly "
"every 6 months.  In between major releases there may be dot releases. The "
"release manager will determine if and when to make a dot release based on "
"feedback from the community.  Typically, dot releases should be made if "
"there are large number of bug-fixes in the stable branch or a critical bug "
"has been discovered that affects a large number of users."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:28
msgid ""
"Unless otherwise stated, dot releases will follow the same procedure as "
"major releases."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:32
msgid "Annual Release Schedule"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:34
msgid ""
"Here is the annual release schedule for LLVM.  This is meant to be a guide, "
"and release managers are not required to follow this exactly. Releases "
"should be tagged on Tuesdays."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:39
msgid "Release"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:39
msgid "Approx. Date"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:41
msgid "*release branch: even releases*"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:41
msgid "*4th Tue in January*"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:42
msgid "*release branch: odd releases*"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:42
msgid "*4th Tue in July*"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:43
msgid "X.1.0-rc1"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:43
msgid "3 days after branch."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:44
msgid "X.1.0-rc2"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:44
msgid "2 weeks after branch."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:45
msgid "X.1.0-rc3"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:45
msgid "4 weeks after branch"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:46
msgid "**X.1.0-final**"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:46
msgid "**6 weeks after branch**"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:47
msgid "**X.1.1**"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:47
msgid "**8 weeks after branch**"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:48
msgid "**X.1.2**"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:48
msgid "**10 weeks after branch**"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:49
msgid "**X.1.3**"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:49
msgid "**12 weeks after branch**"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:50
msgid "**X.1.4**"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:50
msgid "**14 weeks after branch**"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:51
msgid "**X.1.5**"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:51
msgid "**16 weeks after branch**"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:52
msgid "**X.1.6 (if necessary)**"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:52
msgid "**18 weeks after branch**"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:56
msgid "Release Process Summary"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:58
msgid ""
"Announce release schedule to the LLVM community and update the website.  Do "
"this at least 3 weeks before the -rc1 release."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:61
msgid "Create release branch and begin release process."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:63
msgid ""
"Send out release candidate sources for first round of testing.  Testing "
"lasts 6 weeks.  During the first round of testing, any regressions found "
"should be fixed.  Patches are merged from mainline into the release branch.  "
"Also, all features need to be completed during this time.  Any features not "
"completed at the end of the first round of testing will be removed or "
"disabled for the release."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:70
msgid ""
"Generate and send out the second release candidate sources.  Only *critical* "
"bugs found during this testing phase will be fixed.  Any bugs introduced by "
"merged patches will be fixed.  If so a third round of testing is needed."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:74
msgid "The release notes are updated."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:76
msgid "Finally, release!"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:78
msgid ""
"Announce bug fix release schedule to the LLVM community and update the "
"website."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:80
msgid ""
"Do bug-fix releases every two weeks until X.1.5 or X.1.6 (if necessary)."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:83
msgid "Release Process"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:89
msgid "Release Administrative Tasks"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:91
msgid ""
"This section describes a few administrative tasks that need to be done for "
"the release process to begin.  Specifically, it involves:"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:94
msgid "Updating version numbers,"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:96
msgid "Creating the release branch, and"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:98
msgid "Tagging release candidates for the release team to begin testing."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:101
msgid "Create Release Branch"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:103
msgid "Branch the Git trunk using the following procedure:"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:105
msgid ""
"Remind developers that the release branching is imminent and to refrain from "
"committing patches that might break the build.  E.g., new features, large "
"patches for works in progress, an overhaul of the type system, an exciting "
"new TableGen feature, etc."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:110
msgid ""
"Verify that the current git trunk is in decent shape by examining nightly "
"tester and buildbot results."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:113
msgid ""
"Bump the version in trunk to N.0.0git and tag the commit with llvmorg-N-"
"init. If ``X`` is the version to be released, then ``N`` is ``X + 1``."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:120
msgid "Clear the release notes in trunk."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:122
msgid ""
"Create the release branch from the last known good revision from before the "
"version bump.  The branch's name is release/X.x where ``X`` is the major "
"version number and ``x`` is just the letter ``x``."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:126
msgid ""
"On the newly-created release branch, immediately bump the version to "
"X.1.0git (where ``X`` is the major version of the branch.)"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:129
msgid ""
"All tags and branches need to be created in both the llvm/llvm-project and "
"llvm/llvm-test-suite repos."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:133
msgid "Update LLVM Version"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:135
msgid ""
"After creating the LLVM release branch, update the release branches' version "
"with the script in ``llvm/utils/release/bump-version.py``."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:139
msgid "Tagging the LLVM Release Candidates"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:141
msgid "Tag release candidates:"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:147
msgid ""
"The pre-packaged source tarballs will be automatically generated via the "
"\"Release Sources\" workflow on GitHub.  This workflow will create an "
"artifact containing all the release tarballs and the artifact attestation.  "
"The Release Manager should download the artifact, verify the tarballs, sign "
"them, and then upload them to the release page."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:159
msgid ""
"Tarballs, release binaries,  or any other release artifacts must be uploaded "
"to GitHub.  This can be done using the github-upload-release.py script in "
"utils/release."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:168
msgid "Build The Binary Distribution"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:170
msgid ""
"Creating the binary distribution requires following the instructions :doc:"
"`here <ReleaseProcess>`."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:173
msgid ""
"That process will perform both Release+Asserts and Release builds but only "
"pack the Release build for upload. You should use the Release+Asserts "
"sysroot, normally under ``final/Phase3/Release+Asserts/llvmCore-3.8.1-RCn."
"install/``, for test-suite and run-time benchmarks, to make sure nothing "
"serious has passed through the net. For compile-time benchmarks, use the "
"Release version."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:179
msgid ""
"The minimum required version of the tools you'll need are :doc:`here "
"<GettingStarted>`"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:182
msgid "Release Qualification Criteria"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:184
msgid ""
"There are no official release qualification criteria.  It is up to the the "
"release manager to determine when a release is ready.  The release manager "
"should pay attention to the results of community testing, the number of "
"outstanding bugs, and then number of regressions when determining whether or "
"not to make a release."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:190
msgid ""
"The community values time based releases, so releases should not be delayed "
"for too long unless there are critical issues remaining.  In most cases, the "
"only kind of bugs that are critical enough to block a release would be a "
"major regression from a previous release."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:196
msgid "Official Testing"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:198
msgid ""
"A few developers in the community have dedicated time to validate the "
"release candidates and volunteered to be the official release testers for "
"each architecture."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:202
msgid ""
"These will be the ones testing, generating and uploading the official "
"binaries to the server, and will be the minimum tests *necessary* for the "
"release to proceed."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:206
msgid ""
"This will obviously not cover all OSs and distributions, so additional "
"community validation is important. However, if community input is not "
"reached before the release is out, all bugs reported will have to go on the "
"next stable release."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:210
msgid "The official release managers are:"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:212
msgid "Even releases: Tom Stellard (tstellar@redhat.com)"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:213
msgid "Odd releases: Tobias Hieta (tobias@hieta.se)"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:215
msgid ""
"The official release testers are volunteered from the community and have "
"consistently validated and released binaries for their targets/OSs. To "
"contact them, you should post on the `Discourse forums (Project "
"Infrastructure - Release Testers). <https://discourse.llvm.org/c/"
"infrastructure/release-testers/66>`_"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:220
msgid ""
"The official testers list is in the file ``RELEASE_TESTERS.TXT``, in the "
"``LLVM`` repository."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:224
msgid "Community Testing"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:226
msgid ""
"Once all testing has been completed and appropriate bugs filed, the release "
"candidate tarballs are put on the website and the LLVM community is notified."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:229
msgid ""
"We ask that all LLVM developers test the release in any the following ways:"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:231
msgid ""
"Download ``llvm-X.Y``, ``llvm-test-X.Y``, and the appropriate ``clang`` "
"binary.  Build LLVM.  Run ``make check`` and the full LLVM test suite "
"(``make TEST=nightly report``)."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:235
msgid ""
"Download ``llvm-X.Y``, ``llvm-test-X.Y``, and the ``clang`` sources.  "
"Compile everything.  Run ``make check`` and the full LLVM test suite (``make "
"TEST=nightly report``)."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:239
msgid ""
"Download ``llvm-X.Y``, ``llvm-test-X.Y``, and the appropriate ``clang`` "
"binary. Build whole programs with it (ex. Chromium, Firefox, Apache) for "
"your platform."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:243
msgid ""
"Download ``llvm-X.Y``, ``llvm-test-X.Y``, and the appropriate ``clang`` "
"binary. Build *your* programs with it and check for conformance and "
"performance regressions."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:247
msgid ""
"Run the :doc:`release process <ReleaseProcess>`, if your platform is "
"*different* than that which is officially supported, and report back errors "
"only if they were not reported by the official release tester for that "
"architecture."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:252
msgid ""
"We also ask that the OS distribution release managers test their packages "
"with the first candidate of every release, and report any *new* errors in "
"GitHub. If the bug can be reproduced with an unpatched upstream version of "
"the release candidate (as opposed to the distribution's own build), the "
"priority should be release blocker."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:258
msgid ""
"During the first round of testing, all regressions must be fixed before the "
"second release candidate is tagged."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:261
msgid ""
"In the subsequent stages, the testing is only to ensure that bug fixes "
"previously merged in have not created new major problems. *This is not the "
"time to solve additional and unrelated bugs!* If no patches are merged in, "
"the release is determined to be ready and the release manager may move onto "
"the next stage."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:268
msgid "Reporting Regressions"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:270
msgid ""
"Every regression that is found during the tests (as per the criteria above), "
"should be filled in a bug in GitHub and added to the release milestone."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:273
msgid ""
"If a bug can't be reproduced, or stops being a blocker, it should be removed "
"from the Milestone. Debugging can continue, but on trunk."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:277
msgid "Backport Requests"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:279
msgid ""
"Instructions for requesting a backport to a stable branch can be found :doc:"
"`here <GitHub>`."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:282
msgid "Triaging Bug Reports for Releases"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:284
msgid "This section describes how to triage bug reports:"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:286
msgid ""
"Search for bugs with a Release Milestone that have not been added to the "
"\"Release Status\" github project:"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:289
msgid ""
"https://github.com/llvm/llvm-project/issues?"
"q=is%3Aissue+milestone%3A%22LLVM+14.0.5+Release%22+no%3Aproject+"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:291
msgid ""
"Replace 14.0.5 in this query with the version from the Release Milestone "
"being targeted."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:294
msgid "Add these bugs to the \"Release Status\" project."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:296
msgid ""
"Navigate to the `Release Status project <https://github.com/orgs/llvm/"
"projects/3>`_ to see the list of bugs that are being considered for the "
"release."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:299
msgid ""
"Review each bug and first check if it has been fixed in main.  If it has, "
"update its status to \"Needs Pull Request\", and create a pull request for "
"the fix using the /cherry-pick or /branch comments if this has not been done "
"already."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:303
msgid ""
"If a bug has been fixed and has a pull request created for backporting it, "
"then update its status to \"Needs Review\" and notify a knowledgeable "
"reviewer. Usually you will want to notify the person who approved the patch "
"in Phabricator, but you may use your best judgement on who a good reviewer "
"would be.  Once you have identified the reviewer(s), assign the issue to "
"them and mention them (i.e @username) in a comment and ask them if the patch "
"is safe to backport. You should also review the bug yourself to ensure that "
"it meets the requirements for committing to the release branch."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:312
msgid ""
"Once a bug has been reviewed, add the release:reviewed label and update the "
"issue's status to \"Needs Merge\".  Check the pull request associated with "
"the issue.  If all the tests pass, then the pull request can be merged.  If "
"not, then add a comment on the issue asking someone to take a look at the "
"failures."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:317
msgid ""
"Once the pull request has been merged push it to the official release branch "
"with the script ``llvm/utils/git/sync-release-repo.sh``."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:320
msgid ""
"Then add a comment to the issue stating that the fix has been merged along "
"with the git hashes from the release branch.  Add the release:merged label "
"to the issue and close it."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:326
msgid "Release Patch Rules"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:328
msgid "Below are the rules regarding patching the release branch:"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:330
msgid ""
"Patches applied to the release branch may only be applied by the release "
"manager, the official release testers or the code owners with approval from "
"the release manager."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:334
msgid ""
"Release managers are encouraged, but not required, to get approval from code "
"owners before approving patches.  If there is no code owner or the code "
"owner is unreachable then release managers can ask approval from patch "
"reviewers or other developers active in that area."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:339
msgid ""
"*Before RC1* Patches should be limited to bug fixes, important optimization "
"improvements, or completion of features that were started before the branch "
"was created.  As with all phases, release managers and code owners can "
"reject patches that are deemed too invasive."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:344
msgid ""
"*Before RC2* Patches should be limited to bug fixes or backend specific "
"improvements that are determined to be very safe."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:347
msgid ""
"*Before RC3/Final Major Release* Patches should be limited to critical bugs "
"or regressions."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:350
msgid ""
"*Bug fix releases* Patches should be limited to bug fixes or very safe and "
"critical performance improvements.  Patches must maintain both API and ABI "
"compatibility with the previous major release."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:356
msgid "Release Final Tasks"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:358
msgid ""
"The final stages of the release process involves tagging the \"final\" "
"release branch, updating documentation that refers to the release, and "
"updating the demo page."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:363
msgid "Update Documentation"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:365
msgid ""
"Review the documentation in the release branch and ensure that it is up to "
"date.  The \"Release Notes\" must be updated to reflect new features, bug "
"fixes, new known issues, and changes in the list of supported platforms. The "
"\"Getting Started Guide\" should be updated to reflect the new release "
"version number tag available from Subversion and changes in basic system "
"requirements."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:375
msgid "Tag the LLVM Final Release"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:377
msgid "Tag the final release sources:"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:385
msgid "Update the LLVM Website"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:387
msgid ""
"The website must be updated before the release announcement is sent out.  "
"Here is what to do:"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:390
msgid "Check out the ``www-releases`` module from GitHub."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:392
msgid "Create a new sub-directory ``X.Y.Z`` in the releases directory."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:394
msgid ""
"Copy and commit the ``llvm/docs`` and ``LICENSE.txt`` files into this new "
"directory."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:397
msgid ""
"Update the ``releases/download.html`` file with links to the release "
"binaries on GitHub."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:400
msgid ""
"Update the ``releases/index.html`` with the new release and link to release "
"documentation."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:403
msgid ""
"After you push the changes to the www-releases repo, someone with admin "
"access must login to prereleases-origin.llvm.org and manually pull the new "
"changes into /data/www-releases/.  This is where the website is served from."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:407
msgid ""
"Finally checkout the llvm-www repo and update the main page (``index.html`` "
"and sidebar) to point to the new release and release announcement."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:412
msgid "Announce the Release"
msgstr ""

#: ../../../HowToReleaseLLVM.rst:414
msgid ""
"Create a new post in the `Announce Category <https://discourse.llvm.org/c/"
"announce>`_ once all the release tasks are complete.  For X.1.0 releases, "
"make sure to include a link to the release notes in the post.  For X.1.1+ "
"releases, generate a changelog using this command and add it to the post."
msgstr ""

#: ../../../HowToReleaseLLVM.rst:423
msgid ""
"Once the release has been announced add a link to the announcement on the "
"llvm homepage (from the llvm-www repo) in the \"Release Emails\" section."
msgstr ""
