# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr_FR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../FuzzingLLVM.rst:3
msgid "Fuzzing LLVM libraries and tools"
msgstr ""

#: ../../../FuzzingLLVM.rst:10
msgid "Introduction"
msgstr ""

#: ../../../FuzzingLLVM.rst:12
msgid ""
"The LLVM tree includes a number of fuzzers for various components. These are "
"built on top of :doc:`LibFuzzer <LibFuzzer>`. In order to build and run "
"these fuzzers, see :ref:`building-fuzzers`."
msgstr ""

#: ../../../FuzzingLLVM.rst:18
msgid "Available Fuzzers"
msgstr ""

#: ../../../FuzzingLLVM.rst:21
msgid "clang-fuzzer"
msgstr ""

#: ../../../FuzzingLLVM.rst:23
msgid ""
"A |generic fuzzer| that tries to compile textual input as C++ code. Some of "
"the bugs this fuzzer has reported are `on bugzilla`__ and `on OSS Fuzz's "
"tracker`__."
msgstr ""

#: ../../../FuzzingLLVM.rst:31
msgid "clang-proto-fuzzer"
msgstr ""

#: ../../../FuzzingLLVM.rst:33
msgid ""
"A |protobuf fuzzer| that compiles valid C++ programs generated from a "
"protobuf class that describes a subset of the C++ language."
msgstr ""

#: ../../../FuzzingLLVM.rst:36
msgid ""
"This fuzzer accepts clang command line options after "
"`ignore_remaining_args=1`. For example, the following command will fuzz "
"clang with a higher optimization level:"
msgstr ""

#: ../../../FuzzingLLVM.rst:45
msgid "clang-format-fuzzer"
msgstr ""

#: ../../../FuzzingLLVM.rst:47
msgid ""
"A |generic fuzzer| that runs clang-format_ on C++ text fragments. Some of "
"the bugs this fuzzer has reported are `on bugzilla`__ and `on OSS Fuzz's "
"tracker`__."
msgstr ""

#: ../../../FuzzingLLVM.rst:56
msgid "llvm-as-fuzzer"
msgstr ""

#: ../../../FuzzingLLVM.rst:58
msgid ""
"A |generic fuzzer| that tries to parse text as :doc:`LLVM assembly "
"<LangRef>`. Some of the bugs this fuzzer has reported are `on bugzilla`__."
msgstr ""

#: ../../../FuzzingLLVM.rst:64
msgid "llvm-dwarfdump-fuzzer"
msgstr ""

#: ../../../FuzzingLLVM.rst:66
msgid ""
"A |generic fuzzer| that interprets inputs as object files and runs :doc:"
"`llvm-dwarfdump <CommandGuide/llvm-dwarfdump>` on them. Some of the bugs "
"this fuzzer has reported are `on OSS Fuzz's tracker`__"
msgstr ""

#: ../../../FuzzingLLVM.rst:73
msgid "llvm-demangle-fuzzer"
msgstr ""

#: ../../../FuzzingLLVM.rst:75
msgid ""
"A |generic fuzzer| for the Itanium demangler used in various LLVM tools. "
"We've fuzzed __cxa_demangle to death, why not fuzz LLVM's implementation of "
"the same function!"
msgstr ""

#: ../../../FuzzingLLVM.rst:80
msgid "llvm-isel-fuzzer"
msgstr ""

#: ../../../FuzzingLLVM.rst:82
msgid "A |LLVM IR fuzzer| aimed at finding bugs in instruction selection."
msgstr ""

#: ../../../FuzzingLLVM.rst:84
msgid ""
"This fuzzer accepts flags after `ignore_remaining_args=1`. The flags match "
"those of :doc:`llc <CommandGuide/llc>` and the triple is required. For "
"example, the following command would fuzz AArch64 with :doc:`GlobalISel`:"
msgstr ""

#: ../../../FuzzingLLVM.rst:92
msgid ""
"Some flags can also be specified in the binary name itself in order to "
"support OSS Fuzz, which has trouble with required arguments. To do this, you "
"can copy or move ``llvm-isel-fuzzer`` to ``llvm-isel-fuzzer--x-y-z``, "
"separating options from the binary name using \"--\". The valid options are "
"architecture names (``aarch64``, ``x86_64``), optimization levels (``O0``, "
"``O2``), or specific keywords, like ``gisel`` for enabling global "
"instruction selection. In this mode, the same example could be run like so:"
msgstr ""

#: ../../../FuzzingLLVM.rst:105
msgid "llvm-opt-fuzzer"
msgstr ""

#: ../../../FuzzingLLVM.rst:107
msgid "A |LLVM IR fuzzer| aimed at finding bugs in optimization passes."
msgstr ""

#: ../../../FuzzingLLVM.rst:109
msgid "It receives optimzation pipeline and runs it for each fuzzer input."
msgstr ""

#: ../../../FuzzingLLVM.rst:111
msgid ""
"Interface of this fuzzer almost directly mirrors ``llvm-isel-fuzzer``. Both "
"``mtriple`` and ``passes`` arguments are required. Passes are specified in a "
"format suitable for the new pass manager. You can find some documentation "
"about this format in the doxygen for ``PassBuilder::parsePassPipeline``."
msgstr ""

#: ../../../FuzzingLLVM.rst:120
msgid ""
"Similarly to the ``llvm-isel-fuzzer`` arguments in some predefined "
"configurations might be embedded directly into the binary file name:"
msgstr ""

#: ../../../FuzzingLLVM.rst:128
msgid "llvm-mc-assemble-fuzzer"
msgstr ""

#: ../../../FuzzingLLVM.rst:130
msgid ""
"A |generic fuzzer| that fuzzes the MC layer's assemblers by treating inputs "
"as target specific assembly."
msgstr ""

#: ../../../FuzzingLLVM.rst:133
msgid ""
"Note that this fuzzer has an unusual command line interface which is not "
"fully compatible with all of libFuzzer's features. Fuzzer arguments must be "
"passed after ``--fuzzer-args``, and any ``llc`` flags must use two dashes. "
"For example, to fuzz the AArch64 assembler you might use the following "
"command:"
msgstr ""

#: ../../../FuzzingLLVM.rst:142
msgid "This scheme will likely change in the future."
msgstr ""

#: ../../../FuzzingLLVM.rst:145
msgid "llvm-mc-disassemble-fuzzer"
msgstr ""

#: ../../../FuzzingLLVM.rst:147
msgid ""
"A |generic fuzzer| that fuzzes the MC layer's disassemblers by treating "
"inputs as assembled binary data."
msgstr ""

#: ../../../FuzzingLLVM.rst:150
msgid ""
"Note that this fuzzer has an unusual command line interface which is not "
"fully compatible with all of libFuzzer's features. See the notes above about "
"``llvm-mc-assemble-fuzzer`` for details."
msgstr ""

#: ../../../FuzzingLLVM.rst:163
msgid "Mutators and Input Generators"
msgstr ""

#: ../../../FuzzingLLVM.rst:165
msgid ""
"The inputs for a fuzz target are generated via random mutations of a :ref:"
"`corpus <libfuzzer-corpus>`. There are a few options for the kinds of "
"mutations that a fuzzer in LLVM might want."
msgstr ""

#: ../../../FuzzingLLVM.rst:172
msgid "Generic Random Fuzzing"
msgstr ""

#: ../../../FuzzingLLVM.rst:174
msgid ""
"The most basic form of input mutation is to use the built in mutators of "
"LibFuzzer. These simply treat the input corpus as a bag of bits and make "
"random mutations. This type of fuzzer is good for stressing the surface "
"layers of a program, and is good at testing things like lexers, parsers, or "
"binary protocols."
msgstr ""

#: ../../../FuzzingLLVM.rst:180
msgid ""
"Some of the in-tree fuzzers that use this type of mutator are `clang-"
"fuzzer`_, `clang-format-fuzzer`_, `llvm-as-fuzzer`_, `llvm-dwarfdump-"
"fuzzer`_, `llvm-mc-assemble-fuzzer`_, and `llvm-mc-disassemble-fuzzer`_."
msgstr ""

#: ../../../FuzzingLLVM.rst:187
msgid "Structured Fuzzing using ``libprotobuf-mutator``"
msgstr ""

#: ../../../FuzzingLLVM.rst:189
msgid ""
"We can use libprotobuf-mutator_ in order to perform structured fuzzing and "
"stress deeper layers of programs. This works by defining a protobuf class "
"that translates arbitrary data into structurally interesting input. "
"Specifically, we use this to work with a subset of the C++ language and "
"perform mutations that produce valid C++ programs in order to exercise parts "
"of clang that are more interesting than parser error handling."
msgstr ""

#: ../../../FuzzingLLVM.rst:196
msgid ""
"To build this kind of fuzzer you need `protobuf`_ and its dependencies "
"installed, and you need to specify some extra flags when configuring the "
"build with :doc:`CMake <CMake>`. For example, `clang-proto-fuzzer`_ can be "
"enabled by adding ``-DCLANG_ENABLE_PROTO_FUZZER=ON`` to the flags described "
"in :ref:`building-fuzzers`."
msgstr ""

#: ../../../FuzzingLLVM.rst:202
msgid ""
"The only in-tree fuzzer that uses ``libprotobuf-mutator`` today is `clang-"
"proto-fuzzer`_."
msgstr ""

#: ../../../FuzzingLLVM.rst:211
msgid "Structured Fuzzing of LLVM IR"
msgstr ""

#: ../../../FuzzingLLVM.rst:213
msgid ""
"We also use a more direct form of structured fuzzing for fuzzers that take :"
"doc:`LLVM IR <LangRef>` as input. This is achieved through the "
"``FuzzMutate`` library, which was `discussed at EuroLLVM 2017`_."
msgstr ""

#: ../../../FuzzingLLVM.rst:217
msgid ""
"The ``FuzzMutate`` library is used to structurally fuzz backends in `llvm-"
"isel-fuzzer`_."
msgstr ""

#: ../../../FuzzingLLVM.rst:224
msgid "Building and Running"
msgstr ""

#: ../../../FuzzingLLVM.rst:229
msgid "Configuring LLVM to Build Fuzzers"
msgstr ""

#: ../../../FuzzingLLVM.rst:231
msgid ""
"Fuzzers will be built and linked to libFuzzer by default as long as you "
"build LLVM with sanitizer coverage enabled. You would typically also enable "
"at least one sanitizer to find bugs faster. The most common way to build the "
"fuzzers is by adding the following two flags to your CMake invocation: ``-"
"DLLVM_USE_SANITIZER=Address -DLLVM_USE_SANITIZE_COVERAGE=On``."
msgstr ""

#: ../../../FuzzingLLVM.rst:237
msgid ""
"If you have ``compiler-rt`` checked out in an LLVM tree when building with "
"sanitizers, you'll want to specify ``-DLLVM_BUILD_RUNTIME=Off`` to avoid "
"building the sanitizers themselves with sanitizers enabled."
msgstr ""

#: ../../../FuzzingLLVM.rst:241
msgid ""
"You may run into issues if you build with BFD ld, which is the default "
"linker on many unix systems. These issues are being tracked in https://llvm."
"org/PR34636."
msgstr ""

#: ../../../FuzzingLLVM.rst:246
msgid "Continuously Running and Finding Bugs"
msgstr ""

#: ../../../FuzzingLLVM.rst:248
msgid ""
"There used to be a public buildbot running LLVM fuzzers continuously, and "
"while this did find issues, it didn't have a very good way to report "
"problems in an actionable way. Because of this, we're moving towards using "
"`OSS Fuzz`_ more instead."
msgstr ""

#: ../../../FuzzingLLVM.rst:253
msgid ""
"You can browse the `LLVM project issue list`_ for the bugs found by `LLVM on "
"OSS Fuzz`_. These are also mailed to the `llvm-bugs mailing list`_."
msgstr ""

#: ../../../FuzzingLLVM.rst:267
msgid "Utilities for Writing Fuzzers"
msgstr ""

#: ../../../FuzzingLLVM.rst:269
msgid "There are some utilities available for writing fuzzers in LLVM."
msgstr ""

#: ../../../FuzzingLLVM.rst:271
msgid ""
"Some helpers for handling the command line interface are available in "
"``include/llvm/FuzzMutate/FuzzerCLI.h``, including functions to parse "
"command line options in a consistent way and to implement standalone main "
"functions so your fuzzer can be built and tested when not built against "
"libFuzzer."
msgstr ""

#: ../../../FuzzingLLVM.rst:276
msgid ""
"There is also some handling of the CMake config for fuzzers, where you "
"should use the ``add_llvm_fuzzer`` to set up fuzzer targets. This function "
"works similarly to functions such as ``add_llvm_tool``, but they take care "
"of linking to LibFuzzer when appropriate and can be passed the "
"``DUMMY_MAIN`` argument to enable standalone testing."
msgstr ""
