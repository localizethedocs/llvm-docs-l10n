# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr_FR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../AddingConstrainedIntrinsics.rst:3
msgid "How To Add A Constrained Floating-Point Intrinsic"
msgstr ""

#: ../../../AddingConstrainedIntrinsics.rst:9
msgid "This is a work in progress."
msgstr ""

#: ../../../AddingConstrainedIntrinsics.rst:12
msgid "Add the intrinsic"
msgstr ""

#: ../../../AddingConstrainedIntrinsics.rst:14
msgid ""
"Multiple files need to be updated when adding a new constrained intrinsic."
msgstr ""

#: ../../../AddingConstrainedIntrinsics.rst:16
msgid "Add the new intrinsic to the table of intrinsics.::"
msgstr ""

#: ../../../AddingConstrainedIntrinsics.rst:20
msgid "Update class ConstrainedFPIntrinsic to know about the intrinsics.::"
msgstr ""

#: ../../../AddingConstrainedIntrinsics.rst:24
msgid ""
"Functions like ConstrainedFPIntrinsic::isUnaryOp() or "
"ConstrainedFPIntrinsic::isTernaryOp() may need to know about the new "
"intrinsic.::"
msgstr ""

#: ../../../AddingConstrainedIntrinsics.rst:30
msgid "Update the IR verifier::"
msgstr ""

#: ../../../AddingConstrainedIntrinsics.rst:35
msgid "Add SelectionDAG node types"
msgstr ""

#: ../../../AddingConstrainedIntrinsics.rst:37
msgid ""
"Add the new STRICT version of the node type to the ISD::NodeType enum.::"
msgstr ""

#: ../../../AddingConstrainedIntrinsics.rst:41
msgid "In class SDNode update isStrictFPOpcode()::"
msgstr ""

#: ../../../AddingConstrainedIntrinsics.rst:45
msgid ""
"A mapping from the STRICT SDnode type to the non-STRICT is done in "
"TargetLoweringBase::getStrictFPOperationAction(). This allows STRICT nodes "
"to be legalized similarly to the non-STRICT node type.::"
msgstr ""

#: ../../../AddingConstrainedIntrinsics.rst:52
msgid "Building the SelectionDAG"
msgstr ""

#: ../../../AddingConstrainedIntrinsics.rst:54
msgid ""
"The switch statement in SelectionDAGBuilder::visitIntrinsicCall() needs to "
"be updated to call SelectionDAGBuilder::visitConstrainedFPIntrinsic(). That "
"function, in turn, needs to be updated to know how to create the SDNode for "
"the intrinsic. The new STRICT node will eventually be converted to the "
"matching non-STRICT node. For this reason it should have the same operands "
"and values as the non-STRICT version but should also use the chain. This "
"makes subsequent sharing of code for STRICT and non-STRICT code paths "
"easier.::"
msgstr ""

#: ../../../AddingConstrainedIntrinsics.rst:65
msgid ""
"Most of the STRICT nodes get legalized the same as their matching non-STRICT "
"counterparts. A new STRICT node with this property must get added to the "
"switch in SelectionDAGLegalize::LegalizeOp().::"
msgstr ""

#: ../../../AddingConstrainedIntrinsics.rst:71
msgid ""
"Other parts of the legalizer may need to be updated as well. Look for places "
"where the non-STRICT counterpart is legalized and update as needed. Be "
"careful of the chain since STRICT nodes use it but their counterparts often "
"don't."
msgstr ""

#: ../../../AddingConstrainedIntrinsics.rst:76
msgid ""
"The code to do the conversion or mutation of the STRICT node to a non-STRICT "
"version of the node happens in SelectionDAG::mutateStrictFPToFP(). Be "
"careful updating this function since some nodes have the same return type as "
"their input operand, but some are different. Both of these cases must be "
"properly handled.::"
msgstr ""

#: ../../../AddingConstrainedIntrinsics.rst:84
msgid ""
"However, the mutation may not happen if the new node has not been registered "
"in TargetLoweringBase::initActions(). If the corresponding non-STRICT node "
"is Legal but a target does not know about STRICT nodes then the STRICT node "
"will default to Legal and mutation will be bypassed with a \"Cannot select\" "
"error. Register the new STRICT node as Expand to avoid this bug.::"
msgstr ""

#: ../../../AddingConstrainedIntrinsics.rst:92
msgid ""
"To make debug logs readable it is helpful to update the SelectionDAG's debug "
"logger:::"
msgstr ""

#: ../../../AddingConstrainedIntrinsics.rst:98
msgid "Add documentation and tests"
msgstr ""
