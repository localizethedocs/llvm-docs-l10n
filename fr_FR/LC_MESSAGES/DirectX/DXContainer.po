# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM main\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 08:36+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr_FR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../DirectX/DXContainer.rst:3
msgid "DirectX Container"
msgstr ""

#: ../../../DirectX/DXContainer.rst:12
msgid "Overview"
msgstr ""

#: ../../../DirectX/DXContainer.rst:14
msgid ""
"The DirectX Container (DXContainer) file format is the binary file format "
"for compiled shaders targeting the DirectX runtime. The file format is also "
"called the DXIL Container or DXBC file format. Because the file format can "
"be used to include either DXIL or DXBC compiled shaders, the nomenclature in "
"LLVM is simply DirectX Container."
msgstr ""

#: ../../../DirectX/DXContainer.rst:20
msgid ""
"DirectX Container files are read by the compiler and associated tools as "
"well as the DirectX runtime, profiling tools and other users. This document "
"serves as a companion to the implementation in LLVM to more completely "
"document the file format for its many users."
msgstr ""

#: ../../../DirectX/DXContainer.rst:26
msgid "Basic Structure"
msgstr ""

#: ../../../DirectX/DXContainer.rst:28
msgid ""
"A DXContainer file begins with a header, and is then followed by a sequence "
"of \"parts\", which are analogous to object file sections. Each part "
"contains a part header, and some number of bytes of data after the header in "
"a defined format."
msgstr ""

#: ../../../DirectX/DXContainer.rst:32
msgid ""
"DX Container data structures are encoded little-endian in the binary file."
msgstr ""

#: ../../../DirectX/DXContainer.rst:34
msgid ""
"The LLVM versions of all data structures described and/or referenced in this "
"file are defined in `llvm/include/llvm/BinaryFormat/DXContainer.h <https://"
"github.com/llvm/llvm-project/blob/main/llvm/include/llvm/BinaryFormat/"
"DXContainer.h>`_. Some pseudo code is provided in blocks below to ease "
"understanding of this document, but reading it with the header available "
"will provide the most clarity."
msgstr ""

#: ../../../DirectX/DXContainer.rst:43
msgid "File Header"
msgstr ""

#: ../../../DirectX/DXContainer.rst:56
msgid ""
"The DXContainer header matches the pseudo-definition above. It begins with a "
"four character code (magic number) with the value ``DXBC`` to denote the "
"file format."
msgstr ""

#: ../../../DirectX/DXContainer.rst:60
msgid ""
"The ``Digest`` is a 128bit hash digest computed with a proprietary algorithm "
"and encoded in the binary by the bytecode validator."
msgstr ""

#: ../../../DirectX/DXContainer.rst:63
msgid ""
"The ``MajorVersion`` and ``MinorVersion`` encode the file format version "
"``1.0``."
msgstr ""

#: ../../../DirectX/DXContainer.rst:66
msgid ""
"The remaining fields encode 32-bit unsigned integers for the file size and "
"number of parts."
msgstr ""

#: ../../../DirectX/DXContainer.rst:69
msgid ""
"Following the part header is an array of ``PartCount`` 32-bit unsigned "
"integers specifying the offsets of each part header."
msgstr ""

#: ../../../DirectX/DXContainer.rst:73
msgid "Part Data"
msgstr ""

#: ../../../DirectX/DXContainer.rst:82
msgid ""
"Each part begins with a part header. A part header includes the 4-character "
"part name, and a 32-bit unsigned integer specifying the size of the part "
"data. The part header is followed by ``Size`` bytes of data comprising the "
"part. The format does not explicitly require 32-bit alignment of parts, "
"although LLVM does implement this restriction in the writer code (because "
"it's a good idea). The LLVM object reader code does not assume inputs are "
"correctly aligned to avoid undefined behavior caused by misaligned inputs "
"generated by other compilers."
msgstr ""

#: ../../../DirectX/DXContainer.rst:91
msgid "Part Formats"
msgstr ""

#: ../../../DirectX/DXContainer.rst:93
msgid ""
"The part name indicates the format of the part data. There are 24 part "
"headers used by DXC and FXC. Not all compiled shaders contain all parts. In "
"the list below parts generated only by DXC are marked with †, and parts "
"generated only by FXC are marked with \\*."
msgstr ""

#: ../../../DirectX/DXContainer.rst:98
msgid "`DXIL`_† - Stores the DXIL bytecode."
msgstr ""

#: ../../../DirectX/DXContainer.rst:99
msgid "`HASH`_† - Stores the shader MD5 hash."
msgstr ""

#: ../../../DirectX/DXContainer.rst:100
msgid ""
"ILDB† - Stores the DXIL bytecode with LLVM Debug Information embedded in the "
"module."
msgstr ""

#: ../../../DirectX/DXContainer.rst:101
msgid "ILDN† - Stores shader debug name for external debug information."
msgstr ""

#: ../../../DirectX/DXContainer.rst:102
msgid "`ISG1`_ - Stores the input signature for Shader Model 5.1+."
msgstr ""

#: ../../../DirectX/DXContainer.rst:103
msgid "ISGN\\* - Stores the input signature for Shader Model 4 and earlier."
msgstr ""

#: ../../../DirectX/DXContainer.rst:104
msgid "`OSG1`_ - Stores the output signature for Shader Model 5.1+."
msgstr ""

#: ../../../DirectX/DXContainer.rst:105
msgid "OSG5\\* - Stores the output signature for Shader Model 5."
msgstr ""

#: ../../../DirectX/DXContainer.rst:106
msgid "OSGN\\* - Stores the output signature for Shader Model 4 and earlier."
msgstr ""

#: ../../../DirectX/DXContainer.rst:107
msgid ""
"PCSG\\* - Stores the patch constant signature for Shader Model 5.1 and "
"earlier."
msgstr ""

#: ../../../DirectX/DXContainer.rst:108
msgid "PDBI† - Stores PDB information."
msgstr ""

#: ../../../DirectX/DXContainer.rst:109
msgid ""
"PRIV - Stores arbitrary private data (Not encoded by either FXC or DXC)."
msgstr ""

#: ../../../DirectX/DXContainer.rst:110
msgid "`PSG1`_ - Stores the patch constant signature for Shader Model 6+."
msgstr ""

#: ../../../DirectX/DXContainer.rst:111
msgid "`PSV0`_ - Stores Pipeline State Validation data."
msgstr ""

#: ../../../DirectX/DXContainer.rst:112
msgid "RDAT† - Stores Runtime Data."
msgstr ""

#: ../../../DirectX/DXContainer.rst:113
msgid "RDEF\\* - Stores resource definitions."
msgstr ""

#: ../../../DirectX/DXContainer.rst:114
msgid "`RTS0`_ - Stores compiled root signature."
msgstr ""

#: ../../../DirectX/DXContainer.rst:115
msgid "`SFI0`_ - Stores shader feature flags."
msgstr ""

#: ../../../DirectX/DXContainer.rst:116
msgid "SHDR\\* - Stores compiled DXBC bytecode."
msgstr ""

#: ../../../DirectX/DXContainer.rst:117
msgid "SHEX\\* - Stores compiled DXBC bytecode."
msgstr ""

#: ../../../DirectX/DXContainer.rst:118
msgid "DXBC\\* - Stores compiled DXBC bytecode."
msgstr ""

#: ../../../DirectX/DXContainer.rst:119
msgid "SRCI† - Stores shader source information."
msgstr ""

#: ../../../DirectX/DXContainer.rst:120
msgid "STAT† - Stores shader statistics."
msgstr ""

#: ../../../DirectX/DXContainer.rst:121
msgid "VERS† - Stores shader compiler version information."
msgstr ""

#: ../../../DirectX/DXContainer.rst:124
msgid "DXIL Part"
msgstr ""

#: ../../../DirectX/DXContainer.rst:127
msgid ""
"The DXIL part is comprised of three data structures: the ``ProgramHeader``, "
"the ``BitcodeHeader`` and the bitcode serialized LLVM 3.7 IR Module."
msgstr ""

#: ../../../DirectX/DXContainer.rst:130
msgid ""
"The ``ProgramHeader`` contains the shader model version and pipeline stage "
"enumeration value. This identifies the target profile of the contained "
"shader bitcode."
msgstr ""

#: ../../../DirectX/DXContainer.rst:134
msgid ""
"The ``BitcodeHeader`` contains the DXIL version information and refers to "
"the start of the bitcode data."
msgstr ""

#: ../../../DirectX/DXContainer.rst:138
msgid "HASH Part"
msgstr ""

#: ../../../DirectX/DXContainer.rst:141
msgid ""
"The HASH part contains a 32-bit unsigned integer with the shader hash flags, "
"and a 128-bit MD5 hash digest. The flags field can either have the value "
"``0`` to indicate no flags, or ``1`` to indicate that the file hash was "
"computed including the source code that produced the binary."
msgstr ""

#: ../../../DirectX/DXContainer.rst:147
msgid "Program Signature (SG1) Parts"
msgstr ""

#: ../../../DirectX/DXContainer.rst:159
msgid ""
"The program signature parts (ISG1, OSG1, & PSG1) all use the same data "
"structures to encode inputs, outputs and patch information. The "
"``ProgramSignatureHeader`` includes two 32-bit unsigned integers to specify "
"the number of signature parameters and the offset of the first parameter."
msgstr ""

#: ../../../DirectX/DXContainer.rst:164
msgid ""
"Beginning at ``FirstParamOffset`` bytes from the start of the "
"``ProgramSignatureHeader``, ``ParamCount`` ``ProgramSignatureElement`` "
"structures are written. Following the ``ProgramSignatureElements`` is a "
"string table of null terminated strings padded to 32-byte alignment. This "
"string table matches the DWARF string table format as implemented by LLVM."
msgstr ""

#: ../../../DirectX/DXContainer.rst:170
msgid ""
"Each ``ProgramSignatureElement`` encodes a ``NameOffset`` value which "
"specifies the offset into the string table. A value of ``0`` denotes no "
"name. The offsets encoded here are from the beginning of the "
"``ProgramSignatureHeader`` not the beginning of the string table."
msgstr ""

#: ../../../DirectX/DXContainer.rst:175
msgid ""
"The ``ProgramSignatureElement`` contains several enumeration fields which "
"are defined in `llvm/include/llvm/BinaryFormat/DXContainerConstants.def "
"<https://github.com/llvm/llvm-project/blob/main/llvm/include/llvm/"
"BinaryFormat/DXContainerConstants.def>`_. These fields encode the D3D system "
"value, the type of data and its precision requirements."
msgstr ""

#: ../../../DirectX/DXContainer.rst:181
msgid "PSV0 Part"
msgstr ""

#: ../../../DirectX/DXContainer.rst:184
msgid ""
"The Pipeline State Validation data encodes versioned runtime information "
"structures. These structures use a scheme where in lieu of encoding a "
"version number, they encode the size of the structure and each new version "
"of the structure is additive. This allows readers to infer the version of "
"the structure by comparing the encoded size with the size of known "
"structures. If the encoded size is larger than any known structure, the "
"largest known structure can validly parse the data represented in the known "
"structure."
msgstr ""

#: ../../../DirectX/DXContainer.rst:192
msgid ""
"In LLVM we represent the versions of the associated data structures with "
"versioned namespaces under the ``llvm::dxbc::PSV`` namespace (e.g. ``v0``, "
"``v1``). Each structure in the ``v0`` namespace is the base version, the "
"structures in the ``v1`` namespace inherit from the ``v0`` namespace, and "
"the ``v2`` structures inherit from the ``v1`` structures, and so on."
msgstr ""

#: ../../../DirectX/DXContainer.rst:198
msgid "The high-level structure of the PSV data is:"
msgstr ""

#: ../../../DirectX/DXContainer.rst:200
msgid "``RuntimeInfo`` structure"
msgstr ""

#: ../../../DirectX/DXContainer.rst:201
msgid "Resource bindings"
msgstr ""

#: ../../../DirectX/DXContainer.rst:202
msgid "Signature elements"
msgstr ""

#: ../../../DirectX/DXContainer.rst:203
msgid "Mask Vectors (Output, Input, InputPatch, PatchOutput)"
msgstr ""

#: ../../../DirectX/DXContainer.rst:205
msgid ""
"Immediately following the part header for the PSV0 part is a 32-bit unsigned "
"integer specifying the size of the ``RuntimeInfo`` structure that follows."
msgstr ""

#: ../../../DirectX/DXContainer.rst:208
msgid ""
"Immediately following the ``RuntimeInfo`` structure is a 32-bit unsigned "
"integer specifying the number of resource bindings. If the number of "
"resources is greater than zero, another unsigned 32-bit integer follows to "
"specify the size of the ``ResourceBindInfo`` structure. This is followed by "
"the specified number of structures of the specified size (which infers the "
"version of the structure)."
msgstr ""

#: ../../../DirectX/DXContainer.rst:214
msgid "For version 0 of the data this ends the part data."
msgstr ""

#: ../../../DirectX/DXContainer.rst:217
msgid "PSV0 Signature Elements"
msgstr ""

#: ../../../DirectX/DXContainer.rst:219
msgid ""
"The signature elements are conceptually a single concept but the data is "
"encoded in three different blocks. The first block is a string table, the "
"second block is an index table, and the third block is the elements "
"themselves, which in turn are separeated by input, output and patch constant "
"or primitive elements."
msgstr ""

#: ../../../DirectX/DXContainer.rst:224
msgid ""
"Signature elements capture much of the same data captured in the :ref:`SG1 "
"<ISG1>` parts. The use of an index table allows de-duplication of data for a "
"more compact final representation."
msgstr ""

#: ../../../DirectX/DXContainer.rst:228
msgid ""
"The string table begins with a 32-bit unsigned integer specifying the table "
"size. This string table uses the DXContainer format as implemented in LLVM. "
"This format prefixes the string table with a null byte so that offset ``0`` "
"is a null string, and pads to 32-byte alignment."
msgstr ""

#: ../../../DirectX/DXContainer.rst:233
msgid ""
"The index table begins with a 32-bit unsigned integer specifying the size of "
"the table, and is followed by that many 32-bit unsigned integers "
"representing the table. The index table may or may not deduplicate repeated "
"sequences (both DXC and Clang do). The indices signify the indices in the "
"flattened aggregate representation which the signature element describes. A "
"single semantic may have more than one entry in this table to denote the "
"different attributes of its members."
msgstr ""

#: ../../../DirectX/DXContainer.rst:241
msgid "For example given the following code:"
msgstr ""

#: ../../../DirectX/DXContainer.rst:263
msgid ""
"The semantic ``A`` gets expanded into 5 output signature elements. Those "
"elements are:"
msgstr ""

#: ../../../DirectX/DXContainer.rst:268
msgid ""
"In the example below, it is a coincidence that the rows match the indices, "
"in more complicated examples with multiple semantics this is not the case."
msgstr ""

#: ../../../DirectX/DXContainer.rst:271
msgid ""
"Index 0 starts at row 0, contains 4 columns, and is float32. This represents "
"``f1`` in the source."
msgstr ""

#: ../../../DirectX/DXContainer.rst:273
msgid ""
"Index 1, 2, 3, and 4 starts at row 1, contains two columns and is float32. "
"This represents ``f2`` in the source, and it spreads across rows 1 - 4."
msgstr ""

#: ../../../DirectX/DXContainer.rst:275
msgid ""
"Index 5 starts at row 5, contains 4 columns, and is float32. This represents "
"``f3`` in the source."
msgstr ""

#: ../../../DirectX/DXContainer.rst:277
msgid ""
"Index 6 starts at row 6, contains 3 columns, and is float32. This represents "
"``f4``."
msgstr ""

#: ../../../DirectX/DXContainer.rst:279
msgid ""
"Index 7 starts at row 7, contains 4 columns, and is signed 32-bit integer. "
"This represents ``f5`` in the source."
msgstr ""

#: ../../../DirectX/DXContainer.rst:282
msgid ""
"The LLVM ``obj2yaml`` tool can parse this data out of the PSV and present it "
"in human-readable YAML. For the example above it produces the output:"
msgstr ""

#: ../../../DirectX/DXContainer.rst:344
msgid ""
"The number of signature elements of each type is encoded in the ``llvm::"
"dxbc::PSV::v1::RuntimeInfo`` structure. If any of the element count values "
"are non-zero, the size of the ``ProgramSignatureElement`` structure is "
"encoded next to allow versioning of that structure. Today there is only one "
"version. Following the size field is the specified number of signature "
"elements in the order input, output, then patch constant or primitive."
msgstr ""

#: ../../../DirectX/DXContainer.rst:351
msgid ""
"Following the signature elements is a sequence of mask vectors encoded as a "
"series of 32-bit integers. Each 32-bit integer in the mask encodes values "
"for 8 input/output/patch or primitive elements. The mask vector is filled "
"from least significant bit to most significant bit with each added element "
"shifting the previous elements left. A reader needs to consult the total "
"number of vectors encoded in the ``RuntimeInfo`` structure to know how to "
"read the mask vector."
msgstr ""

#: ../../../DirectX/DXContainer.rst:358
msgid ""
"If the shader has ``UsesViewID`` enabled in the ``RuntimeInfo`` an output "
"mask vector will be included. The output mask vector is four arrays of 32-"
"bit unsigned integers. Each of the four arrays corresponds to an output "
"stream. Geometry shaders have a maximum of four output streams, all other "
"shader stages only support one output stream. Each bit in the mask vector "
"identifies one column of an output from the output signature depends on the "
"ViewID."
msgstr ""

#: ../../../DirectX/DXContainer.rst:365
msgid ""
"If the shader has ``UsesViewID`` enabled, it is a hull shader, and it has "
"patch constant or primitive vector elements, a patch constant or primitive "
"vector mask will be included. It is identical in structure to the output "
"mask vector. Each bit in the mask vector identifies one column of a patch "
"constant output which depends on the ViewID."
msgstr ""

#: ../../../DirectX/DXContainer.rst:371
msgid ""
"The next series of mask vectors are similar in structure to the output mask "
"vector, but they contain an extra dimension."
msgstr ""

#: ../../../DirectX/DXContainer.rst:374
msgid ""
"The output/input map is encoded next if the shader has inputs and outputs. "
"The output/input mask encodes which outputs are impacted by each column of "
"each input. The size for each mask vector is the size of the output max "
"vector * the number of inputs * 4 (for each component). Each bit in the mask "
"vector identifies one column of an output and a column of an input. A value "
"of 1 means the output is impacted by the input."
msgstr ""

#: ../../../DirectX/DXContainer.rst:381
msgid ""
"If the shader is a hull shader, and it has inputs and patch outputs, an "
"input to patch map will be included next. This is identical in structure to "
"the output/input map. The dimensions are defined by the size of the patch "
"constant or primitive vector mask * the number of inputs * 4 (for each "
"component). Each bit in the mask vector identifies one column of a patch "
"constant output and a column of an input. A value of 1 means the output is "
"impacted by the input."
msgstr ""

#: ../../../DirectX/DXContainer.rst:388
msgid ""
"If the shader is a domain shader, and it has outputs and patch outputs, an "
"output patch map will be included next. This is identical in structure to "
"the output/input map. The dimensions are defined by the size of the patch "
"constant or primitive vector mask * the number of outputs * 4 (for each "
"component). Each bit in the mask vector identifies one column of a patch "
"constant input and a column of an output. A value of 1 means the output is "
"impacted by the primitive input."
msgstr ""

#: ../../../DirectX/DXContainer.rst:397
msgid "Root Signature (RTS0) Part"
msgstr ""

#: ../../../DirectX/DXContainer.rst:400
msgid ""
"The Root Signature data defines the shader's resource interface with "
"Direct3D 12, specifying what resources the shader needs to access and how "
"they're organized and bound to the pipeline."
msgstr ""

#: ../../../DirectX/DXContainer.rst:404
msgid ""
"The RTS0 part comprises three data structures: ``RootSignatureHeader``, "
"``RootParameters`` and ``StaticSamplers``. The details of each will be "
"described in the following sections. All ``RootParameters`` will be "
"serialized following the order they were defined in the metadata "
"representation."
msgstr ""

#: ../../../DirectX/DXContainer.rst:409
msgid ""
"The table below summarizes the data being serialized as well as it's size. "
"The details of it part will be discussed in further details on the next "
"sections of this document."
msgstr ""

#: ../../../DirectX/DXContainer.rst:414
msgid "Part Name"
msgstr ""

#: ../../../DirectX/DXContainer.rst:414
msgid "Size In Bytes"
msgstr ""

#: ../../../DirectX/DXContainer.rst:414
msgid "Maximum number of Instances"
msgstr ""

#: ../../../DirectX/DXContainer.rst:416 ../../../DirectX/DXContainer.rst:431
msgid "Root Signature Header"
msgstr ""

#: ../../../DirectX/DXContainer.rst:416 ../../../DirectX/DXContainer.rst:423
msgid "24"
msgstr ""

#: ../../../DirectX/DXContainer.rst:416
msgid "1"
msgstr ""

#: ../../../DirectX/DXContainer.rst:417
msgid "Root Parameter Headers"
msgstr ""

#: ../../../DirectX/DXContainer.rst:417 ../../../DirectX/DXContainer.rst:419
#: ../../../DirectX/DXContainer.rst:421
msgid "12"
msgstr ""

#: ../../../DirectX/DXContainer.rst:417 ../../../DirectX/DXContainer.rst:418
#: ../../../DirectX/DXContainer.rst:426
msgid "Many"
msgstr ""

#: ../../../DirectX/DXContainer.rst:418
msgid "Root Parameter"
msgstr ""

#: ../../../DirectX/DXContainer.rst:419 ../../../DirectX/DXContainer.rst:477
msgid "Root Constants"
msgstr ""

#: ../../../DirectX/DXContainer.rst:420
msgid "Root Descriptor Version 1.0"
msgstr ""

#: ../../../DirectX/DXContainer.rst:420
msgid "8"
msgstr ""

#: ../../../DirectX/DXContainer.rst:421
msgid "Root Descriptor Version 1.1"
msgstr ""

#: ../../../DirectX/DXContainer.rst:422
msgid "Descriptors Tables Version 1.0"
msgstr ""

#: ../../../DirectX/DXContainer.rst:422
msgid "20"
msgstr ""

#: ../../../DirectX/DXContainer.rst:423
msgid "Descriptors Tables Version 1.1"
msgstr ""

#: ../../../DirectX/DXContainer.rst:426 ../../../DirectX/DXContainer.rst:550
msgid "Static Samplers"
msgstr ""

#: ../../../DirectX/DXContainer.rst:426
msgid "52"
msgstr ""

#: ../../../DirectX/DXContainer.rst:433
msgid ""
"The root signature header is 24 bytes long, consisting of six 32-bit values "
"representing the version, number and offset of parameters, number and offset "
"of static samplers, and a flags field for global behaviours:"
msgstr ""

#: ../../../DirectX/DXContainer.rst:450
msgid "Root Parameters"
msgstr ""

#: ../../../DirectX/DXContainer.rst:452
msgid ""
"Root parameters define how resources are bound to the shader pipeline, each "
"type having different size and fields."
msgstr ""

#: ../../../DirectX/DXContainer.rst:455
msgid ""
"The slot of root parameters is preceded by a variable size section "
"containing the header information for such parameters. Such structure is 12 "
"bytes long, composed of three 32-bit values, representing the parameter "
"type, a flag encoding the pipeline stages where the data is visible, and an "
"offset calculated from the start of RTS0 section."
msgstr ""

#: ../../../DirectX/DXContainer.rst:469
msgid ""
"After the header information has been serialized, the actual data for each "
"of the root parameters is layout in a single continuous blob. The parameters "
"can be fetch from such using the offset information, present in the header."
msgstr ""

#: ../../../DirectX/DXContainer.rst:473
msgid ""
"The following sections will describe each of the root parameters types and "
"their encodings."
msgstr ""

#: ../../../DirectX/DXContainer.rst:479
msgid ""
"The root constants are inline 32-bit values that show up in the shader as a "
"constant buffer. It is a 12 bytes long structure, two 32-bit values encoding "
"the register and space the constant is assigned to, and the last 32 bits "
"encode the number of constants being defined in the buffer."
msgstr ""

#: ../../../DirectX/DXContainer.rst:493
msgid "Root Descriptor"
msgstr ""

#: ../../../DirectX/DXContainer.rst:495
msgid "Root descriptors provide direct GPU memory addresses to resources."
msgstr ""

#: ../../../DirectX/DXContainer.rst:497
msgid ""
"In version 1.0, the root descriptor is 8 bytes. It encodes the register and "
"space as 2 32-bit values."
msgstr ""

#: ../../../DirectX/DXContainer.rst:500
msgid ""
"In version 1.1, the root descriptor is 12 bytes. It matches the 1.0 "
"descriptor but adds a 32-bit access flag."
msgstr ""

#: ../../../DirectX/DXContainer.rst:517
msgid "Root Descriptor Table"
msgstr ""

#: ../../../DirectX/DXContainer.rst:519
msgid ""
"Descriptor tables let shaders access multiple resources through a single "
"pointer to a descriptor heap."
msgstr ""

#: ../../../DirectX/DXContainer.rst:522
msgid ""
"The tables are made of a collection of descriptor ranges. In Version 1.0, "
"the descriptor range is 20 bytes, containing five 32-bit values. It encodes "
"a range of registers, including the register type, range length, register "
"numbers and space within range and the offset locating each range inside the "
"table."
msgstr ""

#: ../../../DirectX/DXContainer.rst:527
msgid ""
"In version 1.1, the descriptor range is 24 bytes. It matches the 1.0 "
"descriptor but adds a 32-bit access flag."
msgstr ""

#: ../../../DirectX/DXContainer.rst:552
msgid ""
"Static samplers are predefined filtering settings built into the root "
"signature, avoiding descriptor heap lookups."
msgstr ""

#: ../../../DirectX/DXContainer.rst:555
msgid ""
"This section also has a variable size, since it can contain multiple static "
"samplers definitions. However, the definition is a fixed sized struct, "
"containing 13 32-byte fields of various enum, float, and integer values."
msgstr ""

#: ../../../DirectX/DXContainer.rst:559
msgid ""
"In version 1.2, the static sampler is 17 bytes. It matches the 1.0 static "
"sampler but adds a 32-bit access flag. In Version 1.1, it matches static "
"sampler version 1.0."
msgstr ""

#: ../../../DirectX/DXContainer.rst:582
msgid "SFI0 Part"
msgstr ""

#: ../../../DirectX/DXContainer.rst:585
msgid ""
"The SFI0 part encodes a 64-bit unsigned integer bitmask of the feature "
"flags. This denotes which optional features the shader requires. The flag "
"values are defined in `llvm/include/llvm/BinaryFormat/DXContainerConstants."
"def <https://github.com/llvm/llvm-project/blob/main/llvm/include/llvm/"
"BinaryFormat/DXContainerConstants.def>`_."
msgstr ""
