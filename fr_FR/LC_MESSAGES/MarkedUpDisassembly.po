# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 20\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:12+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr_FR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../MarkedUpDisassembly.rst:3
msgid "LLVM's Optional Rich Disassembly Output"
msgstr ""

#: ../../../MarkedUpDisassembly.rst:9
msgid "Introduction"
msgstr ""

#: ../../../MarkedUpDisassembly.rst:11
msgid ""
"LLVM's default disassembly output is raw text. To allow consumers more "
"ability to introspect the instructions' textual representation or to "
"reformat for a more user friendly display there is an optional rich "
"disassembly output."
msgstr ""

#: ../../../MarkedUpDisassembly.rst:15
msgid ""
"This optional output is sufficient to reference into individual portions of "
"the instruction text. This is intended for clients like disassemblers, list "
"file generators, and pretty-printers, which need more than the raw "
"instructions and the ability to print them."
msgstr ""

#: ../../../MarkedUpDisassembly.rst:20
msgid ""
"To provide this functionality the assembly text is marked up with "
"annotations. The markup is simple enough in syntax to be robust even in the "
"case of version mismatches between consumers and producers. That is, the "
"syntax generally does not carry semantics beyond \"this text has an "
"annotation,\" so consumers can simply ignore annotations they do not "
"understand or do not care about."
msgstr ""

#: ../../../MarkedUpDisassembly.rst:26
msgid ""
"After calling ``LLVMCreateDisasm()`` to create a disassembler context the "
"optional output is enable with this call:"
msgstr ""

#: ../../../MarkedUpDisassembly.rst:33
msgid ""
"Then subsequent calls to ``LLVMDisasmInstruction()`` will return output "
"strings with the marked up annotations."
msgstr ""

#: ../../../MarkedUpDisassembly.rst:37
msgid "Instruction Annotations"
msgstr ""

#: ../../../MarkedUpDisassembly.rst:42
msgid "Contextual markups"
msgstr ""

#: ../../../MarkedUpDisassembly.rst:44
msgid ""
"Annotated assembly display will supply contextual markup to help clients "
"more efficiently implement things like pretty printers. Most markup will be "
"target independent, so clients can effectively provide good display without "
"any target specific knowledge."
msgstr ""

#: ../../../MarkedUpDisassembly.rst:49
msgid ""
"Annotated assembly goes through the normal instruction printer, but "
"optionally includes contextual tags on portions of the instruction string. "
"An annotation is any '<' '>' delimited section of text(1)."
msgstr ""

#: ../../../MarkedUpDisassembly.rst:59
msgid ""
"The tag-name is an identifier which gives the type of the annotation. For "
"the first pass, this will be very simple, with memory references, registers, "
"and immediates having the tag names \"mem\", \"reg\", and \"imm\", "
"respectively."
msgstr ""

#: ../../../MarkedUpDisassembly.rst:63
msgid ""
"The tag-modifier-list is typically additional target-specific context, such "
"as register class."
msgstr ""

#: ../../../MarkedUpDisassembly.rst:66
msgid ""
"Clients should accept and ignore any tag-names or tag-modifiers they do not "
"understand, allowing the annotations to grow in richness without breaking "
"older clients."
msgstr ""

#: ../../../MarkedUpDisassembly.rst:70
msgid ""
"For example, a possible annotation of an ARM load of a stack-relative "
"location might be annotated as:"
msgstr ""

#: ../../../MarkedUpDisassembly.rst:78
msgid ""
"1: For assembly dialects in which '<' and/or '>' are legal tokens, a literal "
"token is escaped by following immediately with a repeat of the character.  "
"For example, a literal '<' character is output as '<<' in an annotated "
"assembly string."
msgstr ""

#: ../../../MarkedUpDisassembly.rst:81
msgid "C API Details"
msgstr ""

#: ../../../MarkedUpDisassembly.rst:83
msgid ""
"The intended consumers of this information use the C API, therefore the new "
"C API function for the disassembler will be added to provide an option to "
"produce disassembled instructions with annotations, "
"``LLVMSetDisasmOptions()`` and the ``LLVMDisassembler_Option_UseMarkup`` "
"option (see above)."
msgstr ""
