# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM main\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 08:36+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr_FR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../GettingStarted.rst:3
msgid "Getting Started with the LLVM System"
msgstr ""

#: ../../../GettingStarted.rst:9
msgid "Overview"
msgstr ""

#: ../../../GettingStarted.rst:11
msgid "Welcome to the LLVM project!"
msgstr ""

#: ../../../GettingStarted.rst:13
msgid ""
"The LLVM project has multiple components. The core of the project is itself "
"called \"LLVM\". This contains all of the tools, libraries, and header files "
"needed to process intermediate representations and convert them into object "
"files.  Tools include an assembler, disassembler, bitcode analyzer, and "
"bitcode optimizer.  It also contains basic regression tests."
msgstr ""

#: ../../../GettingStarted.rst:19
msgid ""
"C-like languages use the `Clang <https://clang.llvm.org/>`_ front end.  This "
"component compiles C, C++, Objective-C, and Objective-C++ code into LLVM "
"bitcode -- and from there into object files, using LLVM."
msgstr ""

#: ../../../GettingStarted.rst:23
msgid ""
"Other components include: the `libc++ C++ standard library <https://libcxx."
"llvm.org>`_, the `LLD linker <https://lld.llvm.org>`_, and more."
msgstr ""

#: ../../../GettingStarted.rst:30
msgid "Getting the Source Code and Building LLVM"
msgstr ""

#: ../../../GettingStarted.rst:32
msgid "Check out LLVM (including subprojects like Clang):"
msgstr ""

#: ../../../GettingStarted.rst:34
msgid "``git clone https://github.com/llvm/llvm-project.git``"
msgstr ""

#: ../../../GettingStarted.rst:35
msgid "Or, on Windows:"
msgstr ""

#: ../../../GettingStarted.rst:37
msgid ""
"``git clone --config core.autocrlf=false https://github.com/llvm/llvm-"
"project.git``"
msgstr ""

#: ../../../GettingStarted.rst:39
msgid ""
"To save storage and speed up the checkout time, you may want to do a "
"`shallow clone <https://git-scm.com/docs/git-clone#Documentation/git-clone."
"txt---depthltdepthgt>`_. For example, to get the latest revision of the LLVM "
"project, use"
msgstr ""

#: ../../../GettingStarted.rst:43
msgid "``git clone --depth 1 https://github.com/llvm/llvm-project.git``"
msgstr ""

#: ../../../GettingStarted.rst:45
msgid ""
"You are likely not interested in the user branches in the repo (used for "
"stacked pull requests and reverts), you can filter them from your `git "
"fetch` (or `git pull`) with this configuration:"
msgstr ""

#: ../../../GettingStarted.rst:54
msgid "Configure and build LLVM and Clang:"
msgstr ""

#: ../../../GettingStarted.rst:56
msgid "``cd llvm-project``"
msgstr ""

#: ../../../GettingStarted.rst:57
msgid "``cmake -S llvm -B build -G <generator> [options]``"
msgstr ""

#: ../../../GettingStarted.rst:59
msgid "Some common build system generators are:"
msgstr ""

#: ../../../GettingStarted.rst:61
msgid ""
"``Ninja`` --- for generating `Ninja <https://ninja-build.org>`_ build files. "
"Most llvm developers use Ninja."
msgstr ""

#: ../../../GettingStarted.rst:63
msgid ""
"``Unix Makefiles`` --- for generating make-compatible parallel makefiles."
msgstr ""

#: ../../../GettingStarted.rst:64
msgid ""
"``Visual Studio`` --- for generating Visual Studio projects and solutions."
msgstr ""

#: ../../../GettingStarted.rst:66
msgid "``Xcode`` --- for generating Xcode projects."
msgstr ""

#: ../../../GettingStarted.rst:68
msgid ""
"See the `CMake docs <https://cmake.org/cmake/help/latest/manual/cmake-"
"generators.7.html>`_ for a more comprehensive list."
msgstr ""

#: ../../../GettingStarted.rst:72
msgid "Some common options:"
msgstr ""

#: ../../../GettingStarted.rst:74
msgid ""
"``-DLLVM_ENABLE_PROJECTS='...'`` --- A semicolon-separated list of the LLVM "
"subprojects you'd like to additionally build. Can include any of: clang, "
"clang-tools-extra, lldb, lld, polly, or cross-project-tests."
msgstr ""

#: ../../../GettingStarted.rst:78
msgid ""
"For example, to build LLVM, Clang, and LLD, use ``-"
"DLLVM_ENABLE_PROJECTS=\"clang;lld\"``."
msgstr ""

#: ../../../GettingStarted.rst:81
msgid ""
"``-DCMAKE_INSTALL_PREFIX=directory`` --- Specify for *directory* the full "
"pathname of where you want the LLVM tools and libraries to be installed "
"(default ``/usr/local``)."
msgstr ""

#: ../../../GettingStarted.rst:85
msgid ""
"``-DCMAKE_BUILD_TYPE=type`` --- Controls the optimization level and debug "
"information of the build. Valid options for *type* are ``Debug``, "
"``Release``, ``RelWithDebInfo``, and ``MinSizeRel``. For more detailed "
"information, see :ref:`CMAKE_BUILD_TYPE <cmake_build_type>`."
msgstr ""

#: ../../../GettingStarted.rst:90
msgid ""
"``-DLLVM_ENABLE_ASSERTIONS=ON`` --- Compile with assertion checks enabled "
"(default is ON for Debug builds, OFF for all other build types)."
msgstr ""

#: ../../../GettingStarted.rst:93
msgid ""
"``-DLLVM_USE_LINKER=lld`` --- Link with the `lld linker`_, assuming it is "
"installed on your system. This can dramatically speed up link times if the "
"default linker is slow."
msgstr ""

#: ../../../GettingStarted.rst:97
msgid ""
"``-DLLVM_PARALLEL_{COMPILE,LINK,TABLEGEN}_JOBS=N`` --- Limit the number of "
"compile/link/tablegen jobs running in parallel at the same time. This is "
"especially important for linking since linking can use lots of memory. If "
"you run into memory issues building LLVM, try setting this to limit the "
"maximum number of compile/link/tablegen jobs running at the same time."
msgstr ""

#: ../../../GettingStarted.rst:103
msgid ""
"``cmake --build build [--target <target>]`` or the build system specified "
"above directly."
msgstr ""

#: ../../../GettingStarted.rst:106
msgid ""
"The default target (i.e. ``cmake --build build`` or ``make -C build``) will "
"build all of LLVM."
msgstr ""

#: ../../../GettingStarted.rst:109
msgid ""
"The ``check-all`` target (i.e. ``ninja check-all``) will run the regression "
"tests to ensure everything is in working order."
msgstr ""

#: ../../../GettingStarted.rst:112
msgid ""
"CMake will generate build targets for each tool and library, and most LLVM "
"sub-projects generate their own ``check-<project>`` target."
msgstr ""

#: ../../../GettingStarted.rst:115
msgid ""
"Running a serial build will be **slow**.  To improve speed, try running a "
"parallel build. That's done by default in Ninja; for ``make``, use the "
"option ``-j NN``, where ``NN`` is the number of parallel jobs, e.g. the "
"number of available CPUs."
msgstr ""

#: ../../../GettingStarted.rst:120
msgid ""
"A basic CMake and build/test invocation which only builds LLVM and no other "
"subprojects:"
msgstr ""

#: ../../../GettingStarted.rst:123
msgid "``cmake -S llvm -B build -G Ninja -DCMAKE_BUILD_TYPE=Debug``"
msgstr ""

#: ../../../GettingStarted.rst:125
msgid "``ninja -C build check-llvm``"
msgstr ""

#: ../../../GettingStarted.rst:127
msgid ""
"This will set up an LLVM build with debugging info, then compile LLVM and "
"run LLVM tests."
msgstr ""

#: ../../../GettingStarted.rst:130
msgid ""
"For more detailed information on CMake options, see `CMake <CMake.html>`__"
msgstr ""

#: ../../../GettingStarted.rst:132
msgid "If you get build or test failures, see `below`_."
msgstr ""

#: ../../../GettingStarted.rst:134
msgid ""
"Consult the `Getting Started with LLVM`_ section for detailed information on "
"configuring and compiling LLVM.  Go to `Directory Layout`_ to learn about "
"the layout of the source code tree."
msgstr ""

#: ../../../GettingStarted.rst:139
msgid "Stand-alone Builds"
msgstr ""

#: ../../../GettingStarted.rst:141
msgid ""
"Stand-alone builds allow you to build a sub-project against a pre-built "
"version of the clang or llvm libraries that is already present on your "
"system."
msgstr ""

#: ../../../GettingStarted.rst:145
msgid ""
"You can use the source code from a standard checkout of the llvm-project (as "
"described above) to do stand-alone builds, but you may also build from a :"
"ref:`sparse checkout<workflow-multicheckout-nocommit>` or from the tarballs "
"available on the `releases <https://github.com/llvm/llvm-project/releases/"
">`_ page."
msgstr ""

#: ../../../GettingStarted.rst:151
msgid ""
"For stand-alone builds, you must have an llvm install that is configured "
"properly to be consumable by stand-alone builds of the other projects. This "
"could be a distro-provided LLVM install, or you can build it yourself, like "
"this:"
msgstr ""

#: ../../../GettingStarted.rst:165
msgid ""
"Once llvm is installed, to configure a project for a stand-alone build, "
"invoke CMake like this:"
msgstr ""

#: ../../../GettingStarted.rst:174
msgid "Notice that:"
msgstr ""

#: ../../../GettingStarted.rst:176
msgid ""
"The stand-alone build needs to happen in a folder that is not the original "
"folder where LLVMN was built (`$builddir!=$builddir_subproj`)."
msgstr ""

#: ../../../GettingStarted.rst:179
msgid ""
"``LLVM_ROOT`` should point to the prefix of your llvm installation, so for "
"example, if llvm is installed into ``/usr/bin`` and ``/usr/lib64``, then you "
"should pass ``-DLLVM_ROOT=/usr/``."
msgstr ""

#: ../../../GettingStarted.rst:182
msgid ""
"Both the ``LLVM_ROOT`` and ``LLVM_EXTERNAL_LIT`` options are required to do "
"stand-alone builds for all sub-projects.  Additional required options for "
"each sub-project can be found in the table below."
msgstr ""

#: ../../../GettingStarted.rst:187
msgid ""
"The ``check-$subproj`` and ``install`` build targets are supported for the "
"sub-projects listed in the table below."
msgstr ""

#: ../../../GettingStarted.rst:191
msgid "Sub-Project"
msgstr ""

#: ../../../GettingStarted.rst:191
msgid "Required Sub-Directories"
msgstr ""

#: ../../../GettingStarted.rst:191
msgid "Required CMake Options"
msgstr ""

#: ../../../GettingStarted.rst:193
msgid "llvm"
msgstr ""

#: ../../../GettingStarted.rst:193
msgid "llvm, cmake, third-party"
msgstr ""

#: ../../../GettingStarted.rst:193
msgid "LLVM_INSTALL_UTILS=ON"
msgstr ""

#: ../../../GettingStarted.rst:194
msgid "clang"
msgstr ""

#: ../../../GettingStarted.rst:194
msgid "clang, cmake"
msgstr ""

#: ../../../GettingStarted.rst:194
msgid "CLANG_INCLUDE_TESTS=ON (Required for check-clang only)"
msgstr ""

#: ../../../GettingStarted.rst:195
msgid "lld"
msgstr ""

#: ../../../GettingStarted.rst:195
msgid "lld, cmake"
msgstr ""

#: ../../../GettingStarted.rst:198
msgid "Example of building stand-alone `clang`:"
msgstr ""

#: ../../../GettingStarted.rst:225
msgid "Requirements"
msgstr ""

#: ../../../GettingStarted.rst:227
msgid ""
"Before you begin to use the LLVM system, review the requirements below. This "
"may save you some trouble by knowing ahead of time what hardware and "
"software you will need."
msgstr ""

#: ../../../GettingStarted.rst:232
msgid "Hardware"
msgstr ""

#: ../../../GettingStarted.rst:234
msgid "LLVM is known to work on the following host platforms:"
msgstr ""

#: ../../../GettingStarted.rst:237
msgid "OS"
msgstr ""

#: ../../../GettingStarted.rst:237
msgid "Arch"
msgstr ""

#: ../../../GettingStarted.rst:237
msgid "Compilers"
msgstr ""

#: ../../../GettingStarted.rst:239 ../../../GettingStarted.rst:240
#: ../../../GettingStarted.rst:241 ../../../GettingStarted.rst:242
#: ../../../GettingStarted.rst:243 ../../../GettingStarted.rst:244
#: ../../../GettingStarted.rst:245 ../../../GettingStarted.rst:246
#: ../../../GettingStarted.rst:247
msgid "Linux"
msgstr ""

#: ../../../GettingStarted.rst:239 ../../../GettingStarted.rst:250
#: ../../../GettingStarted.rst:253 ../../../GettingStarted.rst:255
#: ../../../GettingStarted.rst:261
msgid "x86\\ :sup:`1`"
msgstr ""

#: ../../../GettingStarted.rst:239 ../../../GettingStarted.rst:240
#: ../../../GettingStarted.rst:241 ../../../GettingStarted.rst:242
#: ../../../GettingStarted.rst:243 ../../../GettingStarted.rst:244
#: ../../../GettingStarted.rst:245 ../../../GettingStarted.rst:246
#: ../../../GettingStarted.rst:247 ../../../GettingStarted.rst:249
#: ../../../GettingStarted.rst:250 ../../../GettingStarted.rst:251
#: ../../../GettingStarted.rst:252 ../../../GettingStarted.rst:253
#: ../../../GettingStarted.rst:254 ../../../GettingStarted.rst:255
#: ../../../GettingStarted.rst:256 ../../../GettingStarted.rst:258
msgid "GCC, Clang"
msgstr ""

#: ../../../GettingStarted.rst:240 ../../../GettingStarted.rst:249
#: ../../../GettingStarted.rst:251 ../../../GettingStarted.rst:254
#: ../../../GettingStarted.rst:256
msgid "amd64"
msgstr ""

#: ../../../GettingStarted.rst:241
msgid "ARM"
msgstr ""

#: ../../../GettingStarted.rst:242 ../../../GettingStarted.rst:252
msgid "AArch64"
msgstr ""

#: ../../../GettingStarted.rst:243
msgid "LoongArch"
msgstr ""

#: ../../../GettingStarted.rst:244
msgid "Mips"
msgstr ""

#: ../../../GettingStarted.rst:245 ../../../GettingStarted.rst:257
msgid "PowerPC"
msgstr ""

#: ../../../GettingStarted.rst:246
msgid "RISC-V"
msgstr ""

#: ../../../GettingStarted.rst:247
msgid "SystemZ"
msgstr ""

#: ../../../GettingStarted.rst:248
msgid "Solaris"
msgstr ""

#: ../../../GettingStarted.rst:248
msgid "V9 (Ultrasparc)"
msgstr ""

#: ../../../GettingStarted.rst:248 ../../../GettingStarted.rst:257
#: ../../../GettingStarted.rst:260
msgid "GCC"
msgstr ""

#: ../../../GettingStarted.rst:249
msgid "DragonFlyBSD"
msgstr ""

#: ../../../GettingStarted.rst:250 ../../../GettingStarted.rst:251
#: ../../../GettingStarted.rst:252
msgid "FreeBSD"
msgstr ""

#: ../../../GettingStarted.rst:253 ../../../GettingStarted.rst:254
msgid "NetBSD"
msgstr ""

#: ../../../GettingStarted.rst:255 ../../../GettingStarted.rst:256
msgid "OpenBSD"
msgstr ""

#: ../../../GettingStarted.rst:257
msgid "macOS\\ :sup:`2`"
msgstr ""

#: ../../../GettingStarted.rst:258 ../../../GettingStarted.rst:259
msgid "macOS"
msgstr ""

#: ../../../GettingStarted.rst:258
msgid "x86"
msgstr ""

#: ../../../GettingStarted.rst:259
msgid "arm64"
msgstr ""

#: ../../../GettingStarted.rst:259
msgid "Clang"
msgstr ""

#: ../../../GettingStarted.rst:260
msgid "Cygwin/Win32"
msgstr ""

#: ../../../GettingStarted.rst:260
msgid "x86\\ :sup:`1, 3`"
msgstr ""

#: ../../../GettingStarted.rst:261
msgid "Windows"
msgstr ""

#: ../../../GettingStarted.rst:261
msgid "Visual Studio"
msgstr ""

#: ../../../GettingStarted.rst:262
msgid "Windows x64"
msgstr ""

#: ../../../GettingStarted.rst:262
msgid "x86-64"
msgstr ""

#: ../../../GettingStarted.rst:262 ../../../GettingStarted.rst:263
msgid "Visual Studio, Clang\\ :sup:`4`"
msgstr ""

#: ../../../GettingStarted.rst:263
msgid "Windows on Arm"
msgstr ""

#: ../../../GettingStarted.rst:263
msgid "ARM64"
msgstr ""

#: ../../../GettingStarted.rst:268
msgid "Code generation supported for Pentium processors and up"
msgstr ""

#: ../../../GettingStarted.rst:269
msgid "Code generation supported for 32-bit ABI only"
msgstr ""

#: ../../../GettingStarted.rst:270
msgid ""
"To use LLVM modules on a Win32-based system, you may configure LLVM with ``-"
"DBUILD_SHARED_LIBS=On``."
msgstr ""

#: ../../../GettingStarted.rst:272
msgid ""
"Visual Studio alone can compile LLVM. When using Clang, you must also have "
"Visual Studio installed."
msgstr ""

#: ../../../GettingStarted.rst:275
msgid ""
"Note that Debug builds require a lot of time and disk space.  An LLVM-only "
"build will need about 1-3 GB of space.  A full build of LLVM and Clang will "
"need around 15-20 GB of disk space.  The exact space requirements will vary "
"by system.  (It is so large because of all the debugging information and the "
"fact that the libraries are statically linked into multiple tools)."
msgstr ""

#: ../../../GettingStarted.rst:281
msgid ""
"If you are space-constrained, you can build only selected tools or only "
"selected targets.  The Release build requires considerably less space."
msgstr ""

#: ../../../GettingStarted.rst:284
msgid ""
"The LLVM suite *may* compile on other platforms, but it is not guaranteed to "
"do so.  If compilation is successful, the LLVM utilities should be able to "
"assemble, disassemble, analyze, and optimize LLVM bitcode.  Code generation "
"should work as well, although the generated native code may not work on your "
"platform."
msgstr ""

#: ../../../GettingStarted.rst:291
msgid "Software"
msgstr ""

#: ../../../GettingStarted.rst:293
msgid ""
"Compiling LLVM requires that you have several software packages installed. "
"The table below lists those required packages. The Package column is the "
"usual name for the software package that LLVM depends on. The Version column "
"provides \"known to work\" versions of the package. The Notes column "
"describes how LLVM uses the package and provides other details."
msgstr ""

#: ../../../GettingStarted.rst:300
msgid "Package"
msgstr ""

#: ../../../GettingStarted.rst:300
msgid "Version"
msgstr ""

#: ../../../GettingStarted.rst:300
msgid "Notes"
msgstr ""

#: ../../../GettingStarted.rst:302
msgid "`CMake <http://cmake.org/>`_"
msgstr ""

#: ../../../GettingStarted.rst:302
msgid ">=3.20.0"
msgstr ""

#: ../../../GettingStarted.rst:302
msgid "Makefile/workspace generator"
msgstr ""

#: ../../../GettingStarted.rst:303
msgid "`python <http://www.python.org/>`_"
msgstr ""

#: ../../../GettingStarted.rst:303
msgid ">=3.8"
msgstr ""

#: ../../../GettingStarted.rst:303
msgid "Automated test suite\\ :sup:`1`"
msgstr ""

#: ../../../GettingStarted.rst:304
msgid "`zlib <http://zlib.net>`_"
msgstr ""

#: ../../../GettingStarted.rst:304
msgid ">=1.2.3.4"
msgstr ""

#: ../../../GettingStarted.rst:304
msgid "Compression library\\ :sup:`2`"
msgstr ""

#: ../../../GettingStarted.rst:305
msgid "`GNU Make <http://savannah.gnu.org/projects/make>`_"
msgstr ""

#: ../../../GettingStarted.rst:305
msgid "3.79, 3.79.1"
msgstr ""

#: ../../../GettingStarted.rst:305
msgid "Makefile/build processor\\ :sup:`3`"
msgstr ""

#: ../../../GettingStarted.rst:306
msgid "`PyYAML <https://pypi.org/project/PyYAML/>`_"
msgstr ""

#: ../../../GettingStarted.rst:306
msgid ">=5.1"
msgstr ""

#: ../../../GettingStarted.rst:306
msgid "Header generator\\ :sup:`4`"
msgstr ""

#: ../../../GettingStarted.rst:311
msgid ""
"Only needed if you want to run the automated test suite in the ``llvm/test`` "
"directory, or if you plan to utilize any Python libraries, utilities, or "
"bindings."
msgstr ""

#: ../../../GettingStarted.rst:314
msgid ""
"Optional, adds compression/uncompression capabilities to selected LLVM tools."
msgstr ""

#: ../../../GettingStarted.rst:316
msgid "Optional, you can use any other build tool supported by CMake."
msgstr ""

#: ../../../GettingStarted.rst:317
msgid "Only needed when building libc with New Headergen. Mainly used by libc."
msgstr ""

#: ../../../GettingStarted.rst:319
msgid ""
"Additionally, your compilation host is expected to have the usual plethora "
"of Unix utilities. Specifically:"
msgstr ""

#: ../../../GettingStarted.rst:322
msgid "**ar** --- archive library builder"
msgstr ""

#: ../../../GettingStarted.rst:323
msgid "**bzip2** --- bzip2 command for distribution generation"
msgstr ""

#: ../../../GettingStarted.rst:324
msgid "**bunzip2** --- bunzip2 command for distribution checking"
msgstr ""

#: ../../../GettingStarted.rst:325
msgid "**chmod** --- change permissions on a file"
msgstr ""

#: ../../../GettingStarted.rst:326
msgid "**cat** --- output concatenation utility"
msgstr ""

#: ../../../GettingStarted.rst:327
msgid "**cp** --- copy files"
msgstr ""

#: ../../../GettingStarted.rst:328
msgid "**date** --- print the current date/time"
msgstr ""

#: ../../../GettingStarted.rst:329
msgid "**echo** --- print to standard output"
msgstr ""

#: ../../../GettingStarted.rst:330
msgid "**egrep** --- extended regular expression search utility"
msgstr ""

#: ../../../GettingStarted.rst:331
msgid "**find** --- find files/dirs in a file system"
msgstr ""

#: ../../../GettingStarted.rst:332
msgid "**grep** --- regular expression search utility"
msgstr ""

#: ../../../GettingStarted.rst:333
msgid "**gzip** --- gzip command for distribution generation"
msgstr ""

#: ../../../GettingStarted.rst:334
msgid "**gunzip** --- gunzip command for distribution checking"
msgstr ""

#: ../../../GettingStarted.rst:335
msgid "**install** --- install directories/files"
msgstr ""

#: ../../../GettingStarted.rst:336
msgid "**mkdir** --- create a directory"
msgstr ""

#: ../../../GettingStarted.rst:337
msgid "**mv** --- move (rename) files"
msgstr ""

#: ../../../GettingStarted.rst:338
msgid "**ranlib** --- symbol table builder for archive libraries"
msgstr ""

#: ../../../GettingStarted.rst:339
msgid "**rm** --- remove (delete) files and directories"
msgstr ""

#: ../../../GettingStarted.rst:340
msgid "**sed** --- stream editor for transforming output"
msgstr ""

#: ../../../GettingStarted.rst:341
msgid "**sh** --- Bourne shell for make build scripts"
msgstr ""

#: ../../../GettingStarted.rst:342
msgid "**tar** --- tape archive for distribution generation"
msgstr ""

#: ../../../GettingStarted.rst:343
msgid "**test** --- test things in file system"
msgstr ""

#: ../../../GettingStarted.rst:344
msgid "**unzip** --- unzip command for distribution checking"
msgstr ""

#: ../../../GettingStarted.rst:345
msgid "**zip** --- zip command for distribution generation"
msgstr ""

#: ../../../GettingStarted.rst:353
msgid "Host C++ Toolchain, both Compiler and Standard Library"
msgstr ""

#: ../../../GettingStarted.rst:355
msgid ""
"LLVM is very demanding of the host C++ compiler, and as such tends to expose "
"bugs in the compiler. We also attempt to follow improvements and "
"developments in the C++ language and library reasonably closely. As such, we "
"require a modern host C++ toolchain, both compiler and standard library, in "
"order to build LLVM."
msgstr ""

#: ../../../GettingStarted.rst:360
msgid ""
"LLVM is written using the subset of C++ documented in :doc:`coding "
"standards<CodingStandards>`. To enforce this language version, we check the "
"most popular host toolchains for specific minimum versions in our build "
"systems:"
msgstr ""

#: ../../../GettingStarted.rst:364
msgid "Clang 5.0"
msgstr ""

#: ../../../GettingStarted.rst:365
msgid "Apple Clang 10.0"
msgstr ""

#: ../../../GettingStarted.rst:366
msgid "GCC 7.4"
msgstr ""

#: ../../../GettingStarted.rst:367
msgid "Visual Studio 2019 16.8"
msgstr ""

#: ../../../GettingStarted.rst:369
msgid ""
"Anything older than these toolchains *may* work, but will require forcing "
"the build system with a special option and is not really a supported host "
"platform. Also note that older versions of these compilers have often "
"crashed or miscompiled LLVM."
msgstr ""

#: ../../../GettingStarted.rst:374
msgid ""
"For less widely used host toolchains such as ICC or xlC, be aware that a "
"very recent version may be required to support all of the C++ features used "
"in LLVM."
msgstr ""

#: ../../../GettingStarted.rst:377
msgid ""
"We track certain versions of software that are *known* to fail when used as "
"part of the host toolchain. These even include linkers at times."
msgstr ""

#: ../../../GettingStarted.rst:380
msgid ""
"**GNU ld 2.16.X**. Some 2.16.X versions of the ld linker will produce very "
"long warning messages complaining that some \"``.gnu.linkonce.t.*``\" symbol "
"was defined in a discarded section. You can safely ignore these messages as "
"they are erroneous and the linkage is correct.  These messages disappear "
"using ld 2.17."
msgstr ""

#: ../../../GettingStarted.rst:385
msgid ""
"**GNU binutils 2.17**: Binutils 2.17 contains `a bug <http://sourceware.org/"
"bugzilla/show_bug.cgi?id=3111>`__ which causes huge link times (minutes "
"instead of seconds) when building LLVM.  We recommend upgrading to a newer "
"version (2.17.50.0.4 or later)."
msgstr ""

#: ../../../GettingStarted.rst:390
msgid ""
"**GNU Binutils 2.19.1 Gold**: This version of Gold contained `a bug <http://"
"sourceware.org/bugzilla/show_bug.cgi?id=9836>`__ which causes intermittent "
"failures when building LLVM with position independent code.  The symptom is "
"an error about cyclic dependencies.  We recommend upgrading to a newer "
"version of Gold."
msgstr ""

#: ../../../GettingStarted.rst:397
msgid "Getting a Modern Host C++ Toolchain"
msgstr ""

#: ../../../GettingStarted.rst:399
msgid ""
"This section mostly applies to Linux and older BSDs. On macOS, you should "
"have a sufficiently modern Xcode, or you will likely need to upgrade until "
"you do. Windows does not have a \"system compiler\", so you must install "
"either Visual Studio 2019 (or later), or a recent version of mingw64. "
"FreeBSD 10.0 and newer have a modern Clang as the system compiler."
msgstr ""

#: ../../../GettingStarted.rst:405
msgid ""
"However, some Linux distributions and some other or older BSDs sometimes "
"have extremely old versions of GCC. These steps attempt to help you upgrade "
"your compiler even on such a system. However, if at all possible, we "
"encourage you to use a recent version of a distribution with a modern system "
"compiler that meets these requirements. Note that it is tempting to install "
"a prior version of Clang and libc++ to be the host compiler; however, libc++ "
"was not well tested or set up to build on Linux until relatively recently. "
"As a consequence, this guide suggests just using libstdc++ and a modern GCC "
"as the initial host in a bootstrap, and then using Clang (and potentially "
"libc++)."
msgstr ""

#: ../../../GettingStarted.rst:415
msgid ""
"The first step is to get a recent GCC toolchain installed. The most common "
"distribution on which users have struggled with the version requirements is "
"Ubuntu Precise, 12.04 LTS. For this distribution, one easy option is to "
"install the `toolchain testing PPA`_ and use it to install a modern GCC. "
"There is a really nice discussion of this on the `ask ubuntu stack "
"exchange`_ and a `github gist`_ with updated commands. However, not all "
"users can use PPAs and there are many other distributions, so it may be "
"necessary (or just useful, if you're here you *are* doing compiler "
"development after all) to build and install GCC from source. It is also "
"quite easy to do these days."
msgstr ""

#: ../../../GettingStarted.rst:432
msgid "Easy steps for installing a specific version of GCC:"
msgstr ""

#: ../../../GettingStarted.rst:452
msgid ""
"For more details, check out the excellent `GCC wiki entry`_, where I got "
"most of this information from."
msgstr ""

#: ../../../GettingStarted.rst:458
msgid ""
"Once you have a GCC toolchain, configure your build of LLVM to use the new "
"toolchain for your host compiler and C++ standard library. Because the new "
"version of libstdc++ is not on the system library search path, you need to "
"pass extra linker flags so that it can be found at link time (``-L``) and at "
"runtime (``-rpath``). If you are using CMake, this invocation should produce "
"working binaries:"
msgstr ""

#: ../../../GettingStarted.rst:472
msgid ""
"If you fail to set rpath, most LLVM binaries will fail on startup with a "
"message from the loader similar to ``libstdc++.so.6: version "
"`GLIBCXX_3.4.20' not found``. This means you need to tweak the ``-rpath`` "
"linker flag."
msgstr ""

#: ../../../GettingStarted.rst:476
msgid ""
"This method will add an absolute path to the rpath of all executables. "
"That's fine for local development. If you want to distribute the binaries "
"you build so that they can run on older systems, copy ``libstdc++.so.6`` "
"into the ``lib/`` directory.  All of LLVM's shipping binaries have an rpath "
"pointing at ``$ORIGIN/../lib``, so they will find ``libstdc++.so.6`` there.  "
"Non-distributed binaries don't have an rpath set and won't find ``libstdc++."
"so.6``. Pass ``-DLLVM_LOCAL_RPATH=\"$HOME/toolchains/lib64\"`` to CMake to "
"add an absolute path to ``libstdc++.so.6`` as above. Since these binaries "
"are not distributed, having an absolute local path is fine for them."
msgstr ""

#: ../../../GettingStarted.rst:486
msgid ""
"When you build Clang, you will need to give *it* access to a modern C++ "
"standard library in order to use it as your new host in part of a bootstrap. "
"There are two easy ways to do this, either build (and install) libc++ along "
"with Clang and then use it with the ``-stdlib=libc++`` compile and link "
"flag, or install Clang into the same prefix (``$HOME/toolchains`` above) as "
"GCC. Clang will look within its own prefix for libstdc++ and use it if "
"found. You can also add an explicit prefix for Clang to look in for a GCC "
"toolchain with the ``--gcc-toolchain=/opt/my/gcc/prefix`` flag, passing it "
"to both compile and link commands when using your just-built-Clang to "
"bootstrap."
msgstr ""

#: ../../../GettingStarted.rst:499
msgid "Getting Started with LLVM"
msgstr ""

#: ../../../GettingStarted.rst:501
msgid ""
"The remainder of this guide is meant to get you up and running with LLVM and "
"to give you some basic information about the LLVM environment."
msgstr ""

#: ../../../GettingStarted.rst:504
msgid ""
"The later sections of this guide describe the `general layout`_ of the LLVM "
"source tree, a `simple example`_ using the LLVM toolchain, and `links`_ to "
"find more information about LLVM or to get help via e-mail."
msgstr ""

#: ../../../GettingStarted.rst:509
msgid "Terminology and Notation"
msgstr ""

#: ../../../GettingStarted.rst:511
msgid ""
"Throughout this manual, the following names are used to denote paths "
"specific to the local system and working environment.  *These are not "
"environment variables you need to set but just strings used in the rest of "
"this document below*.  In any of the examples below, simply replace each of "
"these names with the appropriate pathname on your local system.  All these "
"paths are absolute:"
msgstr ""

#: ../../../GettingStarted.rst:517
msgid "``SRC_ROOT``"
msgstr ""

#: ../../../GettingStarted.rst:519
msgid "This is the top-level directory of the LLVM source tree."
msgstr ""

#: ../../../GettingStarted.rst:521
msgid "``OBJ_ROOT``"
msgstr ""

#: ../../../GettingStarted.rst:523
msgid ""
"This is the top-level directory of the LLVM object tree (i.e. the tree where "
"object files and compiled programs will be placed.  It can be the same as "
"SRC_ROOT)."
msgstr ""

#: ../../../GettingStarted.rst:528
msgid "Sending patches"
msgstr ""

#: ../../../GettingStarted.rst:530
msgid "See :ref:`Contributing <submit_patch>`."
msgstr ""

#: ../../../GettingStarted.rst:533
msgid "Bisecting commits"
msgstr ""

#: ../../../GettingStarted.rst:535
msgid ""
"See `Bisecting LLVM code <GitBisecting.html>`_ for how to use ``git bisect`` "
"on LLVM."
msgstr ""

#: ../../../GettingStarted.rst:539
msgid "Reverting a change"
msgstr ""

#: ../../../GettingStarted.rst:541
msgid ""
"When reverting changes using git, the default message will say \"This "
"reverts commit XYZ\". Leave this at the end of the commit message, but add "
"some details before it as to why the commit is being reverted. A brief "
"explanation and/or links to bots that demonstrate the problem are sufficient."
msgstr ""

#: ../../../GettingStarted.rst:547
msgid "Local LLVM Configuration"
msgstr ""

#: ../../../GettingStarted.rst:549
msgid ""
"Once checked out repository, the LLVM suite source code must be configured "
"before being built. This process uses CMake.  Unlike the normal "
"``configure`` script, CMake generates the build files in whatever format you "
"request as well as various ``*.inc`` files, and ``llvm/include/llvm/Config/"
"config.h.cmake``."
msgstr ""

#: ../../../GettingStarted.rst:554
msgid ""
"Variables are passed to ``cmake`` on the command line using the format ``-"
"D<variable name>=<value>``. The following variables are some common options "
"used by people developing LLVM."
msgstr ""

#: ../../../GettingStarted.rst:558
msgid "``CMAKE_C_COMPILER``"
msgstr ""

#: ../../../GettingStarted.rst:559
msgid "``CMAKE_CXX_COMPILER``"
msgstr ""

#: ../../../GettingStarted.rst:560
msgid "``CMAKE_BUILD_TYPE``"
msgstr ""

#: ../../../GettingStarted.rst:561
msgid "``CMAKE_INSTALL_PREFIX``"
msgstr ""

#: ../../../GettingStarted.rst:562
msgid "``Python3_EXECUTABLE``"
msgstr ""

#: ../../../GettingStarted.rst:563
msgid "``LLVM_TARGETS_TO_BUILD``"
msgstr ""

#: ../../../GettingStarted.rst:564
msgid "``LLVM_ENABLE_PROJECTS``"
msgstr ""

#: ../../../GettingStarted.rst:565
msgid "``LLVM_ENABLE_RUNTIMES``"
msgstr ""

#: ../../../GettingStarted.rst:566
msgid "``LLVM_ENABLE_DOXYGEN``"
msgstr ""

#: ../../../GettingStarted.rst:567
msgid "``LLVM_ENABLE_SPHINX``"
msgstr ""

#: ../../../GettingStarted.rst:568
msgid "``LLVM_BUILD_LLVM_DYLIB``"
msgstr ""

#: ../../../GettingStarted.rst:569
msgid "``LLVM_LINK_LLVM_DYLIB``"
msgstr ""

#: ../../../GettingStarted.rst:570
msgid "``LLVM_PARALLEL_LINK_JOBS``"
msgstr ""

#: ../../../GettingStarted.rst:571
msgid "``LLVM_OPTIMIZED_TABLEGEN``"
msgstr ""

#: ../../../GettingStarted.rst:573
msgid ""
"See :ref:`the list of frequently-used CMake variables "
"<cmake_frequently_used_variables>` for more information."
msgstr ""

#: ../../../GettingStarted.rst:576
msgid "To configure LLVM, follow these steps:"
msgstr ""

#: ../../../GettingStarted.rst:578
msgid "Change directory into the object root directory:"
msgstr ""

#: ../../../GettingStarted.rst:584
msgid "Run the ``cmake``:"
msgstr ""

#: ../../../GettingStarted.rst:592
msgid "Compiling the LLVM Suite Source Code"
msgstr ""

#: ../../../GettingStarted.rst:594
msgid ""
"Unlike with autotools, with CMake your build type is defined at "
"configuration. If you want to change your build type, you can re-run CMake "
"with the following invocation:"
msgstr ""

#: ../../../GettingStarted.rst:602
msgid ""
"Between runs, CMake preserves the values set for all options. CMake has the "
"following build types defined:"
msgstr ""

#: ../../../GettingStarted.rst:605
msgid "Debug"
msgstr ""

#: ../../../GettingStarted.rst:607
msgid ""
"These builds are the default. The build system will compile the tools and "
"libraries unoptimized, with debugging information, and asserts enabled."
msgstr ""

#: ../../../GettingStarted.rst:610
msgid "Release"
msgstr ""

#: ../../../GettingStarted.rst:612
msgid ""
"For these builds, the build system will compile the tools and libraries with "
"optimizations enabled and not generate debug info. CMakes default "
"optimization level is -O3. This can be configured by setting the "
"``CMAKE_CXX_FLAGS_RELEASE`` variable on the CMake command line."
msgstr ""

#: ../../../GettingStarted.rst:617
msgid "RelWithDebInfo"
msgstr ""

#: ../../../GettingStarted.rst:619
msgid ""
"These builds are useful when debugging. They generate optimized binaries "
"with debug information. CMakes default optimization level is -O2. This can "
"be configured by setting the ``CMAKE_CXX_FLAGS_RELWITHDEBINFO`` variable on "
"the CMake command line."
msgstr ""

#: ../../../GettingStarted.rst:624
msgid ""
"Once you have LLVM configured, you can build it by entering the *OBJ_ROOT* "
"directory and issuing the following command:"
msgstr ""

#: ../../../GettingStarted.rst:631
msgid ""
"If the build fails, please `check here`_ to see if you are using a version "
"of GCC that is known not to compile LLVM."
msgstr ""

#: ../../../GettingStarted.rst:634
msgid ""
"If you have multiple processors in your machine, you may wish to use some of "
"the parallel build options provided by GNU Make.  For example, you could use "
"the command:"
msgstr ""

#: ../../../GettingStarted.rst:642
msgid ""
"There are several special targets which are useful when working with the "
"LLVM source code:"
msgstr ""

#: ../../../GettingStarted.rst:645
msgid "``make clean``"
msgstr ""

#: ../../../GettingStarted.rst:647
msgid ""
"Removes all files generated by the build.  This includes object files, "
"generated C/C++ files, libraries, and executables."
msgstr ""

#: ../../../GettingStarted.rst:650
msgid "``make install``"
msgstr ""

#: ../../../GettingStarted.rst:652
msgid ""
"Installs LLVM header files, libraries, tools, and documentation in a "
"hierarchy under ``$PREFIX``, specified with ``CMAKE_INSTALL_PREFIX``, which "
"defaults to ``/usr/local``."
msgstr ""

#: ../../../GettingStarted.rst:656
msgid "``make docs-llvm-html``"
msgstr ""

#: ../../../GettingStarted.rst:658
msgid ""
"If configured with ``-DLLVM_ENABLE_SPHINX=On``, this will generate a "
"directory at ``OBJ_ROOT/docs/html`` which contains the HTML formatted "
"documentation."
msgstr ""

#: ../../../GettingStarted.rst:662
msgid "Cross-Compiling LLVM"
msgstr ""

#: ../../../GettingStarted.rst:664
msgid ""
"It is possible to cross-compile LLVM itself. That is, you can create LLVM "
"executables and libraries to be hosted on a platform different from the "
"platform where they are built (a Canadian Cross build). To generate build "
"files for cross-compiling CMake provides a variable ``CMAKE_TOOLCHAIN_FILE`` "
"which can define compiler flags and variables used during the CMake test "
"operations."
msgstr ""

#: ../../../GettingStarted.rst:670
msgid ""
"The result of such a build is executables that are not runnable on the build "
"host but can be executed on the target. As an example, the following CMake "
"invocation can generate build files targeting iOS. This will work on macOS "
"with the latest Xcode:"
msgstr ""

#: ../../../GettingStarted.rst:683
msgid ""
"Note: There are some additional flags that need to be passed when building "
"for iOS due to limitations in the iOS SDK."
msgstr ""

#: ../../../GettingStarted.rst:686
msgid ""
"Check :doc:`HowToCrossCompileLLVM` and `Clang docs on how to cross-compile "
"in general <https://clang.llvm.org/docs/CrossCompilation.html>`_ for more "
"information about cross-compiling."
msgstr ""

#: ../../../GettingStarted.rst:691
msgid "The Location of LLVM Object Files"
msgstr ""

#: ../../../GettingStarted.rst:693
msgid ""
"The LLVM build system is capable of sharing a single LLVM source tree among "
"several LLVM builds.  Hence, it is possible to build LLVM for several "
"different platforms or configurations using the same source tree."
msgstr ""

#: ../../../GettingStarted.rst:697
msgid "Change directory to where the LLVM object files should live:"
msgstr ""

#: ../../../GettingStarted.rst:703
msgid "Run ``cmake``:"
msgstr ""

#: ../../../GettingStarted.rst:709
msgid ""
"The LLVM build will create a structure underneath *OBJ_ROOT* that matches "
"the LLVM source tree. At each level where source files are present in the "
"source tree there will be a corresponding ``CMakeFiles`` directory in the "
"*OBJ_ROOT*. Underneath that directory there is another directory with a name "
"ending in ``.dir`` under which you'll find object files for each source."
msgstr ""

#: ../../../GettingStarted.rst:715
msgid "For example:"
msgstr ""

#: ../../../GettingStarted.rst:724
msgid "Optional Configuration Items"
msgstr ""

#: ../../../GettingStarted.rst:726
msgid ""
"If you're running on a Linux system that supports the `binfmt_misc <http://"
"en.wikipedia.org/wiki/binfmt_misc>`_ module, and you have root access on the "
"system, you can set your system up to execute LLVM bitcode files directly. "
"To do this, use commands like this (the first command may not be required if "
"you are already using the module):"
msgstr ""

#: ../../../GettingStarted.rst:739
msgid ""
"This allows you to execute LLVM bitcode files directly.  On Debian, you can "
"also use this command instead of the 'echo' command above:"
msgstr ""

#: ../../../GettingStarted.rst:750
msgid "Directory Layout"
msgstr ""

#: ../../../GettingStarted.rst:752
msgid ""
"One useful source of information about the LLVM source base is the LLVM "
"`doxygen <http://www.doxygen.org/>`_ documentation available at `<https://"
"llvm.org/doxygen/>`_.  The following is a brief introduction to code layout:"
msgstr ""

#: ../../../GettingStarted.rst:758
msgid "``llvm/cmake``"
msgstr ""

#: ../../../GettingStarted.rst:759
msgid "Generates system build files."
msgstr ""

#: ../../../GettingStarted.rst:763
msgid "``llvm/cmake/modules``"
msgstr ""

#: ../../../GettingStarted.rst:762
msgid ""
"Build configuration for llvm user defined options. Checks compiler version "
"and linker flags."
msgstr ""

#: ../../../GettingStarted.rst:767
msgid "``llvm/cmake/platforms``"
msgstr ""

#: ../../../GettingStarted.rst:766
msgid ""
"Toolchain configuration for Android NDK, iOS systems and non-Windows hosts "
"to target MSVC."
msgstr ""

#: ../../../GettingStarted.rst:770
msgid "``llvm/examples``"
msgstr ""

#: ../../../GettingStarted.rst:772
msgid ""
"Some simple examples showing how to use LLVM as a compiler for a custom "
"language - including lowering, optimization, and code generation."
msgstr ""

#: ../../../GettingStarted.rst:775
msgid ""
"Kaleidoscope Tutorial: Kaleidoscope language tutorial runs through the "
"implementation of a nice little compiler for a non-trivial language "
"including a hand-written lexer, parser, AST, as well as code generation "
"support using LLVM- both static (ahead of time) and various approaches to "
"Just In Time (JIT) compilation. `Kaleidoscope Tutorial for complete beginner "
"<https://llvm.org/docs/tutorial/MyFirstLanguageFrontend/index.html>`_."
msgstr ""

#: ../../../GettingStarted.rst:783
msgid ""
"BuildingAJIT: Examples of the `BuildingAJIT tutorial <https://llvm.org/docs/"
"tutorial/BuildingAJIT1.html>`_ that shows how LLVM’s ORC JIT APIs interact "
"with other parts of LLVM. It also teaches how to recombine them to build a "
"custom JIT that is suited to your use-case."
msgstr ""

#: ../../../GettingStarted.rst:789
msgid "``llvm/include``"
msgstr ""

#: ../../../GettingStarted.rst:791
msgid ""
"Public header files exported from the LLVM library. The three main "
"subdirectories:"
msgstr ""

#: ../../../GettingStarted.rst:793
msgid "``llvm/include/llvm``"
msgstr ""

#: ../../../GettingStarted.rst:795
msgid ""
"All LLVM-specific header files, and  subdirectories for different portions "
"of LLVM: ``Analysis``, ``CodeGen``, ``Target``, ``Transforms``, etc..."
msgstr ""

#: ../../../GettingStarted.rst:798
msgid "``llvm/include/llvm/Support``"
msgstr ""

#: ../../../GettingStarted.rst:800
msgid ""
"Generic support libraries provided with LLVM but not necessarily specific to "
"LLVM. For example, some C++ STL utilities and a Command Line option "
"processing library store header files here."
msgstr ""

#: ../../../GettingStarted.rst:804
msgid "``llvm/include/llvm/Config``"
msgstr ""

#: ../../../GettingStarted.rst:806
msgid ""
"Header files configured by ``cmake``.  They wrap \"standard\" UNIX and C "
"header files.  Source code can include these header files which "
"automatically take care of the conditional #includes that ``cmake`` "
"generates."
msgstr ""

#: ../../../GettingStarted.rst:812
msgid "``llvm/lib``"
msgstr ""

#: ../../../GettingStarted.rst:814
msgid ""
"Most source files are here. By putting code in libraries, LLVM makes it easy "
"to share code among the `tools`_."
msgstr ""

#: ../../../GettingStarted.rst:817
msgid "``llvm/lib/IR/``"
msgstr ""

#: ../../../GettingStarted.rst:819
msgid ""
"Core LLVM source files that implement core classes like Instruction and "
"BasicBlock."
msgstr ""

#: ../../../GettingStarted.rst:822
msgid "``llvm/lib/AsmParser/``"
msgstr ""

#: ../../../GettingStarted.rst:824
msgid "Source code for the LLVM assembly language parser library."
msgstr ""

#: ../../../GettingStarted.rst:826
msgid "``llvm/lib/Bitcode/``"
msgstr ""

#: ../../../GettingStarted.rst:828
msgid "Code for reading and writing bitcode."
msgstr ""

#: ../../../GettingStarted.rst:830
msgid "``llvm/lib/Analysis/``"
msgstr ""

#: ../../../GettingStarted.rst:832
msgid ""
"A variety of program analyses, such as Call Graphs, Induction Variables, "
"Natural Loop Identification, etc."
msgstr ""

#: ../../../GettingStarted.rst:835
msgid "``llvm/lib/Transforms/``"
msgstr ""

#: ../../../GettingStarted.rst:837
msgid ""
"IR-to-IR program transformations, such as Aggressive Dead Code Elimination, "
"Sparse Conditional Constant Propagation, Inlining, Loop Invariant Code "
"Motion, Dead Global Elimination, and many others."
msgstr ""

#: ../../../GettingStarted.rst:841
msgid "``llvm/lib/Target/``"
msgstr ""

#: ../../../GettingStarted.rst:843
msgid ""
"Files describing target architectures for code generation.  For example, "
"``llvm/lib/Target/X86`` holds the X86 machine description."
msgstr ""

#: ../../../GettingStarted.rst:846
msgid "``llvm/lib/CodeGen/``"
msgstr ""

#: ../../../GettingStarted.rst:848
msgid ""
"The major parts of the code generator: Instruction Selector, Instruction "
"Scheduling, and Register Allocation."
msgstr ""

#: ../../../GettingStarted.rst:851
msgid "``llvm/lib/MC/``"
msgstr ""

#: ../../../GettingStarted.rst:853
msgid ""
"The libraries represent and process code at machine code level. Handles "
"assembly and object-file emission."
msgstr ""

#: ../../../GettingStarted.rst:856
msgid "``llvm/lib/ExecutionEngine/``"
msgstr ""

#: ../../../GettingStarted.rst:858
msgid ""
"Libraries for directly executing bitcode at runtime in interpreted and JIT-"
"compiled scenarios."
msgstr ""

#: ../../../GettingStarted.rst:861
msgid "``llvm/lib/Support/``"
msgstr ""

#: ../../../GettingStarted.rst:863
msgid ""
"Source code that corresponds to the header files in ``llvm/include/ADT/`` "
"and ``llvm/include/Support/``."
msgstr ""

#: ../../../GettingStarted.rst:867
msgid "``llvm/bindings``"
msgstr ""

#: ../../../GettingStarted.rst:869
msgid ""
"Contains bindings for the LLVM compiler infrastructure to allow programs "
"written in languages other than C or C++ to take advantage of the LLVM "
"infrastructure. The LLVM project provides language bindings for OCaml and "
"Python."
msgstr ""

#: ../../../GettingStarted.rst:875
msgid "``llvm/projects``"
msgstr ""

#: ../../../GettingStarted.rst:877
msgid ""
"Projects not strictly part of LLVM but shipped with LLVM. This is also the "
"directory for creating your own LLVM-based projects which leverage the LLVM "
"build system."
msgstr ""

#: ../../../GettingStarted.rst:882
msgid "``llvm/test``"
msgstr ""

#: ../../../GettingStarted.rst:884
msgid ""
"Feature and regression tests and other sanity checks on LLVM infrastructure. "
"These are intended to run quickly and cover a lot of territory without being "
"exhaustive."
msgstr ""

#: ../../../GettingStarted.rst:888
msgid "``test-suite``"
msgstr ""

#: ../../../GettingStarted.rst:890
msgid ""
"A comprehensive correctness, performance, and benchmarking test suite for "
"LLVM.  This comes in a ``separate git repository <https://github.com/llvm/"
"llvm-test-suite>``, because it contains a large amount of third-party code "
"under a variety of licenses. For details see the :doc:`Testing Guide "
"<TestingGuide>` document."
msgstr ""

#: ../../../GettingStarted.rst:899
msgid "``llvm/tools``"
msgstr ""

#: ../../../GettingStarted.rst:901
msgid ""
"Executables built out of the libraries above, which form the main part of "
"the user interface.  You can always get help for a tool by typing "
"``tool_name -help``.  The following is a brief introduction to the most "
"important tools.  More detailed information is in the `Command Guide "
"<CommandGuide/index.html>`_."
msgstr ""

#: ../../../GettingStarted.rst:907
msgid "``bugpoint``"
msgstr ""

#: ../../../GettingStarted.rst:909
msgid ""
"``bugpoint`` is used to debug optimization passes or code generation "
"backends by narrowing down the given test case to the minimum number of "
"passes and/or instructions that still cause a problem, whether it is a crash "
"or miscompilation. See `<HowToSubmitABug.html>`_ for more information on "
"using ``bugpoint``."
msgstr ""

#: ../../../GettingStarted.rst:915
msgid "``llvm-ar``"
msgstr ""

#: ../../../GettingStarted.rst:917
msgid ""
"The archiver produces an archive containing the given LLVM bitcode files, "
"optionally with an index for faster lookup."
msgstr ""

#: ../../../GettingStarted.rst:920
msgid "``llvm-as``"
msgstr ""

#: ../../../GettingStarted.rst:922
msgid ""
"The assembler transforms the human-readable LLVM assembly to LLVM bitcode."
msgstr ""

#: ../../../GettingStarted.rst:924
msgid "``llvm-dis``"
msgstr ""

#: ../../../GettingStarted.rst:926
msgid ""
"The disassembler transforms the LLVM bitcode to human-readable LLVM assembly."
msgstr ""

#: ../../../GettingStarted.rst:928
msgid "``llvm-link``"
msgstr ""

#: ../../../GettingStarted.rst:930
msgid ""
"``llvm-link``, not surprisingly, links multiple LLVM modules into a single "
"program."
msgstr ""

#: ../../../GettingStarted.rst:933
msgid "``lli``"
msgstr ""

#: ../../../GettingStarted.rst:935
msgid ""
"``lli`` is the LLVM interpreter, which can directly execute LLVM bitcode "
"(although very slowly...). For architectures that support it (currently x86, "
"Sparc, and PowerPC), by default, ``lli`` will function as a Just-In-Time "
"compiler (if the functionality was compiled in), and will execute the code "
"*much* faster than the interpreter."
msgstr ""

#: ../../../GettingStarted.rst:941
msgid "``llc``"
msgstr ""

#: ../../../GettingStarted.rst:943
msgid ""
"``llc`` is the LLVM backend compiler, which translates LLVM bitcode to a "
"native code assembly file."
msgstr ""

#: ../../../GettingStarted.rst:946
msgid "``opt``"
msgstr ""

#: ../../../GettingStarted.rst:948
msgid ""
"``opt`` reads LLVM bitcode, applies a series of LLVM to LLVM transformations "
"(which are specified on the command line), and outputs the resultant "
"bitcode.   '``opt -help``'  is a good way to get a list of the program "
"transformations available in LLVM."
msgstr ""

#: ../../../GettingStarted.rst:953
msgid ""
"``opt`` can also  run a specific analysis on an input LLVM bitcode file and "
"print  the results.  Primarily useful for debugging analyses, or "
"familiarizing yourself with what an analysis does."
msgstr ""

#: ../../../GettingStarted.rst:958
msgid "``llvm/utils``"
msgstr ""

#: ../../../GettingStarted.rst:960
msgid ""
"Utilities for working with LLVM source code; some are part of the build "
"process because they are code generators for parts of the infrastructure."
msgstr ""

#: ../../../GettingStarted.rst:964
msgid "``codegen-diff``"
msgstr ""

#: ../../../GettingStarted.rst:966
msgid ""
"``codegen-diff`` finds differences between code that LLC generates and code "
"that LLI generates. This is useful if you are debugging one of them, "
"assuming that the other generates correct output. For the full user manual, "
"run ```perldoc codegen-diff'``."
msgstr ""

#: ../../../GettingStarted.rst:971
msgid "``emacs/``"
msgstr ""

#: ../../../GettingStarted.rst:973
msgid ""
"Emacs and XEmacs syntax highlighting  for LLVM   assembly files and TableGen "
"description files.  See the ``README`` for information on using them."
msgstr ""

#: ../../../GettingStarted.rst:976
msgid "``getsrcs.sh``"
msgstr ""

#: ../../../GettingStarted.rst:978
msgid ""
"Finds and outputs all non-generated source files, useful if one wishes to do "
"a lot of development across directories and does not want to find each file. "
"One way to use it is to run, for example: ``xemacs `utils/getsources.sh``` "
"from the top of the LLVM source tree."
msgstr ""

#: ../../../GettingStarted.rst:984
msgid "``llvmgrep``"
msgstr ""

#: ../../../GettingStarted.rst:986
msgid ""
"Performs an ``egrep -H -n`` on each source file in LLVM and passes to it a "
"regular expression provided on ``llvmgrep``'s command line. This is an "
"efficient way of searching the source base for a particular regular "
"expression."
msgstr ""

#: ../../../GettingStarted.rst:991
msgid "``TableGen/``"
msgstr ""

#: ../../../GettingStarted.rst:993
msgid ""
"Contains the tool used to generate register descriptions, instruction set "
"descriptions, and even assemblers from common TableGen description files."
msgstr ""

#: ../../../GettingStarted.rst:997
msgid "``vim/``"
msgstr ""

#: ../../../GettingStarted.rst:999
msgid ""
"vim syntax-highlighting for LLVM assembly files and TableGen description "
"files. See the    ``README`` for how to use them."
msgstr ""

#: ../../../GettingStarted.rst:1005
msgid "An Example Using the LLVM Tool Chain"
msgstr ""

#: ../../../GettingStarted.rst:1007
msgid "This section gives an example of using LLVM with the Clang front end."
msgstr ""

#: ../../../GettingStarted.rst:1010
msgid "Example with clang"
msgstr ""

#: ../../../GettingStarted.rst:1012
msgid "First, create a simple C file, name it 'hello.c':"
msgstr ""

#: ../../../GettingStarted.rst:1023
msgid "Next, compile the C file into a native executable:"
msgstr ""

#: ../../../GettingStarted.rst:1031
msgid ""
"Clang works just like GCC by default.  The standard ``-S`` and ``-c`` "
"arguments work as usual (producing a native ``.s`` or ``.o`` file, "
"respectively)."
msgstr ""

#: ../../../GettingStarted.rst:1034
msgid "Next, compile the C file into an LLVM bitcode file:"
msgstr ""

#: ../../../GettingStarted.rst:1040
msgid ""
"The ``-emit-llvm`` option can be used with the ``-S`` or ``-c`` options to "
"emit an LLVM ``.ll`` or ``.bc`` file (respectively) for the code.  This "
"allows you to use the `standard LLVM tools <CommandGuide/index.html>`_ on "
"the bitcode file."
msgstr ""

#: ../../../GettingStarted.rst:1044
msgid "Run the program in both forms. To run the program, use:"
msgstr ""

#: ../../../GettingStarted.rst:1050
msgid "and"
msgstr ""

#: ../../../GettingStarted.rst:1056
msgid ""
"The second example shows how to invoke the LLVM JIT, :doc:`lli <CommandGuide/"
"lli>`."
msgstr ""

#: ../../../GettingStarted.rst:1059
msgid "Use the ``llvm-dis`` utility to take a look at the LLVM assembly code:"
msgstr ""

#: ../../../GettingStarted.rst:1065
msgid "Compile the program to native assembly using the LLC code generator:"
msgstr ""

#: ../../../GettingStarted.rst:1071
msgid "Assemble the native assembly language file into a program:"
msgstr ""

#: ../../../GettingStarted.rst:1079
msgid "Execute the native code program:"
msgstr ""

#: ../../../GettingStarted.rst:1085
msgid ""
"Note that using clang to compile directly to native code (i.e. when the ``-"
"emit-llvm`` option is not present) does steps 6/7/8 for you."
msgstr ""

#: ../../../GettingStarted.rst:1089
msgid "Common Problems"
msgstr ""

#: ../../../GettingStarted.rst:1091
msgid ""
"If you are having problems building or using LLVM, or if you have any other "
"general questions about LLVM, please consult the `Frequently Asked Questions "
"<FAQ.html>`_ page."
msgstr ""

#: ../../../GettingStarted.rst:1095
msgid ""
"If you are having problems with limited memory and build time, please try "
"building with ``ninja`` instead of ``make``. Please consider configuring the "
"following options with CMake:"
msgstr ""

#: ../../../GettingStarted.rst:1099
msgid "``-G Ninja``"
msgstr ""

#: ../../../GettingStarted.rst:1101
msgid ""
"Setting this option will allow you to build with ninja instead of make. "
"Building with ninja significantly improves your build time, especially with "
"incremental builds, and improves your memory usage."
msgstr ""

#: ../../../GettingStarted.rst:1105
msgid "``-DLLVM_USE_LINKER``"
msgstr ""

#: ../../../GettingStarted.rst:1107
msgid ""
"Setting this option to ``lld`` will significantly reduce linking time for "
"LLVM executables, particularly on Linux and Windows. If you are building "
"LLVM for the first time and lld is not available to you as a binary package, "
"then you may want to use the gold linker as a faster alternative to GNU ld."
msgstr ""

#: ../../../GettingStarted.rst:1112
msgid "``-DCMAKE_BUILD_TYPE``"
msgstr ""

#: ../../../GettingStarted.rst:1114
msgid ""
"Controls optimization level and debug information of the build.  This "
"setting can affect RAM and disk usage, see :ref:`CMAKE_BUILD_TYPE "
"<cmake_build_type>` for more information."
msgstr ""

#: ../../../GettingStarted.rst:1118
msgid "``-DLLVM_ENABLE_ASSERTIONS``"
msgstr ""

#: ../../../GettingStarted.rst:1120
msgid ""
"This option defaults to ``ON`` for Debug builds and defaults to ``OFF`` for "
"Release builds. As mentioned in the previous option, using the Release build "
"type and enabling assertions may be a good alternative to using the Debug "
"build type."
msgstr ""

#: ../../../GettingStarted.rst:1124
msgid "``-DLLVM_PARALLEL_LINK_JOBS``"
msgstr ""

#: ../../../GettingStarted.rst:1126
msgid ""
"Set this equal to number of jobs you wish to run simultaneously. This is "
"similar to the ``-j`` option used with ``make``, but only for link jobs. "
"This option can only be used with ninja. You may wish to use a very low "
"number of jobs, as this will greatly reduce the amount of memory used during "
"the build process. If you have limited memory, you may wish to set this to "
"``1``."
msgstr ""

#: ../../../GettingStarted.rst:1132
msgid "``-DLLVM_TARGETS_TO_BUILD``"
msgstr ""

#: ../../../GettingStarted.rst:1134
msgid ""
"Set this equal to the target you wish to build. You may wish to set this to "
"only your host architecture. For example ``X86`` if you are using an Intel "
"or AMD machine. You will find a full list of targets within the `llvm-"
"project/llvm/lib/Target <https://github.com/llvm/llvm-project/tree/main/llvm/"
"lib/Target>`_ directory."
msgstr ""

#: ../../../GettingStarted.rst:1140
msgid "``-DLLVM_OPTIMIZED_TABLEGEN``"
msgstr ""

#: ../../../GettingStarted.rst:1142
msgid ""
"Set this to ``ON`` to generate a fully optimized TableGen compiler during "
"your build, even if that build is a ``Debug`` build. This will significantly "
"improve your build time. You should not enable this if your intention is to "
"debug the TableGen compiler."
msgstr ""

#: ../../../GettingStarted.rst:1147
msgid "``-DLLVM_ENABLE_PROJECTS``"
msgstr ""

#: ../../../GettingStarted.rst:1149
msgid ""
"Set this equal to the projects you wish to compile (e.g. ``clang``, ``lld``, "
"etc.) If compiling more than one project, separate the items with a "
"semicolon. Should you run into issues with the semicolon, try surrounding it "
"with single quotes."
msgstr ""

#: ../../../GettingStarted.rst:1153
msgid "``-DLLVM_ENABLE_RUNTIMES``"
msgstr ""

#: ../../../GettingStarted.rst:1155
msgid ""
"Set this equal to the runtimes you wish to compile (e.g. ``libcxx``, "
"``libcxxabi``, etc.) If compiling more than one runtime, separate the items "
"with a semicolon. Should you run into issues with the semicolon, try "
"surrounding it with single quotes."
msgstr ""

#: ../../../GettingStarted.rst:1159
msgid "``-DCLANG_ENABLE_STATIC_ANALYZER``"
msgstr ""

#: ../../../GettingStarted.rst:1161
msgid ""
"Set this option to ``OFF`` if you do not require the clang static analyzer. "
"This should improve your build time slightly."
msgstr ""

#: ../../../GettingStarted.rst:1164
msgid "``-DLLVM_USE_SPLIT_DWARF``"
msgstr ""

#: ../../../GettingStarted.rst:1166
msgid ""
"Consider setting this to ``ON`` if you require a debug build, as this will "
"ease memory pressure on the linker. This will make linking much faster, as "
"the binaries will not contain any of the debug information. Instead, the "
"debug information is in a separate DWARF object file (with the extension ``."
"dwo``). This only applies to host platforms using ELF, such as Linux."
msgstr ""

#: ../../../GettingStarted.rst:1172
msgid "``-DBUILD_SHARED_LIBS``"
msgstr ""

#: ../../../GettingStarted.rst:1174
msgid ""
"Setting this to ``ON`` will build shared libraries instead of static "
"libraries. This will ease memory pressure on the linker. However, this "
"should only be used when developing llvm. See :ref:`BUILD_SHARED_LIBS <LLVM-"
"related variables BUILD_SHARED_LIBS>` for more information."
msgstr ""

#: ../../../GettingStarted.rst:1183
msgid "Links"
msgstr ""

#: ../../../GettingStarted.rst:1185
msgid ""
"This document is just an **introduction** on how to use LLVM to do some "
"simple things... there are many more interesting and complicated things that "
"you can do that aren't documented here (but we'll gladly accept a patch if "
"you want to write something up!).  For more information about LLVM, check "
"out:"
msgstr ""

#: ../../../GettingStarted.rst:1190
msgid "`LLVM Homepage <https://llvm.org/>`_"
msgstr ""

#: ../../../GettingStarted.rst:1191
msgid "`LLVM Doxygen Tree <https://llvm.org/doxygen/>`_"
msgstr ""

#: ../../../GettingStarted.rst:1192
msgid ""
"`Starting a Project that Uses LLVM <https://llvm.org/docs/Projects.html>`_"
msgstr ""
