# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr_FR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../BranchWeightMetadata.rst:3
msgid "LLVM Branch Weight Metadata"
msgstr ""

#: ../../../BranchWeightMetadata.rst:9
msgid "Introduction"
msgstr ""

#: ../../../BranchWeightMetadata.rst:11
msgid ""
"Branch Weight Metadata represents branch weights as its likeliness to be "
"taken (see :doc:`BlockFrequencyTerminology`). Metadata is assigned to the "
"``TerminatorInst`` as a ``MDNode`` of the ``MD_prof`` kind. The first "
"operator is always a ``MDString`` node with the string \"branch_weights\".  "
"Number of operators depends on the terminator type."
msgstr ""

#: ../../../BranchWeightMetadata.rst:17
msgid ""
"Branch weights might be fetch from the profiling file, or generated based on "
"`__builtin_expect`_ instruction."
msgstr ""

#: ../../../BranchWeightMetadata.rst:20
msgid ""
"All weights are represented as an unsigned 32-bit values, where higher value "
"indicates greater chance to be taken."
msgstr ""

#: ../../../BranchWeightMetadata.rst:24
msgid "Supported Instructions"
msgstr ""

#: ../../../BranchWeightMetadata.rst:27
msgid "``BranchInst``"
msgstr ""

#: ../../../BranchWeightMetadata.rst:29
msgid ""
"Metadata is only assigned to the conditional branches. There are two extra "
"operands for the true and the false branch."
msgstr ""

#: ../../../BranchWeightMetadata.rst:41
msgid "``SwitchInst``"
msgstr ""

#: ../../../BranchWeightMetadata.rst:43
msgid ""
"Branch weights are assigned to every case (including the ``default`` case "
"which is always case #0)."
msgstr ""

#: ../../../BranchWeightMetadata.rst:55
msgid "``IndirectBrInst``"
msgstr ""

#: ../../../BranchWeightMetadata.rst:57
msgid "Branch weights are assigned to every destination."
msgstr ""

#: ../../../BranchWeightMetadata.rst:68
msgid "Other"
msgstr ""

#: ../../../BranchWeightMetadata.rst:70
msgid ""
"Other terminator instructions are not allowed to contain Branch Weight "
"Metadata."
msgstr ""

#: ../../../BranchWeightMetadata.rst:75
msgid "Built-in ``expect`` Instructions"
msgstr ""

#: ../../../BranchWeightMetadata.rst:77
msgid ""
"``__builtin_expect(long exp, long c)`` instruction provides branch "
"prediction information. The return value is the value of ``exp``."
msgstr ""

#: ../../../BranchWeightMetadata.rst:80
msgid ""
"It is especially useful in conditional statements. Currently Clang supports "
"two conditional statements:"
msgstr ""

#: ../../../BranchWeightMetadata.rst:84
msgid "``if`` statement"
msgstr ""

#: ../../../BranchWeightMetadata.rst:86
msgid ""
"The ``exp`` parameter is the condition. The ``c`` parameter is the expected "
"comparison value. If it is equal to 1 (true), the condition is likely to be "
"true, in other case condition is likely to be false. For example:"
msgstr ""

#: ../../../BranchWeightMetadata.rst:97
msgid "``switch`` statement"
msgstr ""

#: ../../../BranchWeightMetadata.rst:99
msgid ""
"The ``exp`` parameter is the value. The ``c`` parameter is the expected "
"value. If the expected value doesn't show on the cases list, the ``default`` "
"case is assumed to be likely taken."
msgstr ""

#: ../../../BranchWeightMetadata.rst:113
msgid "CFG Modifications"
msgstr ""

#: ../../../BranchWeightMetadata.rst:115
msgid ""
"Branch Weight Metatada is not proof against CFG changes. If terminator "
"operands' are changed some action should be taken. In other case some "
"misoptimizations may occur due to incorrect branch prediction information."
msgstr ""

#: ../../../BranchWeightMetadata.rst:120
msgid "Function Entry Counts"
msgstr ""

#: ../../../BranchWeightMetadata.rst:122
msgid ""
"To allow comparing different functions during inter-procedural analysis and "
"optimization, ``MD_prof`` nodes can also be assigned to a function "
"definition. The first operand is a string indicating the name of the "
"associated counter."
msgstr ""

#: ../../../BranchWeightMetadata.rst:126
msgid ""
"Currently, one counter is supported: \"function_entry_count\". This is a 64-"
"bit counter that indicates the number of times that this function was "
"invoked (in the case of instrumentation-based profiles). In the case of "
"sampling-based profiles, this counter is an approximation of how many times "
"the function was invoked."
msgstr ""

#: ../../../BranchWeightMetadata.rst:132
msgid ""
"For example, in the code below, the instrumentation for function foo() "
"indicates that it was called 2,590 times at runtime."
msgstr ""
