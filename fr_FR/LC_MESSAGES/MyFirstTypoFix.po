# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 16\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr_FR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../MyFirstTypoFix.rst:3
msgid "MyFirstTypoFix"
msgstr ""

#: ../../../MyFirstTypoFix.rst:9
msgid "Introduction"
msgstr ""

#: ../../../MyFirstTypoFix.rst:11
msgid ""
"This tutorial will guide you through the process of making a change to LLVM, "
"and contributing it back to the LLVM project. We'll be making a change to "
"Clang, but the steps for other parts of LLVM are the same. Even though the "
"change we'll be making is simple, we're going to cover steps like building "
"LLVM, running the tests, and code review. This is good practice, and you'll "
"be prepared for making larger changes."
msgstr ""

#: ../../../MyFirstTypoFix.rst:18
msgid "We'll assume you:"
msgstr ""

#: ../../../MyFirstTypoFix.rst:20
msgid "know how to use an editor,"
msgstr ""

#: ../../../MyFirstTypoFix.rst:22
msgid "have basic C++ knowledge,"
msgstr ""

#: ../../../MyFirstTypoFix.rst:24
msgid "know how to install software on your system,"
msgstr ""

#: ../../../MyFirstTypoFix.rst:26
msgid "are comfortable with the command line,"
msgstr ""

#: ../../../MyFirstTypoFix.rst:28
msgid "have basic knowledge of git."
msgstr ""

#: ../../../MyFirstTypoFix.rst:32
msgid "The change we're making"
msgstr ""

#: ../../../MyFirstTypoFix.rst:34
msgid "Clang has a warning for infinite recursion:"
msgstr ""

#: ../../../MyFirstTypoFix.rst:43
msgid ""
"This is clear enough, but not exactly catchy. Let's improve the wording a "
"little:"
msgstr ""

#: ../../../MyFirstTypoFix.rst:53
msgid "Dependencies"
msgstr ""

#: ../../../MyFirstTypoFix.rst:55
msgid "We're going to need some tools:"
msgstr ""

#: ../../../MyFirstTypoFix.rst:57
msgid "git: to check out the LLVM source code,"
msgstr ""

#: ../../../MyFirstTypoFix.rst:59
msgid ""
"a C++ compiler: to compile LLVM source code. You'll want `a recent version "
"<https://llvm.org/docs/GettingStarted.html#host-c-toolchain-both-compiler-"
"and-standard-library>`__ of Clang, GCC, or Visual Studio."
msgstr ""

#: ../../../MyFirstTypoFix.rst:63
msgid "CMake: used to configure how LLVM should be built on your system,"
msgstr ""

#: ../../../MyFirstTypoFix.rst:65
msgid "ninja: runs the C++ compiler to (re)build specific parts of LLVM,"
msgstr ""

#: ../../../MyFirstTypoFix.rst:67
msgid "python: to run the LLVM tests,"
msgstr ""

#: ../../../MyFirstTypoFix.rst:69
msgid "arcanist: for uploading changes for review,"
msgstr ""

#: ../../../MyFirstTypoFix.rst:71
msgid "As an example, on Ubuntu:"
msgstr ""

#: ../../../MyFirstTypoFix.rst:79
msgid "Building LLVM"
msgstr ""

#: ../../../MyFirstTypoFix.rst:83
msgid "Checkout"
msgstr ""

#: ../../../MyFirstTypoFix.rst:85
msgid ""
"The source code is stored `on Github <https://github.com/llvm/llvm-"
"project>`__ in one large repository (\"the monorepo\")."
msgstr ""

#: ../../../MyFirstTypoFix.rst:89
msgid "It may take a while to download!"
msgstr ""

#: ../../../MyFirstTypoFix.rst:95
msgid ""
"This will create a directory \"llvm-project\" with all of the source code."
"(Checking out anonymously is OK - pushing commits uses a different "
"mechanism, as we'll see later)"
msgstr ""

#: ../../../MyFirstTypoFix.rst:100
msgid "Configure your workspace"
msgstr ""

#: ../../../MyFirstTypoFix.rst:102
msgid ""
"Before we can build the code, we must configure exactly how to build it by "
"running CMake. CMake combines information from three sources:"
msgstr ""

#: ../../../MyFirstTypoFix.rst:105
msgid "explicit choices you make (is this a debug build?)"
msgstr ""

#: ../../../MyFirstTypoFix.rst:107
msgid "settings detected from your system (where are libraries installed?)"
msgstr ""

#: ../../../MyFirstTypoFix.rst:109
msgid "project structure (which files are part of 'clang'?)"
msgstr ""

#: ../../../MyFirstTypoFix.rst:111
msgid ""
"First, create a directory to build in. Usually, this is llvm-project/build."
msgstr ""

#: ../../../MyFirstTypoFix.rst:119
msgid "Now, run CMake:"
msgstr ""

#: ../../../MyFirstTypoFix.rst:125
msgid ""
"If all goes well, you'll see a lot of \"performing test\" lines, and finally:"
msgstr ""

#: ../../../MyFirstTypoFix.rst:134
msgid "And you should see a build.ninja file."
msgstr ""

#: ../../../MyFirstTypoFix.rst:136
msgid "Let's break down that last command a little:"
msgstr ""

#: ../../../MyFirstTypoFix.rst:138
msgid ""
"**-G Ninja**: we're going to use ninja to build; please create build.ninja"
msgstr ""

#: ../../../MyFirstTypoFix.rst:141
msgid ""
"**../llvm**: this is the path to the source of the \"main\" LLVM project"
msgstr ""

#: ../../../MyFirstTypoFix.rst:144
msgid ""
"The two **-D** flags set CMake variables, which override CMake/project "
"defaults:"
msgstr ""

#: ../../../MyFirstTypoFix.rst:147
msgid ""
"**CMAKE\\ BUILD\\ TYPE=Release**: build in optimized mode, which is "
"(surprisingly) the fastest option."
msgstr ""

#: ../../../MyFirstTypoFix.rst:150
msgid ""
"If you want to run under a debugger, you should use the default Debug (which "
"is totally unoptimized, and will lead to >10x slower test runs) or "
"RelWithDebInfo which is a halfway point. **CMAKE\\ BUILD\\ TYPE** affects "
"code generation only, assertions are on by default regardless! **LLVM\\ "
"ENABLE\\ ASSERTIONS=Off** disables them."
msgstr ""

#: ../../../MyFirstTypoFix.rst:157
msgid ""
"**LLVM\\ ENABLE\\ PROJECTS=clang** : this lists the LLVM subprojects you are "
"interested in building, in addition to LLVM itself. Multiple projects can be "
"listed, separated by semicolons, such as \"clang; lldb\".In this example, "
"we'll be making a change to Clang, so we should build it."
msgstr ""

#: ../../../MyFirstTypoFix.rst:163
msgid ""
"Finally, create a symlink (or a copy) of llvm-project/build/compile-commands."
"json into llvm-project/:"
msgstr ""

#: ../../../MyFirstTypoFix.rst:170
msgid ""
"(This isn't strictly necessary for building and testing, but allows tools "
"like clang-tidy, clang-query, and clangd to work in your source tree)."
msgstr ""

#: ../../../MyFirstTypoFix.rst:176
msgid "Build and test"
msgstr ""

#: ../../../MyFirstTypoFix.rst:178
msgid ""
"Finally, we can build the code! It's important to do this first, to ensure "
"we're in a good state before making changes. But what to build? In ninja, "
"you specify a **target**. If we just want to build the clang binary, our "
"target name is \"clang\" and we run:"
msgstr ""

#: ../../../MyFirstTypoFix.rst:187
msgid ""
"The first time we build will be very slow - Clang + LLVM is a lot of code. "
"But incremental builds are fast: ninja will only rebuild the parts that have "
"changed. When it finally finishes you should have a working clang binary. "
"Try running:"
msgstr ""

#: ../../../MyFirstTypoFix.rst:196
msgid "There's also a target for building and running all the clang tests:"
msgstr ""

#: ../../../MyFirstTypoFix.rst:202
msgid ""
"This is a common pattern in LLVM: check-llvm is all the checks for core, "
"other projects have targets like check-lldb."
msgstr ""

#: ../../../MyFirstTypoFix.rst:207
msgid "Making changes"
msgstr ""

#: ../../../MyFirstTypoFix.rst:211
msgid "Edit"
msgstr ""

#: ../../../MyFirstTypoFix.rst:213
msgid "We need to find the file containing the error message."
msgstr ""

#: ../../../MyFirstTypoFix.rst:220
msgid ""
"The string that appears in DiagnosticSemaKinds.td is the one that is printed "
"by Clang. \\*.td files define tables - in this case it's a list of warnings "
"and errors clang can emit and their messages. Let's update the message in "
"your favorite editor:"
msgstr ""

#: ../../../MyFirstTypoFix.rst:229
msgid ""
"Find the message (it should be under warn\\ *infinite*\\ "
"recursive_function)Change the message to \"in order to understand recursion, "
"you must first understand recursion\"."
msgstr ""

#: ../../../MyFirstTypoFix.rst:235
msgid "Test again"
msgstr ""

#: ../../../MyFirstTypoFix.rst:237
msgid ""
"To verify our change, we can build clang and manually check that it works."
msgstr ""

#: ../../../MyFirstTypoFix.rst:248
msgid "We should also run the tests to make sure we didn't break something."
msgstr ""

#: ../../../MyFirstTypoFix.rst:254
msgid ""
"Notice that it is much faster to build this time, but the tests take just as "
"long to run. Ninja doesn't know which tests might be affected, so it runs "
"them all."
msgstr ""

#: ../../../MyFirstTypoFix.rst:266
msgid ""
"Well, that makes senseâ€¦ and the test output suggests it's looking for the "
"old string \"call itself\" and finding our new message instead. Note that "
"more tests may fail in a similar way as new tests are added time to time."
msgstr ""

#: ../../../MyFirstTypoFix.rst:271
msgid "Let's fix it by updating the expectation in the test."
msgstr ""

#: ../../../MyFirstTypoFix.rst:277
msgid ""
"Everywhere we see `// expected-warning{{call itself}}` (or something similar "
"from the original warning text), let's replace it with `// expected-"
"warning{{to understand recursion}}`."
msgstr ""

#: ../../../MyFirstTypoFix.rst:281
msgid ""
"Now we could run **all** the tests again, but this is a slow way to iterate "
"on a change! Instead, let's find a way to re-run just the specific test. "
"There are two main types of tests in LLVM:"
msgstr ""

#: ../../../MyFirstTypoFix.rst:285
msgid "**lit tests** (e.g. SemaCXX/warn-infinite-recursion.cpp)."
msgstr ""

#: ../../../MyFirstTypoFix.rst:287
msgid ""
"These are fancy shell scripts that run command-line tools and verify the "
"output. They live in files like clang/**test**/FixIt/dereference-addressof."
"c. Re-run like this:"
msgstr ""

#: ../../../MyFirstTypoFix.rst:295
msgid "**unit tests** (e.g. ToolingTests/ReplacementTest.CanDeleteAllText)"
msgstr ""

#: ../../../MyFirstTypoFix.rst:297
msgid ""
"These are C++ programs that call LLVM functions and verify the results. They "
"live in suites like ToolingTests. Re-run like this:"
msgstr ""

#: ../../../MyFirstTypoFix.rst:307
msgid "Commit locally"
msgstr ""

#: ../../../MyFirstTypoFix.rst:309
msgid ""
"We'll save the change to a local git branch. This lets us work on other "
"things while the change is being reviewed. Changes should have a "
"description, to explain to reviewers and future readers of the code why the "
"change was made."
msgstr ""

#: ../../../MyFirstTypoFix.rst:319
msgid ""
"Now we're ready to send this change out into the world! By the way, There is "
"a unwritten convention of using tag for your commit. Tags usually represent "
"modules that you intend to modify. If you don't know the tags for your "
"modules, you can look at the commit history : https://github.com/llvm/llvm-"
"project/commits/main."
msgstr ""

#: ../../../MyFirstTypoFix.rst:327
msgid "Code review"
msgstr ""

#: ../../../MyFirstTypoFix.rst:331
msgid "Finding a reviewer"
msgstr ""

#: ../../../MyFirstTypoFix.rst:333
msgid ""
"Changes can be reviewed by anyone in the LLVM community who has commit "
"access.For larger and more complicated changes, it's important that the "
"reviewer has experience with the area of LLVM and knows the design goals "
"well. The author of a change will often assign a specific reviewer (git "
"blame and git log can be useful to find one)."
msgstr ""

#: ../../../MyFirstTypoFix.rst:339
msgid ""
"As our change is fairly simple, we'll add the cfe-commits mailing list as a "
"subscriber; anyone who works on clang can likely pick up the review. (For "
"changes outside clang, llvm-commits is the usual list. See `http://lists."
"llvm.org/ <http://lists.llvm.org/mailman/listinfo>`__ for all the \\*-"
"commits mailing lists)."
msgstr ""

#: ../../../MyFirstTypoFix.rst:347
msgid "Uploading a change for review"
msgstr ""

#: ../../../MyFirstTypoFix.rst:349
msgid ""
"LLVM code reviews happen at https://reviews.llvm.org. The web interface is "
"called Phabricator, and the code review part is Differential. You should "
"create a user account there for reviews (click \"Log In\" and then "
"\"Register new account\")."
msgstr ""

#: ../../../MyFirstTypoFix.rst:354
msgid "Now you can upload your change for review:"
msgstr ""

#: ../../../MyFirstTypoFix.rst:360
msgid ""
"This creates a review for your change, comparing your current commit with "
"the previous commit. You will be prompted to fill in the review details. "
"Your commit message is already there, so just add cfe-commits under the "
"\"subscribers\" section. It should print a code review URL: https://reviews."
"llvm.org/D58291 You can always find your active reviews on Phabricator under "
"\"My activity\"."
msgstr ""

#: ../../../MyFirstTypoFix.rst:369
msgid "Review process"
msgstr ""

#: ../../../MyFirstTypoFix.rst:371
msgid ""
"When you upload a change for review, an email is sent to you, the cfe-"
"commits list, and anyone else subscribed to these kinds of changes. Within a "
"few days, someone should start the review. They may add themselves as a "
"reviewer, or simply start leaving comments. You'll get another email any "
"time the review is updated. The details are in the `https://llvm.org/docs/"
"CodeReview/ <https://llvm.org/docs/CodeReview.html>`__."
msgstr ""

#: ../../../MyFirstTypoFix.rst:380
msgid "Comments"
msgstr ""

#: ../../../MyFirstTypoFix.rst:382
msgid ""
"The reviewer can leave comments on the change, and you can reply. Some "
"comments are attached to specific lines, and appear interleaved with the "
"code. You can either reply to these, or address them and mark them as "
"\"done\". Note that in-line replies are **not** sent straight away! They "
"become \"draft\" comments and you must click \"Submit\" at the bottom of the "
"page."
msgstr ""

#: ../../../MyFirstTypoFix.rst:391
msgid "Updating your change"
msgstr ""

#: ../../../MyFirstTypoFix.rst:393
msgid "If you make changes in response to a reviewer's comments, simply run"
msgstr ""

#: ../../../MyFirstTypoFix.rst:399
msgid ""
"again to update the change and notify the reviewer. Typically this is a good "
"time to send any draft comments as well."
msgstr ""

#: ../../../MyFirstTypoFix.rst:404
msgid "Accepting a revision"
msgstr ""

#: ../../../MyFirstTypoFix.rst:406
msgid ""
"When the reviewer is happy with the change, they will **Accept** the "
"revision. They may leave some more minor comments that you should address, "
"but at this point the review is complete. It's time to get it committed!"
msgstr ""

#: ../../../MyFirstTypoFix.rst:413
msgid "Commit by proxy"
msgstr ""

#: ../../../MyFirstTypoFix.rst:415
msgid ""
"As this is your first change, you won't have access to commit it yourself "
"yet. The reviewer **doesn't know this**, so you need to tell them! Leave a "
"message on the review like:"
msgstr ""

#: ../../../MyFirstTypoFix.rst:419
msgid ""
"Thanks @somellvmdev. I don't have commit access, can you land this patch for "
"me? Please use \"My Name my@email\" to commit the change."
msgstr ""

#: ../../../MyFirstTypoFix.rst:422
msgid "The review will be updated when the change is committed."
msgstr ""

#: ../../../MyFirstTypoFix.rst:426
msgid "Review expectations"
msgstr ""

#: ../../../MyFirstTypoFix.rst:428
msgid ""
"In order to make LLVM a long-term sustainable effort, code needs to be "
"maintainable and well tested. Code reviews help to achieve that goal. "
"Especially for new contributors, that often means many rounds of reviews and "
"push-back on design decisions that do not fit well within the overall "
"architecture of the project."
msgstr ""

#: ../../../MyFirstTypoFix.rst:434
msgid "For your first patches, this means:"
msgstr ""

#: ../../../MyFirstTypoFix.rst:436
msgid ""
"be kind, and expect reviewers to be kind in return - LLVM has a `Code of "
"Conduct <https://llvm.org/docs/CodeOfConduct.html>`__;"
msgstr ""

#: ../../../MyFirstTypoFix.rst:439
msgid ""
"be patient - understanding how a new feature fits into the architecture of "
"the project is often a time consuming effort, and people have to juggle this "
"with other responsibilities in their lives; **ping the review once a week** "
"when there is no response;"
msgstr ""

#: ../../../MyFirstTypoFix.rst:444
msgid ""
"if you can't agree, generally the best way is to do what the reviewer asks; "
"we optimize for readability of the code, which the reviewer is in a better "
"position to judge; if this feels like it's not the right option, you can "
"contact the cfe-dev mailing list to get more feedback on the direction;"
msgstr ""

#: ../../../MyFirstTypoFix.rst:452
msgid "Commit access"
msgstr ""

#: ../../../MyFirstTypoFix.rst:454
msgid ""
"Once you've contributed a handful of patches to LLVM, start to think about "
"getting commit access yourself. It's probably a good idea if:"
msgstr ""

#: ../../../MyFirstTypoFix.rst:457
msgid "you've landed 3-5 patches of larger scope than \"fix a typo\""
msgstr ""

#: ../../../MyFirstTypoFix.rst:459
msgid "you'd be willing to review changes that are closely related to yours"
msgstr ""

#: ../../../MyFirstTypoFix.rst:461
msgid "you'd like to keep contributing to LLVM."
msgstr ""

#: ../../../MyFirstTypoFix.rst:465
msgid "Getting commit access"
msgstr ""

#: ../../../MyFirstTypoFix.rst:467
msgid ""
"LLVM uses Git for committing changes. The details are in the `developer "
"policy document <https://llvm.org/docs/DeveloperPolicy.html#obtaining-commit-"
"access>`__."
msgstr ""

#: ../../../MyFirstTypoFix.rst:473
msgid "With great power"
msgstr ""

#: ../../../MyFirstTypoFix.rst:475
msgid ""
"Actually, this would be a great time to read the rest of the `developer "
"policy <https://llvm.org/docs/DeveloperPolicy.html>`__, too. At minimum, you "
"need to be subscribed to the relevant commits list before landing changes (e."
"g. llvm-commits@lists.llvm.org), as discussion often happens there if a new "
"patch causes problems."
msgstr ""

#: ../../../MyFirstTypoFix.rst:483
msgid "Commit"
msgstr ""

#: ../../../MyFirstTypoFix.rst:485
msgid ""
"Let's say you have a change on a local git branch, reviewed and ready to "
"commit. Things to do first:"
msgstr ""

#: ../../../MyFirstTypoFix.rst:488
msgid ""
"if you used multiple fine-grained commits locally, squash them into a single "
"commit. LLVM prefers commits to match the code that was reviewed. (If you "
"created one commit and then used \"arc diff\", you're fine)"
msgstr ""

#: ../../../MyFirstTypoFix.rst:493
msgid ""
"rebase your patch against the latest LLVM code. LLVM uses a linear history, "
"so everything should be based on an up-to-date origin/main."
msgstr ""

#: ../../../MyFirstTypoFix.rst:500
msgid "ensure the patch looks correct."
msgstr ""

#: ../../../MyFirstTypoFix.rst:506
msgid "run the tests one last time, for good luck"
msgstr ""

#: ../../../MyFirstTypoFix.rst:508
msgid ""
"At this point git show should show a single commit on top of origin/main."
msgstr ""

#: ../../../MyFirstTypoFix.rst:511
msgid "Now you can push your commit with"
msgstr ""

#: ../../../MyFirstTypoFix.rst:517
msgid ""
"You should see your change `on GitHub <https://github.com/llvm/llvm-project/"
"commits/main>`__ within minutes."
msgstr ""

#: ../../../MyFirstTypoFix.rst:523
msgid "Post-commit errors"
msgstr ""

#: ../../../MyFirstTypoFix.rst:525
msgid ""
"Once your change is submitted it will be picked up by automated build bots "
"that will build and test your patch in a variety of configurations."
msgstr ""

#: ../../../MyFirstTypoFix.rst:528
msgid ""
"You can see all configurations and their current state in a waterfall view "
"at http://lab.llvm.org/buildbot/#/waterfall. The waterfall view is good to "
"get a general overview over the tested configurations and to see which "
"configuration have been broken for a while."
msgstr ""

#: ../../../MyFirstTypoFix.rst:533
msgid ""
"The console view at http://lab.llvm.org/buildbot/#/console helps to get a "
"better understanding of the build results of a specific patch. If you want "
"to follow along how your change is affecting the build bots, **this should "
"be the first place to look at** - the colored bubbles correspond to projects "
"in the waterfall."
msgstr ""

#: ../../../MyFirstTypoFix.rst:539
msgid ""
"If you see a broken build, do not despair - some build bots are continuously "
"broken; if your change broke the build, you will see a red bubble in the "
"console view, while an already broken build will show an orange bubble. Of "
"course, even when the build was already broken, a new change might introduce "
"a hidden new failure."
msgstr ""

#: ../../../MyFirstTypoFix.rst:546
msgid ""
"When you want to see more details how a specific build is broken, click the "
"red bubble."
msgstr ""

#: ../../../MyFirstTypoFix.rst:549
msgid ""
"If post-commit error logs confuse you, do not worry too much - everybody on "
"the project is aware that this is a bit unwieldy, so expect people to jump "
"in and help you understand what's going on!"
msgstr ""

#: ../../../MyFirstTypoFix.rst:551
msgid "buildbots, overview of bots, getting error logs."
msgstr ""

#: ../../../MyFirstTypoFix.rst:555
msgid "Reverts"
msgstr ""

#: ../../../MyFirstTypoFix.rst:557
msgid "if in doubt, revert and re-land."
msgstr ""

#: ../../../MyFirstTypoFix.rst:561
msgid "Conclusion"
msgstr ""

#: ../../../MyFirstTypoFix.rst:563
msgid "llvm is a land of contrasts."
msgstr ""
