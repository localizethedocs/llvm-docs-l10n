# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr_FR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../LangRef.rst:3
msgid "LLVM Language Reference Manual"
msgstr ""

#: ../../../LangRef.rst:10
msgid "Abstract"
msgstr ""

#: ../../../LangRef.rst:12
msgid ""
"This document is a reference manual for the LLVM assembly language. LLVM is "
"a Static Single Assignment (SSA) based representation that provides type "
"safety, low-level operations, flexibility, and the capability of "
"representing 'all' high-level languages cleanly. It is the common code "
"representation used throughout all phases of the LLVM compilation strategy."
msgstr ""

#: ../../../LangRef.rst:20
msgid "Introduction"
msgstr ""

#: ../../../LangRef.rst:22
msgid ""
"The LLVM code representation is designed to be used in three different "
"forms: as an in-memory compiler IR, as an on-disk bitcode representation "
"(suitable for fast loading by a Just-In-Time compiler), and as a human "
"readable assembly language representation. This allows LLVM to provide a "
"powerful intermediate representation for efficient compiler transformations "
"and analysis, while providing a natural means to debug and visualize the "
"transformations. The three different forms of LLVM are all equivalent. This "
"document describes the human readable representation and notation."
msgstr ""

#: ../../../LangRef.rst:32
msgid ""
"The LLVM representation aims to be light-weight and low-level while being "
"expressive, typed, and extensible at the same time. It aims to be a "
"\"universal IR\" of sorts, by being at a low enough level that high-level "
"ideas may be cleanly mapped to it (similar to how microprocessors are "
"\"universal IR's\", allowing many source languages to be mapped to them). By "
"providing type information, LLVM can be used as the target of optimizations: "
"for example, through pointer analysis, it can be proven that a C automatic "
"variable is never accessed outside of the current function, allowing it to "
"be promoted to a simple SSA value instead of a memory location."
msgstr ""

#: ../../../LangRef.rst:46
msgid "Well-Formedness"
msgstr ""

#: ../../../LangRef.rst:48
msgid ""
"It is important to note that this document describes 'well formed' LLVM "
"assembly language. There is a difference between what the parser accepts and "
"what is considered 'well formed'. For example, the following instruction is "
"syntactically okay, but not well formed:"
msgstr ""

#: ../../../LangRef.rst:57
msgid ""
"because the definition of ``%x`` does not dominate all of its uses. The LLVM "
"infrastructure provides a verification pass that may be used to verify that "
"an LLVM module is well formed. This pass is automatically run by the parser "
"after parsing input assembly and by the optimizer before it outputs bitcode. "
"The violations pointed out by the verifier pass indicate bugs in "
"transformation passes or input to the parser."
msgstr ""

#: ../../../LangRef.rst:67
msgid "Identifiers"
msgstr ""

#: ../../../LangRef.rst:69
msgid ""
"LLVM identifiers come in two basic types: global and local. Global "
"identifiers (functions, global variables) begin with the ``'@'`` character. "
"Local identifiers (register names, types) begin with the ``'%'`` character. "
"Additionally, there are three different formats for identifiers, for "
"different purposes:"
msgstr ""

#: ../../../LangRef.rst:75
msgid ""
"Named values are represented as a string of characters with their prefix. "
"For example, ``%foo``, ``@DivisionByZero``, ``%a.really.long.identifier``. "
"The actual regular expression used is '``[%@][-a-zA-Z$._][-a-zA-Z$."
"_0-9]*``'. Identifiers that require other characters in their names can be "
"surrounded with quotes. Special characters may be escaped using ``\"\\xx\"`` "
"where ``xx`` is the ASCII code for the character in hexadecimal. In this "
"way, any character can be used in a name value, even quotes themselves. The "
"``\"\\01\"`` prefix can be used on global values to suppress mangling."
msgstr ""

#: ../../../LangRef.rst:84
msgid ""
"Unnamed values are represented as an unsigned numeric value with their "
"prefix. For example, ``%12``, ``@2``, ``%44``."
msgstr ""

#: ../../../LangRef.rst:86
msgid "Constants, which are described in the section Constants_ below."
msgstr ""

#: ../../../LangRef.rst:88
msgid ""
"LLVM requires that values start with a prefix for two reasons: Compilers "
"don't need to worry about name clashes with reserved words, and the set of "
"reserved words may be expanded in the future without penalty. Additionally, "
"unnamed identifiers allow a compiler to quickly come up with a temporary "
"variable without having to avoid symbol table conflicts."
msgstr ""

#: ../../../LangRef.rst:95
msgid ""
"Reserved words in LLVM are very similar to reserved words in other "
"languages. There are keywords for different opcodes ('``add``', "
"'``bitcast``', '``ret``', etc...), for primitive type names ('``void``', "
"'``i32``', etc...), and others. These reserved words cannot conflict with "
"variable names, because none of them start with a prefix character (``'%'`` "
"or ``'@'``)."
msgstr ""

#: ../../../LangRef.rst:102
msgid ""
"Here is an example of LLVM code to multiply the integer variable '``%X``' by "
"8:"
msgstr ""

#: ../../../LangRef.rst:105
msgid "The easy way:"
msgstr ""

#: ../../../LangRef.rst:111
msgid "After strength reduction:"
msgstr ""

#: ../../../LangRef.rst:117
msgid "And the hard way:"
msgstr ""

#: ../../../LangRef.rst:125
msgid ""
"This last way of multiplying ``%X`` by 8 illustrates several important "
"lexical features of LLVM:"
msgstr ""

#: ../../../LangRef.rst:128
msgid "Comments are delimited with a '``;``' and go until the end of line."
msgstr ""

#: ../../../LangRef.rst:129
msgid ""
"Unnamed temporaries are created when the result of a computation is not "
"assigned to a named value."
msgstr ""

#: ../../../LangRef.rst:131
msgid ""
"Unnamed temporaries are numbered sequentially (using a per-function "
"incrementing counter, starting with 0). Note that basic blocks and unnamed "
"function parameters are included in this numbering. For example, if the "
"entry basic block is not given a label name and all function parameters are "
"named, then it will get number 0."
msgstr ""

#: ../../../LangRef.rst:137
msgid ""
"It also shows a convention that we follow in this document. When "
"demonstrating instructions, we will follow an instruction with a comment "
"that defines the type and name of value produced."
msgstr ""

#: ../../../LangRef.rst:142
msgid "High Level Structure"
msgstr ""

#: ../../../LangRef.rst:145
msgid "Module Structure"
msgstr ""

#: ../../../LangRef.rst:147
msgid ""
"LLVM programs are composed of ``Module``'s, each of which is a translation "
"unit of the input programs. Each module consists of functions, global "
"variables, and symbol table entries. Modules may be combined together with "
"the LLVM linker, which merges function (and global variable) definitions, "
"resolves forward declarations, and merges symbol table entries. Here is an "
"example of the \"hello world\" module:"
msgstr ""

#: ../../../LangRef.rst:176
msgid ""
"This example is made up of a :ref:`global variable <globalvars>` named \"``."
"str``\", an external declaration of the \"``puts``\" function, a :ref:"
"`function definition <functionstructure>` for \"``main``\" and :ref:`named "
"metadata <namedmetadatastructure>` \"``foo``\"."
msgstr ""

#: ../../../LangRef.rst:181
msgid ""
"In general, a module is made up of a list of global values (where both "
"functions and global variables are global values). Global values are "
"represented by a pointer to a memory location (in this case, a pointer to an "
"array of char, and a pointer to a function), and have one of the following :"
"ref:`linkage types <linkage>`."
msgstr ""

#: ../../../LangRef.rst:190
msgid "Linkage Types"
msgstr ""

#: ../../../LangRef.rst:192
msgid ""
"All Global Variables and Functions have one of the following types of "
"linkage:"
msgstr ""

#: ../../../LangRef.rst:200
msgid "``private``"
msgstr ""

#: ../../../LangRef.rst:196
msgid ""
"Global values with \"``private``\" linkage are only directly accessible by "
"objects in the current module. In particular, linking code into a module "
"with a private global value may cause the private to be renamed as necessary "
"to avoid collisions. Because the symbol is private to the module, all "
"references can be updated. This doesn't show up in any symbol table in the "
"object file."
msgstr ""

#: ../../../LangRef.rst:204
msgid "``internal``"
msgstr ""

#: ../../../LangRef.rst:203
msgid ""
"Similar to private, but the value shows as a local symbol (``STB_LOCAL`` in "
"the case of ELF) in the object file. This corresponds to the notion of the "
"'``static``' keyword in C."
msgstr ""

#: ../../../LangRef.rst:214
msgid "``available_externally``"
msgstr ""

#: ../../../LangRef.rst:207
msgid ""
"Globals with \"``available_externally``\" linkage are never emitted into the "
"object file corresponding to the LLVM module. From the linker's perspective, "
"an ``available_externally`` global is equivalent to an external declaration. "
"They exist to allow inlining and other optimizations to take place given "
"knowledge of the definition of the global, which is known to be somewhere "
"outside the module. Globals with ``available_externally`` linkage are "
"allowed to be discarded at will, and allow inlining and other optimizations. "
"This linkage type is only allowed on definitions, not declarations."
msgstr ""

#: ../../../LangRef.rst:227
msgid "``linkonce``"
msgstr ""

#: ../../../LangRef.rst:217
msgid ""
"Globals with \"``linkonce``\" linkage are merged with other globals of the "
"same name when linkage occurs. This can be used to implement some forms of "
"inline functions, templates, or other code which must be generated in each "
"translation unit that uses it, but where the body may be overridden with a "
"more definitive definition later. Unreferenced ``linkonce`` globals are "
"allowed to be discarded. Note that ``linkonce`` linkage does not actually "
"allow the optimizer to inline the body of this function into callers because "
"it doesn't know if this definition of the function is the definitive "
"definition within the program or whether it will be overridden by a stronger "
"definition. To enable inlining and other optimizations, use "
"\"``linkonce_odr``\" linkage."
msgstr ""

#: ../../../LangRef.rst:232
msgid "``weak``"
msgstr ""

#: ../../../LangRef.rst:230
msgid ""
"\"``weak``\" linkage has the same merging semantics as ``linkonce`` linkage, "
"except that unreferenced globals with ``weak`` linkage may not be discarded. "
"This is used for globals that are declared \"weak\" in C source code."
msgstr ""

#: ../../../LangRef.rst:242
msgid "``common``"
msgstr ""

#: ../../../LangRef.rst:235
msgid ""
"\"``common``\" linkage is most similar to \"``weak``\" linkage, but they are "
"used for tentative definitions in C, such as \"``int X;``\" at global scope. "
"Symbols with \"``common``\" linkage are merged in the same way as ``weak "
"symbols``, and they may not be deleted if unreferenced. ``common`` symbols "
"may not have an explicit section, must have a zero initializer, and may not "
"be marked ':ref:`constant <globalvars>`'. Functions and aliases may not have "
"common linkage."
msgstr ""

#: ../../../LangRef.rst:256
msgid "``appending``"
msgstr ""

#: ../../../LangRef.rst:247
msgid ""
"\"``appending``\" linkage may only be applied to global variables of pointer "
"to array type. When two global variables with appending linkage are linked "
"together, the two global arrays are appended together. This is the LLVM, "
"typesafe, equivalent of having the system linker append together "
"\"sections\" with identical names when .o files are linked."
msgstr ""

#: ../../../LangRef.rst:254
msgid ""
"Unfortunately this doesn't correspond to any feature in .o files, so it can "
"only be used for variables like ``llvm.global_ctors`` which llvm interprets "
"specially."
msgstr ""

#: ../../../LangRef.rst:260
msgid "``extern_weak``"
msgstr ""

#: ../../../LangRef.rst:259
msgid ""
"The semantics of this linkage follow the ELF object file model: the symbol "
"is weak until linked, if not linked, the symbol becomes null instead of "
"being an undefined reference."
msgstr ""

#: ../../../LangRef.rst:268
msgid "``linkonce_odr``, ``weak_odr``"
msgstr ""

#: ../../../LangRef.rst:263
msgid ""
"Some languages allow differing globals to be merged, such as two functions "
"with different semantics. Other languages, such as ``C++``, ensure that only "
"equivalent globals are ever merged (the \"one definition rule\" --- "
"\"ODR\"). Such languages can use the ``linkonce_odr`` and ``weak_odr`` "
"linkage types to indicate that the global will only be merged with "
"equivalent globals. These linkage types are otherwise the same as their non-"
"``odr`` versions."
msgstr ""

#: ../../../LangRef.rst:273
msgid "``external``"
msgstr ""

#: ../../../LangRef.rst:271
msgid ""
"If none of the above identifiers are used, the global is externally visible, "
"meaning that it participates in linkage and can be used to resolve external "
"symbol references."
msgstr ""

#: ../../../LangRef.rst:275
msgid ""
"It is illegal for a function *declaration* to have any linkage type other "
"than ``external`` or ``extern_weak``."
msgstr ""

#: ../../../LangRef.rst:281
msgid "Calling Conventions"
msgstr ""

#: ../../../LangRef.rst:283
msgid ""
"LLVM :ref:`functions <functionstructure>`, :ref:`calls <i_call>` and :ref:"
"`invokes <i_invoke>` can all have an optional calling convention specified "
"for the call. The calling convention of any pair of dynamic caller/callee "
"must match, or the behavior of the program is undefined. The following "
"calling conventions are supported by LLVM, and more may be added in the "
"future:"
msgstr ""

#: ../../../LangRef.rst:294
msgid "\"``ccc``\" - The C calling convention"
msgstr ""

#: ../../../LangRef.rst:291
msgid ""
"This calling convention (the default if no other calling convention is "
"specified) matches the target C calling conventions. This calling convention "
"supports varargs function calls and tolerates some mismatch in the declared "
"prototype and implemented declaration of the function (as does normal C)."
msgstr ""

#: ../../../LangRef.rst:304
msgid "\"``fastcc``\" - The fast calling convention"
msgstr ""

#: ../../../LangRef.rst:297
msgid ""
"This calling convention attempts to make calls as fast as possible (e.g. by "
"passing things in registers). This calling convention allows the target to "
"use whatever tricks it wants to produce fast code for the target, without "
"having to conform to an externally specified ABI (Application Binary "
"Interface). `Tail calls can only be optimized when this, the tailcc, the GHC "
"or the HiPE convention is used. <CodeGenerator.html#id80>`_ This calling "
"convention does not support varargs and requires the prototype of all "
"callees to exactly match the prototype of the function definition."
msgstr ""

#: ../../../LangRef.rst:313
msgid "\"``coldcc``\" - The cold calling convention"
msgstr ""

#: ../../../LangRef.rst:307
msgid ""
"This calling convention attempts to make code in the caller as efficient as "
"possible under the assumption that the call is not commonly executed. As "
"such, these calls often preserve all registers so that the call does not "
"break any live ranges in the caller side. This calling convention does not "
"support varargs and requires the prototype of all callees to exactly match "
"the prototype of the function definition. Furthermore the inliner doesn't "
"consider such function calls for inlining."
msgstr ""

#: ../../../LangRef.rst:332
msgid "\"``cc 10``\" - GHC convention"
msgstr ""

#: ../../../LangRef.rst:316
msgid ""
"This calling convention has been implemented specifically for use by the "
"`Glasgow Haskell Compiler (GHC) <http://www.haskell.org/ghc>`_. It passes "
"everything in registers, going to extremes to achieve this by disabling "
"callee save registers. This calling convention should not be used lightly "
"but only for specific situations such as an alternative to the *register "
"pinning* performance technique often used when implementing functional "
"programming languages. At the moment only X86 supports this convention and "
"it has the following limitations:"
msgstr ""

#: ../../../LangRef.rst:326
msgid ""
"On *X86-32* only supports up to 4 bit type parameters. No floating-point "
"types are supported."
msgstr ""

#: ../../../LangRef.rst:328
msgid ""
"On *X86-64* only supports up to 10 bit type parameters and 6 floating-point "
"parameters."
msgstr ""

#: ../../../LangRef.rst:331
msgid ""
"This calling convention supports `tail call optimization <CodeGenerator."
"html#id80>`_ but requires both the caller and callee are using it."
msgstr ""

#: ../../../LangRef.rst:347
msgid "\"``cc 11``\" - The HiPE calling convention"
msgstr ""

#: ../../../LangRef.rst:335
msgid ""
"This calling convention has been implemented specifically for use by the "
"`High-Performance Erlang (HiPE) <http://www.it.uu.se/research/group/hipe/>`_ "
"compiler, *the* native code compiler of the `Ericsson's Open Source Erlang/"
"OTP system <http://www.erlang.org/download.shtml>`_. It uses more registers "
"for argument passing than the ordinary C calling convention and defines no "
"callee-saved registers. The calling convention properly supports `tail call "
"optimization <CodeGenerator.html#id80>`_ but requires that both the caller "
"and the callee use it. It uses a *register pinning* mechanism, similar to "
"GHC's convention, for keeping frequently accessed runtime components pinned "
"to specific hardware registers. At the moment only X86 supports this "
"convention (both 32 and 64 bit)."
msgstr ""

#: ../../../LangRef.rst:352
msgid "\"``webkit_jscc``\" - WebKit's JavaScript calling convention"
msgstr ""

#: ../../../LangRef.rst:350
msgid ""
"This calling convention has been implemented for `WebKit FTL JIT <https://"
"trac.webkit.org/wiki/FTLJIT>`_. It passes arguments on the stack right to "
"left (as cdecl does), and returns a value in the platform's customary return "
"register."
msgstr ""

#: ../../../LangRef.rst:359
msgid "\"``anyregcc``\" - Dynamic calling convention for code patching"
msgstr ""

#: ../../../LangRef.rst:355
msgid ""
"This is a special convention that supports patching an arbitrary code "
"sequence in place of a call site. This convention forces the call arguments "
"into registers but allows them to be dynamically allocated. This can "
"currently only be used with calls to llvm.experimental.patchpoint because "
"only this intrinsic records the location of its arguments in a side table. "
"See :doc:`StackMaps`."
msgstr ""

#: ../../../LangRef.rst:392
msgid "\"``preserve_mostcc``\" - The `PreserveMost` calling convention"
msgstr ""

#: ../../../LangRef.rst:362
msgid ""
"This calling convention attempts to make the code in the caller as "
"unintrusive as possible. This convention behaves identically to the `C` "
"calling convention on how arguments and return values are passed, but it "
"uses a different set of caller/callee-saved registers. This alleviates the "
"burden of saving and recovering a large register set before and after the "
"call in the caller. If the arguments are passed in callee-saved registers, "
"then they will be preserved by the callee across the call. This doesn't "
"apply for values returned in callee-saved registers."
msgstr ""

#: ../../../LangRef.rst:371
msgid ""
"On X86-64 the callee preserves all general purpose registers, except for "
"R11. R11 can be used as a scratch register. Floating-point registers (XMMs/"
"YMMs) are not preserved and need to be saved by the caller."
msgstr ""

#: ../../../LangRef.rst:375
msgid ""
"The idea behind this convention is to support calls to runtime functions "
"that have a hot path and a cold path. The hot path is usually a small piece "
"of code that doesn't use many registers. The cold path might need to call "
"out to another function and therefore only needs to preserve the caller-"
"saved registers, which haven't already been saved by the caller. The "
"`PreserveMost` calling convention is very similar to the `cold` calling "
"convention in terms of caller/callee-saved registers, but they are used for "
"different types of function calls. `coldcc` is for function calls that are "
"rarely executed, whereas `preserve_mostcc` function calls are intended to be "
"on the hot path and definitely executed a lot. Furthermore `preserve_mostcc` "
"doesn't prevent the inliner from inlining the function call."
msgstr ""

#: ../../../LangRef.rst:387
msgid ""
"This calling convention will be used by a future version of the ObjectiveC "
"runtime and should therefore still be considered experimental at this time. "
"Although this convention was created to optimize certain runtime calls to "
"the ObjectiveC runtime, it is not limited to this runtime and might be used "
"by other runtimes in the future too. The current implementation only "
"supports X86-64, but the intention is to support more architectures in the "
"future."
msgstr ""

#: ../../../LangRef.rst:413
msgid "\"``preserve_allcc``\" - The `PreserveAll` calling convention"
msgstr ""

#: ../../../LangRef.rst:395
msgid ""
"This calling convention attempts to make the code in the caller even less "
"intrusive than the `PreserveMost` calling convention. This calling "
"convention also behaves identical to the `C` calling convention on how "
"arguments and return values are passed, but it uses a different set of "
"caller/callee-saved registers. This removes the burden of saving and "
"recovering a large register set before and after the call in the caller. If "
"the arguments are passed in callee-saved registers, then they will be "
"preserved by the callee across the call. This doesn't apply for values "
"returned in callee-saved registers."
msgstr ""

#: ../../../LangRef.rst:405
msgid ""
"On X86-64 the callee preserves all general purpose registers, except for "
"R11. R11 can be used as a scratch register. Furthermore it also preserves "
"all floating-point registers (XMMs/YMMs)."
msgstr ""

#: ../../../LangRef.rst:409
msgid ""
"The idea behind this convention is to support calls to runtime functions "
"that don't need to call out to any other functions."
msgstr ""

#: ../../../LangRef.rst:412
msgid ""
"This calling convention, like the `PreserveMost` calling convention, will be "
"used by a future version of the ObjectiveC runtime and should be considered "
"experimental at this time."
msgstr ""

#: ../../../LangRef.rst:433
msgid ""
"\"``cxx_fast_tlscc``\" - The `CXX_FAST_TLS` calling convention for access "
"functions"
msgstr ""

#: ../../../LangRef.rst:416
msgid ""
"Clang generates an access function to access C++-style TLS. The access "
"function generally has an entry block, an exit block and an initialization "
"block that is run at the first time. The entry and exit blocks can access a "
"few TLS IR variables, each access will be lowered to a platform-specific "
"sequence."
msgstr ""

#: ../../../LangRef.rst:422
msgid ""
"This calling convention aims to minimize overhead in the caller by "
"preserving as many registers as possible (all the registers that are "
"preserved on the fast path, composed of the entry and exit blocks)."
msgstr ""

#: ../../../LangRef.rst:426
msgid ""
"This calling convention behaves identical to the `C` calling convention on "
"how arguments and return values are passed, but it uses a different set of "
"caller/callee-saved registers."
msgstr ""

#: ../../../LangRef.rst:430
msgid ""
"Given that each platform has its own lowering sequence, hence its own set of "
"preserved registers, we can't use the existing `PreserveMost`."
msgstr ""

#: ../../../LangRef.rst:433
msgid ""
"On X86-64 the callee preserves all general purpose registers, except for RDI "
"and RAX."
msgstr ""

#: ../../../LangRef.rst:437
msgid "\"``swiftcc``\" - This calling convention is used for Swift language."
msgstr ""

#: ../../../LangRef.rst:436
msgid ""
"On X86-64 RCX and R8 are available for additional integer returns, and XMM2 "
"and XMM3 are available for additional FP/vector returns."
msgstr ""

#: ../../../LangRef.rst:438
msgid "On iOS platforms, we use AAPCS-VFP calling convention."
msgstr ""

#: ../../../LangRef.rst:445
msgid "\"``tailcc``\" - Tail callable calling convention"
msgstr ""

#: ../../../LangRef.rst:440
msgid ""
"This calling convention ensures that calls in tail position will always be "
"tail call optimized. This calling convention is equivalent to fastcc, except "
"for an additional guarantee that tail calls will be produced whenever "
"possible. `Tail calls can only be optimized when this, the fastcc, the GHC "
"or the HiPE convention is used. <CodeGenerator.html#id80>`_ This calling "
"convention does not support varargs and requires the prototype of all "
"callees to exactly match the prototype of the function definition."
msgstr ""

#: ../../../LangRef.rst:456
msgid "\"``cfguard_checkcc``\" - Windows Control Flow Guard (Check mechanism)"
msgstr ""

#: ../../../LangRef.rst:448
msgid ""
"This calling convention is used for the Control Flow Guard check function, "
"calls to which can be inserted before indirect calls to check that the call "
"target is a valid function address. The check function has no return value, "
"but it will trigger an OS-level error if the address is not a valid target. "
"The set of registers preserved by the check function, and the register "
"containing the target address are architecture-specific."
msgstr ""

#: ../../../LangRef.rst:455
msgid "On X86 the target address is passed in ECX."
msgstr ""

#: ../../../LangRef.rst:456
msgid "On ARM the target address is passed in R0."
msgstr ""

#: ../../../LangRef.rst:457
msgid "On AArch64 the target address is passed in X15."
msgstr ""

#: ../../../LangRef.rst:461
msgid "\"``cc <n>``\" - Numbered convention"
msgstr ""

#: ../../../LangRef.rst:459
msgid ""
"Any calling convention may be specified by number, allowing target-specific "
"calling conventions to be used. Target specific calling conventions start at "
"64."
msgstr ""

#: ../../../LangRef.rst:463
msgid ""
"More calling conventions can be added/defined on an as-needed basis, to "
"support Pascal conventions or any other well-known target-independent "
"convention."
msgstr ""

#: ../../../LangRef.rst:470
msgid "Visibility Styles"
msgstr ""

#: ../../../LangRef.rst:472
msgid ""
"All Global Variables and Functions have one of the following visibility "
"styles:"
msgstr ""

#: ../../../LangRef.rst:480
msgid "\"``default``\" - Default style"
msgstr ""

#: ../../../LangRef.rst:476
msgid ""
"On targets that use the ELF object file format, default visibility means "
"that the declaration is visible to other modules and, in shared libraries, "
"means that the declared entity may be overridden. On Darwin, default "
"visibility means that the declaration is visible to other modules. Default "
"visibility corresponds to \"external linkage\" in the language."
msgstr ""

#: ../../../LangRef.rst:486
msgid "\"``hidden``\" - Hidden style"
msgstr ""

#: ../../../LangRef.rst:483
msgid ""
"Two declarations of an object with hidden visibility refer to the same "
"object if they are in the same shared object. Usually, hidden visibility "
"indicates that the symbol will not be placed into the dynamic symbol table, "
"so no other module (executable or shared library) can reference it directly."
msgstr ""

#: ../../../LangRef.rst:492
msgid "\"``protected``\" - Protected style"
msgstr ""

#: ../../../LangRef.rst:489
msgid ""
"On ELF, protected visibility indicates that the symbol will be placed in the "
"dynamic symbol table, but that references within the defining module will "
"bind to the local symbol. That is, the symbol cannot be overridden by "
"another module."
msgstr ""

#: ../../../LangRef.rst:494
msgid ""
"A symbol with ``internal`` or ``private`` linkage must have ``default`` "
"visibility."
msgstr ""

#: ../../../LangRef.rst:500
msgid "DLL Storage Classes"
msgstr ""

#: ../../../LangRef.rst:502
msgid ""
"All Global Variables, Functions and Aliases can have one of the following "
"DLL storage class:"
msgstr ""

#: ../../../LangRef.rst:508
msgid "``dllimport``"
msgstr ""

#: ../../../LangRef.rst:506
msgid ""
"\"``dllimport``\" causes the compiler to reference a function or variable "
"via a global pointer to a pointer that is set up by the DLL exporting the "
"symbol. On Microsoft Windows targets, the pointer name is formed by "
"combining ``__imp_`` and the function or variable name."
msgstr ""

#: ../../../LangRef.rst:516
msgid "``dllexport``"
msgstr ""

#: ../../../LangRef.rst:511
msgid ""
"\"``dllexport``\" causes the compiler to provide a global pointer to a "
"pointer in a DLL, so that it can be referenced with the ``dllimport`` "
"attribute. On Microsoft Windows targets, the pointer name is formed by "
"combining ``__imp_`` and the function or variable name. Since this storage "
"class exists for defining a dll interface, the compiler, assembler and "
"linker know it is externally referenced and must refrain from deleting the "
"symbol."
msgstr ""

#: ../../../LangRef.rst:521
msgid "Thread Local Storage Models"
msgstr ""

#: ../../../LangRef.rst:523
msgid ""
"A variable may be defined as ``thread_local``, which means that it will not "
"be shared by threads (each thread will have a separated copy of the "
"variable). Not all targets support thread-local variables. Optionally, a TLS "
"model may be specified:"
msgstr ""

#: ../../../LangRef.rst:528
msgid "``localdynamic``"
msgstr ""

#: ../../../LangRef.rst:529
msgid "For variables that are only used within the current shared library."
msgstr ""

#: ../../../LangRef.rst:530
msgid "``initialexec``"
msgstr ""

#: ../../../LangRef.rst:531
msgid "For variables in modules that will not be loaded dynamically."
msgstr ""

#: ../../../LangRef.rst:533
msgid "``localexec``"
msgstr ""

#: ../../../LangRef.rst:533
msgid "For variables defined in the executable and only used within it."
msgstr ""

#: ../../../LangRef.rst:535
msgid "If no explicit model is given, the \"general dynamic\" model is used."
msgstr ""

#: ../../../LangRef.rst:537
msgid ""
"The models correspond to the ELF TLS models; see `ELF Handling For Thread-"
"Local Storage <http://people.redhat.com/drepper/tls.pdf>`_ for more "
"information on under which circumstances the different models may be used. "
"The target may choose a different TLS model if the specified model is not "
"supported, or if a better choice of model can be made."
msgstr ""

#: ../../../LangRef.rst:543
msgid ""
"A model can also be specified in an alias, but then it only governs how the "
"alias is accessed. It will not have any effect in the aliasee."
msgstr ""

#: ../../../LangRef.rst:546
msgid ""
"For platforms without linker support of ELF TLS model, the -femulated-tls "
"flag can be used to generate GCC compatible emulated TLS code."
msgstr ""

#: ../../../LangRef.rst:552
msgid "Runtime Preemption Specifiers"
msgstr ""

#: ../../../LangRef.rst:554
msgid ""
"Global variables, functions and aliases may have an optional runtime "
"preemption specifier. If a preemption specifier isn't given explicitly, then "
"a symbol is assumed to be ``dso_preemptable``."
msgstr ""

#: ../../../LangRef.rst:560
msgid "``dso_preemptable``"
msgstr ""

#: ../../../LangRef.rst:559
msgid ""
"Indicates that the function or variable may be replaced by a symbol from "
"outside the linkage unit at runtime."
msgstr ""

#: ../../../LangRef.rst:565
msgid "``dso_local``"
msgstr ""

#: ../../../LangRef.rst:563
msgid ""
"The compiler may assume that a function or variable marked as ``dso_local`` "
"will resolve to a symbol within the same linkage unit. Direct access will be "
"generated even if the definition is not within this compilation unit."
msgstr ""

#: ../../../LangRef.rst:570
msgid "Structure Types"
msgstr ""

#: ../../../LangRef.rst:572
msgid ""
"LLVM IR allows you to specify both \"identified\" and \"literal\" :ref:"
"`structure types <t_struct>`. Literal types are uniqued structurally, but "
"identified types are never uniqued. An :ref:`opaque structural type "
"<t_opaque>` can also be used to forward declare a type that is not yet "
"available."
msgstr ""

#: ../../../LangRef.rst:577
msgid "An example of an identified structure specification is:"
msgstr ""

#: ../../../LangRef.rst:583
msgid ""
"Prior to the LLVM 3.0 release, identified types were structurally uniqued. "
"Only literal types are uniqued in recent versions of LLVM."
msgstr ""

#: ../../../LangRef.rst:589
msgid "Non-Integral Pointer Type"
msgstr ""

#: ../../../LangRef.rst:591
msgid ""
"Note: non-integral pointer types are a work in progress, and they should be "
"considered experimental at this time."
msgstr ""

#: ../../../LangRef.rst:594
msgid ""
"LLVM IR optionally allows the frontend to denote pointers in certain address "
"spaces as \"non-integral\" via the :ref:`datalayout "
"string<langref_datalayout>`. Non-integral pointer types represent pointers "
"that have an *unspecified* bitwise representation; that is, the integral "
"representation may be target dependent or unstable (not backed by a fixed "
"integer)."
msgstr ""

#: ../../../LangRef.rst:600
msgid ""
"``inttoptr`` instructions converting integers to non-integral pointer types "
"are ill-typed, and so are ``ptrtoint`` instructions converting values of non-"
"integral pointer types to integers.  Vector versions of said instructions "
"are ill-typed as well."
msgstr ""

#: ../../../LangRef.rst:608
msgid "Global Variables"
msgstr ""

#: ../../../LangRef.rst:610
msgid ""
"Global variables define regions of memory allocated at compilation time "
"instead of run-time."
msgstr ""

#: ../../../LangRef.rst:613
msgid "Global variable definitions must be initialized."
msgstr ""

#: ../../../LangRef.rst:615
msgid ""
"Global variables in other translation units can also be declared, in which "
"case they don't have an initializer."
msgstr ""

#: ../../../LangRef.rst:618
msgid ""
"Either global variable definitions or declarations may have an explicit "
"section to be placed in and may have an optional explicit alignment "
"specified. If there is a mismatch between the explicit or inferred section "
"information for the variable declaration and its definition the resulting "
"behavior is undefined."
msgstr ""

#: ../../../LangRef.rst:623
msgid ""
"A variable may be defined as a global ``constant``, which indicates that the "
"contents of the variable will **never** be modified (enabling better "
"optimization, allowing the global data to be placed in the read-only section "
"of an executable, etc). Note that variables that need runtime initialization "
"cannot be marked ``constant`` as there is a store to the variable."
msgstr ""

#: ../../../LangRef.rst:630
msgid ""
"LLVM explicitly allows *declarations* of global variables to be marked "
"constant, even if the final definition of the global is not. This capability "
"can be used to enable slightly better optimization of the program, but "
"requires the language definition to guarantee that optimizations based on "
"the 'constantness' are valid for the translation units that do not include "
"the definition."
msgstr ""

#: ../../../LangRef.rst:637
msgid ""
"As SSA values, global variables define pointer values that are in scope (i."
"e. they dominate) all basic blocks in the program. Global variables always "
"define a pointer to their \"content\" type because they describe a region of "
"memory, and all memory objects in LLVM are accessed through pointers."
msgstr ""

#: ../../../LangRef.rst:643
msgid ""
"Global variables can be marked with ``unnamed_addr`` which indicates that "
"the address is not significant, only the content. Constants marked like this "
"can be merged with other constants if they have the same initializer. Note "
"that a constant with significant address *can* be merged with a "
"``unnamed_addr`` constant, the result being a constant whose address is "
"significant."
msgstr ""

#: ../../../LangRef.rst:650 ../../../LangRef.rst:793 ../../../LangRef.rst:844
msgid ""
"If the ``local_unnamed_addr`` attribute is given, the address is known to "
"not be significant within the module."
msgstr ""

#: ../../../LangRef.rst:653
msgid ""
"A global variable may be declared to reside in a target-specific numbered "
"address space. For targets that support them, address spaces may affect how "
"optimizations are performed and/or what target instructions are used to "
"access the variable. The default address space is zero. The address space "
"qualifier must precede any other attributes."
msgstr ""

#: ../../../LangRef.rst:659
msgid ""
"LLVM allows an explicit section to be specified for globals. If the target "
"supports it, it will emit globals to the section specified. Additionally, "
"the global can placed in a comdat if the target has the necessary support."
msgstr ""

#: ../../../LangRef.rst:664
msgid ""
"External declarations may have an explicit section specified. Section "
"information is retained in LLVM IR for targets that make use of this "
"information. Attaching section information to an external declaration is an "
"assertion that its definition is located in the specified section. If the "
"definition is located in a different section, the behavior is undefined."
msgstr ""

#: ../../../LangRef.rst:670
msgid ""
"By default, global initializers are optimized by assuming that global "
"variables defined within the module are not modified from their initial "
"values before the start of the global initializer. This is true even for "
"variables potentially accessible from outside the module, including those "
"with external linkage or appearing in ``@llvm.used`` or dllexported "
"variables. This assumption may be suppressed by marking the variable with "
"``externally_initialized``."
msgstr ""

#: ../../../LangRef.rst:678
msgid ""
"An explicit alignment may be specified for a global, which must be a power "
"of 2. If not present, or if the alignment is set to zero, the alignment of "
"the global is set by the target to whatever it feels convenient. If an "
"explicit alignment is specified, the global is forced to have exactly that "
"alignment. Targets and optimizers are not allowed to over-align the global "
"if the global has an assigned section. In this case, the extra alignment "
"could be observable: for example, code could assume that the globals are "
"densely packed in their section and try to iterate over them as an array, "
"alignment padding would break this iteration. The maximum alignment is ``1 "
"<< 29``."
msgstr ""

#: ../../../LangRef.rst:689
msgid ""
"Globals can also have a :ref:`DLL storage class <dllstorageclass>`, an "
"optional :ref:`runtime preemption specifier <runtime_preemption_model>`, an "
"optional :ref:`global attributes <glattrs>` and an optional list of "
"attached :ref:`metadata <metadata>`."
msgstr ""

#: ../../../LangRef.rst:694
msgid ""
"Variables and aliases can have a :ref:`Thread Local Storage Model "
"<tls_model>`."
msgstr ""

#: ../../../LangRef.rst:697
msgid ""
":ref:`Scalable vectors <t_vector>` cannot be global variables or members of "
"structs or arrays because their size is unknown at compile time."
msgstr ""

#: ../../../LangRef.rst:700 ../../../LangRef.rst:799 ../../../LangRef.rst:811
#: ../../../LangRef.rst:832 ../../../LangRef.rst:874 ../../../LangRef.rst:894
#: ../../../LangRef.rst:987 ../../../LangRef.rst:1863
msgid "Syntax::"
msgstr ""

#: ../../../LangRef.rst:710
msgid ""
"For example, the following defines a global in a numbered address space with "
"an initializer, section, and alignment:"
msgstr ""

#: ../../../LangRef.rst:717
msgid "The following example just declares a global variable"
msgstr ""

#: ../../../LangRef.rst:723
msgid ""
"The following example defines a thread-local global with the ``initialexec`` "
"TLS model:"
msgstr ""

#: ../../../LangRef.rst:733
msgid "Functions"
msgstr ""

#: ../../../LangRef.rst:735
msgid ""
"LLVM function definitions consist of the \"``define``\" keyword, an "
"optional :ref:`linkage type <linkage>`, an optional :ref:`runtime preemption "
"specifier <runtime_preemption_model>`,  an optional :ref:`visibility style "
"<visibility>`, an optional :ref:`DLL storage class <dllstorageclass>`, an "
"optional :ref:`calling convention <callingconv>`, an optional "
"``unnamed_addr`` attribute, a return type, an optional :ref:`parameter "
"attribute <paramattrs>` for the return type, a function name, a (possibly "
"empty) argument list (each with optional :ref:`parameter attributes "
"<paramattrs>`), optional :ref:`function attributes <fnattrs>`, an optional "
"address space, an optional section, an optional alignment, an optional :ref:"
"`comdat <langref_comdats>`, an optional :ref:`garbage collector name <gc>`, "
"an optional :ref:`prefix <prefixdata>`, an optional :ref:`prologue "
"<prologuedata>`, an optional :ref:`personality <personalityfn>`, an optional "
"list of attached :ref:`metadata <metadata>`, an opening curly brace, a list "
"of basic blocks, and a closing curly brace."
msgstr ""

#: ../../../LangRef.rst:752
msgid ""
"LLVM function declarations consist of the \"``declare``\" keyword, an "
"optional :ref:`linkage type <linkage>`, an optional :ref:`visibility style "
"<visibility>`, an optional :ref:`DLL storage class <dllstorageclass>`, an "
"optional :ref:`calling convention <callingconv>`, an optional "
"``unnamed_addr`` or ``local_unnamed_addr`` attribute, an optional address "
"space, a return type, an optional :ref:`parameter attribute <paramattrs>` "
"for the return type, a function name, a possibly empty list of arguments, an "
"optional alignment, an optional :ref:`garbage collector name <gc>`, an "
"optional :ref:`prefix <prefixdata>`, and an optional :ref:`prologue "
"<prologuedata>`."
msgstr ""

#: ../../../LangRef.rst:762
msgid ""
"A function definition contains a list of basic blocks, forming the CFG "
"(Control Flow Graph) for the function. Each basic block may optionally start "
"with a label (giving the basic block a symbol table entry), contains a list "
"of instructions, and ends with a :ref:`terminator <terminators>` instruction "
"(such as a branch or function return). If an explicit label name is not "
"provided, a block is assigned an implicit numbered label, using the next "
"value from the same counter as used for unnamed temporaries (:ref:`see "
"above<identifiers>`). For example, if a function entry block does not have "
"an explicit label, it will be assigned label \"%0\", then the first unnamed "
"temporary in that block will be \"%1\", etc. If a numeric label is "
"explicitly specified, it must match the numeric label that would be used "
"implicitly."
msgstr ""

#: ../../../LangRef.rst:774
msgid ""
"The first basic block in a function is special in two ways: it is "
"immediately executed on entrance to the function, and it is not allowed to "
"have predecessor basic blocks (i.e. there can not be any branches to the "
"entry block of a function). Because the block can have no predecessors, it "
"also cannot have any :ref:`PHI nodes <i_phi>`."
msgstr ""

#: ../../../LangRef.rst:780
msgid ""
"LLVM allows an explicit section to be specified for functions. If the target "
"supports it, it will emit functions to the section specified. Additionally, "
"the function can be placed in a COMDAT."
msgstr ""

#: ../../../LangRef.rst:784
msgid ""
"An explicit alignment may be specified for a function. If not present, or if "
"the alignment is set to zero, the alignment of the function is set by the "
"target to whatever it feels convenient. If an explicit alignment is "
"specified, the function is forced to have at least that much alignment. All "
"alignments must be a power of 2."
msgstr ""

#: ../../../LangRef.rst:790
msgid ""
"If the ``unnamed_addr`` attribute is given, the address is known to not be "
"significant and two identical functions can be merged."
msgstr ""

#: ../../../LangRef.rst:796
msgid ""
"If an explicit address space is not given, it will default to the program "
"address space from the :ref:`datalayout string<langref_datalayout>`."
msgstr ""

#: ../../../LangRef.rst:808
msgid ""
"The argument list is a comma separated sequence of arguments where each "
"argument is of the following form:"
msgstr ""

#: ../../../LangRef.rst:819
msgid "Aliases"
msgstr ""

#: ../../../LangRef.rst:821
msgid ""
"Aliases, unlike function or variables, don't create any new data. They are "
"just a new symbol and metadata for an existing position."
msgstr ""

#: ../../../LangRef.rst:824
msgid ""
"Aliases have a name and an aliasee that is either a global value or a "
"constant expression."
msgstr ""

#: ../../../LangRef.rst:827
msgid ""
"Aliases may have an optional :ref:`linkage type <linkage>`, an optional :ref:"
"`runtime preemption specifier <runtime_preemption_model>`, an optional :ref:"
"`visibility style <visibility>`, an optional :ref:`DLL storage class "
"<dllstorageclass>` and an optional :ref:`tls model <tls_model>`."
msgstr ""

#: ../../../LangRef.rst:836
msgid ""
"The linkage must be one of ``private``, ``internal``, ``linkonce``, "
"``weak``, ``linkonce_odr``, ``weak_odr``, ``external``. Note that some "
"system linkers might not correctly handle dropping a weak symbol that is "
"aliased."
msgstr ""

#: ../../../LangRef.rst:840
msgid ""
"Aliases that are not ``unnamed_addr`` are guaranteed to have the same "
"address as the aliasee expression. ``unnamed_addr`` ones are only guaranteed "
"to point to the same content."
msgstr ""

#: ../../../LangRef.rst:847
msgid ""
"Since aliases are only a second name, some restrictions apply, of which some "
"can only be checked when producing an object file:"
msgstr ""

#: ../../../LangRef.rst:850
msgid ""
"The expression defining the aliasee must be computable at assembly time. "
"Since it is just a name, no relocations can be used."
msgstr ""

#: ../../../LangRef.rst:853
msgid ""
"No alias in the expression can be weak as the possibility of the "
"intermediate alias being overridden cannot be represented in an object file."
msgstr ""

#: ../../../LangRef.rst:857
msgid ""
"No global value in the expression can be a declaration, since that would "
"require a relocation, which is not possible."
msgstr ""

#: ../../../LangRef.rst:863
msgid "IFuncs"
msgstr ""

#: ../../../LangRef.rst:865
msgid ""
"IFuncs, like as aliases, don't create any new data or func. They are just a "
"new symbol that dynamic linker resolves at runtime by calling a resolver "
"function."
msgstr ""

#: ../../../LangRef.rst:868
msgid ""
"IFuncs have a name and a resolver that is a function called by dynamic "
"linker that returns address of another function associated with the name."
msgstr ""

#: ../../../LangRef.rst:871
msgid ""
"IFunc may have an optional :ref:`linkage type <linkage>` and an optional :"
"ref:`visibility style <visibility>`."
msgstr ""

#: ../../../LangRef.rst:882
msgid "Comdats"
msgstr ""

#: ../../../LangRef.rst:884
msgid ""
"Comdat IR provides access to COFF and ELF object file COMDAT functionality."
msgstr ""

#: ../../../LangRef.rst:886
msgid ""
"Comdats have a name which represents the COMDAT key. All global objects that "
"specify this key will only end up in the final object file if the linker "
"chooses that key over some other key. Aliases are placed in the same COMDAT "
"that their aliasee computes to, if any."
msgstr ""

#: ../../../LangRef.rst:891
msgid ""
"Comdats have a selection kind to provide input on how the linker should "
"choose between keys in two different object files."
msgstr ""

#: ../../../LangRef.rst:898
msgid "The selection kind must be one of the following:"
msgstr ""

#: ../../../LangRef.rst:900
msgid "``any``"
msgstr ""

#: ../../../LangRef.rst:901
msgid "The linker may choose any COMDAT key, the choice is arbitrary."
msgstr ""

#: ../../../LangRef.rst:903
msgid "``exactmatch``"
msgstr ""

#: ../../../LangRef.rst:903
msgid ""
"The linker may choose any COMDAT key but the sections must contain the same "
"data."
msgstr ""

#: ../../../LangRef.rst:905
msgid "``largest``"
msgstr ""

#: ../../../LangRef.rst:906
msgid "The linker will choose the section containing the largest COMDAT key."
msgstr ""

#: ../../../LangRef.rst:907
msgid "``noduplicates``"
msgstr ""

#: ../../../LangRef.rst:908
msgid "The linker requires that only section with this COMDAT key exist."
msgstr ""

#: ../../../LangRef.rst:911
msgid "``samesize``"
msgstr ""

#: ../../../LangRef.rst:910
msgid ""
"The linker may choose any COMDAT key but the sections must contain the same "
"amount of data."
msgstr ""

#: ../../../LangRef.rst:913
msgid ""
"Note that the Mach-O platform doesn't support COMDATs, and ELF and "
"WebAssembly only support ``any`` as a selection kind."
msgstr ""

#: ../../../LangRef.rst:916
msgid ""
"Here is an example of a COMDAT group where a function will only be selected "
"if the COMDAT key's section is the largest:"
msgstr ""

#: ../../../LangRef.rst:928
msgid ""
"As a syntactic sugar the ``$name`` can be omitted if the name is the same as "
"the global name:"
msgstr ""

#: ../../../LangRef.rst:937
msgid ""
"In a COFF object file, this will create a COMDAT section with selection kind "
"``IMAGE_COMDAT_SELECT_LARGEST`` containing the contents of the ``@foo`` "
"symbol and another COMDAT section with selection kind "
"``IMAGE_COMDAT_SELECT_ASSOCIATIVE`` which is associated with the first "
"COMDAT section and contains the contents of the ``@bar`` symbol."
msgstr ""

#: ../../../LangRef.rst:943
msgid ""
"There are some restrictions on the properties of the global object. It, or "
"an alias to it, must have the same name as the COMDAT group when targeting "
"COFF. The contents and size of this object may be used during link-time to "
"determine which COMDAT groups get selected depending on the selection kind. "
"Because the name of the object must match the name of the COMDAT group, the "
"linkage of the global object must not be local; local symbols can get "
"renamed if a collision occurs in the symbol table."
msgstr ""

#: ../../../LangRef.rst:952
msgid ""
"The combined use of COMDATS and section attributes may yield surprising "
"results. For example:"
msgstr ""

#: ../../../LangRef.rst:962
msgid ""
"From the object file perspective, this requires the creation of two sections "
"with the same name. This is necessary because both globals belong to "
"different COMDAT groups and COMDATs, at the object file level, are "
"represented by sections."
msgstr ""

#: ../../../LangRef.rst:967
msgid ""
"Note that certain IR constructs like global variables and functions may "
"create COMDATs in the object file in addition to any which are specified "
"using COMDAT IR. This arises when the code generator is configured to emit "
"globals in individual sections (e.g. when `-data-sections` or `-function-"
"sections` is supplied to `llc`)."
msgstr ""

#: ../../../LangRef.rst:976
msgid "Named Metadata"
msgstr ""

#: ../../../LangRef.rst:978
msgid ""
"Named metadata is a collection of metadata. :ref:`Metadata nodes <metadata>` "
"(but not metadata strings) are the only valid operands for a named metadata."
msgstr ""

#: ../../../LangRef.rst:982
msgid ""
"Named metadata are represented as a string of characters with the metadata "
"prefix. The rules for metadata names are the same as for identifiers, but "
"quoted names are not allowed. ``\"\\xx\"`` type escapes are still valid, "
"which allows any character to be part of a name."
msgstr ""

#: ../../../LangRef.rst:999
msgid "Parameter Attributes"
msgstr ""

#: ../../../LangRef.rst:1001
msgid ""
"The return type and each parameter of a function type may have a set of "
"*parameter attributes* associated with them. Parameter attributes are used "
"to communicate additional information about the result or parameters of a "
"function. Parameter attributes are considered to be part of the function, "
"not of the function type, so functions with different parameter attributes "
"can have the same function type."
msgstr ""

#: ../../../LangRef.rst:1008
msgid ""
"Parameter attributes are simple keywords that follow the type specified. If "
"multiple parameter attributes are needed, they are space separated. For "
"example:"
msgstr ""

#: ../../../LangRef.rst:1018
msgid ""
"Note that any attributes for the function result (``nounwind``, "
"``readonly``) come immediately after the argument list."
msgstr ""

#: ../../../LangRef.rst:1021
msgid "Currently, only the following parameter attributes are defined:"
msgstr ""

#: ../../../LangRef.rst:1025
msgid "``zeroext``"
msgstr ""

#: ../../../LangRef.rst:1024
msgid ""
"This indicates to the code generator that the parameter or return value "
"should be zero-extended to the extent required by the target's ABI by the "
"caller (for a parameter) or the callee (for a return value)."
msgstr ""

#: ../../../LangRef.rst:1030
msgid "``signext``"
msgstr ""

#: ../../../LangRef.rst:1028
msgid ""
"This indicates to the code generator that the parameter or return value "
"should be sign-extended to the extent required by the target's ABI (which is "
"usually 32-bits) by the caller (for a parameter) or the callee (for a return "
"value)."
msgstr ""

#: ../../../LangRef.rst:1037
msgid "``inreg``"
msgstr ""

#: ../../../LangRef.rst:1033
msgid ""
"This indicates that this parameter or return value should be treated in a "
"special target-dependent fashion while emitting code for a function call or "
"return (usually, by putting it in a register as opposed to memory, though "
"some targets use it to distinguish between two different kinds of "
"registers). Use of this attribute is target-specific."
msgstr ""

#: ../../../LangRef.rst:1058
msgid "``byval`` or ``byval(<ty>)``"
msgstr ""

#: ../../../LangRef.rst:1040
msgid ""
"This indicates that the pointer parameter should really be passed by value "
"to the function. The attribute implies that a hidden copy of the pointee is "
"made between the caller and the callee, so the callee is unable to modify "
"the value in the caller. This attribute is only valid on LLVM pointer "
"arguments. It is generally used to pass structs and arrays by value, but is "
"also valid on pointers to scalars. The copy is considered to belong to the "
"caller not the callee (for example, ``readonly`` functions should not write "
"to ``byval`` parameters). This is not a valid attribute for return values."
msgstr ""

#: ../../../LangRef.rst:1051
msgid ""
"The byval attribute also supports an optional type argument, which must be "
"the same as the pointee type of the argument."
msgstr ""

#: ../../../LangRef.rst:1054
msgid ""
"The byval attribute also supports specifying an alignment with the align "
"attribute. It indicates the alignment of the stack slot to form and the "
"known alignment of the pointer specified to the call site. If the alignment "
"is not specified, then the code generator makes a target-specific assumption."
msgstr ""

#: ../../../LangRef.rst:1062
msgid "``inalloca``"
msgstr ""

#: ../../../LangRef.rst:1064
msgid ""
"The ``inalloca`` argument attribute allows the caller to take the address of "
"outgoing stack arguments. An ``inalloca`` argument must be a pointer to "
"stack memory produced by an ``alloca`` instruction. The alloca, or argument "
"allocation, must also be tagged with the inalloca keyword. Only the last "
"argument may have the ``inalloca`` attribute, and that argument is "
"guaranteed to be passed in memory."
msgstr ""

#: ../../../LangRef.rst:1071
msgid ""
"An argument allocation may be used by a call at most once because the call "
"may deallocate it. The ``inalloca`` attribute cannot be used in conjunction "
"with other attributes that affect argument storage, like ``inreg``, "
"``nest``, ``sret``, or ``byval``. The ``inalloca`` attribute also disables "
"LLVM's implicit lowering of large aggregate return values, which means that "
"frontend authors must lower them with ``sret`` pointers."
msgstr ""

#: ../../../LangRef.rst:1079
msgid ""
"When the call site is reached, the argument allocation must have been the "
"most recent stack allocation that is still live, or the behavior is "
"undefined. It is possible to allocate additional stack space after an "
"argument allocation and before its call site, but it must be cleared off "
"with :ref:`llvm.stackrestore <int_stackrestore>`."
msgstr ""

#: ../../../LangRef.rst:1086
msgid "See :doc:`InAlloca` for more information on how to use this attribute."
msgstr ""

#: ../../../LangRef.rst:1095
msgid "``sret``"
msgstr ""

#: ../../../LangRef.rst:1090
msgid ""
"This indicates that the pointer parameter specifies the address of a "
"structure that is the return value of the function in the source program. "
"This pointer must be guaranteed by the caller to be valid: loads and stores "
"to the structure may be assumed by the callee not to trap and to be properly "
"aligned. This is not a valid attribute for return values."
msgstr ""

#: ../../../LangRef.rst:1105
msgid "``align <n>``"
msgstr ""

#: ../../../LangRef.rst:1100
msgid ""
"This indicates that the pointer value may be assumed by the optimizer to "
"have the specified alignment.  If the pointer value does not have the "
"specified alignment, behavior is undefined."
msgstr ""

#: ../../../LangRef.rst:1104
msgid ""
"Note that this attribute has additional semantics when combined with the "
"``byval`` attribute, which are documented there."
msgstr ""

#: ../../../LangRef.rst:1128
msgid "``noalias``"
msgstr ""

#: ../../../LangRef.rst:1110
msgid ""
"This indicates that objects accessed via pointer values :ref:`based "
"<pointeraliasing>` on the argument or return value are not also accessed, "
"during the execution of the function, via pointer values not *based* on the "
"argument or return value. The attribute on a return value also has "
"additional semantics described below. The caller shares the responsibility "
"with the callee for ensuring that these requirements are met. For further "
"details, please see the discussion of the NoAlias response in :ref:`alias "
"analysis <Must, May, or No>`."
msgstr ""

#: ../../../LangRef.rst:1119
msgid ""
"Note that this definition of ``noalias`` is intentionally similar to the "
"definition of ``restrict`` in C99 for function arguments."
msgstr ""

#: ../../../LangRef.rst:1122
msgid ""
"For function return values, C99's ``restrict`` is not meaningful, while "
"LLVM's ``noalias`` is. Furthermore, the semantics of the ``noalias`` "
"attribute on return values are stronger than the semantics of the attribute "
"when used on function arguments. On function return values, the ``noalias`` "
"attribute indicates that the function acts like a system memory allocation "
"function, returning a pointer to allocated storage disjoint from the storage "
"for any other object accessible to the caller."
msgstr ""

#: ../../../LangRef.rst:1134
msgid "``nocapture``"
msgstr ""

#: ../../../LangRef.rst:1131
msgid ""
"This indicates that the callee does not make any copies of the pointer that "
"outlive the callee itself. This is not a valid attribute for return values.  "
"Addresses used in volatile operations are considered to be captured."
msgstr ""

#: ../../../LangRef.rst:1138 ../../../LangRef.rst:1492
msgid "``nofree``"
msgstr ""

#: ../../../LangRef.rst:1137
msgid ""
"This indicates that callee does not free the pointer argument. This is not a "
"valid attribute for return values."
msgstr ""

#: ../../../LangRef.rst:1145
msgid "``nest``"
msgstr ""

#: ../../../LangRef.rst:1143
msgid ""
"This indicates that the pointer parameter can be excised using the :ref:"
"`trampoline intrinsics <int_trampoline>`. This is not a valid attribute for "
"return values and can only be applied to one parameter."
msgstr ""

#: ../../../LangRef.rst:1155
msgid "``returned``"
msgstr ""

#: ../../../LangRef.rst:1148
msgid ""
"This indicates that the function always returns the argument as its return "
"value. This is a hint to the optimizer and code generator used when "
"generating the caller, allowing value propagation, tail call optimization, "
"and omission of register saves and restores in some cases; it is not checked "
"or enforced when generating the callee. The parameter and the function "
"return type must be valid operands for the :ref:`bitcast instruction "
"<i_bitcast>`. This is not a valid attribute for return values and can only "
"be applied to one parameter."
msgstr ""

#: ../../../LangRef.rst:1161
msgid "``nonnull``"
msgstr ""

#: ../../../LangRef.rst:1158
msgid ""
"This indicates that the parameter or return pointer is not null. This "
"attribute may only be applied to pointer typed parameters. This is not "
"checked or enforced by LLVM; if the parameter or return pointer is null, the "
"behavior is undefined."
msgstr ""

#: ../../../LangRef.rst:1172
msgid "``dereferenceable(<n>)``"
msgstr ""

#: ../../../LangRef.rst:1164
msgid ""
"This indicates that the parameter or return pointer is dereferenceable. This "
"attribute may only be applied to pointer typed parameters. A pointer that is "
"dereferenceable can be loaded from speculatively without a risk of trapping. "
"The number of bytes known to be dereferenceable must be provided in "
"parentheses. It is legal for the number of bytes to be less than the size of "
"the pointee type. The ``nonnull`` attribute does not imply "
"dereferenceability (consider a pointer to one element past the end of an "
"array), however ``dereferenceable(<n>)`` does imply ``nonnull`` in "
"``addrspace(0)`` (which is the default address space)."
msgstr ""

#: ../../../LangRef.rst:1185
msgid "``dereferenceable_or_null(<n>)``"
msgstr ""

#: ../../../LangRef.rst:1175
msgid ""
"This indicates that the parameter or return value isn't both non-null and "
"non-dereferenceable (up to ``<n>`` bytes) at the same time. All non-null "
"pointers tagged with ``dereferenceable_or_null(<n>)`` are "
"``dereferenceable(<n>)``. For address space 0 "
"``dereferenceable_or_null(<n>)`` implies that a pointer is exactly one of "
"``dereferenceable(<n>)`` or ``null``, and in other address spaces "
"``dereferenceable_or_null(<n>)`` implies that a pointer is at least one of "
"``dereferenceable(<n>)`` or ``null`` (i.e. it may be both ``null`` and "
"``dereferenceable(<n>)``). This attribute may only be applied to pointer "
"typed parameters."
msgstr ""

#: ../../../LangRef.rst:1190
msgid "``swiftself``"
msgstr ""

#: ../../../LangRef.rst:1188
msgid ""
"This indicates that the parameter is the self/context parameter. This is not "
"a valid attribute for return values and can only be applied to one parameter."
msgstr ""

#: ../../../LangRef.rst:1210
msgid "``swifterror``"
msgstr ""

#: ../../../LangRef.rst:1193
msgid ""
"This attribute is motivated to model and optimize Swift error handling. It "
"can be applied to a parameter with pointer to pointer type or a pointer-"
"sized alloca. At the call site, the actual argument that corresponds to a "
"``swifterror`` parameter has to come from a ``swifterror`` alloca or the "
"``swifterror`` parameter of the caller. A ``swifterror`` value (either the "
"parameter or the alloca) can only be loaded and stored from, or used as a "
"``swifterror`` argument. This is not a valid attribute for return values and "
"can only be applied to one parameter."
msgstr ""

#: ../../../LangRef.rst:1202
msgid ""
"These constraints allow the calling convention to optimize access to "
"``swifterror`` variables by associating them with a specific register at "
"call boundaries rather than placing them in memory. Since this does change "
"the calling convention, a function which uses the ``swifterror`` attribute "
"on a parameter is not ABI-compatible with one which does not."
msgstr ""

#: ../../../LangRef.rst:1208
msgid ""
"These constraints also allow LLVM to assume that a ``swifterror`` argument "
"does not alias any other memory visible within a function and that a "
"``swifterror`` alloca passed as an argument does not escape."
msgstr ""

#: ../../../LangRef.rst:1217
msgid "``immarg``"
msgstr ""

#: ../../../LangRef.rst:1213
msgid ""
"This indicates the parameter is required to be an immediate value. This must "
"be a trivial immediate integer or floating-point constant. Undef or constant "
"expressions are not valid. This is only valid on intrinsic declarations and "
"cannot be applied to a call site or arbitrary function."
msgstr ""

#: ../../../LangRef.rst:1222
msgid "Garbage Collector Strategy Names"
msgstr ""

#: ../../../LangRef.rst:1224
msgid ""
"Each function may specify a garbage collector strategy name, which is simply "
"a string:"
msgstr ""

#: ../../../LangRef.rst:1231
msgid ""
"The supported values of *name* includes those :ref:`built in to LLVM "
"<builtin-gc-strategies>` and any provided by loaded plugins. Specifying a GC "
"strategy will cause the compiler to alter its output in order to support the "
"named garbage collection algorithm. Note that LLVM itself does not contain a "
"garbage collector, this functionality is restricted to generating machine "
"code which can interoperate with a collector provided externally."
msgstr ""

#: ../../../LangRef.rst:1241
msgid "Prefix Data"
msgstr ""

#: ../../../LangRef.rst:1243
msgid ""
"Prefix data is data associated with a function which the code generator will "
"emit immediately before the function's entrypoint. The purpose of this "
"feature is to allow frontends to associate language-specific runtime "
"metadata with specific functions and make it available through the function "
"pointer while still allowing the function pointer to be called."
msgstr ""

#: ../../../LangRef.rst:1250
msgid ""
"To access the data for a given function, a program may bitcast the function "
"pointer to a pointer to the constant's type and dereference index -1. This "
"implies that the IR symbol points just past the end of the prefix data. For "
"instance, take the example of a function annotated with a single ``i32``,"
msgstr ""

#: ../../../LangRef.rst:1260
msgid "The prefix data can be referenced as,"
msgstr ""

#: ../../../LangRef.rst:1268
msgid ""
"Prefix data is laid out as if it were an initializer for a global variable "
"of the prefix data's type. The function will be placed such that the "
"beginning of the prefix data is aligned. This means that if the size of the "
"prefix data is not a multiple of the alignment size, the function's "
"entrypoint will not be aligned. If alignment of the function's entrypoint is "
"desired, padding must be added to the prefix data."
msgstr ""

#: ../../../LangRef.rst:1276
msgid ""
"A function may have prefix data but no body. This has similar semantics to "
"the ``available_externally`` linkage in that the data may be used by the "
"optimizers but will not be emitted in the object file."
msgstr ""

#: ../../../LangRef.rst:1283
msgid "Prologue Data"
msgstr ""

#: ../../../LangRef.rst:1285
msgid ""
"The ``prologue`` attribute allows arbitrary code (encoded as bytes) to be "
"inserted prior to the function body. This can be used for enabling function "
"hot-patching and instrumentation."
msgstr ""

#: ../../../LangRef.rst:1289
msgid ""
"To maintain the semantics of ordinary function calls, the prologue data must "
"have a particular format. Specifically, it must begin with a sequence of "
"bytes which decode to a sequence of machine instructions, valid for the "
"module's target, which transfer control to the point immediately succeeding "
"the prologue data, without performing any other visible action. This allows "
"the inliner and other passes to reason about the semantics of the function "
"definition without needing to reason about the prologue data. Obviously this "
"makes the format of the prologue data highly target dependent."
msgstr ""

#: ../../../LangRef.rst:1298
msgid ""
"A trivial example of valid prologue data for the x86 architecture is ``i8 "
"144``, which encodes the ``nop`` instruction:"
msgstr ""

#: ../../../LangRef.rst:1305
msgid ""
"Generally prologue data can be formed by encoding a relative branch "
"instruction which skips the metadata, as in this example of valid prologue "
"data for the x86_64 architecture, where the first two bytes encode ``jmp ."
"+10``:"
msgstr ""

#: ../../../LangRef.rst:1315
msgid ""
"A function may have prologue data but no body. This has similar semantics to "
"the ``available_externally`` linkage in that the data may be used by the "
"optimizers but will not be emitted in the object file."
msgstr ""

#: ../../../LangRef.rst:1322
msgid "Personality Function"
msgstr ""

#: ../../../LangRef.rst:1324
msgid ""
"The ``personality`` attribute permits functions to specify what function to "
"use for exception handling."
msgstr ""

#: ../../../LangRef.rst:1330
msgid "Attribute Groups"
msgstr ""

#: ../../../LangRef.rst:1332
msgid ""
"Attribute groups are groups of attributes that are referenced by objects "
"within the IR. They are important for keeping ``.ll`` files readable, "
"because a lot of functions will use the same set of attributes. In the "
"degenerative case of a ``.ll`` file that corresponds to a single ``.c`` "
"file, the single attribute group will capture the important command line "
"flags used to build that file."
msgstr ""

#: ../../../LangRef.rst:1338
msgid ""
"An attribute group is a module-level object. To use an attribute group, an "
"object references the attribute group's ID (e.g. ``#37``). An object may "
"refer to more than one attribute group. In that situation, the attributes "
"from the different groups are merged."
msgstr ""

#: ../../../LangRef.rst:1343
msgid ""
"Here is an example of attribute groups for a function that should always be "
"inlined, has a stack alignment of 4, and which shouldn't use SSE "
"instructions:"
msgstr ""

#: ../../../LangRef.rst:1360
msgid "Function Attributes"
msgstr ""

#: ../../../LangRef.rst:1362
msgid ""
"Function attributes are set to communicate additional information about a "
"function. Function attributes are considered to be part of the function, not "
"of the function type, so functions with different function attributes can "
"have the same function type."
msgstr ""

#: ../../../LangRef.rst:1367
msgid ""
"Function attributes are simple keywords that follow the type specified. If "
"multiple attributes are needed, they are space separated. For example:"
msgstr ""

#: ../../../LangRef.rst:1381
msgid "``alignstack(<n>)``"
msgstr ""

#: ../../../LangRef.rst:1379
msgid ""
"This attribute indicates that, when emitting the prologue and epilogue, the "
"backend should forcibly align the stack pointer. Specify the desired "
"alignment, which must be a power of two, in parentheses."
msgstr ""

#: ../../../LangRef.rst:1390
msgid "``allocsize(<EltSizeParam>[, <NumEltsParam>])``"
msgstr ""

#: ../../../LangRef.rst:1384
msgid ""
"This attribute indicates that the annotated function will always return at "
"least a given number of bytes (or null). Its arguments are zero-indexed "
"parameter numbers; if one argument is provided, then it's assumed that at "
"least ``CallSite.Args[EltSizeParam]`` bytes will be available at the "
"returned pointer. If two are provided, then it's assumed that ``CallSite."
"Args[EltSizeParam] * CallSite.Args[NumEltsParam]`` bytes are available. The "
"referenced parameters must be integer types. No assumptions are made about "
"the contents of the returned block of memory."
msgstr ""

#: ../../../LangRef.rst:1394
msgid "``alwaysinline``"
msgstr ""

#: ../../../LangRef.rst:1393
msgid ""
"This attribute indicates that the inliner should attempt to inline this "
"function into callers whenever possible, ignoring any active inlining size "
"threshold for this caller."
msgstr ""

#: ../../../LangRef.rst:1400
msgid "``builtin``"
msgstr ""

#: ../../../LangRef.rst:1397
msgid ""
"This indicates that the callee function at a call site should be recognized "
"as a built-in function, even though the function's declaration uses the "
"``nobuiltin`` attribute. This is only valid at call sites for direct calls "
"to functions that are declared with the ``nobuiltin`` attribute."
msgstr ""

#: ../../../LangRef.rst:1405
msgid "``cold``"
msgstr ""

#: ../../../LangRef.rst:1403
msgid ""
"This attribute indicates that this function is rarely called. When computing "
"edge weights, basic blocks post-dominated by a cold function call are also "
"considered to be cold; and, thus, given low weight."
msgstr ""

#: ../../../LangRef.rst:1426
msgid "``convergent``"
msgstr ""

#: ../../../LangRef.rst:1408
msgid ""
"In some parallel execution models, there exist operations that cannot be "
"made control-dependent on any additional values.  We call such operations "
"``convergent``, and mark them with this attribute."
msgstr ""

#: ../../../LangRef.rst:1412
msgid ""
"The ``convergent`` attribute may appear on functions or call/invoke "
"instructions.  When it appears on a function, it indicates that calls to "
"this function should not be made control-dependent on additional values. For "
"example, the intrinsic ``llvm.nvvm.barrier0`` is ``convergent``, so calls to "
"this intrinsic cannot be made control-dependent on additional values."
msgstr ""

#: ../../../LangRef.rst:1419
msgid ""
"When it appears on a call/invoke, the ``convergent`` attribute indicates "
"that we should treat the call as though we're calling a convergent "
"function.  This is particularly useful on indirect calls; without this we "
"may treat such calls as though the target is non-convergent."
msgstr ""

#: ../../../LangRef.rst:1424
msgid ""
"The optimizer may remove the ``convergent`` attribute on functions when it "
"can prove that the function does not execute any convergent operations. "
"Similarly, the optimizer may remove ``convergent`` on calls/invokes when it "
"can prove that the call/invoke cannot call a convergent function."
msgstr ""

#: ../../../LangRef.rst:1431
msgid "``inaccessiblememonly``"
msgstr ""

#: ../../../LangRef.rst:1429
msgid ""
"This attribute indicates that the function may only access memory that is "
"not accessible by the module being compiled. This is a weaker form of "
"``readnone``. If the function reads or writes other memory, the behavior is "
"undefined."
msgstr ""

#: ../../../LangRef.rst:1436
msgid "``inaccessiblemem_or_argmemonly``"
msgstr ""

#: ../../../LangRef.rst:1434
msgid ""
"This attribute indicates that the function may only access memory that is "
"either not accessible by the module being compiled, or is pointed to by its "
"pointer arguments. This is a weaker form of  ``argmemonly``. If the function "
"reads or writes other memory, the behavior is undefined."
msgstr ""

#: ../../../LangRef.rst:1441
msgid "``inlinehint``"
msgstr ""

#: ../../../LangRef.rst:1439
msgid ""
"This attribute indicates that the source code contained a hint that inlining "
"this function is desirable (such as the \"inline\" keyword in C/C++). It is "
"just a hint; it imposes no requirements on the inliner."
msgstr ""

#: ../../../LangRef.rst:1449
msgid "``jumptable``"
msgstr ""

#: ../../../LangRef.rst:1444
msgid ""
"This attribute indicates that the function should be added to a jump-"
"instruction table at code-generation time, and that all address-taken "
"references to this function should be replaced with a reference to the "
"appropriate jump-instruction-table function pointer. Note that this creates "
"a new pointer for the original function, which means that code that depends "
"on function-pointer identity can break. So, any function annotated with "
"``jumptable`` must also be ``unnamed_addr``."
msgstr ""

#: ../../../LangRef.rst:1454
msgid "``minsize``"
msgstr ""

#: ../../../LangRef.rst:1452
msgid ""
"This attribute suggests that optimization passes and code generator passes "
"make choices that keep the code size of this function as small as possible "
"and perform optimizations that may sacrifice runtime performance in order to "
"minimize the size of the generated code."
msgstr ""

#: ../../../LangRef.rst:1457
msgid "``naked``"
msgstr ""

#: ../../../LangRef.rst:1457
msgid ""
"This attribute disables prologue / epilogue emission for the function. This "
"can have very system-specific consequences."
msgstr ""

#: ../../../LangRef.rst:1464
msgid "``\"no-inline-line-tables\"``"
msgstr ""

#: ../../../LangRef.rst:1460
msgid ""
"When this attribute is set to true, the inliner discards source locations "
"when inlining code and instead uses the source location of the call site. "
"Breakpoints set on code that was inlined into the current function will not "
"fire during the execution of the inlined call sites. If the debugger stops "
"inside an inlined call site, it will appear to be stopped at the outermost "
"inlined call site."
msgstr ""

#: ../../../LangRef.rst:1467
msgid "``no-jump-tables``"
msgstr ""

#: ../../../LangRef.rst:1467
msgid ""
"When this attribute is set to true, the jump tables and lookup tables that "
"can be generated from a switch case lowering are disabled."
msgstr ""

#: ../../../LangRef.rst:1473
msgid "``nobuiltin``"
msgstr ""

#: ../../../LangRef.rst:1470
msgid ""
"This indicates that the callee function at a call site is not recognized as "
"a built-in function. LLVM will retain the original call and not replace it "
"with equivalent code based on the semantics of the built-in function, unless "
"the call site uses the ``builtin`` attribute. This is valid at call sites "
"and on function declarations and definitions."
msgstr ""

#: ../../../LangRef.rst:1484
msgid "``noduplicate``"
msgstr ""

#: ../../../LangRef.rst:1476
msgid ""
"This attribute indicates that calls to the function cannot be duplicated. A "
"call to a ``noduplicate`` function may be moved within its parent function, "
"but may not be duplicated within its parent function."
msgstr ""

#: ../../../LangRef.rst:1481
msgid ""
"A function containing a ``noduplicate`` call may still be an inlining "
"candidate, provided that the call is not duplicated by inlining. That "
"implies that the function has internal linkage and only has one call site, "
"so the original call is dead after inlining."
msgstr ""

#: ../../../LangRef.rst:1487
msgid ""
"This function attribute indicates that the function does not, directly or "
"indirectly, call a memory-deallocation function (free, for example). As a "
"result, uncaptured pointers that are known to be dereferenceable prior to a "
"call to a function with the ``nofree`` attribute are still known to be "
"dereferenceable after the call (the capturing condition is necessary in "
"environments where the function might communicate the pointer to another "
"thread which then deallocates the memory)."
msgstr ""

#: ../../../LangRef.rst:1494
msgid "``noimplicitfloat``"
msgstr ""

#: ../../../LangRef.rst:1495
msgid "This attributes disables implicit floating-point instructions."
msgstr ""

#: ../../../LangRef.rst:1498
msgid "``noinline``"
msgstr ""

#: ../../../LangRef.rst:1497
msgid ""
"This attribute indicates that the inliner should never inline this function "
"in any situation. This attribute may not be used together with the "
"``alwaysinline`` attribute."
msgstr ""

#: ../../../LangRef.rst:1502
msgid "``nonlazybind``"
msgstr ""

#: ../../../LangRef.rst:1501
msgid ""
"This attribute suppresses lazy symbol binding for the function. This may "
"make calls to the function faster, at the cost of extra program startup time "
"if the function is not called during program startup."
msgstr ""

#: ../../../LangRef.rst:1505
msgid "``noredzone``"
msgstr ""

#: ../../../LangRef.rst:1505
msgid ""
"This attribute indicates that the code generator should not use a red zone, "
"even if the target-specific ABI normally permits it."
msgstr ""

#: ../../../LangRef.rst:1509
msgid "``indirect-tls-seg-refs``"
msgstr ""

#: ../../../LangRef.rst:1508
msgid ""
"This attribute indicates that the code generator should not use direct TLS "
"access through segment registers, even if the target-specific ABI normally "
"permits it."
msgstr ""

#: ../../../LangRef.rst:1514
msgid "``noreturn``"
msgstr ""

#: ../../../LangRef.rst:1512
msgid ""
"This function attribute indicates that the function never returns normally, "
"hence through a return instruction. This produces undefined behavior at "
"runtime if the function ever does dynamically return. Annotated functions "
"may still raise an exception, i.a., ``nounwind`` is not implied."
msgstr ""

#: ../../../LangRef.rst:1518
msgid "``norecurse``"
msgstr ""

#: ../../../LangRef.rst:1517
msgid ""
"This function attribute indicates that the function does not call itself "
"either directly or indirectly down any possible call path. This produces "
"undefined behavior at runtime if the function ever does recurse."
msgstr ""

#: ../../../LangRef.rst:1525
msgid "``willreturn``"
msgstr ""

#: ../../../LangRef.rst:1521
msgid ""
"This function attribute indicates that a call of this function will either "
"exhibit undefined behavior or comes back and continues execution at a point "
"in the existing call stack that includes the current invocation. Annotated "
"functions may still raise an exception, i.a., ``nounwind`` is not implied. "
"If an invocation of an annotated function does not return control back to a "
"point in the call stack, the behavior is undefined."
msgstr ""

#: ../../../LangRef.rst:1535
msgid "``nosync``"
msgstr ""

#: ../../../LangRef.rst:1528
msgid ""
"This function attribute indicates that the function does not communicate "
"(synchronize) with another thread through memory or other well-defined "
"means. Synchronization is considered possible in the presence of `atomic` "
"accesses that enforce an order, thus not \"unordered\" and \"monotonic\", "
"`volatile` accesses, as well as `convergent` function calls. Note that "
"through `convergent` function calls non-memory communication, e.g., cross-"
"lane operations, are possible and are also considered synchronization. "
"However `convergent` does not contradict `nosync`. If an annotated function "
"does ever synchronize with another thread, the behavior is undefined."
msgstr ""

#: ../../../LangRef.rst:1542
msgid "``nounwind``"
msgstr ""

#: ../../../LangRef.rst:1538
msgid ""
"This function attribute indicates that the function never raises an "
"exception. If the function does raise an exception, its runtime behavior is "
"undefined. However, functions marked nounwind may still trap or generate "
"asynchronous exceptions. Exception handling schemes that are recognized by "
"LLVM to handle asynchronous exceptions, such as SEH, will still provide "
"their implementation defined semantics."
msgstr ""

#: ../../../LangRef.rst:1550
msgid "``\"null-pointer-is-valid\"``"
msgstr ""

#: ../../../LangRef.rst:1545
msgid ""
"If ``\"null-pointer-is-valid\"`` is set to ``\"true\"``, then ``null`` "
"address in address-space 0 is considered to be a valid address for memory "
"loads and stores. Any analysis or optimization should not treat "
"dereferencing a pointer to ``null`` as undefined behavior in this function. "
"Note: Comparing address of a global variable to ``null`` may still evaluate "
"to false because of a limitation in querying this attribute inside constant "
"expressions."
msgstr ""

#: ../../../LangRef.rst:1553
msgid "``optforfuzzing``"
msgstr ""

#: ../../../LangRef.rst:1553
msgid ""
"This attribute indicates that this function should be optimized for maximum "
"fuzzing signal."
msgstr ""

#: ../../../LangRef.rst:1565
msgid "``optnone``"
msgstr ""

#: ../../../LangRef.rst:1556
msgid ""
"This function attribute indicates that most optimization passes will skip "
"this function, with the exception of interprocedural optimization passes. "
"Code generation defaults to the \"fast\" instruction selector. This "
"attribute cannot be used together with the ``alwaysinline`` attribute; this "
"attribute is also incompatible with the ``minsize`` attribute and the "
"``optsize`` attribute."
msgstr ""

#: ../../../LangRef.rst:1563
msgid ""
"This attribute requires the ``noinline`` attribute to be specified on the "
"function as well, so the function is never inlined into any caller. Only "
"functions with the ``alwaysinline`` attribute are valid candidates for "
"inlining into the body of this function."
msgstr ""

#: ../../../LangRef.rst:1570
msgid "``optsize``"
msgstr ""

#: ../../../LangRef.rst:1568
msgid ""
"This attribute suggests that optimization passes and code generator passes "
"make choices that keep the code size of this function low, and otherwise do "
"optimizations specifically to reduce code size as long as they do not "
"significantly impact runtime performance."
msgstr ""

#: ../../../LangRef.rst:1595
msgid "``\"patchable-function\"``"
msgstr ""

#: ../../../LangRef.rst:1573
msgid ""
"This attribute tells the code generator that the code generated for this "
"function needs to follow certain conventions that make it possible for a "
"runtime function to patch over it later. The exact effect of this attribute "
"depends on its string value, for which there currently is one legal "
"possibility:"
msgstr ""

#: ../../../LangRef.rst:1579
msgid ""
"``\"prologue-short-redirect\"`` - This style of patchable function is "
"intended to support patching a function prologue to redirect control away "
"from the function in a thread safe manner.  It guarantees that the first "
"instruction of the function will be large enough to accommodate a short jump "
"instruction, and will be sufficiently aligned to allow being fully changed "
"via an atomic compare-and-swap instruction. While the first requirement can "
"be satisfied by inserting large enough NOP, LLVM can and will try to re-"
"purpose an existing instruction (i.e. one that would have to be emitted "
"anyway) as the patchable instruction larger than a short jump."
msgstr ""

#: ../../../LangRef.rst:1591
msgid "``\"prologue-short-redirect\"`` is currently only supported on x86-64."
msgstr ""

#: ../../../LangRef.rst:1594
msgid ""
"This attribute by itself does not imply restrictions on inter-procedural "
"optimizations.  All of the semantic effects the patching may have to be "
"separately conveyed via the linkage type."
msgstr ""

#: ../../../LangRef.rst:1608
msgid "``\"probe-stack\"``"
msgstr ""

#: ../../../LangRef.rst:1598
msgid ""
"This attribute indicates that the function will trigger a guard region in "
"the end of the stack. It ensures that accesses to the stack must be no "
"further apart than the size of the guard region to a previous access of the "
"stack. It takes one required string value, the name of the stack probing "
"function that will be called."
msgstr ""

#: ../../../LangRef.rst:1604
msgid ""
"If a function that has a ``\"probe-stack\"`` attribute is inlined into a "
"function with another ``\"probe-stack\"`` attribute, the resulting function "
"has the ``\"probe-stack\"`` attribute of the caller. If a function that has "
"a ``\"probe-stack\"`` attribute is inlined into a function that has no "
"``\"probe-stack\"`` attribute at all, the resulting function has the "
"``\"probe-stack\"`` attribute of the callee."
msgstr ""

#: ../../../LangRef.rst:1627
msgid "``readnone``"
msgstr ""

#: ../../../LangRef.rst:1611
msgid ""
"On a function, this attribute indicates that the function computes its "
"result (or decides to unwind an exception) based strictly on its arguments, "
"without dereferencing any pointer arguments or otherwise accessing any "
"mutable state (e.g. memory, control registers, etc) visible to caller "
"functions. It does not write through any pointer arguments (including "
"``byval`` arguments) and never changes any state visible to callers. This "
"means while it cannot unwind exceptions by calling the ``C++`` exception "
"throwing methods (since they write to memory), there may be non-``C++`` "
"mechanisms that throw exceptions without writing to LLVM visible memory."
msgstr ""

#: ../../../LangRef.rst:1622
msgid ""
"On an argument, this attribute indicates that the function does not "
"dereference that pointer argument, even though it may read or write the "
"memory that the pointer points to if accessed through other pointers."
msgstr ""

#: ../../../LangRef.rst:1626
msgid ""
"If a readnone function reads or writes memory visible to the program, or has "
"other side-effects, the behavior is undefined. If a function reads from or "
"writes to a readnone pointer argument, the behavior is undefined."
msgstr ""

#: ../../../LangRef.rst:1646
msgid "``readonly``"
msgstr ""

#: ../../../LangRef.rst:1630
msgid ""
"On a function, this attribute indicates that the function does not write "
"through any pointer arguments (including ``byval`` arguments) or otherwise "
"modify any state (e.g. memory, control registers, etc) visible to caller "
"functions. It may dereference pointer arguments and read state that may be "
"set in the caller. A readonly function always returns the same value (or "
"unwinds an exception identically) when called with the same set of arguments "
"and global state.  This means while it cannot unwind exceptions by calling "
"the ``C++`` exception throwing methods (since they write to memory), there "
"may be non-``C++`` mechanisms that throw exceptions without writing to LLVM "
"visible memory."
msgstr ""

#: ../../../LangRef.rst:1641
msgid ""
"On an argument, this attribute indicates that the function does not write "
"through this pointer argument, even though it may write to the memory that "
"the pointer points to."
msgstr ""

#: ../../../LangRef.rst:1645
msgid ""
"If a readonly function writes memory visible to the program, or has other "
"side-effects, the behavior is undefined. If a function writes to a readonly "
"pointer argument, the behavior is undefined."
msgstr ""

#: ../../../LangRef.rst:1661
msgid "``\"stack-probe-size\"``"
msgstr ""

#: ../../../LangRef.rst:1649
msgid ""
"This attribute controls the behavior of stack probes: either the ``\"probe-"
"stack\"`` attribute, or ABI-required stack probes, if any. It defines the "
"size of the guard region. It ensures that if the function may use more stack "
"space than the size of the guard region, stack probing sequence will be "
"emitted. It takes one required integer value, which is 4096 by default."
msgstr ""

#: ../../../LangRef.rst:1656
msgid ""
"If a function that has a ``\"stack-probe-size\"`` attribute is inlined into "
"a function with another ``\"stack-probe-size\"`` attribute, the resulting "
"function has the ``\"stack-probe-size\"`` attribute that has the lower "
"numeric value. If a function that has a ``\"stack-probe-size\"`` attribute "
"is inlined into a function that has no ``\"stack-probe-size\"`` attribute at "
"all, the resulting function has the ``\"stack-probe-size\"`` attribute of "
"the callee."
msgstr ""

#: ../../../LangRef.rst:1663
msgid "``\"no-stack-arg-probe\"``"
msgstr ""

#: ../../../LangRef.rst:1664
msgid "This attribute disables ABI-required stack probes, if any."
msgstr ""

#: ../../../LangRef.rst:1674
msgid "``writeonly``"
msgstr ""

#: ../../../LangRef.rst:1666
msgid ""
"On a function, this attribute indicates that the function may write to but "
"does not read from memory."
msgstr ""

#: ../../../LangRef.rst:1669
msgid ""
"On an argument, this attribute indicates that the function may write to but "
"does not read through this pointer argument (even though it may read from "
"the memory that the pointer points to)."
msgstr ""

#: ../../../LangRef.rst:1673
msgid ""
"If a writeonly function reads memory visible to the program, or has other "
"side-effects, the behavior is undefined. If a function reads from a "
"writeonly pointer argument, the behavior is undefined."
msgstr ""

#: ../../../LangRef.rst:1686
msgid "``argmemonly``"
msgstr ""

#: ../../../LangRef.rst:1677
msgid ""
"This attribute indicates that the only memory accesses inside function are "
"loads and stores from objects pointed to by its pointer-typed arguments, "
"with arbitrary offsets. Or in other words, all memory operations in the "
"function can refer to memory only using pointers based on its function "
"arguments."
msgstr ""

#: ../../../LangRef.rst:1683
msgid ""
"Note that ``argmemonly`` can be used together with ``readonly`` attribute in "
"order to specify that function reads only from its arguments."
msgstr ""

#: ../../../LangRef.rst:1686
msgid ""
"If an argmemonly function reads or writes memory other than the pointer "
"arguments, or has other side-effects, the behavior is undefined."
msgstr ""

#: ../../../LangRef.rst:1691
msgid "``returns_twice``"
msgstr ""

#: ../../../LangRef.rst:1689
msgid ""
"This attribute indicates that this function can return twice. The C "
"``setjmp`` is an example of such a function. The compiler disables some "
"optimizations (like tail calls) in the caller of these functions."
msgstr ""

#: ../../../LangRef.rst:1700
msgid "``safestack``"
msgstr ""

#: ../../../LangRef.rst:1694
msgid ""
"This attribute indicates that `SafeStack <http://clang.llvm.org/docs/"
"SafeStack.html>`_ protection is enabled for this function."
msgstr ""

#: ../../../LangRef.rst:1698
msgid ""
"If a function that has a ``safestack`` attribute is inlined into a function "
"that doesn't have a ``safestack`` attribute or which has an ``ssp``, "
"``sspstrong`` or ``sspreq`` attribute, then the resulting function will have "
"a ``safestack`` attribute."
msgstr ""

#: ../../../LangRef.rst:1703
msgid "``sanitize_address``"
msgstr ""

#: ../../../LangRef.rst:1703
msgid ""
"This attribute indicates that AddressSanitizer checks (dynamic address "
"safety analysis) are enabled for this function."
msgstr ""

#: ../../../LangRef.rst:1706
msgid "``sanitize_memory``"
msgstr ""

#: ../../../LangRef.rst:1706
msgid ""
"This attribute indicates that MemorySanitizer checks (dynamic detection of "
"accesses to uninitialized memory) are enabled for this function."
msgstr ""

#: ../../../LangRef.rst:1709
msgid "``sanitize_thread``"
msgstr ""

#: ../../../LangRef.rst:1709
msgid ""
"This attribute indicates that ThreadSanitizer checks (dynamic thread safety "
"analysis) are enabled for this function."
msgstr ""

#: ../../../LangRef.rst:1713
msgid "``sanitize_hwaddress``"
msgstr ""

#: ../../../LangRef.rst:1712
msgid ""
"This attribute indicates that HWAddressSanitizer checks (dynamic address "
"safety analysis based on tagged pointers) are enabled for this function."
msgstr ""

#: ../../../LangRef.rst:1717
msgid "``sanitize_memtag``"
msgstr ""

#: ../../../LangRef.rst:1716
msgid ""
"This attribute indicates that MemTagSanitizer checks (dynamic address safety "
"analysis based on Armv8 MTE) are enabled for this function."
msgstr ""

#: ../../../LangRef.rst:1735
msgid "``speculative_load_hardening``"
msgstr ""

#: ../../../LangRef.rst:1720
msgid ""
"This attribute indicates that `Speculative Load Hardening <https://llvm.org/"
"docs/SpeculativeLoadHardening.html>`_ should be enabled for the function "
"body."
msgstr ""

#: ../../../LangRef.rst:1724
msgid ""
"Speculative Load Hardening is a best-effort mitigation against information "
"leak attacks that make use of control flow miss-speculation - specifically "
"miss-speculation of whether a branch is taken or not. Typically "
"vulnerabilities enabling such attacks are classified as \"Spectre variant "
"#1\". Notably, this does not attempt to mitigate against miss-speculation of "
"branch target, classified as \"Spectre variant #2\" vulnerabilities."
msgstr ""

#: ../../../LangRef.rst:1732
msgid ""
"When inlining, the attribute is sticky. Inlining a function that carries "
"this attribute will cause the caller to gain the attribute. This is intended "
"to provide a maximally conservative model where the code in a function "
"annotated with this attribute will always (even after inlining) end up "
"hardened."
msgstr ""

#: ../../../LangRef.rst:1746
msgid "``speculatable``"
msgstr ""

#: ../../../LangRef.rst:1738
msgid ""
"This function attribute indicates that the function does not have any "
"effects besides calculating its result and does not have undefined behavior. "
"Note that ``speculatable`` is not enough to conclude that along any "
"particular execution path the number of calls to this function will not be "
"externally observable. This attribute is only valid on functions and "
"declarations, not on individual call sites. If a function is incorrectly "
"marked as speculatable and really does exhibit undefined behavior, the "
"undefined behavior may be observed even if the call site is dead code."
msgstr ""

#: ../../../LangRef.rst:1765
msgid "``ssp``"
msgstr ""

#: ../../../LangRef.rst:1749
msgid ""
"This attribute indicates that the function should emit a stack smashing "
"protector. It is in the form of a \"canary\" --- a random value placed on "
"the stack before the local variables that's checked upon return from the "
"function to see if it has been overwritten. A heuristic is used to determine "
"if a function needs stack protectors or not. The heuristic used will enable "
"protectors for functions with:"
msgstr ""

#: ../../../LangRef.rst:1756
msgid "Character arrays larger than ``ssp-buffer-size`` (default 8)."
msgstr ""

#: ../../../LangRef.rst:1757
msgid "Aggregates containing character arrays larger than ``ssp-buffer-size``."
msgstr ""

#: ../../../LangRef.rst:1758
msgid ""
"Calls to alloca() with variable sizes or constant sizes greater than ``ssp-"
"buffer-size``."
msgstr ""

#: ../../../LangRef.rst:1761
msgid ""
"Variables that are identified as requiring a protector will be arranged on "
"the stack such that they are adjacent to the stack protector guard."
msgstr ""

#: ../../../LangRef.rst:1764
msgid ""
"If a function that has an ``ssp`` attribute is inlined into a function that "
"doesn't have an ``ssp`` attribute, then the resulting function will have an "
"``ssp`` attribute."
msgstr ""

#: ../../../LangRef.rst:1785
msgid "``sspreq``"
msgstr ""

#: ../../../LangRef.rst:1768
msgid ""
"This attribute indicates that the function should *always* emit a stack "
"smashing protector. This overrides the ``ssp`` function attribute."
msgstr ""

#: ../../../LangRef.rst:1772 ../../../LangRef.rst:1798
msgid ""
"Variables that are identified as requiring a protector will be arranged on "
"the stack such that they are adjacent to the stack protector guard. The "
"specific layout rules are:"
msgstr ""

#: ../../../LangRef.rst:1776 ../../../LangRef.rst:1802
msgid ""
"Large arrays and structures containing large arrays (``>= ssp-buffer-size``) "
"are closest to the stack protector."
msgstr ""

#: ../../../LangRef.rst:1778 ../../../LangRef.rst:1804
msgid ""
"Small arrays and structures containing small arrays (``< ssp-buffer-size``) "
"are 2nd closest to the protector."
msgstr ""

#: ../../../LangRef.rst:1780 ../../../LangRef.rst:1806
msgid ""
"Variables that have had their address taken are 3rd closest to the protector."
msgstr ""

#: ../../../LangRef.rst:1783
msgid ""
"If a function that has an ``sspreq`` attribute is inlined into a function "
"that doesn't have an ``sspreq`` attribute or which has an ``ssp`` or "
"``sspstrong`` attribute, then the resulting function will have an ``sspreq`` "
"attribute."
msgstr ""

#: ../../../LangRef.rst:1812
msgid "``sspstrong``"
msgstr ""

#: ../../../LangRef.rst:1788
msgid ""
"This attribute indicates that the function should emit a stack smashing "
"protector. This attribute causes a strong heuristic to be used when "
"determining if a function needs stack protectors. The strong heuristic will "
"enable protectors for functions with:"
msgstr ""

#: ../../../LangRef.rst:1793
msgid "Arrays of any size and type"
msgstr ""

#: ../../../LangRef.rst:1794
msgid "Aggregates containing an array of any size and type."
msgstr ""

#: ../../../LangRef.rst:1795
msgid "Calls to alloca()."
msgstr ""

#: ../../../LangRef.rst:1796
msgid "Local variables that have had their address taken."
msgstr ""

#: ../../../LangRef.rst:1809
msgid "This overrides the ``ssp`` function attribute."
msgstr ""

#: ../../../LangRef.rst:1811
msgid ""
"If a function that has an ``sspstrong`` attribute is inlined into a function "
"that doesn't have an ``sspstrong`` attribute, then the resulting function "
"will have an ``sspstrong`` attribute."
msgstr ""

#: ../../../LangRef.rst:1819
msgid "``strictfp``"
msgstr ""

#: ../../../LangRef.rst:1815
msgid ""
"This attribute indicates that the function was called from a scope that "
"requires strict floating-point semantics.  LLVM will not attempt any "
"optimizations that require assumptions about the floating-point rounding "
"mode or that might alter the state of floating-point status flags that might "
"otherwise be set or cleared by calling this function. LLVM will not "
"introduce any new floating-point instructions that may trap."
msgstr ""

#: ../../../LangRef.rst:1824
msgid "``\"thunk\"``"
msgstr ""

#: ../../../LangRef.rst:1822
msgid ""
"This attribute indicates that the function will delegate to some other "
"function with a tail call. The prototype of a thunk should not be used for "
"optimization purposes. The caller is expected to cast the thunk prototype to "
"match the thunk target prototype."
msgstr ""

#: ../../../LangRef.rst:1830
msgid "``uwtable``"
msgstr ""

#: ../../../LangRef.rst:1827
msgid ""
"This attribute indicates that the ABI being targeted requires that an unwind "
"table entry be produced for this function even if we can show that no "
"exceptions passes by it. This is normally the case for the ELF x86-64 abi, "
"but it can be disabled for some compilation units."
msgstr ""

#: ../../../LangRef.rst:1836
msgid "``nocf_check``"
msgstr ""

#: ../../../LangRef.rst:1833
msgid ""
"This attribute indicates that no control-flow check will be performed on the "
"attributed entity. It disables -fcf-protection=<> for a specific entity to "
"fine grain the HW control flow protection mechanism. The flag is target "
"independent and currently appertains to a function or function pointer."
msgstr ""

#: ../../../LangRef.rst:1842
msgid "``shadowcallstack``"
msgstr ""

#: ../../../LangRef.rst:1839
msgid ""
"This attribute indicates that the ShadowCallStack checks are enabled for the "
"function. The instrumentation checks that the return address for the "
"function has not changed between the function prolog and eiplog. It is "
"currently x86_64-specific."
msgstr ""

#: ../../../LangRef.rst:1847
msgid "Global Attributes"
msgstr ""

#: ../../../LangRef.rst:1849
msgid ""
"Attributes may be set to communicate additional information about a global "
"variable. Unlike :ref:`function attributes <fnattrs>`, attributes on a "
"global variable are grouped into a single :ref:`attribute group <attrgrp>`."
msgstr ""

#: ../../../LangRef.rst:1856
msgid "Operand Bundles"
msgstr ""

#: ../../../LangRef.rst:1858
msgid ""
"Operand bundles are tagged sets of SSA values that can be associated with "
"certain LLVM instructions (currently only ``call`` s and ``invoke`` s).  In "
"a way they are like metadata, but dropping them is incorrect and will change "
"program semantics."
msgstr ""

#: ../../../LangRef.rst:1870
msgid ""
"Operand bundles are **not** part of a function's signature, and a given "
"function may be called from multiple places with different kinds of operand "
"bundles.  This reflects the fact that the operand bundles are conceptually a "
"part of the ``call`` (or ``invoke``), not the callee being dispatched to."
msgstr ""

#: ../../../LangRef.rst:1876
msgid ""
"Operand bundles are a generic mechanism intended to support runtime-"
"introspection-like functionality for managed languages.  While the exact "
"semantics of an operand bundle depend on the bundle tag, there are certain "
"limitations to how much the presence of an operand bundle can influence the "
"semantics of a program.  These restrictions are described as the semantics "
"of an \"unknown\" operand bundle.  As long as the behavior of an operand "
"bundle is describable within these restrictions, LLVM does not need to have "
"special knowledge of the operand bundle to not miscompile programs "
"containing it."
msgstr ""

#: ../../../LangRef.rst:1886
msgid ""
"The bundle operands for an unknown operand bundle escape in unknown ways "
"before control is transferred to the callee or invokee."
msgstr ""

#: ../../../LangRef.rst:1888
msgid ""
"Calls and invokes with operand bundles have unknown read / write effect on "
"the heap on entry and exit (even if the call target is ``readnone`` or "
"``readonly``), unless they're overridden with callsite specific attributes."
msgstr ""

#: ../../../LangRef.rst:1892
msgid ""
"An operand bundle at a call site cannot change the implementation of the "
"called function.  Inter-procedural optimizations work as usual as long as "
"they take into account the first two properties."
msgstr ""

#: ../../../LangRef.rst:1896
msgid "More specific types of operand bundles are described below."
msgstr ""

#: ../../../LangRef.rst:1901
msgid "Deoptimization Operand Bundles"
msgstr ""

#: ../../../LangRef.rst:1903
msgid ""
"Deoptimization operand bundles are characterized by the ``\"deopt\"`` "
"operand bundle tag.  These operand bundles represent an alternate \"safe\" "
"continuation for the call site they're attached to, and can be used by a "
"suitable runtime to deoptimize the compiled frame at the specified call "
"site.  There can be at most one ``\"deopt\"`` operand bundle attached to a "
"call site.  Exact details of deoptimization is out of scope for the language "
"reference, but it usually involves rewriting a compiled frame into a set of "
"interpreted frames."
msgstr ""

#: ../../../LangRef.rst:1912
msgid ""
"From the compiler's perspective, deoptimization operand bundles make the "
"call sites they're attached to at least ``readonly``.  They read through all "
"of their pointer typed operands (even if they're not otherwise escaped) and "
"the entire visible heap.  Deoptimization operand bundles do not capture "
"their operands except during deoptimization, in which case control will not "
"be returned to the compiled frame."
msgstr ""

#: ../../../LangRef.rst:1920
msgid ""
"The inliner knows how to inline through calls that have deoptimization "
"operand bundles.  Just like inlining through a normal call site involves "
"composing the normal and exceptional continuations, inlining through a call "
"site with a deoptimization operand bundle needs to appropriately compose the "
"\"safe\" deoptimization continuation.  The inliner does this by prepending "
"the parent's deoptimization continuation to every deoptimization "
"continuation in the inlined body. E.g. inlining ``@f`` into ``@g`` in the "
"following example"
msgstr ""

#: ../../../LangRef.rst:1943
msgid "will result in"
msgstr ""

#: ../../../LangRef.rst:1954
msgid ""
"It is the frontend's responsibility to structure or encode the "
"deoptimization state in a way that syntactically prepending the caller's "
"deoptimization state to the callee's deoptimization state is semantically "
"equivalent to composing the caller's deoptimization continuation after the "
"callee's deoptimization continuation."
msgstr ""

#: ../../../LangRef.rst:1963
msgid "Funclet Operand Bundles"
msgstr ""

#: ../../../LangRef.rst:1965
msgid ""
"Funclet operand bundles are characterized by the ``\"funclet\"`` operand "
"bundle tag.  These operand bundles indicate that a call site is within a "
"particular funclet.  There can be at most one ``\"funclet\"`` operand bundle "
"attached to a call site and it must have exactly one bundle operand."
msgstr ""

#: ../../../LangRef.rst:1971
msgid ""
"If any funclet EH pads have been \"entered\" but not \"exited\" (per the "
"`description in the EH doc\\ <ExceptionHandling.html#wineh-constraints>`_), "
"it is undefined behavior to execute a ``call`` or ``invoke`` which:"
msgstr ""

#: ../../../LangRef.rst:1975
msgid ""
"does not have a ``\"funclet\"`` bundle and is not a ``call`` to a nounwind "
"intrinsic, or"
msgstr ""

#: ../../../LangRef.rst:1977
msgid ""
"has a ``\"funclet\"`` bundle whose operand is not the most-recently-entered "
"not-yet-exited funclet EH pad."
msgstr ""

#: ../../../LangRef.rst:1980
msgid ""
"Similarly, if no funclet EH pads have been entered-but-not-yet-exited, "
"executing a ``call`` or ``invoke`` with a ``\"funclet\"`` bundle is "
"undefined behavior."
msgstr ""

#: ../../../LangRef.rst:1984
msgid "GC Transition Operand Bundles"
msgstr ""

#: ../../../LangRef.rst:1986
msgid ""
"GC transition operand bundles are characterized by the ``\"gc-transition\"`` "
"operand bundle tag. These operand bundles mark a call as a transition "
"between a function with one GC strategy to a function with a different GC "
"strategy. If coordinating the transition between GC strategies requires "
"additional code generation at the call site, these bundles may contain any "
"values that are needed by the generated code.  For more details, see :ref:"
"`GC Transitions <gc_transition_args>`."
msgstr ""

#: ../../../LangRef.rst:1998
msgid "Module-Level Inline Assembly"
msgstr ""

#: ../../../LangRef.rst:2000
msgid ""
"Modules may contain \"module-level inline asm\" blocks, which corresponds to "
"the GCC \"file scope inline asm\" blocks. These blocks are internally "
"concatenated by LLVM and treated as a single unit, but may be separated in "
"the ``.ll`` file if desired. The syntax is very simple:"
msgstr ""

#: ../../../LangRef.rst:2010
msgid ""
"The strings can contain any character by escaping non-printable characters. "
"The escape sequence used is simply \"\\\\xx\" where \"xx\" is the two digit "
"hex code for the number."
msgstr ""

#: ../../../LangRef.rst:2014
msgid ""
"Note that the assembly string *must* be parseable by LLVM's integrated "
"assembler (unless it is disabled), even when emitting a ``.s`` file."
msgstr ""

#: ../../../LangRef.rst:2020
msgid "Data Layout"
msgstr ""

#: ../../../LangRef.rst:2022
msgid ""
"A module may specify a target specific data layout string that specifies how "
"data is to be laid out in memory. The syntax for the data layout is simply:"
msgstr ""

#: ../../../LangRef.rst:2030
msgid ""
"The *layout specification* consists of a list of specifications separated by "
"the minus sign character ('-'). Each specification starts with a letter and "
"may include other information after the letter to define some aspect of the "
"data layout. The specifications accepted are as follows:"
msgstr ""

#: ../../../LangRef.rst:2038
msgid "``E``"
msgstr ""

#: ../../../LangRef.rst:2037
msgid ""
"Specifies that the target lays out data in big-endian form. That is, the "
"bits with the most significance have the lowest address location."
msgstr ""

#: ../../../LangRef.rst:2042
msgid "``e``"
msgstr ""

#: ../../../LangRef.rst:2041
msgid ""
"Specifies that the target lays out data in little-endian form. That is, the "
"bits with the least significance have the lowest address location."
msgstr ""

#: ../../../LangRef.rst:2049
msgid "``S<size>``"
msgstr ""

#: ../../../LangRef.rst:2045
msgid ""
"Specifies the natural alignment of the stack in bits. Alignment promotion of "
"stack variables is limited to the natural stack alignment to avoid dynamic "
"stack realignment. The stack alignment must be a multiple of 8-bits. If "
"omitted, the natural stack alignment defaults to \"unspecified\", which does "
"not prevent any alignment promotions."
msgstr ""

#: ../../../LangRef.rst:2056
msgid "``P<address space>``"
msgstr ""

#: ../../../LangRef.rst:2052
msgid ""
"Specifies the address space that corresponds to program memory. Harvard "
"architectures can use this to specify what space LLVM should place things "
"such as functions into. If omitted, the program memory space defaults to the "
"default address space of 0, which corresponds to a Von Neumann architecture "
"that has code and data in the same space."
msgstr ""

#: ../../../LangRef.rst:2059
msgid "``A<address space>``"
msgstr ""

#: ../../../LangRef.rst:2059
msgid ""
"Specifies the address space of objects created by '``alloca``'. Defaults to "
"the default address space of 0."
msgstr ""

#: ../../../LangRef.rst:2067
msgid "``p[n]:<size>:<abi>:<pref>:<idx>``"
msgstr ""

#: ../../../LangRef.rst:2062
msgid ""
"This specifies the *size* of a pointer and its ``<abi>`` and "
"``<pref>``\\erred alignments for address space ``n``. The fourth parameter "
"``<idx>`` is a size of index that used for address calculation. If not "
"specified, the default index size is equal to the pointer size. All sizes "
"are in bits. The address space, ``n``, is optional, and if not specified, "
"denotes the default address space 0. The value of ``n`` must be in the range "
"[1,2^23)."
msgstr ""

#: ../../../LangRef.rst:2070
msgid "``i<size>:<abi>:<pref>``"
msgstr ""

#: ../../../LangRef.rst:2070
msgid ""
"This specifies the alignment for an integer type of a given bit ``<size>``. "
"The value of ``<size>`` must be in the range [1,2^23)."
msgstr ""

#: ../../../LangRef.rst:2073
msgid "``v<size>:<abi>:<pref>``"
msgstr ""

#: ../../../LangRef.rst:2073
msgid ""
"This specifies the alignment for a vector type of a given bit ``<size>``."
msgstr ""

#: ../../../LangRef.rst:2079
msgid "``f<size>:<abi>:<pref>``"
msgstr ""

#: ../../../LangRef.rst:2076
msgid ""
"This specifies the alignment for a floating-point type of a given bit "
"``<size>``. Only values of ``<size>`` that are supported by the target will "
"work. 32 (float) and 64 (double) are supported on all targets; 80 or 128 "
"(different flavors of long double) are also supported on some targets."
msgstr ""

#: ../../../LangRef.rst:2081
msgid "``a:<abi>:<pref>``"
msgstr ""

#: ../../../LangRef.rst:2082
msgid "This specifies the alignment for an object of aggregate type."
msgstr ""

#: ../../../LangRef.rst:2089
msgid "``F<type><abi>``"
msgstr ""

#: ../../../LangRef.rst:2084
msgid ""
"This specifies the alignment for function pointers. The options for "
"``<type>`` are:"
msgstr ""

#: ../../../LangRef.rst:2087
msgid ""
"``i``: The alignment of function pointers is independent of the alignment of "
"functions, and is a multiple of ``<abi>``."
msgstr ""

#: ../../../LangRef.rst:2089
msgid ""
"``n``: The alignment of function pointers is a multiple of the explicit "
"alignment specified on the function, and is a multiple of ``<abi>``."
msgstr ""

#: ../../../LangRef.rst:2106
msgid "``m:<mangling>``"
msgstr ""

#: ../../../LangRef.rst:2092
msgid ""
"If present, specifies that llvm names are mangled in the output. Symbols "
"prefixed with the mangling escape character ``\\01`` are passed through "
"directly to the assembler without the escape character. The mangling style "
"options are"
msgstr ""

#: ../../../LangRef.rst:2097
msgid "``e``: ELF mangling: Private symbols get a ``.L`` prefix."
msgstr ""

#: ../../../LangRef.rst:2098
msgid "``m``: Mips mangling: Private symbols get a ``$`` prefix."
msgstr ""

#: ../../../LangRef.rst:2099
msgid ""
"``o``: Mach-O mangling: Private symbols get ``L`` prefix. Other symbols get "
"a ``_`` prefix."
msgstr ""

#: ../../../LangRef.rst:2101
msgid ""
"``x``: Windows x86 COFF mangling: Private symbols get the usual prefix. "
"Regular C symbols get a ``_`` prefix. Functions with ``__stdcall``, "
"``__fastcall``, and ``__vectorcall`` have custom mangling that appends "
"``@N`` where N is the number of bytes used to pass parameters. C++ symbols "
"starting with ``?`` are not mangled in any way."
msgstr ""

#: ../../../LangRef.rst:2106
msgid ""
"``w``: Windows COFF mangling: Similar to ``x``, except that normal C symbols "
"do not receive a ``_`` prefix."
msgstr ""

#: ../../../LangRef.rst:2112
msgid "``n<size1>:<size2>:<size3>...``"
msgstr ""

#: ../../../LangRef.rst:2109
msgid ""
"This specifies a set of native integer widths for the target CPU in bits. "
"For example, it might contain ``n32`` for 32-bit PowerPC, ``n32:64`` for "
"PowerPC 64, or ``n8:16:32:64`` for X86-64. Elements of this set are "
"considered to support most general arithmetic operations efficiently."
msgstr ""

#: ../../../LangRef.rst:2117
msgid "``ni:<address space0>:<address space1>:<address space2>...``"
msgstr ""

#: ../../../LangRef.rst:2115
msgid ""
"This specifies pointer types with the specified address spaces as :ref:`Non-"
"Integral Pointer Type <nointptrtype>` s.  The ``0`` address space cannot be "
"specified as non-integral."
msgstr ""

#: ../../../LangRef.rst:2119
msgid ""
"On every specification that takes a ``<abi>:<pref>``, specifying the "
"``<pref>`` alignment is optional. If omitted, the preceding ``:`` should be "
"omitted too and ``<pref>`` will be equal to ``<abi>``."
msgstr ""

#: ../../../LangRef.rst:2123
msgid ""
"When constructing the data layout for a given target, LLVM starts with a "
"default set of specifications which are then (possibly) overridden by the "
"specifications in the ``datalayout`` keyword. The default specifications are "
"given in this list:"
msgstr ""

#: ../../../LangRef.rst:2128
msgid "``E`` - big endian"
msgstr ""

#: ../../../LangRef.rst:2129
msgid "``p:64:64:64`` - 64-bit pointers with 64-bit alignment."
msgstr ""

#: ../../../LangRef.rst:2130
msgid ""
"``p[n]:64:64:64`` - Other address spaces are assumed to be the same as the "
"default address space."
msgstr ""

#: ../../../LangRef.rst:2132
msgid "``S0`` - natural stack alignment is unspecified"
msgstr ""

#: ../../../LangRef.rst:2133
msgid "``i1:8:8`` - i1 is 8-bit (byte) aligned"
msgstr ""

#: ../../../LangRef.rst:2134
msgid "``i8:8:8`` - i8 is 8-bit (byte) aligned"
msgstr ""

#: ../../../LangRef.rst:2135
msgid "``i16:16:16`` - i16 is 16-bit aligned"
msgstr ""

#: ../../../LangRef.rst:2136
msgid "``i32:32:32`` - i32 is 32-bit aligned"
msgstr ""

#: ../../../LangRef.rst:2137
msgid ""
"``i64:32:64`` - i64 has ABI alignment of 32-bits but preferred alignment of "
"64-bits"
msgstr ""

#: ../../../LangRef.rst:2139
msgid "``f16:16:16`` - half is 16-bit aligned"
msgstr ""

#: ../../../LangRef.rst:2140
msgid "``f32:32:32`` - float is 32-bit aligned"
msgstr ""

#: ../../../LangRef.rst:2141
msgid "``f64:64:64`` - double is 64-bit aligned"
msgstr ""

#: ../../../LangRef.rst:2142
msgid "``f128:128:128`` - quad is 128-bit aligned"
msgstr ""

#: ../../../LangRef.rst:2143
msgid "``v64:64:64`` - 64-bit vector is 64-bit aligned"
msgstr ""

#: ../../../LangRef.rst:2144
msgid "``v128:128:128`` - 128-bit vector is 128-bit aligned"
msgstr ""

#: ../../../LangRef.rst:2145
msgid "``a:0:64`` - aggregates are 64-bit aligned"
msgstr ""

#: ../../../LangRef.rst:2147
msgid ""
"When LLVM is determining the alignment for a given type, it uses the "
"following rules:"
msgstr ""

#: ../../../LangRef.rst:2150
msgid ""
"If the type sought is an exact match for one of the specifications, that "
"specification is used."
msgstr ""

#: ../../../LangRef.rst:2152
msgid ""
"If no match is found, and the type sought is an integer type, then the "
"smallest integer type that is larger than the bitwidth of the sought type is "
"used. If none of the specifications are larger than the bitwidth then the "
"largest integer type is used. For example, given the default specifications "
"above, the i7 type will use the alignment of i8 (next largest) while both "
"i65 and i256 will use the alignment of i64 (largest specified)."
msgstr ""

#: ../../../LangRef.rst:2159
msgid ""
"If no match is found, and the type sought is a vector type, then the largest "
"vector type that is smaller than the sought vector type will be used as a "
"fall back. This happens because <128 x double> can be implemented in terms "
"of 64 <2 x double>, for example."
msgstr ""

#: ../../../LangRef.rst:2164
msgid ""
"The function of the data layout string may not be what you expect. Notably, "
"this is not a specification from the frontend of what alignment the code "
"generator should use."
msgstr ""

#: ../../../LangRef.rst:2168
msgid ""
"Instead, if specified, the target data layout is required to match what the "
"ultimate *code generator* expects. This string is used by the mid-level "
"optimizers to improve code, and this only works if it matches what the "
"ultimate code generator uses. There is no way to generate IR that does not "
"embed this target-specific detail into the IR. If you don't specify the "
"string, the default specifications will be used to generate a Data Layout "
"and the optimization phases will operate accordingly and introduce target "
"specificity into the IR with respect to these default specifications."
msgstr ""

#: ../../../LangRef.rst:2181
msgid "Target Triple"
msgstr ""

#: ../../../LangRef.rst:2183
msgid ""
"A module may specify a target triple string that describes the target host. "
"The syntax for the target triple is simply:"
msgstr ""

#: ../../../LangRef.rst:2190
msgid ""
"The *target triple* string consists of a series of identifiers delimited by "
"the minus sign character ('-'). The canonical forms are:"
msgstr ""

#: ../../../LangRef.rst:2198
msgid ""
"This information is passed along to the backend so that it generates code "
"for the proper architecture. It's possible to override this on the command "
"line with the ``-mtriple`` command line option."
msgstr ""

#: ../../../LangRef.rst:2205
msgid "Pointer Aliasing Rules"
msgstr ""

#: ../../../LangRef.rst:2207
msgid ""
"Any memory access must be done through a pointer value associated with an "
"address range of the memory access, otherwise the behavior is undefined. "
"Pointer values are associated with address ranges according to the following "
"rules:"
msgstr ""

#: ../../../LangRef.rst:2212
msgid ""
"A pointer value is associated with the addresses associated with any value "
"it is *based* on."
msgstr ""

#: ../../../LangRef.rst:2214
msgid ""
"An address of a global variable is associated with the address range of the "
"variable's storage."
msgstr ""

#: ../../../LangRef.rst:2216
msgid ""
"The result value of an allocation instruction is associated with the address "
"range of the allocated storage."
msgstr ""

#: ../../../LangRef.rst:2218
msgid ""
"A null pointer in the default address-space is associated with no address."
msgstr ""

#: ../../../LangRef.rst:2220
msgid ""
"An :ref:`undef value <undefvalues>` in *any* address-space is associated "
"with no address."
msgstr ""

#: ../../../LangRef.rst:2222
msgid ""
"An integer constant other than zero or a pointer value returned from a "
"function not defined within LLVM may be associated with address ranges "
"allocated through mechanisms other than those provided by LLVM. Such ranges "
"shall not overlap with any ranges of addresses allocated by mechanisms "
"provided by LLVM."
msgstr ""

#: ../../../LangRef.rst:2228
msgid ""
"A pointer value is *based* on another pointer value according to the "
"following rules:"
msgstr ""

#: ../../../LangRef.rst:2231
msgid ""
"A pointer value formed from a scalar ``getelementptr`` operation is *based* "
"on the pointer-typed operand of the ``getelementptr``."
msgstr ""

#: ../../../LangRef.rst:2233
msgid ""
"The pointer in lane *l* of the result of a vector ``getelementptr`` "
"operation is *based* on the pointer in lane *l* of the vector-of-pointers-"
"typed operand of the ``getelementptr``."
msgstr ""

#: ../../../LangRef.rst:2236
msgid ""
"The result value of a ``bitcast`` is *based* on the operand of the "
"``bitcast``."
msgstr ""

#: ../../../LangRef.rst:2238
msgid ""
"A pointer value formed by an ``inttoptr`` is *based* on all pointer values "
"that contribute (directly or indirectly) to the computation of the pointer's "
"value."
msgstr ""

#: ../../../LangRef.rst:2241
msgid "The \"*based* on\" relationship is transitive."
msgstr ""

#: ../../../LangRef.rst:2243
msgid ""
"Note that this definition of *\"based\"* is intentionally similar to the "
"definition of *\"based\"* in C99, though it is slightly weaker."
msgstr ""

#: ../../../LangRef.rst:2246
msgid ""
"LLVM IR does not associate types with memory. The result type of a ``load`` "
"merely indicates the size and alignment of the memory from which to load, as "
"well as the interpretation of the value. The first operand type of a "
"``store`` similarly only indicates the size and alignment of the store."
msgstr ""

#: ../../../LangRef.rst:2252
msgid ""
"Consequently, type-based alias analysis, aka TBAA, aka ``-fstrict-"
"aliasing``, is not applicable to general unadorned LLVM IR. :ref:`Metadata "
"<metadata>` may be used to encode additional information which specialized "
"optimization passes may use to implement type-based alias analysis."
msgstr ""

#: ../../../LangRef.rst:2261
msgid "Volatile Memory Accesses"
msgstr ""

#: ../../../LangRef.rst:2263
msgid ""
"Certain memory accesses, such as :ref:`load <i_load>`'s, :ref:`store "
"<i_store>`'s, and :ref:`llvm.memcpy <int_memcpy>`'s may be marked "
"``volatile``. The optimizers must not change the number of volatile "
"operations or change their order of execution relative to other volatile "
"operations. The optimizers *may* change the order of volatile operations "
"relative to non-volatile operations. This is not Java's \"volatile\" and has "
"no cross-thread synchronization behavior."
msgstr ""

#: ../../../LangRef.rst:2271
msgid ""
"A volatile load or store may have additional target-specific semantics. Any "
"volatile operation can have side effects, and any volatile operation can "
"read and/or modify state which is not accessible via a regular load or store "
"in this module. Volatile operations may use addresses which do not point to "
"memory (like MMIO registers). This means the compiler may not use a volatile "
"operation to prove a non-volatile access to that address has defined "
"behavior."
msgstr ""

#: ../../../LangRef.rst:2279
msgid ""
"The allowed side-effects for volatile accesses are limited.  If a non-"
"volatile store to a given address would be legal, a volatile operation may "
"modify the memory at that address. A volatile operation may not modify any "
"other memory accessible by the module being compiled. A volatile operation "
"may not call any code in the current module."
msgstr ""

#: ../../../LangRef.rst:2285
msgid ""
"The compiler may assume execution will continue after a volatile operation, "
"so operations which modify memory or may have undefined behavior can be "
"hoisted past a volatile operation."
msgstr ""

#: ../../../LangRef.rst:2289
msgid ""
"IR-level volatile loads and stores cannot safely be optimized into llvm."
"memcpy or llvm.memmove intrinsics even when those intrinsics are flagged "
"volatile. Likewise, the backend should never split or merge target-legal "
"volatile load/store instructions."
msgstr ""

#: ../../../LangRef.rst:2294
msgid "Rationale"
msgstr ""

#: ../../../LangRef.rst:2296
msgid ""
"Platforms may rely on volatile loads and stores of natively supported data "
"width to be executed as single instruction. For example, in C this holds for "
"an l-value of volatile primitive type with native hardware support, but not "
"necessarily for aggregate types. The frontend upholds these expectations, "
"which are intentionally unspecified in the IR. The rules above ensure that "
"IR transformations do not violate the frontend's contract with the language."
msgstr ""

#: ../../../LangRef.rst:2307
msgid "Memory Model for Concurrent Operations"
msgstr ""

#: ../../../LangRef.rst:2309
msgid ""
"The LLVM IR does not define any way to start parallel threads of execution "
"or to register signal handlers. Nonetheless, there are platform-specific "
"ways to create them, and we define LLVM IR's behavior in their presence. "
"This model is inspired by the C++0x memory model."
msgstr ""

#: ../../../LangRef.rst:2314
msgid "For a more informal introduction to this model, see the :doc:`Atomics`."
msgstr ""

#: ../../../LangRef.rst:2316
msgid ""
"We define a *happens-before* partial order as the least partial order that"
msgstr ""

#: ../../../LangRef.rst:2319
msgid "Is a superset of single-thread program order, and"
msgstr ""

#: ../../../LangRef.rst:2320
msgid ""
"When a *synchronizes-with* ``b``, includes an edge from ``a`` to ``b``. "
"*Synchronizes-with* pairs are introduced by platform-specific techniques, "
"like pthread locks, thread creation, thread joining, etc., and by atomic "
"instructions. (See also :ref:`Atomic Memory Ordering Constraints "
"<ordering>`)."
msgstr ""

#: ../../../LangRef.rst:2326
msgid ""
"Note that program order does not introduce *happens-before* edges between a "
"thread and signals executing inside that thread."
msgstr ""

#: ../../../LangRef.rst:2329
msgid ""
"Every (defined) read operation (load instructions, memcpy, atomic loads/read-"
"modify-writes, etc.) R reads a series of bytes written by (defined) write "
"operations (store instructions, atomic stores/read-modify-writes, memcpy, "
"etc.). For the purposes of this section, initialized globals are considered "
"to have a write of the initializer which is atomic and happens before any "
"other read or write of the memory in question. For each byte of a read R, "
"R\\ :sub:`byte` may see any write to the same byte, except:"
msgstr ""

#: ../../../LangRef.rst:2338
msgid ""
"If write\\ :sub:`1`  happens before write\\ :sub:`2`, and write\\ :sub:`2` "
"happens before R\\ :sub:`byte`, then R\\ :sub:`byte` does not see write\\ :"
"sub:`1`."
msgstr ""

#: ../../../LangRef.rst:2341
msgid ""
"If R\\ :sub:`byte` happens before write\\ :sub:`3`, then R\\ :sub:`byte` "
"does not see write\\ :sub:`3`."
msgstr ""

#: ../../../LangRef.rst:2344
msgid "Given that definition, R\\ :sub:`byte` is defined as follows:"
msgstr ""

#: ../../../LangRef.rst:2346
msgid ""
"If R is volatile, the result is target-dependent. (Volatile is supposed to "
"give guarantees which can support ``sig_atomic_t`` in C/C++, and may be used "
"for accesses to addresses that do not behave like normal memory. It does not "
"generally provide cross-thread synchronization.)"
msgstr ""

#: ../../../LangRef.rst:2351
msgid ""
"Otherwise, if there is no write to the same byte that happens before R\\ :"
"sub:`byte`, R\\ :sub:`byte` returns ``undef`` for that byte."
msgstr ""

#: ../../../LangRef.rst:2353
msgid ""
"Otherwise, if R\\ :sub:`byte` may see exactly one write, R\\ :sub:`byte` "
"returns the value written by that write."
msgstr ""

#: ../../../LangRef.rst:2355
msgid ""
"Otherwise, if R is atomic, and all the writes R\\ :sub:`byte` may see are "
"atomic, it chooses one of the values written. See the :ref:`Atomic Memory "
"Ordering Constraints <ordering>` section for additional constraints on how "
"the choice is made."
msgstr ""

#: ../../../LangRef.rst:2359
msgid "Otherwise R\\ :sub:`byte` returns ``undef``."
msgstr ""

#: ../../../LangRef.rst:2361
msgid ""
"R returns the value composed of the series of bytes it read. This implies "
"that some bytes within the value may be ``undef`` **without** the entire "
"value being ``undef``. Note that this only defines the semantics of the "
"operation; it doesn't mean that targets will emit more than one instruction "
"to read the series of bytes."
msgstr ""

#: ../../../LangRef.rst:2367
msgid ""
"Note that in cases where none of the atomic intrinsics are used, this model "
"places only one restriction on IR transformations on top of what is required "
"for single-threaded execution: introducing a store to a byte which might not "
"otherwise be stored is not allowed in general. (Specifically, in the case "
"where another thread might write to and read from an address, introducing a "
"store can change a load that may see exactly one write into a load that may "
"see multiple writes.)"
msgstr ""

#: ../../../LangRef.rst:2378
msgid "Atomic Memory Ordering Constraints"
msgstr ""

#: ../../../LangRef.rst:2380
msgid ""
"Atomic instructions (:ref:`cmpxchg <i_cmpxchg>`, :ref:`atomicrmw "
"<i_atomicrmw>`, :ref:`fence <i_fence>`, :ref:`atomic load <i_load>`, and :"
"ref:`atomic store <i_store>`) take ordering parameters that determine which "
"other atomic instructions on the same address they *synchronize with*. These "
"semantics are borrowed from Java and C++0x, but are somewhat more "
"colloquial. If these descriptions aren't precise enough, check those specs "
"(see spec references in the :doc:`atomics guide <Atomics>`). :ref:`fence "
"<i_fence>` instructions treat these orderings somewhat differently since "
"they don't take an address. See that instruction's documentation for details."
msgstr ""

#: ../../../LangRef.rst:2392
msgid ""
"For a simpler introduction to the ordering constraints, see the :doc:"
"`Atomics`."
msgstr ""

#: ../../../LangRef.rst:2400
msgid "``unordered``"
msgstr ""

#: ../../../LangRef.rst:2396
msgid ""
"The set of values that can be read is governed by the happens-before partial "
"order. A value cannot be read unless some operation wrote it. This is "
"intended to provide a guarantee strong enough to model Java's non-volatile "
"shared variables. This ordering cannot be specified for read-modify-write "
"operations; it is not strong enough to make them atomic in any interesting "
"way."
msgstr ""

#: ../../../LangRef.rst:2418
msgid "``monotonic``"
msgstr ""

#: ../../../LangRef.rst:2403
msgid ""
"In addition to the guarantees of ``unordered``, there is a single total "
"order for modifications by ``monotonic`` operations on each address. All "
"modification orders must be compatible with the happens-before order. There "
"is no guarantee that the modification orders can be combined to a global "
"total order for the whole program (and this often will not be possible). The "
"read in an atomic read-modify-write operation (:ref:`cmpxchg <i_cmpxchg>` "
"and :ref:`atomicrmw <i_atomicrmw>`) reads the value in the modification "
"order immediately before the value it writes. If one atomic read happens "
"before another atomic read of the same address, the later read must see the "
"same value or a later value in the address's modification order. This "
"disallows reordering of ``monotonic`` (or stronger) operations on the same "
"address. If an address is written ``monotonic``-ally by one thread, and "
"other threads ``monotonic``-ally read that address repeatedly, the other "
"threads must eventually see the write. This corresponds to the C++0x/C1x "
"``memory_order_relaxed``."
msgstr ""

#: ../../../LangRef.rst:2422
msgid "``acquire``"
msgstr ""

#: ../../../LangRef.rst:2421
msgid ""
"In addition to the guarantees of ``monotonic``, a *synchronizes-with* edge "
"may be formed with a ``release`` operation. This is intended to model C++'s "
"``memory_order_acquire``."
msgstr ""

#: ../../../LangRef.rst:2429
msgid "``release``"
msgstr ""

#: ../../../LangRef.rst:2425
msgid ""
"In addition to the guarantees of ``monotonic``, if this operation writes a "
"value which is subsequently read by an ``acquire`` operation, it "
"*synchronizes-with* that operation. (This isn't a complete description; see "
"the C++0x definition of a release sequence.) This corresponds to the C++0x/"
"C1x ``memory_order_release``."
msgstr ""

#: ../../../LangRef.rst:2432
msgid "``acq_rel`` (acquire+release)"
msgstr ""

#: ../../../LangRef.rst:2432
msgid ""
"Acts as both an ``acquire`` and ``release`` operation on its address. This "
"corresponds to the C++0x/C1x ``memory_order_acq_rel``."
msgstr ""

#: ../../../LangRef.rst:2443
msgid "``seq_cst`` (sequentially consistent)"
msgstr ""

#: ../../../LangRef.rst:2435
msgid ""
"In addition to the guarantees of ``acq_rel`` (``acquire`` for an operation "
"that only reads, ``release`` for an operation that only writes), there is a "
"global total order on all sequentially-consistent operations on all "
"addresses, which is consistent with the *happens-before* partial order and "
"with the modification orders of all the affected addresses. Each "
"sequentially-consistent read sees the last preceding write to the same "
"address in this global order. This corresponds to the C++0x/C1x "
"``memory_order_seq_cst`` and Java volatile."
msgstr ""

#: ../../../LangRef.rst:2447
msgid ""
"If an atomic operation is marked ``syncscope(\"singlethread\")``, it only "
"*synchronizes with* and only participates in the seq\\_cst total orderings "
"of other operations running in the same thread (for example, in signal "
"handlers)."
msgstr ""

#: ../../../LangRef.rst:2451
msgid ""
"If an atomic operation is marked ``syncscope(\"<target-scope>\")``, where "
"``<target-scope>`` is a target specific synchronization scope, then it is "
"target dependent if it *synchronizes with* and participates in the seq\\_cst "
"total orderings of other operations."
msgstr ""

#: ../../../LangRef.rst:2456
msgid ""
"Otherwise, an atomic operation that is not marked "
"``syncscope(\"singlethread\")`` or ``syncscope(\"<target-scope>\")`` "
"*synchronizes with* and participates in the seq\\_cst total orderings of "
"other operations that are not marked ``syncscope(\"singlethread\")`` or "
"``syncscope(\"<target-scope>\")``."
msgstr ""

#: ../../../LangRef.rst:2464
msgid "Floating-Point Environment"
msgstr ""

#: ../../../LangRef.rst:2466
msgid ""
"The default LLVM floating-point environment assumes that floating-point "
"instructions do not have side effects. Results assume the round-to-nearest "
"rounding mode. No floating-point exception state is maintained in this "
"environment. Therefore, there is no attempt to create or preserve invalid "
"operation (SNaN) or division-by-zero exceptions."
msgstr ""

#: ../../../LangRef.rst:2472
msgid ""
"The benefit of this exception-free assumption is that floating-point "
"operations may be speculated freely without any other fast-math relaxations "
"to the floating-point model."
msgstr ""

#: ../../../LangRef.rst:2476
msgid ""
"Code that requires different behavior than this should use the :ref:"
"`Constrained Floating-Point Intrinsics <constrainedfp>`."
msgstr ""

#: ../../../LangRef.rst:2482
msgid "Fast-Math Flags"
msgstr ""

#: ../../../LangRef.rst:2484
msgid ""
"LLVM IR floating-point operations (:ref:`fneg <i_fneg>`, :ref:`fadd "
"<i_fadd>`, :ref:`fsub <i_fsub>`, :ref:`fmul <i_fmul>`, :ref:`fdiv "
"<i_fdiv>`, :ref:`frem <i_frem>`, :ref:`fcmp <i_fcmp>`), :ref:`phi <i_phi>`, :"
"ref:`select <i_select>` and :ref:`call <i_call>` may use the following flags "
"to enable otherwise unsafe floating-point transformations."
msgstr ""

#: ../../../LangRef.rst:2494
msgid "``nnan``"
msgstr ""

#: ../../../LangRef.rst:2492
msgid ""
"No NaNs - Allow optimizations to assume the arguments and result are not "
"NaN. If an argument is a nan, or the result would be a nan, it produces a :"
"ref:`poison value <poisonvalues>` instead."
msgstr ""

#: ../../../LangRef.rst:2499
msgid "``ninf``"
msgstr ""

#: ../../../LangRef.rst:2497
msgid ""
"No Infs - Allow optimizations to assume the arguments and result are not +/-"
"Inf. If an argument is +/-Inf, or the result would be +/-Inf, it produces a :"
"ref:`poison value <poisonvalues>` instead."
msgstr ""

#: ../../../LangRef.rst:2503
msgid "``nsz``"
msgstr ""

#: ../../../LangRef.rst:2502
msgid ""
"No Signed Zeros - Allow optimizations to treat the sign of a zero argument "
"or result as insignificant."
msgstr ""

#: ../../../LangRef.rst:2507
msgid "``arcp``"
msgstr ""

#: ../../../LangRef.rst:2506
msgid ""
"Allow Reciprocal - Allow optimizations to use the reciprocal of an argument "
"rather than perform division."
msgstr ""

#: ../../../LangRef.rst:2511
msgid "``contract``"
msgstr ""

#: ../../../LangRef.rst:2510
msgid ""
"Allow floating-point contraction (e.g. fusing a multiply followed by an "
"addition into a fused multiply-and-add)."
msgstr ""

#: ../../../LangRef.rst:2516
msgid "``afn``"
msgstr ""

#: ../../../LangRef.rst:2514
msgid ""
"Approximate functions - Allow substitution of approximate calculations for "
"functions (sin, log, sqrt, etc). See floating-point intrinsic definitions "
"for places where this can apply to LLVM's intrinsic math functions."
msgstr ""

#: ../../../LangRef.rst:2520
msgid "``reassoc``"
msgstr ""

#: ../../../LangRef.rst:2519
msgid ""
"Allow reassociation transformations for floating-point instructions. This "
"may dramatically change results in floating-point."
msgstr ""

#: ../../../LangRef.rst:2523
msgid "``fast``"
msgstr ""

#: ../../../LangRef.rst:2523
msgid "This flag implies all of the others."
msgstr ""

#: ../../../LangRef.rst:2528
msgid "Use-list Order Directives"
msgstr ""

#: ../../../LangRef.rst:2530
msgid ""
"Use-list directives encode the in-memory order of each use-list, allowing "
"the order to be recreated. ``<order-indexes>`` is a comma-separated list of "
"indexes that are assigned to the referenced value's uses. The referenced "
"value's use-list is immediately sorted by these indexes."
msgstr ""

#: ../../../LangRef.rst:2535
msgid ""
"Use-list directives may appear at function scope or global scope. They are "
"not instructions, and have no effect on the semantics of the IR. When "
"they're at function scope, they must appear after the terminator of the "
"final basic block."
msgstr ""

#: ../../../LangRef.rst:2539
msgid ""
"If basic blocks have their address taken via ``blockaddress()`` expressions, "
"``uselistorder_bb`` can be used to reorder their use-lists from outside "
"their function's scope."
msgstr ""

#: ../../../LangRef.rst:0 ../../../LangRef.rst:13489 ../../../LangRef.rst:13537
#: ../../../LangRef.rst:13584 ../../../LangRef.rst:13632
#: ../../../LangRef.rst:13733 ../../../LangRef.rst:13793
#: ../../../LangRef.rst:13852 ../../../LangRef.rst:13922
#: ../../../LangRef.rst:13989 ../../../LangRef.rst:14049
msgid "Syntax"
msgstr ""

#: ../../../LangRef.rst:0 ../../../LangRef.rst:13523 ../../../LangRef.rst:13571
#: ../../../LangRef.rst:13618 ../../../LangRef.rst:13667
#: ../../../LangRef.rst:13777 ../../../LangRef.rst:13837
#: ../../../LangRef.rst:13896 ../../../LangRef.rst:13966
#: ../../../LangRef.rst:14033 ../../../LangRef.rst:14093
msgid "Examples"
msgstr ""

#: ../../../LangRef.rst:2574
msgid "Source Filename"
msgstr ""

#: ../../../LangRef.rst:2576
msgid ""
"The *source filename* string is set to the original module identifier, which "
"will be the name of the compiled source file when compiling from source "
"through the clang front end, for example. It is then preserved through the "
"IR and bitcode."
msgstr ""

#: ../../../LangRef.rst:2581
msgid ""
"This is currently necessary to generate a consistent unique global "
"identifier for local functions used in profile data, which prepends the "
"source file name to the local function name."
msgstr ""

#: ../../../LangRef.rst:2585
msgid "The syntax for the source file name is simply:"
msgstr ""

#: ../../../LangRef.rst:2594
msgid "Type System"
msgstr ""

#: ../../../LangRef.rst:2596
msgid ""
"The LLVM type system is one of the most important features of the "
"intermediate representation. Being typed enables a number of optimizations "
"to be performed on the intermediate representation directly, without having "
"to do extra analyses on the side before the transformation. A strong type "
"system makes it easier to read the generated code and enables novel analyses "
"and transformations that are not feasible to perform on normal three address "
"code representations."
msgstr ""

#: ../../../LangRef.rst:2607
msgid "Void Type"
msgstr ""

#: ../../../LangRef.rst:0 ../../../LangRef.rst:13502 ../../../LangRef.rst:13550
#: ../../../LangRef.rst:13597 ../../../LangRef.rst:13645
#: ../../../LangRef.rst:13746 ../../../LangRef.rst:13806
#: ../../../LangRef.rst:13865 ../../../LangRef.rst:13935
#: ../../../LangRef.rst:14002 ../../../LangRef.rst:14062
msgid "Overview"
msgstr ""

#: ../../../LangRef.rst:2612
msgid "The void type does not represent any value and has no size."
msgstr ""

#: ../../../LangRef.rst:2625
msgid "Function Type"
msgstr ""

#: ../../../LangRef.rst:2630
msgid ""
"The function type can be thought of as a function signature. It consists of "
"a return type and a list of formal parameter types. The return type of a "
"function type is a void type or first class type --- except for :ref:`label "
"<t_label>` and :ref:`metadata <t_metadata>` types."
msgstr ""

#: ../../../LangRef.rst:2641
msgid ""
"...where '``<parameter list>``' is a comma-separated list of type "
"specifiers. Optionally, the parameter list may include a type ``...``, which "
"indicates that the function takes a variable number of arguments. Variable "
"argument functions can access their arguments with the :ref:`variable "
"argument handling intrinsic <int_varargs>` functions. '``<returntype>``' is "
"any type except :ref:`label <t_label>` and :ref:`metadata <t_metadata>`."
msgstr ""

#: ../../../LangRef.rst:2651
msgid "``i32 (i32)``"
msgstr ""

#: ../../../LangRef.rst:2651
msgid "function taking an ``i32``, returning an ``i32``"
msgstr ""

#: ../../../LangRef.rst:2653
msgid "``float (i16, i32 *) *``"
msgstr ""

#: ../../../LangRef.rst:2653
msgid ""
":ref:`Pointer <t_pointer>` to a function that takes an ``i16`` and a :ref:"
"`pointer <t_pointer>` to ``i32``, returning ``float``."
msgstr ""

#: ../../../LangRef.rst:2655
msgid "``i32 (i8*, ...)``"
msgstr ""

#: ../../../LangRef.rst:2655
msgid ""
"A vararg function that takes at least one :ref:`pointer <t_pointer>` to "
"``i8`` (char in C), which returns an integer. This is the signature for "
"``printf`` in LLVM."
msgstr ""

#: ../../../LangRef.rst:2657
msgid "``{i32, i32} (i32)``"
msgstr ""

#: ../../../LangRef.rst:2657
msgid ""
"A function taking an ``i32``, returning a :ref:`structure <t_struct>` "
"containing two ``i32`` values"
msgstr ""

#: ../../../LangRef.rst:2663
msgid "First Class Types"
msgstr ""

#: ../../../LangRef.rst:2665
msgid ""
"The :ref:`first class <t_firstclass>` types are perhaps the most important. "
"Values of these types are the only ones which can be produced by "
"instructions."
msgstr ""

#: ../../../LangRef.rst:2672
msgid "Single Value Types"
msgstr ""

#: ../../../LangRef.rst:2674
msgid ""
"These are the types that are valid in registers from CodeGen's perspective."
msgstr ""

#: ../../../LangRef.rst:2679
msgid "Integer Type"
msgstr ""

#: ../../../LangRef.rst:2683
msgid ""
"The integer type is a very simple type that simply specifies an arbitrary "
"bit width for the integer type desired. Any bit width from 1 bit to 2\\ :sup:"
"`23`\\ -1 (about 8 million) can be specified."
msgstr ""

#: ../../../LangRef.rst:2693
msgid ""
"The number of bits the integer will occupy is specified by the ``N`` value."
msgstr ""

#: ../../../LangRef.rst:2697 ../../../LangRef.rst:5222
#: ../../../LangRef.rst:5930 ../../../LangRef.rst:8771
#: ../../../LangRef.rst:13212 ../../../LangRef.rst:13262
#: ../../../LangRef.rst:13313 ../../../LangRef.rst:13364
#: ../../../LangRef.rst:13415 ../../../LangRef.rst:13466
#: ../../../LangRef.rst:14222 ../../../LangRef.rst:14291
#: ../../../LangRef.rst:14352 ../../../LangRef.rst:14717
#: ../../../LangRef.rst:14759
msgid "Examples:"
msgstr ""

#: ../../../LangRef.rst:2700
msgid "``i1``"
msgstr ""

#: ../../../LangRef.rst:2700
msgid "a single-bit integer."
msgstr ""

#: ../../../LangRef.rst:2702
msgid "``i32``"
msgstr ""

#: ../../../LangRef.rst:2702
msgid "a 32-bit integer."
msgstr ""

#: ../../../LangRef.rst:2704
msgid "``i1942652``"
msgstr ""

#: ../../../LangRef.rst:2704
msgid "a really big integer of over 1 million bits."
msgstr ""

#: ../../../LangRef.rst:2710
msgid "Floating-Point Types"
msgstr ""

#: ../../../LangRef.rst:2715
msgid "Type"
msgstr ""

#: ../../../LangRef.rst:2716
msgid "Description"
msgstr "Description"

#: ../../../LangRef.rst:2718
msgid "``half``"
msgstr ""

#: ../../../LangRef.rst:2719
msgid "16-bit floating-point value"
msgstr ""

#: ../../../LangRef.rst:2721
msgid "``float``"
msgstr ""

#: ../../../LangRef.rst:2722
msgid "32-bit floating-point value"
msgstr ""

#: ../../../LangRef.rst:2724
msgid "``double``"
msgstr ""

#: ../../../LangRef.rst:2725
msgid "64-bit floating-point value"
msgstr ""

#: ../../../LangRef.rst:2727
msgid "``fp128``"
msgstr ""

#: ../../../LangRef.rst:2728
msgid "128-bit floating-point value (112-bit mantissa)"
msgstr ""

#: ../../../LangRef.rst:2730
msgid "``x86_fp80``"
msgstr ""

#: ../../../LangRef.rst:2731
msgid "80-bit floating-point value (X87)"
msgstr ""

#: ../../../LangRef.rst:2733
msgid "``ppc_fp128``"
msgstr ""

#: ../../../LangRef.rst:2734
msgid "128-bit floating-point value (two 64-bits)"
msgstr ""

#: ../../../LangRef.rst:2736
msgid ""
"The binary format of half, float, double, and fp128 correspond to the "
"IEEE-754-2008 specifications for binary16, binary32, binary64, and binary128 "
"respectively."
msgstr ""

#: ../../../LangRef.rst:2741
msgid "X86_mmx Type"
msgstr ""

#: ../../../LangRef.rst:2745
msgid ""
"The x86_mmx type represents a value held in an MMX register on an x86 "
"machine. The operations allowed on it are quite limited: parameters and "
"return values, load and store, and bitcast. User-specified MMX instructions "
"are represented as intrinsic or asm calls with arguments and/or results of "
"this type. There are no arrays, vectors or constants of this type."
msgstr ""

#: ../../../LangRef.rst:2762
msgid "Pointer Type"
msgstr ""

#: ../../../LangRef.rst:2766
msgid ""
"The pointer type is used to specify memory locations. Pointers are commonly "
"used to reference objects in memory."
msgstr ""

#: ../../../LangRef.rst:2769
msgid ""
"Pointer types may have an optional address space attribute defining the "
"numbered address space where the pointed-to object resides. The default "
"address space is number zero. The semantics of non-zero address spaces are "
"target-specific."
msgstr ""

#: ../../../LangRef.rst:2774
msgid ""
"Note that LLVM does not permit pointers to void (``void*``) nor does it "
"permit pointers to labels (``label*``). Use ``i8*`` instead."
msgstr ""

#: ../../../LangRef.rst:2786
msgid "``[4 x i32]*``"
msgstr ""

#: ../../../LangRef.rst:2786
msgid ""
"A :ref:`pointer <t_pointer>` to :ref:`array <t_array>` of four ``i32`` "
"values."
msgstr ""

#: ../../../LangRef.rst:2788
msgid "``i32 (i32*) *``"
msgstr ""

#: ../../../LangRef.rst:2788
msgid ""
"A :ref:`pointer <t_pointer>` to a :ref:`function <t_function>` that takes an "
"``i32*``, returning an ``i32``."
msgstr ""

#: ../../../LangRef.rst:2790
msgid "``i32 addrspace(5)*``"
msgstr ""

#: ../../../LangRef.rst:2790
msgid ""
"A :ref:`pointer <t_pointer>` to an ``i32`` value that resides in address "
"space #5."
msgstr ""

#: ../../../LangRef.rst:2796
msgid "Vector Type"
msgstr ""

#: ../../../LangRef.rst:2800
msgid ""
"A vector type is a simple derived type that represents a vector of elements. "
"Vector types are used when multiple primitive data are operated in parallel "
"using a single instruction (SIMD). A vector type requires a size (number of "
"elements), an underlying primitive data type, and a scalable property to "
"represent vectors where the exact hardware vector length is unknown at "
"compile time. Vector types are considered :ref:`first class <t_firstclass>`."
msgstr ""

#: ../../../LangRef.rst:2815
msgid ""
"The number of elements is a constant integer value larger than 0; "
"elementtype may be any integer, floating-point or pointer type. Vectors of "
"size zero are not allowed. For scalable vectors, the total number of "
"elements is a constant multiple (called vscale) of the specified number of "
"elements; vscale is a positive integer that is unknown at compile time and "
"the same hardware-dependent constant for all scalable vectors at run time. "
"The size of a specific scalable vector type is thus constant within IR, even "
"if the exact size in bytes cannot be determined until run time."
msgstr ""

#: ../../../LangRef.rst:2827
msgid "``<4 x i32>``"
msgstr ""

#: ../../../LangRef.rst:2827
msgid "Vector of 4 32-bit integer values."
msgstr ""

#: ../../../LangRef.rst:2829
msgid "``<8 x float>``"
msgstr ""

#: ../../../LangRef.rst:2829
msgid "Vector of 8 32-bit floating-point values."
msgstr ""

#: ../../../LangRef.rst:2831
msgid "``<2 x i64>``"
msgstr ""

#: ../../../LangRef.rst:2831
msgid "Vector of 2 64-bit integer values."
msgstr ""

#: ../../../LangRef.rst:2833
msgid "``<4 x i64*>``"
msgstr ""

#: ../../../LangRef.rst:2833
msgid "Vector of 4 pointers to 64-bit integer values."
msgstr ""

#: ../../../LangRef.rst:2835
msgid "``<vscale x 4 x i32>``"
msgstr ""

#: ../../../LangRef.rst:2835
msgid "Vector with a multiple of 4 32-bit integer values."
msgstr ""

#: ../../../LangRef.rst:2841
msgid "Label Type"
msgstr ""

#: ../../../LangRef.rst:2845
msgid "The label type represents code labels."
msgstr ""

#: ../../../LangRef.rst:2856
msgid "Token Type"
msgstr ""

#: ../../../LangRef.rst:2860
msgid ""
"The token type is used when a value is associated with an instruction but "
"all uses of the value must not attempt to introspect or obscure it. As such, "
"it is not appropriate to have a :ref:`phi <i_phi>` or :ref:`select "
"<i_select>` of type token."
msgstr ""

#: ../../../LangRef.rst:2876
msgid "Metadata Type"
msgstr ""

#: ../../../LangRef.rst:2880
msgid ""
"The metadata type represents embedded metadata. No derived types may be "
"created from metadata except for :ref:`function <t_function>` arguments."
msgstr ""

#: ../../../LangRef.rst:2892
msgid "Aggregate Types"
msgstr ""

#: ../../../LangRef.rst:2894
msgid ""
"Aggregate Types are a subset of derived types that can contain multiple "
"member types. :ref:`Arrays <t_array>` and :ref:`structs <t_struct>` are "
"aggregate types. :ref:`Vectors <t_vector>` are not considered to be "
"aggregate types."
msgstr ""

#: ../../../LangRef.rst:2902
msgid "Array Type"
msgstr ""

#: ../../../LangRef.rst:2906
msgid ""
"The array type is a very simple derived type that arranges elements "
"sequentially in memory. The array type requires a size (number of elements) "
"and an underlying data type."
msgstr ""

#: ../../../LangRef.rst:2916
msgid ""
"The number of elements is a constant integer value; ``elementtype`` may be "
"any type with a size."
msgstr ""

#: ../../../LangRef.rst:2922
msgid "``[40 x i32]``"
msgstr ""

#: ../../../LangRef.rst:2922
msgid "Array of 40 32-bit integer values."
msgstr ""

#: ../../../LangRef.rst:2924
msgid "``[41 x i32]``"
msgstr ""

#: ../../../LangRef.rst:2924
msgid "Array of 41 32-bit integer values."
msgstr ""

#: ../../../LangRef.rst:2926
msgid "``[4 x i8]``"
msgstr ""

#: ../../../LangRef.rst:2926
msgid "Array of 4 8-bit integer values."
msgstr ""

#: ../../../LangRef.rst:2929
msgid "Here are some examples of multidimensional arrays:"
msgstr ""

#: ../../../LangRef.rst:2932
msgid "``[3 x [4 x i32]]``"
msgstr ""

#: ../../../LangRef.rst:2932
msgid "3x4 array of 32-bit integer values."
msgstr ""

#: ../../../LangRef.rst:2934
msgid "``[12 x [10 x float]]``"
msgstr ""

#: ../../../LangRef.rst:2934
msgid "12x10 array of single precision floating-point values."
msgstr ""

#: ../../../LangRef.rst:2936
msgid "``[2 x [3 x [4 x i16]]]``"
msgstr ""

#: ../../../LangRef.rst:2936
msgid "2x3x4 array of 16-bit integer values."
msgstr ""

#: ../../../LangRef.rst:2939
msgid ""
"There is no restriction on indexing beyond the end of the array implied by a "
"static type (though there are restrictions on indexing beyond the bounds of "
"an allocated object in some cases). This means that single-dimension "
"'variable sized array' addressing can be implemented in LLVM with a zero "
"length array type. An implementation of 'pascal style arrays' in LLVM could "
"use the type \"``{ i32, [0 x float]}``\", for example."
msgstr ""

#: ../../../LangRef.rst:2950
msgid "Structure Type"
msgstr ""

#: ../../../LangRef.rst:2954
msgid ""
"The structure type is used to represent a collection of data members "
"together in memory. The elements of a structure may be any type that has a "
"size."
msgstr ""

#: ../../../LangRef.rst:2958
msgid ""
"Structures in memory are accessed using '``load``' and '``store``' by "
"getting a pointer to a field with the '``getelementptr``' instruction. "
"Structures in registers are accessed using the '``extractvalue``' and "
"'``insertvalue``' instructions."
msgstr ""

#: ../../../LangRef.rst:2963
msgid ""
"Structures may optionally be \"packed\" structures, which indicate that the "
"alignment of the struct is one byte, and that there is no padding between "
"the elements. In non-packed structs, padding between field types is inserted "
"as defined by the DataLayout string in the module, which is required to "
"match what the underlying code generator expects."
msgstr ""

#: ../../../LangRef.rst:2969
msgid ""
"Structures can either be \"literal\" or \"identified\". A literal structure "
"is defined inline with other types (e.g. ``{i32, i32}*``) whereas identified "
"types are always defined at the top level with a name. Literal types are "
"uniqued by their contents and can never be recursive or opaque since there "
"is no way to write one. Identified types can be recursive, can be opaqued, "
"and are never uniqued."
msgstr ""

#: ../../../LangRef.rst:2986
msgid "``{ i32, i32, i32 }``"
msgstr ""

#: ../../../LangRef.rst:2986
msgid "A triple of three ``i32`` values"
msgstr ""

#: ../../../LangRef.rst:2988
msgid "``{ float, i32 (i32) * }``"
msgstr ""

#: ../../../LangRef.rst:2988
msgid ""
"A pair, where the first element is a ``float`` and the second element is a :"
"ref:`pointer <t_pointer>` to a :ref:`function <t_function>` that takes an "
"``i32``, returning an ``i32``."
msgstr ""

#: ../../../LangRef.rst:2990
msgid "``<{ i8, i32 }>``"
msgstr ""

#: ../../../LangRef.rst:2990
msgid "A packed struct known to be 5 bytes in size."
msgstr ""

#: ../../../LangRef.rst:2996
msgid "Opaque Structure Types"
msgstr ""

#: ../../../LangRef.rst:3000
msgid ""
"Opaque structure types are used to represent named structure types that do "
"not have a body specified. This corresponds (for example) to the C notion of "
"a forward declared structure."
msgstr ""

#: ../../../LangRef.rst:3014
msgid "``opaque``"
msgstr ""

#: ../../../LangRef.rst:3014
msgid "An opaque type."
msgstr ""

#: ../../../LangRef.rst:3020
msgid "Constants"
msgstr ""

#: ../../../LangRef.rst:3022
msgid ""
"LLVM has several different basic types of constants. This section describes "
"them all and their syntax."
msgstr ""

#: ../../../LangRef.rst:3026
msgid "Simple Constants"
msgstr ""

#: ../../../LangRef.rst:3029
msgid "**Boolean constants**"
msgstr ""

#: ../../../LangRef.rst:3029
msgid ""
"The two strings '``true``' and '``false``' are both valid constants of the "
"``i1`` type."
msgstr ""

#: ../../../LangRef.rst:3033
msgid "**Integer constants**"
msgstr ""

#: ../../../LangRef.rst:3032
msgid ""
"Standard integers (such as '4') are constants of the :ref:`integer "
"<t_integer>` type. Negative numbers may be used with integer types."
msgstr ""

#: ../../../LangRef.rst:3041
msgid "**Floating-point constants**"
msgstr ""

#: ../../../LangRef.rst:3036
msgid ""
"Floating-point constants use standard decimal notation (e.g. 123.421), "
"exponential notation (e.g. 1.23421e+2), or a more precise hexadecimal "
"notation (see below). The assembler requires the exact decimal value of a "
"floating-point constant. For example, the assembler accepts 1.25 but rejects "
"1.3 because 1.3 is a repeating decimal in binary. Floating-point constants "
"must have a :ref:`floating-point <t_floating>` type."
msgstr ""

#: ../../../LangRef.rst:3044
msgid "**Null pointer constants**"
msgstr ""

#: ../../../LangRef.rst:3044
msgid ""
"The identifier '``null``' is recognized as a null pointer constant and must "
"be of :ref:`pointer type <t_pointer>`."
msgstr ""

#: ../../../LangRef.rst:3048
msgid "**Token constants**"
msgstr ""

#: ../../../LangRef.rst:3047
msgid ""
"The identifier '``none``' is recognized as an empty token constant and must "
"be of :ref:`token type <t_token>`."
msgstr ""

#: ../../../LangRef.rst:3050
msgid ""
"The one non-intuitive notation for constants is the hexadecimal form of "
"floating-point constants. For example, the form '``double    "
"0x432ff973cafa8000``' is equivalent to (but harder to read than) '``double "
"4.5e+15``'. The only time hexadecimal floating-point constants are required "
"(and the only time that they are generated by the disassembler) is when a "
"floating-point constant must be emitted but it cannot be represented as a "
"decimal floating-point number in a reasonable number of digits. For example, "
"NaN's, infinities, and other special values are represented in their IEEE "
"hexadecimal format so that assembly and disassembly do not cause any bits to "
"change in the constants."
msgstr ""

#: ../../../LangRef.rst:3061
msgid ""
"When using the hexadecimal form, constants of types half, float, and double "
"are represented using the 16-digit form shown above (which matches the "
"IEEE754 representation for double); half and float values must, however, be "
"exactly representable as IEEE 754 half and single precision, respectively. "
"Hexadecimal format is always used for long double, and there are three forms "
"of long double. The 80-bit format used by x86 is represented as ``0xK`` "
"followed by 20 hexadecimal digits. The 128-bit format used by PowerPC (two "
"adjacent doubles) is represented by ``0xM`` followed by 32 hexadecimal "
"digits. The IEEE 128-bit format is represented by ``0xL`` followed by 32 "
"hexadecimal digits. Long doubles will only work if they match the long "
"double format on your target. The IEEE 16-bit format (half precision) is "
"represented by ``0xH`` followed by 4 hexadecimal digits. All hexadecimal "
"formats are big-endian (sign bit at the left)."
msgstr ""

#: ../../../LangRef.rst:3076
msgid "There are no constants of type x86_mmx."
msgstr ""

#: ../../../LangRef.rst:3081
msgid "Complex Constants"
msgstr ""

#: ../../../LangRef.rst:3083
msgid ""
"Complex constants are a (potentially recursive) combination of simple "
"constants and smaller complex constants."
msgstr ""

#: ../../../LangRef.rst:3092
msgid "**Structure constants**"
msgstr ""

#: ../../../LangRef.rst:3087
msgid ""
"Structure constants are represented with notation similar to structure type "
"definitions (a comma separated list of elements, surrounded by braces (``{}"
"``)). For example: \"``{ i32 4, float 17.0, i32* @G }``\", where \"``@G``\" "
"is declared as \"``@G = external global i32``\". Structure constants must "
"have :ref:`structure type <t_struct>`, and the number and types of elements "
"must match those specified by the type."
msgstr ""

#: ../../../LangRef.rst:3101
msgid "**Array constants**"
msgstr ""

#: ../../../LangRef.rst:3095
msgid ""
"Array constants are represented with notation similar to array type "
"definitions (a comma separated list of elements, surrounded by square "
"brackets (``[]``)). For example: \"``[ i32 42, i32 11, i32 74 ]``\". Array "
"constants must have :ref:`array type <t_array>`, and the number and types of "
"elements must match those specified by the type. As a special case, "
"character array constants may also be represented as a double-quoted string "
"using the ``c`` prefix. For example: \"``c\"Hello World\\0A\\00\"``\"."
msgstr ""

#: ../../../LangRef.rst:3108
msgid "**Vector constants**"
msgstr ""

#: ../../../LangRef.rst:3104
msgid ""
"Vector constants are represented with notation similar to vector type "
"definitions (a comma separated list of elements, surrounded by less-than/"
"greater-than's (``<>``)). For example: \"``< i32 42, i32 11, i32 74, i32 100 "
">``\". Vector constants must have :ref:`vector type <t_vector>`, and the "
"number and types of elements must match those specified by the type."
msgstr ""

#: ../../../LangRef.rst:3114
msgid "**Zero initialization**"
msgstr ""

#: ../../../LangRef.rst:3111
msgid ""
"The string '``zeroinitializer``' can be used to zero initialize a value to "
"zero of *any* type, including scalar and :ref:`aggregate <t_aggregate>` "
"types. This is often used to avoid having to print large zero initializers "
"(e.g. for large arrays) and is always exactly equivalent to using explicit "
"zero initializers."
msgstr ""

#: ../../../LangRef.rst:3122
msgid "**Metadata node**"
msgstr ""

#: ../../../LangRef.rst:3117
msgid ""
"A metadata node is a constant tuple without types. For example: \"``!{!0, !{!"
"2, !0}, !\"test\"}``\". Metadata can reference constant values, for example: "
"\"``!{!0, i32 0, i8* @global, i64 (i64)* @function, !\"str\"}``\". Unlike "
"other typed constants that are meant to be interpreted as part of the "
"instruction stream, metadata is a place to attach additional information "
"such as debug info."
msgstr ""

#: ../../../LangRef.rst:3125
msgid "Global Variable and Function Addresses"
msgstr ""

#: ../../../LangRef.rst:3127
msgid ""
"The addresses of :ref:`global variables <globalvars>` and :ref:`functions "
"<functionstructure>` are always implicitly valid (link-time) constants. "
"These constants are explicitly referenced when the :ref:`identifier for the "
"global <identifiers>` is used and always have :ref:`pointer <t_pointer>` "
"type. For example, the following is a legal LLVM file:"
msgstr ""

#: ../../../LangRef.rst:3143
msgid "Undefined Values"
msgstr ""

#: ../../../LangRef.rst:3145
msgid ""
"The string '``undef``' can be used anywhere a constant is expected, and "
"indicates that the user of the value may receive an unspecified bit-pattern. "
"Undefined values may be of any type (other than '``label``' or '``void``') "
"and be used anywhere a constant is permitted."
msgstr ""

#: ../../../LangRef.rst:3150
msgid ""
"Undefined values are useful because they indicate to the compiler that the "
"program is well defined no matter what value is used. This gives the "
"compiler more freedom to optimize. Here are some examples of (potentially "
"surprising) transformations that are valid (in pseudo IR):"
msgstr ""

#: ../../../LangRef.rst:3165
msgid ""
"This is safe because all of the output bits are affected by the undef bits. "
"Any output bit can have a zero or one depending on the input bits."
msgstr ""

#: ../../../LangRef.rst:3182
msgid ""
"These logical operations have bits that are not always affected by the "
"input. For example, if ``%X`` has a zero bit, then the output of the "
"'``and``' operation will always be a zero for that bit, no matter what the "
"corresponding bit from the '``undef``' is. As such, it is unsafe to optimize "
"or assume that the result of the '``and``' is '``undef``'. However, it is "
"safe to assume that all bits of the '``undef``' could be 0, and optimize the "
"'``and``' to 0. Likewise, it is safe to assume that all the bits of the "
"'``undef``' operand to the '``or``' could be set, allowing the '``or``' to "
"be folded to -1."
msgstr ""

#: ../../../LangRef.rst:3206
msgid ""
"This set of examples shows that undefined '``select``' (and conditional "
"branch) conditions can go *either way*, but they have to come from one of "
"the two operands. In the ``%A`` example, if ``%X`` and ``%Y`` were both "
"known to have a clear low bit, then ``%A`` would have to have a cleared low "
"bit. However, in the ``%C`` example, the optimizer is allowed to assume that "
"the '``undef``' operand could be the same as ``%Y``, allowing the whole "
"'``select``' to be eliminated."
msgstr ""

#: ../../../LangRef.rst:3233
msgid ""
"This example points out that two '``undef``' operands are not necessarily "
"the same. This can be surprising to people (and also matches C semantics) "
"where they assume that \"``X^X``\" is always zero, even if ``X`` is "
"undefined. This isn't true for a number of reasons, but the short answer is "
"that an '``undef``' \"variable\" can arbitrarily change its value over its "
"\"live range\". This is true because the variable doesn't actually *have a "
"live range*. Instead, the value is logically read from arbitrary registers "
"that happen to be around when needed, so the value is not necessarily "
"consistent over time. In fact, ``%A`` and ``%C`` need to have the same "
"semantics or the core LLVM \"replace all uses with\" concept would not hold."
msgstr ""

#: ../../../LangRef.rst:3245
msgid ""
"To ensure all uses of a given register observe the same value (even if "
"'``undef``'), the :ref:`freeze instruction <i_freeze>` can be used."
msgstr ""

#: ../../../LangRef.rst:3256
msgid ""
"These examples show the crucial difference between an *undefined value* and "
"*undefined behavior*. An undefined value (like '``undef``') is allowed to "
"have an arbitrary bit-pattern. This means that the ``%A`` operation can be "
"constant folded to '``0``', because the '``undef``' could be zero, and zero "
"divided by any value is zero. However, in the second example, we can make a "
"more aggressive assumption: because the ``undef`` is allowed to be an "
"arbitrary value, we are allowed to assume that it could be zero. Since a "
"divide by zero has *undefined behavior*, we are allowed to assume that the "
"operation does not execute at all. This allows us to delete the divide and "
"all code after it. Because the undefined operation \"can't happen\", the "
"optimizer can assume that it occurs in dead code."
msgstr ""

#: ../../../LangRef.rst:3277
msgid ""
"A store *of* an undefined value can be assumed to not have any effect; we "
"can assume that the value is overwritten with bits that happen to match what "
"was already there. However, a store *to* an undefined location could clobber "
"arbitrary memory, therefore, it has undefined behavior."
msgstr ""

#: ../../../LangRef.rst:3283
msgid ""
"**MemorySanitizer**, a detector of uses of uninitialized memory, defines a "
"branch with condition that depends on an undef value (or certain other "
"values, like e.g. a result of a load from heap-allocated memory that has "
"never been stored to) to have an externally visible side effect. For this "
"reason functions with *sanitize_memory* attribute are not allowed to produce "
"such branches \"out of thin air\". More strictly, an optimization that "
"inserts a conditional branch is only valid if in all executions where the "
"branch condition has at least one undefined bit, the same branch condition "
"is evaluated in the input IR as well."
msgstr ""

#: ../../../LangRef.rst:3297
msgid "Poison Values"
msgstr ""

#: ../../../LangRef.rst:3299
msgid ""
"In order to facilitate speculative execution, many instructions do not "
"invoke immediate undefined behavior when provided with illegal operands, and "
"return a poison value instead."
msgstr ""

#: ../../../LangRef.rst:3303
msgid ""
"There is currently no way of representing a poison value in the IR; they "
"only exist when produced by operations such as :ref:`add <i_add>` with the "
"``nsw`` flag."
msgstr ""

#: ../../../LangRef.rst:3307
msgid "Poison value behavior is defined in terms of value *dependence*:"
msgstr ""

#: ../../../LangRef.rst:3309
msgid "Values other than :ref:`phi <i_phi>` nodes depend on their operands."
msgstr ""

#: ../../../LangRef.rst:3310
msgid ""
":ref:`Phi <i_phi>` nodes depend on the operand corresponding to their "
"dynamic predecessor basic block."
msgstr ""

#: ../../../LangRef.rst:3312
msgid ""
"Function arguments depend on the corresponding actual argument values in the "
"dynamic callers of their functions."
msgstr ""

#: ../../../LangRef.rst:3314
msgid ""
":ref:`Call <i_call>` instructions depend on the :ref:`ret <i_ret>` "
"instructions that dynamically transfer control back to them."
msgstr ""

#: ../../../LangRef.rst:3316
msgid ""
":ref:`Invoke <i_invoke>` instructions depend on the :ref:`ret <i_ret>`, :ref:"
"`resume <i_resume>`, or exception-throwing call instructions that "
"dynamically transfer control back to them."
msgstr ""

#: ../../../LangRef.rst:3319
msgid ""
"Non-volatile loads and stores depend on the most recent stores to all of the "
"referenced memory addresses, following the order in the IR (including loads "
"and stores implied by intrinsics such as :ref:`@llvm.memcpy <int_memcpy>`.)"
msgstr ""

#: ../../../LangRef.rst:3323
msgid ""
"An instruction with externally visible side effects depends on the most "
"recent preceding instruction with externally visible side effects, following "
"the order in the IR. (This includes :ref:`volatile operations <volatile>`.)"
msgstr ""

#: ../../../LangRef.rst:3327
msgid ""
"An instruction *control-depends* on a :ref:`terminator instruction "
"<terminators>` if the terminator instruction has multiple successors and the "
"instruction is always executed when control transfers to one of the "
"successors, and may not be executed when control is transferred to another."
msgstr ""

#: ../../../LangRef.rst:3332
msgid ""
"Additionally, an instruction also *control-depends* on a terminator "
"instruction if the set of instructions it otherwise depends on would be "
"different if the terminator had transferred control to a different successor."
msgstr ""

#: ../../../LangRef.rst:3336
msgid "Dependence is transitive."
msgstr ""

#: ../../../LangRef.rst:3337
msgid ""
"Vector elements may be independently poisoned. Therefore, transforms on "
"instructions such as shufflevector must be careful to propagate poison "
"across values or elements only as allowed by the original code."
msgstr ""

#: ../../../LangRef.rst:3341
msgid ""
"An instruction that *depends* on a poison value, produces a poison value "
"itself. A poison value may be relaxed into an :ref:`undef value "
"<undefvalues>`, which takes an arbitrary bit-pattern. Propagation of poison "
"can be stopped with the :ref:`freeze instruction <i_freeze>`."
msgstr ""

#: ../../../LangRef.rst:3347
msgid ""
"This means that immediate undefined behavior occurs if a poison value is "
"used as an instruction operand that has any values that trigger undefined "
"behavior. Notably this includes (but is not limited to):"
msgstr ""

#: ../../../LangRef.rst:3351
msgid ""
"The pointer operand of a :ref:`load <i_load>`, :ref:`store <i_store>` or any "
"other pointer dereferencing instruction (independent of address space)."
msgstr ""

#: ../../../LangRef.rst:3354
msgid ""
"The divisor operand of a ``udiv``, ``sdiv``, ``urem`` or ``srem`` "
"instruction."
msgstr ""

#: ../../../LangRef.rst:3356
msgid "The condition operand of a :ref:`br <i_br>` instruction."
msgstr ""

#: ../../../LangRef.rst:3357
msgid ""
"The callee operand of a :ref:`call <i_call>` or :ref:`invoke <i_invoke>` "
"instruction."
msgstr ""

#: ../../../LangRef.rst:3360
msgid "Here are some examples:"
msgstr ""

#: ../../../LangRef.rst:3387
msgid "Addresses of Basic Blocks"
msgstr ""

#: ../../../LangRef.rst:3389
msgid "``blockaddress(@function, %block)``"
msgstr ""

#: ../../../LangRef.rst:3391
msgid ""
"The '``blockaddress``' constant computes the address of the specified basic "
"block in the specified function, and always has an ``i8*`` type. Taking the "
"address of the entry block is illegal."
msgstr ""

#: ../../../LangRef.rst:3395
msgid ""
"This value only has defined behavior when used as an operand to the ':ref:"
"`indirectbr <i_indirectbr>`' or ':ref:`callbr <i_callbr>`'instruction, or "
"for comparisons against null. Pointer equality tests between labels "
"addresses results in undefined behavior --- though, again, comparison "
"against null is ok, and no label is equal to the null pointer. This may be "
"passed around as an opaque pointer sized value as long as the bits are not "
"inspected. This allows ``ptrtoint`` and arithmetic to be performed on these "
"values so long as the original value is reconstituted before the "
"``indirectbr`` or ``callbr`` instruction."
msgstr ""

#: ../../../LangRef.rst:3405
msgid ""
"Finally, some targets may provide defined semantics when using the value as "
"the operand to an inline assembly, but that is target specific."
msgstr ""

#: ../../../LangRef.rst:3411
msgid "Constant Expressions"
msgstr ""

#: ../../../LangRef.rst:3413
msgid ""
"Constant expressions are used to allow expressions involving other constants "
"to be used as constants. Constant expressions may be of any :ref:`first "
"class <t_firstclass>` type and may involve any LLVM operation that does not "
"have side effects (e.g. load and call are not supported). The following is "
"the syntax for constant expressions:"
msgstr ""

#: ../../../LangRef.rst:3419
msgid "``trunc (CST to TYPE)``"
msgstr ""

#: ../../../LangRef.rst:3420
msgid "Perform the :ref:`trunc operation <i_trunc>` on constants."
msgstr ""

#: ../../../LangRef.rst:3421
msgid "``zext (CST to TYPE)``"
msgstr ""

#: ../../../LangRef.rst:3422
msgid "Perform the :ref:`zext operation <i_zext>` on constants."
msgstr ""

#: ../../../LangRef.rst:3423
msgid "``sext (CST to TYPE)``"
msgstr ""

#: ../../../LangRef.rst:3424
msgid "Perform the :ref:`sext operation <i_sext>` on constants."
msgstr ""

#: ../../../LangRef.rst:3427
msgid "``fptrunc (CST to TYPE)``"
msgstr ""

#: ../../../LangRef.rst:3426
msgid ""
"Truncate a floating-point constant to another floating-point type. The size "
"of CST must be larger than the size of TYPE. Both types must be floating-"
"point."
msgstr ""

#: ../../../LangRef.rst:3431
msgid "``fpext (CST to TYPE)``"
msgstr ""

#: ../../../LangRef.rst:3430
msgid ""
"Floating-point extend a constant to another type. The size of CST must be "
"smaller or equal to the size of TYPE. Both types must be floating-point."
msgstr ""

#: ../../../LangRef.rst:3438
msgid "``fptoui (CST to TYPE)``"
msgstr ""

#: ../../../LangRef.rst:3434
msgid ""
"Convert a floating-point constant to the corresponding unsigned integer "
"constant. TYPE must be a scalar or vector integer type. CST must be of "
"scalar or vector floating-point type. Both CST and TYPE must be scalars, or "
"vectors of the same number of elements. If the value won't fit in the "
"integer type, the result is a :ref:`poison value <poisonvalues>`."
msgstr ""

#: ../../../LangRef.rst:3445
msgid "``fptosi (CST to TYPE)``"
msgstr ""

#: ../../../LangRef.rst:3441
msgid ""
"Convert a floating-point constant to the corresponding signed integer "
"constant. TYPE must be a scalar or vector integer type. CST must be of "
"scalar or vector floating-point type. Both CST and TYPE must be scalars, or "
"vectors of the same number of elements. If the value won't fit in the "
"integer type, the result is a :ref:`poison value <poisonvalues>`."
msgstr ""

#: ../../../LangRef.rst:3450
msgid "``uitofp (CST to TYPE)``"
msgstr ""

#: ../../../LangRef.rst:3448
msgid ""
"Convert an unsigned integer constant to the corresponding floating-point "
"constant. TYPE must be a scalar or vector floating-point type.  CST must be "
"of scalar or vector integer type. Both CST and TYPE must be scalars, or "
"vectors of the same number of elements."
msgstr ""

#: ../../../LangRef.rst:3455
msgid "``sitofp (CST to TYPE)``"
msgstr ""

#: ../../../LangRef.rst:3453
msgid ""
"Convert a signed integer constant to the corresponding floating-point "
"constant. TYPE must be a scalar or vector floating-point type. CST must be "
"of scalar or vector integer type. Both CST and TYPE must be scalars, or "
"vectors of the same number of elements."
msgstr ""

#: ../../../LangRef.rst:3457
msgid "``ptrtoint (CST to TYPE)``"
msgstr ""

#: ../../../LangRef.rst:3458
msgid "Perform the :ref:`ptrtoint operation <i_ptrtoint>` on constants."
msgstr ""

#: ../../../LangRef.rst:3460
msgid "``inttoptr (CST to TYPE)``"
msgstr ""

#: ../../../LangRef.rst:3460
msgid ""
"Perform the :ref:`inttoptr operation <i_inttoptr>` on constants. This one is "
"*really* dangerous!"
msgstr ""

#: ../../../LangRef.rst:3464
msgid "``bitcast (CST to TYPE)``"
msgstr ""

#: ../../../LangRef.rst:3463
msgid ""
"Convert a constant, CST, to another TYPE. The constraints of the operands "
"are the same as those for the :ref:`bitcast instruction <i_bitcast>`."
msgstr ""

#: ../../../LangRef.rst:3468
msgid "``addrspacecast (CST to TYPE)``"
msgstr ""

#: ../../../LangRef.rst:3467
msgid ""
"Convert a constant pointer or constant vector of pointer, CST, to another "
"TYPE in a different address space. The constraints of the operands are the "
"same as those for the :ref:`addrspacecast instruction <i_addrspacecast>`."
msgstr ""

#: ../../../LangRef.rst:3473
msgid ""
"``getelementptr (TY, CSTPTR, IDX0, IDX1, ...)``, ``getelementptr inbounds "
"(TY, CSTPTR, IDX0, IDX1, ...)``"
msgstr ""

#: ../../../LangRef.rst:3471
msgid ""
"Perform the :ref:`getelementptr operation <i_getelementptr>` on constants. "
"As with the :ref:`getelementptr <i_getelementptr>` instruction, the index "
"list may have one or more indexes, which are required to make sense for the "
"type of \"pointer to TY\"."
msgstr ""

#: ../../../LangRef.rst:3475
msgid "``select (COND, VAL1, VAL2)``"
msgstr ""

#: ../../../LangRef.rst:3476
msgid "Perform the :ref:`select operation <i_select>` on constants."
msgstr ""

#: ../../../LangRef.rst:3477
msgid "``icmp COND (VAL1, VAL2)``"
msgstr ""

#: ../../../LangRef.rst:3478
msgid "Perform the :ref:`icmp operation <i_icmp>` on constants."
msgstr ""

#: ../../../LangRef.rst:3479
msgid "``fcmp COND (VAL1, VAL2)``"
msgstr ""

#: ../../../LangRef.rst:3480
msgid "Perform the :ref:`fcmp operation <i_fcmp>` on constants."
msgstr ""

#: ../../../LangRef.rst:3482
msgid "``extractelement (VAL, IDX)``"
msgstr ""

#: ../../../LangRef.rst:3482
msgid ""
"Perform the :ref:`extractelement operation <i_extractelement>` on constants."
msgstr ""

#: ../../../LangRef.rst:3485
msgid "``insertelement (VAL, ELT, IDX)``"
msgstr ""

#: ../../../LangRef.rst:3485
msgid ""
"Perform the :ref:`insertelement operation <i_insertelement>` on constants."
msgstr ""

#: ../../../LangRef.rst:3488
msgid "``shufflevector (VEC1, VEC2, IDXMASK)``"
msgstr ""

#: ../../../LangRef.rst:3488
msgid ""
"Perform the :ref:`shufflevector operation <i_shufflevector>` on constants."
msgstr ""

#: ../../../LangRef.rst:3493
msgid "``extractvalue (VAL, IDX0, IDX1, ...)``"
msgstr ""

#: ../../../LangRef.rst:3491
msgid ""
"Perform the :ref:`extractvalue operation <i_extractvalue>` on constants. The "
"index list is interpreted in a similar manner as indices in a ':ref:"
"`getelementptr <i_getelementptr>`' operation. At least one index value must "
"be specified."
msgstr ""

#: ../../../LangRef.rst:3498
msgid "``insertvalue (VAL, ELT, IDX0, IDX1, ...)``"
msgstr ""

#: ../../../LangRef.rst:3496
msgid ""
"Perform the :ref:`insertvalue operation <i_insertvalue>` on constants. The "
"index list is interpreted in a similar manner as indices in a ':ref:"
"`getelementptr <i_getelementptr>`' operation. At least one index value must "
"be specified."
msgstr ""

#: ../../../LangRef.rst:3505
msgid "``OPCODE (LHS, RHS)``"
msgstr ""

#: ../../../LangRef.rst:3501
msgid ""
"Perform the specified operation of the LHS and RHS constants. OPCODE may be "
"any of the :ref:`binary <binaryops>` or :ref:`bitwise binary <bitwiseops>` "
"operations. The constraints on operands are the same as those for the "
"corresponding instruction (e.g. no bitwise operations on floating-point "
"values are allowed)."
msgstr ""

#: ../../../LangRef.rst:3508
msgid "Other Values"
msgstr ""

#: ../../../LangRef.rst:3513
msgid "Inline Assembler Expressions"
msgstr ""

#: ../../../LangRef.rst:3515
msgid ""
"LLVM supports inline assembler expressions (as opposed to :ref:`Module-Level "
"Inline Assembly <moduleasm>`) through the use of a special value. This value "
"represents the inline assembler as a template string (containing the "
"instructions to emit), a list of operand constraints (stored as a string), a "
"flag that indicates whether or not the inline asm expression has side "
"effects, and a flag indicating whether the function containing the asm needs "
"to align its stack conservatively."
msgstr ""

#: ../../../LangRef.rst:3523
msgid ""
"The template string supports argument substitution of the operands using "
"\"``$``\" followed by a number, to indicate substitution of the given "
"register/memory location, as specified by the constraint string. \"``${NUM:"
"MODIFIER}``\" may also be used, where ``MODIFIER`` is a target-specific "
"annotation for how to print the operand (See :ref:`inline-asm-modifiers`)."
msgstr ""

#: ../../../LangRef.rst:3529
msgid ""
"A literal \"``$``\" may be included by using \"``$$``\" in the template. To "
"include other special characters into the output, the usual \"``\\XX``\" "
"escapes may be used, just as in other strings. Note that after template "
"substitution, the resulting assembly string is parsed by LLVM's integrated "
"assembler unless it is disabled -- even when emitting a ``.s`` file -- and "
"thus must contain assembly syntax known to LLVM."
msgstr ""

#: ../../../LangRef.rst:3536
msgid ""
"LLVM also supports a few more substitutions useful for writing inline "
"assembly:"
msgstr ""

#: ../../../LangRef.rst:3538
msgid ""
"``${:uid}``: Expands to a decimal integer unique to this inline assembly "
"blob. This substitution is useful when declaring a local label. Many "
"standard compiler optimizations, such as inlining, may duplicate an inline "
"asm blob. Adding a blob-unique identifier ensures that the two labels will "
"not conflict during assembly. This is used to implement `GCC's %= special "
"format string <https://gcc.gnu.org/onlinedocs/gcc/Extended-Asm.html>`_."
msgstr ""

#: ../../../LangRef.rst:3544
msgid ""
"``${:comment}``: Expands to the comment character of the current target's "
"assembly dialect. This is usually ``#``, but many targets use other strings, "
"such as ``;``, ``//``, or ``!``."
msgstr ""

#: ../../../LangRef.rst:3547
msgid ""
"``${:private}``: Expands to the assembler private label prefix. Labels with "
"this prefix will not appear in the symbol table of the assembled object. "
"Typically the prefix is ``L``, but targets may use other strings. ``.L`` is "
"relatively popular."
msgstr ""

#: ../../../LangRef.rst:3552
msgid ""
"LLVM's support for inline asm is modeled closely on the requirements of "
"Clang's GCC-compatible inline-asm support. Thus, the feature-set and the "
"constraint and modifier codes listed here are similar or identical to those "
"in GCC's inline asm support. However, to be clear, the syntax of the "
"template and constraint strings described here is *not* the same as the "
"syntax accepted by GCC and Clang, and, while most constraint letters are "
"passed through as-is by Clang, some get translated to other codes when "
"converting from the C source to the LLVM assembly."
msgstr ""

#: ../../../LangRef.rst:3561
msgid "An example inline assembler expression is:"
msgstr ""

#: ../../../LangRef.rst:3567
msgid ""
"Inline assembler expressions may **only** be used as the callee operand of "
"a :ref:`call <i_call>` or an :ref:`invoke <i_invoke>` instruction. Thus, "
"typically we have:"
msgstr ""

#: ../../../LangRef.rst:3575
msgid ""
"Inline asms with side effects not visible in the constraint list must be "
"marked as having side effects. This is done through the use of the "
"'``sideeffect``' keyword, like so:"
msgstr ""

#: ../../../LangRef.rst:3583
msgid ""
"In some cases inline asms will contain code that will not work unless the "
"stack is aligned in some way, such as calls or SSE instructions on x86, yet "
"will not contain code that does that alignment within the asm. The compiler "
"should make conservative assumptions about what the asm might contain and "
"should generate its usual stack alignment code in the prologue if the "
"'``alignstack``' keyword is present:"
msgstr ""

#: ../../../LangRef.rst:3594
msgid ""
"Inline asms also support using non-standard assembly dialects. The assumed "
"dialect is ATT. When the '``inteldialect``' keyword is present, the inline "
"asm is using the Intel dialect. Currently, ATT and Intel are the only "
"supported dialects. An example is:"
msgstr ""

#: ../../../LangRef.rst:3603
msgid ""
"If multiple keywords appear the '``sideeffect``' keyword must come first, "
"the '``alignstack``' keyword second and the '``inteldialect``' keyword last."
msgstr ""

#: ../../../LangRef.rst:3608
msgid "Inline Asm Constraint String"
msgstr ""

#: ../../../LangRef.rst:3610
msgid ""
"The constraint list is a comma-separated string, each element containing one "
"or more constraint codes."
msgstr ""

#: ../../../LangRef.rst:3613
msgid ""
"For each element in the constraint list an appropriate register or memory "
"operand will be chosen, and it will be made available to assembly template "
"string expansion as ``$0`` for the first constraint in the list, ``$1`` for "
"the second, etc."
msgstr ""

#: ../../../LangRef.rst:3618
msgid ""
"There are three different types of constraints, which are distinguished by a "
"prefix symbol in front of the constraint code: Output, Input, and Clobber. "
"The constraints must always be given in that order: outputs first, then "
"inputs, then clobbers. They cannot be intermingled."
msgstr ""

#: ../../../LangRef.rst:3623
msgid "There are also three different categories of constraint codes:"
msgstr ""

#: ../../../LangRef.rst:3625
msgid ""
"Register constraint. This is either a register class, or a fixed physical "
"register. This kind of constraint will allocate a register, and if "
"necessary, bitcast the argument or result to the appropriate type."
msgstr ""

#: ../../../LangRef.rst:3628
msgid ""
"Memory constraint. This kind of constraint is for use with an instruction "
"taking a memory operand. Different constraints allow for different "
"addressing modes used by the target."
msgstr ""

#: ../../../LangRef.rst:3631
msgid ""
"Immediate value constraint. This kind of constraint is for an integer or "
"other immediate value which can be rendered directly into an instruction. "
"The various target-specific constraints allow the selection of a value in "
"the proper range for the instruction you wish to use it with."
msgstr ""

#: ../../../LangRef.rst:3637
msgid "Output constraints"
msgstr ""

#: ../../../LangRef.rst:3639
msgid ""
"Output constraints are specified by an \"``=``\" prefix (e.g. \"``=r``\"). "
"This indicates that the assembly will write to this operand, and the operand "
"will then be made available as a return value of the ``asm`` expression. "
"Output constraints do not consume an argument from the call instruction. "
"(Except, see below about indirect outputs)."
msgstr ""

#: ../../../LangRef.rst:3645
msgid ""
"Normally, it is expected that no output locations are written to by the "
"assembly expression until *all* of the inputs have been read. As such, LLVM "
"may assign the same register to an output and an input. If this is not safe "
"(e.g. if the assembly contains two instructions, where the first writes to "
"one output, and the second reads an input and writes to a second output), "
"then the \"``&``\" modifier must be used (e.g. \"``=&r``\") to specify that "
"the output is an \"early-clobber\" output. Marking an output as \"early-"
"clobber\" ensures that LLVM will not use the same register for any inputs "
"(other than an input tied to this output)."
msgstr ""

#: ../../../LangRef.rst:3656
msgid "Input constraints"
msgstr ""

#: ../../../LangRef.rst:3658
msgid ""
"Input constraints do not have a prefix -- just the constraint codes. Each "
"input constraint will consume one argument from the call instruction. It is "
"not permitted for the asm to write to any input register or memory location "
"(unless that input is tied to an output). Note also that multiple inputs may "
"all be assigned to the same register, if LLVM can determine that they "
"necessarily all contain the same value."
msgstr ""

#: ../../../LangRef.rst:3665
msgid ""
"Instead of providing a Constraint Code, input constraints may also \"tie\" "
"themselves to an output constraint, by providing an integer as the "
"constraint string. Tied inputs still consume an argument from the call "
"instruction, and take up a position in the asm template numbering as is "
"usual -- they will simply be constrained to always use the same register as "
"the output they've been tied to. For example, a constraint string of "
"\"``=r,0``\" says to assign a register for output, and use that register as "
"an input as well (it being the 0'th constraint)."
msgstr ""

#: ../../../LangRef.rst:3674
msgid ""
"It is permitted to tie an input to an \"early-clobber\" output. In that "
"case, no *other* input may share the same register as the input tied to the "
"early-clobber (even when the other input has the same value)."
msgstr ""

#: ../../../LangRef.rst:3678
msgid ""
"You may only tie an input to an output which has a register constraint, not "
"a memory constraint. Only a single input may be tied to an output."
msgstr ""

#: ../../../LangRef.rst:3681
msgid ""
"There is also an \"interesting\" feature which deserves a bit of "
"explanation: if a register class constraint allocates a register which is "
"too small for the value type operand provided as input, the input value will "
"be split into multiple registers, and all of them passed to the inline asm."
msgstr ""

#: ../../../LangRef.rst:3686
msgid "However, this feature is often not as useful as you might think."
msgstr ""

#: ../../../LangRef.rst:3688
msgid ""
"Firstly, the registers are *not* guaranteed to be consecutive. So, on those "
"architectures that have instructions which operate on multiple consecutive "
"instructions, this is not an appropriate way to support them. (e.g. the 32-"
"bit SparcV8 has a 64-bit load, which instruction takes a single 32-bit "
"register. The hardware then loads into both the named register, and the next "
"register. This feature of inline asm would not be useful to support that.)"
msgstr ""

#: ../../../LangRef.rst:3695
msgid ""
"A few of the targets provide a template string modifier allowing explicit "
"access to the second register of a two-register operand (e.g. MIPS ``L``, "
"``M``, and ``D``). On such an architecture, you can actually access the "
"second allocated register (yet, still, not any subsequent ones). But, in "
"that case, you're still probably better off simply splitting the value into "
"two separate operands, for clarity. (e.g. see the description of the ``A`` "
"constraint on X86, which, despite existing only for use with this feature, "
"is not really a good idea to use)"
msgstr ""

#: ../../../LangRef.rst:3705
msgid "Indirect inputs and outputs"
msgstr ""

#: ../../../LangRef.rst:3707
msgid ""
"Indirect output or input constraints can be specified by the \"``*``\" "
"modifier (which goes after the \"``=``\" in case of an output). This "
"indicates that the asm will write to or read from the contents of an "
"*address* provided as an input argument. (Note that in this way, indirect "
"outputs act more like an *input* than an output: just like an input, they "
"consume an argument of the call expression, rather than producing a return "
"value. An indirect output constraint is an \"output\" only in that the asm "
"is expected to write to the contents of the input memory location, instead "
"of just read from it)."
msgstr ""

#: ../../../LangRef.rst:3716
msgid ""
"This is most typically used for memory constraint, e.g. \"``=*m``\", to pass "
"the address of a variable as a value."
msgstr ""

#: ../../../LangRef.rst:3719
msgid ""
"It is also possible to use an indirect *register* constraint, but only on "
"output (e.g. \"``=*r``\"). This will cause LLVM to allocate a register for "
"an output value normally, and then, separately emit a store to the address "
"provided as input, after the provided inline asm. (It's not clear what value "
"this functionality provides, compared to writing the store explicitly after "
"the asm statement, and it can only produce worse code, since it bypasses "
"many optimization passes. I would recommend not using it.)"
msgstr ""

#: ../../../LangRef.rst:3729
msgid "Clobber constraints"
msgstr ""

#: ../../../LangRef.rst:3731
msgid ""
"A clobber constraint is indicated by a \"``~``\" prefix. A clobber does not "
"consume an input operand, nor generate an output. Clobbers cannot use any of "
"the general constraint code letters -- they may use only explicit register "
"constraints, e.g. \"``~{eax}``\". The one exception is that a clobber string "
"of \"``~{memory}``\" indicates that the assembly writes to arbitrary "
"undeclared memory locations -- not only the memory pointed to by a declared "
"indirect output."
msgstr ""

#: ../../../LangRef.rst:3739
msgid ""
"Note that clobbering named registers that are also present in output "
"constraints is not legal."
msgstr ""

#: ../../../LangRef.rst:3744
msgid "Constraint Codes"
msgstr ""

#: ../../../LangRef.rst:3745
msgid "After a potential prefix comes constraint code, or codes."
msgstr ""

#: ../../../LangRef.rst:3747
msgid ""
"A Constraint Code is either a single letter (e.g. \"``r``\"), a \"``^``\" "
"character followed by two letters (e.g. \"``^wc``\"), or \"``{``\" register-"
"name \"``}``\" (e.g. \"``{eax}``\")."
msgstr ""

#: ../../../LangRef.rst:3751
msgid ""
"The one and two letter constraint codes are typically chosen to be the same "
"as GCC's constraint codes."
msgstr ""

#: ../../../LangRef.rst:3754
msgid ""
"A single constraint may include one or more than constraint code in it, "
"leaving it up to LLVM to choose which one to use. This is included mainly "
"for compatibility with the translation of GCC inline asm coming from clang."
msgstr ""

#: ../../../LangRef.rst:3758
msgid ""
"There are two ways to specify alternatives, and either or both may be used "
"in an inline asm constraint list:"
msgstr ""

#: ../../../LangRef.rst:3761
msgid ""
"Append the codes to each other, making a constraint code set. E.g. "
"\"``im``\" or \"``{eax}m``\". This means \"choose any of the options in the "
"set\". The choice of constraint is made independently for each constraint in "
"the constraint list."
msgstr ""

#: ../../../LangRef.rst:3766
msgid ""
"Use \"``|``\" between constraint code sets, creating alternatives. Every "
"constraint in the constraint list must have the same number of alternative "
"sets. With this syntax, the same alternative in *all* of the items in the "
"constraint list will be chosen together."
msgstr ""

#: ../../../LangRef.rst:3771
msgid ""
"Putting those together, you might have a two operand constraint string like "
"``\"rm|r,ri|rm\"``. This indicates that if operand 0 is ``r`` or ``m``, then "
"operand 1 may be one of ``r`` or ``i``. If operand 0 is ``r``, then operand "
"1 may be one of ``r`` or ``m``. But, operand 0 and 1 cannot both be of type "
"m."
msgstr ""

#: ../../../LangRef.rst:3776
msgid ""
"However, the use of either of the alternatives features is *NOT* "
"recommended, as LLVM is not able to make an intelligent choice about which "
"one to use. (At the point it currently needs to choose, not enough "
"information is available to do so in a smart way.) Thus, it simply tries to "
"make a choice that's most likely to compile, not one that will be optimal "
"performance. (e.g., given \"``rm``\", it'll always choose to use memory, not "
"registers). And, if given multiple registers, or multiple register classes, "
"it will simply choose the first one. (In fact, it doesn't currently even "
"ensure explicitly specified physical registers are unique, so specifying "
"multiple physical registers as alternatives, like ``{r11}{r12},{r11}{r12}``, "
"will assign r11 to both operands, not at all what was intended.)"
msgstr ""

#: ../../../LangRef.rst:3789
msgid "Supported Constraint Code List"
msgstr ""

#: ../../../LangRef.rst:3791
msgid ""
"The constraint codes are, in general, expected to behave the same way they "
"do in GCC. LLVM's support is often implemented on an 'as-needed' basis, to "
"support C inline asm code which was supported by GCC. A mismatch in behavior "
"between LLVM and GCC likely indicates a bug in LLVM."
msgstr ""

#: ../../../LangRef.rst:3796
msgid "Some constraint codes are typically supported by all targets:"
msgstr ""

#: ../../../LangRef.rst:3798
msgid "``r``: A register in the target's general purpose register class."
msgstr ""

#: ../../../LangRef.rst:3799
msgid ""
"``m``: A memory address operand. It is target-specific what addressing modes "
"are supported, typical examples are register, or register + register offset, "
"or register + immediate offset (of some target-specific size)."
msgstr ""

#: ../../../LangRef.rst:3802
msgid ""
"``i``: An integer constant (of target-specific width). Allows either a "
"simple immediate, or a relocatable value."
msgstr ""

#: ../../../LangRef.rst:3804
msgid "``n``: An integer constant -- *not* including relocatable values."
msgstr ""

#: ../../../LangRef.rst:3805
msgid "``s``: An integer constant, but allowing *only* relocatable values."
msgstr ""

#: ../../../LangRef.rst:3806
msgid ""
"``X``: Allows an operand of any kind, no constraint whatsoever. Typically "
"useful to pass a label for an asm branch or call."
msgstr ""

#: ../../../LangRef.rst:3812
msgid "``{register-name}``: Requires exactly the named physical register."
msgstr ""

#: ../../../LangRef.rst:3814
msgid "Other constraints are target-specific:"
msgstr ""

#: ../../../LangRef.rst:3816 ../../../LangRef.rst:4084
msgid "AArch64:"
msgstr ""

#: ../../../LangRef.rst:3818
msgid ""
"``z``: An immediate integer 0. Outputs ``WZR`` or ``XZR``, as appropriate."
msgstr ""

#: ../../../LangRef.rst:3819
msgid ""
"``I``: An immediate integer valid for an ``ADD`` or ``SUB`` instruction, i."
"e. 0 to 4095 with optional shift by 12."
msgstr ""

#: ../../../LangRef.rst:3821
msgid ""
"``J``: An immediate integer that, when negated, is valid for an ``ADD`` or "
"``SUB`` instruction, i.e. -1 to -4095 with optional left shift by 12."
msgstr ""

#: ../../../LangRef.rst:3823
msgid ""
"``K``: An immediate integer that is valid for the 'bitmask immediate 32' of "
"a logical instruction like ``AND``, ``EOR``, or ``ORR`` with a 32-bit "
"register."
msgstr ""

#: ../../../LangRef.rst:3825
msgid ""
"``L``: An immediate integer that is valid for the 'bitmask immediate 64' of "
"a logical instruction like ``AND``, ``EOR``, or ``ORR`` with a 64-bit "
"register."
msgstr ""

#: ../../../LangRef.rst:3827
msgid ""
"``M``: An immediate integer for use with the ``MOV`` assembly alias on a 32-"
"bit register. This is a superset of ``K``: in addition to the bitmask "
"immediate, also allows immediate integers which can be loaded with a single "
"``MOVZ`` or ``MOVL`` instruction."
msgstr ""

#: ../../../LangRef.rst:3831
msgid ""
"``N``: An immediate integer for use with the ``MOV`` assembly alias on a 64-"
"bit register. This is a superset of ``L``."
msgstr ""

#: ../../../LangRef.rst:3833
msgid ""
"``Q``: Memory address operand must be in a single register (no offsets). "
"(However, LLVM currently does this for the ``m`` constraint as well.)"
msgstr ""

#: ../../../LangRef.rst:3836
msgid "``r``: A 32 or 64-bit integer register (W* or X*)."
msgstr ""

#: ../../../LangRef.rst:3837
msgid ""
"``w``: A 32, 64, or 128-bit floating-point, SIMD or SVE vector register."
msgstr ""

#: ../../../LangRef.rst:3838
msgid "``x``: Like w, but restricted to registers 0 to 15 inclusive."
msgstr ""

#: ../../../LangRef.rst:3839
msgid ""
"``y``: Like w, but restricted to SVE vector registers Z0 to Z7 inclusive."
msgstr ""

#: ../../../LangRef.rst:3840
msgid "``Upl``: One of the low eight SVE predicate registers (P0 to P7)"
msgstr ""

#: ../../../LangRef.rst:3841
msgid "``Upa``: Any of the SVE predicate registers (P0 to P15)"
msgstr ""

#: ../../../LangRef.rst:3843 ../../../LangRef.rst:4093
msgid "AMDGPU:"
msgstr ""

#: ../../../LangRef.rst:3845 ../../../LangRef.rst:3962
msgid "``r``: A 32 or 64-bit integer register."
msgstr ""

#: ../../../LangRef.rst:3846
msgid "``[0-9]v``: The 32-bit VGPR register, number 0-9."
msgstr ""

#: ../../../LangRef.rst:3847
msgid "``[0-9]s``: The 32-bit SGPR register, number 0-9."
msgstr ""

#: ../../../LangRef.rst:3850
msgid "All ARM modes:"
msgstr ""

#: ../../../LangRef.rst:3852
msgid ""
"``Q``, ``Um``, ``Un``, ``Uq``, ``Us``, ``Ut``, ``Uv``, ``Uy``: Memory "
"address operand. Treated the same as operand ``m``, at the moment."
msgstr ""

#: ../../../LangRef.rst:3854
msgid ""
"``Te``: An even general-purpose 32-bit integer register: ``r0,r2,...,r12,"
"r14``"
msgstr ""

#: ../../../LangRef.rst:3855
msgid ""
"``To``: An odd general-purpose 32-bit integer register: ``r1,r3,...,r11``"
msgstr ""

#: ../../../LangRef.rst:3857
msgid "ARM and ARM's Thumb2 mode:"
msgstr ""

#: ../../../LangRef.rst:3859
msgid "``j``: An immediate integer between 0 and 65535 (valid for ``MOVW``)"
msgstr ""

#: ../../../LangRef.rst:3860
msgid "``I``: An immediate integer valid for a data-processing instruction."
msgstr ""

#: ../../../LangRef.rst:3861
msgid "``J``: An immediate integer between -4095 and 4095."
msgstr ""

#: ../../../LangRef.rst:3862
msgid ""
"``K``: An immediate integer whose bitwise inverse is valid for a data-"
"processing instruction. (Can be used with template modifier \"``B``\" to "
"print the inverted value)."
msgstr ""

#: ../../../LangRef.rst:3865
msgid ""
"``L``: An immediate integer whose negation is valid for a data-processing "
"instruction. (Can be used with template modifier \"``n``\" to print the "
"negated value)."
msgstr ""

#: ../../../LangRef.rst:3868
msgid "``M``: A power of two or a integer between 0 and 32."
msgstr ""

#: ../../../LangRef.rst:3869
msgid "``N``: Invalid immediate constraint."
msgstr ""

#: ../../../LangRef.rst:3870
msgid "``O``: Invalid immediate constraint."
msgstr ""

#: ../../../LangRef.rst:3871
msgid "``r``: A general-purpose 32-bit integer register (``r0-r15``)."
msgstr ""

#: ../../../LangRef.rst:3872
msgid ""
"``l``: In Thumb2 mode, low 32-bit GPR registers (``r0-r7``). In ARM mode, "
"same as ``r``."
msgstr ""

#: ../../../LangRef.rst:3874
msgid ""
"``h``: In Thumb2 mode, a high 32-bit GPR register (``r8-r15``). In ARM mode, "
"invalid."
msgstr ""

#: ../../../LangRef.rst:3876 ../../../LangRef.rst:3896
msgid ""
"``w``: A 32, 64, or 128-bit floating-point/SIMD register in the ranges ``s0-"
"s31``, ``d0-d31``, or ``q0-q15``, respectively."
msgstr ""

#: ../../../LangRef.rst:3878 ../../../LangRef.rst:3898
msgid ""
"``t``: A 32, 64, or 128-bit floating-point/SIMD register in the ranges ``s0-"
"s31``, ``d0-d15``, or ``q0-q7``, respectively."
msgstr ""

#: ../../../LangRef.rst:3880 ../../../LangRef.rst:3900
msgid ""
"``x``: A 32, 64, or 128-bit floating-point/SIMD register in the ranges ``s0-"
"s15``, ``d0-d7``, or ``q0-q3``, respectively."
msgstr ""

#: ../../../LangRef.rst:3883
msgid "ARM's Thumb1 mode:"
msgstr ""

#: ../../../LangRef.rst:3885
msgid "``I``: An immediate integer between 0 and 255."
msgstr ""

#: ../../../LangRef.rst:3886
msgid "``J``: An immediate integer between -255 and -1."
msgstr ""

#: ../../../LangRef.rst:3887
msgid ""
"``K``: An immediate integer between 0 and 255, with optional left-shift by "
"some amount."
msgstr ""

#: ../../../LangRef.rst:3889
msgid "``L``: An immediate integer between -7 and 7."
msgstr ""

#: ../../../LangRef.rst:3890
msgid ""
"``M``: An immediate integer which is a multiple of 4 between 0 and 1020."
msgstr ""

#: ../../../LangRef.rst:3891
msgid "``N``: An immediate integer between 0 and 31."
msgstr ""

#: ../../../LangRef.rst:3892
msgid ""
"``O``: An immediate integer which is a multiple of 4 between -508 and 508."
msgstr ""

#: ../../../LangRef.rst:3893
msgid "``r``: A low 32-bit GPR register (``r0-r7``)."
msgstr ""

#: ../../../LangRef.rst:3894
msgid "``l``: A low 32-bit GPR register (``r0-r7``)."
msgstr ""

#: ../../../LangRef.rst:3895
msgid "``h``: A high GPR register (``r0-r7``)."
msgstr ""

#: ../../../LangRef.rst:3904 ../../../LangRef.rst:4126
msgid "Hexagon:"
msgstr ""

#: ../../../LangRef.rst:3906
msgid ""
"``o``, ``v``: A memory address operand, treated the same as constraint "
"``m``, at the moment."
msgstr ""

#: ../../../LangRef.rst:3908
msgid "``r``: A 32 or 64-bit register."
msgstr ""

#: ../../../LangRef.rst:3910 ../../../LangRef.rst:4137
msgid "MSP430:"
msgstr ""

#: ../../../LangRef.rst:3912
msgid "``r``: An 8 or 16-bit register."
msgstr ""

#: ../../../LangRef.rst:3914 ../../../LangRef.rst:4141
msgid "MIPS:"
msgstr ""

#: ../../../LangRef.rst:3916 ../../../LangRef.rst:3951
msgid "``I``: An immediate signed 16-bit integer."
msgstr ""

#: ../../../LangRef.rst:3917
msgid "``J``: An immediate integer zero."
msgstr ""

#: ../../../LangRef.rst:3918 ../../../LangRef.rst:3953
msgid "``K``: An immediate unsigned 16-bit integer."
msgstr ""

#: ../../../LangRef.rst:3919
msgid "``L``: An immediate 32-bit integer, where the lower 16 bits are 0."
msgstr ""

#: ../../../LangRef.rst:3920
msgid "``N``: An immediate integer between -65535 and -1."
msgstr ""

#: ../../../LangRef.rst:3921
msgid "``O``: An immediate signed 15-bit integer."
msgstr ""

#: ../../../LangRef.rst:3922
msgid "``P``: An immediate integer between 1 and 65535."
msgstr ""

#: ../../../LangRef.rst:3923
msgid ""
"``m``: A memory address operand. In MIPS-SE mode, allows a base address "
"register plus 16-bit immediate offset. In MIPS mode, just a base register."
msgstr ""

#: ../../../LangRef.rst:3925
msgid ""
"``R``: A memory address operand. In MIPS-SE mode, allows a base address "
"register plus a 9-bit signed offset. In MIPS mode, the same as constraint "
"``m``."
msgstr ""

#: ../../../LangRef.rst:3928
msgid ""
"``ZC``: A memory address operand, suitable for use in a ``pref``, ``ll``, or "
"``sc`` instruction on the given subtarget (details vary)."
msgstr ""

#: ../../../LangRef.rst:3930
msgid "``r``, ``d``,  ``y``: A 32 or 64-bit GPR register."
msgstr ""

#: ../../../LangRef.rst:3931
msgid ""
"``f``: A 32 or 64-bit FPU register (``F0-F31``), or a 128-bit MSA register "
"(``W0-W31``). In the case of MSA registers, it is recommended to use the "
"``w`` argument modifier for compatibility with GCC."
msgstr ""

#: ../../../LangRef.rst:3934
msgid ""
"``c``: A 32-bit or 64-bit GPR register suitable for indirect jump (always "
"``25``)."
msgstr ""

#: ../../../LangRef.rst:3936
msgid "``l``: The ``lo`` register, 32 or 64-bit."
msgstr ""

#: ../../../LangRef.rst:3937
msgid "``x``: Invalid."
msgstr ""

#: ../../../LangRef.rst:3939 ../../../LangRef.rst:4166
msgid "NVPTX:"
msgstr ""

#: ../../../LangRef.rst:3941
msgid "``b``: A 1-bit integer register."
msgstr ""

#: ../../../LangRef.rst:3942
msgid "``c`` or ``h``: A 16-bit integer register."
msgstr ""

#: ../../../LangRef.rst:3943 ../../../LangRef.rst:3995
#: ../../../LangRef.rst:4059
msgid "``r``: A 32-bit integer register."
msgstr ""

#: ../../../LangRef.rst:3944
msgid "``l`` or ``N``: A 64-bit integer register."
msgstr ""

#: ../../../LangRef.rst:3945
msgid "``f``: A 32-bit float register."
msgstr ""

#: ../../../LangRef.rst:3946
msgid "``d``: A 64-bit float register."
msgstr ""

#: ../../../LangRef.rst:3949 ../../../LangRef.rst:4170
msgid "PowerPC:"
msgstr ""

#: ../../../LangRef.rst:3952
msgid "``J``: An immediate unsigned 16-bit integer, shifted left 16 bits."
msgstr ""

#: ../../../LangRef.rst:3954
msgid "``L``: An immediate signed 16-bit integer, shifted left 16 bits."
msgstr ""

#: ../../../LangRef.rst:3955
msgid "``M``: An immediate integer greater than 31."
msgstr ""

#: ../../../LangRef.rst:3956
msgid "``N``: An immediate integer that is an exact power of 2."
msgstr ""

#: ../../../LangRef.rst:3957
msgid "``O``: The immediate integer constant 0."
msgstr ""

#: ../../../LangRef.rst:3958
msgid ""
"``P``: An immediate integer constant whose negation is a signed 16-bit "
"constant."
msgstr ""

#: ../../../LangRef.rst:3960
msgid ""
"``es``, ``o``, ``Q``, ``Z``, ``Zy``: A memory address operand, currently "
"treated the same as ``m``."
msgstr ""

#: ../../../LangRef.rst:3963
msgid ""
"``b``: A 32 or 64-bit integer register, excluding ``R0`` (that is: ``R1-"
"R31``)."
msgstr ""

#: ../../../LangRef.rst:3965
msgid ""
"``f``: A 32 or 64-bit float register (``F0-F31``), or when QPX is enabled, a "
"128 or 256-bit QPX register (``Q0-Q31``; aliases the ``F`` registers)."
msgstr ""

#: ../../../LangRef.rst:3967
msgid ""
"``v``: For ``4 x f32`` or ``4 x f64`` types, when QPX is enabled, a 128 or "
"256-bit QPX register (``Q0-Q31``), otherwise a 128-bit altivec vector "
"register (``V0-V31``)."
msgstr ""

#: ../../../LangRef.rst:3974
msgid "``y``: Condition register (``CR0-CR7``)."
msgstr ""

#: ../../../LangRef.rst:3975
msgid "``wc``: An individual CR bit in a CR register."
msgstr ""

#: ../../../LangRef.rst:3976
msgid ""
"``wa``, ``wd``, ``wf``: Any 128-bit VSX vector register, from the full VSX "
"register set (overlapping both the floating-point and vector register files)."
msgstr ""

#: ../../../LangRef.rst:3978
msgid ""
"``ws``: A 32 or 64-bit floating-point register, from the full VSX register "
"set."
msgstr ""

#: ../../../LangRef.rst:3981 ../../../LangRef.rst:4188
msgid "RISC-V:"
msgstr ""

#: ../../../LangRef.rst:3983
msgid ""
"``A``: An address operand (using a general-purpose register, without an "
"offset)."
msgstr ""

#: ../../../LangRef.rst:3985
msgid "``I``: A 12-bit signed integer immediate operand."
msgstr ""

#: ../../../LangRef.rst:3986
msgid "``J``: A zero integer immediate operand."
msgstr ""

#: ../../../LangRef.rst:3987
msgid "``K``: A 5-bit unsigned integer immediate operand."
msgstr ""

#: ../../../LangRef.rst:3988
msgid ""
"``f``: A 32- or 64-bit floating-point register (requires F or D extension)."
msgstr ""

#: ../../../LangRef.rst:3989
msgid ""
"``r``: A 32- or 64-bit general-purpose register (depending on the platform "
"``XLEN``)."
msgstr ""

#: ../../../LangRef.rst:3992 ../../../LangRef.rst:4195
msgid "Sparc:"
msgstr ""

#: ../../../LangRef.rst:3994
msgid "``I``: An immediate 13-bit signed integer."
msgstr ""

#: ../../../LangRef.rst:3996
msgid ""
"``f``: Any floating-point register on SparcV8, or a floating-point register "
"in the \"low\" half of the registers on SparcV9."
msgstr ""

#: ../../../LangRef.rst:3998
msgid "``e``: Any floating-point register. (Same as ``f`` on SparcV8.)"
msgstr ""

#: ../../../LangRef.rst:4000 ../../../LangRef.rst:4199
msgid "SystemZ:"
msgstr ""

#: ../../../LangRef.rst:4002
msgid "``I``: An immediate unsigned 8-bit integer."
msgstr ""

#: ../../../LangRef.rst:4003
msgid "``J``: An immediate unsigned 12-bit integer."
msgstr ""

#: ../../../LangRef.rst:4004
msgid "``K``: An immediate signed 16-bit integer."
msgstr ""

#: ../../../LangRef.rst:4005
msgid "``L``: An immediate signed 20-bit integer."
msgstr ""

#: ../../../LangRef.rst:4006
msgid "``M``: An immediate integer 0x7fffffff."
msgstr ""

#: ../../../LangRef.rst:4007
msgid ""
"``Q``: A memory address operand with a base address and a 12-bit immediate "
"unsigned displacement."
msgstr ""

#: ../../../LangRef.rst:4009
msgid ""
"``R``: A memory address operand with a base address, a 12-bit immediate "
"unsigned displacement, and an index register."
msgstr ""

#: ../../../LangRef.rst:4011
msgid ""
"``S``: A memory address operand with a base address and a 20-bit immediate "
"signed displacement."
msgstr ""

#: ../../../LangRef.rst:4013
msgid ""
"``T``: A memory address operand with a base address, a 20-bit immediate "
"signed displacement, and an index register."
msgstr ""

#: ../../../LangRef.rst:4015
msgid "``r`` or ``d``: A 32, 64, or 128-bit integer register."
msgstr ""

#: ../../../LangRef.rst:4016
msgid ""
"``a``: A 32, 64, or 128-bit integer address register (excludes R0, which in "
"an address context evaluates as zero)."
msgstr ""

#: ../../../LangRef.rst:4018
msgid ""
"``h``: A 32-bit value in the high part of a 64bit data register (LLVM-"
"specific)"
msgstr ""

#: ../../../LangRef.rst:4020
msgid "``f``: A 32, 64, or 128-bit floating-point register."
msgstr ""

#: ../../../LangRef.rst:4022 ../../../LangRef.rst:4204
msgid "X86:"
msgstr ""

#: ../../../LangRef.rst:4024
msgid "``I``: An immediate integer between 0 and 31."
msgstr ""

#: ../../../LangRef.rst:4025
msgid "``J``: An immediate integer between 0 and 64."
msgstr ""

#: ../../../LangRef.rst:4026
msgid "``K``: An immediate signed 8-bit integer."
msgstr ""

#: ../../../LangRef.rst:4027
msgid ""
"``L``: An immediate integer, 0xff or 0xffff or (in 64-bit mode only) "
"0xffffffff."
msgstr ""

#: ../../../LangRef.rst:4029
msgid "``M``: An immediate integer between 0 and 3."
msgstr ""

#: ../../../LangRef.rst:4030
msgid "``N``: An immediate unsigned 8-bit integer."
msgstr ""

#: ../../../LangRef.rst:4031
msgid "``O``: An immediate integer between 0 and 127."
msgstr ""

#: ../../../LangRef.rst:4032
msgid "``e``: An immediate 32-bit signed integer."
msgstr ""

#: ../../../LangRef.rst:4033
msgid "``Z``: An immediate 32-bit unsigned integer."
msgstr ""

#: ../../../LangRef.rst:4034
msgid "``o``, ``v``: Treated the same as ``m``, at the moment."
msgstr ""

#: ../../../LangRef.rst:4035
msgid ""
"``q``: An 8, 16, 32, or 64-bit register which can be accessed as an 8-bit "
"``l`` integer register. On X86-32, this is the ``a``, ``b``, ``c``, and "
"``d`` registers, and on X86-64, it is all of the integer registers."
msgstr ""

#: ../../../LangRef.rst:4038
msgid ""
"``Q``: An 8, 16, 32, or 64-bit register which can be accessed as an 8-bit "
"``h`` integer register. This is the ``a``, ``b``, ``c``, and ``d`` registers."
msgstr ""

#: ../../../LangRef.rst:4040
msgid "``r`` or ``l``: An 8, 16, 32, or 64-bit integer register."
msgstr ""

#: ../../../LangRef.rst:4041
msgid ""
"``R``: An 8, 16, 32, or 64-bit \"legacy\" integer register -- one which has "
"existed since i386, and can be accessed without the REX prefix."
msgstr ""

#: ../../../LangRef.rst:4043
msgid "``f``: A 32, 64, or 80-bit '387 FPU stack pseudo-register."
msgstr ""

#: ../../../LangRef.rst:4044
msgid "``y``: A 64-bit MMX register, if MMX is enabled."
msgstr ""

#: ../../../LangRef.rst:4045
msgid ""
"``x``: If SSE is enabled: a 32 or 64-bit scalar operand, or 128-bit vector "
"operand in a SSE register. If AVX is also enabled, can also be a 256-bit "
"vector operand in an AVX register. If AVX-512 is also enabled, can also be a "
"512-bit vector operand in an AVX512 register, Otherwise, an error."
msgstr ""

#: ../../../LangRef.rst:4049
msgid "``Y``: The same as ``x``, if *SSE2* is enabled, otherwise an error."
msgstr ""

#: ../../../LangRef.rst:4050
msgid ""
"``A``: Special case: allocates EAX first, then EDX, for a single operand (in "
"32-bit mode, a 64-bit integer operand will get split into two registers). It "
"is not recommended to use this constraint, as in 64-bit mode, the 64-bit "
"operand will get allocated only to RAX -- if two 32-bit operands are needed, "
"you're better off splitting it yourself, before passing it to the asm "
"statement."
msgstr ""

#: ../../../LangRef.rst:4057 ../../../LangRef.rst:4227
msgid "XCore:"
msgstr ""

#: ../../../LangRef.rst:4065
msgid "Asm template argument modifiers"
msgstr ""

#: ../../../LangRef.rst:4067
msgid ""
"In the asm template string, modifiers can be used on the operand reference, "
"like \"``${0:n}``\"."
msgstr ""

#: ../../../LangRef.rst:4070
msgid ""
"The modifiers are, in general, expected to behave the same way they do in "
"GCC. LLVM's support is often implemented on an 'as-needed' basis, to support "
"C inline asm code which was supported by GCC. A mismatch in behavior between "
"LLVM and GCC likely indicates a bug in LLVM."
msgstr ""

#: ../../../LangRef.rst:4075
msgid "Target-independent:"
msgstr ""

#: ../../../LangRef.rst:4077
msgid ""
"``c``: Print an immediate integer constant unadorned, without the target-"
"specific immediate punctuation (e.g. no ``$`` prefix)."
msgstr ""

#: ../../../LangRef.rst:4079
msgid ""
"``n``: Negate and print immediate integer constant unadorned, without the "
"target-specific immediate punctuation (e.g. no ``$`` prefix)."
msgstr ""

#: ../../../LangRef.rst:4081
msgid ""
"``l``: Print as an unadorned label, without the target-specific label "
"punctuation (e.g. no ``$`` prefix)."
msgstr ""

#: ../../../LangRef.rst:4086
msgid ""
"``w``: Print a GPR register with a ``w*`` name instead of ``x*`` name. E.g., "
"instead of ``x30``, print ``w30``."
msgstr ""

#: ../../../LangRef.rst:4088
msgid ""
"``x``: Print a GPR register with a ``x*`` name. (this is the default, "
"anyhow)."
msgstr ""

#: ../../../LangRef.rst:4089
msgid ""
"``b``, ``h``, ``s``, ``d``, ``q``: Print a floating-point/SIMD register with "
"a ``b*``, ``h*``, ``s*``, ``d*``, or ``q*`` name, rather than the default of "
"``v*``."
msgstr ""

#: ../../../LangRef.rst:4095 ../../../LangRef.rst:4168
#: ../../../LangRef.rst:4197
msgid "``r``: No effect."
msgstr ""

#: ../../../LangRef.rst:4097
msgid "ARM:"
msgstr ""

#: ../../../LangRef.rst:4099
msgid ""
"``a``: Print an operand as an address (with ``[`` and ``]`` surrounding a "
"register)."
msgstr ""

#: ../../../LangRef.rst:4101
msgid "``P``: No effect."
msgstr ""

#: ../../../LangRef.rst:4102
msgid "``q``: No effect."
msgstr ""

#: ../../../LangRef.rst:4103
msgid ""
"``y``: Print a VFP single-precision register as an indexed double (e.g. "
"print as ``d4[1]`` instead of ``s9``)"
msgstr ""

#: ../../../LangRef.rst:4105
msgid ""
"``B``: Bitwise invert and print an immediate integer constant without ``#`` "
"prefix."
msgstr ""

#: ../../../LangRef.rst:4107
msgid "``L``: Print the low 16-bits of an immediate integer constant."
msgstr ""

#: ../../../LangRef.rst:4108
msgid ""
"``M``: Print as a register set suitable for ldm/stm. Also prints *all* "
"register operands subsequent to the specified one (!), so use carefully."
msgstr ""

#: ../../../LangRef.rst:4110
msgid ""
"``Q``: Print the low-order register of a register-pair, or the low-order "
"register of a two-register operand."
msgstr ""

#: ../../../LangRef.rst:4112
msgid ""
"``R``: Print the high-order register of a register-pair, or the high-order "
"register of a two-register operand."
msgstr ""

#: ../../../LangRef.rst:4114
msgid ""
"``H``: Print the second register of a register-pair. (On a big-endian "
"system, ``H`` is equivalent to ``Q``, and on little-endian system, ``H`` is "
"equivalent to ``R``.)"
msgstr ""

#: ../../../LangRef.rst:4121
msgid "``e``: Print the low doubleword register of a NEON quad register."
msgstr ""

#: ../../../LangRef.rst:4122
msgid "``f``: Print the high doubleword register of a NEON quad register."
msgstr ""

#: ../../../LangRef.rst:4123
msgid ""
"``m``: Print the base register of a memory operand without the ``[`` and "
"``]`` adornment."
msgstr ""

#: ../../../LangRef.rst:4128 ../../../LangRef.rst:4172
msgid ""
"``L``: Print the second register of a two-register operand. Requires that it "
"has been allocated consecutively to the first."
msgstr ""

#: ../../../LangRef.rst:4134 ../../../LangRef.rst:4178
msgid ""
"``I``: Print the letter 'i' if the operand is an integer constant, otherwise "
"nothing. Used to print 'addi' vs 'add' instructions."
msgstr ""

#: ../../../LangRef.rst:4139 ../../../LangRef.rst:4229
msgid "No additional modifiers."
msgstr ""

#: ../../../LangRef.rst:4143
msgid "``X``: Print an immediate integer as hexadecimal"
msgstr ""

#: ../../../LangRef.rst:4144
msgid "``x``: Print the low 16 bits of an immediate integer as hexadecimal."
msgstr ""

#: ../../../LangRef.rst:4145
msgid "``d``: Print an immediate integer as decimal."
msgstr ""

#: ../../../LangRef.rst:4146
msgid "``m``: Subtract one and print an immediate integer as decimal."
msgstr ""

#: ../../../LangRef.rst:4147
msgid "``z``: Print $0 if an immediate zero, otherwise print normally."
msgstr ""

#: ../../../LangRef.rst:4148
msgid ""
"``L``: Print the low-order register of a two-register operand, or prints the "
"address of the low-order word of a double-word memory operand."
msgstr ""

#: ../../../LangRef.rst:4153
msgid ""
"``M``: Print the high-order register of a two-register operand, or prints "
"the address of the high-order word of a double-word memory operand."
msgstr ""

#: ../../../LangRef.rst:4158
msgid ""
"``D``: Print the second register of a two-register operand, or prints the "
"second word of a double-word memory operand. (On a big-endian system, ``D`` "
"is equivalent to ``L``, and on little-endian system, ``D`` is equivalent to "
"``M``.)"
msgstr ""

#: ../../../LangRef.rst:4162
msgid ""
"``w``: No effect. Provided for compatibility with GCC which requires this "
"modifier in order to print MSA registers (``W0-W31``) with the ``f`` "
"constraint."
msgstr ""

#: ../../../LangRef.rst:4180
msgid ""
"``y``: For a memory operand, prints formatter for a two-register X-form "
"instruction. (Currently always prints ``r0,OPERAND``)."
msgstr ""

#: ../../../LangRef.rst:4182
msgid ""
"``U``: Prints 'u' if the memory operand is an update form, and nothing "
"otherwise. (NOTE: LLVM does not support update form, so this will currently "
"always print nothing)"
msgstr ""

#: ../../../LangRef.rst:4185
msgid ""
"``X``: Prints 'x' if the memory operand is an indexed form. (NOTE: LLVM does "
"not support indexed form, so this will currently always print nothing)"
msgstr ""

#: ../../../LangRef.rst:4190
msgid ""
"``i``: Print the letter 'i' if the operand is not a register, otherwise "
"print nothing. Used to print 'addi' vs 'add' instructions, etc."
msgstr ""

#: ../../../LangRef.rst:4192
msgid ""
"``z``: Print the register ``zero`` if an immediate zero, otherwise print "
"normally."
msgstr ""

#: ../../../LangRef.rst:4201
msgid ""
"SystemZ implements only ``n``, and does *not* support any of the other "
"target-independent modifiers."
msgstr ""

#: ../../../LangRef.rst:4206
msgid ""
"``c``: Print an unadorned integer or symbol name. (The latter is target-"
"specific behavior for this typically target-independent modifier)."
msgstr ""

#: ../../../LangRef.rst:4208
msgid "``A``: Print a register name with a '``*``' before it."
msgstr ""

#: ../../../LangRef.rst:4209
msgid ""
"``b``: Print an 8-bit register name (e.g. ``al``); do nothing on a memory "
"operand."
msgstr ""

#: ../../../LangRef.rst:4211
msgid ""
"``h``: Print the upper 8-bit register name (e.g. ``ah``); do nothing on a "
"memory operand."
msgstr ""

#: ../../../LangRef.rst:4213
msgid ""
"``w``: Print the 16-bit register name (e.g. ``ax``); do nothing on a memory "
"operand."
msgstr ""

#: ../../../LangRef.rst:4215
msgid ""
"``k``: Print the 32-bit register name (e.g. ``eax``); do nothing on a memory "
"operand."
msgstr ""

#: ../../../LangRef.rst:4217
msgid ""
"``q``: Print the 64-bit register name (e.g. ``rax``), if 64-bit registers "
"are available, otherwise the 32-bit register name; do nothing on a memory "
"operand."
msgstr ""

#: ../../../LangRef.rst:4219
msgid ""
"``n``: Negate and print an unadorned integer, or, for operands other than an "
"immediate integer (e.g. a relocatable symbol expression), print a '-' before "
"the operand. (The behavior for relocatable symbol expressions is a target-"
"specific behavior for this typically target-independent modifier)"
msgstr ""

#: ../../../LangRef.rst:4223
msgid "``H``: Print a memory reference with additional offset +8."
msgstr ""

#: ../../../LangRef.rst:4224
msgid ""
"``P``: Print a memory reference or operand for use as the argument of a call "
"instruction. (E.g. omit ``(rip)``, even though it's PC-relative.)"
msgstr ""

#: ../../../LangRef.rst:4233
msgid "Inline Asm Metadata"
msgstr ""

#: ../../../LangRef.rst:4235
msgid ""
"The call instructions that wrap inline asm nodes may have a \"``!srcloc``\" "
"MDNode attached to it that contains a list of constant integers. If present, "
"the code generator will use the integer as the location cookie value when "
"report errors through the ``LLVMContext`` error reporting mechanisms. This "
"allows a front-end to correlate backend errors that occur with inline asm "
"back to the source code that produced it. For example:"
msgstr ""

#: ../../../LangRef.rst:4249
msgid ""
"It is up to the front-end to make sense of the magic numbers it places in "
"the IR. If the MDNode contains multiple constants, the code generator will "
"use the one that corresponds to the line of the asm that the error occurs on."
msgstr ""

#: ../../../LangRef.rst:4257
msgid "Metadata"
msgstr ""

#: ../../../LangRef.rst:4259
msgid ""
"LLVM IR allows metadata to be attached to instructions in the program that "
"can convey extra information about the code to the optimizers and code "
"generator. One example application of metadata is source-level debug "
"information. There are two metadata primitives: strings and nodes."
msgstr ""

#: ../../../LangRef.rst:4264
msgid ""
"Metadata does not have a type, and is not a value. If referenced from a "
"``call`` instruction, it uses the ``metadata`` type."
msgstr ""

#: ../../../LangRef.rst:4267
msgid "All metadata are identified in syntax by a exclamation point ('``!``')."
msgstr ""

#: ../../../LangRef.rst:4272
msgid "Metadata Nodes and Metadata Strings"
msgstr ""

#: ../../../LangRef.rst:4274
msgid ""
"A metadata string is a string surrounded by double quotes. It can contain "
"any character by escaping non-printable characters with \"``\\xx``\" where "
"\"``xx``\" is the two digit hex code. For example: \"``!\"test\\00\"``\"."
msgstr ""

#: ../../../LangRef.rst:4279
msgid ""
"Metadata nodes are represented with notation similar to structure constants "
"(a comma separated list of elements, surrounded by braces and preceded by an "
"exclamation point). Metadata nodes can have any values as their operand. For "
"example:"
msgstr ""

#: ../../../LangRef.rst:4288
msgid ""
"Metadata nodes that aren't uniqued use the ``distinct`` keyword. For example:"
msgstr ""

#: ../../../LangRef.rst:4294
msgid ""
"``distinct`` nodes are useful when nodes shouldn't be merged based on their "
"content. They can also occur when transformations cause uniquing collisions "
"when metadata operands change."
msgstr ""

#: ../../../LangRef.rst:4298
msgid ""
"A :ref:`named metadata <namedmetadatastructure>` is a collection of metadata "
"nodes, which can be looked up in the module symbol table. For example:"
msgstr ""

#: ../../../LangRef.rst:4306
msgid ""
"Metadata can be used as function arguments. Here the ``llvm.dbg.value`` "
"intrinsic is using three metadata arguments:"
msgstr ""

#: ../../../LangRef.rst:4313
msgid ""
"Metadata can be attached to an instruction. Here metadata ``!21`` is "
"attached to the ``add`` instruction using the ``!dbg`` identifier:"
msgstr ""

#: ../../../LangRef.rst:4320
msgid ""
"Metadata can also be attached to a function or a global variable. Here "
"metadata ``!22`` is attached to the ``f1`` and ``f2 functions, and the "
"globals ``g1`` and ``g2`` using the ``!dbg`` identifier:"
msgstr ""

#: ../../../LangRef.rst:4334
msgid ""
"A transformation is required to drop any metadata attachment that it does "
"not know or know it can't preserve. Currently there is an exception for "
"metadata attachment to globals for ``!type`` and ``!absolute_symbol`` which "
"can't be unconditionally dropped unless the global is itself deleted."
msgstr ""

#: ../../../LangRef.rst:4339
msgid ""
"Metadata attached to a module using named metadata may not be dropped, with "
"the exception of debug metadata (named metadata with the name ``!llvm.dbg."
"*``)."
msgstr ""

#: ../../../LangRef.rst:4342
msgid ""
"More information about specific metadata nodes recognized by the optimizers "
"and code generator is found below."
msgstr ""

#: ../../../LangRef.rst:4348
msgid "Specialized Metadata Nodes"
msgstr ""

#: ../../../LangRef.rst:4350
msgid ""
"Specialized metadata nodes are custom data structures in metadata (as "
"opposed to generic tuples). Their fields are labelled, and can be specified "
"in any order."
msgstr ""

#: ../../../LangRef.rst:4354
msgid ""
"These aren't inherently debug info centric, but currently all the "
"specialized metadata nodes are related to debug info."
msgstr ""

#: ../../../LangRef.rst:4360
msgid "DICompileUnit"
msgstr ""

#: ../../../LangRef.rst:4362
msgid ""
"``DICompileUnit`` nodes represent a compile unit. The ``enums:``, "
"``retainedTypes:``, ``globals:``, ``imports:`` and ``macros:`` fields are "
"tuples containing the debug info to be emitted along with the compile unit, "
"regardless of code optimizations (some nodes are only emitted if there are "
"references to them from instructions). The ``debugInfoForProfiling:`` field "
"is a boolean indicating whether or not line-table discriminators are updated "
"to provide more-accurate debug info for profiling results."
msgstr ""

#: ../../../LangRef.rst:4378
msgid ""
"Compile unit descriptors provide the root scope for objects declared in a "
"specific compilation unit. File descriptors are defined using this scope.  "
"These descriptors are collected by a named metadata node ``!llvm.dbg.cu``. "
"They keep track of global variables, type information, and imported entities "
"(declarations and namespaces)."
msgstr ""

#: ../../../LangRef.rst:4387
msgid "DIFile"
msgstr ""

#: ../../../LangRef.rst:4389
msgid ""
"``DIFile`` nodes represent files. The ``filename:`` can include slashes."
msgstr ""

#: ../../../LangRef.rst:4397
msgid ""
"Files are sometimes used in ``scope:`` fields, and are the only valid target "
"for ``file:`` fields. Valid values for ``checksumkind:`` field are: "
"{CSK_None, CSK_MD5, CSK_SHA1}"
msgstr ""

#: ../../../LangRef.rst:4404
msgid "DIBasicType"
msgstr ""

#: ../../../LangRef.rst:4406
msgid ""
"``DIBasicType`` nodes represent primitive types, such as ``int``, ``bool`` "
"and ``float``. ``tag:`` defaults to ``DW_TAG_base_type``."
msgstr ""

#: ../../../LangRef.rst:4415
msgid ""
"The ``encoding:`` describes the details of the type. Usually it's one of the "
"following:"
msgstr ""

#: ../../../LangRef.rst:4431
msgid "DISubroutineType"
msgstr ""

#: ../../../LangRef.rst:4433
msgid ""
"``DISubroutineType`` nodes represent subroutine types. Their ``types:`` "
"field refers to a tuple; the first operand is the return type, while the "
"rest are the types of the formal arguments in order. If the first operand is "
"``null``, that represents a function with no return value (such as ``void "
"foo() {}`` in C++)."
msgstr ""

#: ../../../LangRef.rst:4447
msgid "DIDerivedType"
msgstr ""

#: ../../../LangRef.rst:4449
msgid ""
"``DIDerivedType`` nodes represent types derived from other types, such as "
"qualified types."
msgstr ""

#: ../../../LangRef.rst:4459 ../../../LangRef.rst:4523
msgid "The following ``tag:`` values are valid:"
msgstr ""

#: ../../../LangRef.rst:4477
msgid ""
"``DW_TAG_member`` is used to define a member of a :ref:`composite type "
"<DICompositeType>`. The type of the member is the ``baseType:``. The "
"``offset:`` is the member's bit offset.  If the composite type has an ODR "
"``identifier:`` and does not set ``flags: DIFwdDecl``, then the member is "
"uniqued based only on its ``name:`` and ``scope:``."
msgstr ""

#: ../../../LangRef.rst:4483
msgid ""
"``DW_TAG_inheritance`` and ``DW_TAG_friend`` are used in the ``elements:`` "
"field of :ref:`composite types <DICompositeType>` to describe parents and "
"friends."
msgstr ""

#: ../../../LangRef.rst:4487
msgid "``DW_TAG_typedef`` is used to provide a name for the ``baseType:``."
msgstr ""

#: ../../../LangRef.rst:4489
msgid ""
"``DW_TAG_pointer_type``, ``DW_TAG_reference_type``, ``DW_TAG_const_type``, "
"``DW_TAG_volatile_type``, ``DW_TAG_restrict_type`` and "
"``DW_TAG_atomic_type`` are used to qualify the ``baseType:``."
msgstr ""

#: ../../../LangRef.rst:4493
msgid "Note that the ``void *`` type is expressed as a type derived from NULL."
msgstr ""

#: ../../../LangRef.rst:4498
msgid "DICompositeType"
msgstr ""

#: ../../../LangRef.rst:4500
msgid ""
"``DICompositeType`` nodes represent types composed of other types, like "
"structures and unions. ``elements:`` points to a tuple of the composed types."
msgstr ""

#: ../../../LangRef.rst:4503
msgid ""
"If the source language supports ODR, the ``identifier:`` field gives the "
"unique identifier used for type merging between modules.  When specified, :"
"ref:`subprogram declarations <DISubprogramDeclaration>` and :ref:`member "
"derived types <DIDerivedTypeMember>` that reference the ODR-type in their "
"``scope:`` change uniquing rules."
msgstr ""

#: ../../../LangRef.rst:4509
msgid ""
"For a given ``identifier:``, there should only be a single composite type "
"that does not have  ``flags: DIFlagFwdDecl`` set.  LLVM tools that link "
"modules together will unique such definitions at parse time via the "
"``identifier:`` field, even if the nodes are ``distinct``."
msgstr ""

#: ../../../LangRef.rst:4533
msgid ""
"For ``DW_TAG_array_type``, the ``elements:`` should be :ref:`subrange "
"descriptors <DISubrange>`, each representing the range of subscripts at that "
"level of indexing. The ``DIFlagVector`` flag to ``flags:`` indicates that an "
"array type is a native packed vector."
msgstr ""

#: ../../../LangRef.rst:4538
msgid ""
"For ``DW_TAG_enumeration_type``, the ``elements:`` should be :ref:"
"`enumerator descriptors <DIEnumerator>`, each representing the definition of "
"an enumeration value for the set. All enumeration type descriptors are "
"collected in the ``enums:`` field of the :ref:`compile unit <DICompileUnit>`."
msgstr ""

#: ../../../LangRef.rst:4543
msgid ""
"For ``DW_TAG_structure_type``, ``DW_TAG_class_type``, and "
"``DW_TAG_union_type``, the ``elements:`` should be :ref:`derived types "
"<DIDerivedType>` with ``tag: DW_TAG_member``, ``tag: DW_TAG_inheritance``, "
"or ``tag: DW_TAG_friend``; or :ref:`subprograms <DISubprogram>` with "
"``isDefinition: false``."
msgstr ""

#: ../../../LangRef.rst:4552
msgid "DISubrange"
msgstr ""

#: ../../../LangRef.rst:4554
msgid ""
"``DISubrange`` nodes are the elements for ``DW_TAG_array_type`` variants of :"
"ref:`DICompositeType`."
msgstr ""

#: ../../../LangRef.rst:4557
msgid "``count: -1`` indicates an empty array."
msgstr ""

#: ../../../LangRef.rst:4558
msgid "``count: !9`` describes the count with a :ref:`DILocalVariable`."
msgstr ""

#: ../../../LangRef.rst:4559
msgid "``count: !11`` describes the count with a :ref:`DIGlobalVariable`."
msgstr ""

#: ../../../LangRef.rst:4584
msgid "DIEnumerator"
msgstr ""

#: ../../../LangRef.rst:4586
msgid ""
"``DIEnumerator`` nodes are the elements for ``DW_TAG_enumeration_type`` "
"variants of :ref:`DICompositeType`."
msgstr ""

#: ../../../LangRef.rst:4596
msgid "DITemplateTypeParameter"
msgstr ""

#: ../../../LangRef.rst:4598
msgid ""
"``DITemplateTypeParameter`` nodes represent type parameters to generic "
"source language constructs. They are used (optionally) in :ref:"
"`DICompositeType` and :ref:`DISubprogram` ``templateParams:`` fields."
msgstr ""

#: ../../../LangRef.rst:4607
msgid "DITemplateValueParameter"
msgstr ""

#: ../../../LangRef.rst:4609
msgid ""
"``DITemplateValueParameter`` nodes represent value parameters to generic "
"source language constructs. ``tag:`` defaults to "
"``DW_TAG_template_value_parameter``, but if specified can also be set to "
"``DW_TAG_GNU_template_template_param`` or "
"``DW_TAG_GNU_template_param_pack``. They are used (optionally) in :ref:"
"`DICompositeType` and :ref:`DISubprogram` ``templateParams:`` fields."
msgstr ""

#: ../../../LangRef.rst:4620
msgid "DINamespace"
msgstr ""

#: ../../../LangRef.rst:4622
msgid "``DINamespace`` nodes represent namespaces in the source language."
msgstr ""

#: ../../../LangRef.rst:4631
msgid "DIGlobalVariable"
msgstr ""

#: ../../../LangRef.rst:4633
msgid ""
"``DIGlobalVariable`` nodes represent global variables in the source language."
msgstr ""

#: ../../../LangRef.rst:4645
msgid "DIGlobalVariableExpression"
msgstr ""

#: ../../../LangRef.rst:4647
msgid ""
"``DIGlobalVariableExpression`` nodes tie a :ref:`DIGlobalVariable` together "
"with a :ref:`DIExpression`."
msgstr ""

#: ../../../LangRef.rst:4665
msgid ""
"All global variable expressions should be referenced by the `globals:` field "
"of a :ref:`compile unit <DICompileUnit>`."
msgstr ""

#: ../../../LangRef.rst:4671
msgid "DISubprogram"
msgstr ""

#: ../../../LangRef.rst:4673
msgid ""
"``DISubprogram`` nodes represent functions from the source language. A "
"distinct ``DISubprogram`` may be attached to a function definition using ``!"
"dbg`` metadata. A unique ``DISubprogram`` may be attached to a function "
"declaration used for call site debug info. The ``variables:`` field points "
"at :ref:`variables <DILocalVariable>` that must be retained, even if their "
"IR counterparts are optimized out of the IR. The ``type:`` field must point "
"at an :ref:`DISubroutineType`."
msgstr ""

#: ../../../LangRef.rst:4683
msgid ""
"When ``isDefinition: false``, subprograms describe a declaration in the type "
"tree as opposed to a definition of a function.  If the scope is a composite "
"type with an ODR ``identifier:`` and that does not set ``flags: DIFwdDecl``, "
"then the subprogram declaration is uniqued based only on its ``linkageName:"
"`` and ``scope:``."
msgstr ""

#: ../../../LangRef.rst:4707
msgid "DILexicalBlock"
msgstr ""

#: ../../../LangRef.rst:4709
msgid ""
"``DILexicalBlock`` nodes describe nested blocks within a :ref:`subprogram "
"<DISubprogram>`. The line number and column numbers are used to distinguish "
"two lexical blocks at same depth. They are valid targets for ``scope:`` "
"fields."
msgstr ""

#: ../../../LangRef.rst:4718
msgid ""
"Usually lexical blocks are ``distinct`` to prevent node merging based on "
"operands."
msgstr ""

#: ../../../LangRef.rst:4724
msgid "DILexicalBlockFile"
msgstr ""

#: ../../../LangRef.rst:4726
msgid ""
"``DILexicalBlockFile`` nodes are used to discriminate between sections of a :"
"ref:`lexical block <DILexicalBlock>`. The ``file:`` field can be changed to "
"indicate textual inclusion, or the ``discriminator:`` field can be used to "
"discriminate between control flow within a single block in the source "
"language."
msgstr ""

#: ../../../LangRef.rst:4740
msgid "DILocation"
msgstr ""

#: ../../../LangRef.rst:4742
msgid ""
"``DILocation`` nodes represent source debug locations. The ``scope:`` field "
"is mandatory, and points at an :ref:`DILexicalBlockFile`, an :ref:"
"`DILexicalBlock`, or an :ref:`DISubprogram`."
msgstr ""

#: ../../../LangRef.rst:4753
msgid "DILocalVariable"
msgstr ""

#: ../../../LangRef.rst:4755
msgid ""
"``DILocalVariable`` nodes represent local variables in the source language. "
"If the ``arg:`` field is set to non-zero, then this variable is a subprogram "
"parameter, and it will be included in the ``variables:`` field of its :ref:"
"`DISubprogram`."
msgstr ""

#: ../../../LangRef.rst:4771
msgid "DIExpression"
msgstr ""

#: ../../../LangRef.rst:4773
msgid ""
"``DIExpression`` nodes represent expressions that are inspired by the DWARF "
"expression language. They are used in :ref:`debug "
"intrinsics<dbg_intrinsics>` (such as ``llvm.dbg.declare`` and ``llvm.dbg."
"value``) to describe how the referenced LLVM variable relates to the source "
"language variable. Debug intrinsics are interpreted left-to-right: start by "
"pushing the value/address operand of the intrinsic onto a stack, then "
"repeatedly push and evaluate opcodes from the DIExpression until the final "
"variable description is produced."
msgstr ""

#: ../../../LangRef.rst:4781
msgid "The current supported opcode vocabulary is limited:"
msgstr ""

#: ../../../LangRef.rst:4783
msgid "``DW_OP_deref`` dereferences the top of the expression stack."
msgstr ""

#: ../../../LangRef.rst:4784
msgid ""
"``DW_OP_plus`` pops the last two entries from the expression stack, adds "
"them together and appends the result to the expression stack."
msgstr ""

#: ../../../LangRef.rst:4786
msgid ""
"``DW_OP_minus`` pops the last two entries from the expression stack, "
"subtracts the last entry from the second last entry and appends the result "
"to the expression stack."
msgstr ""

#: ../../../LangRef.rst:4789
msgid "``DW_OP_plus_uconst, 93`` adds ``93`` to the working expression."
msgstr ""

#: ../../../LangRef.rst:4790
msgid ""
"``DW_OP_LLVM_fragment, 16, 8`` specifies the offset and size (``16`` and "
"``8`` here, respectively) of the variable fragment from the working "
"expression. Note that contrary to DW_OP_bit_piece, the offset is describing "
"the location within the described source variable."
msgstr ""

#: ../../../LangRef.rst:4794
msgid ""
"``DW_OP_LLVM_convert, 16, DW_ATE_signed`` specifies a bit size and encoding "
"(``16`` and ``DW_ATE_signed`` here, respectively) to which the top of the "
"expression stack is to be converted. Maps into a ``DW_OP_convert`` operation "
"that references a base type constructed from the supplied values."
msgstr ""

#: ../../../LangRef.rst:4798
msgid ""
"``DW_OP_LLVM_tag_offset, tag_offset`` specifies that a memory tag should be "
"optionally applied to the pointer. The memory tag is derived from the given "
"tag offset in an implementation-defined manner."
msgstr ""

#: ../../../LangRef.rst:4801
msgid "``DW_OP_swap`` swaps top two stack entries."
msgstr ""

#: ../../../LangRef.rst:4802
msgid ""
"``DW_OP_xderef`` provides extended dereference mechanism. The entry at the "
"top of the stack is treated as an address. The second stack entry is treated "
"as an address space identifier."
msgstr ""

#: ../../../LangRef.rst:4805
msgid "``DW_OP_stack_value`` marks a constant value."
msgstr ""

#: ../../../LangRef.rst:4806
msgid ""
"``DW_OP_LLVM_entry_value, N`` can only appear at the beginning of a "
"``DIExpression``, and it specifies that all register and memory read "
"operations for the debug value instruction's value/address operand and for "
"the ``(N - 1)`` operations immediately following the "
"``DW_OP_LLVM_entry_value`` refer to their respective values at function "
"entry. For example, ``!DIExpression(DW_OP_LLVM_entry_value, 1, "
"DW_OP_plus_uconst, 123, DW_OP_stack_value)`` specifies an expression where "
"the entry value of the debug value instruction's value/address operand is "
"pushed to the stack, and is added with 123. Due to framework limitations "
"``N`` can currently only be 1."
msgstr ""

#: ../../../LangRef.rst:4817
msgid ""
"``DW_OP_LLVM_entry_value`` is only legal in MIR. The operation is introduced "
"by the ``LiveDebugValues`` pass; currently only for function parameters that "
"are unmodified throughout a function and that are described as simple "
"register location descriptions. The operation is also introduced by the "
"``AsmPrinter`` pass when a call site parameter value "
"(``DW_AT_call_site_parameter_value``) is represented as entry value of the "
"parameter."
msgstr ""

#: ../../../LangRef.rst:4824
msgid ""
"``DW_OP_breg`` (or ``DW_OP_bregx``) represents a content on the provided "
"signed offset of the specified register. The opcode is only generated by the "
"``AsmPrinter`` pass to describe call site parameter value which requires an "
"expression over two registers."
msgstr ""

#: ../../../LangRef.rst:4829
msgid ""
"DWARF specifies three kinds of simple location descriptions: Register, "
"memory, and implicit location descriptions.  Note that a location "
"description is defined over certain ranges of a program, i.e the location of "
"a variable may change over the course of the program. Register and memory "
"location descriptions describe the *concrete location* of a source variable "
"(in the sense that a debugger might modify its value), whereas *implicit "
"locations* describe merely the actual *value* of a source variable which "
"might not exist in registers or in memory (see ``DW_OP_stack_value``)."
msgstr ""

#: ../../../LangRef.rst:4838
msgid ""
"A ``llvm.dbg.addr`` or ``llvm.dbg.declare`` intrinsic describes an indirect "
"value (the address) of a source variable. The first operand of the intrinsic "
"must be an address of some kind. A DIExpression attached to the intrinsic "
"refines this address to produce a concrete location for the source variable."
msgstr ""

#: ../../../LangRef.rst:4843
msgid ""
"A ``llvm.dbg.value`` intrinsic describes the direct value of a source "
"variable. The first operand of the intrinsic may be a direct or indirect "
"value. A DIExpresion attached to the intrinsic refines the first operand to "
"produce a direct value. For example, if the first operand is an indirect "
"value, it may be necessary to insert ``DW_OP_deref`` into the DIExpresion in "
"order to produce a valid debug intrinsic."
msgstr ""

#: ../../../LangRef.rst:4852
msgid ""
"A DIExpression is interpreted in the same way regardless of which kind of "
"debug intrinsic it's attached to."
msgstr ""

#: ../../../LangRef.rst:4866
msgid "DIFlags"
msgstr ""

#: ../../../LangRef.rst:4868
msgid "These flags encode various properties of DINodes."
msgstr ""

#: ../../../LangRef.rst:4870
msgid ""
"The `ExportSymbols` flag marks a class, struct or union whose members may be "
"referenced as if they were defined in the containing class or union. This "
"flag is used to decide whether the DW_AT_export_symbols can be used for the "
"structure type."
msgstr ""

#: ../../../LangRef.rst:4876
msgid "DIObjCProperty"
msgstr ""

#: ../../../LangRef.rst:4878
msgid "``DIObjCProperty`` nodes represent Objective-C property nodes."
msgstr ""

#: ../../../LangRef.rst:4886
msgid "DIImportedEntity"
msgstr ""

#: ../../../LangRef.rst:4888
msgid ""
"``DIImportedEntity`` nodes represent entities (such as modules) imported "
"into a compile unit."
msgstr ""

#: ../../../LangRef.rst:4897
msgid "DIMacro"
msgstr ""

#: ../../../LangRef.rst:4899
msgid ""
"``DIMacro`` nodes represent definition or undefinition of a macro "
"identifiers. The ``name:`` field is the macro identifier, followed by macro "
"parameters when defining a function-like macro, and the ``value`` field is "
"the token-string used to expand the macro identifier."
msgstr ""

#: ../../../LangRef.rst:4911
msgid "DIMacroFile"
msgstr ""

#: ../../../LangRef.rst:4913
msgid ""
"``DIMacroFile`` nodes represent inclusion of source files. The ``nodes:`` "
"field is a list of ``DIMacro`` and ``DIMacroFile`` nodes that appear in the "
"included source file."
msgstr ""

#: ../../../LangRef.rst:4923
msgid "'``tbaa``' Metadata"
msgstr ""

#: ../../../LangRef.rst:4925
msgid ""
"In LLVM IR, memory does not have types, so LLVM's own type system is not "
"suitable for doing type based alias analysis (TBAA). Instead, metadata is "
"added to the IR to describe a type system of a higher level language. This "
"can be used to implement C/C++ strict type aliasing rules, but it can also "
"be used to implement custom alias analysis behavior for other languages."
msgstr ""

#: ../../../LangRef.rst:4931
msgid ""
"This description of LLVM's TBAA system is broken into two parts: :ref:"
"`Semantics<tbaa_node_semantics>` talks about high level issues, and :ref:"
"`Representation<tbaa_node_representation>` talks about the metadata encoding "
"of various entities."
msgstr ""

#: ../../../LangRef.rst:4936
msgid ""
"It is always possible to trace any TBAA node to a \"root\" TBAA node "
"(details in the :ref:`Representation<tbaa_node_representation>` section).  "
"TBAA nodes with different roots have an unknown aliasing relationship, and "
"LLVM conservatively infers ``MayAlias`` between them.  The rules mentioned "
"in this section only pertain to TBAA nodes living under the same root."
msgstr ""

#: ../../../LangRef.rst:4945
msgid "Semantics"
msgstr ""

#: ../../../LangRef.rst:4947
msgid ""
"The TBAA metadata system, referred to as \"struct path TBAA\" (not to be "
"confused with ``tbaa.struct``), consists of the following high level "
"concepts: *Type Descriptors*, further subdivided into scalar type "
"descriptors and struct type descriptors; and *Access Tags*."
msgstr ""

#: ../../../LangRef.rst:4952
msgid ""
"**Type descriptors** describe the type system of the higher level language "
"being compiled.  **Scalar type descriptors** describe types that do not "
"contain other types.  Each scalar type has a parent type, which must also be "
"a scalar type or the TBAA root.  Via this parent relation, scalar types "
"within a TBAA root form a tree.  **Struct type descriptors** denote types "
"that contain a sequence of other type descriptors, at known offsets.  These "
"contained type descriptors can either be struct type descriptors themselves "
"or scalar type descriptors."
msgstr ""

#: ../../../LangRef.rst:4961
msgid ""
"**Access tags** are metadata nodes attached to load and store instructions. "
"Access tags use type descriptors to describe the *location* being accessed "
"in terms of the type system of the higher level language.  Access tags are "
"tuples consisting of a base type, an access type and an offset.  The base "
"type is a scalar type descriptor or a struct type descriptor, the access "
"type is a scalar type descriptor, and the offset is a constant integer."
msgstr ""

#: ../../../LangRef.rst:4968
msgid ""
"The access tag ``(BaseTy, AccessTy, Offset)`` can describe one of two things:"
msgstr ""

#: ../../../LangRef.rst:4971
msgid ""
"If ``BaseTy`` is a struct type, the tag describes a memory access (load or "
"store) of a value of type ``AccessTy`` contained in the struct type "
"``BaseTy`` at offset ``Offset``."
msgstr ""

#: ../../../LangRef.rst:4975
msgid ""
"If ``BaseTy`` is a scalar type, ``Offset`` must be 0 and ``BaseTy`` and "
"``AccessTy`` must be the same; and the access tag describes a scalar access "
"with scalar type ``AccessTy``."
msgstr ""

#: ../../../LangRef.rst:4979
msgid ""
"We first define an ``ImmediateParent`` relation on ``(BaseTy, Offset)`` "
"tuples this way:"
msgstr ""

#: ../../../LangRef.rst:4982
msgid ""
"If ``BaseTy`` is a scalar type then ``ImmediateParent(BaseTy, 0)`` is "
"``(ParentTy, 0)`` where ``ParentTy`` is the parent of the scalar type as "
"described in the TBAA metadata.  ``ImmediateParent(BaseTy, Offset)`` is "
"undefined if ``Offset`` is non-zero."
msgstr ""

#: ../../../LangRef.rst:4987
msgid ""
"If ``BaseTy`` is a struct type then ``ImmediateParent(BaseTy, Offset)`` is "
"``(NewTy, NewOffset)`` where ``NewTy`` is the type contained in ``BaseTy`` "
"at offset ``Offset`` and ``NewOffset`` is ``Offset`` adjusted to be relative "
"within that inner type."
msgstr ""

#: ../../../LangRef.rst:4992
msgid ""
"A memory access with an access tag ``(BaseTy1, AccessTy1, Offset1)`` aliases "
"a memory access with an access tag ``(BaseTy2, AccessTy2, Offset2)`` if "
"either ``(BaseTy1, Offset1)`` is reachable from ``(Base2, Offset2)`` via the "
"``Parent`` relation or vice versa."
msgstr ""

#: ../../../LangRef.rst:4997
msgid ""
"As a concrete example, the type descriptor graph for the following program"
msgstr ""

#: ../../../LangRef.rst:5019
msgid ""
"is (note that in C and C++, ``char`` can be used to access any arbitrary "
"type):"
msgstr ""

#: ../../../LangRef.rst:5034
msgid ""
"with (e.g.) ``ImmediateParent(OuterStructTy, 12)`` = ``(InnerStructTy, 0)``, "
"``ImmediateParent(InnerStructTy, 0)`` = ``(IntScalarTy, 0)``, and "
"``ImmediateParent(IntScalarTy, 0)`` = ``(CharScalarTy, 0)``."
msgstr ""

#: ../../../LangRef.rst:5041
msgid "Representation"
msgstr ""

#: ../../../LangRef.rst:5043
msgid ""
"The root node of a TBAA type hierarchy is an ``MDNode`` with 0 operands or "
"with exactly one ``MDString`` operand."
msgstr ""

#: ../../../LangRef.rst:5046
msgid ""
"Scalar type descriptors are represented as an ``MDNode`` s with two "
"operands.  The first operand is an ``MDString`` denoting the name of the "
"struct type.  LLVM does not assign meaning to the value of this operand, it "
"only cares about it being an ``MDString``.  The second operand is an "
"``MDNode`` which points to the parent for said scalar type descriptor, which "
"is either another scalar type descriptor or the TBAA root.  Scalar type "
"descriptors can have an optional third argument, but that must be the "
"constant integer zero."
msgstr ""

#: ../../../LangRef.rst:5055
msgid ""
"Struct type descriptors are represented as ``MDNode`` s with an odd number "
"of operands greater than 1.  The first operand is an ``MDString`` denoting "
"the name of the struct type.  Like in scalar type descriptors the actual "
"value of this name operand is irrelevant to LLVM.  After the name operand, "
"the struct type descriptors have a sequence of alternating ``MDNode`` and "
"``ConstantInt`` operands.  With N starting from 1, the 2N - 1 th operand, an "
"``MDNode``, denotes a contained field, and the 2N th operand, a "
"``ConstantInt``, is the offset of the said contained field.  The offsets "
"must be in non-decreasing order."
msgstr ""

#: ../../../LangRef.rst:5065
msgid ""
"Access tags are represented as ``MDNode`` s with either 3 or 4 operands. The "
"first operand is an ``MDNode`` pointing to the node representing the base "
"type.  The second operand is an ``MDNode`` pointing to the node representing "
"the access type.  The third operand is a ``ConstantInt`` that states the "
"offset of the access.  If a fourth field is present, it must be a "
"``ConstantInt`` valued at 0 or 1.  If it is 1 then the access tag states "
"that the location being accessed is \"constant\" (meaning "
"``pointsToConstantMemory`` should return true; see `other useful "
"AliasAnalysis methods <AliasAnalysis.html#OtherItfs>`_).  The TBAA root of "
"the access type and the base type of an access tag must be the same, and "
"that is the TBAA root of the access tag."
msgstr ""

#: ../../../LangRef.rst:5078
msgid "'``tbaa.struct``' Metadata"
msgstr ""

#: ../../../LangRef.rst:5080
msgid ""
"The :ref:`llvm.memcpy <int_memcpy>` is often used to implement aggregate "
"assignment operations in C and similar languages, however it is defined to "
"copy a contiguous region of memory, which is more than strictly necessary "
"for aggregate types which contain holes due to padding. Also, it doesn't "
"contain any TBAA information about the fields of the aggregate."
msgstr ""

#: ../../../LangRef.rst:5087
msgid ""
"``!tbaa.struct`` metadata can describe which memory subregions in a memcpy "
"are padding and what the TBAA tags of the struct are."
msgstr ""

#: ../../../LangRef.rst:5090
msgid ""
"The current metadata format is very simple. ``!tbaa.struct`` metadata nodes "
"are a list of operands which are in conceptual groups of three. For each "
"group of three, the first operand gives the byte offset of a field in bytes, "
"the second gives its size in bytes, and the third gives its tbaa tag. e.g.:"
msgstr ""

#: ../../../LangRef.rst:5100
msgid ""
"This describes a struct with two fields. The first is at offset 0 bytes with "
"size 4 bytes, and has tbaa tag !1. The second is at offset 8 bytes and has "
"size 4 bytes and has tbaa tag !2."
msgstr ""

#: ../../../LangRef.rst:5104
msgid ""
"Note that the fields need not be contiguous. In this example, there is a 4 "
"byte gap between the two fields. This gap represents padding which does not "
"carry useful data and need not be preserved."
msgstr ""

#: ../../../LangRef.rst:5109
msgid "'``noalias``' and '``alias.scope``' Metadata"
msgstr ""

#: ../../../LangRef.rst:5111
msgid ""
"``noalias`` and ``alias.scope`` metadata provide the ability to specify "
"generic noalias memory-access sets. This means that some collection of "
"memory access instructions (loads, stores, memory-accessing calls, etc.) "
"that carry ``noalias`` metadata can specifically be specified not to alias "
"with some other collection of memory access instructions that carry ``alias."
"scope`` metadata. Each type of metadata specifies a list of scopes where "
"each scope has an id and a domain."
msgstr ""

#: ../../../LangRef.rst:5119
msgid ""
"When evaluating an aliasing query, if for some domain, the set of scopes "
"with that domain in one instruction's ``alias.scope`` list is a subset of "
"(or equal to) the set of scopes for that domain in another instruction's "
"``noalias`` list, then the two memory accesses are assumed not to alias."
msgstr ""

#: ../../../LangRef.rst:5125
msgid ""
"Because scopes in one domain don't affect scopes in other domains, separate "
"domains can be used to compose multiple independent noalias sets.  This is "
"used for example during inlining.  As the noalias function parameters are "
"turned into noalias scope metadata, a new domain is used every time the "
"function is inlined."
msgstr ""

#: ../../../LangRef.rst:5131
msgid ""
"The metadata identifying each domain is itself a list containing one or two "
"entries. The first entry is the name of the domain. Note that if the name is "
"a string then it can be combined across functions and translation units. A "
"self-reference can be used to create globally unique domain names. A "
"descriptive string may optionally be provided as a second list entry."
msgstr ""

#: ../../../LangRef.rst:5137
msgid ""
"The metadata identifying each scope is also itself a list containing two or "
"three entries. The first entry is the name of the scope. Note that if the "
"name is a string then it can be combined across functions and translation "
"units. A self-reference can be used to create globally unique scope names. A "
"metadata reference to the scope's domain is the second entry. A descriptive "
"string may optionally be provided as a third list entry."
msgstr ""

#: ../../../LangRef.rst:5144
msgid "For example,"
msgstr ""

#: ../../../LangRef.rst:5178
msgid "'``fpmath``' Metadata"
msgstr ""

#: ../../../LangRef.rst:5180
msgid ""
"``fpmath`` metadata may be attached to any instruction of floating-point "
"type. It can be used to express the maximum acceptable error in the result "
"of that instruction, in ULPs, thus potentially allowing the compiler to use "
"a more efficient but less accurate method of computing it. ULP is defined as "
"follows:"
msgstr ""

#: ../../../LangRef.rst:5186
msgid ""
"If ``x`` is a real number that lies between two finite consecutive floating-"
"point numbers ``a`` and ``b``, without being equal to one of them, then "
"``ulp(x) = |b - a|``, otherwise ``ulp(x)`` is the distance between the two "
"non-equal finite floating-point numbers nearest ``x``. Moreover, "
"``ulp(NaN)`` is ``NaN``."
msgstr ""

#: ../../../LangRef.rst:5192
msgid ""
"The metadata node shall consist of a single positive float type number "
"representing the maximum relative error, for example:"
msgstr ""

#: ../../../LangRef.rst:5202
msgid "'``range``' Metadata"
msgstr ""

#: ../../../LangRef.rst:5204
msgid ""
"``range`` metadata may be attached only to ``load``, ``call`` and ``invoke`` "
"of integer types. It expresses the possible ranges the loaded value or the "
"value returned by the called function at this call site is in. If the loaded "
"or returned value is not in the specified range, the behavior is undefined. "
"The ranges are represented with a flattened list of integers. The loaded "
"value or the value returned is known to be in the union of the ranges "
"defined by each consecutive pair. Each pair has the following properties:"
msgstr ""

#: ../../../LangRef.rst:5212
msgid "The type must match the type loaded by the instruction."
msgstr ""

#: ../../../LangRef.rst:5213
msgid "The pair ``a,b`` represents the range ``[a,b)``."
msgstr ""

#: ../../../LangRef.rst:5214
msgid "Both ``a`` and ``b`` are constants."
msgstr ""

#: ../../../LangRef.rst:5215
msgid "The range is allowed to wrap."
msgstr ""

#: ../../../LangRef.rst:5216
msgid ""
"The range should not represent the full or empty set. That is, ``a!=b``."
msgstr ""

#: ../../../LangRef.rst:5219
msgid ""
"In addition, the pairs must be in signed order of the lower bound and they "
"must be non-contiguous."
msgstr ""

#: ../../../LangRef.rst:5238
msgid "'``absolute_symbol``' Metadata"
msgstr ""

#: ../../../LangRef.rst:5240
msgid ""
"``absolute_symbol`` metadata may be attached to a global variable "
"declaration. It marks the declaration as a reference to an absolute symbol, "
"which causes the backend to use absolute relocations for the symbol even in "
"position independent code, and expresses the possible ranges that the global "
"variable's *address* (not its value) is in, in the same format as ``range`` "
"metadata, with the extension that the pair ``all-ones,all-ones`` may be used "
"to represent the full set."
msgstr ""

#: ../../../LangRef.rst:5248
msgid "Example (assuming 64-bit pointers):"
msgstr ""

#: ../../../LangRef.rst:5260
msgid "'``callees``' Metadata"
msgstr ""

#: ../../../LangRef.rst:5262
msgid ""
"``callees`` metadata may be attached to indirect call sites. If ``callees`` "
"metadata is attached to a call site, and any callee is not among the set of "
"functions provided by the metadata, the behavior is undefined. The intent of "
"this metadata is to facilitate optimizations such as indirect-call "
"promotion. For example, in the code below, the call instruction may only "
"target the ``add`` or ``sub`` functions:"
msgstr ""

#: ../../../LangRef.rst:5277
msgid "'``callback``' Metadata"
msgstr ""

#: ../../../LangRef.rst:5279
msgid ""
"``callback`` metadata may be attached to a function declaration, or "
"definition. (Call sites are excluded only due to the lack of a use case.) "
"For ease of exposition, we'll refer to the function annotated w/ metadata as "
"a broker function. The metadata describes how the arguments of a call to the "
"broker are in turn passed to the callback function specified by the "
"metadata. Thus, the ``callback`` metadata provides a partial description of "
"a call site inside the broker function with regards to the arguments of a "
"call to the broker. The only semantic restriction on the broker function "
"itself is that it is not allowed to inspect or modify arguments referenced "
"in the ``callback`` metadata as pass-through to the callback function."
msgstr ""

#: ../../../LangRef.rst:5290
msgid ""
"The broker is not required to actually invoke the callback function at "
"runtime. However, the assumptions about not inspecting or modifying "
"arguments that would be passed to the specified callback function still "
"hold, even if the callback function is not dynamically invoked. The broker "
"is allowed to invoke the callback function more than once per invocation of "
"the broker. The broker is also allowed to invoke (directly or indirectly) "
"the function passed as a callback through another use. Finally, the broker "
"is also allowed to relay the callback callee invocation to a different "
"thread."
msgstr ""

#: ../../../LangRef.rst:5299
msgid ""
"The metadata is structured as follows: At the outer level, ``callback`` "
"metadata is a list of ``callback`` encodings. Each encoding starts with a "
"constant ``i64`` which describes the argument position of the callback "
"function in the call to the broker. The following elements, except the last, "
"describe what arguments are passed to the callback function. Each element is "
"again an ``i64`` constant identifying the argument of the broker that is "
"passed through, or ``i64 -1`` to indicate an unknown or inspected argument. "
"The order in which they are listed has to be the same in which they are "
"passed to the callback callee. The last element of the encoding is a boolean "
"which specifies how variadic arguments of the broker are handled. If it is "
"true, all variadic arguments of the broker are passed through to the "
"callback function *after* the arguments encoded explicitly before."
msgstr ""

#: ../../../LangRef.rst:5312
msgid ""
"In the code below, the ``pthread_create`` function is marked as a broker "
"through the ``!callback !1`` metadata. In the example, there is only one "
"callback encoding, namely ``!2``, associated with the broker. This encoding "
"identifies the callback function as the second argument of the broker (``i64 "
"2``) and the sole argument of the callback function as the third one of the "
"broker function (``i64 3``)."
msgstr ""

#: ../../../LangRef.rst:5331
msgid ""
"Another example is shown below. The callback callee is the second argument "
"of the ``__kmpc_fork_call`` function (``i64 2``). The callee is given two "
"unknown values (each identified by a ``i64 -1``) and afterwards all variadic "
"arguments that are passed to the ``__kmpc_fork_call`` call (due to the final "
"``i1 true``)."
msgstr ""

#: ../../../LangRef.rst:5351
msgid "'``unpredictable``' Metadata"
msgstr ""

#: ../../../LangRef.rst:5353
msgid ""
"``unpredictable`` metadata may be attached to any branch or switch "
"instruction. It can be used to express the unpredictability of control flow. "
"Similar to the llvm.expect intrinsic, it may be used to alter optimizations "
"related to compare and branch instructions. The metadata is treated as a "
"boolean value; if it exists, it signals that the branch or switch that it is "
"attached to is completely unpredictable."
msgstr ""

#: ../../../LangRef.rst:5363
msgid "'``dereferenceable``' Metadata"
msgstr ""

#: ../../../LangRef.rst:5365
msgid ""
"The existence of the ``!dereferenceable`` metadata on the instruction tells "
"the optimizer that the value loaded is known to be dereferenceable. The "
"number of bytes known to be dereferenceable is specified by the integer "
"value in the metadata node. This is analogous to the ''dereferenceable'' "
"attribute on parameters and return values."
msgstr ""

#: ../../../LangRef.rst:5374
msgid "'``dereferenceable_or_null``' Metadata"
msgstr ""

#: ../../../LangRef.rst:5376
msgid ""
"The existence of the ``!dereferenceable_or_null`` metadata on the "
"instruction tells the optimizer that the value loaded is known to be either "
"dereferenceable or null. The number of bytes known to be dereferenceable is "
"specified by the integer value in the metadata node. This is analogous to "
"the ''dereferenceable_or_null'' attribute on parameters and return values."
msgstr ""

#: ../../../LangRef.rst:5386
msgid "'``llvm.loop``'"
msgstr ""

#: ../../../LangRef.rst:5388
msgid ""
"It is sometimes useful to attach information to loop constructs. Currently, "
"loop metadata is implemented as metadata attached to the branch instruction "
"in the loop latch block. This type of metadata refer to a metadata node that "
"is guaranteed to be separate for each loop. The loop identifier metadata is "
"specified with the name ``llvm.loop``."
msgstr ""

#: ../../../LangRef.rst:5394
msgid ""
"The loop identifier metadata is implemented using a metadata that refers to "
"itself to avoid merging it with any other identifier metadata, e.g., during "
"module linkage or function inlining. That is, each loop should refer to "
"their own identification metadata even if they reside in separate functions. "
"The following example contains loop identifier metadata for two separate "
"loop constructs:"
msgstr ""

#: ../../../LangRef.rst:5406
msgid ""
"The loop identifier metadata can be used to specify additional per-loop "
"metadata. Any operands after the first operand can be treated as user-"
"defined metadata. For example the ``llvm.loop.unroll.count`` suggests an "
"unroll factor to the loop unroller:"
msgstr ""

#: ../../../LangRef.rst:5419
msgid "'``llvm.loop.disable_nonforced``'"
msgstr ""

#: ../../../LangRef.rst:5421
msgid ""
"This metadata disables all optional loop transformations unless explicitly "
"instructed using other transformation metadata such as ``llvm.loop.unroll."
"enable``. That is, no heuristic will try to determine whether a "
"transformation is profitable. The purpose is to avoid that the loop is "
"transformed to a different loop before an explicitly requested (forced) "
"transformation is applied. For instance, loop fusion can make other "
"transformations impossible. Mandatory loop canonicalizations such as loop "
"rotation are still applied."
msgstr ""

#: ../../../LangRef.rst:5430
msgid ""
"It is recommended to use this metadata in addition to any llvm.loop.* "
"transformation directive. Also, any loop should have at most one directive "
"applied to it (and a sequence of transformations built using followup-"
"attributes). Otherwise, which transformation will be applied depends on "
"implementation details such as the pass pipeline order."
msgstr ""

#: ../../../LangRef.rst:5436
msgid "See :ref:`transformation-metadata` for details."
msgstr ""

#: ../../../LangRef.rst:5439
msgid "'``llvm.loop.vectorize``' and '``llvm.loop.interleave``'"
msgstr ""

#: ../../../LangRef.rst:5441
msgid ""
"Metadata prefixed with ``llvm.loop.vectorize`` or ``llvm.loop.interleave`` "
"are used to control per-loop vectorization and interleaving parameters such "
"as vectorization width and interleave count. These metadata should be used "
"in conjunction with ``llvm.loop`` loop identification metadata. The ``llvm."
"loop.vectorize`` and ``llvm.loop.interleave`` metadata are only optimization "
"hints and the optimizer will only interleave and vectorize loops if it "
"believes it is safe to do so. The ``llvm.loop.parallel_accesses`` metadata "
"which contains information about loop-carried memory dependencies can be "
"helpful in determining the safety of these transformations."
msgstr ""

#: ../../../LangRef.rst:5452
msgid "'``llvm.loop.interleave.count``' Metadata"
msgstr ""

#: ../../../LangRef.rst:5454
msgid ""
"This metadata suggests an interleave count to the loop interleaver. The "
"first operand is the string ``llvm.loop.interleave.count`` and the second "
"operand is an integer specifying the interleave count. For example:"
msgstr ""

#: ../../../LangRef.rst:5463
msgid ""
"Note that setting ``llvm.loop.interleave.count`` to 1 disables interleaving "
"multiple iterations of the loop. If ``llvm.loop.interleave.count`` is set to "
"0 then the interleave count will be determined automatically."
msgstr ""

#: ../../../LangRef.rst:5468
msgid "'``llvm.loop.vectorize.enable``' Metadata"
msgstr ""

#: ../../../LangRef.rst:5470
msgid ""
"This metadata selectively enables or disables vectorization for the loop. "
"The first operand is the string ``llvm.loop.vectorize.enable`` and the "
"second operand is a bit. If the bit operand value is 1 vectorization is "
"enabled. A value of 0 disables vectorization:"
msgstr ""

#: ../../../LangRef.rst:5481
msgid "'``llvm.loop.vectorize.predicate.enable``' Metadata"
msgstr ""

#: ../../../LangRef.rst:5483
msgid ""
"This metadata selectively enables or disables creating predicated "
"instructions for the loop, which can enable folding of the scalar epilogue "
"loop into the main loop. The first operand is the string ``llvm.loop."
"vectorize.predicate.enable`` and the second operand is a bit. If the bit "
"operand value is 1 vectorization is enabled. A value of 0 disables "
"vectorization:"
msgstr ""

#: ../../../LangRef.rst:5496
msgid "'``llvm.loop.vectorize.width``' Metadata"
msgstr ""

#: ../../../LangRef.rst:5498
msgid ""
"This metadata sets the target width of the vectorizer. The first operand is "
"the string ``llvm.loop.vectorize.width`` and the second operand is an "
"integer specifying the width. For example:"
msgstr ""

#: ../../../LangRef.rst:5506
msgid ""
"Note that setting ``llvm.loop.vectorize.width`` to 1 disables vectorization "
"of the loop. If ``llvm.loop.vectorize.width`` is set to 0 or if the loop "
"does not have this metadata the width will be determined automatically."
msgstr ""

#: ../../../LangRef.rst:5512
msgid "'``llvm.loop.vectorize.followup_vectorized``' Metadata"
msgstr ""

#: ../../../LangRef.rst:5514
msgid ""
"This metadata defines which loop attributes the vectorized loop will have. "
"See :ref:`transformation-metadata` for details."
msgstr ""

#: ../../../LangRef.rst:5518
msgid "'``llvm.loop.vectorize.followup_epilogue``' Metadata"
msgstr ""

#: ../../../LangRef.rst:5520
msgid ""
"This metadata defines which loop attributes the epilogue will have. The "
"epilogue is not vectorized and is executed when either the vectorized loop "
"is not known to preserve semantics (because e.g., it processes two arrays "
"that are found to alias by a runtime check) or for the last iterations that "
"do not fill a complete set of vector lanes. See :ref:`Transformation "
"Metadata <transformation-metadata>` for details."
msgstr ""

#: ../../../LangRef.rst:5528
msgid "'``llvm.loop.vectorize.followup_all``' Metadata"
msgstr ""

#: ../../../LangRef.rst:5530
msgid ""
"Attributes in the metadata will be added to both the vectorized and epilogue "
"loop. See :ref:`Transformation Metadata <transformation-metadata>` for "
"details."
msgstr ""

#: ../../../LangRef.rst:5535
msgid "'``llvm.loop.unroll``'"
msgstr ""

#: ../../../LangRef.rst:5537
msgid ""
"Metadata prefixed with ``llvm.loop.unroll`` are loop unrolling optimization "
"hints such as the unroll factor. ``llvm.loop.unroll`` metadata should be "
"used in conjunction with ``llvm.loop`` loop identification metadata. The "
"``llvm.loop.unroll`` metadata are only optimization hints and the unrolling "
"will only be performed if the optimizer believes it is safe to do so."
msgstr ""

#: ../../../LangRef.rst:5545
msgid "'``llvm.loop.unroll.count``' Metadata"
msgstr ""

#: ../../../LangRef.rst:5547
msgid ""
"This metadata suggests an unroll factor to the loop unroller. The first "
"operand is the string ``llvm.loop.unroll.count`` and the second operand is a "
"positive integer specifying the unroll factor. For example:"
msgstr ""

#: ../../../LangRef.rst:5556
msgid ""
"If the trip count of the loop is less than the unroll count the loop will be "
"partially unrolled."
msgstr ""

#: ../../../LangRef.rst:5560
msgid "'``llvm.loop.unroll.disable``' Metadata"
msgstr ""

#: ../../../LangRef.rst:5562
msgid ""
"This metadata disables loop unrolling. The metadata has a single operand "
"which is the string ``llvm.loop.unroll.disable``. For example:"
msgstr ""

#: ../../../LangRef.rst:5570
msgid "'``llvm.loop.unroll.runtime.disable``' Metadata"
msgstr ""

#: ../../../LangRef.rst:5572
msgid ""
"This metadata disables runtime loop unrolling. The metadata has a single "
"operand which is the string ``llvm.loop.unroll.runtime.disable``. For "
"example:"
msgstr ""

#: ../../../LangRef.rst:5580
msgid "'``llvm.loop.unroll.enable``' Metadata"
msgstr ""

#: ../../../LangRef.rst:5582
msgid ""
"This metadata suggests that the loop should be fully unrolled if the trip "
"count is known at compile time and partially unrolled if the trip count is "
"not known at compile time. The metadata has a single operand which is the "
"string ``llvm.loop.unroll.enable``.  For example:"
msgstr ""

#: ../../../LangRef.rst:5592
msgid "'``llvm.loop.unroll.full``' Metadata"
msgstr ""

#: ../../../LangRef.rst:5594
msgid ""
"This metadata suggests that the loop should be unrolled fully. The metadata "
"has a single operand which is the string ``llvm.loop.unroll.full``. For "
"example:"
msgstr ""

#: ../../../LangRef.rst:5603
msgid "'``llvm.loop.unroll.followup``' Metadata"
msgstr ""

#: ../../../LangRef.rst:5605
msgid ""
"This metadata defines which loop attributes the unrolled loop will have. "
"See :ref:`Transformation Metadata <transformation-metadata>` for details."
msgstr ""

#: ../../../LangRef.rst:5609
msgid "'``llvm.loop.unroll.followup_remainder``' Metadata"
msgstr ""

#: ../../../LangRef.rst:5611
msgid ""
"This metadata defines which loop attributes the remainder loop after partial/"
"runtime unrolling will have. See :ref:`Transformation Metadata "
"<transformation-metadata>` for details."
msgstr ""

#: ../../../LangRef.rst:5616
msgid "'``llvm.loop.unroll_and_jam``'"
msgstr ""

#: ../../../LangRef.rst:5618
msgid ""
"This metadata is treated very similarly to the ``llvm.loop.unroll`` metadata "
"above, but affect the unroll and jam pass. In addition any loop with ``llvm."
"loop.unroll`` metadata but no ``llvm.loop.unroll_and_jam`` metadata will "
"disable unroll and jam (so ``llvm.loop.unroll`` metadata will be left to the "
"unroller, plus ``llvm.loop.unroll.disable`` metadata will disable unroll and "
"jam too.)"
msgstr ""

#: ../../../LangRef.rst:5625
msgid ""
"The metadata for unroll and jam otherwise is the same as for ``unroll``. "
"``llvm.loop.unroll_and_jam.enable``, ``llvm.loop.unroll_and_jam.disable`` "
"and ``llvm.loop.unroll_and_jam.count`` do the same as for unroll. ``llvm."
"loop.unroll_and_jam.full`` is not supported. Again these are only hints and "
"the normal safety checks will still be performed."
msgstr ""

#: ../../../LangRef.rst:5632
msgid "'``llvm.loop.unroll_and_jam.count``' Metadata"
msgstr ""

#: ../../../LangRef.rst:5634
msgid ""
"This metadata suggests an unroll and jam factor to use, similarly to ``llvm."
"loop.unroll.count``. The first operand is the string ``llvm.loop."
"unroll_and_jam.count`` and the second operand is a positive integer "
"specifying the unroll factor. For example:"
msgstr ""

#: ../../../LangRef.rst:5643
msgid ""
"If the trip count of the loop is less than the unroll count the loop will be "
"partially unroll and jammed."
msgstr ""

#: ../../../LangRef.rst:5647
msgid "'``llvm.loop.unroll_and_jam.disable``' Metadata"
msgstr ""

#: ../../../LangRef.rst:5649
msgid ""
"This metadata disables loop unroll and jamming. The metadata has a single "
"operand which is the string ``llvm.loop.unroll_and_jam.disable``. For "
"example:"
msgstr ""

#: ../../../LangRef.rst:5657
msgid "'``llvm.loop.unroll_and_jam.enable``' Metadata"
msgstr ""

#: ../../../LangRef.rst:5659
msgid ""
"This metadata suggests that the loop should be fully unroll and jammed if "
"the trip count is known at compile time and partially unrolled if the trip "
"count is not known at compile time. The metadata has a single operand which "
"is the string ``llvm.loop.unroll_and_jam.enable``.  For example:"
msgstr ""

#: ../../../LangRef.rst:5669
msgid "'``llvm.loop.unroll_and_jam.followup_outer``' Metadata"
msgstr ""

#: ../../../LangRef.rst:5671
msgid ""
"This metadata defines which loop attributes the outer unrolled loop will "
"have. See :ref:`Transformation Metadata <transformation-metadata>` for "
"details."
msgstr ""

#: ../../../LangRef.rst:5676
msgid "'``llvm.loop.unroll_and_jam.followup_inner``' Metadata"
msgstr ""

#: ../../../LangRef.rst:5678
msgid ""
"This metadata defines which loop attributes the inner jammed loop will have. "
"See :ref:`Transformation Metadata <transformation-metadata>` for details."
msgstr ""

#: ../../../LangRef.rst:5683
msgid "'``llvm.loop.unroll_and_jam.followup_remainder_outer``' Metadata"
msgstr ""

#: ../../../LangRef.rst:5685
msgid ""
"This metadata defines which attributes the epilogue of the outer loop will "
"have. This loop is usually unrolled, meaning there is no such loop. This "
"attribute will be ignored in this case. See :ref:`Transformation Metadata "
"<transformation-metadata>` for details."
msgstr ""

#: ../../../LangRef.rst:5691
msgid "'``llvm.loop.unroll_and_jam.followup_remainder_inner``' Metadata"
msgstr ""

#: ../../../LangRef.rst:5693
msgid ""
"This metadata defines which attributes the inner loop of the epilogue will "
"have. The outer epilogue will usually be unrolled, meaning there can be "
"multiple inner remainder loops. See :ref:`Transformation Metadata "
"<transformation-metadata>` for details."
msgstr ""

#: ../../../LangRef.rst:5699
msgid "'``llvm.loop.unroll_and_jam.followup_all``' Metadata"
msgstr ""

#: ../../../LangRef.rst:5701
msgid ""
"Attributes specified in the metadata is added to all ``llvm.loop."
"unroll_and_jam.*`` loops. See :ref:`Transformation Metadata <transformation-"
"metadata>` for details."
msgstr ""

#: ../../../LangRef.rst:5706
msgid "'``llvm.loop.licm_versioning.disable``' Metadata"
msgstr ""

#: ../../../LangRef.rst:5708
msgid ""
"This metadata indicates that the loop should not be versioned for the "
"purpose of enabling loop-invariant code motion (LICM). The metadata has a "
"single operand which is the string ``llvm.loop.licm_versioning.disable``. "
"For example:"
msgstr ""

#: ../../../LangRef.rst:5717
msgid "'``llvm.loop.distribute.enable``' Metadata"
msgstr ""

#: ../../../LangRef.rst:5719
msgid ""
"Loop distribution allows splitting a loop into multiple loops.  Currently, "
"this is only performed if the entire loop cannot be vectorized due to unsafe "
"memory dependencies.  The transformation will attempt to isolate the unsafe "
"dependencies into their own loop."
msgstr ""

#: ../../../LangRef.rst:5724
msgid ""
"This metadata can be used to selectively enable or disable distribution of "
"the loop.  The first operand is the string ``llvm.loop.distribute.enable`` "
"and the second operand is a bit. If the bit operand value is 1 distribution "
"is enabled. A value of 0 disables distribution:"
msgstr ""

#: ../../../LangRef.rst:5734
msgid ""
"This metadata should be used in conjunction with ``llvm.loop`` loop "
"identification metadata."
msgstr ""

#: ../../../LangRef.rst:5738
msgid "'``llvm.loop.distribute.followup_coincident``' Metadata"
msgstr ""

#: ../../../LangRef.rst:5740
msgid ""
"This metadata defines which attributes extracted loops with no cyclic "
"dependencies will have (i.e. can be vectorized). See :ref:`Transformation "
"Metadata <transformation-metadata>` for details."
msgstr ""

#: ../../../LangRef.rst:5745
msgid "'``llvm.loop.distribute.followup_sequential``' Metadata"
msgstr ""

#: ../../../LangRef.rst:5747
msgid ""
"This metadata defines which attributes the isolated loops with unsafe memory "
"dependencies will have. See :ref:`Transformation Metadata <transformation-"
"metadata>` for details."
msgstr ""

#: ../../../LangRef.rst:5752
msgid "'``llvm.loop.distribute.followup_fallback``' Metadata"
msgstr ""

#: ../../../LangRef.rst:5754
msgid ""
"If loop versioning is necessary, this metadata defined the attributes the "
"non-distributed fallback version will have. See :ref:`Transformation "
"Metadata <transformation-metadata>` for details."
msgstr ""

#: ../../../LangRef.rst:5759
msgid "'``llvm.loop.distribute.followup_all``' Metadata"
msgstr ""

#: ../../../LangRef.rst:5761
msgid ""
"The attributes in this metadata is added to all followup loops of the loop "
"distribution pass. See :ref:`Transformation Metadata <transformation-"
"metadata>` for details."
msgstr ""

#: ../../../LangRef.rst:5766
msgid "'``llvm.licm.disable``' Metadata"
msgstr ""

#: ../../../LangRef.rst:5768
msgid ""
"This metadata indicates that loop-invariant code motion (LICM) should not be "
"performed on this loop. The metadata has a single operand which is the "
"string ``llvm.licm.disable``. For example:"
msgstr ""

#: ../../../LangRef.rst:5776
msgid ""
"Note that although it operates per loop it isn't given the llvm.loop prefix "
"as it is not affected by the ``llvm.loop.disable_nonforced`` metadata."
msgstr ""

#: ../../../LangRef.rst:5780
msgid "'``llvm.access.group``' Metadata"
msgstr ""

#: ../../../LangRef.rst:5782
msgid ""
"``llvm.access.group`` metadata can be attached to any instruction that "
"potentially accesses memory. It can point to a single distinct metadata "
"node, which we call access group. This node represents all memory access "
"instructions referring to it via ``llvm.access.group``. When an instruction "
"belongs to multiple access groups, it can also point to a list of accesses "
"groups, illustrated by the following example."
msgstr ""

#: ../../../LangRef.rst:5797
msgid ""
"It is illegal for the list node to be empty since it might be confused with "
"an access group."
msgstr ""

#: ../../../LangRef.rst:5800
msgid ""
"The access group metadata node must be 'distinct' to avoid collapsing "
"multiple access groups by content. A access group metadata node must always "
"be empty which can be used to distinguish an access group metadata node from "
"a list of access groups. Being empty avoids the situation that the content "
"must be updated which, because metadata is immutable by design, would "
"required finding and updating all references to the access group node."
msgstr ""

#: ../../../LangRef.rst:5808
msgid ""
"The access group can be used to refer to a memory access instruction without "
"pointing to it directly (which is not possible in global metadata). "
"Currently, the only metadata making use of it is ``llvm.loop."
"parallel_accesses``."
msgstr ""

#: ../../../LangRef.rst:5814
msgid "'``llvm.loop.parallel_accesses``' Metadata"
msgstr ""

#: ../../../LangRef.rst:5816
msgid ""
"The ``llvm.loop.parallel_accesses`` metadata refers to one or more access "
"group metadata nodes (see ``llvm.access.group``). It denotes that no loop-"
"carried memory dependence exist between it and other instructions in the "
"loop with this metadata."
msgstr ""

#: ../../../LangRef.rst:5821
msgid ""
"Let ``m1`` and ``m2`` be two instructions that both have the ``llvm.access."
"group`` metadata to the access group ``g1``, respectively ``g2`` (which "
"might be identical). If a loop contains both access groups in its ``llvm."
"loop.parallel_accesses`` metadata, then the compiler can assume that there "
"is no dependency between ``m1`` and ``m2`` carried by this loop. "
"Instructions that belong to multiple access groups are considered having "
"this property if at least one of the access groups matches the ``llvm.loop."
"parallel_accesses`` list."
msgstr ""

#: ../../../LangRef.rst:5830
msgid ""
"If all memory-accessing instructions in a loop have ``llvm.loop."
"parallel_accesses`` metadata that refers to that loop, then the loop has no "
"loop carried memory dependences and is considered to be a parallel loop."
msgstr ""

#: ../../../LangRef.rst:5835
msgid ""
"Note that if not all memory access instructions belong to an access group "
"referred to by ``llvm.loop.parallel_accesses``, then the loop must not be "
"considered trivially parallel. Additional memory dependence analysis is "
"required to make that determination. As a fail safe mechanism, this causes "
"loops that were originally parallel to be considered sequential (if "
"optimization passes that are unaware of the parallel semantics insert new "
"memory instructions into the loop body)."
msgstr ""

#: ../../../LangRef.rst:5843
msgid ""
"Example of a loop that is considered parallel due to its correct use of both "
"``llvm.access.group`` and ``llvm.loop.parallel_accesses`` metadata types."
msgstr ""

#: ../../../LangRef.rst:5862
msgid "It is also possible to have nested parallel loops:"
msgstr ""

#: ../../../LangRef.rst:5894
msgid "'``irr_loop``' Metadata"
msgstr ""

#: ../../../LangRef.rst:5896
msgid ""
"``irr_loop`` metadata may be attached to the terminator instruction of a "
"basic block that's an irreducible loop header (note that an irreducible loop "
"has more than once header basic blocks.) If ``irr_loop`` metadata is "
"attached to the terminator instruction of a basic block that is not really "
"an irreducible loop header, the behavior is undefined. The intent of this "
"metadata is to improve the accuracy of the block frequency propagation. For "
"example, in the code below, the block ``header0`` may have a loop header "
"weight (relative to the other headers of the irreducible loop) of 100:"
msgstr ""

#: ../../../LangRef.rst:5914
msgid "Irreducible loop header weights are typically based on profile data."
msgstr ""

#: ../../../LangRef.rst:5919
msgid "'``invariant.group``' Metadata"
msgstr ""

#: ../../../LangRef.rst:5921
msgid ""
"The experimental ``invariant.group`` metadata may be attached to ``load``/"
"``store`` instructions referencing a single metadata with no entries. The "
"existence of the ``invariant.group`` metadata on the instruction tells the "
"optimizer that every ``load`` and ``store`` to the same pointer operand can "
"be assumed to load or store the same value (but see the ``llvm.launder."
"invariant.group`` intrinsic which affects when two pointers are considered "
"the same). Pointers returned by bitcast or getelementptr with only zero "
"indices are considered the same."
msgstr ""

#: ../../../LangRef.rst:5960
msgid ""
"The invariant.group metadata must be dropped when replacing one pointer by "
"another based on aliasing information. This is because invariant.group is "
"tied to the SSA value of the pointer operand."
msgstr ""

#: ../../../LangRef.rst:5970
msgid ""
"Note that this is an experimental feature, which means that its semantics "
"might change in the future."
msgstr ""

#: ../../../LangRef.rst:5974
msgid "'``type``' Metadata"
msgstr ""

#: ../../../LangRef.rst:5976
msgid "See :doc:`TypeMetadata`."
msgstr ""

#: ../../../LangRef.rst:5979
msgid "'``associated``' Metadata"
msgstr ""

#: ../../../LangRef.rst:5981
msgid ""
"The ``associated`` metadata may be attached to a global object declaration "
"with a single argument that references another global object."
msgstr ""

#: ../../../LangRef.rst:5984
msgid ""
"This metadata prevents discarding of the global object in linker GC unless "
"the referenced object is also discarded. The linker support for this feature "
"is spotty. For best compatibility, globals carrying this metadata may also:"
msgstr ""

#: ../../../LangRef.rst:5989
msgid "Be in a comdat with the referenced global."
msgstr ""

#: ../../../LangRef.rst:5990
msgid "Be in @llvm.compiler.used."
msgstr ""

#: ../../../LangRef.rst:5991
msgid "Have an explicit section with a name which is a valid C identifier."
msgstr ""

#: ../../../LangRef.rst:5993
msgid "It does not have any effect on non-ELF targets."
msgstr ""

#: ../../../LangRef.rst:5995 ../../../LangRef.rst:6378
#: ../../../LangRef.rst:6396 ../../../LangRef.rst:6598
#: ../../../LangRef.rst:6820 ../../../LangRef.rst:6866
#: ../../../LangRef.rst:6925 ../../../LangRef.rst:6987
#: ../../../LangRef.rst:7084 ../../../LangRef.rst:7166
#: ../../../LangRef.rst:7206 ../../../LangRef.rst:7259
#: ../../../LangRef.rst:7310 ../../../LangRef.rst:7360
#: ../../../LangRef.rst:7435 ../../../LangRef.rst:7499
#: ../../../LangRef.rst:7540 ../../../LangRef.rst:7592
#: ../../../LangRef.rst:7634 ../../../LangRef.rst:7688
#: ../../../LangRef.rst:7729 ../../../LangRef.rst:7775
#: ../../../LangRef.rst:7822 ../../../LangRef.rst:7863
#: ../../../LangRef.rst:7907 ../../../LangRef.rst:7964
#: ../../../LangRef.rst:8009 ../../../LangRef.rst:8068
#: ../../../LangRef.rst:8116 ../../../LangRef.rst:8166
#: ../../../LangRef.rst:8218 ../../../LangRef.rst:8267
#: ../../../LangRef.rst:8317 ../../../LangRef.rst:8374
#: ../../../LangRef.rst:8419 ../../../LangRef.rst:8476
#: ../../../LangRef.rst:8535 ../../../LangRef.rst:8578
#: ../../../LangRef.rst:8646 ../../../LangRef.rst:8860
#: ../../../LangRef.rst:8916 ../../../LangRef.rst:8989
#: ../../../LangRef.rst:9084 ../../../LangRef.rst:9237
#: ../../../LangRef.rst:9348 ../../../LangRef.rst:9391
#: ../../../LangRef.rst:9434 ../../../LangRef.rst:9475
#: ../../../LangRef.rst:9515 ../../../LangRef.rst:9556
#: ../../../LangRef.rst:9598 ../../../LangRef.rst:9641
#: ../../../LangRef.rst:9682 ../../../LangRef.rst:9727
#: ../../../LangRef.rst:9781 ../../../LangRef.rst:9833
#: ../../../LangRef.rst:9879 ../../../LangRef.rst:9972
#: ../../../LangRef.rst:10086 ../../../LangRef.rst:10147
#: ../../../LangRef.rst:10203 ../../../LangRef.rst:10249
#: ../../../LangRef.rst:10396 ../../../LangRef.rst:10462
#: ../../../LangRef.rst:10539 ../../../LangRef.rst:10612
#: ../../../LangRef.rst:10682 ../../../LangRef.rst:13091
#: ../../../LangRef.rst:13137
msgid "Example:"
msgstr ""

#: ../../../LangRef.rst:6006
msgid "'``prof``' Metadata"
msgstr ""

#: ../../../LangRef.rst:6008
msgid ""
"The ``prof`` metadata is used to record profile data in the IR. The first "
"operand of the metadata node indicates the profile metadata type. There are "
"currently 3 types: :ref:`branch_weights<prof_node_branch_weights>`, :ref:"
"`function_entry_count<prof_node_function_entry_count>`, and :ref:"
"`VP<prof_node_VP>`."
msgstr ""

#: ../../../LangRef.rst:6018
msgid "branch_weights"
msgstr ""

#: ../../../LangRef.rst:6020
msgid ""
"Branch weight metadata attached to a branch, select, switch or call "
"instruction represents the likeliness of the associated branch being taken. "
"For more information, see :doc:`BranchWeightMetadata`."
msgstr ""

#: ../../../LangRef.rst:6027
msgid "function_entry_count"
msgstr ""

#: ../../../LangRef.rst:6029
msgid ""
"Function entry count metadata can be attached to function definitions to "
"record the number of times the function is called. Used with BFI "
"information, it is also used to derive the basic block profile count. For "
"more information, see :doc:`BranchWeightMetadata`."
msgstr ""

#: ../../../LangRef.rst:6037
msgid "VP"
msgstr ""

#: ../../../LangRef.rst:6039
msgid ""
"VP (value profile) metadata can be attached to instructions that have value "
"profile information. Currently this is indirect calls (where it records the "
"hottest callees) and calls to memory intrinsics such as memcpy, memmove, and "
"memset (where it records the hottest byte lengths)."
msgstr ""

#: ../../../LangRef.rst:6044
msgid ""
"Each VP metadata node contains \"VP\" string, then a uint32_t value for the "
"value profiling kind, a uint64_t value for the total number of times the "
"instruction is executed, followed by uint64_t value and execution count "
"pairs. The value profiling kind is 0 for indirect call targets and 1 for "
"memory operations. For indirect call targets, each profile value is a hash "
"of the callee function name, and for memory operations each value is the "
"byte length."
msgstr ""

#: ../../../LangRef.rst:6052
msgid ""
"Note that the value counts do not need to add up to the total count listed "
"in the third operand (in practice only the top hottest values are tracked "
"and reported)."
msgstr ""

#: ../../../LangRef.rst:6056
msgid "Indirect call example:"
msgstr ""

#: ../../../LangRef.rst:6063
msgid ""
"Note that the VP type is 0 (the second operand), which indicates this is an "
"indirect call value profile data. The third operand indicates that the "
"indirect call executed 1600 times. The 4th and 6th operands give the hashes "
"of the 2 hottest target functions' names (this is the same hash used to "
"represent function names in the profile database), and the 5th and 7th "
"operands give the execution count that each of the respective prior target "
"functions was called."
msgstr ""

#: ../../../LangRef.rst:6072
msgid "Module Flags Metadata"
msgstr ""

#: ../../../LangRef.rst:6074
msgid ""
"Information about the module as a whole is difficult to convey to LLVM's "
"subsystems. The LLVM IR isn't sufficient to transmit this information. The "
"``llvm.module.flags`` named metadata exists in order to facilitate this. "
"These flags are in the form of key / value pairs --- much like a dictionary "
"--- making it easy for any subsystem who cares about a flag to look it up."
msgstr ""

#: ../../../LangRef.rst:6081
msgid ""
"The ``llvm.module.flags`` metadata contains a list of metadata triplets. "
"Each triplet has the following form:"
msgstr ""

#: ../../../LangRef.rst:6084
msgid ""
"The first element is a *behavior* flag, which specifies the behavior when "
"two (or more) modules are merged together, and it encounters two (or more) "
"metadata with the same ID. The supported behaviors are described below."
msgstr ""

#: ../../../LangRef.rst:6088
msgid ""
"The second element is a metadata string that is a unique ID for the "
"metadata. Each module may only have one flag entry for each unique ID (not "
"including entries with the **Require** behavior)."
msgstr ""

#: ../../../LangRef.rst:6091
msgid "The third element is the value of the flag."
msgstr ""

#: ../../../LangRef.rst:6093
msgid ""
"When two (or more) modules are merged together, the resulting ``llvm.module."
"flags`` metadata is the union of the modules' flags. That is, for each "
"unique metadata ID string, there will be exactly one entry in the merged "
"modules ``llvm.module.flags`` metadata table, and the value for that entry "
"will be determined by the merge behavior flag, as described below. The only "
"exception is that entries with the *Require* behavior are always preserved."
msgstr ""

#: ../../../LangRef.rst:6100
msgid "The following behaviors are supported:"
msgstr ""

#: ../../../LangRef.rst:6106 ../../../LangRef.rst:6209
#: ../../../LangRef.rst:6260
msgid "Value"
msgstr ""

#: ../../../LangRef.rst:6107
msgid "Behavior"
msgstr ""

#: ../../../LangRef.rst:6109 ../../../LangRef.rst:8210
#: ../../../LangRef.rst:8212 ../../../LangRef.rst:8214
#: ../../../LangRef.rst:8259 ../../../LangRef.rst:8261
#: ../../../LangRef.rst:8263 ../../../LangRef.rst:8309
#: ../../../LangRef.rst:8311 ../../../LangRef.rst:8313
msgid "1"
msgstr ""

#: ../../../LangRef.rst:6112
msgid "**Error**"
msgstr ""

#: ../../../LangRef.rst:6111
msgid ""
"Emits an error if two values disagree, otherwise the resulting value is that "
"of the operands."
msgstr ""

#: ../../../LangRef.rst:6114
msgid "2"
msgstr ""

#: ../../../LangRef.rst:6119
msgid "**Warning**"
msgstr ""

#: ../../../LangRef.rst:6116
msgid ""
"Emits a warning if two values disagree. The result value will be the operand "
"for the flag from the first module being linked, or the max if the other "
"module uses **Max** (in which case the resulting flag will be **Max**)."
msgstr ""

#: ../../../LangRef.rst:6121
msgid "3"
msgstr ""

#: ../../../LangRef.rst:6129
msgid "**Require**"
msgstr ""

#: ../../../LangRef.rst:6123
msgid ""
"Adds a requirement that another module flag be present and have a specified "
"value after linking is performed. The value must be a metadata pair, where "
"the first element of the pair is the ID of the module flag to be restricted, "
"and the second element of the pair is the value the module flag should be "
"restricted to. This behavior can be used to restrict the allowable results "
"(via triggering of an error) of linking IDs with the **Override** behavior."
msgstr ""

#: ../../../LangRef.rst:6131
msgid "4"
msgstr ""

#: ../../../LangRef.rst:6135
msgid "**Override**"
msgstr ""

#: ../../../LangRef.rst:6133
msgid ""
"Uses the specified value, regardless of the behavior or value of the other "
"module. If both modules specify **Override**, but the values differ, an "
"error will be emitted."
msgstr ""

#: ../../../LangRef.rst:6137
msgid "5"
msgstr ""

#: ../../../LangRef.rst:6139
msgid "**Append**"
msgstr ""

#: ../../../LangRef.rst:6139
msgid "Appends the two values, which are required to be metadata nodes."
msgstr ""

#: ../../../LangRef.rst:6141
msgid "6"
msgstr ""

#: ../../../LangRef.rst:6145
msgid "**AppendUnique**"
msgstr ""

#: ../../../LangRef.rst:6143
msgid ""
"Appends the two values, which are required to be metadata nodes. However, "
"duplicate entries in the second list are dropped during the append operation."
msgstr ""

#: ../../../LangRef.rst:6147
msgid "7"
msgstr ""

#: ../../../LangRef.rst:6148
msgid "**Max**"
msgstr ""

#: ../../../LangRef.rst:6149
msgid "Takes the max of the two values, which are required to be integers."
msgstr ""

#: ../../../LangRef.rst:6151
msgid ""
"It is an error for a particular unique flag ID to have multiple behaviors, "
"except in the case of **Require** (which adds restrictions on another "
"metadata value) or **Override**."
msgstr ""

#: ../../../LangRef.rst:6155
msgid "An example of module flags:"
msgstr ""

#: ../../../LangRef.rst:6169
msgid ""
"Metadata ``!0`` has the ID ``!\"foo\"`` and the value '1'. The behavior if "
"two or more ``!\"foo\"`` flags are seen is to emit an error if their values "
"are not equal."
msgstr ""

#: ../../../LangRef.rst:6173
msgid ""
"Metadata ``!1`` has the ID ``!\"bar\"`` and the value '37'. The behavior if "
"two or more ``!\"bar\"`` flags are seen is to use the value '37'."
msgstr ""

#: ../../../LangRef.rst:6177
msgid ""
"Metadata ``!2`` has the ID ``!\"qux\"`` and the value '42'. The behavior if "
"two or more ``!\"qux\"`` flags are seen is to emit a warning if their values "
"are not equal."
msgstr ""

#: ../../../LangRef.rst:6181
msgid "Metadata ``!3`` has the ID ``!\"qux\"`` and the value:"
msgstr ""

#: ../../../LangRef.rst:6187
msgid ""
"The behavior is to emit an error if the ``llvm.module.flags`` does not "
"contain a flag with the ID ``!\"foo\"`` that has the value '1' after linking "
"is performed."
msgstr ""

#: ../../../LangRef.rst:6192
msgid "Objective-C Garbage Collection Module Flags Metadata"
msgstr ""

#: ../../../LangRef.rst:6194
msgid ""
"On the Mach-O platform, Objective-C stores metadata about garbage collection "
"in a special section called \"image info\". The metadata consists of a "
"version number and a bitmask specifying what types of garbage collection are "
"supported (if any) by the file. If two or more modules are linked together "
"their garbage collection metadata needs to be merged rather than appended "
"together."
msgstr ""

#: ../../../LangRef.rst:6201
msgid ""
"The Objective-C garbage collection module flags metadata consists of the "
"following key-value pairs:"
msgstr ""

#: ../../../LangRef.rst:6208 ../../../LangRef.rst:6259
msgid "Key"
msgstr ""

#: ../../../LangRef.rst:6211
msgid "``Objective-C Version``"
msgstr ""

#: ../../../LangRef.rst:6212
msgid ""
"**[Required]** --- The Objective-C ABI version. Valid values are 1 and 2."
msgstr ""

#: ../../../LangRef.rst:6214
msgid "``Objective-C Image Info Version``"
msgstr ""

#: ../../../LangRef.rst:6215
msgid ""
"**[Required]** --- The version of the image info section. Currently always 0."
msgstr ""

#: ../../../LangRef.rst:6218
msgid "``Objective-C Image Info Section``"
msgstr ""

#: ../../../LangRef.rst:6219
msgid ""
"**[Required]** --- The section to place the metadata. Valid values are "
"``\"__OBJC, __image_info, regular\"`` for Objective-C ABI version 1, and "
"``\"__DATA,__objc_imageinfo, regular, no_dead_strip\"`` for Objective-C ABI "
"version 2."
msgstr ""

#: ../../../LangRef.rst:6224
msgid "``Objective-C Garbage Collection``"
msgstr ""

#: ../../../LangRef.rst:6225
msgid ""
"**[Required]** --- Specifies whether garbage collection is supported or not. "
"Valid values are 0, for no garbage collection, and 2, for garbage collection "
"supported."
msgstr ""

#: ../../../LangRef.rst:6229
msgid "``Objective-C GC Only``"
msgstr ""

#: ../../../LangRef.rst:6230
msgid ""
"**[Optional]** --- Specifies that only garbage collection is supported. If "
"present, its value must be 6. This flag requires that the ``Objective-C "
"Garbage Collection`` flag have the value 2."
msgstr ""

#: ../../../LangRef.rst:6234
msgid "Some important flag interactions:"
msgstr ""

#: ../../../LangRef.rst:6236
msgid ""
"If a module with ``Objective-C Garbage Collection`` set to 0 is merged with "
"a module with ``Objective-C Garbage Collection`` set to 2, then the "
"resulting module has the ``Objective-C Garbage Collection`` flag set to 0."
msgstr ""

#: ../../../LangRef.rst:6240
msgid ""
"A module with ``Objective-C Garbage Collection`` set to 0 cannot be merged "
"with a module with ``Objective-C GC Only`` set to 6."
msgstr ""

#: ../../../LangRef.rst:6244
msgid "C type width Module Flags Metadata"
msgstr ""

#: ../../../LangRef.rst:6246
msgid ""
"The ARM backend emits a section into each generated object file describing "
"the options that it was compiled with (in a compiler-independent way) to "
"prevent linking incompatible objects, and to allow automatic library "
"selection. Some of these options are not visible at the IR level, namely "
"wchar_t width and enum width."
msgstr ""

#: ../../../LangRef.rst:6252
msgid ""
"To pass this information to the backend, these options are encoded in module "
"flags metadata, using the following key-value pairs:"
msgstr ""

#: ../../../LangRef.rst:6262
msgid "short_wchar"
msgstr ""

#: ../../../LangRef.rst:6263
msgid "0 --- sizeof(wchar_t) == 4"
msgstr ""

#: ../../../LangRef.rst:6264
msgid "1 --- sizeof(wchar_t) == 2"
msgstr ""

#: ../../../LangRef.rst:6266
msgid "short_enum"
msgstr ""

#: ../../../LangRef.rst:6267
msgid "0 --- Enums are at least as large as an ``int``."
msgstr ""

#: ../../../LangRef.rst:6268
msgid ""
"1 --- Enums are stored in the smallest integer type which can represent all "
"of its values."
msgstr ""

#: ../../../LangRef.rst:6271
msgid ""
"For example, the following metadata section specifies that the module was "
"compiled with a ``wchar_t`` width of 4 bytes, and the underlying type of an "
"enum is the smallest type which can represent all of its values::"
msgstr ""

#: ../../../LangRef.rst:6280
msgid "LTO Post-Link Module Flags Metadata"
msgstr ""

#: ../../../LangRef.rst:6282
msgid ""
"Some optimisations are only when the entire LTO unit is present in the "
"current module. This is represented by the ``LTOPostLink`` module flags "
"metadata, which will be created with a value of ``1`` when LTO linking "
"occurs."
msgstr ""

#: ../../../LangRef.rst:6287
msgid "Automatic Linker Flags Named Metadata"
msgstr ""

#: ../../../LangRef.rst:6289
msgid ""
"Some targets support embedding of flags to the linker inside individual "
"object files. Typically this is used in conjunction with language extensions "
"which allow source files to contain linker command line options, and have "
"these automatically be transmitted to the linker via object files."
msgstr ""

#: ../../../LangRef.rst:6294
msgid ""
"These flags are encoded in the IR using named metadata with the name ``!llvm."
"linker.options``. Each operand is expected to be a metadata node which "
"should be a list of other metadata nodes, each of which should be a list of "
"metadata strings defining linker options."
msgstr ""

#: ../../../LangRef.rst:6299
msgid ""
"For example, the following metadata section specifies two separate sets of "
"linker options, presumably to link against ``libz`` and the ``Cocoa`` "
"framework::"
msgstr ""

#: ../../../LangRef.rst:6307
msgid ""
"The metadata encoding as lists of lists of options, as opposed to a "
"collapsed list of options, is chosen so that the IR encoding can use "
"multiple option strings to specify e.g., a single library, while still "
"having that specifier be preserved as an atomic element that can be "
"recognized by a target specific assembly writer or object file emitter."
msgstr ""

#: ../../../LangRef.rst:6313
msgid ""
"Each individual option is required to be either a valid option for the "
"target's linker, or an option that is reserved by the target specific "
"assembly writer or object file emitter. No other aspect of these options is "
"defined by the IR."
msgstr ""

#: ../../../LangRef.rst:6318
msgid "Dependent Libs Named Metadata"
msgstr ""

#: ../../../LangRef.rst:6320
msgid ""
"Some targets support embedding of strings into object files to indicate a "
"set of libraries to add to the link. Typically this is used in conjunction "
"with language extensions which allow source files to explicitly declare the "
"libraries they depend on, and have these automatically be transmitted to the "
"linker via object files."
msgstr ""

#: ../../../LangRef.rst:6326
msgid ""
"The list is encoded in the IR using named metadata with the name ``!llvm."
"dependent-libraries``. Each operand is expected to be a metadata node which "
"should contain a single string operand."
msgstr ""

#: ../../../LangRef.rst:6330
msgid ""
"For example, the following metadata section contains two library specfiers::"
msgstr ""

#: ../../../LangRef.rst:6336
msgid ""
"Each library specifier will be handled independently by the consuming "
"linker. The effect of the library specifiers are defined by the consuming "
"linker."
msgstr ""

#: ../../../LangRef.rst:6342
msgid "ThinLTO Summary"
msgstr ""

#: ../../../LangRef.rst:6344
msgid ""
"Compiling with `ThinLTO <https://clang.llvm.org/docs/ThinLTO.html>`_ causes "
"the building of a compact summary of the module that is emitted into the "
"bitcode. The summary is emitted into the LLVM assembly and identified in "
"syntax by a caret ('``^``')."
msgstr ""

#: ../../../LangRef.rst:6349
msgid ""
"The summary is parsed into a bitcode output, along with the Module IR, via "
"the \"``llvm-as``\" tool. Tools that parse the Module IR for the purposes of "
"optimization (e.g. \"``clang -x ir``\" and \"``opt``\"), will ignore the "
"summary entries (just as they currently ignore summary entries in a bitcode "
"input file)."
msgstr ""

#: ../../../LangRef.rst:6355
msgid ""
"Eventually, the summary will be parsed into a ModuleSummaryIndex object "
"under the same conditions where summary index is currently built from "
"bitcode. Specifically, tools that test the Thin Link portion of a ThinLTO "
"compile (i.e. llvm-lto and llvm-lto2), or when parsing a combined index for "
"a distributed ThinLTO backend via clang's \"``-fthinlto-index=<>``\" flag "
"(this part is not yet implemented, use llvm-as to create a bitcode object "
"before feeding into thin link tools for now)."
msgstr ""

#: ../../../LangRef.rst:6363
msgid ""
"There are currently 3 types of summary entries in the LLVM assembly: :ref:"
"`module paths<module_path_summary>`, :ref:`global values<gv_summary>`, and :"
"ref:`type identifiers<typeid_summary>`."
msgstr ""

#: ../../../LangRef.rst:6371
msgid "Module Path Summary Entry"
msgstr ""

#: ../../../LangRef.rst:6373
msgid ""
"Each module path summary entry lists a module containing global values "
"included in the summary. For a single IR module there will be one such "
"entry, but in a combined summary index produced during the thin link, there "
"will be one module path entry per linked module with summary."
msgstr ""

#: ../../../LangRef.rst:6384
msgid ""
"The ``path`` field is a string path to the bitcode file, and the ``hash`` "
"field is the 160-bit SHA-1 hash of the IR bitcode contents, used for "
"incremental builds and caching."
msgstr ""

#: ../../../LangRef.rst:6391
msgid "Global Value Summary Entry"
msgstr ""

#: ../../../LangRef.rst:6393
msgid ""
"Each global value summary entry corresponds to a global value defined or "
"referenced by a summarized module."
msgstr ""

#: ../../../LangRef.rst:6402
msgid ""
"For declarations, there will not be a summary list. For definitions, a "
"global value will contain a list of summaries, one per module containing a "
"definition. There can be multiple entries in a combined summary index for "
"symbols with weak linkage."
msgstr ""

#: ../../../LangRef.rst:6407
msgid ""
"Each ``Summary`` format will depend on whether the global value is a :ref:"
"`function<function_summary>`, :ref:`variable<variable_summary>`, or :ref:"
"`alias<alias_summary>`."
msgstr ""

#: ../../../LangRef.rst:6414
msgid "Function Summary"
msgstr ""

#: ../../../LangRef.rst:6416
msgid ""
"If the global value is a function, the ``Summary`` entry will look like:"
msgstr ""

#: ../../../LangRef.rst:6422
msgid ""
"The ``module`` field includes the summary entry id for the module containing "
"this definition, and the ``flags`` field contains information such as the "
"linkage type, a flag indicating whether it is legal to import the "
"definition, whether it is globally live and whether the linker resolved it "
"to a local definition (the latter two are populated during the thin link). "
"The ``insts`` field contains the number of IR instructions in the function. "
"Finally, there are several optional fields: :ref:"
"`FuncFlags<funcflags_summary>`, :ref:`Calls<calls_summary>`, :ref:"
"`TypeIdInfo<typeidinfo_summary>`, :ref:`Refs<refs_summary>`."
msgstr ""

#: ../../../LangRef.rst:6435
msgid "Global Variable Summary"
msgstr ""

#: ../../../LangRef.rst:6437
msgid ""
"If the global value is a variable, the ``Summary`` entry will look like:"
msgstr ""

#: ../../../LangRef.rst:6443
msgid ""
"The variable entry contains a subset of the fields in a :ref:`function "
"summary <function_summary>`, see the descriptions there."
msgstr ""

#: ../../../LangRef.rst:6449
msgid "Alias Summary"
msgstr ""

#: ../../../LangRef.rst:6451
msgid "If the global value is an alias, the ``Summary`` entry will look like:"
msgstr ""

#: ../../../LangRef.rst:6457
msgid ""
"The ``module`` and ``flags`` fields are as described for a :ref:`function "
"summary <function_summary>`. The ``aliasee`` field contains a reference to "
"the global value summary entry of the aliasee."
msgstr ""

#: ../../../LangRef.rst:6464
msgid "Function Flags"
msgstr ""

#: ../../../LangRef.rst:6466
msgid "The optional ``FuncFlags`` field looks like:"
msgstr ""

#: ../../../LangRef.rst:6472
msgid ""
"If unspecified, flags are assumed to hold the conservative ``false`` value "
"of ``0``."
msgstr ""

#: ../../../LangRef.rst:6478
msgid "Calls"
msgstr ""

#: ../../../LangRef.rst:6480
msgid "The optional ``Calls`` field looks like:"
msgstr ""

#: ../../../LangRef.rst:6486
msgid "where each ``Callee`` looks like:"
msgstr ""

#: ../../../LangRef.rst:6492
msgid ""
"The ``callee`` refers to the summary entry id of the callee. At most one of "
"``hotness`` (which can take the values ``Unknown``, ``Cold``, ``None``, "
"``Hot``, and ``Critical``), and ``relbf`` (which holds the integer branch "
"frequency relative to the entry frequency, scaled down by 2^8) may be "
"specified. The defaults are ``Unknown`` and ``0``, respectively."
msgstr ""

#: ../../../LangRef.rst:6501
msgid "Refs"
msgstr ""

#: ../../../LangRef.rst:6503
msgid "The optional ``Refs`` field looks like:"
msgstr ""

#: ../../../LangRef.rst:6509
msgid ""
"where each ``Ref`` contains a reference to the summary id of the referenced "
"value (e.g. ``^1``)."
msgstr ""

#: ../../../LangRef.rst:6515
msgid "TypeIdInfo"
msgstr ""

#: ../../../LangRef.rst:6517
msgid ""
"The optional ``TypeIdInfo`` field, used for `Control Flow Integrity <http://"
"clang.llvm.org/docs/ControlFlowIntegrity.html>`_, looks like:"
msgstr ""

#: ../../../LangRef.rst:6525
msgid "These optional fields have the following forms:"
msgstr ""

#: ../../../LangRef.rst:6528
msgid "TypeTests"
msgstr ""

#: ../../../LangRef.rst:6534
msgid ""
"Where each ``TypeIdRef`` refers to a :ref:`type id<typeid_summary>` by "
"summary id or ``GUID``."
msgstr ""

#: ../../../LangRef.rst:6538
msgid "TypeTestAssumeVCalls"
msgstr ""

#: ../../../LangRef.rst:6544
msgid "Where each VFuncId has the format:"
msgstr ""

#: ../../../LangRef.rst:6550
msgid ""
"Where each ``TypeIdRef`` refers to a :ref:`type id<typeid_summary>` by "
"summary id or ``GUID`` preceded by a ``guid:`` tag."
msgstr ""

#: ../../../LangRef.rst:6554
msgid "TypeCheckedLoadVCalls"
msgstr ""

#: ../../../LangRef.rst:6560
msgid ""
"Where each VFuncId has the format described for ``TypeTestAssumeVCalls``."
msgstr ""

#: ../../../LangRef.rst:6563
msgid "TypeTestAssumeConstVCalls"
msgstr ""

#: ../../../LangRef.rst:6569
msgid "Where each ConstVCall has the format:"
msgstr ""

#: ../../../LangRef.rst:6575
msgid ""
"and where each VFuncId has the format described for "
"``TypeTestAssumeVCalls``, and each Arg is an integer argument number."
msgstr ""

#: ../../../LangRef.rst:6579
msgid "TypeCheckedLoadConstVCalls"
msgstr ""

#: ../../../LangRef.rst:6585
msgid ""
"Where each ConstVCall has the format described for "
"``TypeTestAssumeConstVCalls``."
msgstr ""

#: ../../../LangRef.rst:6591
msgid "Type ID Summary Entry"
msgstr ""

#: ../../../LangRef.rst:6593
msgid ""
"Each type id summary entry corresponds to a type identifier resolution which "
"is generated during the LTO link portion of the compile when building with "
"`Control Flow Integrity <http://clang.llvm.org/docs/ControlFlowIntegrity."
"html>`_, so these are only present in a combined summary index."
msgstr ""

#: ../../../LangRef.rst:6604
msgid ""
"The ``typeTestRes`` gives the type test resolution ``kind`` (which may be "
"``unsat``, ``byteArray``, ``inline``, ``single``, or ``allOnes``), and the "
"``size-1`` bit width. It is followed by optional flags, which default to 0, "
"and an optional WpdResolutions (whole program devirtualization resolution) "
"field that looks like:"
msgstr ""

#: ../../../LangRef.rst:6614
msgid ""
"where each entry is a mapping from the given byte offset to the whole-"
"program devirtualization resolution WpdRes, that has one of the following "
"formats:"
msgstr ""

#: ../../../LangRef.rst:6623
msgid ""
"Additionally, each wpdRes has an optional ``resByArg`` field, which "
"describes the resolutions for calls with all constant integer arguments:"
msgstr ""

#: ../../../LangRef.rst:6630
msgid "where ResByArg is:"
msgstr ""

#: ../../../LangRef.rst:6636
msgid ""
"Where the ``kind`` can be ``Indir``, ``UniformRetVal``, ``UniqueRetVal`` or "
"``VirtualConstProp``. The ``info`` field is only used if the kind is "
"``UniformRetVal`` (indicates the uniform return value), or ``UniqueRetVal`` "
"(holds the return value associated with the unique vtable (0 or 1)). The "
"``byte`` and ``bit`` fields are only used if the target does not support the "
"use of absolute symbols to store constants."
msgstr ""

#: ../../../LangRef.rst:6646
msgid "Intrinsic Global Variables"
msgstr ""

#: ../../../LangRef.rst:6648
msgid ""
"LLVM has a number of \"magic\" global variables that contain data that "
"affect code generation or other IR semantics. These are documented here. All "
"globals of this sort should have a section specified as \"``llvm."
"metadata``\". This section and all globals that start with \"``llvm.``\" are "
"reserved for use by LLVM."
msgstr ""

#: ../../../LangRef.rst:6657
msgid "The '``llvm.used``' Global Variable"
msgstr ""

#: ../../../LangRef.rst:6659
msgid ""
"The ``@llvm.used`` global is an array which has :ref:`appending linkage "
"<linkage_appending>`. This array contains a list of pointers to named global "
"variables, functions and aliases which may optionally have a pointer cast "
"formed of bitcast or getelementptr. For example, a legal use of it is:"
msgstr ""

#: ../../../LangRef.rst:6675
msgid ""
"If a symbol appears in the ``@llvm.used`` list, then the compiler, "
"assembler, and linker are required to treat the symbol as if there is a "
"reference to the symbol that it cannot see (which is why they have to be "
"named). For example, if a variable has internal linkage and no references "
"other than that from the ``@llvm.used`` list, it cannot be deleted. This is "
"commonly used to represent references from inline asms and other things the "
"compiler cannot \"see\", and corresponds to \"``attribute((used))``\" in GNU "
"C."
msgstr ""

#: ../../../LangRef.rst:6683
msgid ""
"On some targets, the code generator must emit a directive to the assembler "
"or object file to prevent the assembler and linker from molesting the symbol."
msgstr ""

#: ../../../LangRef.rst:6690
msgid "The '``llvm.compiler.used``' Global Variable"
msgstr ""

#: ../../../LangRef.rst:6692
msgid ""
"The ``@llvm.compiler.used`` directive is the same as the ``@llvm.used`` "
"directive, except that it only prevents the compiler from touching the "
"symbol. On targets that support it, this allows an intelligent linker to "
"optimize references to the symbol without being impeded as it would be by "
"``@llvm.used``."
msgstr ""

#: ../../../LangRef.rst:6698
msgid ""
"This is a rare construct that should only be used in rare circumstances, and "
"should not be exposed to source languages."
msgstr ""

#: ../../../LangRef.rst:6704
msgid "The '``llvm.global_ctors``' Global Variable"
msgstr ""

#: ../../../LangRef.rst:6711
msgid ""
"The ``@llvm.global_ctors`` array contains a list of constructor functions, "
"priorities, and an associated global or function. The functions referenced "
"by this array will be called in ascending order of priority (i.e. lowest "
"first) when the module is loaded. The order of functions with the same "
"priority is not defined."
msgstr ""

#: ../../../LangRef.rst:6717
msgid ""
"If the third field is non-null, and points to a global variable or function, "
"the initializer function will only run if the associated data from the "
"current module is not discarded."
msgstr ""

#: ../../../LangRef.rst:6724
msgid "The '``llvm.global_dtors``' Global Variable"
msgstr ""

#: ../../../LangRef.rst:6731
msgid ""
"The ``@llvm.global_dtors`` array contains a list of destructor functions, "
"priorities, and an associated global or function. The functions referenced "
"by this array will be called in descending order of priority (i.e. highest "
"first) when the module is unloaded. The order of functions with the same "
"priority is not defined."
msgstr ""

#: ../../../LangRef.rst:6737
msgid ""
"If the third field is non-null, and points to a global variable or function, "
"the destructor function will only run if the associated data from the "
"current module is not discarded."
msgstr ""

#: ../../../LangRef.rst:6742
msgid "Instruction Reference"
msgstr ""

#: ../../../LangRef.rst:6744
msgid ""
"The LLVM instruction set consists of several different classifications of "
"instructions: :ref:`terminator instructions <terminators>`, :ref:`binary "
"instructions <binaryops>`, :ref:`bitwise binary instructions <bitwiseops>`, :"
"ref:`memory instructions <memoryops>`, and :ref:`other instructions "
"<otherops>`."
msgstr ""

#: ../../../LangRef.rst:6753
msgid "Terminator Instructions"
msgstr ""

#: ../../../LangRef.rst:6755
msgid ""
"As mentioned :ref:`previously <functionstructure>`, every basic block in a "
"program ends with a \"Terminator\" instruction, which indicates which block "
"should be executed after the current block is finished. These terminator "
"instructions typically yield a '``void``' value: they produce control flow, "
"not values (the one exception being the ':ref:`invoke <i_invoke>`' "
"instruction)."
msgstr ""

#: ../../../LangRef.rst:6762
msgid ""
"The terminator instructions are: ':ref:`ret <i_ret>`', ':ref:`br <i_br>`', ':"
"ref:`switch <i_switch>`', ':ref:`indirectbr <i_indirectbr>`', ':ref:`invoke "
"<i_invoke>`', ':ref:`callbr <i_callbr>`' ':ref:`resume <i_resume>`', ':ref:"
"`catchswitch <i_catchswitch>`', ':ref:`catchret <i_catchret>`', ':ref:"
"`cleanupret <i_cleanupret>`', and ':ref:`unreachable <i_unreachable>`'."
msgstr ""

#: ../../../LangRef.rst:6774
msgid "'``ret``' Instruction"
msgstr ""

#: ../../../LangRef.rst:6777 ../../../LangRef.rst:6834
#: ../../../LangRef.rst:6884 ../../../LangRef.rst:6947
#: ../../../LangRef.rst:6999 ../../../LangRef.rst:7099
#: ../../../LangRef.rst:7179 ../../../LangRef.rst:7218
#: ../../../LangRef.rst:7274 ../../../LangRef.rst:7322
#: ../../../LangRef.rst:7373 ../../../LangRef.rst:7408
#: ../../../LangRef.rst:7460 ../../../LangRef.rst:7511
#: ../../../LangRef.rst:7550 ../../../LangRef.rst:7605
#: ../../../LangRef.rst:7645 ../../../LangRef.rst:7700
#: ../../../LangRef.rst:7739 ../../../LangRef.rst:7785
#: ../../../LangRef.rst:7834 ../../../LangRef.rst:7873
#: ../../../LangRef.rst:7917 ../../../LangRef.rst:7976
#: ../../../LangRef.rst:8030 ../../../LangRef.rst:8082
#: ../../../LangRef.rst:8131 ../../../LangRef.rst:8181
#: ../../../LangRef.rst:8230 ../../../LangRef.rst:8279
#: ../../../LangRef.rst:8342 ../../../LangRef.rst:8386
#: ../../../LangRef.rst:8431 ../../../LangRef.rst:8501
#: ../../../LangRef.rst:8547 ../../../LangRef.rst:8602
#: ../../../LangRef.rst:8661 ../../../LangRef.rst:8785
#: ../../../LangRef.rst:8874 ../../../LangRef.rst:8930
#: ../../../LangRef.rst:9014 ../../../LangRef.rst:9096
#: ../../../LangRef.rst:9319 ../../../LangRef.rst:9363
#: ../../../LangRef.rst:9405 ../../../LangRef.rst:9446
#: ../../../LangRef.rst:9486 ../../../LangRef.rst:9526
#: ../../../LangRef.rst:9568 ../../../LangRef.rst:9610
#: ../../../LangRef.rst:9652 ../../../LangRef.rst:9695
#: ../../../LangRef.rst:9741 ../../../LangRef.rst:9796
#: ../../../LangRef.rst:9848 ../../../LangRef.rst:9901
#: ../../../LangRef.rst:9989 ../../../LangRef.rst:10101
#: ../../../LangRef.rst:10162 ../../../LangRef.rst:10216
#: ../../../LangRef.rst:10283 ../../../LangRef.rst:10425
#: ../../../LangRef.rst:10476 ../../../LangRef.rst:10560
#: ../../../LangRef.rst:10628 ../../../LangRef.rst:10803
#: ../../../LangRef.rst:10835 ../../../LangRef.rst:10868
#: ../../../LangRef.rst:10927 ../../../LangRef.rst:10962
#: ../../../LangRef.rst:10998 ../../../LangRef.rst:11038
#: ../../../LangRef.rst:11076 ../../../LangRef.rst:11102
#: ../../../LangRef.rst:11123 ../../../LangRef.rst:11160
#: ../../../LangRef.rst:11213 ../../../LangRef.rst:11257
#: ../../../LangRef.rst:11289 ../../../LangRef.rst:11315
#: ../../../LangRef.rst:11355 ../../../LangRef.rst:11392
#: ../../../LangRef.rst:11425 ../../../LangRef.rst:11456
#: ../../../LangRef.rst:11489 ../../../LangRef.rst:11533
#: ../../../LangRef.rst:11564 ../../../LangRef.rst:11613
#: ../../../LangRef.rst:11650 ../../../LangRef.rst:11706
#: ../../../LangRef.rst:11764 ../../../LangRef.rst:11817
#: ../../../LangRef.rst:11855 ../../../LangRef.rst:11893
#: ../../../LangRef.rst:11930 ../../../LangRef.rst:11967
#: ../../../LangRef.rst:12005 ../../../LangRef.rst:12043
#: ../../../LangRef.rst:12081 ../../../LangRef.rst:12119
#: ../../../LangRef.rst:12157 ../../../LangRef.rst:12197
#: ../../../LangRef.rst:12234 ../../../LangRef.rst:12270
#: ../../../LangRef.rst:12321 ../../../LangRef.rst:12370
#: ../../../LangRef.rst:12408 ../../../LangRef.rst:12446
#: ../../../LangRef.rst:12482 ../../../LangRef.rst:12517
#: ../../../LangRef.rst:12552 ../../../LangRef.rst:12588
#: ../../../LangRef.rst:12625 ../../../LangRef.rst:12661
#: ../../../LangRef.rst:12697 ../../../LangRef.rst:12739
#: ../../../LangRef.rst:12774 ../../../LangRef.rst:12816
#: ../../../LangRef.rst:12857 ../../../LangRef.rst:12888
#: ../../../LangRef.rst:12924 ../../../LangRef.rst:12962
#: ../../../LangRef.rst:13009 ../../../LangRef.rst:13058
#: ../../../LangRef.rst:13104 ../../../LangRef.rst:13174
#: ../../../LangRef.rst:13225 ../../../LangRef.rst:13275
#: ../../../LangRef.rst:13326 ../../../LangRef.rst:13377
#: ../../../LangRef.rst:13428 ../../../LangRef.rst:14114
#: ../../../LangRef.rst:14183 ../../../LangRef.rst:14242
#: ../../../LangRef.rst:14264 ../../../LangRef.rst:14303
#: ../../../LangRef.rst:14325 ../../../LangRef.rst:14363
#: ../../../LangRef.rst:14384 ../../../LangRef.rst:14405
#: ../../../LangRef.rst:14426 ../../../LangRef.rst:14447
#: ../../../LangRef.rst:14468 ../../../LangRef.rst:14489
#: ../../../LangRef.rst:14510 ../../../LangRef.rst:14535
#: ../../../LangRef.rst:14573 ../../../LangRef.rst:14596
#: ../../../LangRef.rst:14621 ../../../LangRef.rst:14647
#: ../../../LangRef.rst:14690 ../../../LangRef.rst:14730
#: ../../../LangRef.rst:14818 ../../../LangRef.rst:14864
#: ../../../LangRef.rst:14905 ../../../LangRef.rst:14950
#: ../../../LangRef.rst:15000 ../../../LangRef.rst:15054
#: ../../../LangRef.rst:15111 ../../../LangRef.rst:15169
#: ../../../LangRef.rst:15232 ../../../LangRef.rst:15265
#: ../../../LangRef.rst:15296 ../../../LangRef.rst:15327
#: ../../../LangRef.rst:15357 ../../../LangRef.rst:15393
#: ../../../LangRef.rst:15534 ../../../LangRef.rst:15571
#: ../../../LangRef.rst:15608 ../../../LangRef.rst:15645
#: ../../../LangRef.rst:15682 ../../../LangRef.rst:15721
#: ../../../LangRef.rst:15757 ../../../LangRef.rst:15790
#: ../../../LangRef.rst:15823 ../../../LangRef.rst:15859
#: ../../../LangRef.rst:15895 ../../../LangRef.rst:15931
#: ../../../LangRef.rst:15966 ../../../LangRef.rst:16087
#: ../../../LangRef.rst:16124 ../../../LangRef.rst:16161
#: ../../../LangRef.rst:16200 ../../../LangRef.rst:16236
#: ../../../LangRef.rst:16272 ../../../LangRef.rst:16307
#: ../../../LangRef.rst:16343 ../../../LangRef.rst:16379
#: ../../../LangRef.rst:16414 ../../../LangRef.rst:16449
#: ../../../LangRef.rst:16488 ../../../LangRef.rst:16536
#: ../../../LangRef.rst:16584 ../../../LangRef.rst:16624
#: ../../../LangRef.rst:16656 ../../../LangRef.rst:16688
#: ../../../LangRef.rst:16720 ../../../LangRef.rst:16752
#: ../../../LangRef.rst:16785 ../../../LangRef.rst:16818
#: ../../../LangRef.rst:16851 ../../../LangRef.rst:16889
#: ../../../LangRef.rst:16927 ../../../LangRef.rst:16967
#: ../../../LangRef.rst:16997 ../../../LangRef.rst:17037
#: ../../../LangRef.rst:17075 ../../../LangRef.rst:17096
#: ../../../LangRef.rst:17123 ../../../LangRef.rst:17150
#: ../../../LangRef.rst:17186 ../../../LangRef.rst:17221
#: ../../../LangRef.rst:17264 ../../../LangRef.rst:17298
#: ../../../LangRef.rst:17340 ../../../LangRef.rst:17367
#: ../../../LangRef.rst:17392 ../../../LangRef.rst:17446
#: ../../../LangRef.rst:17475 ../../../LangRef.rst:17550
#: ../../../LangRef.rst:17603 ../../../LangRef.rst:17742
#: ../../../LangRef.rst:17767 ../../../LangRef.rst:17797
#: ../../../LangRef.rst:17844 ../../../LangRef.rst:17893
#: ../../../LangRef.rst:17965 ../../../LangRef.rst:18044
#: ../../../LangRef.rst:18122 ../../../LangRef.rst:18136
#: ../../../LangRef.rst:18150 ../../../LangRef.rst:18164
#: ../../../LangRef.rst:18178 ../../../LangRef.rst:18192
#: ../../../LangRef.rst:18206 ../../../LangRef.rst:18220
#: ../../../LangRef.rst:18234 ../../../LangRef.rst:18248
#: ../../../LangRef.rst:18262 ../../../LangRef.rst:18276
#: ../../../LangRef.rst:18290 ../../../LangRef.rst:18304
#: ../../../LangRef.rst:18318 ../../../LangRef.rst:18332
#: ../../../LangRef.rst:18346 ../../../LangRef.rst:18360
#: ../../../LangRef.rst:18384 ../../../LangRef.rst:18422
#: ../../../LangRef.rst:18453
msgid "Syntax:"
msgstr ""

#: ../../../LangRef.rst:6785 ../../../LangRef.rst:6842
#: ../../../LangRef.rst:6891 ../../../LangRef.rst:6954
#: ../../../LangRef.rst:7007 ../../../LangRef.rst:7107
#: ../../../LangRef.rst:7186 ../../../LangRef.rst:7226
#: ../../../LangRef.rst:7281 ../../../LangRef.rst:7330
#: ../../../LangRef.rst:7380 ../../../LangRef.rst:7415
#: ../../../LangRef.rst:7470 ../../../LangRef.rst:7518
#: ../../../LangRef.rst:7560 ../../../LangRef.rst:7612
#: ../../../LangRef.rst:7655 ../../../LangRef.rst:7707
#: ../../../LangRef.rst:7747 ../../../LangRef.rst:7793
#: ../../../LangRef.rst:7841 ../../../LangRef.rst:7880
#: ../../../LangRef.rst:7924 ../../../LangRef.rst:7983
#: ../../../LangRef.rst:8040 ../../../LangRef.rst:8090
#: ../../../LangRef.rst:8139 ../../../LangRef.rst:8188
#: ../../../LangRef.rst:8237 ../../../LangRef.rst:8286
#: ../../../LangRef.rst:8350 ../../../LangRef.rst:8394
#: ../../../LangRef.rst:8439 ../../../LangRef.rst:8508
#: ../../../LangRef.rst:8554 ../../../LangRef.rst:8609
#: ../../../LangRef.rst:8672 ../../../LangRef.rst:8793
#: ../../../LangRef.rst:8881 ../../../LangRef.rst:8937
#: ../../../LangRef.rst:9021 ../../../LangRef.rst:9105
#: ../../../LangRef.rst:9326 ../../../LangRef.rst:9370
#: ../../../LangRef.rst:9412 ../../../LangRef.rst:9453
#: ../../../LangRef.rst:9493 ../../../LangRef.rst:9533
#: ../../../LangRef.rst:9575 ../../../LangRef.rst:9617
#: ../../../LangRef.rst:9659 ../../../LangRef.rst:9702
#: ../../../LangRef.rst:9748 ../../../LangRef.rst:9803
#: ../../../LangRef.rst:9855 ../../../LangRef.rst:9908
#: ../../../LangRef.rst:9996 ../../../LangRef.rst:10108
#: ../../../LangRef.rst:10171 ../../../LangRef.rst:10223
#: ../../../LangRef.rst:10291 ../../../LangRef.rst:10432
#: ../../../LangRef.rst:10487 ../../../LangRef.rst:10567
#: ../../../LangRef.rst:10635 ../../../LangRef.rst:10810
#: ../../../LangRef.rst:10842 ../../../LangRef.rst:10875
#: ../../../LangRef.rst:10934 ../../../LangRef.rst:10969
#: ../../../LangRef.rst:11005 ../../../LangRef.rst:11045
#: ../../../LangRef.rst:11083 ../../../LangRef.rst:11109
#: ../../../LangRef.rst:11130 ../../../LangRef.rst:11168
#: ../../../LangRef.rst:11224 ../../../LangRef.rst:11264
#: ../../../LangRef.rst:11296 ../../../LangRef.rst:11323
#: ../../../LangRef.rst:11362 ../../../LangRef.rst:11399
#: ../../../LangRef.rst:11432 ../../../LangRef.rst:11463
#: ../../../LangRef.rst:11497 ../../../LangRef.rst:11542
#: ../../../LangRef.rst:11573 ../../../LangRef.rst:11620
#: ../../../LangRef.rst:11664 ../../../LangRef.rst:11720
#: ../../../LangRef.rst:11778 ../../../LangRef.rst:11832
#: ../../../LangRef.rst:11870 ../../../LangRef.rst:11908
#: ../../../LangRef.rst:11945 ../../../LangRef.rst:11982
#: ../../../LangRef.rst:12020 ../../../LangRef.rst:12058
#: ../../../LangRef.rst:12096 ../../../LangRef.rst:12134
#: ../../../LangRef.rst:12172 ../../../LangRef.rst:12212
#: ../../../LangRef.rst:12249 ../../../LangRef.rst:12285
#: ../../../LangRef.rst:12336 ../../../LangRef.rst:12385
#: ../../../LangRef.rst:12423 ../../../LangRef.rst:12461
#: ../../../LangRef.rst:12497 ../../../LangRef.rst:12532
#: ../../../LangRef.rst:12567 ../../../LangRef.rst:12603
#: ../../../LangRef.rst:12640 ../../../LangRef.rst:12676
#: ../../../LangRef.rst:12717 ../../../LangRef.rst:12753
#: ../../../LangRef.rst:12794 ../../../LangRef.rst:12830
#: ../../../LangRef.rst:12870 ../../../LangRef.rst:12901
#: ../../../LangRef.rst:12940 ../../../LangRef.rst:12978
#: ../../../LangRef.rst:13025 ../../../LangRef.rst:13071
#: ../../../LangRef.rst:13117 ../../../LangRef.rst:13187
#: ../../../LangRef.rst:13238 ../../../LangRef.rst:13288
#: ../../../LangRef.rst:13339 ../../../LangRef.rst:13390
#: ../../../LangRef.rst:13441 ../../../LangRef.rst:14122
#: ../../../LangRef.rst:14191 ../../../LangRef.rst:14250
#: ../../../LangRef.rst:14272 ../../../LangRef.rst:14311
#: ../../../LangRef.rst:14333 ../../../LangRef.rst:14370
#: ../../../LangRef.rst:14391 ../../../LangRef.rst:14412
#: ../../../LangRef.rst:14433 ../../../LangRef.rst:14454
#: ../../../LangRef.rst:14475 ../../../LangRef.rst:14496
#: ../../../LangRef.rst:14518 ../../../LangRef.rst:14543
#: ../../../LangRef.rst:14580 ../../../LangRef.rst:14603
#: ../../../LangRef.rst:14628 ../../../LangRef.rst:14654
#: ../../../LangRef.rst:14698 ../../../LangRef.rst:14738
#: ../../../LangRef.rst:14825 ../../../LangRef.rst:14871
#: ../../../LangRef.rst:14918 ../../../LangRef.rst:14963
#: ../../../LangRef.rst:15010 ../../../LangRef.rst:15064
#: ../../../LangRef.rst:15120 ../../../LangRef.rst:15178
#: ../../../LangRef.rst:15239 ../../../LangRef.rst:15272
#: ../../../LangRef.rst:15304 ../../../LangRef.rst:15335
#: ../../../LangRef.rst:15367 ../../../LangRef.rst:15403
#: ../../../LangRef.rst:15544 ../../../LangRef.rst:15581
#: ../../../LangRef.rst:15618 ../../../LangRef.rst:15655
#: ../../../LangRef.rst:15692 ../../../LangRef.rst:15731
#: ../../../LangRef.rst:15766 ../../../LangRef.rst:15799
#: ../../../LangRef.rst:15833 ../../../LangRef.rst:15869
#: ../../../LangRef.rst:15905 ../../../LangRef.rst:15940
#: ../../../LangRef.rst:15980 ../../../LangRef.rst:16097
#: ../../../LangRef.rst:16134 ../../../LangRef.rst:16171
#: ../../../LangRef.rst:16210 ../../../LangRef.rst:16246
#: ../../../LangRef.rst:16282 ../../../LangRef.rst:16317
#: ../../../LangRef.rst:16353 ../../../LangRef.rst:16389
#: ../../../LangRef.rst:16424 ../../../LangRef.rst:16459
#: ../../../LangRef.rst:16498 ../../../LangRef.rst:16546
#: ../../../LangRef.rst:16594 ../../../LangRef.rst:16633
#: ../../../LangRef.rst:16665 ../../../LangRef.rst:16697
#: ../../../LangRef.rst:16729 ../../../LangRef.rst:16761
#: ../../../LangRef.rst:16794 ../../../LangRef.rst:16827
#: ../../../LangRef.rst:16860 ../../../LangRef.rst:16898
#: ../../../LangRef.rst:16936 ../../../LangRef.rst:16974
#: ../../../LangRef.rst:17013 ../../../LangRef.rst:17051
#: ../../../LangRef.rst:17103 ../../../LangRef.rst:17130
#: ../../../LangRef.rst:17157 ../../../LangRef.rst:17193
#: ../../../LangRef.rst:17229 ../../../LangRef.rst:17276
#: ../../../LangRef.rst:17305 ../../../LangRef.rst:17352
#: ../../../LangRef.rst:17381 ../../../LangRef.rst:17408
#: ../../../LangRef.rst:17453 ../../../LangRef.rst:17482
#: ../../../LangRef.rst:17557 ../../../LangRef.rst:17610
#: ../../../LangRef.rst:17749 ../../../LangRef.rst:17774
#: ../../../LangRef.rst:17808 ../../../LangRef.rst:17856
#: ../../../LangRef.rst:17911 ../../../LangRef.rst:17983
#: ../../../LangRef.rst:18062 ../../../LangRef.rst:18393
#: ../../../LangRef.rst:18430 ../../../LangRef.rst:18462
msgid "Overview:"
msgstr ""

#: ../../../LangRef.rst:6787
msgid ""
"The '``ret``' instruction is used to return control flow (and optionally a "
"value) from a function back to the caller."
msgstr ""

#: ../../../LangRef.rst:6790
msgid ""
"There are two forms of the '``ret``' instruction: one that returns a value "
"and then causes control flow, and one that just causes control flow to occur."
msgstr ""

#: ../../../LangRef.rst:6795 ../../../LangRef.rst:6850
#: ../../../LangRef.rst:6899 ../../../LangRef.rst:6962
#: ../../../LangRef.rst:7029 ../../../LangRef.rst:7117
#: ../../../LangRef.rst:7192 ../../../LangRef.rst:7233
#: ../../../LangRef.rst:7288 ../../../LangRef.rst:7337
#: ../../../LangRef.rst:7420 ../../../LangRef.rst:7475
#: ../../../LangRef.rst:7523 ../../../LangRef.rst:7568
#: ../../../LangRef.rst:7617 ../../../LangRef.rst:7660
#: ../../../LangRef.rst:7712 ../../../LangRef.rst:7752
#: ../../../LangRef.rst:7798 ../../../LangRef.rst:7846
#: ../../../LangRef.rst:7886 ../../../LangRef.rst:7932
#: ../../../LangRef.rst:7989 ../../../LangRef.rst:8046
#: ../../../LangRef.rst:8096 ../../../LangRef.rst:8146
#: ../../../LangRef.rst:8194 ../../../LangRef.rst:8243
#: ../../../LangRef.rst:8293 ../../../LangRef.rst:8356
#: ../../../LangRef.rst:8400 ../../../LangRef.rst:8446
#: ../../../LangRef.rst:8514 ../../../LangRef.rst:8560
#: ../../../LangRef.rst:8617 ../../../LangRef.rst:8677
#: ../../../LangRef.rst:8798 ../../../LangRef.rst:8887
#: ../../../LangRef.rst:8944 ../../../LangRef.rst:9026
#: ../../../LangRef.rst:9113 ../../../LangRef.rst:9331
#: ../../../LangRef.rst:9375 ../../../LangRef.rst:9417
#: ../../../LangRef.rst:9458 ../../../LangRef.rst:9499
#: ../../../LangRef.rst:9539 ../../../LangRef.rst:9581
#: ../../../LangRef.rst:9623 ../../../LangRef.rst:9665
#: ../../../LangRef.rst:9708 ../../../LangRef.rst:9754
#: ../../../LangRef.rst:9809 ../../../LangRef.rst:9861
#: ../../../LangRef.rst:9915 ../../../LangRef.rst:10009
#: ../../../LangRef.rst:10114 ../../../LangRef.rst:10177
#: ../../../LangRef.rst:10229 ../../../LangRef.rst:10296
#: ../../../LangRef.rst:10439 ../../../LangRef.rst:10497
#: ../../../LangRef.rst:10575 ../../../LangRef.rst:10651
#: ../../../LangRef.rst:10816 ../../../LangRef.rst:10848
#: ../../../LangRef.rst:10881 ../../../LangRef.rst:10940
#: ../../../LangRef.rst:10976 ../../../LangRef.rst:11012
#: ../../../LangRef.rst:11052 ../../../LangRef.rst:11136
#: ../../../LangRef.rst:11176 ../../../LangRef.rst:11370
#: ../../../LangRef.rst:11411 ../../../LangRef.rst:11505
#: ../../../LangRef.rst:11549 ../../../LangRef.rst:11581
#: ../../../LangRef.rst:11674 ../../../LangRef.rst:11732
#: ../../../LangRef.rst:11788 ../../../LangRef.rst:11837
#: ../../../LangRef.rst:11878 ../../../LangRef.rst:11913
#: ../../../LangRef.rst:11950 ../../../LangRef.rst:11988
#: ../../../LangRef.rst:12026 ../../../LangRef.rst:12064
#: ../../../LangRef.rst:12102 ../../../LangRef.rst:12140
#: ../../../LangRef.rst:12178 ../../../LangRef.rst:12217
#: ../../../LangRef.rst:12255 ../../../LangRef.rst:12292
#: ../../../LangRef.rst:12343 ../../../LangRef.rst:12392
#: ../../../LangRef.rst:12430 ../../../LangRef.rst:12467
#: ../../../LangRef.rst:12502 ../../../LangRef.rst:12537
#: ../../../LangRef.rst:12573 ../../../LangRef.rst:12610
#: ../../../LangRef.rst:12646 ../../../LangRef.rst:12682
#: ../../../LangRef.rst:12724 ../../../LangRef.rst:12759
#: ../../../LangRef.rst:12801 ../../../LangRef.rst:12836
#: ../../../LangRef.rst:12946 ../../../LangRef.rst:12984
#: ../../../LangRef.rst:13031 ../../../LangRef.rst:13083
#: ../../../LangRef.rst:13129 ../../../LangRef.rst:13194
#: ../../../LangRef.rst:13245 ../../../LangRef.rst:13295
#: ../../../LangRef.rst:13346 ../../../LangRef.rst:13397
#: ../../../LangRef.rst:13448 ../../../LangRef.rst:14200
#: ../../../LangRef.rst:14257 ../../../LangRef.rst:14285
#: ../../../LangRef.rst:14318 ../../../LangRef.rst:14346
#: ../../../LangRef.rst:14377 ../../../LangRef.rst:14398
#: ../../../LangRef.rst:14419 ../../../LangRef.rst:14440
#: ../../../LangRef.rst:14461 ../../../LangRef.rst:14482
#: ../../../LangRef.rst:14503 ../../../LangRef.rst:14528
#: ../../../LangRef.rst:14553 ../../../LangRef.rst:14587
#: ../../../LangRef.rst:14610 ../../../LangRef.rst:14638
#: ../../../LangRef.rst:14663 ../../../LangRef.rst:14704
#: ../../../LangRef.rst:14745 ../../../LangRef.rst:14831
#: ../../../LangRef.rst:14877 ../../../LangRef.rst:14924
#: ../../../LangRef.rst:14968 ../../../LangRef.rst:15016
#: ../../../LangRef.rst:15069 ../../../LangRef.rst:15126
#: ../../../LangRef.rst:15183 ../../../LangRef.rst:15245
#: ../../../LangRef.rst:15278 ../../../LangRef.rst:15310
#: ../../../LangRef.rst:15341 ../../../LangRef.rst:15377
#: ../../../LangRef.rst:15412 ../../../LangRef.rst:15551
#: ../../../LangRef.rst:15588 ../../../LangRef.rst:15625
#: ../../../LangRef.rst:15662 ../../../LangRef.rst:15699
#: ../../../LangRef.rst:15737 ../../../LangRef.rst:15772
#: ../../../LangRef.rst:15805 ../../../LangRef.rst:15839
#: ../../../LangRef.rst:15875 ../../../LangRef.rst:15911
#: ../../../LangRef.rst:15946 ../../../LangRef.rst:15998
#: ../../../LangRef.rst:16104 ../../../LangRef.rst:16140
#: ../../../LangRef.rst:16180 ../../../LangRef.rst:16216
#: ../../../LangRef.rst:16252 ../../../LangRef.rst:16288
#: ../../../LangRef.rst:16324 ../../../LangRef.rst:16359
#: ../../../LangRef.rst:16395 ../../../LangRef.rst:16430
#: ../../../LangRef.rst:16466 ../../../LangRef.rst:16507
#: ../../../LangRef.rst:16555 ../../../LangRef.rst:16602
#: ../../../LangRef.rst:16639 ../../../LangRef.rst:16671
#: ../../../LangRef.rst:16703 ../../../LangRef.rst:16735
#: ../../../LangRef.rst:16767 ../../../LangRef.rst:16800
#: ../../../LangRef.rst:16833 ../../../LangRef.rst:16869
#: ../../../LangRef.rst:16907 ../../../LangRef.rst:16943
#: ../../../LangRef.rst:16979 ../../../LangRef.rst:17018
#: ../../../LangRef.rst:17056 ../../../LangRef.rst:17088
#: ../../../LangRef.rst:17108 ../../../LangRef.rst:17135
#: ../../../LangRef.rst:17164 ../../../LangRef.rst:17202
#: ../../../LangRef.rst:17238 ../../../LangRef.rst:17282
#: ../../../LangRef.rst:17312 ../../../LangRef.rst:17347
#: ../../../LangRef.rst:17375 ../../../LangRef.rst:17400
#: ../../../LangRef.rst:17461 ../../../LangRef.rst:17497
#: ../../../LangRef.rst:17630 ../../../LangRef.rst:17783
#: ../../../LangRef.rst:17851 ../../../LangRef.rst:17920
#: ../../../LangRef.rst:17993 ../../../LangRef.rst:18071
#: ../../../LangRef.rst:18406 ../../../LangRef.rst:18440
#: ../../../LangRef.rst:18472
msgid "Arguments:"
msgstr ""

#: ../../../LangRef.rst:6797
msgid ""
"The '``ret``' instruction optionally accepts a single argument, the return "
"value. The type of the return value must be a ':ref:`first class "
"<t_firstclass>`' type."
msgstr ""

#: ../../../LangRef.rst:6801
msgid ""
"A function is not :ref:`well formed <wellformed>` if it has a non-void "
"return type and contains a '``ret``' instruction with no return value or a "
"return value with a type that does not match its type, or if it has a void "
"return type and contains a '``ret``' instruction with a return value."
msgstr ""

#: ../../../LangRef.rst:6808 ../../../LangRef.rst:6857
#: ../../../LangRef.rst:6907 ../../../LangRef.rst:6973
#: ../../../LangRef.rst:7066 ../../../LangRef.rst:7154
#: ../../../LangRef.rst:7199 ../../../LangRef.rst:7248
#: ../../../LangRef.rst:7296 ../../../LangRef.rst:7352
#: ../../../LangRef.rst:7388 ../../../LangRef.rst:7427
#: ../../../LangRef.rst:7482 ../../../LangRef.rst:7530
#: ../../../LangRef.rst:7575 ../../../LangRef.rst:7624
#: ../../../LangRef.rst:7667 ../../../LangRef.rst:7719
#: ../../../LangRef.rst:7759 ../../../LangRef.rst:7805
#: ../../../LangRef.rst:7853 ../../../LangRef.rst:7893
#: ../../../LangRef.rst:7939 ../../../LangRef.rst:7996
#: ../../../LangRef.rst:8053 ../../../LangRef.rst:8103
#: ../../../LangRef.rst:8153 ../../../LangRef.rst:8201
#: ../../../LangRef.rst:8250 ../../../LangRef.rst:8300
#: ../../../LangRef.rst:8364 ../../../LangRef.rst:8409
#: ../../../LangRef.rst:8458 ../../../LangRef.rst:8529
#: ../../../LangRef.rst:8571 ../../../LangRef.rst:8632
#: ../../../LangRef.rst:8760 ../../../LangRef.rst:8848
#: ../../../LangRef.rst:8894 ../../../LangRef.rst:8970
#: ../../../LangRef.rst:9060 ../../../LangRef.rst:9170
#: ../../../LangRef.rst:9340 ../../../LangRef.rst:9383
#: ../../../LangRef.rst:9425 ../../../LangRef.rst:9466
#: ../../../LangRef.rst:9506 ../../../LangRef.rst:9548
#: ../../../LangRef.rst:9590 ../../../LangRef.rst:9632
#: ../../../LangRef.rst:9674 ../../../LangRef.rst:9716
#: ../../../LangRef.rst:9771 ../../../LangRef.rst:9821
#: ../../../LangRef.rst:9868 ../../../LangRef.rst:9937
#: ../../../LangRef.rst:10040 ../../../LangRef.rst:10140
#: ../../../LangRef.rst:10190 ../../../LangRef.rst:10234
#: ../../../LangRef.rst:10387 ../../../LangRef.rst:10447
#: ../../../LangRef.rst:10511 ../../../LangRef.rst:10592
#: ../../../LangRef.rst:10657 ../../../LangRef.rst:10821
#: ../../../LangRef.rst:10853 ../../../LangRef.rst:10887
#: ../../../LangRef.rst:10948 ../../../LangRef.rst:10984
#: ../../../LangRef.rst:11020 ../../../LangRef.rst:11060
#: ../../../LangRef.rst:11090 ../../../LangRef.rst:11115
#: ../../../LangRef.rst:11144 ../../../LangRef.rst:11196
#: ../../../LangRef.rst:11232 ../../../LangRef.rst:11273
#: ../../../LangRef.rst:11305 ../../../LangRef.rst:11334
#: ../../../LangRef.rst:11381 ../../../LangRef.rst:11416
#: ../../../LangRef.rst:11442 ../../../LangRef.rst:11471
#: ../../../LangRef.rst:11521 ../../../LangRef.rst:11556
#: ../../../LangRef.rst:11601 ../../../LangRef.rst:11626
#: ../../../LangRef.rst:11689 ../../../LangRef.rst:11747
#: ../../../LangRef.rst:11803 ../../../LangRef.rst:11842
#: ../../../LangRef.rst:11884 ../../../LangRef.rst:11918
#: ../../../LangRef.rst:11955 ../../../LangRef.rst:11993
#: ../../../LangRef.rst:12031 ../../../LangRef.rst:12069
#: ../../../LangRef.rst:12107 ../../../LangRef.rst:12145
#: ../../../LangRef.rst:12183 ../../../LangRef.rst:12222
#: ../../../LangRef.rst:12261 ../../../LangRef.rst:12298
#: ../../../LangRef.rst:12349 ../../../LangRef.rst:12398
#: ../../../LangRef.rst:12436 ../../../LangRef.rst:12473
#: ../../../LangRef.rst:12508 ../../../LangRef.rst:12543
#: ../../../LangRef.rst:12579 ../../../LangRef.rst:12616
#: ../../../LangRef.rst:12652 ../../../LangRef.rst:12688
#: ../../../LangRef.rst:12730 ../../../LangRef.rst:12765
#: ../../../LangRef.rst:12807 ../../../LangRef.rst:12842
#: ../../../LangRef.rst:12877 ../../../LangRef.rst:12908
#: ../../../LangRef.rst:12953 ../../../LangRef.rst:12997
#: ../../../LangRef.rst:13044 ../../../LangRef.rst:13203
#: ../../../LangRef.rst:13254 ../../../LangRef.rst:13304
#: ../../../LangRef.rst:13355 ../../../LangRef.rst:13406
#: ../../../LangRef.rst:13457 ../../../LangRef.rst:13515
#: ../../../LangRef.rst:13563 ../../../LangRef.rst:13610
#: ../../../LangRef.rst:13658 ../../../LangRef.rst:13762
#: ../../../LangRef.rst:13822 ../../../LangRef.rst:13880
#: ../../../LangRef.rst:13950 ../../../LangRef.rst:14018
#: ../../../LangRef.rst:14078 ../../../LangRef.rst:14206
#: ../../../LangRef.rst:14710 ../../../LangRef.rst:14751
#: ../../../LangRef.rst:14843 ../../../LangRef.rst:14884
#: ../../../LangRef.rst:14930 ../../../LangRef.rst:14974
#: ../../../LangRef.rst:15022 ../../../LangRef.rst:15075
#: ../../../LangRef.rst:15131 ../../../LangRef.rst:15189
#: ../../../LangRef.rst:15252 ../../../LangRef.rst:15285
#: ../../../LangRef.rst:15317 ../../../LangRef.rst:15349
#: ../../../LangRef.rst:15383 ../../../LangRef.rst:15418
#: ../../../LangRef.rst:15561 ../../../LangRef.rst:15598
#: ../../../LangRef.rst:15635 ../../../LangRef.rst:15672
#: ../../../LangRef.rst:15711 ../../../LangRef.rst:15747
#: ../../../LangRef.rst:15781 ../../../LangRef.rst:15814
#: ../../../LangRef.rst:15849 ../../../LangRef.rst:15885
#: ../../../LangRef.rst:15922 ../../../LangRef.rst:15956
#: ../../../LangRef.rst:16029 ../../../LangRef.rst:16113
#: ../../../LangRef.rst:16150 ../../../LangRef.rst:16190
#: ../../../LangRef.rst:16225 ../../../LangRef.rst:16261
#: ../../../LangRef.rst:16297 ../../../LangRef.rst:16333
#: ../../../LangRef.rst:16369 ../../../LangRef.rst:16404
#: ../../../LangRef.rst:16439 ../../../LangRef.rst:16475
#: ../../../LangRef.rst:16518 ../../../LangRef.rst:16566
#: ../../../LangRef.rst:16611 ../../../LangRef.rst:16647
#: ../../../LangRef.rst:16679 ../../../LangRef.rst:16711
#: ../../../LangRef.rst:16743 ../../../LangRef.rst:16775
#: ../../../LangRef.rst:16808 ../../../LangRef.rst:16841
#: ../../../LangRef.rst:16879 ../../../LangRef.rst:16917
#: ../../../LangRef.rst:16951 ../../../LangRef.rst:16986
#: ../../../LangRef.rst:17026 ../../../LangRef.rst:17064
#: ../../../LangRef.rst:17113 ../../../LangRef.rst:17140
#: ../../../LangRef.rst:17172 ../../../LangRef.rst:17207
#: ../../../LangRef.rst:17254 ../../../LangRef.rst:17288
#: ../../../LangRef.rst:17317 ../../../LangRef.rst:17466
#: ../../../LangRef.rst:17503 ../../../LangRef.rst:17635
#: ../../../LangRef.rst:17788 ../../../LangRef.rst:17815
#: ../../../LangRef.rst:17864 ../../../LangRef.rst:17935
#: ../../../LangRef.rst:18010 ../../../LangRef.rst:18086
#: ../../../LangRef.rst:18413 ../../../LangRef.rst:18445
#: ../../../LangRef.rst:18478
msgid "Semantics:"
msgstr ""

#: ../../../LangRef.rst:6810
msgid ""
"When the '``ret``' instruction is executed, control flow returns back to the "
"calling function's context. If the caller is a \":ref:`call <i_call>`\" "
"instruction, execution continues at the instruction after the call. If the "
"caller was an \":ref:`invoke <i_invoke>`\" instruction, execution continues "
"at the beginning of the \"normal\" destination block. If the instruction "
"returns a value, that value shall set the call or invoke instruction's "
"return value."
msgstr ""

#: ../../../LangRef.rst:6831
msgid "'``br``' Instruction"
msgstr ""

#: ../../../LangRef.rst:6844
msgid ""
"The '``br``' instruction is used to cause control flow to transfer to a "
"different basic block in the current function. There are two forms of this "
"instruction, corresponding to a conditional branch and an unconditional "
"branch."
msgstr ""

#: ../../../LangRef.rst:6852
msgid ""
"The conditional branch form of the '``br``' instruction takes a single "
"'``i1``' value and two '``label``' values. The unconditional form of the "
"'``br``' instruction takes a single '``label``' value as a target."
msgstr ""

#: ../../../LangRef.rst:6859
msgid ""
"Upon execution of a conditional '``br``' instruction, the '``i1``' argument "
"is evaluated. If the value is ``true``, control flows to the '``iftrue``' "
"``label`` argument. If \"cond\" is ``false``, control flows to the "
"'``iffalse``' ``label`` argument. If '``cond``' is ``poison``, this "
"instruction has undefined behavior."
msgstr ""

#: ../../../LangRef.rst:6881
msgid "'``switch``' Instruction"
msgstr ""

#: ../../../LangRef.rst:6893
msgid ""
"The '``switch``' instruction is used to transfer control flow to one of "
"several different places. It is a generalization of the '``br``' "
"instruction, allowing a branch to occur to one of many possible destinations."
msgstr ""

#: ../../../LangRef.rst:6901
msgid ""
"The '``switch``' instruction uses three parameters: an integer comparison "
"value '``value``', a default '``label``' destination, and an array of pairs "
"of comparison value constants and '``label``'s. The table is not allowed to "
"contain duplicate constant entries."
msgstr ""

#: ../../../LangRef.rst:6909
msgid ""
"The ``switch`` instruction specifies a table of values and destinations. "
"When the '``switch``' instruction is executed, this table is searched for "
"the given value. If the value is found, control flow is transferred to the "
"corresponding destination; otherwise, control flow is transferred to the "
"default destination. If '``value``' is ``poison``, this instruction has "
"undefined behavior."
msgstr ""

#: ../../../LangRef.rst:6917 ../../../LangRef.rst:6982
msgid "Implementation:"
msgstr ""

#: ../../../LangRef.rst:6919
msgid ""
"Depending on properties of the target machine and the particular ``switch`` "
"instruction, this instruction may be code generated in different ways. For "
"example, it could be generated as a series of chained conditional branches "
"or with a lookup table."
msgstr ""

#: ../../../LangRef.rst:6944
msgid "'``indirectbr``' Instruction"
msgstr ""

#: ../../../LangRef.rst:6956
msgid ""
"The '``indirectbr``' instruction implements an indirect branch to a label "
"within the current function, whose address is specified by \"``address``\". "
"Address must be derived from a :ref:`blockaddress <blockaddress>` constant."
msgstr ""

#: ../../../LangRef.rst:6964
msgid ""
"The '``address``' argument is the address of the label to jump to. The rest "
"of the arguments indicate the full set of possible destinations that the "
"address may point to. Blocks are allowed to occur multiple times in the "
"destination list, though this isn't particularly useful."
msgstr ""

#: ../../../LangRef.rst:6969
msgid ""
"This destination list is required so that dataflow analysis has an accurate "
"understanding of the CFG."
msgstr ""

#: ../../../LangRef.rst:6975
msgid ""
"Control transfers to the block specified in the address argument. All "
"possible destination blocks must be listed in the label list, otherwise this "
"instruction has undefined behavior. This implies that jumps to labels "
"defined in other functions have undefined behavior as well. If '``address``' "
"is ``poison``, this instruction has undefined behavior."
msgstr ""

#: ../../../LangRef.rst:6984
msgid "This is typically implemented with a jump through a register."
msgstr ""

#: ../../../LangRef.rst:6996
msgid "'``invoke``' Instruction"
msgstr ""

#: ../../../LangRef.rst:7009
msgid ""
"The '``invoke``' instruction causes control to transfer to a specified "
"function, with the possibility of control flow transfer to either the "
"'``normal``' label or the '``exception``' label. If the callee function "
"returns with the \"``ret``\" instruction, control flow will return to the "
"\"normal\" label. If the callee (or any indirect callees) returns via the \":"
"ref:`resume <i_resume>`\" instruction or other exception handling mechanism, "
"control is interrupted and continued at the dynamically nearest "
"\"exception\" label."
msgstr ""

#: ../../../LangRef.rst:7018
msgid ""
"The '``exception``' label is a `landing pad <ExceptionHandling."
"html#overview>`_ for the exception. As such, '``exception``' label is "
"required to have the \":ref:`landingpad <i_landingpad>`\" instruction, which "
"contains the information about the behavior of the program after unwinding "
"happens, as its first non-PHI instruction. The restrictions on the "
"\"``landingpad``\" instruction's tightly couples it to the \"``invoke``\" "
"instruction, so that the important information contained within the "
"\"``landingpad``\" instruction can't be lost through normal code motion."
msgstr ""

#: ../../../LangRef.rst:7031 ../../../LangRef.rst:7119
#: ../../../LangRef.rst:10298
msgid "This instruction requires several arguments:"
msgstr ""

#: ../../../LangRef.rst:7033 ../../../LangRef.rst:7121
msgid ""
"The optional \"cconv\" marker indicates which :ref:`calling convention "
"<callingconv>` the call should use. If none is specified, the call defaults "
"to using C calling conventions."
msgstr ""

#: ../../../LangRef.rst:7036 ../../../LangRef.rst:7124
#: ../../../LangRef.rst:10362
msgid ""
"The optional :ref:`Parameter Attributes <paramattrs>` list for return "
"values. Only '``zeroext``', '``signext``', and '``inreg``' attributes are "
"valid here."
msgstr ""

#: ../../../LangRef.rst:7039 ../../../LangRef.rst:7127
#: ../../../LangRef.rst:10365
msgid ""
"The optional addrspace attribute can be used to indicate the address space "
"of the called function. If it is not specified, the program address space "
"from the :ref:`datalayout string<langref_datalayout>` will be used."
msgstr ""

#: ../../../LangRef.rst:7042 ../../../LangRef.rst:7130
#: ../../../LangRef.rst:10368
msgid ""
"'``ty``': the type of the call instruction itself which is also the type of "
"the return value. Functions that return no value are marked ``void``."
msgstr ""

#: ../../../LangRef.rst:7045
msgid ""
"'``fnty``': shall be the signature of the function being invoked. The "
"argument types must match the types implied by this signature. This type can "
"be omitted if the function is not varargs."
msgstr ""

#: ../../../LangRef.rst:7048
msgid ""
"'``fnptrval``': An LLVM value containing a pointer to a function to be "
"invoked. In most cases, this is a direct function invocation, but indirect "
"``invoke``'s are just as possible, calling an arbitrary pointer to function "
"value."
msgstr ""

#: ../../../LangRef.rst:7052 ../../../LangRef.rst:7140
#: ../../../LangRef.rst:10378
msgid ""
"'``function args``': argument list whose types match the function signature "
"argument types and parameter attributes. All arguments must be of :ref:"
"`first class <t_firstclass>` type. If the function signature indicates the "
"function accepts a variable number of arguments, the extra arguments can be "
"specified."
msgstr ""

#: ../../../LangRef.rst:7057 ../../../LangRef.rst:7145
msgid ""
"'``normal label``': the label reached when the called function executes a "
"'``ret``' instruction."
msgstr ""

#: ../../../LangRef.rst:7059
msgid ""
"'``exception label``': the label reached when a callee returns via the :ref:"
"`resume <i_resume>` instruction or other exception handling mechanism."
msgstr ""

#: ../../../LangRef.rst:7062 ../../../LangRef.rst:7150
#: ../../../LangRef.rst:10383
msgid "The optional :ref:`function attributes <fnattrs>` list."
msgstr ""

#: ../../../LangRef.rst:7063 ../../../LangRef.rst:7151
#: ../../../LangRef.rst:10384
msgid "The optional :ref:`operand bundles <opbundles>` list."
msgstr ""

#: ../../../LangRef.rst:7068
msgid ""
"This instruction is designed to operate as a standard '``call``' instruction "
"in most regards. The primary difference is that it establishes an "
"association with a label, which is used by the runtime library to unwind the "
"stack."
msgstr ""

#: ../../../LangRef.rst:7073
msgid ""
"This instruction is used in languages with destructors to ensure that proper "
"cleanup is performed in the case of either a ``longjmp`` or a thrown "
"exception. Additionally, this is important for implementation of '``catch``' "
"clauses in high-level languages that support them."
msgstr ""

#: ../../../LangRef.rst:7078
msgid ""
"For the purposes of the SSA form, the definition of the value returned by "
"the '``invoke``' instruction is deemed to occur on the edge from the current "
"block to the \"normal\" label. If the callee unwinds then no return value is "
"available."
msgstr ""

#: ../../../LangRef.rst:7096
msgid "'``callbr``' Instruction"
msgstr ""

#: ../../../LangRef.rst:7109
msgid ""
"The '``callbr``' instruction causes control to transfer to a specified "
"function, with the possibility of control flow transfer to either the "
"'``normal``' label or one of the '``other``' labels."
msgstr ""

#: ../../../LangRef.rst:7113
msgid ""
"This instruction should only be used to implement the \"goto\" feature of "
"gcc style inline assembly. Any other usage is an error in the IR verifier."
msgstr ""

#: ../../../LangRef.rst:7133 ../../../LangRef.rst:10371
msgid ""
"'``fnty``': shall be the signature of the function being called. The "
"argument types must match the types implied by this signature. This type can "
"be omitted if the function is not varargs."
msgstr ""

#: ../../../LangRef.rst:7136
msgid ""
"'``fnptrval``': An LLVM value containing a pointer to a function to be "
"called. In most cases, this is a direct function call, but indirect "
"``callbr``'s are just as possible, calling an arbitrary pointer to function "
"value."
msgstr ""

#: ../../../LangRef.rst:7147
msgid ""
"'``other labels``': the labels reached when a callee transfers control to a "
"location other than the normal '``normal label``'. The blockaddress constant "
"for these should also be in the list of '``function args``'."
msgstr ""

#: ../../../LangRef.rst:7156
msgid ""
"This instruction is designed to operate as a standard '``call``' instruction "
"in most regards. The primary difference is that it establishes an "
"association with additional labels to define where control flow goes after "
"the call."
msgstr ""

#: ../../../LangRef.rst:7161
msgid ""
"The only use of this today is to implement the \"goto\" feature of gcc "
"inline assembly where additional labels can be provided as locations for the "
"inline assembly to jump to."
msgstr ""

#: ../../../LangRef.rst:7176
msgid "'``resume``' Instruction"
msgstr ""

#: ../../../LangRef.rst:7188
msgid ""
"The '``resume``' instruction is a terminator instruction that has no "
"successors."
msgstr ""

#: ../../../LangRef.rst:7194
msgid ""
"The '``resume``' instruction requires one argument, which must have the same "
"type as the result of any '``landingpad``' instruction in the same function."
msgstr ""

#: ../../../LangRef.rst:7201
msgid ""
"The '``resume``' instruction resumes propagation of an existing (in-flight) "
"exception whose unwinding was interrupted with a :ref:`landingpad "
"<i_landingpad>` instruction."
msgstr ""

#: ../../../LangRef.rst:7215
msgid "'``catchswitch``' Instruction"
msgstr ""

#: ../../../LangRef.rst:7228
msgid ""
"The '``catchswitch``' instruction is used by `LLVM's exception handling "
"system <ExceptionHandling.html#overview>`_ to describe the set of possible "
"catch handlers that may be executed by the :ref:`EH personality routine "
"<personalityfn>`."
msgstr ""

#: ../../../LangRef.rst:7235
msgid ""
"The ``parent`` argument is the token of the funclet that contains the "
"``catchswitch`` instruction. If the ``catchswitch`` is not inside a funclet, "
"this operand may be the token ``none``."
msgstr ""

#: ../../../LangRef.rst:7239
msgid ""
"The ``default`` argument is the label of another basic block beginning with "
"either a ``cleanuppad`` or ``catchswitch`` instruction.  This unwind "
"destination must be a legal target with respect to the ``parent`` links, as "
"described in the `exception handling documentation\\ <ExceptionHandling."
"html#wineh-constraints>`_."
msgstr ""

#: ../../../LangRef.rst:7244
msgid ""
"The ``handlers`` are a nonempty list of successor blocks that each begin "
"with a :ref:`catchpad <i_catchpad>` instruction."
msgstr ""

#: ../../../LangRef.rst:7250
msgid ""
"Executing this instruction transfers control to one of the successors in "
"``handlers``, if appropriate, or continues to unwind via the unwind label if "
"present."
msgstr ""

#: ../../../LangRef.rst:7254
msgid ""
"The ``catchswitch`` is both a terminator and a \"pad\" instruction, meaning "
"that it must be both the first non-phi instruction and last instruction in "
"the basic block. Therefore, it must be the only non-phi instruction in the "
"block."
msgstr ""

#: ../../../LangRef.rst:7271
msgid "'``catchret``' Instruction"
msgstr ""

#: ../../../LangRef.rst:7283
msgid ""
"The '``catchret``' instruction is a terminator instruction that has a single "
"successor."
msgstr ""

#: ../../../LangRef.rst:7290
msgid ""
"The first argument to a '``catchret``' indicates which ``catchpad`` it "
"exits.  It must be a :ref:`catchpad <i_catchpad>`. The second argument to a "
"'``catchret``' specifies where control will transfer to next."
msgstr ""

#: ../../../LangRef.rst:7298
msgid ""
"The '``catchret``' instruction ends an existing (in-flight) exception whose "
"unwinding was interrupted with a :ref:`catchpad <i_catchpad>` instruction.  "
"The :ref:`personality function <personalityfn>` gets a chance to execute "
"arbitrary code to, for example, destroy the active exception.  Control then "
"transfers to ``normal``."
msgstr ""

#: ../../../LangRef.rst:7304
msgid ""
"The ``token`` argument must be a token produced by a ``catchpad`` "
"instruction. If the specified ``catchpad`` is not the most-recently-entered "
"not-yet-exited funclet pad (as described in the `EH documentation\\ "
"<ExceptionHandling.html#wineh-constraints>`_), the ``catchret``'s behavior "
"is undefined."
msgstr ""

#: ../../../LangRef.rst:7319
msgid "'``cleanupret``' Instruction"
msgstr ""

#: ../../../LangRef.rst:7332
msgid ""
"The '``cleanupret``' instruction is a terminator instruction that has an "
"optional successor."
msgstr ""

#: ../../../LangRef.rst:7339
msgid ""
"The '``cleanupret``' instruction requires one argument, which indicates "
"which ``cleanuppad`` it exits, and must be a :ref:`cleanuppad "
"<i_cleanuppad>`. If the specified ``cleanuppad`` is not the most-recently-"
"entered not-yet-exited funclet pad (as described in the `EH documentation\\ "
"<ExceptionHandling.html#wineh-constraints>`_), the ``cleanupret``'s behavior "
"is undefined."
msgstr ""

#: ../../../LangRef.rst:7345
msgid ""
"The '``cleanupret``' instruction also has an optional successor, "
"``continue``, which must be the label of another basic block beginning with "
"either a ``cleanuppad`` or ``catchswitch`` instruction.  This unwind "
"destination must be a legal target with respect to the ``parent`` links, as "
"described in the `exception handling documentation\\ <ExceptionHandling."
"html#wineh-constraints>`_."
msgstr ""

#: ../../../LangRef.rst:7354
msgid ""
"The '``cleanupret``' instruction indicates to the :ref:`personality function "
"<personalityfn>` that one :ref:`cleanuppad <i_cleanuppad>` it transferred "
"control to has ended. It transfers control to ``continue`` or unwinds out of "
"the function."
msgstr ""

#: ../../../LangRef.rst:7370
msgid "'``unreachable``' Instruction"
msgstr ""

#: ../../../LangRef.rst:7382
msgid ""
"The '``unreachable``' instruction has no defined semantics. This instruction "
"is used to inform the optimizer that a particular portion of the code is not "
"reachable. This can be used to indicate that the code after a no-return "
"function cannot be reached, and other facts."
msgstr ""

#: ../../../LangRef.rst:7390
msgid "The '``unreachable``' instruction has no defined semantics."
msgstr ""

#: ../../../LangRef.rst:7395
msgid "Unary Operations"
msgstr ""

#: ../../../LangRef.rst:7397
msgid ""
"Unary operators require a single operand, execute an operation on it, and "
"produce a single value. The operand might represent multiple data, as is the "
"case with the :ref:`vector <t_vector>` data type. The result value has the "
"same type as its operand."
msgstr ""

#: ../../../LangRef.rst:7405
msgid "'``fneg``' Instruction"
msgstr ""

#: ../../../LangRef.rst:7417
msgid "The '``fneg``' instruction returns the negation of its operand."
msgstr ""

#: ../../../LangRef.rst:7422
msgid ""
"The argument to the '``fneg``' instruction must be a :ref:`floating-point "
"<t_floating>` or :ref:`vector <t_vector>` of floating-point values."
msgstr ""

#: ../../../LangRef.rst:7429
msgid ""
"The value produced is a copy of the operand with its sign bit flipped. This "
"instruction can also take any number of :ref:`fast-math flags <fastmath>`, "
"which are optimization hints to enable otherwise unsafe floating-point "
"optimizations:"
msgstr ""

#: ../../../LangRef.rst:7444
msgid "Binary Operations"
msgstr ""

#: ../../../LangRef.rst:7446
msgid ""
"Binary operators are used to do most of the computation in a program. They "
"require two operands of the same type, execute an operation on them, and "
"produce a single value. The operands might represent multiple data, as is "
"the case with the :ref:`vector <t_vector>` data type. The result value has "
"the same type as its operands."
msgstr ""

#: ../../../LangRef.rst:7452
msgid "There are several different binary operators:"
msgstr ""

#: ../../../LangRef.rst:7457
msgid "'``add``' Instruction"
msgstr ""

#: ../../../LangRef.rst:7472
msgid "The '``add``' instruction returns the sum of its two operands."
msgstr ""

#: ../../../LangRef.rst:7477
msgid ""
"The two arguments to the '``add``' instruction must be :ref:`integer "
"<t_integer>` or :ref:`vector <t_vector>` of integer values. Both arguments "
"must have identical types."
msgstr ""

#: ../../../LangRef.rst:7484
msgid "The value produced is the integer sum of the two operands."
msgstr ""

#: ../../../LangRef.rst:7486
msgid ""
"If the sum has unsigned overflow, the result returned is the mathematical "
"result modulo 2\\ :sup:`n`\\ , where n is the bit width of the result."
msgstr ""

#: ../../../LangRef.rst:7490 ../../../LangRef.rst:7583
msgid ""
"Because LLVM integers use a two's complement representation, this "
"instruction is appropriate for both signed and unsigned integers."
msgstr ""

#: ../../../LangRef.rst:7493
msgid ""
"``nuw`` and ``nsw`` stand for \"No Unsigned Wrap\" and \"No Signed Wrap\", "
"respectively. If the ``nuw`` and/or ``nsw`` keywords are present, the result "
"value of the ``add`` is a :ref:`poison value <poisonvalues>` if unsigned and/"
"or signed overflow, respectively, occurs."
msgstr ""

#: ../../../LangRef.rst:7508
msgid "'``fadd``' Instruction"
msgstr ""

#: ../../../LangRef.rst:7520
msgid "The '``fadd``' instruction returns the sum of its two operands."
msgstr ""

#: ../../../LangRef.rst:7525
msgid ""
"The two arguments to the '``fadd``' instruction must be :ref:`floating-point "
"<t_floating>` or :ref:`vector <t_vector>` of floating-point values. Both "
"arguments must have identical types."
msgstr ""

#: ../../../LangRef.rst:7532
msgid ""
"The value produced is the floating-point sum of the two operands. This "
"instruction is assumed to execute in the default :ref:`floating-point "
"environment <floatenv>`. This instruction can also take any number of :ref:"
"`fast-math flags <fastmath>`, which are optimization hints to enable "
"otherwise unsafe floating-point optimizations:"
msgstr ""

#: ../../../LangRef.rst:7547
msgid "'``sub``' Instruction"
msgstr ""

#: ../../../LangRef.rst:7562
msgid "The '``sub``' instruction returns the difference of its two operands."
msgstr ""

#: ../../../LangRef.rst:7564
msgid ""
"Note that the '``sub``' instruction is used to represent the '``neg``' "
"instruction present in most other intermediate representations."
msgstr ""

#: ../../../LangRef.rst:7570
msgid ""
"The two arguments to the '``sub``' instruction must be :ref:`integer "
"<t_integer>` or :ref:`vector <t_vector>` of integer values. Both arguments "
"must have identical types."
msgstr ""

#: ../../../LangRef.rst:7577
msgid "The value produced is the integer difference of the two operands."
msgstr ""

#: ../../../LangRef.rst:7579
msgid ""
"If the difference has unsigned overflow, the result returned is the "
"mathematical result modulo 2\\ :sup:`n`\\ , where n is the bit width of the "
"result."
msgstr ""

#: ../../../LangRef.rst:7586
msgid ""
"``nuw`` and ``nsw`` stand for \"No Unsigned Wrap\" and \"No Signed Wrap\", "
"respectively. If the ``nuw`` and/or ``nsw`` keywords are present, the result "
"value of the ``sub`` is a :ref:`poison value <poisonvalues>` if unsigned and/"
"or signed overflow, respectively, occurs."
msgstr ""

#: ../../../LangRef.rst:7602
msgid "'``fsub``' Instruction"
msgstr ""

#: ../../../LangRef.rst:7614
msgid "The '``fsub``' instruction returns the difference of its two operands."
msgstr ""

#: ../../../LangRef.rst:7619
msgid ""
"The two arguments to the '``fsub``' instruction must be :ref:`floating-point "
"<t_floating>` or :ref:`vector <t_vector>` of floating-point values. Both "
"arguments must have identical types."
msgstr ""

#: ../../../LangRef.rst:7626
msgid ""
"The value produced is the floating-point difference of the two operands. "
"This instruction is assumed to execute in the default :ref:`floating-point "
"environment <floatenv>`. This instruction can also take any number of :ref:"
"`fast-math flags <fastmath>`, which are optimization hints to enable "
"otherwise unsafe floating-point optimizations:"
msgstr ""

#: ../../../LangRef.rst:7642
msgid "'``mul``' Instruction"
msgstr ""

#: ../../../LangRef.rst:7657
msgid "The '``mul``' instruction returns the product of its two operands."
msgstr ""

#: ../../../LangRef.rst:7662
msgid ""
"The two arguments to the '``mul``' instruction must be :ref:`integer "
"<t_integer>` or :ref:`vector <t_vector>` of integer values. Both arguments "
"must have identical types."
msgstr ""

#: ../../../LangRef.rst:7669
msgid "The value produced is the integer product of the two operands."
msgstr ""

#: ../../../LangRef.rst:7671
msgid ""
"If the result of the multiplication has unsigned overflow, the result "
"returned is the mathematical result modulo 2\\ :sup:`n`\\ , where n is the "
"bit width of the result."
msgstr ""

#: ../../../LangRef.rst:7675
msgid ""
"Because LLVM integers use a two's complement representation, and the result "
"is the same width as the operands, this instruction returns the correct "
"result for both signed and unsigned integers. If a full product (e.g. "
"``i32`` * ``i32`` -> ``i64``) is needed, the operands should be sign-"
"extended or zero-extended as appropriate to the width of the full product."
msgstr ""

#: ../../../LangRef.rst:7682
msgid ""
"``nuw`` and ``nsw`` stand for \"No Unsigned Wrap\" and \"No Signed Wrap\", "
"respectively. If the ``nuw`` and/or ``nsw`` keywords are present, the result "
"value of the ``mul`` is a :ref:`poison value <poisonvalues>` if unsigned and/"
"or signed overflow, respectively, occurs."
msgstr ""

#: ../../../LangRef.rst:7697
msgid "'``fmul``' Instruction"
msgstr ""

#: ../../../LangRef.rst:7709
msgid "The '``fmul``' instruction returns the product of its two operands."
msgstr ""

#: ../../../LangRef.rst:7714
msgid ""
"The two arguments to the '``fmul``' instruction must be :ref:`floating-point "
"<t_floating>` or :ref:`vector <t_vector>` of floating-point values. Both "
"arguments must have identical types."
msgstr ""

#: ../../../LangRef.rst:7721
msgid ""
"The value produced is the floating-point product of the two operands. This "
"instruction is assumed to execute in the default :ref:`floating-point "
"environment <floatenv>`. This instruction can also take any number of :ref:"
"`fast-math flags <fastmath>`, which are optimization hints to enable "
"otherwise unsafe floating-point optimizations:"
msgstr ""

#: ../../../LangRef.rst:7736
msgid "'``udiv``' Instruction"
msgstr ""

#: ../../../LangRef.rst:7749
msgid "The '``udiv``' instruction returns the quotient of its two operands."
msgstr ""

#: ../../../LangRef.rst:7754
msgid ""
"The two arguments to the '``udiv``' instruction must be :ref:`integer "
"<t_integer>` or :ref:`vector <t_vector>` of integer values. Both arguments "
"must have identical types."
msgstr ""

#: ../../../LangRef.rst:7761
msgid ""
"The value produced is the unsigned integer quotient of the two operands."
msgstr ""

#: ../../../LangRef.rst:7763
msgid ""
"Note that unsigned integer division and signed integer division are distinct "
"operations; for signed integer division, use '``sdiv``'."
msgstr ""

#: ../../../LangRef.rst:7766
msgid ""
"Division by zero is undefined behavior. For vectors, if any element of the "
"divisor is zero, the operation has undefined behavior."
msgstr ""

#: ../../../LangRef.rst:7770
msgid ""
"If the ``exact`` keyword is present, the result value of the ``udiv`` is a :"
"ref:`poison value <poisonvalues>` if %op1 is not a multiple of %op2 (as "
"such, \"((a udiv exact b) mul b) == a\")."
msgstr ""

#: ../../../LangRef.rst:7782
msgid "'``sdiv``' Instruction"
msgstr ""

#: ../../../LangRef.rst:7795
msgid "The '``sdiv``' instruction returns the quotient of its two operands."
msgstr ""

#: ../../../LangRef.rst:7800
msgid ""
"The two arguments to the '``sdiv``' instruction must be :ref:`integer "
"<t_integer>` or :ref:`vector <t_vector>` of integer values. Both arguments "
"must have identical types."
msgstr ""

#: ../../../LangRef.rst:7807
msgid ""
"The value produced is the signed integer quotient of the two operands "
"rounded towards zero."
msgstr ""

#: ../../../LangRef.rst:7810
msgid ""
"Note that signed integer division and unsigned integer division are distinct "
"operations; for unsigned integer division, use '``udiv``'."
msgstr ""

#: ../../../LangRef.rst:7813
msgid ""
"Division by zero is undefined behavior. For vectors, if any element of the "
"divisor is zero, the operation has undefined behavior. Overflow also leads "
"to undefined behavior; this is a rare case, but can occur, for example, by "
"doing a 32-bit division of -2147483648 by -1."
msgstr ""

#: ../../../LangRef.rst:7818
msgid ""
"If the ``exact`` keyword is present, the result value of the ``sdiv`` is a :"
"ref:`poison value <poisonvalues>` if the result would be rounded."
msgstr ""

#: ../../../LangRef.rst:7831
msgid "'``fdiv``' Instruction"
msgstr ""

#: ../../../LangRef.rst:7843
msgid "The '``fdiv``' instruction returns the quotient of its two operands."
msgstr ""

#: ../../../LangRef.rst:7848
msgid ""
"The two arguments to the '``fdiv``' instruction must be :ref:`floating-point "
"<t_floating>` or :ref:`vector <t_vector>` of floating-point values. Both "
"arguments must have identical types."
msgstr ""

#: ../../../LangRef.rst:7855
msgid ""
"The value produced is the floating-point quotient of the two operands. This "
"instruction is assumed to execute in the default :ref:`floating-point "
"environment <floatenv>`. This instruction can also take any number of :ref:"
"`fast-math flags <fastmath>`, which are optimization hints to enable "
"otherwise unsafe floating-point optimizations:"
msgstr ""

#: ../../../LangRef.rst:7870
msgid "'``urem``' Instruction"
msgstr ""

#: ../../../LangRef.rst:7882
msgid ""
"The '``urem``' instruction returns the remainder from the unsigned division "
"of its two arguments."
msgstr ""

#: ../../../LangRef.rst:7888
msgid ""
"The two arguments to the '``urem``' instruction must be :ref:`integer "
"<t_integer>` or :ref:`vector <t_vector>` of integer values. Both arguments "
"must have identical types."
msgstr ""

#: ../../../LangRef.rst:7895
msgid ""
"This instruction returns the unsigned integer *remainder* of a division. "
"This instruction always performs an unsigned division to get the remainder."
msgstr ""

#: ../../../LangRef.rst:7899
msgid ""
"Note that unsigned integer remainder and signed integer remainder are "
"distinct operations; for signed integer remainder, use '``srem``'."
msgstr ""

#: ../../../LangRef.rst:7902
msgid ""
"Taking the remainder of a division by zero is undefined behavior. For "
"vectors, if any element of the divisor is zero, the operation has undefined "
"behavior."
msgstr ""

#: ../../../LangRef.rst:7914
msgid "'``srem``' Instruction"
msgstr ""

#: ../../../LangRef.rst:7926
msgid ""
"The '``srem``' instruction returns the remainder from the signed division of "
"its two operands. This instruction can also take :ref:`vector <t_vector>` "
"versions of the values in which case the elements must be integers."
msgstr ""

#: ../../../LangRef.rst:7934
msgid ""
"The two arguments to the '``srem``' instruction must be :ref:`integer "
"<t_integer>` or :ref:`vector <t_vector>` of integer values. Both arguments "
"must have identical types."
msgstr ""

#: ../../../LangRef.rst:7941
msgid ""
"This instruction returns the *remainder* of a division (where the result is "
"either zero or has the same sign as the dividend, ``op1``), not the *modulo* "
"operator (where the result is either zero or has the same sign as the "
"divisor, ``op2``) of a value. For more information about the difference, see "
"`The Math Forum <http://mathforum.org/dr.math/problems/anne.4.28.99.html>`_. "
"For a table of how this is implemented in various languages, please see "
"`Wikipedia: modulo operation <http://en.wikipedia.org/wiki/"
"Modulo_operation>`_."
msgstr ""

#: ../../../LangRef.rst:7951
msgid ""
"Note that signed integer remainder and unsigned integer remainder are "
"distinct operations; for unsigned integer remainder, use '``urem``'."
msgstr ""

#: ../../../LangRef.rst:7954
msgid ""
"Taking the remainder of a division by zero is undefined behavior. For "
"vectors, if any element of the divisor is zero, the operation has undefined "
"behavior. Overflow also leads to undefined behavior; this is a rare case, "
"but can occur, for example, by taking the remainder of a 32-bit division of "
"-2147483648 by -1. (The remainder doesn't actually overflow, but this rule "
"lets srem be implemented using instructions that return both the result of "
"the division and the remainder.)"
msgstr ""

#: ../../../LangRef.rst:7973
msgid "'``frem``' Instruction"
msgstr ""

#: ../../../LangRef.rst:7985
msgid ""
"The '``frem``' instruction returns the remainder from the division of its "
"two operands."
msgstr ""

#: ../../../LangRef.rst:7991
msgid ""
"The two arguments to the '``frem``' instruction must be :ref:`floating-point "
"<t_floating>` or :ref:`vector <t_vector>` of floating-point values. Both "
"arguments must have identical types."
msgstr ""

#: ../../../LangRef.rst:7998
msgid ""
"The value produced is the floating-point remainder of the two operands. This "
"is the same output as a libm '``fmod``' function, but without any "
"possibility of setting ``errno``. The remainder has the same sign as the "
"dividend. This instruction is assumed to execute in the default :ref:"
"`floating-point environment <floatenv>`. This instruction can also take any "
"number of :ref:`fast-math flags <fastmath>`, which are optimization hints to "
"enable otherwise unsafe floating-point optimizations:"
msgstr ""

#: ../../../LangRef.rst:8018
msgid "Bitwise Binary Operations"
msgstr ""

#: ../../../LangRef.rst:8020
msgid ""
"Bitwise binary operators are used to do various forms of bit-twiddling in a "
"program. They are generally very efficient instructions and can commonly be "
"strength reduced from other instructions. They require two operands of the "
"same type, execute an operation on them, and produce a single value. The "
"resulting value is the same type as its operands."
msgstr ""

#: ../../../LangRef.rst:8027
msgid "'``shl``' Instruction"
msgstr ""

#: ../../../LangRef.rst:8042
msgid ""
"The '``shl``' instruction returns the first operand shifted to the left a "
"specified number of bits."
msgstr ""

#: ../../../LangRef.rst:8048
msgid ""
"Both arguments to the '``shl``' instruction must be the same :ref:`integer "
"<t_integer>` or :ref:`vector <t_vector>` of integer type. '``op2``' is "
"treated as an unsigned value."
msgstr ""

#: ../../../LangRef.rst:8055
msgid ""
"The value produced is ``op1`` \\* 2\\ :sup:`op2` mod 2\\ :sup:`n`, where "
"``n`` is the width of the result. If ``op2`` is (statically or dynamically) "
"equal to or larger than the number of bits in ``op1``, this instruction "
"returns a :ref:`poison value <poisonvalues>`. If the arguments are vectors, "
"each vector element of ``op1`` is shifted by the corresponding shift amount "
"in ``op2``."
msgstr ""

#: ../../../LangRef.rst:8062
msgid ""
"If the ``nuw`` keyword is present, then the shift produces a poison value if "
"it shifts out any non-zero bits. If the ``nsw`` keyword is present, then the "
"shift produces a poison value if it shifts out any bits that disagree with "
"the resultant sign bit."
msgstr ""

#: ../../../LangRef.rst:8079
msgid "'``lshr``' Instruction"
msgstr ""

#: ../../../LangRef.rst:8092
msgid ""
"The '``lshr``' instruction (logical shift right) returns the first operand "
"shifted to the right a specified number of bits with zero fill."
msgstr ""

#: ../../../LangRef.rst:8098
msgid ""
"Both arguments to the '``lshr``' instruction must be the same :ref:`integer "
"<t_integer>` or :ref:`vector <t_vector>` of integer type. '``op2``' is "
"treated as an unsigned value."
msgstr ""

#: ../../../LangRef.rst:8105
msgid ""
"This instruction always performs a logical shift right operation. The most "
"significant bits of the result will be filled with zero bits after the "
"shift. If ``op2`` is (statically or dynamically) equal to or larger than the "
"number of bits in ``op1``, this instruction returns a :ref:`poison value "
"<poisonvalues>`. If the arguments are vectors, each vector element of "
"``op1`` is shifted by the corresponding shift amount in ``op2``."
msgstr ""

#: ../../../LangRef.rst:8112
msgid ""
"If the ``exact`` keyword is present, the result value of the ``lshr`` is a "
"poison value if any of the bits shifted out are non-zero."
msgstr ""

#: ../../../LangRef.rst:8128
msgid "'``ashr``' Instruction"
msgstr ""

#: ../../../LangRef.rst:8141
msgid ""
"The '``ashr``' instruction (arithmetic shift right) returns the first "
"operand shifted to the right a specified number of bits with sign extension."
msgstr ""

#: ../../../LangRef.rst:8148
msgid ""
"Both arguments to the '``ashr``' instruction must be the same :ref:`integer "
"<t_integer>` or :ref:`vector <t_vector>` of integer type. '``op2``' is "
"treated as an unsigned value."
msgstr ""

#: ../../../LangRef.rst:8155
msgid ""
"This instruction always performs an arithmetic shift right operation, The "
"most significant bits of the result will be filled with the sign bit of "
"``op1``. If ``op2`` is (statically or dynamically) equal to or larger than "
"the number of bits in ``op1``, this instruction returns a :ref:`poison value "
"<poisonvalues>`. If the arguments are vectors, each vector element of "
"``op1`` is shifted by the corresponding shift amount in ``op2``."
msgstr ""

#: ../../../LangRef.rst:8162
msgid ""
"If the ``exact`` keyword is present, the result value of the ``ashr`` is a "
"poison value if any of the bits shifted out are non-zero."
msgstr ""

#: ../../../LangRef.rst:8178
msgid "'``and``' Instruction"
msgstr ""

#: ../../../LangRef.rst:8190
msgid ""
"The '``and``' instruction returns the bitwise logical and of its two "
"operands."
msgstr ""

#: ../../../LangRef.rst:8196
msgid ""
"The two arguments to the '``and``' instruction must be :ref:`integer "
"<t_integer>` or :ref:`vector <t_vector>` of integer values. Both arguments "
"must have identical types."
msgstr ""

#: ../../../LangRef.rst:8203
msgid "The truth table used for the '``and``' instruction is:"
msgstr ""

#: ../../../LangRef.rst:8206 ../../../LangRef.rst:8255
#: ../../../LangRef.rst:8305
msgid "In0"
msgstr ""

#: ../../../LangRef.rst:8206 ../../../LangRef.rst:8255
#: ../../../LangRef.rst:8305
msgid "In1"
msgstr ""

#: ../../../LangRef.rst:8206 ../../../LangRef.rst:8255
#: ../../../LangRef.rst:8305
msgid "Out"
msgstr ""

#: ../../../LangRef.rst:8208 ../../../LangRef.rst:8210
#: ../../../LangRef.rst:8212 ../../../LangRef.rst:8257
#: ../../../LangRef.rst:8259 ../../../LangRef.rst:8261
#: ../../../LangRef.rst:8307 ../../../LangRef.rst:8309
#: ../../../LangRef.rst:8311 ../../../LangRef.rst:8313
msgid "0"
msgstr ""

#: ../../../LangRef.rst:8227
msgid "'``or``' Instruction"
msgstr ""

#: ../../../LangRef.rst:8239
msgid ""
"The '``or``' instruction returns the bitwise logical inclusive or of its two "
"operands."
msgstr ""

#: ../../../LangRef.rst:8245
msgid ""
"The two arguments to the '``or``' instruction must be :ref:`integer "
"<t_integer>` or :ref:`vector <t_vector>` of integer values. Both arguments "
"must have identical types."
msgstr ""

#: ../../../LangRef.rst:8252
msgid "The truth table used for the '``or``' instruction is:"
msgstr ""

#: ../../../LangRef.rst:8276
msgid "'``xor``' Instruction"
msgstr ""

#: ../../../LangRef.rst:8288
msgid ""
"The '``xor``' instruction returns the bitwise logical exclusive or of its "
"two operands. The ``xor`` is used to implement the \"one's complement\" "
"operation, which is the \"~\" operator in C."
msgstr ""

#: ../../../LangRef.rst:8295
msgid ""
"The two arguments to the '``xor``' instruction must be :ref:`integer "
"<t_integer>` or :ref:`vector <t_vector>` of integer values. Both arguments "
"must have identical types."
msgstr ""

#: ../../../LangRef.rst:8302
msgid "The truth table used for the '``xor``' instruction is:"
msgstr ""

#: ../../../LangRef.rst:8327
msgid "Vector Operations"
msgstr ""

#: ../../../LangRef.rst:8329
msgid ""
"LLVM supports several instructions to represent vector operations in a "
"target-independent manner. These instructions cover the element-access and "
"vector-specific operations needed to process vectors effectively. While LLVM "
"does directly support these vector operations, many sophisticated algorithms "
"will want to use target-specific intrinsics to take full advantage of a "
"specific target."
msgstr ""

#: ../../../LangRef.rst:8339
msgid "'``extractelement``' Instruction"
msgstr ""

#: ../../../LangRef.rst:8352
msgid ""
"The '``extractelement``' instruction extracts a single scalar element from a "
"vector at a specified index."
msgstr ""

#: ../../../LangRef.rst:8358
msgid ""
"The first operand of an '``extractelement``' instruction is a value of :ref:"
"`vector <t_vector>` type. The second operand is an index indicating the "
"position from which to extract the element. The index may be a variable of "
"any integer type."
msgstr ""

#: ../../../LangRef.rst:8366
msgid ""
"The result is a scalar of the same type as the element type of ``val``. Its "
"value is the value at position ``idx`` of ``val``. If ``idx`` exceeds the "
"length of ``val`` for a fixed-length vector, the result is a :ref:`poison "
"value <poisonvalues>`. For a scalable vector, if the value of ``idx`` "
"exceeds the runtime length of the vector, the result is a :ref:`poison value "
"<poisonvalues>`."
msgstr ""

#: ../../../LangRef.rst:8383
msgid "'``insertelement``' Instruction"
msgstr ""

#: ../../../LangRef.rst:8396
msgid ""
"The '``insertelement``' instruction inserts a scalar element into a vector "
"at a specified index."
msgstr ""

#: ../../../LangRef.rst:8402
msgid ""
"The first operand of an '``insertelement``' instruction is a value of :ref:"
"`vector <t_vector>` type. The second operand is a scalar value whose type "
"must equal the element type of the first operand. The third operand is an "
"index indicating the position at which to insert the value. The index may be "
"a variable of any integer type."
msgstr ""

#: ../../../LangRef.rst:8411
msgid ""
"The result is a vector of the same type as ``val``. Its element values are "
"those of ``val`` except at position ``idx``, where it gets the value "
"``elt``. If ``idx`` exceeds the length of ``val`` for a fixed-length vector, "
"the result is a :ref:`poison value <poisonvalues>`. For a scalable vector, "
"if the value of ``idx`` exceeds the runtime length of the vector, the result "
"is a :ref:`poison value <poisonvalues>`."
msgstr ""

#: ../../../LangRef.rst:8428
msgid "'``shufflevector``' Instruction"
msgstr ""

#: ../../../LangRef.rst:8441
msgid ""
"The '``shufflevector``' instruction constructs a permutation of elements "
"from two input vectors, returning a vector with the same element type as the "
"input and length that is the same as the shuffle mask."
msgstr ""

#: ../../../LangRef.rst:8448
msgid ""
"The first two operands of a '``shufflevector``' instruction are vectors with "
"the same type. The third argument is a shuffle mask whose element type is "
"always 'i32'. The result of the instruction is a vector whose length is the "
"same as the shuffle mask and whose element type is the same as the element "
"type of the first two operands."
msgstr ""

#: ../../../LangRef.rst:8454
msgid ""
"The shuffle mask operand is required to be a constant vector with either "
"constant integer or undef values."
msgstr ""

#: ../../../LangRef.rst:8460
msgid ""
"The elements of the two input vectors are numbered from left to right across "
"both of the vectors. The shuffle mask operand specifies, for each element of "
"the result vector, which element of the two input vectors the result element "
"gets."
msgstr ""

#: ../../../LangRef.rst:8465
msgid ""
"If the shuffle mask is undef, the result vector is undef. If any element of "
"the mask operand is undef, that element of the result is undef. If the "
"shuffle mask selects an undef element from one of the input vectors, the "
"resulting element is undef. An undef mask element prevents a poisoned vector "
"element from propagating."
msgstr ""

#: ../../../LangRef.rst:8471
msgid ""
"For scalable vectors, the only valid mask values at present are "
"``zeroinitializer`` and ``undef``, since we cannot write all indices as "
"literals for a vector with a length unknown at compile time."
msgstr ""

#: ../../../LangRef.rst:8490
msgid "Aggregate Operations"
msgstr ""

#: ../../../LangRef.rst:8492
msgid ""
"LLVM supports several instructions for working with :ref:`aggregate "
"<t_aggregate>` values."
msgstr ""

#: ../../../LangRef.rst:8498
msgid "'``extractvalue``' Instruction"
msgstr ""

#: ../../../LangRef.rst:8510
msgid ""
"The '``extractvalue``' instruction extracts the value of a member field from "
"an :ref:`aggregate <t_aggregate>` value."
msgstr ""

#: ../../../LangRef.rst:8516
msgid ""
"The first operand of an '``extractvalue``' instruction is a value of :ref:"
"`struct <t_struct>` or :ref:`array <t_array>` type. The other operands are "
"constant indices to specify which value to extract in a similar manner as "
"indices in a '``getelementptr``' instruction."
msgstr ""

#: ../../../LangRef.rst:8521
msgid "The major differences to ``getelementptr`` indexing are:"
msgstr ""

#: ../../../LangRef.rst:8523
msgid ""
"Since the value being indexed is not a pointer, the first index is omitted "
"and assumed to be zero."
msgstr ""

#: ../../../LangRef.rst:8525
msgid "At least one index must be specified."
msgstr ""

#: ../../../LangRef.rst:8526
msgid "Not only struct indices but also array indices must be in bounds."
msgstr ""

#: ../../../LangRef.rst:8531
msgid ""
"The result is the value at the position in the aggregate specified by the "
"index operands."
msgstr ""

#: ../../../LangRef.rst:8544
msgid "'``insertvalue``' Instruction"
msgstr ""

#: ../../../LangRef.rst:8556
msgid ""
"The '``insertvalue``' instruction inserts a value into a member field in an :"
"ref:`aggregate <t_aggregate>` value."
msgstr ""

#: ../../../LangRef.rst:8562
msgid ""
"The first operand of an '``insertvalue``' instruction is a value of :ref:"
"`struct <t_struct>` or :ref:`array <t_array>` type. The second operand is a "
"first-class value to insert. The following operands are constant indices "
"indicating the position at which to insert the value in a similar manner as "
"indices in a '``extractvalue``' instruction. The value to insert must have "
"the same type as the value identified by the indices."
msgstr ""

#: ../../../LangRef.rst:8573
msgid ""
"The result is an aggregate of the same type as ``val``. Its value is that of "
"``val`` except that the value at the position specified by the indices is "
"that of ``elt``."
msgstr ""

#: ../../../LangRef.rst:8589
msgid "Memory Access and Addressing Operations"
msgstr ""

#: ../../../LangRef.rst:8591
msgid ""
"A key design point of an SSA-based representation is how it represents "
"memory. In LLVM, no memory locations are in SSA form, which makes things "
"very simple. This section describes how to read, write, and allocate memory "
"in LLVM."
msgstr ""

#: ../../../LangRef.rst:8599
msgid "'``alloca``' Instruction"
msgstr ""

#: ../../../LangRef.rst:8611
msgid ""
"The '``alloca``' instruction allocates memory on the stack frame of the "
"currently executing function, to be automatically released when this "
"function returns to its caller. The object is always allocated in the "
"address space for allocas indicated in the datalayout."
msgstr ""

#: ../../../LangRef.rst:8619
msgid ""
"The '``alloca``' instruction allocates ``sizeof(<type>)*NumElements`` bytes "
"of memory on the runtime stack, returning a pointer of the appropriate type "
"to the program. If \"NumElements\" is specified, it is the number of "
"elements allocated, otherwise \"NumElements\" is defaulted to be one. If a "
"constant alignment is specified, the value result of the allocation is "
"guaranteed to be aligned to at least that boundary. The alignment may not be "
"greater than ``1 << 29``. If not specified, or if zero, the target can "
"choose to align the allocation on any convenient boundary compatible with "
"the type."
msgstr ""

#: ../../../LangRef.rst:8629
msgid "'``type``' may be any sized type."
msgstr ""

#: ../../../LangRef.rst:8634
msgid ""
"Memory is allocated; a pointer is returned. The allocated memory is "
"uninitialized, and loading from uninitialized memory produces an undefined "
"value. The operation itself is undefined if there is insufficient stack "
"space for the allocation.'``alloca``'d memory is automatically released when "
"the function returns. The '``alloca``' instruction is commonly used to "
"represent automatic variables that must have an address available. When the "
"function returns (either with the ``ret`` or ``resume`` instructions), the "
"memory is reclaimed. Allocating zero bytes is legal, but the returned "
"pointer may not be unique. The order in which memory is allocated (ie., "
"which way the stack grows) is not specified."
msgstr ""

#: ../../../LangRef.rst:8658
msgid "'``load``' Instruction"
msgstr ""

#: ../../../LangRef.rst:8674
msgid "The '``load``' instruction is used to read from memory."
msgstr ""

#: ../../../LangRef.rst:8679
msgid ""
"The argument to the ``load`` instruction specifies the memory address from "
"which to load. The type specified must be a :ref:`first class "
"<t_firstclass>` type of known size (i.e. not containing an :ref:`opaque "
"structural type <t_opaque>`). If the ``load`` is marked as ``volatile``, "
"then the optimizer is not allowed to modify the number or order of execution "
"of this ``load`` with other :ref:`volatile operations <volatile>`."
msgstr ""

#: ../../../LangRef.rst:8686
msgid ""
"If the ``load`` is marked as ``atomic``, it takes an extra :ref:`ordering "
"<ordering>` and optional ``syncscope(\"<target-scope>\")`` argument. The "
"``release`` and ``acq_rel`` orderings are not valid on ``load`` "
"instructions. Atomic loads produce :ref:`defined <memmodel>` results when "
"they may see multiple atomic stores. The type of the pointee must be an "
"integer, pointer, or floating-point type whose bit width is a power of two "
"greater than or equal to eight and less than or equal to a target-specific "
"size limit.  ``align`` must be explicitly specified on atomic loads, and the "
"load has undefined behavior if the alignment is not set to a value which is "
"at least the size in bytes of the pointee. ``!nontemporal`` does not have "
"any defined semantics for atomic loads."
msgstr ""

#: ../../../LangRef.rst:8697
msgid ""
"The optional constant ``align`` argument specifies the alignment of the "
"operation (that is, the alignment of the memory address). A value of 0 or an "
"omitted ``align`` argument means that the operation has the ABI alignment "
"for the target. It is the responsibility of the code emitter to ensure that "
"the alignment information is correct. Overestimating the alignment results "
"in undefined behavior. Underestimating the alignment may produce less "
"efficient code. An alignment of 1 is always safe. The maximum possible "
"alignment is ``1 << 29``. An alignment value higher than the size of the "
"loaded type implies memory up to the alignment value bytes can be safely "
"loaded without trapping in the default address space. Access of the high "
"bytes can interfere with debugging tools, so should not be accessed if the "
"function has the ``sanitize_thread`` or ``sanitize_address`` attributes."
msgstr ""

#: ../../../LangRef.rst:8711 ../../../LangRef.rst:8836
msgid ""
"The optional ``!nontemporal`` metadata must reference a single metadata name "
"``<index>`` corresponding to a metadata node with one ``i32`` entry of value "
"1. The existence of the ``!nontemporal`` metadata on the instruction tells "
"the optimizer and code generator that this load is not expected to be reused "
"in the cache. The code generator may select special instructions to save "
"cache bandwidth, such as the ``MOVNT`` instruction on x86."
msgstr ""

#: ../../../LangRef.rst:8719
msgid ""
"The optional ``!invariant.load`` metadata must reference a single metadata "
"name ``<index>`` corresponding to a metadata node with no entries. If a load "
"instruction tagged with the ``!invariant.load`` metadata is executed, the "
"optimizer may assume the memory location referenced by the load contains the "
"same value at all points in the program where the memory location is known "
"to be dereferenceable; otherwise, the behavior is undefined."
msgstr ""

#: ../../../LangRef.rst:8729
msgid ""
"The optional ``!invariant.group`` metadata must reference a single metadata "
"name"
msgstr ""

#: ../../../LangRef.rst:8728
msgid ""
"``<index>`` corresponding to a metadata node with no entries. See "
"``invariant.group`` metadata :ref:`invariant.group <md_invariant.group>`"
msgstr ""

#: ../../../LangRef.rst:8731
msgid ""
"The optional ``!nonnull`` metadata must reference a single metadata name "
"``<index>`` corresponding to a metadata node with no entries. The existence "
"of the ``!nonnull`` metadata on the instruction tells the optimizer that the "
"value loaded is known to never be null. If the value is null at runtime, the "
"behavior is undefined. This is analogous to the ``nonnull`` attribute on "
"parameters and return values. This metadata can only be applied to loads of "
"a pointer type."
msgstr ""

#: ../../../LangRef.rst:8739
msgid ""
"The optional ``!dereferenceable`` metadata must reference a single metadata "
"name ``<deref_bytes_node>`` corresponding to a metadata node with one "
"``i64`` entry. See ``dereferenceable`` metadata :ref:`dereferenceable "
"<md_dereferenceable>`"
msgstr ""

#: ../../../LangRef.rst:8744
msgid ""
"The optional ``!dereferenceable_or_null`` metadata must reference a single "
"metadata name ``<deref_bytes_node>`` corresponding to a metadata node with "
"one ``i64`` entry. See ``dereferenceable_or_null`` metadata :ref:"
"`dereferenceable_or_null <md_dereferenceable_or_null>`"
msgstr ""

#: ../../../LangRef.rst:8750
msgid ""
"The optional ``!align`` metadata must reference a single metadata name "
"``<align_node>`` corresponding to a metadata node with one ``i64`` entry. "
"The existence of the ``!align`` metadata on the instruction tells the "
"optimizer that the value loaded is known to be aligned to a boundary "
"specified by the integer value in the metadata node. The alignment must be a "
"power of 2. This is analogous to the ''align'' attribute on parameters and "
"return values. This metadata can only be applied to loads of a pointer type. "
"If the returned value is not appropriately aligned at runtime, the behavior "
"is undefined."
msgstr ""

#: ../../../LangRef.rst:8762
msgid ""
"The location of memory pointed to is loaded. If the value being loaded is of "
"scalar type then the number of bytes read does not exceed the minimum number "
"of bytes needed to hold all bits of the type. For example, loading an "
"``i24`` reads at most three bytes. When loading a value of a type like "
"``i20`` with a size that is not an integral number of bytes, the result is "
"undefined if the value was not originally written using a store of the same "
"type."
msgstr ""

#: ../../../LangRef.rst:8782
msgid "'``store``' Instruction"
msgstr ""

#: ../../../LangRef.rst:8795
msgid "The '``store``' instruction is used to write to memory."
msgstr ""

#: ../../../LangRef.rst:8800
msgid ""
"There are two arguments to the ``store`` instruction: a value to store and "
"an address at which to store it. The type of the ``<pointer>`` operand must "
"be a pointer to the :ref:`first class <t_firstclass>` type of the "
"``<value>`` operand. If the ``store`` is marked as ``volatile``, then the "
"optimizer is not allowed to modify the number or order of execution of this "
"``store`` with other :ref:`volatile operations <volatile>`.  Only values of :"
"ref:`first class <t_firstclass>` types of known size (i.e. not containing "
"an :ref:`opaque structural type <t_opaque>`) can be stored."
msgstr ""

#: ../../../LangRef.rst:8809
msgid ""
"If the ``store`` is marked as ``atomic``, it takes an extra :ref:`ordering "
"<ordering>` and optional ``syncscope(\"<target-scope>\")`` argument. The "
"``acquire`` and ``acq_rel`` orderings aren't valid on ``store`` "
"instructions. Atomic loads produce :ref:`defined <memmodel>` results when "
"they may see multiple atomic stores. The type of the pointee must be an "
"integer, pointer, or floating-point type whose bit width is a power of two "
"greater than or equal to eight and less than or equal to a target-specific "
"size limit.  ``align`` must be explicitly specified on atomic stores, and "
"the store has undefined behavior if the alignment is not set to a value "
"which is at least the size in bytes of the pointee. ``!nontemporal`` does "
"not have any defined semantics for atomic stores."
msgstr ""

#: ../../../LangRef.rst:8820
msgid ""
"The optional constant ``align`` argument specifies the alignment of the "
"operation (that is, the alignment of the memory address). A value of 0 or an "
"omitted ``align`` argument means that the operation has the ABI alignment "
"for the target. It is the responsibility of the code emitter to ensure that "
"the alignment information is correct. Overestimating the alignment results "
"in undefined behavior. Underestimating the alignment may produce less "
"efficient code. An alignment of 1 is always safe. The maximum possible "
"alignment is ``1 << 29``. An alignment value higher than the size of the "
"stored type implies memory up to the alignment value bytes can be stored to "
"without trapping in the default address space. Storing to the higher bytes "
"however may result in data races if another thread can access the same "
"address. Introducing a data race is not allowed. Storing to the extra bytes "
"is not allowed even in situations where a data race is known to not exist if "
"the function has the ``sanitize_address`` attribute."
msgstr ""

#: ../../../LangRef.rst:8844
msgid ""
"The optional ``!invariant.group`` metadata must reference a single metadata "
"name ``<index>``. See ``invariant.group`` metadata."
msgstr ""

#: ../../../LangRef.rst:8850
msgid ""
"The contents of memory are updated to contain ``<value>`` at the location "
"specified by the ``<pointer>`` operand. If ``<value>`` is of scalar type "
"then the number of bytes written does not exceed the minimum number of bytes "
"needed to hold all bits of the type. For example, storing an ``i24`` writes "
"at most three bytes. When writing a value of a type like ``i20`` with a size "
"that is not an integral number of bytes, it is unspecified what happens to "
"the extra bits that do not belong to the type, but they will typically be "
"overwritten."
msgstr ""

#: ../../../LangRef.rst:8871
msgid "'``fence``' Instruction"
msgstr ""

#: ../../../LangRef.rst:8883
msgid ""
"The '``fence``' instruction is used to introduce happens-before edges "
"between operations."
msgstr ""

#: ../../../LangRef.rst:8889
msgid ""
"'``fence``' instructions take an :ref:`ordering <ordering>` argument which "
"defines what *synchronizes-with* edges they add. They can only be given "
"``acquire``, ``release``, ``acq_rel``, and ``seq_cst`` orderings."
msgstr ""

#: ../../../LangRef.rst:8896
msgid ""
"A fence A which has (at least) ``release`` ordering semantics *synchronizes "
"with* a fence B with (at least) ``acquire`` ordering semantics if and only "
"if there exist atomic operations X and Y, both operating on some atomic "
"object M, such that A is sequenced before X, X modifies M (either directly "
"or through some side effect of a sequence headed by X), Y is sequenced "
"before B, and Y observes M. This provides a *happens-before* dependency "
"between A and B. Rather than an explicit ``fence``, one (but not both) of "
"the atomic operations X or Y might provide a ``release`` or ``acquire`` "
"(resp.) ordering constraint and still *synchronize-with* the explicit "
"``fence`` and establish the *happens-before* edge."
msgstr ""

#: ../../../LangRef.rst:8908
msgid ""
"A ``fence`` which has ``seq_cst`` ordering, in addition to having both "
"``acquire`` and ``release`` semantics specified above, participates in the "
"global program order of other ``seq_cst`` operations and/or fences."
msgstr ""

#: ../../../LangRef.rst:8912
msgid ""
"A ``fence`` instruction can also take an optional \":ref:`syncscope "
"<syncscope>`\" argument."
msgstr ""

#: ../../../LangRef.rst:8927
msgid "'``cmpxchg``' Instruction"
msgstr ""

#: ../../../LangRef.rst:8939
msgid ""
"The '``cmpxchg``' instruction is used to atomically modify memory. It loads "
"a value in memory and compares it to a given value. If they are equal, it "
"tries to store a new value into the memory."
msgstr ""

#: ../../../LangRef.rst:8946
msgid ""
"There are three arguments to the '``cmpxchg``' instruction: an address to "
"operate on, a value to compare to the value currently be at that address, "
"and a new value to place at that address if the compared values are equal. "
"The type of '<cmp>' must be an integer or pointer type whose bit width is a "
"power of two greater than or equal to eight and less than or equal to a "
"target-specific size limit. '<cmp>' and '<new>' must have the same type, and "
"the type of '<pointer>' must be a pointer to that type. If the ``cmpxchg`` "
"is marked as ``volatile``, then the optimizer is not allowed to modify the "
"number or order of execution of this ``cmpxchg`` with other :ref:`volatile "
"operations <volatile>`."
msgstr ""

#: ../../../LangRef.rst:8957
msgid ""
"The success and failure :ref:`ordering <ordering>` arguments specify how "
"this ``cmpxchg`` synchronizes with other atomic operations. Both ordering "
"parameters must be at least ``monotonic``, the ordering constraint on "
"failure must be no stronger than that on success, and the failure ordering "
"cannot be either ``release`` or ``acq_rel``."
msgstr ""

#: ../../../LangRef.rst:8963
msgid ""
"A ``cmpxchg`` instruction can also take an optional \":ref:`syncscope "
"<syncscope>`\" argument."
msgstr ""

#: ../../../LangRef.rst:8966
msgid ""
"The pointer passed into cmpxchg must have alignment greater than or equal to "
"the size in memory of the operand."
msgstr ""

#: ../../../LangRef.rst:8972
msgid ""
"The contents of memory at the location specified by the '``<pointer>``' "
"operand is read and compared to '``<cmp>``'; if the values are equal, "
"'``<new>``' is written to the location. The original value at the location "
"is returned, together with a flag indicating success (true) or failure "
"(false)."
msgstr ""

#: ../../../LangRef.rst:8977
msgid ""
"If the cmpxchg operation is marked as ``weak`` then a spurious failure is "
"permitted: the operation may not write ``<new>`` even if the comparison "
"matched."
msgstr ""

#: ../../../LangRef.rst:8981
msgid ""
"If the cmpxchg operation is strong (the default), the i1 value is 1 if and "
"only if the value loaded equals ``cmp``."
msgstr ""

#: ../../../LangRef.rst:8984
msgid ""
"A successful ``cmpxchg`` is a read-modify-write instruction for the purpose "
"of identifying release sequences. A failed ``cmpxchg`` is equivalent to an "
"atomic load with an ordering parameter determined the second ordering "
"parameter."
msgstr ""

#: ../../../LangRef.rst:9011
msgid "'``atomicrmw``' Instruction"
msgstr ""

#: ../../../LangRef.rst:9023
msgid "The '``atomicrmw``' instruction is used to atomically modify memory."
msgstr ""

#: ../../../LangRef.rst:9028
msgid ""
"There are three arguments to the '``atomicrmw``' instruction: an operation "
"to apply, an address whose value to modify, an argument to the operation. "
"The operation must be one of the following keywords:"
msgstr ""

#: ../../../LangRef.rst:9032
msgid "xchg"
msgstr ""

#: ../../../LangRef.rst:9033
msgid "add"
msgstr ""

#: ../../../LangRef.rst:9034
msgid "sub"
msgstr ""

#: ../../../LangRef.rst:9035
msgid "and"
msgstr ""

#: ../../../LangRef.rst:9036
msgid "nand"
msgstr ""

#: ../../../LangRef.rst:9037
msgid "or"
msgstr ""

#: ../../../LangRef.rst:9038
msgid "xor"
msgstr ""

#: ../../../LangRef.rst:9039
msgid "max"
msgstr ""

#: ../../../LangRef.rst:9040
msgid "min"
msgstr ""

#: ../../../LangRef.rst:9041
msgid "umax"
msgstr ""

#: ../../../LangRef.rst:9042
msgid "umin"
msgstr ""

#: ../../../LangRef.rst:9043
msgid "fadd"
msgstr ""

#: ../../../LangRef.rst:9044
msgid "fsub"
msgstr ""

#: ../../../LangRef.rst:9046
msgid ""
"For most of these operations, the type of '<value>' must be an integer type "
"whose bit width is a power of two greater than or equal to eight and less "
"than or equal to a target-specific size limit. For xchg, this may also be a "
"floating point type with the same size constraints as integers.  For fadd/"
"fsub, this must be a floating point type.  The type of the '``<pointer>``' "
"operand must be a pointer to that type. If the ``atomicrmw`` is marked as "
"``volatile``, then the optimizer is not allowed to modify the number or "
"order of execution of this ``atomicrmw`` with other :ref:`volatile "
"operations <volatile>`."
msgstr ""

#: ../../../LangRef.rst:9056
msgid ""
"A ``atomicrmw`` instruction can also take an optional \":ref:`syncscope "
"<syncscope>`\" argument."
msgstr ""

#: ../../../LangRef.rst:9062
msgid ""
"The contents of memory at the location specified by the '``<pointer>``' "
"operand are atomically read, modified, and written back. The original value "
"at the location is returned. The modification is specified by the operation "
"argument:"
msgstr ""

#: ../../../LangRef.rst:9067
msgid "xchg: ``*ptr = val``"
msgstr ""

#: ../../../LangRef.rst:9068
msgid "add: ``*ptr = *ptr + val``"
msgstr ""

#: ../../../LangRef.rst:9069
msgid "sub: ``*ptr = *ptr - val``"
msgstr ""

#: ../../../LangRef.rst:9070
msgid "and: ``*ptr = *ptr & val``"
msgstr ""

#: ../../../LangRef.rst:9071
msgid "nand: ``*ptr = ~(*ptr & val)``"
msgstr ""

#: ../../../LangRef.rst:9072
msgid "or: ``*ptr = *ptr | val``"
msgstr ""

#: ../../../LangRef.rst:9073
msgid "xor: ``*ptr = *ptr ^ val``"
msgstr ""

#: ../../../LangRef.rst:9074
msgid "max: ``*ptr = *ptr > val ? *ptr : val`` (using a signed comparison)"
msgstr ""

#: ../../../LangRef.rst:9075
msgid "min: ``*ptr = *ptr < val ? *ptr : val`` (using a signed comparison)"
msgstr ""

#: ../../../LangRef.rst:9076
msgid "umax: ``*ptr = *ptr > val ? *ptr : val`` (using an unsigned comparison)"
msgstr ""

#: ../../../LangRef.rst:9078
msgid "umin: ``*ptr = *ptr < val ? *ptr : val`` (using an unsigned comparison)"
msgstr ""

#: ../../../LangRef.rst:9080
msgid "fadd: ``*ptr = *ptr + val`` (using floating point arithmetic)"
msgstr ""

#: ../../../LangRef.rst:9081
msgid "fsub: ``*ptr = *ptr - val`` (using floating point arithmetic)"
msgstr ""

#: ../../../LangRef.rst:9093
msgid "'``getelementptr``' Instruction"
msgstr ""

#: ../../../LangRef.rst:9107
msgid ""
"The '``getelementptr``' instruction is used to get the address of a "
"subelement of an :ref:`aggregate <t_aggregate>` data structure. It performs "
"address calculation only and does not access memory. The instruction can "
"also be used to calculate a vector of such addresses."
msgstr ""

#: ../../../LangRef.rst:9115
msgid ""
"The first argument is always a type used as the basis for the calculations. "
"The second argument is always a pointer or a vector of pointers, and is the "
"base address to start from. The remaining arguments are indices that "
"indicate which of the elements of the aggregate object are indexed. The "
"interpretation of each index is dependent on the type being indexed into. "
"The first index always indexes the pointer value given as the second "
"argument, the second index indexes a value of the type pointed to (not "
"necessarily the value directly pointed to, since the first index can be non-"
"zero), etc. The first type indexed into must be a pointer value, subsequent "
"types can be arrays, vectors, and structs. Note that subsequent types being "
"indexed into can never be pointers, since that would require loading the "
"pointer before continuing calculation."
msgstr ""

#: ../../../LangRef.rst:9128
msgid ""
"The type of each index argument depends on the type it is indexing into. "
"When indexing into a (optionally packed) structure, only ``i32`` integer "
"**constants** are allowed (when using a vector of indices they must all be "
"the **same** ``i32`` integer constant). When indexing into an array, pointer "
"or vector, integers of any width are allowed, and they are not required to "
"be constant. These integers are treated as signed values where relevant."
msgstr ""

#: ../../../LangRef.rst:9136
msgid ""
"For example, let's consider a C code fragment and how it gets compiled to "
"LLVM:"
msgstr ""

#: ../../../LangRef.rst:9156
msgid "The LLVM code generated by Clang is:"
msgstr ""

#: ../../../LangRef.rst:9172
msgid ""
"In the example above, the first index is indexing into the '``%struct.ST*``' "
"type, which is a pointer, yielding a '``%struct.ST``' = '``{ i32, double, "
"%struct.RT }``' type, a structure. The second index indexes into the third "
"element of the structure, yielding a '``%struct.RT``' = '``{ i8 , [10 x [20 "
"x i32]], i8 }``' type, another structure. The third index indexes into the "
"second element of the structure, yielding a '``[10 x [20 x i32]]``' type, an "
"array. The two dimensions of the array are subscripted into, yielding an "
"'``i32``' type. The '``getelementptr``' instruction returns a pointer to "
"this element, thus computing a value of '``i32*``' type."
msgstr ""

#: ../../../LangRef.rst:9183
msgid ""
"Note that it is perfectly legal to index partially through a structure, "
"returning a pointer to an inner element. Because of this, the LLVM code for "
"the given testcase is equivalent to:"
msgstr ""

#: ../../../LangRef.rst:9198
msgid ""
"If the ``inbounds`` keyword is present, the result value of the "
"``getelementptr`` is a :ref:`poison value <poisonvalues>` if the base "
"pointer is not an *in bounds* address of an allocated object, or if any of "
"the addresses that would be formed by successive addition of the offsets "
"implied by the indices to the base address with infinitely precise signed "
"arithmetic are not an *in bounds* address of that allocated object. The *in "
"bounds* addresses for an allocated object are all the addresses that point "
"into the object, plus the address one byte past the end. The only *in "
"bounds* address for a null pointer in the default address-space is the null "
"pointer itself. In cases where the base is a vector of pointers the "
"``inbounds`` keyword applies to each of the computations element-wise."
msgstr ""

#: ../../../LangRef.rst:9211
msgid ""
"If the ``inbounds`` keyword is not present, the offsets are added to the "
"base address with silently-wrapping two's complement arithmetic. If the "
"offsets have a different width from the pointer, they are sign-extended or "
"truncated to the width of the pointer. The result value of the "
"``getelementptr`` may be outside the object pointed to by the base pointer. "
"The result value may not necessarily be used to access memory though, even "
"if it happens to point into allocated storage. See the :ref:`Pointer "
"Aliasing Rules <pointeraliasing>` section for more information."
msgstr ""

#: ../../../LangRef.rst:9221
msgid ""
"If the ``inrange`` keyword is present before any index, loading from or "
"storing to any pointer derived from the ``getelementptr`` has undefined "
"behavior if the load or store would access memory outside of the bounds of "
"the element selected by the index marked as ``inrange``. The result of a "
"pointer comparison or ``ptrtoint`` (including ``ptrtoint``-like operations "
"involving memory) involving a pointer derived from a ``getelementptr`` with "
"the ``inrange`` keyword is undefined, with the exception of comparisons in "
"the case where both operands are in the range of the element selected by the "
"``inrange`` keyword, inclusive of the address one past the end of that "
"element. Note that the ``inrange`` keyword is currently only allowed in "
"constant ``getelementptr`` expressions."
msgstr ""

#: ../../../LangRef.rst:9233
msgid ""
"The getelementptr instruction is often confusing. For some more insight into "
"how it works, see :doc:`the getelementptr FAQ <GetElementPtr>`."
msgstr ""

#: ../../../LangRef.rst:9251
msgid "Vector of pointers:"
msgstr ""

#: ../../../LangRef.rst:9253
msgid ""
"The ``getelementptr`` returns a vector of pointers, instead of a single "
"address, when one or more of its arguments is a vector. In such cases, all "
"vector arguments should have the same number of elements, and every scalar "
"argument will be effectively broadcast into a vector during address "
"calculation."
msgstr ""

#: ../../../LangRef.rst:9274
msgid "The two following instructions are equivalent:"
msgstr ""

#: ../../../LangRef.rst:9287
msgid ""
"Let's look at the C code, where the vector version of ``getelementptr`` "
"makes sense:"
msgstr ""

#: ../../../LangRef.rst:9307
msgid "Conversion Operations"
msgstr ""

#: ../../../LangRef.rst:9309
msgid ""
"The instructions in this category are the conversion instructions (casting) "
"which all take a single operand and a type. They perform various bit "
"conversions on the operand."
msgstr ""

#: ../../../LangRef.rst:9316
msgid "'``trunc .. to``' Instruction"
msgstr ""

#: ../../../LangRef.rst:9328
msgid "The '``trunc``' instruction truncates its operand to the type ``ty2``."
msgstr ""

#: ../../../LangRef.rst:9333
msgid ""
"The '``trunc``' instruction takes a value to trunc, and a type to trunc it "
"to. Both types must be of :ref:`integer <t_integer>` types, or vectors of "
"the same number of integers. The bit size of the ``value`` must be larger "
"than the bit size of the destination type, ``ty2``. Equal sized types are "
"not allowed."
msgstr ""

#: ../../../LangRef.rst:9342
msgid ""
"The '``trunc``' instruction truncates the high order bits in ``value`` and "
"converts the remaining bits to ``ty2``. Since the source size must be larger "
"than the destination size, ``trunc`` cannot be a *no-op cast*. It will "
"always truncate bits."
msgstr ""

#: ../../../LangRef.rst:9360
msgid "'``zext .. to``' Instruction"
msgstr ""

#: ../../../LangRef.rst:9372
msgid "The '``zext``' instruction zero extends its operand to type ``ty2``."
msgstr ""

#: ../../../LangRef.rst:9377
msgid ""
"The '``zext``' instruction takes a value to cast, and a type to cast it to. "
"Both types must be of :ref:`integer <t_integer>` types, or vectors of the "
"same number of integers. The bit size of the ``value`` must be smaller than "
"the bit size of the destination type, ``ty2``."
msgstr ""

#: ../../../LangRef.rst:9385
msgid ""
"The ``zext`` fills the high order bits of the ``value`` with zero bits until "
"it reaches the size of the destination type, ``ty2``."
msgstr ""

#: ../../../LangRef.rst:9388
msgid "When zero extending from i1, the result will always be either 0 or 1."
msgstr ""

#: ../../../LangRef.rst:9402
msgid "'``sext .. to``' Instruction"
msgstr ""

#: ../../../LangRef.rst:9414
msgid "The '``sext``' sign extends ``value`` to the type ``ty2``."
msgstr ""

#: ../../../LangRef.rst:9419
msgid ""
"The '``sext``' instruction takes a value to cast, and a type to cast it to. "
"Both types must be of :ref:`integer <t_integer>` types, or vectors of the "
"same number of integers. The bit size of the ``value`` must be smaller than "
"the bit size of the destination type, ``ty2``."
msgstr ""

#: ../../../LangRef.rst:9427
msgid ""
"The '``sext``' instruction performs a sign extension by copying the sign bit "
"(highest order bit) of the ``value`` until it reaches the bit size of the "
"type ``ty2``."
msgstr ""

#: ../../../LangRef.rst:9431
msgid "When sign extending from i1, the extension always results in -1 or 0."
msgstr ""

#: ../../../LangRef.rst:9443
msgid "'``fptrunc .. to``' Instruction"
msgstr ""

#: ../../../LangRef.rst:9455
msgid "The '``fptrunc``' instruction truncates ``value`` to type ``ty2``."
msgstr ""

#: ../../../LangRef.rst:9460
msgid ""
"The '``fptrunc``' instruction takes a :ref:`floating-point <t_floating>` "
"value to cast and a :ref:`floating-point <t_floating>` type to cast it to. "
"The size of ``value`` must be larger than the size of ``ty2``. This implies "
"that ``fptrunc`` cannot be used to make a *no-op cast*."
msgstr ""

#: ../../../LangRef.rst:9468
msgid ""
"The '``fptrunc``' instruction casts a ``value`` from a larger :ref:`floating-"
"point <t_floating>` type to a smaller :ref:`floating-point <t_floating>` "
"type. This instruction is assumed to execute in the default :ref:`floating-"
"point environment <floatenv>`."
msgstr ""

#: ../../../LangRef.rst:9483
msgid "'``fpext .. to``' Instruction"
msgstr ""

#: ../../../LangRef.rst:9495
msgid ""
"The '``fpext``' extends a floating-point ``value`` to a larger floating-"
"point value."
msgstr ""

#: ../../../LangRef.rst:9501
msgid ""
"The '``fpext``' instruction takes a :ref:`floating-point <t_floating>` "
"``value`` to cast, and a :ref:`floating-point <t_floating>` type to cast it "
"to. The source type must be smaller than the destination type."
msgstr ""

#: ../../../LangRef.rst:9508
msgid ""
"The '``fpext``' instruction extends the ``value`` from a smaller :ref:"
"`floating-point <t_floating>` type to a larger :ref:`floating-point "
"<t_floating>` type. The ``fpext`` cannot be used to make a *no-op cast* "
"because it always changes bits. Use ``bitcast`` to make a *no-op cast* for a "
"floating-point cast."
msgstr ""

#: ../../../LangRef.rst:9523
msgid "'``fptoui .. to``' Instruction"
msgstr ""

#: ../../../LangRef.rst:9535
msgid ""
"The '``fptoui``' converts a floating-point ``value`` to its unsigned integer "
"equivalent of type ``ty2``."
msgstr ""

#: ../../../LangRef.rst:9541
msgid ""
"The '``fptoui``' instruction takes a value to cast, which must be a scalar "
"or vector :ref:`floating-point <t_floating>` value, and a type to cast it to "
"``ty2``, which must be an :ref:`integer <t_integer>` type. If ``ty`` is a "
"vector floating-point type, ``ty2`` must be a vector integer type with the "
"same number of elements as ``ty``"
msgstr ""

#: ../../../LangRef.rst:9550
msgid ""
"The '``fptoui``' instruction converts its :ref:`floating-point <t_floating>` "
"operand into the nearest (rounding towards zero) unsigned integer value. If "
"the value cannot fit in ``ty2``, the result is a :ref:`poison value "
"<poisonvalues>`."
msgstr ""

#: ../../../LangRef.rst:9565
msgid "'``fptosi .. to``' Instruction"
msgstr ""

#: ../../../LangRef.rst:9577
msgid ""
"The '``fptosi``' instruction converts :ref:`floating-point <t_floating>` "
"``value`` to type ``ty2``."
msgstr ""

#: ../../../LangRef.rst:9583
msgid ""
"The '``fptosi``' instruction takes a value to cast, which must be a scalar "
"or vector :ref:`floating-point <t_floating>` value, and a type to cast it to "
"``ty2``, which must be an :ref:`integer <t_integer>` type. If ``ty`` is a "
"vector floating-point type, ``ty2`` must be a vector integer type with the "
"same number of elements as ``ty``"
msgstr ""

#: ../../../LangRef.rst:9592
msgid ""
"The '``fptosi``' instruction converts its :ref:`floating-point <t_floating>` "
"operand into the nearest (rounding towards zero) signed integer value. If "
"the value cannot fit in ``ty2``, the result is a :ref:`poison value "
"<poisonvalues>`."
msgstr ""

#: ../../../LangRef.rst:9607
msgid "'``uitofp .. to``' Instruction"
msgstr ""

#: ../../../LangRef.rst:9619
msgid ""
"The '``uitofp``' instruction regards ``value`` as an unsigned integer and "
"converts that value to the ``ty2`` type."
msgstr ""

#: ../../../LangRef.rst:9625
msgid ""
"The '``uitofp``' instruction takes a value to cast, which must be a scalar "
"or vector :ref:`integer <t_integer>` value, and a type to cast it to "
"``ty2``, which must be an :ref:`floating-point <t_floating>` type. If ``ty`` "
"is a vector integer type, ``ty2`` must be a vector floating-point type with "
"the same number of elements as ``ty``"
msgstr ""

#: ../../../LangRef.rst:9634
msgid ""
"The '``uitofp``' instruction interprets its operand as an unsigned integer "
"quantity and converts it to the corresponding floating-point value. If the "
"value cannot be exactly represented, it is rounded using the default "
"rounding mode."
msgstr ""

#: ../../../LangRef.rst:9649
msgid "'``sitofp .. to``' Instruction"
msgstr ""

#: ../../../LangRef.rst:9661
msgid ""
"The '``sitofp``' instruction regards ``value`` as a signed integer and "
"converts that value to the ``ty2`` type."
msgstr ""

#: ../../../LangRef.rst:9667
msgid ""
"The '``sitofp``' instruction takes a value to cast, which must be a scalar "
"or vector :ref:`integer <t_integer>` value, and a type to cast it to "
"``ty2``, which must be an :ref:`floating-point <t_floating>` type. If ``ty`` "
"is a vector integer type, ``ty2`` must be a vector floating-point type with "
"the same number of elements as ``ty``"
msgstr ""

#: ../../../LangRef.rst:9676
msgid ""
"The '``sitofp``' instruction interprets its operand as a signed integer "
"quantity and converts it to the corresponding floating-point value. If the "
"value cannot be exactly represented, it is rounded using the default "
"rounding mode."
msgstr ""

#: ../../../LangRef.rst:9692
msgid "'``ptrtoint .. to``' Instruction"
msgstr ""

#: ../../../LangRef.rst:9704
msgid ""
"The '``ptrtoint``' instruction converts the pointer or a vector of pointers "
"``value`` to the integer (or vector of integers) type ``ty2``."
msgstr ""

#: ../../../LangRef.rst:9710
msgid ""
"The '``ptrtoint``' instruction takes a ``value`` to cast, which must be a "
"value of type :ref:`pointer <t_pointer>` or a vector of pointers, and a type "
"to cast it to ``ty2``, which must be an :ref:`integer <t_integer>` or a "
"vector of integers type."
msgstr ""

#: ../../../LangRef.rst:9718
msgid ""
"The '``ptrtoint``' instruction converts ``value`` to integer type ``ty2`` by "
"interpreting the pointer value as an integer and either truncating or zero "
"extending that value to the size of the integer type. If ``value`` is "
"smaller than ``ty2`` then a zero extension is done. If ``value`` is larger "
"than ``ty2`` then a truncation is done. If they are the same size, then "
"nothing is done (*no-op cast*) other than a type change."
msgstr ""

#: ../../../LangRef.rst:9738
msgid "'``inttoptr .. to``' Instruction"
msgstr ""

#: ../../../LangRef.rst:9750
msgid ""
"The '``inttoptr``' instruction converts an integer ``value`` to a pointer "
"type, ``ty2``."
msgstr ""

#: ../../../LangRef.rst:9756
msgid ""
"The '``inttoptr``' instruction takes an :ref:`integer <t_integer>` value to "
"cast, and a type to cast it to, which must be a :ref:`pointer <t_pointer>` "
"type."
msgstr ""

#: ../../../LangRef.rst:9760
msgid ""
"The optional ``!dereferenceable`` metadata must reference a single metadata "
"name ``<deref_bytes_node>`` corresponding to a metadata node with one "
"``i64`` entry. See ``dereferenceable`` metadata."
msgstr ""

#: ../../../LangRef.rst:9765
msgid ""
"The optional ``!dereferenceable_or_null`` metadata must reference a single "
"metadata name ``<deref_bytes_node>`` corresponding to a metadata node with "
"one ``i64`` entry. See ``dereferenceable_or_null`` metadata."
msgstr ""

#: ../../../LangRef.rst:9773
msgid ""
"The '``inttoptr``' instruction converts ``value`` to type ``ty2`` by "
"applying either a zero extension or a truncation depending on the size of "
"the integer ``value``. If ``value`` is larger than the size of a pointer "
"then a truncation is done. If ``value`` is smaller than the size of a "
"pointer then a zero extension is done. If they are the same size, nothing is "
"done (*no-op cast*)."
msgstr ""

#: ../../../LangRef.rst:9793
msgid "'``bitcast .. to``' Instruction"
msgstr ""

#: ../../../LangRef.rst:9805
msgid ""
"The '``bitcast``' instruction converts ``value`` to type ``ty2`` without "
"changing any bits."
msgstr ""

#: ../../../LangRef.rst:9811
msgid ""
"The '``bitcast``' instruction takes a value to cast, which must be a non-"
"aggregate first class value, and a type to cast it to, which must also be a "
"non-aggregate :ref:`first class <t_firstclass>` type. The bit sizes of "
"``value`` and the destination type, ``ty2``, must be identical. If the "
"source type is a pointer, the destination type must also be a pointer of the "
"same size. This instruction supports bitwise conversion of vectors to "
"integers and to vectors of other types (as long as they have the same size)."
msgstr ""

#: ../../../LangRef.rst:9823
msgid ""
"The '``bitcast``' instruction converts ``value`` to type ``ty2``. It is "
"always a *no-op cast* because no bits change with this conversion. The "
"conversion is done as if the ``value`` had been stored to memory and read "
"back as type ``ty2``. Pointer (or vector of pointers) types may only be "
"converted to other pointer (or vector of pointers) types with the same "
"address space through this instruction. To convert pointers to other types, "
"use the :ref:`inttoptr <i_inttoptr>` or :ref:`ptrtoint <i_ptrtoint>` "
"instructions first."
msgstr ""

#: ../../../LangRef.rst:9845
msgid "'``addrspacecast .. to``' Instruction"
msgstr ""

#: ../../../LangRef.rst:9857
msgid ""
"The '``addrspacecast``' instruction converts ``ptrval`` from ``pty`` in "
"address space ``n`` to type ``pty2`` in address space ``m``."
msgstr ""

#: ../../../LangRef.rst:9863
msgid ""
"The '``addrspacecast``' instruction takes a pointer or vector of pointer "
"value to cast and a pointer type to cast it to, which must have a different "
"address space."
msgstr ""

#: ../../../LangRef.rst:9870
msgid ""
"The '``addrspacecast``' instruction converts the pointer value ``ptrval`` to "
"type ``pty2``. It can be a *no-op cast* or a complex value modification, "
"depending on the target and the address space pair. Pointer conversions "
"within the same address space must be performed with the ``bitcast`` "
"instruction. Note that if the address space conversion is legal then both "
"result and operand refer to the same memory location."
msgstr ""

#: ../../../LangRef.rst:9890
msgid "Other Operations"
msgstr ""

#: ../../../LangRef.rst:9892
msgid ""
"The instructions in this category are the \"miscellaneous\" instructions, "
"which defy better classification."
msgstr ""

#: ../../../LangRef.rst:9898
msgid "'``icmp``' Instruction"
msgstr ""

#: ../../../LangRef.rst:9910
msgid ""
"The '``icmp``' instruction returns a boolean value or a vector of boolean "
"values based on comparison of its two integer, integer vector, pointer, or "
"pointer vector operands."
msgstr ""

#: ../../../LangRef.rst:9917
msgid ""
"The '``icmp``' instruction takes three operands. The first operand is the "
"condition code indicating the kind of comparison to perform. It is not a "
"value, just a keyword. The possible condition codes are:"
msgstr ""

#: ../../../LangRef.rst:9921
msgid "``eq``: equal"
msgstr ""

#: ../../../LangRef.rst:9922
msgid "``ne``: not equal"
msgstr ""

#: ../../../LangRef.rst:9923
msgid "``ugt``: unsigned greater than"
msgstr ""

#: ../../../LangRef.rst:9924
msgid "``uge``: unsigned greater or equal"
msgstr ""

#: ../../../LangRef.rst:9925
msgid "``ult``: unsigned less than"
msgstr ""

#: ../../../LangRef.rst:9926
msgid "``ule``: unsigned less or equal"
msgstr ""

#: ../../../LangRef.rst:9927
msgid "``sgt``: signed greater than"
msgstr ""

#: ../../../LangRef.rst:9928
msgid "``sge``: signed greater or equal"
msgstr ""

#: ../../../LangRef.rst:9929
msgid "``slt``: signed less than"
msgstr ""

#: ../../../LangRef.rst:9930
msgid "``sle``: signed less or equal"
msgstr ""

#: ../../../LangRef.rst:9932
msgid ""
"The remaining two arguments must be :ref:`integer <t_integer>` or :ref:"
"`pointer <t_pointer>` or integer :ref:`vector <t_vector>` typed. They must "
"also be identical types."
msgstr ""

#: ../../../LangRef.rst:9939
msgid ""
"The '``icmp``' compares ``op1`` and ``op2`` according to the condition code "
"given as ``cond``. The comparison performed always yields either an :ref:`i1 "
"<t_integer>` or vector of ``i1`` result, as follows:"
msgstr ""

#: ../../../LangRef.rst:9943
msgid ""
"``eq``: yields ``true`` if the operands are equal, ``false`` otherwise. No "
"sign interpretation is necessary or performed."
msgstr ""

#: ../../../LangRef.rst:9945
msgid ""
"``ne``: yields ``true`` if the operands are unequal, ``false`` otherwise. No "
"sign interpretation is necessary or performed."
msgstr ""

#: ../../../LangRef.rst:9947
msgid ""
"``ugt``: interprets the operands as unsigned values and yields ``true`` if "
"``op1`` is greater than ``op2``."
msgstr ""

#: ../../../LangRef.rst:9949
msgid ""
"``uge``: interprets the operands as unsigned values and yields ``true`` if "
"``op1`` is greater than or equal to ``op2``."
msgstr ""

#: ../../../LangRef.rst:9951
msgid ""
"``ult``: interprets the operands as unsigned values and yields ``true`` if "
"``op1`` is less than ``op2``."
msgstr ""

#: ../../../LangRef.rst:9953
msgid ""
"``ule``: interprets the operands as unsigned values and yields ``true`` if "
"``op1`` is less than or equal to ``op2``."
msgstr ""

#: ../../../LangRef.rst:9955
msgid ""
"``sgt``: interprets the operands as signed values and yields ``true`` if "
"``op1`` is greater than ``op2``."
msgstr ""

#: ../../../LangRef.rst:9957
msgid ""
"``sge``: interprets the operands as signed values and yields ``true`` if "
"``op1`` is greater than or equal to ``op2``."
msgstr ""

#: ../../../LangRef.rst:9959
msgid ""
"``slt``: interprets the operands as signed values and yields ``true`` if "
"``op1`` is less than ``op2``."
msgstr ""

#: ../../../LangRef.rst:9961
msgid ""
"``sle``: interprets the operands as signed values and yields ``true`` if "
"``op1`` is less than or equal to ``op2``."
msgstr ""

#: ../../../LangRef.rst:9964
msgid ""
"If the operands are :ref:`pointer <t_pointer>` typed, the pointer values are "
"compared as if they were integers."
msgstr ""

#: ../../../LangRef.rst:9967
msgid ""
"If the operands are integer vectors, then they are compared element by "
"element. The result is an ``i1`` vector with the same number of elements as "
"the values being compared. Otherwise, the result is an ``i1``."
msgstr ""

#: ../../../LangRef.rst:9986
msgid "'``fcmp``' Instruction"
msgstr ""

#: ../../../LangRef.rst:9998
msgid ""
"The '``fcmp``' instruction returns a boolean value or vector of boolean "
"values based on comparison of its operands."
msgstr ""

#: ../../../LangRef.rst:10001 ../../../LangRef.rst:15986
msgid ""
"If the operands are floating-point scalars, then the result type is a "
"boolean (:ref:`i1 <t_integer>`)."
msgstr ""

#: ../../../LangRef.rst:10004 ../../../LangRef.rst:15989
msgid ""
"If the operands are floating-point vectors, then the result type is a vector "
"of boolean with the same number of elements as the operands being compared."
msgstr ""

#: ../../../LangRef.rst:10011
msgid ""
"The '``fcmp``' instruction takes three operands. The first operand is the "
"condition code indicating the kind of comparison to perform. It is not a "
"value, just a keyword. The possible condition codes are:"
msgstr ""

#: ../../../LangRef.rst:10015
msgid "``false``: no comparison, always returns false"
msgstr ""

#: ../../../LangRef.rst:10016
msgid "``oeq``: ordered and equal"
msgstr ""

#: ../../../LangRef.rst:10017
msgid "``ogt``: ordered and greater than"
msgstr ""

#: ../../../LangRef.rst:10018
msgid "``oge``: ordered and greater than or equal"
msgstr ""

#: ../../../LangRef.rst:10019
msgid "``olt``: ordered and less than"
msgstr ""

#: ../../../LangRef.rst:10020
msgid "``ole``: ordered and less than or equal"
msgstr ""

#: ../../../LangRef.rst:10021
msgid "``one``: ordered and not equal"
msgstr ""

#: ../../../LangRef.rst:10022
msgid "``ord``: ordered (no nans)"
msgstr ""

#: ../../../LangRef.rst:10023
msgid "``ueq``: unordered or equal"
msgstr ""

#: ../../../LangRef.rst:10024
msgid "``ugt``: unordered or greater than"
msgstr ""

#: ../../../LangRef.rst:10025
msgid "``uge``: unordered or greater than or equal"
msgstr ""

#: ../../../LangRef.rst:10026
msgid "``ult``: unordered or less than"
msgstr ""

#: ../../../LangRef.rst:10027
msgid "``ule``: unordered or less than or equal"
msgstr ""

#: ../../../LangRef.rst:10028
msgid "``une``: unordered or not equal"
msgstr ""

#: ../../../LangRef.rst:10029
msgid "``uno``: unordered (either nans)"
msgstr ""

#: ../../../LangRef.rst:10030
msgid "``true``: no comparison, always returns true"
msgstr ""

#: ../../../LangRef.rst:10032
msgid ""
"*Ordered* means that neither operand is a QNAN while *unordered* means that "
"either operand may be a QNAN."
msgstr ""

#: ../../../LangRef.rst:10035
msgid ""
"Each of ``val1`` and ``val2`` arguments must be either a :ref:`floating-"
"point <t_floating>` type or a :ref:`vector <t_vector>` of floating-point "
"type. They must have identical types."
msgstr ""

#: ../../../LangRef.rst:10042
msgid ""
"The '``fcmp``' instruction compares ``op1`` and ``op2`` according to the "
"condition code given as ``cond``. If the operands are vectors, then the "
"vectors are compared element by element. Each comparison performed always "
"yields an :ref:`i1 <t_integer>` result, as follows:"
msgstr ""

#: ../../../LangRef.rst:10047
msgid "``false``: always yields ``false``, regardless of operands."
msgstr ""

#: ../../../LangRef.rst:10048
msgid ""
"``oeq``: yields ``true`` if both operands are not a QNAN and ``op1`` is "
"equal to ``op2``."
msgstr ""

#: ../../../LangRef.rst:10050
msgid ""
"``ogt``: yields ``true`` if both operands are not a QNAN and ``op1`` is "
"greater than ``op2``."
msgstr ""

#: ../../../LangRef.rst:10052
msgid ""
"``oge``: yields ``true`` if both operands are not a QNAN and ``op1`` is "
"greater than or equal to ``op2``."
msgstr ""

#: ../../../LangRef.rst:10054
msgid ""
"``olt``: yields ``true`` if both operands are not a QNAN and ``op1`` is less "
"than ``op2``."
msgstr ""

#: ../../../LangRef.rst:10056
msgid ""
"``ole``: yields ``true`` if both operands are not a QNAN and ``op1`` is less "
"than or equal to ``op2``."
msgstr ""

#: ../../../LangRef.rst:10058
msgid ""
"``one``: yields ``true`` if both operands are not a QNAN and ``op1`` is not "
"equal to ``op2``."
msgstr ""

#: ../../../LangRef.rst:10060
msgid "``ord``: yields ``true`` if both operands are not a QNAN."
msgstr ""

#: ../../../LangRef.rst:10061
msgid ""
"``ueq``: yields ``true`` if either operand is a QNAN or ``op1`` is equal to "
"``op2``."
msgstr ""

#: ../../../LangRef.rst:10063
msgid ""
"``ugt``: yields ``true`` if either operand is a QNAN or ``op1`` is greater "
"than ``op2``."
msgstr ""

#: ../../../LangRef.rst:10065
msgid ""
"``uge``: yields ``true`` if either operand is a QNAN or ``op1`` is greater "
"than or equal to ``op2``."
msgstr ""

#: ../../../LangRef.rst:10067
msgid ""
"``ult``: yields ``true`` if either operand is a QNAN or ``op1`` is less than "
"``op2``."
msgstr ""

#: ../../../LangRef.rst:10069
msgid ""
"``ule``: yields ``true`` if either operand is a QNAN or ``op1`` is less than "
"or equal to ``op2``."
msgstr ""

#: ../../../LangRef.rst:10071
msgid ""
"``une``: yields ``true`` if either operand is a QNAN or ``op1`` is not equal "
"to ``op2``."
msgstr ""

#: ../../../LangRef.rst:10073
msgid "``uno``: yields ``true`` if either operand is a QNAN."
msgstr ""

#: ../../../LangRef.rst:10074
msgid "``true``: always yields ``true``, regardless of operands."
msgstr ""

#: ../../../LangRef.rst:10076
msgid ""
"The ``fcmp`` instruction can also optionally take any number of :ref:`fast-"
"math flags <fastmath>`, which are optimization hints to enable otherwise "
"unsafe floating-point optimizations."
msgstr ""

#: ../../../LangRef.rst:10080
msgid ""
"Any set of fast-math flags are legal on an ``fcmp`` instruction, but the "
"only flags that have any effect on its semantics are those that allow "
"assumptions to be made about the values of input arguments; namely ``nnan``, "
"``ninf``, and ``reassoc``. See :ref:`fastmath` for more information."
msgstr ""

#: ../../../LangRef.rst:10098
msgid "'``phi``' Instruction"
msgstr ""

#: ../../../LangRef.rst:10110
msgid ""
"The '``phi``' instruction is used to implement the φ node in the SSA graph "
"representing the function."
msgstr ""

#: ../../../LangRef.rst:10116
msgid ""
"The type of the incoming values is specified with the first type field. "
"After this, the '``phi``' instruction takes a list of pairs as arguments, "
"with one pair for each predecessor basic block of the current block. Only "
"values of :ref:`first class <t_firstclass>` type may be used as the value "
"arguments to the PHI node. Only labels may be used as the label arguments."
msgstr ""

#: ../../../LangRef.rst:10123
msgid ""
"There must be no non-phi instructions between the start of a basic block and "
"the PHI instructions: i.e. PHI instructions must be first in a basic block."
msgstr ""

#: ../../../LangRef.rst:10127
msgid ""
"For the purposes of the SSA form, the use of each incoming value is deemed "
"to occur on the edge from the corresponding predecessor block to the current "
"block (but after any definition of an '``invoke``' instruction's return "
"value on the same edge)."
msgstr ""

#: ../../../LangRef.rst:10132
msgid ""
"The optional ``fast-math-flags`` marker indicates that the phi has one or "
"more :ref:`fast-math-flags <fastmath>`. These are optimization hints to "
"enable otherwise unsafe floating-point optimizations. Fast-math-flags are "
"only valid for phis that return a floating-point scalar or vector type, or "
"an array (nested to any depth) of floating-point scalar or vector types."
msgstr ""

#: ../../../LangRef.rst:10142
msgid ""
"At runtime, the '``phi``' instruction logically takes on the value specified "
"by the pair corresponding to the predecessor basic block that executed just "
"prior to the current block."
msgstr ""

#: ../../../LangRef.rst:10159
msgid "'``select``' Instruction"
msgstr ""

#: ../../../LangRef.rst:10173
msgid ""
"The '``select``' instruction is used to choose one value based on a "
"condition, without IR-level branching."
msgstr ""

#: ../../../LangRef.rst:10179
msgid ""
"The '``select``' instruction requires an 'i1' value or a vector of 'i1' "
"values indicating the condition, and two values of the same :ref:`first "
"class <t_firstclass>` type."
msgstr ""

#: ../../../LangRef.rst:10183
msgid ""
"The optional ``fast-math flags`` marker indicates that the select has one or "
"more :ref:`fast-math flags <fastmath>`. These are optimization hints to "
"enable otherwise unsafe floating-point optimizations. Fast-math flags are "
"only valid for selects that return a floating-point scalar or vector type, "
"or an array (nested to any depth) of floating-point scalar or vector types."
msgstr ""

#: ../../../LangRef.rst:10192
msgid ""
"If the condition is an i1 and it evaluates to 1, the instruction returns the "
"first value argument; otherwise, it returns the second value argument."
msgstr ""

#: ../../../LangRef.rst:10196
msgid ""
"If the condition is a vector of i1, then the value arguments must be vectors "
"of the same size, and the selection is done element by element."
msgstr ""

#: ../../../LangRef.rst:10199
msgid ""
"If the condition is an i1 and the value arguments are vectors of the same "
"size, then an entire vector is selected."
msgstr ""

#: ../../../LangRef.rst:10213
msgid "'``freeze``' Instruction"
msgstr ""

#: ../../../LangRef.rst:10225
msgid ""
"The '``freeze``' instruction is used to stop propagation of :ref:`undef "
"<undefvalues>` and :ref:`poison <poisonvalues>` values."
msgstr ""

#: ../../../LangRef.rst:10231
msgid "The '``freeze``' instruction takes a single argument."
msgstr ""

#: ../../../LangRef.rst:10236
msgid ""
"If the argument is ``undef`` or ``poison``, '``freeze``' returns an "
"arbitrary, but fixed, value of type '``ty``'. Otherwise, this instruction is "
"a no-op and returns the input argument. All uses of a value returned by the "
"same '``freeze``' instruction are guaranteed to always observe the same "
"value, while different '``freeze``' instructions may yield different values."
msgstr ""

#: ../../../LangRef.rst:10243
msgid ""
"While ``undef`` and ``poison`` pointers can be frozen, the result is a non-"
"dereferenceable pointer. See the :ref:`Pointer Aliasing Rules "
"<pointeraliasing>` section for more information."
msgstr ""

#: ../../../LangRef.rst:10280
msgid "'``call``' Instruction"
msgstr ""

#: ../../../LangRef.rst:10293
msgid "The '``call``' instruction represents a simple function call."
msgstr ""

#: ../../../LangRef.rst:10300
msgid ""
"The optional ``tail`` and ``musttail`` markers indicate that the optimizers "
"should perform tail call optimization. The ``tail`` marker is a hint that "
"`can be ignored <CodeGenerator.html#sibcallopt>`_. The ``musttail`` marker "
"means that the call must be tail call optimized in order for the program to "
"be correct. The ``musttail`` marker provides these guarantees:"
msgstr ""

#: ../../../LangRef.rst:10306
msgid ""
"The call will not cause unbounded stack growth if it is part of a recursive "
"cycle in the call graph."
msgstr ""

#: ../../../LangRef.rst:10308
msgid ""
"Arguments with the :ref:`inalloca <attr_inalloca>` attribute are forwarded "
"in place."
msgstr ""

#: ../../../LangRef.rst:10310
msgid ""
"If the musttail call appears in a function with the ``\"thunk\"`` attribute "
"and the caller and callee both have varargs, than any unprototyped arguments "
"in register or memory are forwarded to the callee. Similarly, the return "
"value of the callee is returned to the caller's caller, even if a void "
"return type is in use."
msgstr ""

#: ../../../LangRef.rst:10316
msgid ""
"Both markers imply that the callee does not access allocas from the caller. "
"The ``tail`` marker additionally implies that the callee does not access "
"varargs from the caller. Calls marked ``musttail`` must obey the following "
"additional  rules:"
msgstr ""

#: ../../../LangRef.rst:10321
msgid ""
"The call must immediately precede a :ref:`ret <i_ret>` instruction, or a "
"pointer bitcast followed by a ret instruction."
msgstr ""

#: ../../../LangRef.rst:10323
msgid ""
"The ret instruction must return the (possibly bitcasted) value produced by "
"the call or void."
msgstr ""

#: ../../../LangRef.rst:10325
msgid ""
"The caller and callee prototypes must match. Pointer types of parameters or "
"return types may differ in pointee type, but not in address space."
msgstr ""

#: ../../../LangRef.rst:10328
msgid "The calling conventions of the caller and callee must match."
msgstr ""

#: ../../../LangRef.rst:10329
msgid ""
"All ABI-impacting function attributes, such as sret, byval, inreg, returned, "
"and inalloca, must match."
msgstr ""

#: ../../../LangRef.rst:10331
msgid ""
"The callee must be varargs iff the caller is varargs. Bitcasting a non-"
"varargs function to the appropriate varargs type is legal so long as the non-"
"varargs prefixes obey the other rules."
msgstr ""

#: ../../../LangRef.rst:10335
msgid ""
"Tail call optimization for calls marked ``tail`` is guaranteed to occur if "
"the following conditions are met:"
msgstr ""

#: ../../../LangRef.rst:10338
msgid ""
"Caller and callee both have the calling convention ``fastcc`` or ``tailcc``."
msgstr ""

#: ../../../LangRef.rst:10339
msgid ""
"The call is in tail position (ret immediately follows call and ret uses "
"value of call or is void)."
msgstr ""

#: ../../../LangRef.rst:10341
msgid ""
"Option ``-tailcallopt`` is enabled, ``llvm::GuaranteedTailCallOpt`` is "
"``true``, or the calling convention is ``tailcc``"
msgstr ""

#: ../../../LangRef.rst:10344
msgid ""
"`Platform-specific constraints are met. <CodeGenerator.html#tailcallopt>`_"
msgstr ""

#: ../../../LangRef.rst:10347
msgid ""
"The optional ``notail`` marker indicates that the optimizers should not add "
"``tail`` or ``musttail`` markers to the call. It is used to prevent tail "
"call optimization from being performed on the call."
msgstr ""

#: ../../../LangRef.rst:10351
msgid ""
"The optional ``fast-math flags`` marker indicates that the call has one or "
"more :ref:`fast-math flags <fastmath>`, which are optimization hints to "
"enable otherwise unsafe floating-point optimizations. Fast-math flags are "
"only valid for calls that return a floating-point scalar or vector type, or "
"an array (nested to any depth) of floating-point scalar or vector types."
msgstr ""

#: ../../../LangRef.rst:10357
msgid ""
"The optional \"cconv\" marker indicates which :ref:`calling convention "
"<callingconv>` the call should use. If none is specified, the call defaults "
"to using C calling conventions. The calling convention of the call must "
"match the calling convention of the target function, or else the behavior is "
"undefined."
msgstr ""

#: ../../../LangRef.rst:10374
msgid ""
"'``fnptrval``': An LLVM value containing a pointer to a function to be "
"called. In most cases, this is a direct function call, but indirect "
"``call``'s are just as possible, calling an arbitrary pointer to function "
"value."
msgstr ""

#: ../../../LangRef.rst:10389
msgid ""
"The '``call``' instruction is used to cause control flow to transfer to a "
"specified function, with its incoming arguments bound to the specified "
"values. Upon a '``ret``' instruction in the called function, control flow "
"continues with the instruction after the function call, and the return value "
"of the function is bound to the result argument."
msgstr ""

#: ../../../LangRef.rst:10413
msgid ""
"llvm treats calls to some functions with names and arguments that match the "
"standard C99 library as being the C99 library functions, and may perform "
"optimizations or generate code for them under that assumption. This is "
"something we'd like to change in the future to provide better support for "
"freestanding environments and non-C-based languages."
msgstr ""

#: ../../../LangRef.rst:10422
msgid "'``va_arg``' Instruction"
msgstr ""

#: ../../../LangRef.rst:10434
msgid ""
"The '``va_arg``' instruction is used to access arguments passed through the "
"\"variable argument\" area of a function call. It is used to implement the "
"``va_arg`` macro in C."
msgstr ""

#: ../../../LangRef.rst:10441
msgid ""
"This instruction takes a ``va_list*`` value and the type of the argument. It "
"returns a value of the specified argument type and increments the "
"``va_list`` to point to the next argument. The actual type of ``va_list`` is "
"target specific."
msgstr ""

#: ../../../LangRef.rst:10449
msgid ""
"The '``va_arg``' instruction loads an argument of the specified type from "
"the specified ``va_list`` and causes the ``va_list`` to point to the next "
"argument. For more information, see the variable argument handling :ref:"
"`Intrinsic Functions <int_varargs>`."
msgstr ""

#: ../../../LangRef.rst:10454
msgid ""
"It is legal for this instruction to be called in a function which does not "
"take a variable number of arguments, for example, the ``vfprintf`` function."
msgstr ""

#: ../../../LangRef.rst:10458
msgid ""
"``va_arg`` is an LLVM instruction instead of an :ref:`intrinsic function "
"<intrinsics>` because it takes a type as an argument."
msgstr ""

#: ../../../LangRef.rst:10464
msgid "See the :ref:`variable argument processing <int_varargs>` section."
msgstr ""

#: ../../../LangRef.rst:10466
msgid ""
"Note that the code generator does not yet fully support va\\_arg on many "
"targets. Also, it does not currently support va\\_arg with aggregate types "
"on any target."
msgstr ""

#: ../../../LangRef.rst:10473
msgid "'``landingpad``' Instruction"
msgstr ""

#: ../../../LangRef.rst:10489
msgid ""
"The '``landingpad``' instruction is used by `LLVM's exception handling "
"system <ExceptionHandling.html#overview>`_ to specify that a basic block is "
"a landing pad --- one where the exception lands, and corresponds to the code "
"found in the ``catch`` portion of a ``try``/``catch`` sequence. It defines "
"values supplied by the :ref:`personality function <personalityfn>` upon re-"
"entry to the function. The ``resultval`` has the type ``resultty``."
msgstr ""

#: ../../../LangRef.rst:10499
msgid ""
"The optional ``cleanup`` flag indicates that the landing pad block is a "
"cleanup."
msgstr ""

#: ../../../LangRef.rst:10502
msgid ""
"A ``clause`` begins with the clause type --- ``catch`` or ``filter`` --- and "
"contains the global variable representing the \"type\" that may be caught or "
"filtered respectively. Unlike the ``catch`` clause, the ``filter`` clause "
"takes an array constant as its argument. Use \"``[0 x i8**] undef``\" for a "
"filter which cannot throw. The '``landingpad``' instruction must contain *at "
"least* one ``clause`` or the ``cleanup`` flag."
msgstr ""

#: ../../../LangRef.rst:10513
msgid ""
"The '``landingpad``' instruction defines the values which are set by the :"
"ref:`personality function <personalityfn>` upon re-entry to the function, "
"and therefore the \"result type\" of the ``landingpad`` instruction. As with "
"calling conventions, how the personality function results are represented in "
"LLVM IR is target specific."
msgstr ""

#: ../../../LangRef.rst:10519
msgid ""
"The clauses are applied in order from top to bottom. If two ``landingpad`` "
"instructions are merged together through inlining, the clauses from the "
"calling function are appended to the list of clauses. When the call stack is "
"being unwound due to an exception being thrown, the exception is compared "
"against each ``clause`` in turn. If it doesn't match any of the clauses, and "
"the ``cleanup`` flag is not set, then unwinding continues further up the "
"call stack."
msgstr ""

#: ../../../LangRef.rst:10527
msgid "The ``landingpad`` instruction has several restrictions:"
msgstr ""

#: ../../../LangRef.rst:10529
msgid ""
"A landing pad block is a basic block which is the unwind destination of an "
"'``invoke``' instruction."
msgstr ""

#: ../../../LangRef.rst:10531
msgid ""
"A landing pad block must have a '``landingpad``' instruction as its first "
"non-PHI instruction."
msgstr ""

#: ../../../LangRef.rst:10533
msgid ""
"There can be only one '``landingpad``' instruction within the landing pad "
"block."
msgstr ""

#: ../../../LangRef.rst:10535
msgid ""
"A basic block that is not a landing pad block may not include a "
"'``landingpad``' instruction."
msgstr ""

#: ../../../LangRef.rst:10557
msgid "'``catchpad``' Instruction"
msgstr ""

#: ../../../LangRef.rst:10569
msgid ""
"The '``catchpad``' instruction is used by `LLVM's exception handling system "
"<ExceptionHandling.html#overview>`_ to specify that a basic block begins a "
"catch handler --- one where a personality routine attempts to transfer "
"control to catch an exception."
msgstr ""

#: ../../../LangRef.rst:10577
msgid ""
"The ``catchswitch`` operand must always be a token produced by a :ref:"
"`catchswitch <i_catchswitch>` instruction in a predecessor block. This "
"ensures that each ``catchpad`` has exactly one predecessor block, and it "
"always terminates in a ``catchswitch``."
msgstr ""

#: ../../../LangRef.rst:10582
msgid ""
"The ``args`` correspond to whatever information the personality routine "
"requires to know if this is an appropriate handler for the exception. "
"Control will transfer to the ``catchpad`` if this is the first appropriate "
"handler for the exception."
msgstr ""

#: ../../../LangRef.rst:10587
msgid ""
"The ``resultval`` has the type :ref:`token <t_token>` and is used to match "
"the ``catchpad`` to corresponding :ref:`catchrets <i_catchret>` and other "
"nested EH pads."
msgstr ""

#: ../../../LangRef.rst:10594
msgid ""
"When the call stack is being unwound due to an exception being thrown, the "
"exception is compared against the ``args``. If it doesn't match, control "
"will not reach the ``catchpad`` instruction.  The representation of ``args`` "
"is entirely target and personality function-specific."
msgstr ""

#: ../../../LangRef.rst:10599
msgid ""
"Like the :ref:`landingpad <i_landingpad>` instruction, the ``catchpad`` "
"instruction must be the first non-phi of its parent basic block."
msgstr ""

#: ../../../LangRef.rst:10602
msgid ""
"The meaning of the tokens produced and consumed by ``catchpad`` and other "
"\"pad\" instructions is described in the `Windows exception handling "
"documentation\\ <ExceptionHandling.html#wineh>`_."
msgstr ""

#: ../../../LangRef.rst:10606
msgid ""
"When a ``catchpad`` has been \"entered\" but not yet \"exited\" (as "
"described in the `EH documentation\\ <ExceptionHandling.html#wineh-"
"constraints>`_), it is undefined behavior to execute a :ref:`call <i_call>` "
"or :ref:`invoke <i_invoke>` that does not carry an appropriate :ref:"
"`\"funclet\" bundle <ob_funclet>`."
msgstr ""

#: ../../../LangRef.rst:10625
msgid "'``cleanuppad``' Instruction"
msgstr ""

#: ../../../LangRef.rst:10637
msgid ""
"The '``cleanuppad``' instruction is used by `LLVM's exception handling "
"system <ExceptionHandling.html#overview>`_ to specify that a basic block is "
"a cleanup block --- one where a personality routine attempts to transfer "
"control to run cleanup actions. The ``args`` correspond to whatever "
"additional information the :ref:`personality function <personalityfn>` "
"requires to execute the cleanup. The ``resultval`` has the type :ref:`token "
"<t_token>` and is used to match the ``cleanuppad`` to corresponding :ref:"
"`cleanuprets <i_cleanupret>`. The ``parent`` argument is the token of the "
"funclet that contains the ``cleanuppad`` instruction. If the ``cleanuppad`` "
"is not inside a funclet, this operand may be the token ``none``."
msgstr ""

#: ../../../LangRef.rst:10653
msgid ""
"The instruction takes a list of arbitrary values which are interpreted by "
"the :ref:`personality function <personalityfn>`."
msgstr ""

#: ../../../LangRef.rst:10659
msgid ""
"When the call stack is being unwound due to an exception being thrown, the :"
"ref:`personality function <personalityfn>` transfers control to the "
"``cleanuppad`` with the aid of the personality-specific arguments. As with "
"calling conventions, how the personality function results are represented in "
"LLVM IR is target specific."
msgstr ""

#: ../../../LangRef.rst:10665
msgid "The ``cleanuppad`` instruction has several restrictions:"
msgstr ""

#: ../../../LangRef.rst:10667
msgid ""
"A cleanup block is a basic block which is the unwind destination of an "
"exceptional instruction."
msgstr ""

#: ../../../LangRef.rst:10669
msgid ""
"A cleanup block must have a '``cleanuppad``' instruction as its first non-"
"PHI instruction."
msgstr ""

#: ../../../LangRef.rst:10671
msgid ""
"There can be only one '``cleanuppad``' instruction within the cleanup block."
msgstr ""

#: ../../../LangRef.rst:10673
msgid ""
"A basic block that is not a cleanup block may not include a '``cleanuppad``' "
"instruction."
msgstr ""

#: ../../../LangRef.rst:10676
msgid ""
"When a ``cleanuppad`` has been \"entered\" but not yet \"exited\" (as "
"described in the `EH documentation\\ <ExceptionHandling.html#wineh-"
"constraints>`_), it is undefined behavior to execute a :ref:`call <i_call>` "
"or :ref:`invoke <i_invoke>` that does not carry an appropriate :ref:"
"`\"funclet\" bundle <ob_funclet>`."
msgstr ""

#: ../../../LangRef.rst:10691
msgid "Intrinsic Functions"
msgstr ""

#: ../../../LangRef.rst:10693
msgid ""
"LLVM supports the notion of an \"intrinsic function\". These functions have "
"well known names and semantics and are required to follow certain "
"restrictions. Overall, these intrinsics represent an extension mechanism for "
"the LLVM language that does not require changing all of the transformations "
"in LLVM when adding to the language (or the bitcode reader/writer, the "
"parser, etc...)."
msgstr ""

#: ../../../LangRef.rst:10700
msgid ""
"Intrinsic function names must all start with an \"``llvm.``\" prefix. This "
"prefix is reserved in LLVM for intrinsic names; thus, function names may not "
"begin with this prefix. Intrinsic functions must always be external "
"functions: you cannot define the body of intrinsic functions. Intrinsic "
"functions may only be used in call or invoke instructions: it is illegal to "
"take the address of an intrinsic function. Additionally, because intrinsic "
"functions are part of the LLVM language, it is required if any are added "
"that they be documented here."
msgstr ""

#: ../../../LangRef.rst:10709
msgid ""
"Some intrinsic functions can be overloaded, i.e., the intrinsic represents a "
"family of functions that perform the same operation but on different data "
"types. Because LLVM can represent over 8 million different integer types, "
"overloading is used commonly to allow an intrinsic function to operate on "
"any integer type. One or more of the argument types or the result type can "
"be overloaded to accept any integer type. Argument types may also be defined "
"as exactly matching a previous argument's type or the result type. This "
"allows an intrinsic function which accepts multiple arguments, but needs all "
"of them to be of the same type, to only be overloaded with respect to a "
"single argument or the result."
msgstr ""

#: ../../../LangRef.rst:10721
msgid ""
"Overloaded intrinsics will have the names of its overloaded argument types "
"encoded into its function name, each preceded by a period. Only those types "
"which are overloaded result in a name suffix. Arguments whose type is "
"matched against another type do not. For example, the ``llvm.ctpop`` "
"function can take an integer of any width and returns an integer of exactly "
"the same integer width. This leads to a family of functions such as ``i8 "
"@llvm.ctpop.i8(i8 %val)`` and ``i29 @llvm.ctpop.i29(i29 %val)``. Only one "
"type, the return type, is overloaded, and only one type suffix is required. "
"Because the argument's type is matched against the return type, it does not "
"require its own name suffix."
msgstr ""

#: ../../../LangRef.rst:10733
msgid ""
"For target developers who are defining intrinsics for back-end code "
"generation, any intrinsic overloads based solely the distinction between "
"integer or floating point types should not be relied upon for correct code "
"generation. In such cases, the recommended approach for target maintainers "
"when defining intrinsics is to create separate integer and FP intrinsics "
"rather than rely on overloading. For example, if different codegen is "
"required for ``llvm.target.foo(<4 x i32>)`` and ``llvm.target.foo(<4 x "
"float>)`` then these should be split into different intrinsics."
msgstr ""

#: ../../../LangRef.rst:10743
msgid ""
"To learn how to add an intrinsic function, please see the `Extending LLVM "
"Guide <ExtendingLLVM.html>`_."
msgstr ""

#: ../../../LangRef.rst:10749
msgid "Variable Argument Handling Intrinsics"
msgstr ""

#: ../../../LangRef.rst:10751
msgid ""
"Variable argument support is defined in LLVM with the :ref:`va_arg "
"<i_va_arg>` instruction and these three intrinsic functions. These functions "
"are related to the similarly named macros defined in the ``<stdarg.h>`` "
"header file."
msgstr ""

#: ../../../LangRef.rst:10756
msgid ""
"All of these functions operate on arguments that use a target-specific value "
"type \"``va_list``\". The LLVM assembly language reference manual does not "
"define what this type is, so all transformations should be prepared to "
"handle these functions regardless of the type used."
msgstr ""

#: ../../../LangRef.rst:10761
msgid ""
"This example shows how the :ref:`va_arg <i_va_arg>` instruction and the "
"variable argument handling intrinsic functions are used."
msgstr ""

#: ../../../LangRef.rst:10800
msgid "'``llvm.va_start``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:10812
msgid ""
"The '``llvm.va_start``' intrinsic initializes ``*<arglist>`` for subsequent "
"use by ``va_arg``."
msgstr ""

#: ../../../LangRef.rst:10818
msgid "The argument is a pointer to a ``va_list`` element to initialize."
msgstr ""

#: ../../../LangRef.rst:10823
msgid ""
"The '``llvm.va_start``' intrinsic works just like the ``va_start`` macro "
"available in C. In a target-dependent way, it initializes the ``va_list`` "
"element to which the argument points, so that the next call to ``va_arg`` "
"will produce the first variable argument passed to the function. Unlike the "
"C ``va_start`` macro, this intrinsic does not need to know the last argument "
"of the function as the compiler can figure that out."
msgstr ""

#: ../../../LangRef.rst:10832
msgid "'``llvm.va_end``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:10844
msgid ""
"The '``llvm.va_end``' intrinsic destroys ``*<arglist>``, which has been "
"initialized previously with ``llvm.va_start`` or ``llvm.va_copy``."
msgstr ""

#: ../../../LangRef.rst:10850
msgid "The argument is a pointer to a ``va_list`` to destroy."
msgstr ""

#: ../../../LangRef.rst:10855
msgid ""
"The '``llvm.va_end``' intrinsic works just like the ``va_end`` macro "
"available in C. In a target-dependent way, it destroys the ``va_list`` "
"element to which the argument points. Calls to :ref:`llvm.va_start "
"<int_va_start>` and :ref:`llvm.va_copy <int_va_copy>` must be matched "
"exactly with calls to ``llvm.va_end``."
msgstr ""

#: ../../../LangRef.rst:10865
msgid "'``llvm.va_copy``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:10877
msgid ""
"The '``llvm.va_copy``' intrinsic copies the current argument position from "
"the source argument list to the destination argument list."
msgstr ""

#: ../../../LangRef.rst:10883
msgid ""
"The first argument is a pointer to a ``va_list`` element to initialize. The "
"second argument is a pointer to a ``va_list`` element to copy from."
msgstr ""

#: ../../../LangRef.rst:10889
msgid ""
"The '``llvm.va_copy``' intrinsic works just like the ``va_copy`` macro "
"available in C. In a target-dependent way, it copies the source ``va_list`` "
"element into the destination ``va_list`` element. This intrinsic is "
"necessary because the `` llvm.va_start`` intrinsic may be arbitrarily "
"complex and require, for example, memory allocation."
msgstr ""

#: ../../../LangRef.rst:10896
msgid "Accurate Garbage Collection Intrinsics"
msgstr ""

#: ../../../LangRef.rst:10898
msgid ""
"LLVM's support for `Accurate Garbage Collection <GarbageCollection.html>`_ "
"(GC) requires the frontend to generate code containing appropriate intrinsic "
"calls and select an appropriate GC strategy which knows how to lower these "
"intrinsics in a manner which is appropriate for the target collector."
msgstr ""

#: ../../../LangRef.rst:10903
msgid ""
"These intrinsics allow identification of :ref:`GC roots on the stack "
"<int_gcroot>`, as well as garbage collector implementations that require :"
"ref:`read <int_gcread>` and :ref:`write <int_gcwrite>` barriers. Frontends "
"for type-safe garbage collected languages should generate these intrinsics "
"to make use of the LLVM garbage collectors. For more details, see `Garbage "
"Collection with LLVM <GarbageCollection.html>`_."
msgstr ""

#: ../../../LangRef.rst:10911
msgid "Experimental Statepoint Intrinsics"
msgstr ""

#: ../../../LangRef.rst:10913
msgid ""
"LLVM provides an second experimental set of intrinsics for describing "
"garbage collection safepoints in compiled code. These intrinsics are an "
"alternative to the ``llvm.gcroot`` intrinsics, but are compatible with the "
"ones for :ref:`read <int_gcread>` and :ref:`write <int_gcwrite>` barriers. "
"The differences in approach are covered in the `Garbage Collection with LLVM "
"<GarbageCollection.html>`_ documentation. The intrinsics themselves are "
"described in :doc:`Statepoints`."
msgstr ""

#: ../../../LangRef.rst:10924
msgid "'``llvm.gcroot``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:10936
msgid ""
"The '``llvm.gcroot``' intrinsic declares the existence of a GC root to the "
"code generator, and allows some metadata to be associated with it."
msgstr ""

#: ../../../LangRef.rst:10942
msgid ""
"The first argument specifies the address of a stack object that contains the "
"root pointer. The second pointer (which must be either a constant or a "
"global value address) contains the meta-data to be associated with the root."
msgstr ""

#: ../../../LangRef.rst:10950
msgid ""
"At runtime, a call to this intrinsic stores a null pointer into the "
"\"ptrloc\" location. At compile-time, the code generator generates "
"information to allow the runtime to find the pointer at GC safe points. The "
"'``llvm.gcroot``' intrinsic may only be used in a function which :ref:"
"`specifies a GC algorithm <gc>`."
msgstr ""

#: ../../../LangRef.rst:10959
msgid "'``llvm.gcread``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:10971
msgid ""
"The '``llvm.gcread``' intrinsic identifies reads of references from heap "
"locations, allowing garbage collector implementations that require read "
"barriers."
msgstr ""

#: ../../../LangRef.rst:10978
msgid ""
"The second argument is the address to read from, which should be an address "
"allocated from the garbage collector. The first object is a pointer to the "
"start of the referenced object, if needed by the language runtime (otherwise "
"null)."
msgstr ""

#: ../../../LangRef.rst:10986
msgid ""
"The '``llvm.gcread``' intrinsic has the same semantics as a load "
"instruction, but may be replaced with substantially more complex code by the "
"garbage collector runtime, as needed. The '``llvm.gcread``' intrinsic may "
"only be used in a function which :ref:`specifies a GC algorithm <gc>`."
msgstr ""

#: ../../../LangRef.rst:10995
msgid "'``llvm.gcwrite``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:11007
msgid ""
"The '``llvm.gcwrite``' intrinsic identifies writes of references to heap "
"locations, allowing garbage collector implementations that require write "
"barriers (such as generational or reference counting collectors)."
msgstr ""

#: ../../../LangRef.rst:11014
msgid ""
"The first argument is the reference to store, the second is the start of the "
"object to store it to, and the third is the address of the field of Obj to "
"store to. If the runtime does not require a pointer to the object, Obj may "
"be null."
msgstr ""

#: ../../../LangRef.rst:11022
msgid ""
"The '``llvm.gcwrite``' intrinsic has the same semantics as a store "
"instruction, but may be replaced with substantially more complex code by the "
"garbage collector runtime, as needed. The '``llvm.gcwrite``' intrinsic may "
"only be used in a function which :ref:`specifies a GC algorithm <gc>`."
msgstr ""

#: ../../../LangRef.rst:11029
msgid "Code Generator Intrinsics"
msgstr ""

#: ../../../LangRef.rst:11031
msgid ""
"These intrinsics are provided by LLVM to expose special features that may "
"only be implemented with code generator support."
msgstr ""

#: ../../../LangRef.rst:11035
msgid "'``llvm.returnaddress``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:11047
msgid ""
"The '``llvm.returnaddress``' intrinsic attempts to compute a target-specific "
"value indicating the return address of the current function or one of its "
"callers."
msgstr ""

#: ../../../LangRef.rst:11054
msgid ""
"The argument to this intrinsic indicates which function to return the "
"address for. Zero indicates the calling function, one indicates its caller, "
"etc. The argument is **required** to be a constant integer value."
msgstr ""

#: ../../../LangRef.rst:11062
msgid ""
"The '``llvm.returnaddress``' intrinsic either returns a pointer indicating "
"the return address of the specified call frame, or zero if it cannot be "
"identified. The value returned by this intrinsic is likely to be incorrect "
"or 0 for arguments other than zero, so it should only be used for debugging "
"purposes."
msgstr ""

#: ../../../LangRef.rst:11068 ../../../LangRef.rst:11092
#: ../../../LangRef.rst:11152
msgid ""
"Note that calling this intrinsic does not prevent function inlining or other "
"aggressive transformations, so the value returned may not be that of the "
"obvious source-language caller."
msgstr ""

#: ../../../LangRef.rst:11073
msgid "'``llvm.addressofreturnaddress``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:11085
msgid ""
"The '``llvm.addressofreturnaddress``' intrinsic returns a target-specific "
"pointer to the place in the stack frame where the return address of the "
"current function is stored."
msgstr ""

#: ../../../LangRef.rst:11096
msgid "This intrinsic is only implemented for x86 and aarch64."
msgstr ""

#: ../../../LangRef.rst:11099
msgid "'``llvm.sponentry``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:11111
msgid ""
"The '``llvm.sponentry``' intrinsic returns the stack pointer value at the "
"entry of the current function calling this intrinsic."
msgstr ""

#: ../../../LangRef.rst:11117
msgid "Note this intrinsic is only verified on AArch64."
msgstr ""

#: ../../../LangRef.rst:11120
msgid "'``llvm.frameaddress``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:11132
msgid ""
"The '``llvm.frameaddress``' intrinsic attempts to return the target-specific "
"frame pointer value for the specified stack frame."
msgstr ""

#: ../../../LangRef.rst:11138
msgid ""
"The argument to this intrinsic indicates which function to return the frame "
"pointer for. Zero indicates the calling function, one indicates its caller, "
"etc. The argument is **required** to be a constant integer value."
msgstr ""

#: ../../../LangRef.rst:11146
msgid ""
"The '``llvm.frameaddress``' intrinsic either returns a pointer indicating "
"the frame address of the specified call frame, or zero if it cannot be "
"identified. The value returned by this intrinsic is likely to be incorrect "
"or 0 for arguments other than zero, so it should only be used for debugging "
"purposes."
msgstr ""

#: ../../../LangRef.rst:11157
msgid "'``llvm.localescape``' and '``llvm.localrecover``' Intrinsics"
msgstr ""

#: ../../../LangRef.rst:11170
msgid ""
"The '``llvm.localescape``' intrinsic escapes offsets of a collection of "
"static allocas, and the '``llvm.localrecover``' intrinsic applies those "
"offsets to a live frame pointer to recover the address of the allocation. "
"The offset is computed during frame layout of the caller of ``llvm."
"localescape``."
msgstr ""

#: ../../../LangRef.rst:11178
msgid ""
"All arguments to '``llvm.localescape``' must be pointers to static allocas "
"or casts of static allocas. Each function can only call '``llvm."
"localescape``' once, and it can only do so from the entry block."
msgstr ""

#: ../../../LangRef.rst:11182
msgid ""
"The ``func`` argument to '``llvm.localrecover``' must be a constant "
"bitcasted pointer to a function defined in the current module. The code "
"generator cannot determine the frame allocation offset of functions defined "
"in other modules."
msgstr ""

#: ../../../LangRef.rst:11187
msgid ""
"The ``fp`` argument to '``llvm.localrecover``' must be a frame pointer of a "
"call frame that is currently live. The return value of '``llvm."
"localaddress``' is one way to produce such a value, but various runtimes "
"also expose a suitable pointer in platform-specific ways."
msgstr ""

#: ../../../LangRef.rst:11192
msgid ""
"The ``idx`` argument to '``llvm.localrecover``' indicates which alloca "
"passed to '``llvm.localescape``' to recover. It is zero-indexed."
msgstr ""

#: ../../../LangRef.rst:11198
msgid ""
"These intrinsics allow a group of functions to share access to a set of "
"local stack allocations of a one parent function. The parent function may "
"call the '``llvm.localescape``' intrinsic once from the function entry "
"block, and the child functions can use '``llvm.localrecover``' to access the "
"escaped allocas. The '``llvm.localescape``' intrinsic blocks inlining, as "
"inlining changes where the escaped allocas are allocated, which would break "
"attempts to use '``llvm.localrecover``'."
msgstr ""

#: ../../../LangRef.rst:11210
msgid "'``llvm.read_register``' and '``llvm.write_register``' Intrinsics"
msgstr ""

#: ../../../LangRef.rst:11226
msgid ""
"The '``llvm.read_register``' and '``llvm.write_register``' intrinsics "
"provides access to the named register. The register must be valid on the "
"architecture being compiled to. The type needs to be compatible with the "
"register being read."
msgstr ""

#: ../../../LangRef.rst:11234
msgid ""
"The '``llvm.read_register``' intrinsic returns the current value of the "
"register, where possible. The '``llvm.write_register``' intrinsic sets the "
"current value of the register, where possible."
msgstr ""

#: ../../../LangRef.rst:11238
msgid ""
"This is useful to implement named register global variables that need to "
"always be mapped to a specific register, as is common practice on bare-metal "
"programs including OS kernels."
msgstr ""

#: ../../../LangRef.rst:11242
msgid ""
"The compiler doesn't check for register availability or use of the used "
"register in surrounding code, including inline assembly. Because of that, "
"allocatable registers are not supported."
msgstr ""

#: ../../../LangRef.rst:11246
msgid ""
"Warning: So far it only works with the stack pointer on selected "
"architectures (ARM, AArch64, PowerPC and x86_64). Significant amount of work "
"is needed to support other registers and even more so, allocatable registers."
msgstr ""

#: ../../../LangRef.rst:11254
msgid "'``llvm.stacksave``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:11266
msgid ""
"The '``llvm.stacksave``' intrinsic is used to remember the current state of "
"the function stack, for use with :ref:`llvm.stackrestore "
"<int_stackrestore>`. This is useful for implementing language features like "
"scoped automatic variable sized arrays in C99."
msgstr ""

#: ../../../LangRef.rst:11275
msgid ""
"This intrinsic returns a opaque pointer value that can be passed to :ref:"
"`llvm.stackrestore <int_stackrestore>`. When an ``llvm.stackrestore`` "
"intrinsic is executed with a value saved from ``llvm.stacksave``, it "
"effectively restores the state of the stack to the state it was in when the "
"``llvm.stacksave`` intrinsic executed. In practice, this pops any :ref:"
"`alloca <i_alloca>` blocks from the stack that were allocated after the "
"``llvm.stacksave`` was executed."
msgstr ""

#: ../../../LangRef.rst:11286
msgid "'``llvm.stackrestore``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:11298
msgid ""
"The '``llvm.stackrestore``' intrinsic is used to restore the state of the "
"function stack to the state it was in when the corresponding :ref:`llvm."
"stacksave <int_stacksave>` intrinsic executed. This is useful for "
"implementing language features like scoped automatic variable sized arrays "
"in C99."
msgstr ""

#: ../../../LangRef.rst:11307
msgid "See the description for :ref:`llvm.stacksave <int_stacksave>`."
msgstr ""

#: ../../../LangRef.rst:11312
msgid "'``llvm.get.dynamic.area.offset``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:11325
msgid ""
"The '``llvm.get.dynamic.area.offset.*``' intrinsic family is used to get the "
"offset from native stack pointer to the address of the most recent dynamic "
"alloca on the caller's stack. These intrinsics are intendend for use in "
"combination with :ref:`llvm.stacksave <int_stacksave>` to get a pointer to "
"the most recent dynamic alloca. This is useful, for example, for "
"AddressSanitizer's stack unpoisoning routines."
msgstr ""

#: ../../../LangRef.rst:11336
msgid ""
"These intrinsics return a non-negative integer value that can be used to get "
"the address of the most recent dynamic alloca, allocated by :ref:`alloca "
"<i_alloca>` on the caller's stack. In particular, for targets where stack "
"grows downwards, adding this offset to the native stack pointer would get "
"the address of the most recent dynamic alloca. For targets where stack grows "
"upwards, the situation is a bit more complicated, because subtracting this "
"value from stack pointer would get the address one past the end of the most "
"recent dynamic alloca."
msgstr ""

#: ../../../LangRef.rst:11344
msgid ""
"Although for most targets `llvm.get.dynamic.area.offset "
"<int_get_dynamic_area_offset>` returns just a zero, for others, such as "
"PowerPC and PowerPC64, it returns a compile-time-known constant value."
msgstr ""

#: ../../../LangRef.rst:11348
msgid ""
"The return value type of :ref:`llvm.get.dynamic.area.offset "
"<int_get_dynamic_area_offset>` must match the target's default address "
"space's (address space 0) pointer type."
msgstr ""

#: ../../../LangRef.rst:11352
msgid "'``llvm.prefetch``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:11364
msgid ""
"The '``llvm.prefetch``' intrinsic is a hint to the code generator to insert "
"a prefetch instruction if supported; otherwise, it is a noop. Prefetches "
"have no effect on the behavior of the program but can change its performance "
"characteristics."
msgstr ""

#: ../../../LangRef.rst:11372
msgid ""
"``address`` is the address to be prefetched, ``rw`` is the specifier "
"determining if the fetch should be for a read (0) or write (1), and "
"``locality`` is a temporal locality specifier ranging from (0) - no "
"locality, to (3) - extremely local keep in cache. The ``cache type`` "
"specifies whether the prefetch is performed on the data (1) or instruction "
"(0) cache. The ``rw``, ``locality`` and ``cache type`` arguments must be "
"constant integers."
msgstr ""

#: ../../../LangRef.rst:11383
msgid ""
"This intrinsic does not modify the behavior of the program. In particular, "
"prefetches cannot trap and do not produce a value. On targets that support "
"this intrinsic, the prefetch can provide hints to the processor cache for "
"better performance."
msgstr ""

#: ../../../LangRef.rst:11389
msgid "'``llvm.pcmarker``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:11401
msgid ""
"The '``llvm.pcmarker``' intrinsic is a method to export a Program Counter "
"(PC) in a region of code to simulators and other tools. The method is target "
"specific, but it is expected that the marker will use exported symbols to "
"transmit the PC of the marker. The marker makes no guarantees that it will "
"remain with any specific instruction after optimizations. It is possible "
"that the presence of a marker will inhibit optimizations. The intended use "
"is to be inserted after optimizations to allow correlations of simulation "
"runs."
msgstr ""

#: ../../../LangRef.rst:11413
msgid "``id`` is a numerical id identifying the marker."
msgstr ""

#: ../../../LangRef.rst:11418
msgid ""
"This intrinsic does not modify the behavior of the program. Backends that do "
"not support this intrinsic may ignore it."
msgstr ""

#: ../../../LangRef.rst:11422
msgid "'``llvm.readcyclecounter``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:11434
msgid ""
"The '``llvm.readcyclecounter``' intrinsic provides access to the cycle "
"counter register (or similar low latency, high accuracy clocks) on those "
"targets that support it. On X86, it should map to RDTSC. On Alpha, it should "
"map to RPCC. As the backing counters overflow quickly (on the order of 9 "
"seconds on alpha), this should only be used for small timings."
msgstr ""

#: ../../../LangRef.rst:11444
msgid ""
"When directly supported, reading the cycle counter should not modify any "
"memory. Implementations are allowed to either return a application specific "
"value or a system wide value. On backends without support, this is lowered "
"to a constant 0."
msgstr ""

#: ../../../LangRef.rst:11449
msgid ""
"Note that runtime support may be conditional on the privilege-level code is "
"running at and the host platform."
msgstr ""

#: ../../../LangRef.rst:11453
msgid "'``llvm.clear_cache``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:11465
msgid ""
"The '``llvm.clear_cache``' intrinsic ensures visibility of modifications in "
"the specified range to the execution unit of the processor. On targets with "
"non-unified instruction and data cache, the implementation flushes the "
"instruction cache."
msgstr ""

#: ../../../LangRef.rst:11473
msgid ""
"On platforms with coherent instruction and data caches (e.g. x86), this "
"intrinsic is a nop. On platforms with non-coherent instruction and data "
"cache (e.g. ARM, MIPS), the intrinsic is lowered either to appropriate "
"instructions or a system call, if cache flushing requires special privileges."
msgstr ""

#: ../../../LangRef.rst:11479
msgid ""
"The default behavior is to emit a call to ``__clear_cache`` from the run "
"time library."
msgstr ""

#: ../../../LangRef.rst:11482
msgid ""
"This intrinsic does *not* empty the instruction pipeline. Modifications of "
"the current function are outside the scope of the intrinsic."
msgstr ""

#: ../../../LangRef.rst:11486
msgid "'``llvm.instrprof.increment``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:11499
msgid ""
"The '``llvm.instrprof.increment``' intrinsic can be emitted by a frontend "
"for use with instrumentation based profiling. These will be lowered by the "
"``-instrprof`` pass to generate execution counts of a program at runtime."
msgstr ""

#: ../../../LangRef.rst:11507
msgid ""
"The first argument is a pointer to a global variable containing the name of "
"the entity being instrumented. This should generally be the (mangled) "
"function name for a set of counters."
msgstr ""

#: ../../../LangRef.rst:11511
msgid ""
"The second argument is a hash value that can be used by the consumer of the "
"profile data to detect changes to the instrumented source, and the third is "
"the number of counters associated with ``name``. It is an error if ``hash`` "
"or ``num-counters`` differ between two instances of ``instrprof.increment`` "
"that refer to the same name."
msgstr ""

#: ../../../LangRef.rst:11517
msgid ""
"The last argument refers to which of the counters for ``name`` should be "
"incremented. It should be a value between 0 and ``num-counters``."
msgstr ""

#: ../../../LangRef.rst:11523
msgid ""
"This intrinsic represents an increment of a profiling counter. It will cause "
"the ``-instrprof`` pass to generate the appropriate data structures and the "
"code to increment the appropriate value, in a format that can be written out "
"by a compiler runtime and consumed via the ``llvm-profdata`` tool."
msgstr ""

#: ../../../LangRef.rst:11530
msgid "'``llvm.instrprof.increment.step``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:11544
msgid ""
"The '``llvm.instrprof.increment.step``' intrinsic is an extension to the "
"'``llvm.instrprof.increment``' intrinsic with an additional fifth argument "
"to specify the step of the increment."
msgstr ""

#: ../../../LangRef.rst:11550
msgid ""
"The first four arguments are the same as '``llvm.instrprof.increment``' "
"intrinsic."
msgstr ""

#: ../../../LangRef.rst:11553
msgid ""
"The last argument specifies the value of the increment of the counter "
"variable."
msgstr ""

#: ../../../LangRef.rst:11557
msgid "See description of '``llvm.instrprof.increment``' intrinsic."
msgstr ""

#: ../../../LangRef.rst:11561
msgid "'``llvm.instrprof.value.profile``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:11575
msgid ""
"The '``llvm.instrprof.value.profile``' intrinsic can be emitted by a "
"frontend for use with instrumentation based profiling. This will be lowered "
"by the ``-instrprof`` pass to find out the target values, instrumented "
"expressions take in a program at runtime."
msgstr ""

#: ../../../LangRef.rst:11583
msgid ""
"The first argument is a pointer to a global variable containing the name of "
"the entity being instrumented. ``name`` should generally be the (mangled) "
"function name for a set of counters."
msgstr ""

#: ../../../LangRef.rst:11587
msgid ""
"The second argument is a hash value that can be used by the consumer of the "
"profile data to detect changes to the instrumented source. It is an error if "
"``hash`` differs between two instances of ``llvm.instrprof.*`` that refer to "
"the same name."
msgstr ""

#: ../../../LangRef.rst:11592
msgid ""
"The third argument is the value of the expression being profiled. The "
"profiled expression's value should be representable as an unsigned 64-bit "
"value. The fourth argument represents the kind of value profiling that is "
"being done. The supported value profiling kinds are enumerated through the "
"``InstrProfValueKind`` type declared in the ``<include/llvm/ProfileData/"
"InstrProf.h>`` header file. The last argument is the index of the "
"instrumented expression within ``name``. It should be >= 0."
msgstr ""

#: ../../../LangRef.rst:11603
msgid ""
"This intrinsic represents the point where a call to a runtime routine should "
"be inserted for value profiling of target expressions. ``-instrprof`` pass "
"will generate the appropriate data structures and replace the ``llvm."
"instrprof.value.profile`` intrinsic with the call to the profile runtime "
"library with proper arguments."
msgstr ""

#: ../../../LangRef.rst:11610
msgid "'``llvm.thread.pointer``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:11622
msgid ""
"The '``llvm.thread.pointer``' intrinsic returns the value of the thread "
"pointer."
msgstr ""

#: ../../../LangRef.rst:11628
msgid ""
"The '``llvm.thread.pointer``' intrinsic returns a pointer to the TLS area "
"for the current thread.  The exact semantics of this value are target "
"specific: it may point to the start of TLS area, to the end, or somewhere in "
"the middle.  Depending on the target, this intrinsic may read a register, "
"call a helper function, read from an alternate memory space, or perform "
"other operations necessary to locate the TLS area.  Not all targets support "
"this intrinsic."
msgstr ""

#: ../../../LangRef.rst:11637
msgid "Standard C Library Intrinsics"
msgstr ""

#: ../../../LangRef.rst:11639
msgid ""
"LLVM provides intrinsics for a few important standard C library functions. "
"These intrinsics allow source-language front-ends to pass information about "
"the alignment of the pointer arguments to the code generator, providing "
"opportunity for more efficient code generation."
msgstr ""

#: ../../../LangRef.rst:11647
msgid "'``llvm.memcpy``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:11652
msgid ""
"This is an overloaded intrinsic. You can use ``llvm.memcpy`` on any integer "
"bit width and for different address spaces. Not all targets support all bit "
"widths however."
msgstr ""

#: ../../../LangRef.rst:11666
msgid ""
"The '``llvm.memcpy.*``' intrinsics copy a block of memory from the source "
"location to the destination location."
msgstr ""

#: ../../../LangRef.rst:11669
msgid ""
"Note that, unlike the standard libc function, the ``llvm.memcpy.*`` "
"intrinsics do not return a value, takes extra isvolatile arguments and the "
"pointers can be in specified address spaces."
msgstr ""

#: ../../../LangRef.rst:11676 ../../../LangRef.rst:11734
msgid ""
"The first argument is a pointer to the destination, the second is a pointer "
"to the source. The third argument is an integer argument specifying the "
"number of bytes to copy, and the fourth is a boolean indicating a volatile "
"access."
msgstr ""

#: ../../../LangRef.rst:11681 ../../../LangRef.rst:11739
msgid ""
"The :ref:`align <attr_align>` parameter attribute can be provided for the "
"first and second arguments."
msgstr ""

#: ../../../LangRef.rst:11684
msgid ""
"If the ``isvolatile`` parameter is ``true``, the ``llvm.memcpy`` call is a :"
"ref:`volatile operation <volatile>`. The detailed access behavior is not "
"very cleanly specified and it is unwise to depend on it."
msgstr ""

#: ../../../LangRef.rst:11691
msgid ""
"The '``llvm.memcpy.*``' intrinsics copy a block of memory from the source "
"location to the destination location, which are not allowed to overlap. It "
"copies \"len\" bytes of memory over. If the argument is known to be aligned "
"to some boundary, this can be specified as an attribute on the argument."
msgstr ""

#: ../../../LangRef.rst:11697 ../../../LangRef.rst:11755
#: ../../../LangRef.rst:11810
msgid ""
"If \"len\" is 0, the pointers may be NULL or dangling. However, they must "
"still be appropriately aligned."
msgstr ""

#: ../../../LangRef.rst:11703
msgid "'``llvm.memmove``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:11708
msgid ""
"This is an overloaded intrinsic. You can use llvm.memmove on any integer bit "
"width and for different address space. Not all targets support all bit "
"widths however."
msgstr ""

#: ../../../LangRef.rst:11722
msgid ""
"The '``llvm.memmove.*``' intrinsics move a block of memory from the source "
"location to the destination location. It is similar to the '``llvm.memcpy``' "
"intrinsic but allows the two memory locations to overlap."
msgstr ""

#: ../../../LangRef.rst:11727
msgid ""
"Note that, unlike the standard libc function, the ``llvm.memmove.*`` "
"intrinsics do not return a value, takes an extra isvolatile argument and the "
"pointers can be in specified address spaces."
msgstr ""

#: ../../../LangRef.rst:11742
msgid ""
"If the ``isvolatile`` parameter is ``true``, the ``llvm.memmove`` call is a :"
"ref:`volatile operation <volatile>`. The detailed access behavior is not "
"very cleanly specified and it is unwise to depend on it."
msgstr ""

#: ../../../LangRef.rst:11749
msgid ""
"The '``llvm.memmove.*``' intrinsics copy a block of memory from the source "
"location to the destination location, which may overlap. It copies \"len\" "
"bytes of memory over. If the argument is known to be aligned to some "
"boundary, this can be specified as an attribute on the argument."
msgstr ""

#: ../../../LangRef.rst:11761
msgid "'``llvm.memset.*``' Intrinsics"
msgstr ""

#: ../../../LangRef.rst:11766
msgid ""
"This is an overloaded intrinsic. You can use llvm.memset on any integer bit "
"width and for different address spaces. However, not all targets support all "
"bit widths."
msgstr ""

#: ../../../LangRef.rst:11780
msgid ""
"The '``llvm.memset.*``' intrinsics fill a block of memory with a particular "
"byte value."
msgstr ""

#: ../../../LangRef.rst:11783
msgid ""
"Note that, unlike the standard libc function, the ``llvm.memset`` intrinsic "
"does not return a value and takes an extra volatile argument. Also, the "
"destination can be in an arbitrary address space."
msgstr ""

#: ../../../LangRef.rst:11790
msgid ""
"The first argument is a pointer to the destination to fill, the second is "
"the byte value with which to fill it, the third argument is an integer "
"argument specifying the number of bytes to fill, and the fourth is a boolean "
"indicating a volatile access."
msgstr ""

#: ../../../LangRef.rst:11795
msgid ""
"The :ref:`align <attr_align>` parameter attribute can be provided for the "
"first arguments."
msgstr ""

#: ../../../LangRef.rst:11798
msgid ""
"If the ``isvolatile`` parameter is ``true``, the ``llvm.memset`` call is a :"
"ref:`volatile operation <volatile>`. The detailed access behavior is not "
"very cleanly specified and it is unwise to depend on it."
msgstr ""

#: ../../../LangRef.rst:11805
msgid ""
"The '``llvm.memset.*``' intrinsics fill \"len\" bytes of memory starting at "
"the destination location. If the argument is known to be aligned to some "
"boundary, this can be specified as an attribute on the argument."
msgstr ""

#: ../../../LangRef.rst:11814
msgid "'``llvm.sqrt.*``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:11819
msgid ""
"This is an overloaded intrinsic. You can use ``llvm.sqrt`` on any floating-"
"point or vector of floating-point type. Not all targets support all types "
"however."
msgstr ""

#: ../../../LangRef.rst:11834
msgid ""
"The '``llvm.sqrt``' intrinsics return the square root of the specified value."
msgstr ""

#: ../../../LangRef.rst:11839 ../../../LangRef.rst:11915
#: ../../../LangRef.rst:11952 ../../../LangRef.rst:12028
#: ../../../LangRef.rst:12066 ../../../LangRef.rst:12104
#: ../../../LangRef.rst:12142 ../../../LangRef.rst:12180
#: ../../../LangRef.rst:12257 ../../../LangRef.rst:12504
#: ../../../LangRef.rst:12539 ../../../LangRef.rst:12575
#: ../../../LangRef.rst:12612 ../../../LangRef.rst:12648
#: ../../../LangRef.rst:12684
msgid ""
"The argument and return value are floating-point numbers of the same type."
msgstr ""

#: ../../../LangRef.rst:11844
msgid ""
"Return the same value as a corresponding libm '``sqrt``' function but "
"without trapping or setting ``errno``. For types specified by IEEE-754, the "
"result matches a conforming libm implementation."
msgstr ""

#: ../../../LangRef.rst:11848 ../../../LangRef.rst:11923
#: ../../../LangRef.rst:11960 ../../../LangRef.rst:11998
#: ../../../LangRef.rst:12036 ../../../LangRef.rst:12074
#: ../../../LangRef.rst:12112 ../../../LangRef.rst:12150
#: ../../../LangRef.rst:12188 ../../../LangRef.rst:12227
msgid ""
"When specified with the fast-math-flag 'afn', the result may be approximated "
"using a less accurate calculation."
msgstr ""

#: ../../../LangRef.rst:11852
msgid "'``llvm.powi.*``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:11857
msgid ""
"This is an overloaded intrinsic. You can use ``llvm.powi`` on any floating-"
"point or vector of floating-point type. Not all targets support all types "
"however."
msgstr ""

#: ../../../LangRef.rst:11872
msgid ""
"The '``llvm.powi.*``' intrinsics return the first operand raised to the "
"specified (positive or negative) power. The order of evaluation of "
"multiplications is not defined. When a vector of floating-point type is "
"used, the second argument remains a scalar integer value."
msgstr ""

#: ../../../LangRef.rst:11880
msgid ""
"The second argument is an integer power, and the first is a value to raise "
"to that power."
msgstr ""

#: ../../../LangRef.rst:11886 ../../../LangRef.rst:16192
msgid ""
"This function returns the first value raised to the second power with an "
"unspecified sequence of rounding operations."
msgstr ""

#: ../../../LangRef.rst:11890
msgid "'``llvm.sin.*``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:11895
msgid ""
"This is an overloaded intrinsic. You can use ``llvm.sin`` on any floating-"
"point or vector of floating-point type. Not all targets support all types "
"however."
msgstr ""

#: ../../../LangRef.rst:11910
msgid "The '``llvm.sin.*``' intrinsics return the sine of the operand."
msgstr ""

#: ../../../LangRef.rst:11920
msgid ""
"Return the same value as a corresponding libm '``sin``' function but without "
"trapping or setting ``errno``."
msgstr ""

#: ../../../LangRef.rst:11927
msgid "'``llvm.cos.*``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:11932
msgid ""
"This is an overloaded intrinsic. You can use ``llvm.cos`` on any floating-"
"point or vector of floating-point type. Not all targets support all types "
"however."
msgstr ""

#: ../../../LangRef.rst:11947
msgid "The '``llvm.cos.*``' intrinsics return the cosine of the operand."
msgstr ""

#: ../../../LangRef.rst:11957
msgid ""
"Return the same value as a corresponding libm '``cos``' function but without "
"trapping or setting ``errno``."
msgstr ""

#: ../../../LangRef.rst:11964
msgid "'``llvm.pow.*``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:11969
msgid ""
"This is an overloaded intrinsic. You can use ``llvm.pow`` on any floating-"
"point or vector of floating-point type. Not all targets support all types "
"however."
msgstr ""

#: ../../../LangRef.rst:11984
msgid ""
"The '``llvm.pow.*``' intrinsics return the first operand raised to the "
"specified (positive or negative) power."
msgstr ""

#: ../../../LangRef.rst:11990 ../../../LangRef.rst:12219
#: ../../../LangRef.rst:12294 ../../../LangRef.rst:12345
#: ../../../LangRef.rst:12394 ../../../LangRef.rst:12432
#: ../../../LangRef.rst:12469
msgid ""
"The arguments and return value are floating-point numbers of the same type."
msgstr ""

#: ../../../LangRef.rst:11995
msgid ""
"Return the same value as a corresponding libm '``pow``' function but without "
"trapping or setting ``errno``."
msgstr ""

#: ../../../LangRef.rst:12002
msgid "'``llvm.exp.*``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:12007
msgid ""
"This is an overloaded intrinsic. You can use ``llvm.exp`` on any floating-"
"point or vector of floating-point type. Not all targets support all types "
"however."
msgstr ""

#: ../../../LangRef.rst:12022
msgid ""
"The '``llvm.exp.*``' intrinsics compute the base-e exponential of the "
"specified value."
msgstr ""

#: ../../../LangRef.rst:12033
msgid ""
"Return the same value as a corresponding libm '``exp``' function but without "
"trapping or setting ``errno``."
msgstr ""

#: ../../../LangRef.rst:12040
msgid "'``llvm.exp2.*``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:12045
msgid ""
"This is an overloaded intrinsic. You can use ``llvm.exp2`` on any floating-"
"point or vector of floating-point type. Not all targets support all types "
"however."
msgstr ""

#: ../../../LangRef.rst:12060
msgid ""
"The '``llvm.exp2.*``' intrinsics compute the base-2 exponential of the "
"specified value."
msgstr ""

#: ../../../LangRef.rst:12071
msgid ""
"Return the same value as a corresponding libm '``exp2``' function but "
"without trapping or setting ``errno``."
msgstr ""

#: ../../../LangRef.rst:12078
msgid "'``llvm.log.*``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:12083
msgid ""
"This is an overloaded intrinsic. You can use ``llvm.log`` on any floating-"
"point or vector of floating-point type. Not all targets support all types "
"however."
msgstr ""

#: ../../../LangRef.rst:12098
msgid ""
"The '``llvm.log.*``' intrinsics compute the base-e logarithm of the "
"specified value."
msgstr ""

#: ../../../LangRef.rst:12109
msgid ""
"Return the same value as a corresponding libm '``log``' function but without "
"trapping or setting ``errno``."
msgstr ""

#: ../../../LangRef.rst:12116
msgid "'``llvm.log10.*``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:12121
msgid ""
"This is an overloaded intrinsic. You can use ``llvm.log10`` on any floating-"
"point or vector of floating-point type. Not all targets support all types "
"however."
msgstr ""

#: ../../../LangRef.rst:12136
msgid ""
"The '``llvm.log10.*``' intrinsics compute the base-10 logarithm of the "
"specified value."
msgstr ""

#: ../../../LangRef.rst:12147
msgid ""
"Return the same value as a corresponding libm '``log10``' function but "
"without trapping or setting ``errno``."
msgstr ""

#: ../../../LangRef.rst:12154
msgid "'``llvm.log2.*``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:12159
msgid ""
"This is an overloaded intrinsic. You can use ``llvm.log2`` on any floating-"
"point or vector of floating-point type. Not all targets support all types "
"however."
msgstr ""

#: ../../../LangRef.rst:12174
msgid ""
"The '``llvm.log2.*``' intrinsics compute the base-2 logarithm of the "
"specified value."
msgstr ""

#: ../../../LangRef.rst:12185
msgid ""
"Return the same value as a corresponding libm '``log2``' function but "
"without trapping or setting ``errno``."
msgstr ""

#: ../../../LangRef.rst:12194
msgid "'``llvm.fma.*``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:12199
msgid ""
"This is an overloaded intrinsic. You can use ``llvm.fma`` on any floating-"
"point or vector of floating-point type. Not all targets support all types "
"however."
msgstr ""

#: ../../../LangRef.rst:12214
msgid ""
"The '``llvm.fma.*``' intrinsics perform the fused multiply-add operation."
msgstr ""

#: ../../../LangRef.rst:12224
msgid ""
"Return the same value as a corresponding libm '``fma``' function but without "
"trapping or setting ``errno``."
msgstr ""

#: ../../../LangRef.rst:12231
msgid "'``llvm.fabs.*``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:12236
msgid ""
"This is an overloaded intrinsic. You can use ``llvm.fabs`` on any floating-"
"point or vector of floating-point type. Not all targets support all types "
"however."
msgstr ""

#: ../../../LangRef.rst:12251
msgid ""
"The '``llvm.fabs.*``' intrinsics return the absolute value of the operand."
msgstr ""

#: ../../../LangRef.rst:12263
msgid ""
"This function returns the same values as the libm ``fabs`` functions would, "
"and handles error conditions in the same way."
msgstr ""

#: ../../../LangRef.rst:12267
msgid "'``llvm.minnum.*``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:12272
msgid ""
"This is an overloaded intrinsic. You can use ``llvm.minnum`` on any floating-"
"point or vector of floating-point type. Not all targets support all types "
"however."
msgstr ""

#: ../../../LangRef.rst:12287
msgid ""
"The '``llvm.minnum.*``' intrinsics return the minimum of the two arguments."
msgstr ""

#: ../../../LangRef.rst:12300
msgid ""
"Follows the IEEE-754 semantics for minNum, except for handling of signaling "
"NaNs. This match's the behavior of libm's fmin."
msgstr ""

#: ../../../LangRef.rst:12303
msgid ""
"If either operand is a NaN, returns the other non-NaN operand. Returns NaN "
"only if both operands are NaN. The returned NaN is always quiet. If the "
"operands compare equal, returns a value that compares equal to both "
"operands. This means that fmin(+/-0.0, +/-0.0) could return either -0.0 or "
"0.0."
msgstr ""

#: ../../../LangRef.rst:12309 ../../../LangRef.rst:12359
msgid ""
"Unlike the IEEE-754 2008 behavior, this does not distinguish between "
"signaling and quiet NaN inputs. If a target's implementation follows the "
"standard and returns a quiet NaN if either input is a signaling NaN, the "
"intrinsic lowering is responsible for quieting the inputs to correctly "
"return the non-NaN input (e.g. by using the equivalent of ``llvm."
"canonicalize``)."
msgstr ""

#: ../../../LangRef.rst:12318
msgid "'``llvm.maxnum.*``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:12323
msgid ""
"This is an overloaded intrinsic. You can use ``llvm.maxnum`` on any floating-"
"point or vector of floating-point type. Not all targets support all types "
"however."
msgstr ""

#: ../../../LangRef.rst:12338
msgid ""
"The '``llvm.maxnum.*``' intrinsics return the maximum of the two arguments."
msgstr ""

#: ../../../LangRef.rst:12350
msgid ""
"Follows the IEEE-754 semantics for maxNum except for the handling of "
"signaling NaNs. This matches the behavior of libm's fmax."
msgstr ""

#: ../../../LangRef.rst:12353
msgid ""
"If either operand is a NaN, returns the other non-NaN operand. Returns NaN "
"only if both operands are NaN. The returned NaN is always quiet. If the "
"operands compare equal, returns a value that compares equal to both "
"operands. This means that fmax(+/-0.0, +/-0.0) could return either -0.0 or "
"0.0."
msgstr ""

#: ../../../LangRef.rst:12367
msgid "'``llvm.minimum.*``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:12372
msgid ""
"This is an overloaded intrinsic. You can use ``llvm.minimum`` on any "
"floating-point or vector of floating-point type. Not all targets support all "
"types however."
msgstr ""

#: ../../../LangRef.rst:12387
msgid ""
"The '``llvm.minimum.*``' intrinsics return the minimum of the two arguments, "
"propagating NaNs and treating -0.0 as less than +0.0."
msgstr ""

#: ../../../LangRef.rst:12399
msgid ""
"If either operand is a NaN, returns NaN. Otherwise returns the lesser of the "
"two arguments. -0.0 is considered to be less than +0.0 for this intrinsic. "
"Note that these are the semantics specified in the draft of IEEE 754-2018."
msgstr ""

#: ../../../LangRef.rst:12405
msgid "'``llvm.maximum.*``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:12410
msgid ""
"This is an overloaded intrinsic. You can use ``llvm.maximum`` on any "
"floating-point or vector of floating-point type. Not all targets support all "
"types however."
msgstr ""

#: ../../../LangRef.rst:12425
msgid ""
"The '``llvm.maximum.*``' intrinsics return the maximum of the two arguments, "
"propagating NaNs and treating -0.0 as less than +0.0."
msgstr ""

#: ../../../LangRef.rst:12437
msgid ""
"If either operand is a NaN, returns NaN. Otherwise returns the greater of "
"the two arguments. -0.0 is considered to be less than +0.0 for this "
"intrinsic. Note that these are the semantics specified in the draft of IEEE "
"754-2018."
msgstr ""

#: ../../../LangRef.rst:12443
msgid "'``llvm.copysign.*``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:12448
msgid ""
"This is an overloaded intrinsic. You can use ``llvm.copysign`` on any "
"floating-point or vector of floating-point type. Not all targets support all "
"types however."
msgstr ""

#: ../../../LangRef.rst:12463
msgid ""
"The '``llvm.copysign.*``' intrinsics return a value with the magnitude of "
"the first operand and the sign of the second operand."
msgstr ""

#: ../../../LangRef.rst:12475
msgid ""
"This function returns the same values as the libm ``copysign`` functions "
"would, and handles error conditions in the same way."
msgstr ""

#: ../../../LangRef.rst:12479
msgid "'``llvm.floor.*``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:12484
msgid ""
"This is an overloaded intrinsic. You can use ``llvm.floor`` on any floating-"
"point or vector of floating-point type. Not all targets support all types "
"however."
msgstr ""

#: ../../../LangRef.rst:12499
msgid "The '``llvm.floor.*``' intrinsics return the floor of the operand."
msgstr ""

#: ../../../LangRef.rst:12510
msgid ""
"This function returns the same values as the libm ``floor`` functions would, "
"and handles error conditions in the same way."
msgstr ""

#: ../../../LangRef.rst:12514
msgid "'``llvm.ceil.*``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:12519
msgid ""
"This is an overloaded intrinsic. You can use ``llvm.ceil`` on any floating-"
"point or vector of floating-point type. Not all targets support all types "
"however."
msgstr ""

#: ../../../LangRef.rst:12534
msgid "The '``llvm.ceil.*``' intrinsics return the ceiling of the operand."
msgstr ""

#: ../../../LangRef.rst:12545
msgid ""
"This function returns the same values as the libm ``ceil`` functions would, "
"and handles error conditions in the same way."
msgstr ""

#: ../../../LangRef.rst:12549
msgid "'``llvm.trunc.*``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:12554
msgid ""
"This is an overloaded intrinsic. You can use ``llvm.trunc`` on any floating-"
"point or vector of floating-point type. Not all targets support all types "
"however."
msgstr ""

#: ../../../LangRef.rst:12569
msgid ""
"The '``llvm.trunc.*``' intrinsics returns the operand rounded to the nearest "
"integer not larger in magnitude than the operand."
msgstr ""

#: ../../../LangRef.rst:12581
msgid ""
"This function returns the same values as the libm ``trunc`` functions would, "
"and handles error conditions in the same way."
msgstr ""

#: ../../../LangRef.rst:12585
msgid "'``llvm.rint.*``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:12590
msgid ""
"This is an overloaded intrinsic. You can use ``llvm.rint`` on any floating-"
"point or vector of floating-point type. Not all targets support all types "
"however."
msgstr ""

#: ../../../LangRef.rst:12605
msgid ""
"The '``llvm.rint.*``' intrinsics returns the operand rounded to the nearest "
"integer. It may raise an inexact floating-point exception if the operand "
"isn't an integer."
msgstr ""

#: ../../../LangRef.rst:12618
msgid ""
"This function returns the same values as the libm ``rint`` functions would, "
"and handles error conditions in the same way."
msgstr ""

#: ../../../LangRef.rst:12622
msgid "'``llvm.nearbyint.*``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:12627
msgid ""
"This is an overloaded intrinsic. You can use ``llvm.nearbyint`` on any "
"floating-point or vector of floating-point type. Not all targets support all "
"types however."
msgstr ""

#: ../../../LangRef.rst:12642
msgid ""
"The '``llvm.nearbyint.*``' intrinsics returns the operand rounded to the "
"nearest integer."
msgstr ""

#: ../../../LangRef.rst:12654
msgid ""
"This function returns the same values as the libm ``nearbyint`` functions "
"would, and handles error conditions in the same way."
msgstr ""

#: ../../../LangRef.rst:12658
msgid "'``llvm.round.*``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:12663
msgid ""
"This is an overloaded intrinsic. You can use ``llvm.round`` on any floating-"
"point or vector of floating-point type. Not all targets support all types "
"however."
msgstr ""

#: ../../../LangRef.rst:12678
msgid ""
"The '``llvm.round.*``' intrinsics returns the operand rounded to the nearest "
"integer."
msgstr ""

#: ../../../LangRef.rst:12690
msgid ""
"This function returns the same values as the libm ``round`` functions would, "
"and handles error conditions in the same way."
msgstr ""

#: ../../../LangRef.rst:12694
msgid "'``llvm.lround.*``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:12699
msgid ""
"This is an overloaded intrinsic. You can use ``llvm.lround`` on any floating-"
"point type. Not all targets support all types however."
msgstr ""

#: ../../../LangRef.rst:12719
msgid ""
"The '``llvm.lround.*``' intrinsics return the operand rounded to the nearest "
"integer with ties away from zero."
msgstr ""

#: ../../../LangRef.rst:12726 ../../../LangRef.rst:12761
#: ../../../LangRef.rst:12803 ../../../LangRef.rst:12838
msgid ""
"The argument is a floating-point number and the return value is an integer "
"type."
msgstr ""

#: ../../../LangRef.rst:12732
msgid ""
"This function returns the same values as the libm ``lround`` functions "
"would, but without setting errno."
msgstr ""

#: ../../../LangRef.rst:12736
msgid "'``llvm.llround.*``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:12741
msgid ""
"This is an overloaded intrinsic. You can use ``llvm.llround`` on any "
"floating-point type. Not all targets support all types however."
msgstr ""

#: ../../../LangRef.rst:12755
msgid ""
"The '``llvm.llround.*``' intrinsics return the operand rounded to the "
"nearest integer with ties away from zero."
msgstr ""

#: ../../../LangRef.rst:12767
msgid ""
"This function returns the same values as the libm ``llround`` functions "
"would, but without setting errno."
msgstr ""

#: ../../../LangRef.rst:12771
msgid "'``llvm.lrint.*``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:12776
msgid ""
"This is an overloaded intrinsic. You can use ``llvm.lrint`` on any floating-"
"point type. Not all targets support all types however."
msgstr ""

#: ../../../LangRef.rst:12796
msgid ""
"The '``llvm.lrint.*``' intrinsics return the operand rounded to the nearest "
"integer."
msgstr ""

#: ../../../LangRef.rst:12809
msgid ""
"This function returns the same values as the libm ``lrint`` functions would, "
"but without setting errno."
msgstr ""

#: ../../../LangRef.rst:12813
msgid "'``llvm.llrint.*``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:12818
msgid ""
"This is an overloaded intrinsic. You can use ``llvm.llrint`` on any floating-"
"point type. Not all targets support all types however."
msgstr ""

#: ../../../LangRef.rst:12832
msgid ""
"The '``llvm.llrint.*``' intrinsics return the operand rounded to the nearest "
"integer."
msgstr ""

#: ../../../LangRef.rst:12844
msgid ""
"This function returns the same values as the libm ``llrint`` functions "
"would, but without setting errno."
msgstr ""

#: ../../../LangRef.rst:12848
msgid "Bit Manipulation Intrinsics"
msgstr ""

#: ../../../LangRef.rst:12850
msgid ""
"LLVM provides intrinsics for a few important bit manipulation operations. "
"These allow efficient code generation for some algorithms."
msgstr ""

#: ../../../LangRef.rst:12854
msgid "'``llvm.bitreverse.*``' Intrinsics"
msgstr ""

#: ../../../LangRef.rst:12859
msgid ""
"This is an overloaded intrinsic function. You can use bitreverse on any "
"integer type."
msgstr ""

#: ../../../LangRef.rst:12872
msgid ""
"The '``llvm.bitreverse``' family of intrinsics is used to reverse the "
"bitpattern of an integer value or vector of integer values; for example "
"``0b10110110`` becomes ``0b01101101``."
msgstr ""

#: ../../../LangRef.rst:12879
msgid ""
"The ``llvm.bitreverse.iN`` intrinsic returns an iN value that has bit ``M`` "
"in the input moved to bit ``N-M`` in the output. The vector intrinsics, such "
"as ``llvm.bitreverse.v4i32``, operate on a per-element basis and the element "
"order is not affected."
msgstr ""

#: ../../../LangRef.rst:12885
msgid "'``llvm.bswap.*``' Intrinsics"
msgstr ""

#: ../../../LangRef.rst:12890
msgid ""
"This is an overloaded intrinsic function. You can use bswap on any integer "
"type that is an even number of bytes (i.e. BitWidth % 16 == 0)."
msgstr ""

#: ../../../LangRef.rst:12903
msgid ""
"The '``llvm.bswap``' family of intrinsics is used to byte swap an integer "
"value or vector of integer values with an even number of bytes (positive "
"multiple of 16 bits)."
msgstr ""

#: ../../../LangRef.rst:12910
msgid ""
"The ``llvm.bswap.i16`` intrinsic returns an i16 value that has the high and "
"low byte of the input i16 swapped. Similarly, the ``llvm.bswap.i32`` "
"intrinsic returns an i32 value that has the four bytes of the input i32 "
"swapped, so that if the input bytes are numbered 0, 1, 2, 3 then the "
"returned i32 will have its bytes in 3, 2, 1, 0 order. The ``llvm.bswap."
"i48``, ``llvm.bswap.i64`` and other intrinsics extend this concept to "
"additional even-byte lengths (6 bytes, 8 bytes and more, respectively). The "
"vector intrinsics, such as ``llvm.bswap.v4i32``, operate on a per-element "
"basis and the element order is not affected."
msgstr ""

#: ../../../LangRef.rst:12921
msgid "'``llvm.ctpop.*``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:12926
msgid ""
"This is an overloaded intrinsic. You can use llvm.ctpop on any integer bit "
"width, or on any vector with integer elements. Not all targets support all "
"bit widths or vector types, however."
msgstr ""

#: ../../../LangRef.rst:12942
msgid ""
"The '``llvm.ctpop``' family of intrinsics counts the number of bits set in a "
"value."
msgstr ""

#: ../../../LangRef.rst:12948
msgid ""
"The only argument is the value to be counted. The argument may be of any "
"integer type, or a vector with integer elements. The return type must match "
"the argument type."
msgstr ""

#: ../../../LangRef.rst:12955
msgid ""
"The '``llvm.ctpop``' intrinsic counts the 1's in a variable, or within each "
"element of a vector."
msgstr ""

#: ../../../LangRef.rst:12959
msgid "'``llvm.ctlz.*``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:12964
msgid ""
"This is an overloaded intrinsic. You can use ``llvm.ctlz`` on any integer "
"bit width, or any vector whose elements are integers. Not all targets "
"support all bit widths or vector types, however."
msgstr ""

#: ../../../LangRef.rst:12980
msgid ""
"The '``llvm.ctlz``' family of intrinsic functions counts the number of "
"leading zeros in a variable."
msgstr ""

#: ../../../LangRef.rst:12986 ../../../LangRef.rst:13033
msgid ""
"The first argument is the value to be counted. This argument may be of any "
"integer type, or a vector with integer element type. The return type must "
"match the first argument type."
msgstr ""

#: ../../../LangRef.rst:12990 ../../../LangRef.rst:13037
msgid ""
"The second argument must be a constant and is a flag to indicate whether the "
"intrinsic should ensure that a zero as the first argument produces a defined "
"result. Historically some architectures did not provide a defined result for "
"zero values as efficiently, and many algorithms are now predicated on "
"avoiding zero-value inputs."
msgstr ""

#: ../../../LangRef.rst:12999
msgid ""
"The '``llvm.ctlz``' intrinsic counts the leading (most significant) zeros in "
"a variable, or within each element of the vector. If ``src == 0`` then the "
"result is the size in bits of the type of ``src`` if ``is_zero_undef == 0`` "
"and ``undef`` otherwise. For example, ``llvm.ctlz(i32 2) = 30``."
msgstr ""

#: ../../../LangRef.rst:13006
msgid "'``llvm.cttz.*``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:13011
msgid ""
"This is an overloaded intrinsic. You can use ``llvm.cttz`` on any integer "
"bit width, or any vector of integer elements. Not all targets support all "
"bit widths or vector types, however."
msgstr ""

#: ../../../LangRef.rst:13027
msgid ""
"The '``llvm.cttz``' family of intrinsic functions counts the number of "
"trailing zeros."
msgstr ""

#: ../../../LangRef.rst:13046
msgid ""
"The '``llvm.cttz``' intrinsic counts the trailing (least significant) zeros "
"in a variable, or within each element of a vector. If ``src == 0`` then the "
"result is the size in bits of the type of ``src`` if ``is_zero_undef == 0`` "
"and ``undef`` otherwise. For example, ``llvm.cttz(2) = 1``."
msgstr ""

#: ../../../LangRef.rst:13055
msgid "'``llvm.fshl.*``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:13060
msgid ""
"This is an overloaded intrinsic. You can use ``llvm.fshl`` on any integer "
"bit width or any vector of integer elements. Not all targets support all bit "
"widths or vector types, however."
msgstr ""

#: ../../../LangRef.rst:13073
msgid ""
"The '``llvm.fshl``' family of intrinsic functions performs a funnel shift "
"left: the first two values are concatenated as { %a : %b } (%a is the most "
"significant bits of the wide value), the combined value is shifted left, and "
"the most significant bits are extracted to produce a result that is the same "
"size as the original arguments. If the first 2 arguments are identical, this "
"is equivalent to a rotate left operation. For vector types, the operation "
"occurs for each element of the vector. The shift argument is treated as an "
"unsigned amount modulo the element size of the arguments."
msgstr ""

#: ../../../LangRef.rst:13085 ../../../LangRef.rst:13131
msgid ""
"The first two arguments are the values to be concatenated. The third "
"argument is the shift amount. The arguments may be any integer type or a "
"vector with integer element type. All arguments and the return value must "
"have the same type."
msgstr ""

#: ../../../LangRef.rst:13101
msgid "'``llvm.fshr.*``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:13106
msgid ""
"This is an overloaded intrinsic. You can use ``llvm.fshr`` on any integer "
"bit width or any vector of integer elements. Not all targets support all bit "
"widths or vector types, however."
msgstr ""

#: ../../../LangRef.rst:13119
msgid ""
"The '``llvm.fshr``' family of intrinsic functions performs a funnel shift "
"right: the first two values are concatenated as { %a : %b } (%a is the most "
"significant bits of the wide value), the combined value is shifted right, "
"and the least significant bits are extracted to produce a result that is the "
"same size as the original arguments. If the first 2 arguments are identical, "
"this is equivalent to a rotate right operation. For vector types, the "
"operation occurs for each element of the vector. The shift argument is "
"treated as an unsigned amount modulo the element size of the arguments."
msgstr ""

#: ../../../LangRef.rst:13147
msgid "Arithmetic with Overflow Intrinsics"
msgstr ""

#: ../../../LangRef.rst:13149
msgid "LLVM provides intrinsics for fast arithmetic overflow checking."
msgstr ""

#: ../../../LangRef.rst:13151
msgid ""
"Each of these intrinsics returns a two-element struct. The first element of "
"this struct contains the result of the corresponding arithmetic operation "
"modulo 2\\ :sup:`n`\\ , where n is the bit width of the result. Therefore, "
"for example, the first element of the struct returned by ``llvm.sadd.with."
"overflow.i32`` is always the same as the result of a 32-bit ``add`` "
"instruction with the same operands, where the ``add`` is *not* modified by "
"an ``nsw`` or ``nuw`` flag."
msgstr ""

#: ../../../LangRef.rst:13159
msgid ""
"The second element of the result is an ``i1`` that is 1 if the arithmetic "
"operation overflowed and 0 otherwise. An operation overflows if, for any "
"values of its operands ``A`` and ``B`` and for any ``N`` larger than the "
"operands' width, ``ext(A op B) to iN`` is not equal to ``(ext(A) to iN) op "
"(ext(B) to iN)`` where ``ext`` is ``sext`` for signed overflow and ``zext`` "
"for unsigned overflow, and ``op`` is the underlying arithmetic operation."
msgstr ""

#: ../../../LangRef.rst:13167
msgid ""
"The behavior of these intrinsics is well-defined for all argument values."
msgstr ""

#: ../../../LangRef.rst:13171
msgid "'``llvm.sadd.with.overflow.*``' Intrinsics"
msgstr ""

#: ../../../LangRef.rst:13176
msgid ""
"This is an overloaded intrinsic. You can use ``llvm.sadd.with.overflow`` on "
"any integer bit width or vectors of integers."
msgstr ""

#: ../../../LangRef.rst:13189
msgid ""
"The '``llvm.sadd.with.overflow``' family of intrinsic functions perform a "
"signed addition of the two arguments, and indicate whether an overflow "
"occurred during the signed summation."
msgstr ""

#: ../../../LangRef.rst:13196
msgid ""
"The arguments (%a and %b) and the first element of the result structure may "
"be of integer types of any bit width, but they must have the same bit width. "
"The second element of the result structure must be of type ``i1``. ``%a`` "
"and ``%b`` are the two values that will undergo signed addition."
msgstr ""

#: ../../../LangRef.rst:13205
msgid ""
"The '``llvm.sadd.with.overflow``' family of intrinsic functions perform a "
"signed addition of the two variables. They return a structure --- the first "
"element of which is the signed summation, and the second element of which is "
"a bit specifying if the signed summation resulted in an overflow."
msgstr ""

#: ../../../LangRef.rst:13222
msgid "'``llvm.uadd.with.overflow.*``' Intrinsics"
msgstr ""

#: ../../../LangRef.rst:13227
msgid ""
"This is an overloaded intrinsic. You can use ``llvm.uadd.with.overflow`` on "
"any integer bit width or vectors of integers."
msgstr ""

#: ../../../LangRef.rst:13240
msgid ""
"The '``llvm.uadd.with.overflow``' family of intrinsic functions perform an "
"unsigned addition of the two arguments, and indicate whether a carry "
"occurred during the unsigned summation."
msgstr ""

#: ../../../LangRef.rst:13247
msgid ""
"The arguments (%a and %b) and the first element of the result structure may "
"be of integer types of any bit width, but they must have the same bit width. "
"The second element of the result structure must be of type ``i1``. ``%a`` "
"and ``%b`` are the two values that will undergo unsigned addition."
msgstr ""

#: ../../../LangRef.rst:13256
msgid ""
"The '``llvm.uadd.with.overflow``' family of intrinsic functions perform an "
"unsigned addition of the two arguments. They return a structure --- the "
"first element of which is the sum, and the second element of which is a bit "
"specifying if the unsigned summation resulted in a carry."
msgstr ""

#: ../../../LangRef.rst:13272
msgid "'``llvm.ssub.with.overflow.*``' Intrinsics"
msgstr ""

#: ../../../LangRef.rst:13277
msgid ""
"This is an overloaded intrinsic. You can use ``llvm.ssub.with.overflow`` on "
"any integer bit width or vectors of integers."
msgstr ""

#: ../../../LangRef.rst:13290
msgid ""
"The '``llvm.ssub.with.overflow``' family of intrinsic functions perform a "
"signed subtraction of the two arguments, and indicate whether an overflow "
"occurred during the signed subtraction."
msgstr ""

#: ../../../LangRef.rst:13297
msgid ""
"The arguments (%a and %b) and the first element of the result structure may "
"be of integer types of any bit width, but they must have the same bit width. "
"The second element of the result structure must be of type ``i1``. ``%a`` "
"and ``%b`` are the two values that will undergo signed subtraction."
msgstr ""

#: ../../../LangRef.rst:13306
msgid ""
"The '``llvm.ssub.with.overflow``' family of intrinsic functions perform a "
"signed subtraction of the two arguments. They return a structure --- the "
"first element of which is the subtraction, and the second element of which "
"is a bit specifying if the signed subtraction resulted in an overflow."
msgstr ""

#: ../../../LangRef.rst:13323
msgid "'``llvm.usub.with.overflow.*``' Intrinsics"
msgstr ""

#: ../../../LangRef.rst:13328
msgid ""
"This is an overloaded intrinsic. You can use ``llvm.usub.with.overflow`` on "
"any integer bit width or vectors of integers."
msgstr ""

#: ../../../LangRef.rst:13341
msgid ""
"The '``llvm.usub.with.overflow``' family of intrinsic functions perform an "
"unsigned subtraction of the two arguments, and indicate whether an overflow "
"occurred during the unsigned subtraction."
msgstr ""

#: ../../../LangRef.rst:13348
msgid ""
"The arguments (%a and %b) and the first element of the result structure may "
"be of integer types of any bit width, but they must have the same bit width. "
"The second element of the result structure must be of type ``i1``. ``%a`` "
"and ``%b`` are the two values that will undergo unsigned subtraction."
msgstr ""

#: ../../../LangRef.rst:13357
msgid ""
"The '``llvm.usub.with.overflow``' family of intrinsic functions perform an "
"unsigned subtraction of the two arguments. They return a structure --- the "
"first element of which is the subtraction, and the second element of which "
"is a bit specifying if the unsigned subtraction resulted in an overflow."
msgstr ""

#: ../../../LangRef.rst:13374
msgid "'``llvm.smul.with.overflow.*``' Intrinsics"
msgstr ""

#: ../../../LangRef.rst:13379
msgid ""
"This is an overloaded intrinsic. You can use ``llvm.smul.with.overflow`` on "
"any integer bit width or vectors of integers."
msgstr ""

#: ../../../LangRef.rst:13392
msgid ""
"The '``llvm.smul.with.overflow``' family of intrinsic functions perform a "
"signed multiplication of the two arguments, and indicate whether an overflow "
"occurred during the signed multiplication."
msgstr ""

#: ../../../LangRef.rst:13399
msgid ""
"The arguments (%a and %b) and the first element of the result structure may "
"be of integer types of any bit width, but they must have the same bit width. "
"The second element of the result structure must be of type ``i1``. ``%a`` "
"and ``%b`` are the two values that will undergo signed multiplication."
msgstr ""

#: ../../../LangRef.rst:13408
msgid ""
"The '``llvm.smul.with.overflow``' family of intrinsic functions perform a "
"signed multiplication of the two arguments. They return a structure --- the "
"first element of which is the multiplication, and the second element of "
"which is a bit specifying if the signed multiplication resulted in an "
"overflow."
msgstr ""

#: ../../../LangRef.rst:13425
msgid "'``llvm.umul.with.overflow.*``' Intrinsics"
msgstr ""

#: ../../../LangRef.rst:13430
msgid ""
"This is an overloaded intrinsic. You can use ``llvm.umul.with.overflow`` on "
"any integer bit width or vectors of integers."
msgstr ""

#: ../../../LangRef.rst:13443
msgid ""
"The '``llvm.umul.with.overflow``' family of intrinsic functions perform a "
"unsigned multiplication of the two arguments, and indicate whether an "
"overflow occurred during the unsigned multiplication."
msgstr ""

#: ../../../LangRef.rst:13450
msgid ""
"The arguments (%a and %b) and the first element of the result structure may "
"be of integer types of any bit width, but they must have the same bit width. "
"The second element of the result structure must be of type ``i1``. ``%a`` "
"and ``%b`` are the two values that will undergo unsigned multiplication."
msgstr ""

#: ../../../LangRef.rst:13459
msgid ""
"The '``llvm.umul.with.overflow``' family of intrinsic functions perform an "
"unsigned multiplication of the two arguments. They return a structure --- "
"the first element of which is the multiplication, and the second element of "
"which is a bit specifying if the unsigned multiplication resulted in an "
"overflow."
msgstr ""

#: ../../../LangRef.rst:13476
msgid "Saturation Arithmetic Intrinsics"
msgstr ""

#: ../../../LangRef.rst:13478
msgid ""
"Saturation arithmetic is a version of arithmetic in which operations are "
"limited to a fixed range between a minimum and maximum value. If the result "
"of an operation is greater than the maximum value, the result is set (or "
"\"clamped\") to this maximum. If it is below the minimum, it is clamped to "
"this minimum."
msgstr ""

#: ../../../LangRef.rst:13486
msgid "'``llvm.sadd.sat.*``' Intrinsics"
msgstr ""

#: ../../../LangRef.rst:13491
msgid ""
"This is an overloaded intrinsic. You can use ``llvm.sadd.sat`` on any "
"integer bit width or vectors of integers."
msgstr ""

#: ../../../LangRef.rst:13504
msgid ""
"The '``llvm.sadd.sat``' family of intrinsic functions perform signed "
"saturation addition on the 2 arguments."
msgstr ""

#: ../../../LangRef.rst:13508 ../../../LangRef.rst:13556
#: ../../../LangRef.rst:13603 ../../../LangRef.rst:13651
#: ../../../LangRef.rst:13752 ../../../LangRef.rst:13812
#: ../../../LangRef.rst:13871 ../../../LangRef.rst:13941
#: ../../../LangRef.rst:14008 ../../../LangRef.rst:14068
msgid "Arguments"
msgstr ""

#: ../../../LangRef.rst:13510
msgid ""
"The arguments (%a and %b) and the result may be of integer types of any bit "
"width, but they must have the same bit width. ``%a`` and ``%b`` are the two "
"values that will undergo signed addition."
msgstr ""

#: ../../../LangRef.rst:13517 ../../../LangRef.rst:13612
msgid ""
"The maximum value this operation can clamp to is the largest signed value "
"representable by the bit width of the arguments. The minimum value is the "
"smallest signed value representable by this bit width."
msgstr ""

#: ../../../LangRef.rst:13534
msgid "'``llvm.uadd.sat.*``' Intrinsics"
msgstr ""

#: ../../../LangRef.rst:13539
msgid ""
"This is an overloaded intrinsic. You can use ``llvm.uadd.sat`` on any "
"integer bit width or vectors of integers."
msgstr ""

#: ../../../LangRef.rst:13552
msgid ""
"The '``llvm.uadd.sat``' family of intrinsic functions perform unsigned "
"saturation addition on the 2 arguments."
msgstr ""

#: ../../../LangRef.rst:13558
msgid ""
"The arguments (%a and %b) and the result may be of integer types of any bit "
"width, but they must have the same bit width. ``%a`` and ``%b`` are the two "
"values that will undergo unsigned addition."
msgstr ""

#: ../../../LangRef.rst:13565
msgid ""
"The maximum value this operation can clamp to is the largest unsigned value "
"representable by the bit width of the arguments. Because this is an unsigned "
"operation, the result will never saturate towards zero."
msgstr ""

#: ../../../LangRef.rst:13581
msgid "'``llvm.ssub.sat.*``' Intrinsics"
msgstr ""

#: ../../../LangRef.rst:13586
msgid ""
"This is an overloaded intrinsic. You can use ``llvm.ssub.sat`` on any "
"integer bit width or vectors of integers."
msgstr ""

#: ../../../LangRef.rst:13599
msgid ""
"The '``llvm.ssub.sat``' family of intrinsic functions perform signed "
"saturation subtraction on the 2 arguments."
msgstr ""

#: ../../../LangRef.rst:13605
msgid ""
"The arguments (%a and %b) and the result may be of integer types of any bit "
"width, but they must have the same bit width. ``%a`` and ``%b`` are the two "
"values that will undergo signed subtraction."
msgstr ""

#: ../../../LangRef.rst:13629
msgid "'``llvm.usub.sat.*``' Intrinsics"
msgstr ""

#: ../../../LangRef.rst:13634
msgid ""
"This is an overloaded intrinsic. You can use ``llvm.usub.sat`` on any "
"integer bit width or vectors of integers."
msgstr ""

#: ../../../LangRef.rst:13647
msgid ""
"The '``llvm.usub.sat``' family of intrinsic functions perform unsigned "
"saturation subtraction on the 2 arguments."
msgstr ""

#: ../../../LangRef.rst:13653
msgid ""
"The arguments (%a and %b) and the result may be of integer types of any bit "
"width, but they must have the same bit width. ``%a`` and ``%b`` are the two "
"values that will undergo unsigned subtraction."
msgstr ""

#: ../../../LangRef.rst:13660
msgid ""
"The minimum value this operation can clamp to is 0, which is the smallest "
"unsigned value representable by the bit width of the unsigned arguments. "
"Because this is an unsigned operation, the result will never saturate "
"towards the largest possible value representable by this bit width."
msgstr ""

#: ../../../LangRef.rst:13676
msgid "Fixed Point Arithmetic Intrinsics"
msgstr ""

#: ../../../LangRef.rst:13678
msgid ""
"A fixed point number represents a real data type for a number that has a "
"fixed number of digits after a radix point (equivalent to the decimal point "
"'.'). The number of digits after the radix point is referred as the `scale`. "
"These are useful for representing fractional values to a specific precision. "
"The following intrinsics perform fixed point arithmetic operations on 2 "
"operands of the same scale, specified as the third argument."
msgstr ""

#: ../../../LangRef.rst:13685
msgid ""
"The ``llvm.*mul.fix`` family of intrinsic functions represents a "
"multiplication of fixed point numbers through scaled integers. Therefore, "
"fixed point multiplication can be represented as"
msgstr ""

#: ../../../LangRef.rst:13701
msgid ""
"The ``llvm.*div.fix`` family of intrinsic functions represents a division of "
"fixed point numbers through scaled integers. Fixed point division can be "
"represented as:"
msgstr ""

#: ../../../LangRef.rst:13717
msgid ""
"For each of these functions, if the result cannot be represented exactly "
"with the provided scale, the result is rounded. Rounding is unspecified "
"since preferred rounding may vary for different targets. Rounding is "
"specified through a target hook. Different pipelines should legalize or "
"optimize this using the rounding specified by this hook if it is provided. "
"Operations like constant folding, instruction combining, KnownBits, and "
"ValueTracking should also use this hook, if provided, and not assume the "
"direction of rounding. A rounded result must always be within one unit of "
"precision from the true result. That is, the error between the returned "
"result and the true result must be less than 1/2^(scale)."
msgstr ""

#: ../../../LangRef.rst:13730
msgid "'``llvm.smul.fix.*``' Intrinsics"
msgstr ""

#: ../../../LangRef.rst:13735
msgid ""
"This is an overloaded intrinsic. You can use ``llvm.smul.fix`` on any "
"integer bit width or vectors of integers."
msgstr ""

#: ../../../LangRef.rst:13748
msgid ""
"The '``llvm.smul.fix``' family of intrinsic functions perform signed fixed "
"point multiplication on 2 arguments of the same scale."
msgstr ""

#: ../../../LangRef.rst:13754
msgid ""
"The arguments (%a and %b) and the result may be of integer types of any bit "
"width, but they must have the same bit width. The arguments may also work "
"with int vectors of the same length and int size. ``%a`` and ``%b`` are the "
"two values that will undergo signed fixed point multiplication. The argument "
"``%scale`` represents the scale of both operands, and must be a constant "
"integer."
msgstr ""

#: ../../../LangRef.rst:13764 ../../../LangRef.rst:13882
#: ../../../LangRef.rst:13952
msgid ""
"This operation performs fixed point multiplication on the 2 arguments of a "
"specified scale. The result will also be returned in the same scale "
"specified in the third argument."
msgstr ""

#: ../../../LangRef.rst:13768 ../../../LangRef.rst:13828
#: ../../../LangRef.rst:13886 ../../../LangRef.rst:13956
#: ../../../LangRef.rst:14024 ../../../LangRef.rst:14084
msgid ""
"If the result value cannot be precisely represented in the given scale, the "
"value is rounded up or down to the closest representable value. The rounding "
"direction is unspecified."
msgstr ""

#: ../../../LangRef.rst:13772 ../../../LangRef.rst:13832
msgid ""
"It is undefined behavior if the result value does not fit within the range "
"of the fixed point type."
msgstr ""

#: ../../../LangRef.rst:13790
msgid "'``llvm.umul.fix.*``' Intrinsics"
msgstr ""

#: ../../../LangRef.rst:13795
msgid ""
"This is an overloaded intrinsic. You can use ``llvm.umul.fix`` on any "
"integer bit width or vectors of integers."
msgstr ""

#: ../../../LangRef.rst:13808
msgid ""
"The '``llvm.umul.fix``' family of intrinsic functions perform unsigned fixed "
"point multiplication on 2 arguments of the same scale."
msgstr ""

#: ../../../LangRef.rst:13814
msgid ""
"The arguments (%a and %b) and the result may be of integer types of any bit "
"width, but they must have the same bit width. The arguments may also work "
"with int vectors of the same length and int size. ``%a`` and ``%b`` are the "
"two values that will undergo unsigned fixed point multiplication. The "
"argument ``%scale`` represents the scale of both operands, and must be a "
"constant integer."
msgstr ""

#: ../../../LangRef.rst:13824
msgid ""
"This operation performs unsigned fixed point multiplication on the 2 "
"arguments of a specified scale. The result will also be returned in the same "
"scale specified in the third argument."
msgstr ""

#: ../../../LangRef.rst:13849
msgid "'``llvm.smul.fix.sat.*``' Intrinsics"
msgstr ""

#: ../../../LangRef.rst:13854
msgid ""
"This is an overloaded intrinsic. You can use ``llvm.smul.fix.sat`` on any "
"integer bit width or vectors of integers."
msgstr ""

#: ../../../LangRef.rst:13867
msgid ""
"The '``llvm.smul.fix.sat``' family of intrinsic functions perform signed "
"fixed point saturation multiplication on 2 arguments of the same scale."
msgstr ""

#: ../../../LangRef.rst:13873
msgid ""
"The arguments (%a and %b) and the result may be of integer types of any bit "
"width, but they must have the same bit width. ``%a`` and ``%b`` are the two "
"values that will undergo signed fixed point multiplication. The argument "
"``%scale`` represents the scale of both operands, and must be a constant "
"integer."
msgstr ""

#: ../../../LangRef.rst:13890
msgid ""
"The maximum value this operation can clamp to is the largest signed value "
"representable by the bit width of the first 2 arguments. The minimum value "
"is the smallest signed value representable by this bit width."
msgstr ""

#: ../../../LangRef.rst:13919
msgid "'``llvm.umul.fix.sat.*``' Intrinsics"
msgstr ""

#: ../../../LangRef.rst:13924
msgid ""
"This is an overloaded intrinsic. You can use ``llvm.umul.fix.sat`` on any "
"integer bit width or vectors of integers."
msgstr ""

#: ../../../LangRef.rst:13937
msgid ""
"The '``llvm.umul.fix.sat``' family of intrinsic functions perform unsigned "
"fixed point saturation multiplication on 2 arguments of the same scale."
msgstr ""

#: ../../../LangRef.rst:13943
msgid ""
"The arguments (%a and %b) and the result may be of integer types of any bit "
"width, but they must have the same bit width. ``%a`` and ``%b`` are the two "
"values that will undergo unsigned fixed point multiplication. The argument "
"``%scale`` represents the scale of both operands, and must be a constant "
"integer."
msgstr ""

#: ../../../LangRef.rst:13960
msgid ""
"The maximum value this operation can clamp to is the largest unsigned value "
"representable by the bit width of the first 2 arguments. The minimum value "
"is the smallest unsigned value representable by this bit width (zero)."
msgstr ""

#: ../../../LangRef.rst:13986
msgid "'``llvm.sdiv.fix.*``' Intrinsics"
msgstr ""

#: ../../../LangRef.rst:13991
msgid ""
"This is an overloaded intrinsic. You can use ``llvm.sdiv.fix`` on any "
"integer bit width or vectors of integers."
msgstr ""

#: ../../../LangRef.rst:14004
msgid ""
"The '``llvm.sdiv.fix``' family of intrinsic functions perform signed fixed "
"point division on 2 arguments of the same scale."
msgstr ""

#: ../../../LangRef.rst:14010
msgid ""
"The arguments (%a and %b) and the result may be of integer types of any bit "
"width, but they must have the same bit width. The arguments may also work "
"with int vectors of the same length and int size. ``%a`` and ``%b`` are the "
"two values that will undergo signed fixed point division. The argument "
"``%scale`` represents the scale of both operands, and must be a constant "
"integer."
msgstr ""

#: ../../../LangRef.rst:14020 ../../../LangRef.rst:14080
msgid ""
"This operation performs fixed point division on the 2 arguments of a "
"specified scale. The result will also be returned in the same scale "
"specified in the third argument."
msgstr ""

#: ../../../LangRef.rst:14028 ../../../LangRef.rst:14088
msgid ""
"It is undefined behavior if the result value does not fit within the range "
"of the fixed point type, or if the second argument is zero."
msgstr ""

#: ../../../LangRef.rst:14046
msgid "'``llvm.udiv.fix.*``' Intrinsics"
msgstr ""

#: ../../../LangRef.rst:14051
msgid ""
"This is an overloaded intrinsic. You can use ``llvm.udiv.fix`` on any "
"integer bit width or vectors of integers."
msgstr ""

#: ../../../LangRef.rst:14064
msgid ""
"The '``llvm.udiv.fix``' family of intrinsic functions perform unsigned fixed "
"point division on 2 arguments of the same scale."
msgstr ""

#: ../../../LangRef.rst:14070
msgid ""
"The arguments (%a and %b) and the result may be of integer types of any bit "
"width, but they must have the same bit width. The arguments may also work "
"with int vectors of the same length and int size. ``%a`` and ``%b`` are the "
"two values that will undergo unsigned fixed point division. The argument "
"``%scale`` represents the scale of both operands, and must be a constant "
"integer."
msgstr ""

#: ../../../LangRef.rst:14106
msgid "Specialised Arithmetic Intrinsics"
msgstr ""

#: ../../../LangRef.rst:14111
msgid "'``llvm.canonicalize.*``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:14124
msgid ""
"The '``llvm.canonicalize.*``' intrinsic returns the platform specific "
"canonical encoding of a floating-point number. This canonicalization is "
"useful for implementing certain numeric primitives such as frexp. The "
"canonical encoding is defined by IEEE-754-2008 to be:"
msgstr ""

#: ../../../LangRef.rst:14135
msgid ""
"This operation can also be considered equivalent to the IEEE-754-2008 "
"conversion of a floating-point value to the same format. NaNs are handled "
"according to section 6.2."
msgstr ""

#: ../../../LangRef.rst:14139
msgid "Examples of non-canonical encodings:"
msgstr ""

#: ../../../LangRef.rst:14141
msgid ""
"x87 pseudo denormals, pseudo NaNs, pseudo Infinity, Unnormals. These are "
"converted to a canonical representation per hardware-specific protocol."
msgstr ""

#: ../../../LangRef.rst:14143
msgid ""
"Many normal decimal floating-point numbers have non-canonical alternative "
"encodings."
msgstr ""

#: ../../../LangRef.rst:14145
msgid ""
"Some machines, like GPUs or ARMv7 NEON, do not support subnormal values. "
"These are treated as non-canonical encodings of zero and will be flushed to "
"a zero of the same sign by this operation."
msgstr ""

#: ../../../LangRef.rst:14149
msgid ""
"Note that per IEEE-754-2008 6.2, systems that support signaling NaNs with "
"default exception handling must signal an invalid exception, and produce a "
"quiet NaN result."
msgstr ""

#: ../../../LangRef.rst:14153
msgid ""
"This function should always be implementable as multiplication by 1.0, "
"provided that the compiler does not constant fold the operation. Likewise, "
"division by 1.0 and ``llvm.minnum(x, x)`` are possible implementations. "
"Addition with -0.0 is also sufficient provided that the rounding mode is not "
"-Infinity."
msgstr ""

#: ../../../LangRef.rst:14158
msgid "``@llvm.canonicalize`` must preserve the equality relation. That is:"
msgstr ""

#: ../../../LangRef.rst:14160
msgid "``(@llvm.canonicalize(x) == x)`` is equivalent to ``(x == x)``"
msgstr ""

#: ../../../LangRef.rst:14161
msgid ""
"``(@llvm.canonicalize(x) == @llvm.canonicalize(y))`` is equivalent to to "
"``(x == y)``"
msgstr ""

#: ../../../LangRef.rst:14164
msgid ""
"Additionally, the sign of zero must be conserved: ``@llvm.canonicalize(-0.0) "
"= -0.0`` and ``@llvm.canonicalize(+0.0) = +0.0``"
msgstr ""

#: ../../../LangRef.rst:14167
msgid ""
"The payload bits of a NaN must be conserved, with two exceptions. First, "
"environments which use only a single canonical representation of NaN must "
"perform said canonicalization. Second, SNaNs must be quieted per the usual "
"methods."
msgstr ""

#: ../../../LangRef.rst:14172
msgid "The canonicalization operation may be optimized away if:"
msgstr ""

#: ../../../LangRef.rst:14174
msgid ""
"The input is known to be canonical. For example, it was produced by a "
"floating-point operation that is required by the standard to be canonical."
msgstr ""

#: ../../../LangRef.rst:14176
msgid ""
"The result is consumed only by (or fused with) other floating-point "
"operations. That is, the bits of the floating-point value are not examined."
msgstr ""

#: ../../../LangRef.rst:14180
msgid "'``llvm.fmuladd.*``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:14193
msgid ""
"The '``llvm.fmuladd.*``' intrinsic functions represent multiply-add "
"expressions that can be fused if the code generator determines that (a) the "
"target instruction set has support for a fused operation, and (b) that the "
"fused operation is more efficient than the equivalent, separate pair of mul "
"and add instructions."
msgstr ""

#: ../../../LangRef.rst:14202
msgid ""
"The '``llvm.fmuladd.*``' intrinsics each take three arguments: two "
"multiplicands, a and b, and an addend c."
msgstr ""

#: ../../../LangRef.rst:14208
msgid "The expression:"
msgstr ""

#: ../../../LangRef.rst:14214
msgid ""
"is equivalent to the expression a \\* b + c, except that it is unspecified "
"whether rounding will be performed between the multiplication and addition "
"steps. Fusion is not guaranteed, even if the target platform supports it. If "
"a fused multiply-add is required, the corresponding :ref:`llvm.fma "
"<int_fma>` intrinsic function should be used instead. This never sets errno, "
"just as '``llvm.fma.*``'."
msgstr ""

#: ../../../LangRef.rst:14230
msgid "Experimental Vector Reduction Intrinsics"
msgstr ""

#: ../../../LangRef.rst:14232
msgid ""
"Horizontal reductions of vectors can be expressed using the following "
"intrinsics. Each one takes a vector operand as an input and applies its "
"respective operation across all elements of the vector, returning a single "
"scalar result of the same element type."
msgstr ""

#: ../../../LangRef.rst:14239
msgid "'``llvm.experimental.vector.reduce.add.*``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:14252
msgid ""
"The '``llvm.experimental.vector.reduce.add.*``' intrinsics do an integer "
"``ADD`` reduction of a vector, returning the result as a scalar. The return "
"type matches the element-type of the vector input."
msgstr ""

#: ../../../LangRef.rst:14258 ../../../LangRef.rst:14319
#: ../../../LangRef.rst:14378 ../../../LangRef.rst:14399
#: ../../../LangRef.rst:14420 ../../../LangRef.rst:14441
#: ../../../LangRef.rst:14462 ../../../LangRef.rst:14483
#: ../../../LangRef.rst:14504
msgid "The argument to this intrinsic must be a vector of integer values."
msgstr ""

#: ../../../LangRef.rst:14261
msgid "'``llvm.experimental.vector.reduce.v2.fadd.*``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:14274
msgid ""
"The '``llvm.experimental.vector.reduce.v2.fadd.*``' intrinsics do a floating-"
"point ``ADD`` reduction of a vector, returning the result as a scalar. The "
"return type matches the element-type of the vector input."
msgstr ""

#: ../../../LangRef.rst:14278 ../../../LangRef.rst:14339
msgid ""
"If the intrinsic call has the 'reassoc' or 'fast' flags set, then the "
"reduction will not preserve the associativity of an equivalent scalarized "
"counterpart. Otherwise the reduction will be *ordered*, thus implying that "
"the operation respects the associativity of a scalarized reduction."
msgstr ""

#: ../../../LangRef.rst:14286 ../../../LangRef.rst:14347
msgid ""
"The first argument to this intrinsic is a scalar start value for the "
"reduction. The type of the start value matches the element-type of the "
"vector input. The second argument must be a vector of floating-point values."
msgstr ""

#: ../../../LangRef.rst:14300
msgid "'``llvm.experimental.vector.reduce.mul.*``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:14313
msgid ""
"The '``llvm.experimental.vector.reduce.mul.*``' intrinsics do an integer "
"``MUL`` reduction of a vector, returning the result as a scalar. The return "
"type matches the element-type of the vector input."
msgstr ""

#: ../../../LangRef.rst:14322
msgid "'``llvm.experimental.vector.reduce.v2.fmul.*``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:14335
msgid ""
"The '``llvm.experimental.vector.reduce.v2.fmul.*``' intrinsics do a floating-"
"point ``MUL`` reduction of a vector, returning the result as a scalar. The "
"return type matches the element-type of the vector input."
msgstr ""

#: ../../../LangRef.rst:14360
msgid "'``llvm.experimental.vector.reduce.and.*``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:14372
msgid ""
"The '``llvm.experimental.vector.reduce.and.*``' intrinsics do a bitwise "
"``AND`` reduction of a vector, returning the result as a scalar. The return "
"type matches the element-type of the vector input."
msgstr ""

#: ../../../LangRef.rst:14381
msgid "'``llvm.experimental.vector.reduce.or.*``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:14393
msgid ""
"The '``llvm.experimental.vector.reduce.or.*``' intrinsics do a bitwise "
"``OR`` reduction of a vector, returning the result as a scalar. The return "
"type matches the element-type of the vector input."
msgstr ""

#: ../../../LangRef.rst:14402
msgid "'``llvm.experimental.vector.reduce.xor.*``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:14414
msgid ""
"The '``llvm.experimental.vector.reduce.xor.*``' intrinsics do a bitwise "
"``XOR`` reduction of a vector, returning the result as a scalar. The return "
"type matches the element-type of the vector input."
msgstr ""

#: ../../../LangRef.rst:14423
msgid "'``llvm.experimental.vector.reduce.smax.*``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:14435
msgid ""
"The '``llvm.experimental.vector.reduce.smax.*``' intrinsics do a signed "
"integer ``MAX`` reduction of a vector, returning the result as a scalar. The "
"return type matches the element-type of the vector input."
msgstr ""

#: ../../../LangRef.rst:14444
msgid "'``llvm.experimental.vector.reduce.smin.*``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:14456
msgid ""
"The '``llvm.experimental.vector.reduce.smin.*``' intrinsics do a signed "
"integer ``MIN`` reduction of a vector, returning the result as a scalar. The "
"return type matches the element-type of the vector input."
msgstr ""

#: ../../../LangRef.rst:14465
msgid "'``llvm.experimental.vector.reduce.umax.*``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:14477
msgid ""
"The '``llvm.experimental.vector.reduce.umax.*``' intrinsics do an unsigned "
"integer ``MAX`` reduction of a vector, returning the result as a scalar. The "
"return type matches the element-type of the vector input."
msgstr ""

#: ../../../LangRef.rst:14486
msgid "'``llvm.experimental.vector.reduce.umin.*``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:14498
msgid ""
"The '``llvm.experimental.vector.reduce.umin.*``' intrinsics do an unsigned "
"integer ``MIN`` reduction of a vector, returning the result as a scalar. The "
"return type matches the element-type of the vector input."
msgstr ""

#: ../../../LangRef.rst:14507
msgid "'``llvm.experimental.vector.reduce.fmax.*``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:14520
msgid ""
"The '``llvm.experimental.vector.reduce.fmax.*``' intrinsics do a floating-"
"point ``MAX`` reduction of a vector, returning the result as a scalar. The "
"return type matches the element-type of the vector input."
msgstr ""

#: ../../../LangRef.rst:14524 ../../../LangRef.rst:14549
msgid ""
"If the intrinsic call has the ``nnan`` fast-math flag then the operation can "
"assume that NaNs are not present in the input vector."
msgstr ""

#: ../../../LangRef.rst:14529 ../../../LangRef.rst:14554
msgid ""
"The argument to this intrinsic must be a vector of floating-point values."
msgstr ""

#: ../../../LangRef.rst:14532
msgid "'``llvm.experimental.vector.reduce.fmin.*``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:14545
msgid ""
"The '``llvm.experimental.vector.reduce.fmin.*``' intrinsics do a floating-"
"point ``MIN`` reduction of a vector, returning the result as a scalar. The "
"return type matches the element-type of the vector input."
msgstr ""

#: ../../../LangRef.rst:14560
msgid "Matrix Intrinsics"
msgstr ""

#: ../../../LangRef.rst:14562
msgid ""
"Operations on matrixes requiring shape information (like number of rows/"
"columns or the memory layout) can be expressed using the matrix intrinsics. "
"Matrixes are embedded in a flat vector and the intrinsics take the "
"dimensions as arguments. Currently column-major layout is assumed. The "
"intrinsics support both integer and floating point matrixes."
msgstr ""

#: ../../../LangRef.rst:14570
msgid "'``llvm.matrix.transpose.*``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:14582
msgid ""
"The '``llvm.matrix.transpose.*``' intrinsic treats %In as containing a "
"matrix with <Rows> rows and <Cols> columns and returns the transposed matrix "
"embedded in the result vector."
msgstr ""

#: ../../../LangRef.rst:14589
msgid ""
"The <Rows> and <Cols> arguments must be constant integers. The vector "
"argument %In and the returned vector must have <Rows> * <Cols> elements."
msgstr ""

#: ../../../LangRef.rst:14593
msgid "'``llvm.matrix.multiply.*``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:14605
msgid ""
"The '``llvm.matrix.multiply.*``' intrinsic treats %A as matrix with <M> rows "
"and <K> columns, %B as matrix with <K> rows and <N> columns and multiplies "
"them. The result matrix is returned embedded in the result vector."
msgstr ""

#: ../../../LangRef.rst:14612
msgid ""
"The <M>, <N> and <K> arguments must be constant integers.  The vector "
"argument %A must have <M> * <K> elements, %B must have <K> * <N> elements "
"and the returned vector must have <M> * <N> elements."
msgstr ""

#: ../../../LangRef.rst:14618
msgid "'``llvm.matrix.columnwise.load.*``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:14630
msgid ""
"The '``llvm.matrix.columnwise.load.*``' intrinsic loads a matrix with <Rows> "
"rows and <Cols> columns, using a stride of %Stride between columns. For two "
"consecutive columns A and B, %Stride refers to the distance (the number of "
"elements) between the start of column A and the start of column B. The "
"result matrix is returned embedded in the result vector. This allows for "
"convenient loading of sub matrixes."
msgstr ""

#: ../../../LangRef.rst:14640
msgid ""
"The <Rows> and <Cols> arguments must be constant integers. The returned "
"vector must have <Rows> * <Cols> elements. %Stride must be >= <Rows>."
msgstr ""

#: ../../../LangRef.rst:14644
msgid "'``llvm.matrix.columnwise.store.*``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:14656
msgid ""
"The '``llvm.matrix.columnwise.store.*``' intrinsic stores the matrix with "
"<Rows> rows and <Cols> columns embedded in %In, using a stride of %Stride "
"between columns. For two consecutive columns A and B, %Stride refers to the "
"distance (the number of elements) between the start of column A and the "
"start of column B."
msgstr ""

#: ../../../LangRef.rst:14665
msgid ""
"The <Rows> and <Cols> arguments must be constant integers. The vector "
"argument %In must have <Rows> * <Cols> elements. %Stride must be >= <Rows>."
msgstr ""

#: ../../../LangRef.rst:14669
msgid "Half Precision Floating-Point Intrinsics"
msgstr ""

#: ../../../LangRef.rst:14671
msgid ""
"For most target platforms, half precision floating-point is a storage-only "
"format. This means that it is a dense encoding (in memory) but does not "
"support computation in the format."
msgstr ""

#: ../../../LangRef.rst:14675
msgid ""
"This means that code must first load the half-precision floating-point value "
"as an i16, then convert it to float with :ref:`llvm.convert.from.fp16 "
"<int_convert_from_fp16>`. Computation can then be performed on the float "
"value (including extending to double etc). To store the value back to "
"memory, it is first converted to float if needed, then converted to i16 "
"with :ref:`llvm.convert.to.fp16 <int_convert_to_fp16>`, then storing as an "
"i16 value."
msgstr ""

#: ../../../LangRef.rst:14687
msgid "'``llvm.convert.to.fp16``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:14700
msgid ""
"The '``llvm.convert.to.fp16``' intrinsic function performs a conversion from "
"a conventional floating-point type to half precision floating-point format."
msgstr ""

#: ../../../LangRef.rst:14706 ../../../LangRef.rst:14747
msgid ""
"The intrinsic function contains single argument - the value to be converted."
msgstr ""

#: ../../../LangRef.rst:14712
msgid ""
"The '``llvm.convert.to.fp16``' intrinsic function performs a conversion from "
"a conventional floating-point format to half precision floating-point "
"format. The return value is an ``i16`` which contains the converted number."
msgstr ""

#: ../../../LangRef.rst:14727
msgid "'``llvm.convert.from.fp16``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:14740
msgid ""
"The '``llvm.convert.from.fp16``' intrinsic function performs a conversion "
"from half precision floating-point format to single precision floating-point "
"format."
msgstr ""

#: ../../../LangRef.rst:14753
msgid ""
"The '``llvm.convert.from.fp16``' intrinsic function performs a conversion "
"from half single precision floating-point format to single precision "
"floating-point format. The input half-float value is represented by an "
"``i16`` value."
msgstr ""

#: ../../../LangRef.rst:14769
msgid "Debugger Intrinsics"
msgstr ""

#: ../../../LangRef.rst:14771
msgid ""
"The LLVM debugger intrinsics (which all start with ``llvm.dbg.`` prefix), "
"are described in the `LLVM Source Level Debugging <SourceLevelDebugging."
"html#format-common-intrinsics>`_ document."
msgstr ""

#: ../../../LangRef.rst:14777
msgid "Exception Handling Intrinsics"
msgstr ""

#: ../../../LangRef.rst:14779
msgid ""
"The LLVM exception handling intrinsics (which all start with ``llvm.eh.`` "
"prefix), are described in the `LLVM Exception Handling <ExceptionHandling."
"html#format-common-intrinsics>`_ document."
msgstr ""

#: ../../../LangRef.rst:14786
msgid "Trampoline Intrinsics"
msgstr ""

#: ../../../LangRef.rst:14788
msgid ""
"These intrinsics make it possible to excise one parameter, marked with the :"
"ref:`nest <nest>` attribute, from a function. The result is a callable "
"function pointer lacking the nest parameter - the caller does not need to "
"provide a value for it. Instead, the value to use is stored in advance in a "
"\"trampoline\", a block of memory usually allocated on the stack, which also "
"contains code to splice the nest value into the argument list. This is used "
"to implement the GCC nested function address extension."
msgstr ""

#: ../../../LangRef.rst:14797
msgid ""
"For example, if the function is ``i32 f(i8* nest %c, i32 %x, i32 %y)`` then "
"the resulting function pointer has signature ``i32 (i32, i32)*``. It can be "
"created as follows:"
msgstr ""

#: ../../../LangRef.rst:14809
msgid ""
"The call ``%val = call i32 %fp(i32 %x, i32 %y)`` is then equivalent to "
"``%val = call i32 %f(i8* %nval, i32 %x, i32 %y)``."
msgstr ""

#: ../../../LangRef.rst:14815
msgid "'``llvm.init.trampoline``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:14827
msgid ""
"This fills the memory pointed to by ``tramp`` with executable code, turning "
"it into a trampoline."
msgstr ""

#: ../../../LangRef.rst:14833
msgid ""
"The ``llvm.init.trampoline`` intrinsic takes three arguments, all pointers. "
"The ``tramp`` argument must point to a sufficiently large and sufficiently "
"aligned block of memory; this memory is written to by the intrinsic. Note "
"that the size and the alignment are target-specific - LLVM currently "
"provides no portable way of determining them, so a front-end that generates "
"this intrinsic needs to have some target-specific knowledge. The ``func`` "
"argument must hold a function bitcast to an ``i8*``."
msgstr ""

#: ../../../LangRef.rst:14845
msgid ""
"The block of memory pointed to by ``tramp`` is filled with target dependent "
"code, turning it into a function. Then ``tramp`` needs to be passed to :ref:"
"`llvm.adjust.trampoline <int_at>` to get a pointer which can be :ref:"
"`bitcast (to a new function) and called <int_trampoline>`. The new "
"function's signature is the same as that of ``func`` with any arguments "
"marked with the ``nest`` attribute removed. At most one such ``nest`` "
"argument is allowed, and it must be of pointer type. Calling the new "
"function is equivalent to calling ``func`` with the same argument list, but "
"with ``nval`` used for the missing ``nest`` argument. If, after calling "
"``llvm.init.trampoline``, the memory pointed to by ``tramp`` is modified, "
"then the effect of any later call to the returned function pointer is "
"undefined."
msgstr ""

#: ../../../LangRef.rst:14861
msgid "'``llvm.adjust.trampoline``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:14873
msgid ""
"This performs any required machine-specific adjustment to the address of a "
"trampoline (passed as ``tramp``)."
msgstr ""

#: ../../../LangRef.rst:14879
msgid ""
"``tramp`` must point to a block of memory which already has trampoline code "
"filled in by a previous call to :ref:`llvm.init.trampoline <int_it>`."
msgstr ""

#: ../../../LangRef.rst:14886
msgid ""
"On some architectures the address of the code to be executed needs to be "
"different than the address where the trampoline is actually stored. This "
"intrinsic returns the executable address corresponding to ``tramp`` after "
"performing the required machine specific adjustments. The pointer returned "
"can then be :ref:`bitcast and executed <int_trampoline>`."
msgstr ""

#: ../../../LangRef.rst:14895
msgid "Masked Vector Load and Store Intrinsics"
msgstr ""

#: ../../../LangRef.rst:14897
msgid ""
"LLVM provides intrinsics for predicated vector load and store operations. "
"The predicate is specified by a mask operand, which holds one bit per vector "
"element, switching the associated vector lane on or off. The memory "
"addresses corresponding to the \"off\" lanes are not accessed. When all bits "
"of the mask are on, the intrinsic is identical to a regular vector load or "
"store. When all bits are off, no memory is accessed."
msgstr ""

#: ../../../LangRef.rst:14902
msgid "'``llvm.masked.load.*``' Intrinsics"
msgstr ""

#: ../../../LangRef.rst:14906
msgid ""
"This is an overloaded intrinsic. The loaded data is a vector of any integer, "
"floating-point or pointer data type."
msgstr ""

#: ../../../LangRef.rst:14920
msgid ""
"Reads a vector from memory according to the provided mask. The mask holds a "
"bit for each vector lane, and is used to prevent memory accesses to the "
"masked-off lanes. The masked-off lanes in the result vector are taken from "
"the corresponding lanes of the '``passthru``' operand."
msgstr ""

#: ../../../LangRef.rst:14926
msgid ""
"The first operand is the base pointer for the load. The second operand is "
"the alignment of the source location. It must be a constant integer value. "
"The third operand, mask, is a vector of boolean values with the same number "
"of elements as the return type. The fourth is a pass-through value that is "
"used to fill the masked-off lanes of the result. The return type, underlying "
"type of the base pointer and the type of the '``passthru``' operand are the "
"same vector types."
msgstr ""

#: ../../../LangRef.rst:14932
msgid ""
"The '``llvm.masked.load``' intrinsic is designed for conditional reading of "
"selected vector elements in a single IR operation. It is useful for targets "
"that support vector masked loads and allows vectorizing predicated basic "
"blocks on these targets. Other targets may support this intrinsic "
"differently, for example by lowering it into a sequence of branches that "
"guard scalar load operations. The result of this operation is equivalent to "
"a regular vector load instruction followed by a 'select' between the loaded "
"and the passthru values, predicated on the same mask. However, using this "
"intrinsic prevents exceptions on memory access to masked-off lanes."
msgstr ""

#: ../../../LangRef.rst:14947
msgid "'``llvm.masked.store.*``' Intrinsics"
msgstr ""

#: ../../../LangRef.rst:14951
msgid ""
"This is an overloaded intrinsic. The data stored in memory is a vector of "
"any integer, floating-point or pointer data type."
msgstr ""

#: ../../../LangRef.rst:14965
msgid ""
"Writes a vector to memory according to the provided mask. The mask holds a "
"bit for each vector lane, and is used to prevent memory accesses to the "
"masked-off lanes."
msgstr ""

#: ../../../LangRef.rst:14970
msgid ""
"The first operand is the vector value to be written to memory. The second "
"operand is the base pointer for the store, it has the same underlying type "
"as the value operand. The third operand is the alignment of the destination "
"location. The fourth operand, mask, is a vector of boolean values. The types "
"of the mask and the value operand must have the same number of vector "
"elements."
msgstr ""

#: ../../../LangRef.rst:14976
msgid ""
"The '``llvm.masked.store``' intrinsics is designed for conditional writing "
"of selected vector elements in a single IR operation. It is useful for "
"targets that support vector masked store and allows vectorizing predicated "
"basic blocks on these targets. Other targets may support this intrinsic "
"differently, for example by lowering it into a sequence of branches that "
"guard scalar store operations. The result of this operation is equivalent to "
"a load-modify-store sequence. However, using this intrinsic prevents "
"exceptions and data races on memory access to masked-off lanes."
msgstr ""

#: ../../../LangRef.rst:14990
msgid "Masked Vector Gather and Scatter Intrinsics"
msgstr ""

#: ../../../LangRef.rst:14992
msgid ""
"LLVM provides intrinsics for vector gather and scatter operations. They are "
"similar to :ref:`Masked Vector Load and Store <int_mload_mstore>`, except "
"they are designed for arbitrary memory accesses, rather than sequential "
"memory accesses. Gather and scatter also employ a mask operand, which holds "
"one bit per vector element, switching the associated vector lane on or off. "
"The memory addresses corresponding to the \"off\" lanes are not accessed. "
"When all bits are off, no memory is accessed."
msgstr ""

#: ../../../LangRef.rst:14997
msgid "'``llvm.masked.gather.*``' Intrinsics"
msgstr ""

#: ../../../LangRef.rst:15001
msgid ""
"This is an overloaded intrinsic. The loaded data are multiple scalar values "
"of any integer, floating-point or pointer data type gathered together into "
"one vector."
msgstr ""

#: ../../../LangRef.rst:15012
msgid ""
"Reads scalar values from arbitrary memory locations and gathers them into "
"one vector. The memory locations are provided in the vector of pointers "
"'``ptrs``'. The memory is accessed according to the provided mask. The mask "
"holds a bit for each vector lane, and is used to prevent memory accesses to "
"the masked-off lanes. The masked-off lanes in the result vector are taken "
"from the corresponding lanes of the '``passthru``' operand."
msgstr ""

#: ../../../LangRef.rst:15018
msgid ""
"The first operand is a vector of pointers which holds all memory addresses "
"to read. The second operand is an alignment of the source addresses. It must "
"be a constant integer value. The third operand, mask, is a vector of boolean "
"values with the same number of elements as the return type. The fourth is a "
"pass-through value that is used to fill the masked-off lanes of the result. "
"The return type, underlying type of the vector of pointers and the type of "
"the '``passthru``' operand are the same vector types."
msgstr ""

#: ../../../LangRef.rst:15024
msgid ""
"The '``llvm.masked.gather``' intrinsic is designed for conditional reading "
"of multiple scalar values from arbitrary memory locations in a single IR "
"operation. It is useful for targets that support vector masked gathers and "
"allows vectorizing basic blocks with data and control divergence. Other "
"targets may support this intrinsic differently, for example by lowering it "
"into a sequence of scalar load operations. The semantics of this operation "
"are equivalent to a sequence of conditional scalar loads with subsequent "
"gathering all loaded values into a single vector. The mask restricts memory "
"access to certain lanes and facilitates vectorization of predicated basic "
"blocks."
msgstr ""

#: ../../../LangRef.rst:15051
msgid "'``llvm.masked.scatter.*``' Intrinsics"
msgstr ""

#: ../../../LangRef.rst:15055
msgid ""
"This is an overloaded intrinsic. The data stored in memory is a vector of "
"any integer, floating-point or pointer data type. Each vector element is "
"stored in an arbitrary memory address. Scatter with overlapping addresses is "
"guaranteed to be ordered from least-significant to most-significant element."
msgstr ""

#: ../../../LangRef.rst:15066
msgid ""
"Writes each element from the value vector to the corresponding memory "
"address. The memory addresses are represented as a vector of pointers. "
"Writing is done according to the provided mask. The mask holds a bit for "
"each vector lane, and is used to prevent memory accesses to the masked-off "
"lanes."
msgstr ""

#: ../../../LangRef.rst:15071
msgid ""
"The first operand is a vector value to be written to memory. The second "
"operand is a vector of pointers, pointing to where the value elements should "
"be stored. It has the same underlying type as the value operand. The third "
"operand is an alignment of the destination addresses. The fourth operand, "
"mask, is a vector of boolean values. The types of the mask and the value "
"operand must have the same number of vector elements."
msgstr ""

#: ../../../LangRef.rst:15077
msgid ""
"The '``llvm.masked.scatter``' intrinsics is designed for writing selected "
"vector elements to arbitrary memory addresses in a single IR operation. The "
"operation may be conditional, when not all bits in the mask are switched on. "
"It is useful for targets that support vector masked scatter and allows "
"vectorizing basic blocks with data and control divergence. Other targets may "
"support this intrinsic differently, for example by lowering it into a "
"sequence of branches that guard scalar store operations."
msgstr ""

#: ../../../LangRef.rst:15101
msgid "Masked Vector Expanding Load and Compressing Store Intrinsics"
msgstr ""

#: ../../../LangRef.rst:15103
msgid ""
"LLVM provides intrinsics for expanding load and compressing store "
"operations. Data selected from a vector according to a mask is stored in "
"consecutive memory addresses (compressed store), and vice-versa (expanding "
"load). These operations effective map to \"if (cond.i) a[j++] = v.i\" and "
"\"if (cond.i) v.i = a[j++]\" patterns, respectively. Note that when the mask "
"starts with '1' bits followed by '0' bits, these operations are identical "
"to :ref:`llvm.masked.store <int_mstore>` and :ref:`llvm.masked.load "
"<int_mload>`."
msgstr ""

#: ../../../LangRef.rst:15108
msgid "'``llvm.masked.expandload.*``' Intrinsics"
msgstr ""

#: ../../../LangRef.rst:15112
msgid ""
"This is an overloaded intrinsic. Several values of integer, floating point "
"or pointer data type are loaded from consecutive memory addresses and stored "
"into the elements of a vector according to the mask."
msgstr ""

#: ../../../LangRef.rst:15122
msgid ""
"Reads a number of scalar values sequentially from memory location provided "
"in '``ptr``' and spreads them in a vector. The '``mask``' holds a bit for "
"each vector lane. The number of elements read from memory is equal to the "
"number of '1' bits in the mask. The loaded elements are positioned in the "
"destination vector according to the sequence of '1' and '0' bits in the "
"mask. E.g., if the mask vector is '10010001', \"explandload\" reads 3 values "
"from memory addresses ptr, ptr+1, ptr+2 and places them in lanes 0, 3 and 7 "
"accordingly. The masked-off lanes are filled by elements from the "
"corresponding lanes of the '``passthru``' operand."
msgstr ""

#: ../../../LangRef.rst:15128
msgid ""
"The first operand is the base pointer for the load. It has the same "
"underlying type as the element of the returned vector. The second operand, "
"mask, is a vector of boolean values with the same number of elements as the "
"return type. The third is a pass-through value that is used to fill the "
"masked-off lanes of the result. The return type and the type of the "
"'``passthru``' operand have the same vector type."
msgstr ""

#: ../../../LangRef.rst:15133
msgid ""
"The '``llvm.masked.expandload``' intrinsic is designed for reading multiple "
"scalar values from adjacent memory addresses into possibly non-adjacent "
"vector lanes. It is useful for targets that support vector expanding loads "
"and allows vectorizing loop with cross-iteration dependency like in the "
"following example:"
msgstr ""

#: ../../../LangRef.rst:15160
msgid ""
"Other targets may support this intrinsic differently, for example, by "
"lowering it into a sequence of conditional scalar load operations and "
"shuffles. If all mask elements are '1', the intrinsic behavior is equivalent "
"to the regular unmasked vector load."
msgstr ""

#: ../../../LangRef.rst:15166
msgid "'``llvm.masked.compressstore.*``' Intrinsics"
msgstr ""

#: ../../../LangRef.rst:15170
msgid ""
"This is an overloaded intrinsic. A number of scalar values of integer, "
"floating point or pointer data type are collected from an input vector and "
"stored into adjacent memory addresses. A mask defines which elements to "
"collect from the vector."
msgstr ""

#: ../../../LangRef.rst:15180
msgid ""
"Selects elements from input vector '``value``' according to the '``mask``'. "
"All selected elements are written into adjacent memory addresses starting at "
"address '`ptr`', from lower to higher. The mask holds a bit for each vector "
"lane, and is used to select elements to be stored. The number of elements to "
"be stored is equal to the number of active bits in the mask."
msgstr ""

#: ../../../LangRef.rst:15185
msgid ""
"The first operand is the input vector, from which elements are collected and "
"written to memory. The second operand is the base pointer for the store, it "
"has the same underlying type as the element of the input vector operand. The "
"third operand is the mask, a vector of boolean values. The mask and the "
"input vector must have the same number of vector elements."
msgstr ""

#: ../../../LangRef.rst:15191
msgid ""
"The '``llvm.masked.compressstore``' intrinsic is designed for compressing "
"data in memory. It allows to collect elements from possibly non-adjacent "
"lanes of a vector and store them contiguously in memory in one IR operation. "
"It is useful for targets that support compressing store operations and "
"allows vectorizing loops with cross-iteration dependences like in the "
"following example:"
msgstr ""

#: ../../../LangRef.rst:15217
msgid ""
"Other targets may support this intrinsic differently, for example, by "
"lowering it into a sequence of branches that guard scalar store operations."
msgstr ""

#: ../../../LangRef.rst:15221
msgid "Memory Use Markers"
msgstr ""

#: ../../../LangRef.rst:15223
msgid ""
"This class of intrinsics provides information about the lifetime of memory "
"objects and ranges where variables are immutable."
msgstr ""

#: ../../../LangRef.rst:15229
msgid "'``llvm.lifetime.start``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:15241
msgid ""
"The '``llvm.lifetime.start``' intrinsic specifies the start of a memory "
"object's lifetime."
msgstr ""

#: ../../../LangRef.rst:15247 ../../../LangRef.rst:15280
#: ../../../LangRef.rst:15312
msgid ""
"The first argument is a constant integer representing the size of the "
"object, or -1 if it is variable sized. The second argument is a pointer to "
"the object."
msgstr ""

#: ../../../LangRef.rst:15254
msgid ""
"This intrinsic indicates that before this point in the code, the value of "
"the memory pointed to by ``ptr`` is dead. This means that it is known to "
"never be used and has an undefined value. A load from the pointer that "
"precedes this intrinsic can be replaced with ``'undef'``."
msgstr ""

#: ../../../LangRef.rst:15262
msgid "'``llvm.lifetime.end``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:15274
msgid ""
"The '``llvm.lifetime.end``' intrinsic specifies the end of a memory object's "
"lifetime."
msgstr ""

#: ../../../LangRef.rst:15287
msgid ""
"This intrinsic indicates that after this point in the code, the value of the "
"memory pointed to by ``ptr`` is dead. This means that it is known to never "
"be used and has an undefined value. Any stores into the memory object "
"following this intrinsic may be removed as dead."
msgstr ""

#: ../../../LangRef.rst:15293
msgid "'``llvm.invariant.start``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:15297 ../../../LangRef.rst:15328
msgid ""
"This is an overloaded intrinsic. The memory object can belong to any address "
"space."
msgstr ""

#: ../../../LangRef.rst:15306
msgid ""
"The '``llvm.invariant.start``' intrinsic specifies that the contents of a "
"memory object will not change."
msgstr ""

#: ../../../LangRef.rst:15319
msgid ""
"This intrinsic indicates that until an ``llvm.invariant.end`` that uses the "
"return value, the referenced memory location is constant and unchanging."
msgstr ""

#: ../../../LangRef.rst:15324
msgid "'``llvm.invariant.end``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:15337
msgid ""
"The '``llvm.invariant.end``' intrinsic specifies that the contents of a "
"memory object are mutable."
msgstr ""

#: ../../../LangRef.rst:15343
msgid ""
"The first argument is the matching ``llvm.invariant.start`` intrinsic. The "
"second argument is a constant integer representing the size of the object, "
"or -1 if it is variable sized and the third argument is a pointer to the "
"object."
msgstr ""

#: ../../../LangRef.rst:15351
msgid "This intrinsic indicates that the memory is mutable again."
msgstr ""

#: ../../../LangRef.rst:15354
msgid "'``llvm.launder.invariant.group``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:15358 ../../../LangRef.rst:15394
msgid ""
"This is an overloaded intrinsic. The memory object can belong to any address "
"space. The returned pointer must belong to the same address space as the "
"argument."
msgstr ""

#: ../../../LangRef.rst:15369
msgid ""
"The '``llvm.launder.invariant.group``' intrinsic can be used when an "
"invariant established by ``invariant.group`` metadata no longer holds, to "
"obtain a new pointer value that carries fresh invariant group information. "
"It is an experimental intrinsic, which means that its semantics might change "
"in the future."
msgstr ""

#: ../../../LangRef.rst:15379
msgid ""
"The ``llvm.launder.invariant.group`` takes only one argument, which is a "
"pointer to the memory."
msgstr ""

#: ../../../LangRef.rst:15385
msgid ""
"Returns another pointer that aliases its argument but which is considered "
"different for the purposes of ``load``/``store`` ``invariant.group`` "
"metadata. It does not read any accessible memory and the execution can be "
"speculated."
msgstr ""

#: ../../../LangRef.rst:15390
msgid "'``llvm.strip.invariant.group``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:15405
msgid ""
"The '``llvm.strip.invariant.group``' intrinsic can be used when an invariant "
"established by ``invariant.group`` metadata no longer holds, to obtain a new "
"pointer value that does not carry the invariant information. It is an "
"experimental intrinsic, which means that its semantics might change in the "
"future."
msgstr ""

#: ../../../LangRef.rst:15414
msgid ""
"The ``llvm.strip.invariant.group`` takes only one argument, which is a "
"pointer to the memory."
msgstr ""

#: ../../../LangRef.rst:15420
msgid ""
"Returns another pointer that aliases its argument but which has no "
"associated ``invariant.group`` metadata. It does not read any memory and can "
"be speculated."
msgstr ""

#: ../../../LangRef.rst:15429
msgid "Constrained Floating-Point Intrinsics"
msgstr ""

#: ../../../LangRef.rst:15431
msgid ""
"These intrinsics are used to provide special handling of floating-point "
"operations when specific rounding mode or floating-point exception behavior "
"is required.  By default, LLVM optimization passes assume that the rounding "
"mode is round-to-nearest and that floating-point exceptions will not be "
"monitored. Constrained FP intrinsics are used to support non-default "
"rounding modes and accurately preserve exception behavior without "
"compromising LLVM's ability to optimize FP code when the default behavior is "
"used."
msgstr ""

#: ../../../LangRef.rst:15439
msgid ""
"If any FP operation in a function is constrained then they all must be "
"constrained. This is required for correct LLVM IR. Optimizations that move "
"code around can create miscompiles if mixing of constrained and normal "
"operations is done. The correct way to mix constrained and less constrained "
"operations is to use the rounding mode and exception handling metadata to "
"mark constrained intrinsics as having LLVM's default behavior."
msgstr ""

#: ../../../LangRef.rst:15446
msgid ""
"Each of these intrinsics corresponds to a normal floating-point operation. "
"The data arguments and the return value are the same as the corresponding FP "
"operation."
msgstr ""

#: ../../../LangRef.rst:15450
msgid ""
"The rounding mode argument is a metadata string specifying what assumptions, "
"if any, the optimizer can make when transforming constant values. Some "
"constrained FP intrinsics omit this argument. If required by the intrinsic, "
"this argument must be one of the following strings:"
msgstr ""

#: ../../../LangRef.rst:15463
msgid ""
"If this argument is \"round.dynamic\" optimization passes must assume that "
"the rounding mode is unknown and may change at runtime.  No transformations "
"that depend on rounding mode may be performed in this case."
msgstr ""

#: ../../../LangRef.rst:15467
msgid ""
"The other possible values for the rounding mode argument correspond to the "
"similarly named IEEE rounding modes.  If the argument is any of these values "
"optimization passes may perform transformations as long as they are "
"consistent with the specified rounding mode."
msgstr ""

#: ../../../LangRef.rst:15472
msgid ""
"For example, 'x-0'->'x' is not a valid transformation if the rounding mode "
"is \"round.downward\" or \"round.dynamic\" because if the value of 'x' is +0 "
"then 'x-0' should evaluate to '-0' when rounding downward.  However, this "
"transformation is legal for all other rounding modes."
msgstr ""

#: ../../../LangRef.rst:15477
msgid ""
"For values other than \"round.dynamic\" optimization passes may assume that "
"the actual runtime rounding mode (as defined in a target-specific manner) "
"matches the specified rounding mode, but this is not guaranteed.  Using a "
"specific non-dynamic rounding mode which does not match the actual rounding "
"mode at runtime results in undefined behavior."
msgstr ""

#: ../../../LangRef.rst:15483
msgid ""
"The exception behavior argument is a metadata string describing the floating "
"point exception semantics that required for the intrinsic. This argument "
"must be one of the following strings:"
msgstr ""

#: ../../../LangRef.rst:15493
msgid ""
"If this argument is \"fpexcept.ignore\" optimization passes may assume that "
"the exception status flags will not be read and that floating-point "
"exceptions will be masked.  This allows transformations to be performed that "
"may change the exception semantics of the original code.  For example, FP "
"operations may be speculatively executed in this case whereas they must not "
"be for either of the other possible values of this argument."
msgstr ""

#: ../../../LangRef.rst:15500
msgid ""
"If the exception behavior argument is \"fpexcept.maytrap\" optimization "
"passes must avoid transformations that may raise exceptions that would not "
"have been raised by the original code (such as speculatively executing FP "
"operations), but passes are not required to preserve all exceptions that are "
"implied by the original code.  For example, exceptions may be potentially "
"hidden by constant folding."
msgstr ""

#: ../../../LangRef.rst:15507
msgid ""
"If the exception behavior argument is \"fpexcept.strict\" all "
"transformations must strictly preserve the floating-point exception "
"semantics of the original code. Any FP exception that would have been raised "
"by the original code must be raised by the transformed code, and the "
"transformed code must not raise any FP exceptions that would not have been "
"raised by the original code.  This is the exception behavior argument that "
"will be used if the code being compiled reads the FP exception status flags, "
"but this mode can also be used with code that unmasks FP exceptions."
msgstr ""

#: ../../../LangRef.rst:15516
msgid ""
"The number and order of floating-point exceptions is NOT guaranteed.  For "
"example, a series of FP operations that each may raise exceptions may be "
"vectorized into a single instruction that raises each unique exception a "
"single time."
msgstr ""

#: ../../../LangRef.rst:15521
msgid ""
"Proper :ref:`function attributes <fnattrs>` usage is required for the "
"constrained intrinsics to function correctly."
msgstr ""

#: ../../../LangRef.rst:15524
msgid ""
"All function *calls* done in a function that uses constrained floating point "
"intrinsics must have the ``strictfp`` attribute."
msgstr ""

#: ../../../LangRef.rst:15527
msgid ""
"All function *definitions* that use constrained floating point intrinsics "
"must have the ``strictfp`` attribute."
msgstr ""

#: ../../../LangRef.rst:15531
msgid "'``llvm.experimental.constrained.fadd``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:15546
msgid ""
"The '``llvm.experimental.constrained.fadd``' intrinsic returns the sum of "
"its two operands."
msgstr ""

#: ../../../LangRef.rst:15553
msgid ""
"The first two arguments to the '``llvm.experimental.constrained.fadd``' "
"intrinsic must be :ref:`floating-point <t_floating>` or :ref:`vector "
"<t_vector>` of floating-point values. Both arguments must have identical "
"types."
msgstr ""

#: ../../../LangRef.rst:15557 ../../../LangRef.rst:15594
#: ../../../LangRef.rst:15631 ../../../LangRef.rst:15668
#: ../../../LangRef.rst:16146 ../../../LangRef.rst:16186
msgid ""
"The third and fourth arguments specify the rounding mode and exception "
"behavior as described above."
msgstr ""

#: ../../../LangRef.rst:15563
msgid ""
"The value produced is the floating-point sum of the two value operands and "
"has the same type as the operands."
msgstr ""

#: ../../../LangRef.rst:15568
msgid "'``llvm.experimental.constrained.fsub``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:15583
msgid ""
"The '``llvm.experimental.constrained.fsub``' intrinsic returns the "
"difference of its two operands."
msgstr ""

#: ../../../LangRef.rst:15590
msgid ""
"The first two arguments to the '``llvm.experimental.constrained.fsub``' "
"intrinsic must be :ref:`floating-point <t_floating>` or :ref:`vector "
"<t_vector>` of floating-point values. Both arguments must have identical "
"types."
msgstr ""

#: ../../../LangRef.rst:15600
msgid ""
"The value produced is the floating-point difference of the two value "
"operands and has the same type as the operands."
msgstr ""

#: ../../../LangRef.rst:15605
msgid "'``llvm.experimental.constrained.fmul``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:15620
msgid ""
"The '``llvm.experimental.constrained.fmul``' intrinsic returns the product "
"of its two operands."
msgstr ""

#: ../../../LangRef.rst:15627
msgid ""
"The first two arguments to the '``llvm.experimental.constrained.fmul``' "
"intrinsic must be :ref:`floating-point <t_floating>` or :ref:`vector "
"<t_vector>` of floating-point values. Both arguments must have identical "
"types."
msgstr ""

#: ../../../LangRef.rst:15637
msgid ""
"The value produced is the floating-point product of the two value operands "
"and has the same type as the operands."
msgstr ""

#: ../../../LangRef.rst:15642
msgid "'``llvm.experimental.constrained.fdiv``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:15657
msgid ""
"The '``llvm.experimental.constrained.fdiv``' intrinsic returns the quotient "
"of its two operands."
msgstr ""

#: ../../../LangRef.rst:15664
msgid ""
"The first two arguments to the '``llvm.experimental.constrained.fdiv``' "
"intrinsic must be :ref:`floating-point <t_floating>` or :ref:`vector "
"<t_vector>` of floating-point values. Both arguments must have identical "
"types."
msgstr ""

#: ../../../LangRef.rst:15674
msgid ""
"The value produced is the floating-point quotient of the two value operands "
"and has the same type as the operands."
msgstr ""

#: ../../../LangRef.rst:15679
msgid "'``llvm.experimental.constrained.frem``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:15694
msgid ""
"The '``llvm.experimental.constrained.frem``' intrinsic returns the remainder "
"from the division of its two operands."
msgstr ""

#: ../../../LangRef.rst:15701
msgid ""
"The first two arguments to the '``llvm.experimental.constrained.frem``' "
"intrinsic must be :ref:`floating-point <t_floating>` or :ref:`vector "
"<t_vector>` of floating-point values. Both arguments must have identical "
"types."
msgstr ""

#: ../../../LangRef.rst:15705
msgid ""
"The third and fourth arguments specify the rounding mode and exception "
"behavior as described above.  The rounding mode argument has no effect, "
"since the result of frem is never rounded, but the argument is included for "
"consistency with the other constrained floating-point intrinsics."
msgstr ""

#: ../../../LangRef.rst:15713
msgid ""
"The value produced is the floating-point remainder from the division of the "
"two value operands and has the same type as the operands.  The remainder has "
"the same sign as the dividend."
msgstr ""

#: ../../../LangRef.rst:15718
msgid "'``llvm.experimental.constrained.fma``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:15733
msgid ""
"The '``llvm.experimental.constrained.fma``' intrinsic returns the result of "
"a fused-multiply-add operation on its operands."
msgstr ""

#: ../../../LangRef.rst:15739
msgid ""
"The first three arguments to the '``llvm.experimental.constrained.fma``' "
"intrinsic must be :ref:`floating-point <t_floating>` or :ref:`vector "
"<t_vector>` of floating-point values. All arguments must have identical "
"types."
msgstr ""

#: ../../../LangRef.rst:15743
msgid ""
"The fourth and fifth arguments specify the rounding mode and exception "
"behavior as described above."
msgstr ""

#: ../../../LangRef.rst:15749
msgid ""
"The result produced is the product of the first two operands added to the "
"third operand computed with infinite precision, and then rounded to the "
"target precision."
msgstr ""

#: ../../../LangRef.rst:15754
msgid "'``llvm.experimental.constrained.fptoui``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:15768
msgid ""
"The '``llvm.experimental.constrained.fptoui``' intrinsic converts a floating-"
"point ``value`` to its unsigned integer equivalent of type ``ty2``."
msgstr ""

#: ../../../LangRef.rst:15774
msgid ""
"The first argument to the '``llvm.experimental.constrained.fptoui``' "
"intrinsic must be :ref:`floating point <t_floating>` or :ref:`vector "
"<t_vector>` of floating point values."
msgstr ""

#: ../../../LangRef.rst:15778 ../../../LangRef.rst:15811
#: ../../../LangRef.rst:15953 ../../../LangRef.rst:16772
#: ../../../LangRef.rst:16805 ../../../LangRef.rst:16838
#: ../../../LangRef.rst:16876 ../../../LangRef.rst:16914
#: ../../../LangRef.rst:16948
msgid ""
"The second argument specifies the exception behavior as described above."
msgstr ""

#: ../../../LangRef.rst:15783
msgid ""
"The result produced is an unsigned integer converted from the floating point "
"operand. The value is truncated, so it is rounded towards zero."
msgstr ""

#: ../../../LangRef.rst:15787
msgid "'``llvm.experimental.constrained.fptosi``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:15801
msgid ""
"The '``llvm.experimental.constrained.fptosi``' intrinsic converts :ref:"
"`floating-point <t_floating>` ``value`` to type ``ty2``."
msgstr ""

#: ../../../LangRef.rst:15807
msgid ""
"The first argument to the '``llvm.experimental.constrained.fptosi``' "
"intrinsic must be :ref:`floating point <t_floating>` or :ref:`vector "
"<t_vector>` of floating point values."
msgstr ""

#: ../../../LangRef.rst:15816
msgid ""
"The result produced is a signed integer converted from the floating point "
"operand. The value is truncated, so it is rounded towards zero."
msgstr ""

#: ../../../LangRef.rst:15820
msgid "'``llvm.experimental.constrained.uitofp``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:15835
msgid ""
"The '``llvm.experimental.constrained.uitofp``' intrinsic converts an "
"unsigned integer ``value`` to a floating-point of type ``ty2``."
msgstr ""

#: ../../../LangRef.rst:15841
msgid ""
"The first argument to the '``llvm.experimental.constrained.uitofp``' "
"intrinsic must be an :ref:`integer <t_integer>` or :ref:`vector <t_vector>` "
"of integer values."
msgstr ""

#: ../../../LangRef.rst:15845 ../../../LangRef.rst:15881
#: ../../../LangRef.rst:15918 ../../../LangRef.rst:16109
#: ../../../LangRef.rst:16221 ../../../LangRef.rst:16257
#: ../../../LangRef.rst:16293 ../../../LangRef.rst:16329
#: ../../../LangRef.rst:16364 ../../../LangRef.rst:16400
#: ../../../LangRef.rst:16435 ../../../LangRef.rst:16471
#: ../../../LangRef.rst:16514 ../../../LangRef.rst:16562
#: ../../../LangRef.rst:16607
msgid ""
"The second and third arguments specify the rounding mode and exception "
"behavior as described above."
msgstr ""

#: ../../../LangRef.rst:15851 ../../../LangRef.rst:15887
msgid ""
"An inexact floating-point exception will be raised if rounding is required. "
"Any result produced is a floating point value converted from the input "
"integer operand."
msgstr ""

#: ../../../LangRef.rst:15856
msgid "'``llvm.experimental.constrained.sitofp``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:15871
msgid ""
"The '``llvm.experimental.constrained.sitofp``' intrinsic converts a signed "
"integer ``value`` to a floating-point of type ``ty2``."
msgstr ""

#: ../../../LangRef.rst:15877
msgid ""
"The first argument to the '``llvm.experimental.constrained.sitofp``' "
"intrinsic must be an :ref:`integer <t_integer>` or :ref:`vector <t_vector>` "
"of integer values."
msgstr ""

#: ../../../LangRef.rst:15892
msgid "'``llvm.experimental.constrained.fptrunc``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:15907
msgid ""
"The '``llvm.experimental.constrained.fptrunc``' intrinsic truncates "
"``value`` to type ``ty2``."
msgstr ""

#: ../../../LangRef.rst:15913
msgid ""
"The first argument to the '``llvm.experimental.constrained.fptrunc``' "
"intrinsic must be :ref:`floating point <t_floating>` or :ref:`vector "
"<t_vector>` of floating point values. This argument must be larger in size "
"than the result."
msgstr ""

#: ../../../LangRef.rst:15924
msgid ""
"The result produced is a floating point value truncated to be smaller in "
"size than the operand."
msgstr ""

#: ../../../LangRef.rst:15928
msgid "'``llvm.experimental.constrained.fpext``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:15942
msgid ""
"The '``llvm.experimental.constrained.fpext``' intrinsic extends a floating-"
"point ``value`` to a larger floating-point value."
msgstr ""

#: ../../../LangRef.rst:15948
msgid ""
"The first argument to the '``llvm.experimental.constrained.fpext``' "
"intrinsic must be :ref:`floating point <t_floating>` or :ref:`vector "
"<t_vector>` of floating point values. This argument must be smaller in size "
"than the result."
msgstr ""

#: ../../../LangRef.rst:15958
msgid ""
"The result produced is a floating point value extended to be larger in size "
"than the operand. All restrictions that apply to the fpext instruction also "
"apply to this intrinsic."
msgstr ""

#: ../../../LangRef.rst:15963
msgid ""
"'``llvm.experimental.constrained.fcmp``' and '``llvm.experimental."
"constrained.fcmps``' Intrinsics"
msgstr ""

#: ../../../LangRef.rst:15982
msgid ""
"The '``llvm.experimental.constrained.fcmp``' and '``llvm.experimental."
"constrained.fcmps``' intrinsics return a boolean value or vector of boolean "
"values based on comparison of its operands."
msgstr ""

#: ../../../LangRef.rst:15993
msgid ""
"The '``llvm.experimental.constrained.fcmp``' intrinsic performs a quiet "
"comparison operation while the '``llvm.experimental.constrained.fcmps``' "
"intrinsic performs a signaling comparison operation."
msgstr ""

#: ../../../LangRef.rst:16000
msgid ""
"The first two arguments to the '``llvm.experimental.constrained.fcmp``' and "
"'``llvm.experimental.constrained.fcmps``' intrinsics must be :ref:`floating-"
"point <t_floating>` or :ref:`vector <t_vector>` of floating-point values. "
"Both arguments must have identical types."
msgstr ""

#: ../../../LangRef.rst:16005
msgid ""
"The third argument is the condition code indicating the kind of comparison "
"to perform. It must be a metadata string with one of the following values:"
msgstr ""

#: ../../../LangRef.rst:16008
msgid "\"``oeq``\": ordered and equal"
msgstr ""

#: ../../../LangRef.rst:16009
msgid "\"``ogt``\": ordered and greater than"
msgstr ""

#: ../../../LangRef.rst:16010
msgid "\"``oge``\": ordered and greater than or equal"
msgstr ""

#: ../../../LangRef.rst:16011
msgid "\"``olt``\": ordered and less than"
msgstr ""

#: ../../../LangRef.rst:16012
msgid "\"``ole``\": ordered and less than or equal"
msgstr ""

#: ../../../LangRef.rst:16013
msgid "\"``one``\": ordered and not equal"
msgstr ""

#: ../../../LangRef.rst:16014
msgid "\"``ord``\": ordered (no nans)"
msgstr ""

#: ../../../LangRef.rst:16015
msgid "\"``ueq``\": unordered or equal"
msgstr ""

#: ../../../LangRef.rst:16016
msgid "\"``ugt``\": unordered or greater than"
msgstr ""

#: ../../../LangRef.rst:16017
msgid "\"``uge``\": unordered or greater than or equal"
msgstr ""

#: ../../../LangRef.rst:16018
msgid "\"``ult``\": unordered or less than"
msgstr ""

#: ../../../LangRef.rst:16019
msgid "\"``ule``\": unordered or less than or equal"
msgstr ""

#: ../../../LangRef.rst:16020
msgid "\"``une``\": unordered or not equal"
msgstr ""

#: ../../../LangRef.rst:16021
msgid "\"``uno``\": unordered (either nans)"
msgstr ""

#: ../../../LangRef.rst:16023
msgid ""
"*Ordered* means that neither operand is a NAN while *unordered* means that "
"either operand may be a NAN."
msgstr ""

#: ../../../LangRef.rst:16026
msgid ""
"The fourth argument specifies the exception behavior as described above."
msgstr ""

#: ../../../LangRef.rst:16031
msgid ""
"``op1`` and ``op2`` are compared according to the condition code given as "
"the third argument. If the operands are vectors, then the vectors are "
"compared element by element. Each comparison performed always yields an :ref:"
"`i1 <t_integer>` result, as follows:"
msgstr ""

#: ../../../LangRef.rst:16036
msgid ""
"\"``oeq``\": yields ``true`` if both operands are not a NAN and ``op1`` is "
"equal to ``op2``."
msgstr ""

#: ../../../LangRef.rst:16038
msgid ""
"\"``ogt``\": yields ``true`` if both operands are not a NAN and ``op1`` is "
"greater than ``op2``."
msgstr ""

#: ../../../LangRef.rst:16040
msgid ""
"\"``oge``\": yields ``true`` if both operands are not a NAN and ``op1`` is "
"greater than or equal to ``op2``."
msgstr ""

#: ../../../LangRef.rst:16042
msgid ""
"\"``olt``\": yields ``true`` if both operands are not a NAN and ``op1`` is "
"less than ``op2``."
msgstr ""

#: ../../../LangRef.rst:16044
msgid ""
"\"``ole``\": yields ``true`` if both operands are not a NAN and ``op1`` is "
"less than or equal to ``op2``."
msgstr ""

#: ../../../LangRef.rst:16046
msgid ""
"\"``one``\": yields ``true`` if both operands are not a NAN and ``op1`` is "
"not equal to ``op2``."
msgstr ""

#: ../../../LangRef.rst:16048
msgid "\"``ord``\": yields ``true`` if both operands are not a NAN."
msgstr ""

#: ../../../LangRef.rst:16049
msgid ""
"\"``ueq``\": yields ``true`` if either operand is a NAN or ``op1`` is equal "
"to ``op2``."
msgstr ""

#: ../../../LangRef.rst:16051
msgid ""
"\"``ugt``\": yields ``true`` if either operand is a NAN or ``op1`` is "
"greater than ``op2``."
msgstr ""

#: ../../../LangRef.rst:16053
msgid ""
"\"``uge``\": yields ``true`` if either operand is a NAN or ``op1`` is "
"greater than or equal to ``op2``."
msgstr ""

#: ../../../LangRef.rst:16055
msgid ""
"\"``ult``\": yields ``true`` if either operand is a NAN or ``op1`` is less "
"than ``op2``."
msgstr ""

#: ../../../LangRef.rst:16057
msgid ""
"\"``ule``\": yields ``true`` if either operand is a NAN or ``op1`` is less "
"than or equal to ``op2``."
msgstr ""

#: ../../../LangRef.rst:16059
msgid ""
"\"``une``\": yields ``true`` if either operand is a NAN or ``op1`` is not "
"equal to ``op2``."
msgstr ""

#: ../../../LangRef.rst:16061
msgid "\"``uno``\": yields ``true`` if either operand is a NAN."
msgstr ""

#: ../../../LangRef.rst:16063
msgid ""
"The quiet comparison operation performed by '``llvm.experimental.constrained."
"fcmp``' will only raise an exception if either operand is a SNAN.  The "
"signaling comparison operation performed by '``llvm.experimental.constrained."
"fcmps``' will raise an exception if either operand is a NAN (QNAN or SNAN)."
msgstr ""

#: ../../../LangRef.rst:16070
msgid "Constrained libm-equivalent Intrinsics"
msgstr ""

#: ../../../LangRef.rst:16072
msgid ""
"In addition to the basic floating-point operations for which constrained "
"intrinsics are described above, there are constrained versions of various "
"operations which provide equivalent behavior to a corresponding libm "
"function. These intrinsics allow the precise behavior of these operations "
"with respect to rounding mode and exception behavior to be controlled."
msgstr ""

#: ../../../LangRef.rst:16078
msgid ""
"As with the basic constrained floating-point intrinsics, the rounding mode "
"and exception behavior arguments only control the behavior of the optimizer. "
"They do not change the runtime floating-point environment."
msgstr ""

#: ../../../LangRef.rst:16084
msgid "'``llvm.experimental.constrained.sqrt``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:16099
msgid ""
"The '``llvm.experimental.constrained.sqrt``' intrinsic returns the square "
"root of the specified value, returning the same value as the libm '``sqrt``' "
"functions would, but without setting ``errno``."
msgstr ""

#: ../../../LangRef.rst:16106 ../../../LangRef.rst:16218
#: ../../../LangRef.rst:16254
msgid ""
"The first argument and the return type are floating-point numbers of the "
"same type."
msgstr ""

#: ../../../LangRef.rst:16115
msgid ""
"This function returns the nonnegative square root of the specified value. If "
"the value is less than negative zero, a floating-point exception occurs and "
"the return value is architecture specific."
msgstr ""

#: ../../../LangRef.rst:16121
msgid "'``llvm.experimental.constrained.pow``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:16136
msgid ""
"The '``llvm.experimental.constrained.pow``' intrinsic returns the first "
"operand raised to the (positive or negative) power specified by the second "
"operand."
msgstr ""

#: ../../../LangRef.rst:16142
msgid ""
"The first two arguments and the return value are floating-point numbers of "
"the same type.  The second argument specifies the power to which the first "
"argument should be raised."
msgstr ""

#: ../../../LangRef.rst:16152
msgid ""
"This function returns the first value raised to the second power, returning "
"the same values as the libm ``pow`` functions would, and handles error "
"conditions in the same way."
msgstr ""

#: ../../../LangRef.rst:16158
msgid "'``llvm.experimental.constrained.powi``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:16173
msgid ""
"The '``llvm.experimental.constrained.powi``' intrinsic returns the first "
"operand raised to the (positive or negative) power specified by the second "
"operand. The order of evaluation of multiplications is not defined. When a "
"vector of floating-point type is used, the second argument remains a scalar "
"integer value."
msgstr ""

#: ../../../LangRef.rst:16182
msgid ""
"The first argument and the return value are floating-point numbers of the "
"same type.  The second argument is a 32-bit signed integer specifying the "
"power to which the first argument should be raised."
msgstr ""

#: ../../../LangRef.rst:16197
msgid "'``llvm.experimental.constrained.sin``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:16212
msgid ""
"The '``llvm.experimental.constrained.sin``' intrinsic returns the sine of "
"the first operand."
msgstr ""

#: ../../../LangRef.rst:16227
msgid ""
"This function returns the sine of the specified operand, returning the same "
"values as the libm ``sin`` functions would, and handles error conditions in "
"the same way."
msgstr ""

#: ../../../LangRef.rst:16233
msgid "'``llvm.experimental.constrained.cos``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:16248
msgid ""
"The '``llvm.experimental.constrained.cos``' intrinsic returns the cosine of "
"the first operand."
msgstr ""

#: ../../../LangRef.rst:16263
msgid ""
"This function returns the cosine of the specified operand, returning the "
"same values as the libm ``cos`` functions would, and handles error "
"conditions in the same way."
msgstr ""

#: ../../../LangRef.rst:16269
msgid "'``llvm.experimental.constrained.exp``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:16284
msgid ""
"The '``llvm.experimental.constrained.exp``' intrinsic computes the base-e "
"exponential of the specified value."
msgstr ""

#: ../../../LangRef.rst:16290 ../../../LangRef.rst:16326
#: ../../../LangRef.rst:16361 ../../../LangRef.rst:16397
#: ../../../LangRef.rst:16432 ../../../LangRef.rst:16468
#: ../../../LangRef.rst:16604 ../../../LangRef.rst:16769
#: ../../../LangRef.rst:16802 ../../../LangRef.rst:16835
#: ../../../LangRef.rst:16945
msgid ""
"The first argument and the return value are floating-point numbers of the "
"same type."
msgstr ""

#: ../../../LangRef.rst:16299
msgid ""
"This function returns the same values as the libm ``exp`` functions would, "
"and handles error conditions in the same way."
msgstr ""

#: ../../../LangRef.rst:16304
msgid "'``llvm.experimental.constrained.exp2``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:16319
msgid ""
"The '``llvm.experimental.constrained.exp2``' intrinsic computes the base-2 "
"exponential of the specified value."
msgstr ""

#: ../../../LangRef.rst:16335
msgid ""
"This function returns the same values as the libm ``exp2`` functions would, "
"and handles error conditions in the same way."
msgstr ""

#: ../../../LangRef.rst:16340
msgid "'``llvm.experimental.constrained.log``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:16355
msgid ""
"The '``llvm.experimental.constrained.log``' intrinsic computes the base-e "
"logarithm of the specified value."
msgstr ""

#: ../../../LangRef.rst:16371
msgid ""
"This function returns the same values as the libm ``log`` functions would, "
"and handles error conditions in the same way."
msgstr ""

#: ../../../LangRef.rst:16376
msgid "'``llvm.experimental.constrained.log10``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:16391
msgid ""
"The '``llvm.experimental.constrained.log10``' intrinsic computes the base-10 "
"logarithm of the specified value."
msgstr ""

#: ../../../LangRef.rst:16406
msgid ""
"This function returns the same values as the libm ``log10`` functions would, "
"and handles error conditions in the same way."
msgstr ""

#: ../../../LangRef.rst:16411
msgid "'``llvm.experimental.constrained.log2``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:16426
msgid ""
"The '``llvm.experimental.constrained.log2``' intrinsic computes the base-2 "
"logarithm of the specified value."
msgstr ""

#: ../../../LangRef.rst:16441
msgid ""
"This function returns the same values as the libm ``log2`` functions would, "
"and handles error conditions in the same way."
msgstr ""

#: ../../../LangRef.rst:16446
msgid "'``llvm.experimental.constrained.rint``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:16461
msgid ""
"The '``llvm.experimental.constrained.rint``' intrinsic returns the first "
"operand rounded to the nearest integer. It may raise an inexact floating-"
"point exception if the operand is not an integer."
msgstr ""

#: ../../../LangRef.rst:16477
msgid ""
"This function returns the same values as the libm ``rint`` functions would, "
"and handles error conditions in the same way.  The rounding mode is "
"described, not determined, by the rounding mode argument.  The actual "
"rounding mode is determined by the runtime floating-point environment.  The "
"rounding mode argument is only intended as information to the compiler."
msgstr ""

#: ../../../LangRef.rst:16485
msgid "'``llvm.experimental.constrained.lrint``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:16500
msgid ""
"The '``llvm.experimental.constrained.lrint``' intrinsic returns the first "
"operand rounded to the nearest integer. An inexact floating-point exception "
"will be raised if the operand is not an integer. An invalid exception is "
"raised if the result is too large to fit into a supported integer type, and "
"in this case the result is undefined."
msgstr ""

#: ../../../LangRef.rst:16509
msgid ""
"The first argument is a floating-point number. The return value is an "
"integer type. Not all types are supported on all targets. The supported "
"types are the same as the ``llvm.lrint`` intrinsic and the ``lrint`` libm "
"functions."
msgstr ""

#: ../../../LangRef.rst:16520
msgid ""
"This function returns the same values as the libm ``lrint`` functions would, "
"and handles error conditions in the same way."
msgstr ""

#: ../../../LangRef.rst:16523 ../../../LangRef.rst:16571
msgid ""
"The rounding mode is described, not determined, by the rounding mode "
"argument.  The actual rounding mode is determined by the runtime floating-"
"point environment.  The rounding mode argument is only intended as "
"information to the compiler."
msgstr ""

#: ../../../LangRef.rst:16528
msgid ""
"If the runtime floating-point environment is using the default rounding mode "
"then the results will be the same as the llvm.lrint intrinsic."
msgstr ""

#: ../../../LangRef.rst:16533
msgid "'``llvm.experimental.constrained.llrint``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:16548
msgid ""
"The '``llvm.experimental.constrained.llrint``' intrinsic returns the first "
"operand rounded to the nearest integer. An inexact floating-point exception "
"will be raised if the operand is not an integer. An invalid exception is "
"raised if the result is too large to fit into a supported integer type, and "
"in this case the result is undefined."
msgstr ""

#: ../../../LangRef.rst:16557
msgid ""
"The first argument is a floating-point number. The return value is an "
"integer type. Not all types are supported on all targets. The supported "
"types are the same as the ``llvm.llrint`` intrinsic and the ``llrint`` libm "
"functions."
msgstr ""

#: ../../../LangRef.rst:16568
msgid ""
"This function returns the same values as the libm ``llrint`` functions "
"would, and handles error conditions in the same way."
msgstr ""

#: ../../../LangRef.rst:16576
msgid ""
"If the runtime floating-point environment is using the default rounding mode "
"then the results will be the same as the llvm.llrint intrinsic."
msgstr ""

#: ../../../LangRef.rst:16581
msgid "'``llvm.experimental.constrained.nearbyint``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:16596
msgid ""
"The '``llvm.experimental.constrained.nearbyint``' intrinsic returns the "
"first operand rounded to the nearest integer. It will not raise an inexact "
"floating-point exception if the operand is not an integer."
msgstr ""

#: ../../../LangRef.rst:16613
msgid ""
"This function returns the same values as the libm ``nearbyint`` functions "
"would, and handles error conditions in the same way.  The rounding mode is "
"described, not determined, by the rounding mode argument.  The actual "
"rounding mode is determined by the runtime floating-point environment.  The "
"rounding mode argument is only intended as information to the compiler."
msgstr ""

#: ../../../LangRef.rst:16621
msgid "'``llvm.experimental.constrained.maxnum``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:16635
msgid ""
"The '``llvm.experimental.constrained.maxnum``' intrinsic returns the maximum "
"of the two arguments."
msgstr ""

#: ../../../LangRef.rst:16641 ../../../LangRef.rst:16673
#: ../../../LangRef.rst:16705 ../../../LangRef.rst:16737
msgid ""
"The first two arguments and the return value are floating-point numbers of "
"the same type."
msgstr ""

#: ../../../LangRef.rst:16644 ../../../LangRef.rst:16676
#: ../../../LangRef.rst:16708 ../../../LangRef.rst:16740
msgid "The third argument specifies the exception behavior as described above."
msgstr ""

#: ../../../LangRef.rst:16649
msgid "This function follows the IEEE-754 semantics for maxNum."
msgstr ""

#: ../../../LangRef.rst:16653
msgid "'``llvm.experimental.constrained.minnum``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:16667
msgid ""
"The '``llvm.experimental.constrained.minnum``' intrinsic returns the minimum "
"of the two arguments."
msgstr ""

#: ../../../LangRef.rst:16681
msgid "This function follows the IEEE-754 semantics for minNum."
msgstr ""

#: ../../../LangRef.rst:16685
msgid "'``llvm.experimental.constrained.maximum``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:16699
msgid ""
"The '``llvm.experimental.constrained.maximum``' intrinsic returns the "
"maximum of the two arguments, propagating NaNs and treating -0.0 as less "
"than +0.0."
msgstr ""

#: ../../../LangRef.rst:16713 ../../../LangRef.rst:16745
msgid ""
"This function follows semantics specified in the draft of IEEE 754-2018."
msgstr ""

#: ../../../LangRef.rst:16717
msgid "'``llvm.experimental.constrained.minimum``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:16731
msgid ""
"The '``llvm.experimental.constrained.minimum``' intrinsic returns the "
"minimum of the two arguments, propagating NaNs and treating -0.0 as less "
"than +0.0."
msgstr ""

#: ../../../LangRef.rst:16749
msgid "'``llvm.experimental.constrained.ceil``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:16763
msgid ""
"The '``llvm.experimental.constrained.ceil``' intrinsic returns the ceiling "
"of the first operand."
msgstr ""

#: ../../../LangRef.rst:16777
msgid ""
"This function returns the same values as the libm ``ceil`` functions would "
"and handles error conditions in the same way."
msgstr ""

#: ../../../LangRef.rst:16782
msgid "'``llvm.experimental.constrained.floor``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:16796
msgid ""
"The '``llvm.experimental.constrained.floor``' intrinsic returns the floor of "
"the first operand."
msgstr ""

#: ../../../LangRef.rst:16810
msgid ""
"This function returns the same values as the libm ``floor`` functions would "
"and handles error conditions in the same way."
msgstr ""

#: ../../../LangRef.rst:16815
msgid "'``llvm.experimental.constrained.round``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:16829
msgid ""
"The '``llvm.experimental.constrained.round``' intrinsic returns the first "
"operand rounded to the nearest integer."
msgstr ""

#: ../../../LangRef.rst:16843
msgid ""
"This function returns the same values as the libm ``round`` functions would "
"and handles error conditions in the same way."
msgstr ""

#: ../../../LangRef.rst:16848
msgid "'``llvm.experimental.constrained.lround``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:16862
msgid ""
"The '``llvm.experimental.constrained.lround``' intrinsic returns the first "
"operand rounded to the nearest integer with ties away from zero.  It will "
"raise an inexact floating-point exception if the operand is not an integer. "
"An invalid exception is raised if the result is too large to fit into a "
"supported integer type, and in this case the result is undefined."
msgstr ""

#: ../../../LangRef.rst:16871
msgid ""
"The first argument is a floating-point number. The return value is an "
"integer type. Not all types are supported on all targets. The supported "
"types are the same as the ``llvm.lround`` intrinsic and the ``lround`` libm "
"functions."
msgstr ""

#: ../../../LangRef.rst:16881
msgid ""
"This function returns the same values as the libm ``lround`` functions would "
"and handles error conditions in the same way."
msgstr ""

#: ../../../LangRef.rst:16886
msgid "'``llvm.experimental.constrained.llround``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:16900
msgid ""
"The '``llvm.experimental.constrained.llround``' intrinsic returns the first "
"operand rounded to the nearest integer with ties away from zero. It will "
"raise an inexact floating-point exception if the operand is not an integer. "
"An invalid exception is raised if the result is too large to fit into a "
"supported integer type, and in this case the result is undefined."
msgstr ""

#: ../../../LangRef.rst:16909
msgid ""
"The first argument is a floating-point number. The return value is an "
"integer type. Not all types are supported on all targets. The supported "
"types are the same as the ``llvm.llround`` intrinsic and the ``llround`` "
"libm functions."
msgstr ""

#: ../../../LangRef.rst:16919
msgid ""
"This function returns the same values as the libm ``llround`` functions "
"would and handles error conditions in the same way."
msgstr ""

#: ../../../LangRef.rst:16924
msgid "'``llvm.experimental.constrained.trunc``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:16938
msgid ""
"The '``llvm.experimental.constrained.trunc``' intrinsic returns the first "
"operand rounded to the nearest integer not larger in magnitude than the "
"operand."
msgstr ""

#: ../../../LangRef.rst:16953
msgid ""
"This function returns the same values as the libm ``trunc`` functions would "
"and handles error conditions in the same way."
msgstr ""

#: ../../../LangRef.rst:16958
msgid "General Intrinsics"
msgstr ""

#: ../../../LangRef.rst:16960
msgid ""
"This class of intrinsics is designed to be generic and has no specific "
"purpose."
msgstr ""

#: ../../../LangRef.rst:16964
msgid "'``llvm.var.annotation``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:16976
msgid "The '``llvm.var.annotation``' intrinsic."
msgstr ""

#: ../../../LangRef.rst:16981
msgid ""
"The first argument is a pointer to a value, the second is a pointer to a "
"global string, the third is a pointer to a global string which is the source "
"file name, and the last argument is the line number."
msgstr ""

#: ../../../LangRef.rst:16988
msgid ""
"This intrinsic allows annotation of local variables with arbitrary strings. "
"This can be useful for special purpose optimizations that want to look for "
"these annotations. These have no other defined use; they are ignored by code "
"generation and optimization."
msgstr ""

#: ../../../LangRef.rst:16994
msgid "'``llvm.ptr.annotation.*``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:16999
msgid ""
"This is an overloaded intrinsic. You can use '``llvm.ptr.annotation``' on a "
"pointer to an integer of any width. *NOTE* you must specify an address space "
"for the pointer. The identifier for the default address space is the integer "
"'``0``'."
msgstr ""

#: ../../../LangRef.rst:17015
msgid "The '``llvm.ptr.annotation``' intrinsic."
msgstr ""

#: ../../../LangRef.rst:17020
msgid ""
"The first argument is a pointer to an integer value of arbitrary bitwidth "
"(result of some expression), the second is a pointer to a global string, the "
"third is a pointer to a global string which is the source file name, and the "
"last argument is the line number. It returns the value of the first argument."
msgstr ""

#: ../../../LangRef.rst:17028
msgid ""
"This intrinsic allows annotation of a pointer to an integer with arbitrary "
"strings. This can be useful for special purpose optimizations that want to "
"look for these annotations. These have no other defined use; they are "
"ignored by code generation and optimization."
msgstr ""

#: ../../../LangRef.rst:17034
msgid "'``llvm.annotation.*``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:17039
msgid ""
"This is an overloaded intrinsic. You can use '``llvm.annotation``' on any "
"integer bit width."
msgstr ""

#: ../../../LangRef.rst:17053
msgid "The '``llvm.annotation``' intrinsic."
msgstr ""

#: ../../../LangRef.rst:17058
msgid ""
"The first argument is an integer value (result of some expression), the "
"second is a pointer to a global string, the third is a pointer to a global "
"string which is the source file name, and the last argument is the line "
"number. It returns the value of the first argument."
msgstr ""

#: ../../../LangRef.rst:17066
msgid ""
"This intrinsic allows annotations to be put on arbitrary expressions with "
"arbitrary strings. This can be useful for special purpose optimizations that "
"want to look for these annotations. These have no other defined use; they "
"are ignored by code generation and optimization."
msgstr ""

#: ../../../LangRef.rst:17072
msgid "'``llvm.codeview.annotation``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:17077
msgid ""
"This annotation emits a label at its program point and an associated "
"``S_ANNOTATION`` codeview record with some additional string metadata. This "
"is used to implement MSVC's ``__annotation`` intrinsic. It is marked "
"``noduplicate``, so calls to this intrinsic prevent inlining and should be "
"considered expensive."
msgstr ""

#: ../../../LangRef.rst:17090
msgid "The argument should be an MDTuple containing any number of MDStrings."
msgstr ""

#: ../../../LangRef.rst:17093
msgid "'``llvm.trap``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:17105
msgid "The '``llvm.trap``' intrinsic."
msgstr ""

#: ../../../LangRef.rst:17110 ../../../LangRef.rst:17137
#: ../../../LangRef.rst:17204 ../../../LangRef.rst:17463
#: ../../../LangRef.rst:17632 ../../../LangRef.rst:17785
msgid "None."
msgstr ""

#: ../../../LangRef.rst:17115
msgid ""
"This intrinsic is lowered to the target dependent trap instruction. If the "
"target does not have a trap instruction, this intrinsic will be lowered to a "
"call of the ``abort()`` function."
msgstr ""

#: ../../../LangRef.rst:17120
msgid "'``llvm.debugtrap``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:17132
msgid "The '``llvm.debugtrap``' intrinsic."
msgstr ""

#: ../../../LangRef.rst:17142
msgid ""
"This intrinsic is lowered to code which is intended to cause an execution "
"trap with the intention of requesting the attention of a debugger."
msgstr ""

#: ../../../LangRef.rst:17147
msgid "'``llvm.stackprotector``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:17159
msgid ""
"The ``llvm.stackprotector`` intrinsic takes the ``guard`` and stores it onto "
"the stack at ``slot``. The stack slot is adjusted to ensure that it is "
"placed on the stack before local variables."
msgstr ""

#: ../../../LangRef.rst:17166
msgid ""
"The ``llvm.stackprotector`` intrinsic requires two pointer arguments. The "
"first argument is the value loaded from the stack guard "
"``@__stack_chk_guard``. The second variable is an ``alloca`` that has enough "
"space to hold the value of the guard."
msgstr ""

#: ../../../LangRef.rst:17174
msgid ""
"This intrinsic causes the prologue/epilogue inserter to force the position "
"of the ``AllocaInst`` stack slot to be before local variables on the stack. "
"This is to ensure that if a local variable on the stack is overwritten, it "
"will destroy the value of the guard. When the function exits, the guard on "
"the stack is checked against the original guard by ``llvm."
"stackprotectorcheck``. If they are different, then ``llvm."
"stackprotectorcheck`` causes the program to abort by calling the "
"``__stack_chk_fail()`` function."
msgstr ""

#: ../../../LangRef.rst:17183
msgid "'``llvm.stackguard``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:17195
msgid "The ``llvm.stackguard`` intrinsic returns the system stack guard value."
msgstr ""

#: ../../../LangRef.rst:17197
msgid ""
"It should not be generated by frontends, since it is only for internal "
"usage. The reason why we create this intrinsic is that we still support IR "
"form Stack Protector in FastISel."
msgstr ""

#: ../../../LangRef.rst:17209
msgid ""
"On some platforms, the value returned by this intrinsic remains unchanged "
"between loads in the same thread. On other platforms, it returns the same "
"global variable value, if any, e.g. ``@__stack_chk_guard``."
msgstr ""

#: ../../../LangRef.rst:17213
msgid ""
"Currently some platforms have IR-level customized stack guard loading (e.g. "
"X86 Linux) that is not handled by ``llvm.stackguard()``, while they should "
"be in the future."
msgstr ""

#: ../../../LangRef.rst:17218
msgid "'``llvm.objectsize``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:17231
msgid ""
"The ``llvm.objectsize`` intrinsic is designed to provide information to the "
"optimizer to determine whether a) an operation (like memcpy) will overflow a "
"buffer that corresponds to an object, or b) that a runtime check for "
"overflow isn't necessary. An object in this context means an allocation of a "
"specific class, structure, array, or other object."
msgstr ""

#: ../../../LangRef.rst:17240
msgid ""
"The ``llvm.objectsize`` intrinsic takes four arguments. The first argument "
"is a pointer to or into the ``object``. The second argument determines "
"whether ``llvm.objectsize`` returns 0 (if true) or -1 (if false) when the "
"object size is unknown. The third argument controls how ``llvm.objectsize`` "
"acts when ``null`` in address space 0 is used as its pointer argument. If "
"it's ``false``, ``llvm.objectsize`` reports 0 bytes available when given "
"``null``. Otherwise, if the ``null`` is in a non-zero address space or if "
"``true`` is given for the third argument of ``llvm.objectsize``, we assume "
"its size is unknown. The fourth argument to ``llvm.objectsize`` determines "
"if the value should be evaluated at runtime."
msgstr ""

#: ../../../LangRef.rst:17251
msgid "The second, third, and fourth arguments only accept constants."
msgstr ""

#: ../../../LangRef.rst:17256
msgid ""
"The ``llvm.objectsize`` intrinsic is lowered to a value representing the "
"size of the object concerned. If the size cannot be determined, ``llvm."
"objectsize`` returns ``i32/i64 -1 or 0`` (depending on the ``min`` argument)."
msgstr ""

#: ../../../LangRef.rst:17261
msgid "'``llvm.expect``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:17266
msgid ""
"This is an overloaded intrinsic. You can use ``llvm.expect`` on any integer "
"bit width."
msgstr ""

#: ../../../LangRef.rst:17278
msgid ""
"The ``llvm.expect`` intrinsic provides information about expected (the most "
"probable) value of ``val``, which can be used by optimizers."
msgstr ""

#: ../../../LangRef.rst:17284
msgid ""
"The ``llvm.expect`` intrinsic takes two arguments. The first argument is a "
"value. The second argument is an expected value."
msgstr ""

#: ../../../LangRef.rst:17290
msgid "This intrinsic is lowered to the ``val``."
msgstr ""

#: ../../../LangRef.rst:17295
msgid "'``llvm.assume``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:17307
msgid ""
"The ``llvm.assume`` allows the optimizer to assume that the provided "
"condition is true. This information can then be used in simplifying other "
"parts of the code."
msgstr ""

#: ../../../LangRef.rst:17314
msgid "The condition which the optimizer may assume is always true."
msgstr ""

#: ../../../LangRef.rst:17319
msgid ""
"The intrinsic allows the optimizer to assume that the provided condition is "
"always true whenever the control flow reaches the intrinsic call. No code is "
"generated for this intrinsic, and instructions that contribute only to the "
"provided condition are not used for code generation. If the condition is "
"violated during execution, the behavior is undefined."
msgstr ""

#: ../../../LangRef.rst:17325
msgid ""
"Note that the optimizer might limit the transformations performed on values "
"used by the ``llvm.assume`` intrinsic in order to preserve the instructions "
"only used to form the intrinsic's input argument. This might prove "
"undesirable if the extra information provided by the ``llvm.assume`` "
"intrinsic does not cause sufficient overall improvement in code quality. For "
"this reason, ``llvm.assume`` should not be used to document basic "
"mathematical invariants that the optimizer can otherwise deduce or facts "
"that are of little use to the optimizer."
msgstr ""

#: ../../../LangRef.rst:17337
msgid "'``llvm.ssa_copy``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:17349
msgid "The first argument is an operand which is used as the returned value."
msgstr ""

#: ../../../LangRef.rst:17354
msgid ""
"The ``llvm.ssa_copy`` intrinsic can be used to attach information to "
"operations by copying them and giving them new names.  For example, the "
"PredicateInfo utility uses it to build Extended SSA form, and attach various "
"forms of information to operands that dominate specific uses.  It is not "
"meant for general use, only for building temporary renaming forms that "
"require value splits at certain points."
msgstr ""

#: ../../../LangRef.rst:17364
msgid "'``llvm.type.test``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:17377
msgid ""
"The first argument is a pointer to be tested. The second argument is a "
"metadata object representing a :doc:`type identifier <TypeMetadata>`."
msgstr ""

#: ../../../LangRef.rst:17383
msgid ""
"The ``llvm.type.test`` intrinsic tests whether the given pointer is "
"associated with the given type identifier."
msgstr ""

#: ../../../LangRef.rst:17389
msgid "'``llvm.type.checked.load``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:17402
msgid ""
"The first argument is a pointer from which to load a function pointer. The "
"second argument is the byte offset from which to load the function pointer. "
"The third argument is a metadata object representing a :doc:`type identifier "
"<TypeMetadata>`."
msgstr ""

#: ../../../LangRef.rst:17410
msgid ""
"The ``llvm.type.checked.load`` intrinsic safely loads a function pointer "
"from a virtual table pointer using type metadata. This intrinsic is used to "
"implement control flow integrity in conjunction with virtual call "
"optimization. The virtual call optimization pass will optimize away ``llvm."
"type.checked.load`` intrinsics associated with devirtualized calls, thereby "
"removing the type check in cases where it is not needed to enforce the "
"control flow integrity constraint."
msgstr ""

#: ../../../LangRef.rst:17418
msgid ""
"If the given pointer is associated with a type metadata identifier, this "
"function returns true as the second element of its return value. (Note that "
"the function may also return true if the given pointer is not associated "
"with a type metadata identifier.) If the function's return value's second "
"element is true, the following rules apply to the first element:"
msgstr ""

#: ../../../LangRef.rst:17424
msgid ""
"If the given pointer is associated with the given type metadata identifier, "
"it is the function pointer loaded from the given byte offset from the given "
"pointer."
msgstr ""

#: ../../../LangRef.rst:17428
msgid ""
"If the given pointer is not associated with the given type metadata "
"identifier, it is one of the following (the choice of which is unspecified):"
msgstr ""

#: ../../../LangRef.rst:17431
msgid ""
"The function pointer that would have been loaded from an arbitrarily chosen "
"(through an unspecified mechanism) pointer associated with the type metadata."
msgstr ""

#: ../../../LangRef.rst:17435
msgid ""
"If the function has a non-void return type, a pointer to a function that "
"returns an unspecified value without causing side effects."
msgstr ""

#: ../../../LangRef.rst:17438
msgid ""
"If the function's return value's second element is false, the value of the "
"first element is undefined."
msgstr ""

#: ../../../LangRef.rst:17443
msgid "'``llvm.donothing``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:17455
msgid ""
"The ``llvm.donothing`` intrinsic doesn't perform any operation. It's one of "
"only three intrinsics (besides ``llvm.experimental.patchpoint`` and ``llvm."
"experimental.gc.statepoint``) that can be called with an invoke instruction."
msgstr ""

#: ../../../LangRef.rst:17468
msgid ""
"This intrinsic does nothing, and it's removed by optimizers and ignored by "
"codegen."
msgstr ""

#: ../../../LangRef.rst:17472
msgid "'``llvm.experimental.deoptimize``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:17484
msgid ""
"This intrinsic, together with :ref:`deoptimization operand bundles "
"<deopt_opbundles>`, allow frontends to express transfer of control and frame-"
"local state from the currently executing (typically more specialized, hence "
"faster) version of a function into another (typically more generic, hence "
"slower) version."
msgstr ""

#: ../../../LangRef.rst:17490
msgid ""
"In languages with a fully integrated managed runtime like Java and "
"JavaScript this intrinsic can be used to implement \"uncommon trap\" or "
"\"side exit\" like functionality.  In unmanaged languages like C and C++, "
"this intrinsic can be used to represent the slow paths of specialized "
"functions."
msgstr ""

#: ../../../LangRef.rst:17499
msgid ""
"The intrinsic takes an arbitrary number of arguments, whose meaning is "
"decided by the :ref:`lowering strategy<deoptimize_lowering>`."
msgstr ""

#: ../../../LangRef.rst:17505
msgid ""
"The ``@llvm.experimental.deoptimize`` intrinsic executes an attached "
"deoptimization continuation (denoted using a :ref:`deoptimization operand "
"bundle <deopt_opbundles>`) and returns the value returned by the "
"deoptimization continuation.  Defining the semantic properties of the "
"continuation itself is out of scope of the language reference -- as far as "
"LLVM is concerned, the deoptimization continuation can invoke arbitrary side "
"effects, including reading from and writing to the entire heap."
msgstr ""

#: ../../../LangRef.rst:17514
msgid ""
"Deoptimization continuations expressed using ``\"deopt\"`` operand bundles "
"always continue execution to the end of the physical frame containing them, "
"so all calls to ``@llvm.experimental.deoptimize`` must be in \"tail "
"position\":"
msgstr ""

#: ../../../LangRef.rst:17518
msgid "``@llvm.experimental.deoptimize`` cannot be invoked."
msgstr ""

#: ../../../LangRef.rst:17519
msgid "The call must immediately precede a :ref:`ret <i_ret>` instruction."
msgstr ""

#: ../../../LangRef.rst:17520
msgid ""
"The ``ret`` instruction must return the value produced by the ``@llvm."
"experimental.deoptimize`` call if there is one, or void."
msgstr ""

#: ../../../LangRef.rst:17523
msgid ""
"Note that the above restrictions imply that the return type for a call to "
"``@llvm.experimental.deoptimize`` will match the return type of its "
"immediate caller."
msgstr ""

#: ../../../LangRef.rst:17527
msgid ""
"The inliner composes the ``\"deopt\"`` continuations of the caller into the "
"``\"deopt\"`` continuations present in the inlinee, and also updates calls "
"to this intrinsic to return directly from the frame of the function it "
"inlined into."
msgstr ""

#: ../../../LangRef.rst:17531
msgid ""
"All declarations of ``@llvm.experimental.deoptimize`` must share the same "
"calling convention."
msgstr ""

#: ../../../LangRef.rst:17537 ../../../LangRef.rst:17729
#: ../../../LangRef.rst:17953 ../../../LangRef.rst:18029
#: ../../../LangRef.rst:18102 ../../../LangRef.rst:18128
#: ../../../LangRef.rst:18142 ../../../LangRef.rst:18156
#: ../../../LangRef.rst:18170 ../../../LangRef.rst:18184
#: ../../../LangRef.rst:18198 ../../../LangRef.rst:18212
#: ../../../LangRef.rst:18226 ../../../LangRef.rst:18240
#: ../../../LangRef.rst:18254 ../../../LangRef.rst:18268
#: ../../../LangRef.rst:18282 ../../../LangRef.rst:18296
#: ../../../LangRef.rst:18310 ../../../LangRef.rst:18324
#: ../../../LangRef.rst:18338 ../../../LangRef.rst:18352
#: ../../../LangRef.rst:18366
msgid "Lowering:"
msgstr ""

#: ../../../LangRef.rst:17539
msgid ""
"Calls to ``@llvm.experimental.deoptimize`` are lowered to calls to the "
"symbol ``__llvm_deoptimize`` (it is the frontend's responsibility to ensure "
"that this symbol is defined).  The call arguments to ``@llvm.experimental."
"deoptimize`` are lowered as if they were formal arguments of the specified "
"types, and not as varargs."
msgstr ""

#: ../../../LangRef.rst:17547
msgid "'``llvm.experimental.guard``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:17559
msgid ""
"This intrinsic, together with :ref:`deoptimization operand bundles "
"<deopt_opbundles>`, allows frontends to express guards or checks on "
"optimistic assumptions made during compilation.  The semantics of ``@llvm."
"experimental.guard`` is defined in terms of ``@llvm.experimental."
"deoptimize`` -- its body is defined to be equivalent to:"
msgstr ""

#: ../../../LangRef.rst:17581
msgid ""
"with the optional ``[, !make.implicit !{}]`` present if and only if it is "
"present on the call site.  For more details on ``!make.implicit``, see :doc:"
"`FaultMaps`."
msgstr ""

#: ../../../LangRef.rst:17585
msgid ""
"In words, ``@llvm.experimental.guard`` executes the attached ``\"deopt\"`` "
"continuation if (but **not** only if) its first argument is ``false``.  "
"Since the optimizer is allowed to replace the ``undef`` with an arbitrary "
"value, it can optimize guard to fail \"spuriously\", i.e. without the "
"original condition being false (hence the \"not only if\"); and this allows "
"for \"check widening\" type optimizations."
msgstr ""

#: ../../../LangRef.rst:17592
msgid "``@llvm.experimental.guard`` cannot be invoked."
msgstr ""

#: ../../../LangRef.rst:17594
msgid ""
"After ``@llvm.experimental.guard`` was first added, a more general "
"formulation was found in ``@llvm.experimental.widenable.condition``. Support "
"for ``@llvm.experimental.guard`` is slowly being rephrased in terms of this "
"alternate."
msgstr ""

#: ../../../LangRef.rst:17600
msgid "'``llvm.experimental.widenable.condition``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:17612
msgid ""
"This intrinsic represents a \"widenable condition\" which is boolean "
"expressions with the following property: whether this expression is `true` "
"or `false`, the program is correct and well-defined."
msgstr ""

#: ../../../LangRef.rst:17617
msgid ""
"Together with :ref:`deoptimization operand bundles <deopt_opbundles>`, "
"``@llvm.experimental.widenable.condition`` allows frontends to express "
"guards or checks on optimistic assumptions made during compilation and "
"represent them as branch instructions on special conditions."
msgstr ""

#: ../../../LangRef.rst:17623
msgid ""
"While this may appear similar in semantics to `undef`, it is very different "
"in that an invocation produces a particular, singular value. It is also "
"intended to be lowered late, and remain available for specific optimizations "
"and transforms that can benefit from its special properties."
msgstr ""

#: ../../../LangRef.rst:17637
msgid ""
"The intrinsic ``@llvm.experimental.widenable.condition()`` returns either "
"`true` or `false`. For each evaluation of a call to this intrinsic, the "
"program must be valid and correct both if it returns `true` and if it "
"returns `false`. This allows transformation passes to replace evaluations of "
"this intrinsic with either value whenever one is beneficial."
msgstr ""

#: ../../../LangRef.rst:17644
msgid ""
"When used in a branch condition, it allows us to choose between two "
"alternative correct solutions for the same problem, like in example below:"
msgstr ""

#: ../../../LangRef.rst:17659
msgid ""
"Whether the result of intrinsic's call is `true` or `false`, it should be "
"correct to pick either solution. We can switch between them by replacing the "
"result of ``@llvm.experimental.widenable.condition`` with different `i1` "
"expressions."
msgstr ""

#: ../../../LangRef.rst:17665
msgid "This is how it can be used to represent guards as widenable branches:"
msgstr ""

#: ../../../LangRef.rst:17674
msgid ""
"Can be expressed in an alternative equivalent form of explicit branch using "
"``@llvm.experimental.widenable.condition``:"
msgstr ""

#: ../../../LangRef.rst:17691
msgid ""
"So the block `guarded` is only reachable when `%cond` is `true`, and it "
"should be valid to go to the block `deopt` whenever `%cond` is `true` or "
"`false`."
msgstr ""

#: ../../../LangRef.rst:17695
msgid ""
"``@llvm.experimental.widenable.condition`` will never throw, thus it cannot "
"be invoked."
msgstr ""

#: ../../../LangRef.rst:17699
msgid "Guard widening:"
msgstr ""

#: ../../../LangRef.rst:17701
msgid ""
"When ``@llvm.experimental.widenable.condition()`` is used in condition of a "
"guard represented as explicit branch, it is legal to widen the guard's "
"condition with any additional conditions."
msgstr ""

#: ../../../LangRef.rst:17706
msgid "Guard widening looks like replacement of"
msgstr ""

#: ../../../LangRef.rst:17714
msgid "with"
msgstr ""

#: ../../../LangRef.rst:17723
msgid ""
"for this branch. Here `%any_other_cond` is an arbitrarily chosen well-"
"defined `i1` value. By making guard widening, we may impose stricter "
"conditions on `guarded` block and bail to the deopt when the new condition "
"is not met."
msgstr ""

#: ../../../LangRef.rst:17731
msgid ""
"Default lowering strategy is replacing the result of call of ``@llvm."
"experimental.widenable.condition``  with constant `true`. However it is "
"always correct to replace it with any other `i1` value. Any pass can freely "
"do it if it can benefit from non-default lowering."
msgstr ""

#: ../../../LangRef.rst:17739
msgid "'``llvm.load.relative``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:17751
msgid ""
"This intrinsic loads a 32-bit value from the address ``%ptr + %offset``, "
"adds ``%ptr`` to that value and returns it. The constant folder specifically "
"recognizes the form of this intrinsic and the constant initializers it may "
"load from; if a loaded constant initializer is known to have the form ``i32 "
"trunc(x - %ptr)``, the intrinsic call is folded to ``x``."
msgstr ""

#: ../../../LangRef.rst:17757
msgid ""
"LLVM provides that the calculation of such a constant initializer will not "
"overflow at link time under the medium code model if ``x`` is an "
"``unnamed_addr`` function. However, it does not provide this guarantee for a "
"constant initializer folded into a function body. This intrinsic can be used "
"to avoid the possibility of overflows when loading from such a constant."
msgstr ""

#: ../../../LangRef.rst:17764
msgid "'``llvm.sideeffect``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:17776
msgid ""
"The ``llvm.sideeffect`` intrinsic doesn't perform any operation. Optimizers "
"treat it as having side effects, so it can be inserted into a loop to "
"indicate that the loop shouldn't be assumed to terminate (which could "
"potentially lead to the loop being optimized away entirely), even if it's an "
"infinite loop with no other side effects."
msgstr ""

#: ../../../LangRef.rst:17790
msgid ""
"This intrinsic actually does nothing, but optimizers must assume that it has "
"externally observable side effects."
msgstr ""

#: ../../../LangRef.rst:17794
msgid "'``llvm.is.constant.*``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:17799
msgid ""
"This is an overloaded intrinsic. You can use llvm.is.constant with any "
"argument type."
msgstr ""

#: ../../../LangRef.rst:17810
msgid ""
"The '``llvm.is.constant``' intrinsic will return true if the argument is "
"known to be a manifest compile-time constant. It is guaranteed to fold to "
"either true or false before generating machine code."
msgstr ""

#: ../../../LangRef.rst:17817
msgid ""
"This intrinsic generates no code. If its argument is known to be a manifest "
"compile-time constant value, then the intrinsic will be converted to a "
"constant true value. Otherwise, it will be converted to a constant false "
"value."
msgstr ""

#: ../../../LangRef.rst:17822
msgid ""
"In particular, note that if the argument is a constant expression which "
"refers to a global (the address of which _is_ a constant, but not manifest "
"during the compile), then the intrinsic evaluates to false."
msgstr ""

#: ../../../LangRef.rst:17827
msgid ""
"The result also intentionally depends on the result of optimization passes "
"-- e.g., the result can change depending on whether a function gets inlined "
"or not. A function's parameters are obviously not constant. However, a call "
"like ``llvm.is.constant.i32(i32 %param)`` *can* return true after the "
"function is inlined, if the value passed to the function parameter was a "
"constant."
msgstr ""

#: ../../../LangRef.rst:17835
msgid ""
"On the other hand, if constant folding is not run, it will never evaluate to "
"true, even in simple cases."
msgstr ""

#: ../../../LangRef.rst:17841
msgid "'``llvm.ptrmask``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:17853
msgid "The first argument is a pointer. The second argument is an integer."
msgstr ""

#: ../../../LangRef.rst:17858
msgid ""
"The ``llvm.ptrmask`` intrinsic masks out bits of the pointer according to a "
"mask. This allows stripping data from tagged pointers without converting "
"them to an integer (ptrtoint/inttoptr). As a consequence, we can preserve "
"more information to facilitate alias analysis and underlying-object "
"detection."
msgstr ""

#: ../../../LangRef.rst:17866
msgid ""
"The result of ``ptrmask(ptr, mask)`` is equivalent to ``getelementptr ptr, "
"(ptrtoint(ptr) & mask) - ptrtoint(ptr)``. Both the returned pointer and the "
"first argument are based on the same underlying object (for more information "
"on the *based on* terminology see :ref:`the pointer aliasing rules "
"<pointeraliasing>`). If the bitwidth of the mask argument does not match the "
"pointer size of the target, the mask is zero-extended or truncated "
"accordingly."
msgstr ""

#: ../../../LangRef.rst:17875
msgid "Stack Map Intrinsics"
msgstr ""

#: ../../../LangRef.rst:17877
msgid ""
"LLVM provides experimental intrinsics to support runtime patching mechanisms "
"commonly desired in dynamic language JITs. These intrinsics are described "
"in :doc:`StackMaps`."
msgstr ""

#: ../../../LangRef.rst:17882
msgid "Element Wise Atomic Memory Intrinsics"
msgstr ""

#: ../../../LangRef.rst:17884
msgid ""
"These intrinsics are similar to the standard library memory intrinsics "
"except that they perform memory transfer as a sequence of atomic memory "
"accesses."
msgstr ""

#: ../../../LangRef.rst:17890
msgid "'``llvm.memcpy.element.unordered.atomic``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:17895
msgid ""
"This is an overloaded intrinsic. You can use ``llvm.memcpy.element.unordered."
"atomic`` on any integer bit width and for different address spaces. Not all "
"targets support all bit widths however."
msgstr ""

#: ../../../LangRef.rst:17913
msgid ""
"The '``llvm.memcpy.element.unordered.atomic.*``' intrinsic is a "
"specialization of the '``llvm.memcpy.*``' intrinsic. It differs in that the "
"``dest`` and ``src`` are treated as arrays with elements that are exactly "
"``element_size`` bytes, and the copy between buffers uses a sequence of :ref:"
"`unordered atomic <ordering>` load/store operations that are a positive "
"integer multiple of the ``element_size`` in size."
msgstr ""

#: ../../../LangRef.rst:17922
msgid ""
"The first three arguments are the same as they are in the :ref:`@llvm.memcpy "
"<int_memcpy>` intrinsic, with the added constraint that ``len`` is required "
"to be a positive integer multiple of the ``element_size``. If ``len`` is not "
"a positive integer multiple of ``element_size``, then the behaviour of the "
"intrinsic is undefined."
msgstr ""

#: ../../../LangRef.rst:17927 ../../../LangRef.rst:18078
msgid ""
"``element_size`` must be a compile-time constant positive power of two no "
"greater than target-specific atomic access size limit."
msgstr ""

#: ../../../LangRef.rst:17930
msgid ""
"For each of the input pointers ``align`` parameter attribute must be "
"specified. It must be a power of two no less than the ``element_size``. "
"Caller guarantees that both the source and destination pointers are aligned "
"to that boundary."
msgstr ""

#: ../../../LangRef.rst:17937
msgid ""
"The '``llvm.memcpy.element.unordered.atomic.*``' intrinsic copies ``len`` "
"bytes of memory from the source location to the destination location. These "
"locations are not allowed to overlap. The memory copy is performed as a "
"sequence of load/store operations where each access is guaranteed to be a "
"multiple of ``element_size`` bytes wide and aligned at an ``element_size`` "
"boundary."
msgstr ""

#: ../../../LangRef.rst:17943 ../../../LangRef.rst:18018
msgid ""
"The order of the copy is unspecified. The same value may be read from the "
"source buffer many times, but only one write is issued to the destination "
"buffer per element. It is well defined to have concurrent reads and writes "
"to both source and destination provided those reads and writes are unordered "
"atomic when specified."
msgstr ""

#: ../../../LangRef.rst:17948 ../../../LangRef.rst:18024
msgid ""
"This intrinsic does not provide any additional ordering guarantees over "
"those provided by a set of unordered loads from the source location and "
"stores to the destination."
msgstr ""

#: ../../../LangRef.rst:17955
msgid ""
"In the most general case call to the '``llvm.memcpy.element.unordered.atomic."
"*``' is lowered to a call to the symbol "
"``__llvm_memcpy_element_unordered_atomic_*``. Where '*' is replaced with an "
"actual element size."
msgstr ""

#: ../../../LangRef.rst:17959
msgid ""
"Optimizer is allowed to inline memory copy when it's profitable to do so."
msgstr ""

#: ../../../LangRef.rst:17962
msgid "'``llvm.memmove.element.unordered.atomic``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:17967
msgid ""
"This is an overloaded intrinsic. You can use ``llvm.memmove.element."
"unordered.atomic`` on any integer bit width and for different address "
"spaces. Not all targets support all bit widths however."
msgstr ""

#: ../../../LangRef.rst:17985
msgid ""
"The '``llvm.memmove.element.unordered.atomic.*``' intrinsic is a "
"specialization of the '``llvm.memmove.*``' intrinsic. It differs in that the "
"``dest`` and ``src`` are treated as arrays with elements that are exactly "
"``element_size`` bytes, and the copy between buffers uses a sequence of :ref:"
"`unordered atomic <ordering>` load/store operations that are a positive "
"integer multiple of the ``element_size`` in size."
msgstr ""

#: ../../../LangRef.rst:17995
msgid ""
"The first three arguments are the same as they are in the :ref:`@llvm."
"memmove <int_memmove>` intrinsic, with the added constraint that ``len`` is "
"required to be a positive integer multiple of the ``element_size``. If "
"``len`` is not a positive integer multiple of ``element_size``, then the "
"behaviour of the intrinsic is undefined."
msgstr ""

#: ../../../LangRef.rst:18001
msgid ""
"``element_size`` must be a compile-time constant positive power of two no "
"greater than a target-specific atomic access size limit."
msgstr ""

#: ../../../LangRef.rst:18004
msgid ""
"For each of the input pointers the ``align`` parameter attribute must be "
"specified. It must be a power of two no less than the ``element_size``. "
"Caller guarantees that both the source and destination pointers are aligned "
"to that boundary."
msgstr ""

#: ../../../LangRef.rst:18012
msgid ""
"The '``llvm.memmove.element.unordered.atomic.*``' intrinsic copies ``len`` "
"bytes of memory from the source location to the destination location. These "
"locations are allowed to overlap. The memory copy is performed as a sequence "
"of load/store operations where each access is guaranteed to be a multiple of "
"``element_size`` bytes wide and aligned at an ``element_size`` boundary."
msgstr ""

#: ../../../LangRef.rst:18031
msgid ""
"In the most general case call to the '``llvm.memmove.element.unordered."
"atomic.*``' is lowered to a call to the symbol "
"``__llvm_memmove_element_unordered_atomic_*``. Where '*' is replaced with an "
"actual element size."
msgstr ""

#: ../../../LangRef.rst:18036
msgid ""
"The optimizer is allowed to inline the memory copy when it's profitable to "
"do so."
msgstr ""

#: ../../../LangRef.rst:18041
msgid "'``llvm.memset.element.unordered.atomic``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:18046
msgid ""
"This is an overloaded intrinsic. You can use ``llvm.memset.element.unordered."
"atomic`` on any integer bit width and for different address spaces. Not all "
"targets support all bit widths however."
msgstr ""

#: ../../../LangRef.rst:18064
msgid ""
"The '``llvm.memset.element.unordered.atomic.*``' intrinsic is a "
"specialization of the '``llvm.memset.*``' intrinsic. It differs in that the "
"``dest`` is treated as an array with elements that are exactly "
"``element_size`` bytes, and the assignment to that array uses uses a "
"sequence of :ref:`unordered atomic <ordering>` store operations that are a "
"positive integer multiple of the ``element_size`` in size."
msgstr ""

#: ../../../LangRef.rst:18073
msgid ""
"The first three arguments are the same as they are in the :ref:`@llvm.memset "
"<int_memset>` intrinsic, with the added constraint that ``len`` is required "
"to be a positive integer multiple of the ``element_size``. If ``len`` is not "
"a positive integer multiple of ``element_size``, then the behaviour of the "
"intrinsic is undefined."
msgstr ""

#: ../../../LangRef.rst:18081
msgid ""
"The ``dest`` input pointer must have the ``align`` parameter attribute "
"specified. It must be a power of two no less than the ``element_size``. "
"Caller guarantees that the destination pointer is aligned to that boundary."
msgstr ""

#: ../../../LangRef.rst:18088
msgid ""
"The '``llvm.memset.element.unordered.atomic.*``' intrinsic sets the ``len`` "
"bytes of memory starting at the destination location to the given ``value``. "
"The memory is set with a sequence of store operations where each access is "
"guaranteed to be a multiple of ``element_size`` bytes wide and aligned at an "
"``element_size`` boundary."
msgstr ""

#: ../../../LangRef.rst:18093
msgid ""
"The order of the assignment is unspecified. Only one write is issued to the "
"destination buffer per element. It is well defined to have concurrent reads "
"and writes to the destination provided those reads and writes are unordered "
"atomic when specified."
msgstr ""

#: ../../../LangRef.rst:18098
msgid ""
"This intrinsic does not provide any additional ordering guarantees over "
"those provided by a set of unordered stores to the destination."
msgstr ""

#: ../../../LangRef.rst:18104
msgid ""
"In the most general case call to the '``llvm.memset.element.unordered.atomic."
"*``' is lowered to a call to the symbol "
"``__llvm_memset_element_unordered_atomic_*``. Where '*' is replaced with an "
"actual element size."
msgstr ""

#: ../../../LangRef.rst:18108
msgid ""
"The optimizer is allowed to inline the memory assignment when it's "
"profitable to do so."
msgstr ""

#: ../../../LangRef.rst:18111
msgid "Objective-C ARC Runtime Intrinsics"
msgstr ""

#: ../../../LangRef.rst:18113
msgid ""
"LLVM provides intrinsics that lower to Objective-C ARC runtime entry points. "
"LLVM is aware of the semantics of these functions, and optimizes based on "
"that knowledge. You can read more about the details of Objective-C ARC `here "
"<https://clang.llvm.org/docs/AutomaticReferenceCounting.html>`_."
msgstr ""

#: ../../../LangRef.rst:18119
msgid "'``llvm.objc.autorelease``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:18130
msgid ""
"Lowers to a call to `objc_autorelease <https://clang.llvm.org/docs/"
"AutomaticReferenceCounting.html#arc-runtime-objc-autorelease>`_."
msgstr ""

#: ../../../LangRef.rst:18133
msgid "'``llvm.objc.autoreleasePoolPop``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:18144
msgid ""
"Lowers to a call to `objc_autoreleasePoolPop <https://clang.llvm.org/docs/"
"AutomaticReferenceCounting.html#void-objc-autoreleasepoolpop-void-pool>`_."
msgstr ""

#: ../../../LangRef.rst:18147
msgid "'``llvm.objc.autoreleasePoolPush``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:18158
msgid ""
"Lowers to a call to `objc_autoreleasePoolPush <https://clang.llvm.org/docs/"
"AutomaticReferenceCounting.html#void-objc-autoreleasepoolpush-void>`_."
msgstr ""

#: ../../../LangRef.rst:18161
msgid "'``llvm.objc.autoreleaseReturnValue``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:18172
msgid ""
"Lowers to a call to `objc_autoreleaseReturnValue <https://clang.llvm.org/"
"docs/AutomaticReferenceCounting.html#arc-runtime-objc-"
"autoreleasereturnvalue>`_."
msgstr ""

#: ../../../LangRef.rst:18175
msgid "'``llvm.objc.copyWeak``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:18186
msgid ""
"Lowers to a call to `objc_copyWeak <https://clang.llvm.org/docs/"
"AutomaticReferenceCounting.html#void-objc-copyweak-id-dest-id-src>`_."
msgstr ""

#: ../../../LangRef.rst:18189
msgid "'``llvm.objc.destroyWeak``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:18200
msgid ""
"Lowers to a call to `objc_destroyWeak <https://clang.llvm.org/docs/"
"AutomaticReferenceCounting.html#void-objc-destroyweak-id-object>`_."
msgstr ""

#: ../../../LangRef.rst:18203
msgid "'``llvm.objc.initWeak``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:18214
msgid ""
"Lowers to a call to `objc_initWeak <https://clang.llvm.org/docs/"
"AutomaticReferenceCounting.html#arc-runtime-objc-initweak>`_."
msgstr ""

#: ../../../LangRef.rst:18217
msgid "'``llvm.objc.loadWeak``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:18228
msgid ""
"Lowers to a call to `objc_loadWeak <https://clang.llvm.org/docs/"
"AutomaticReferenceCounting.html#arc-runtime-objc-loadweak>`_."
msgstr ""

#: ../../../LangRef.rst:18231
msgid "'``llvm.objc.loadWeakRetained``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:18242
msgid ""
"Lowers to a call to `objc_loadWeakRetained <https://clang.llvm.org/docs/"
"AutomaticReferenceCounting.html#arc-runtime-objc-loadweakretained>`_."
msgstr ""

#: ../../../LangRef.rst:18245
msgid "'``llvm.objc.moveWeak``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:18256
msgid ""
"Lowers to a call to `objc_moveWeak <https://clang.llvm.org/docs/"
"AutomaticReferenceCounting.html#void-objc-moveweak-id-dest-id-src>`_."
msgstr ""

#: ../../../LangRef.rst:18259
msgid "'``llvm.objc.release``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:18270
msgid ""
"Lowers to a call to `objc_release <https://clang.llvm.org/docs/"
"AutomaticReferenceCounting.html#void-objc-release-id-value>`_."
msgstr ""

#: ../../../LangRef.rst:18273
msgid "'``llvm.objc.retain``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:18284
msgid ""
"Lowers to a call to `objc_retain <https://clang.llvm.org/docs/"
"AutomaticReferenceCounting.html#arc-runtime-objc-retain>`_."
msgstr ""

#: ../../../LangRef.rst:18287
msgid "'``llvm.objc.retainAutorelease``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:18298
msgid ""
"Lowers to a call to `objc_retainAutorelease <https://clang.llvm.org/docs/"
"AutomaticReferenceCounting.html#arc-runtime-objc-retainautorelease>`_."
msgstr ""

#: ../../../LangRef.rst:18301
msgid "'``llvm.objc.retainAutoreleaseReturnValue``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:18312
msgid ""
"Lowers to a call to `objc_retainAutoreleaseReturnValue <https://clang.llvm."
"org/docs/AutomaticReferenceCounting.html#arc-runtime-objc-"
"retainautoreleasereturnvalue>`_."
msgstr ""

#: ../../../LangRef.rst:18315
msgid "'``llvm.objc.retainAutoreleasedReturnValue``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:18326
msgid ""
"Lowers to a call to `objc_retainAutoreleasedReturnValue <https://clang.llvm."
"org/docs/AutomaticReferenceCounting.html#arc-runtime-objc-"
"retainautoreleasedreturnvalue>`_."
msgstr ""

#: ../../../LangRef.rst:18329
msgid "'``llvm.objc.retainBlock``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:18340
msgid ""
"Lowers to a call to `objc_retainBlock <https://clang.llvm.org/docs/"
"AutomaticReferenceCounting.html#arc-runtime-objc-retainblock>`_."
msgstr ""

#: ../../../LangRef.rst:18343
msgid "'``llvm.objc.storeStrong``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:18354
msgid ""
"Lowers to a call to `objc_storeStrong <https://clang.llvm.org/docs/"
"AutomaticReferenceCounting.html#void-objc-storestrong-id-object-id-value>`_."
msgstr ""

#: ../../../LangRef.rst:18357
msgid "'``llvm.objc.storeWeak``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:18368
msgid ""
"Lowers to a call to `objc_storeWeak <https://clang.llvm.org/docs/"
"AutomaticReferenceCounting.html#arc-runtime-objc-storeweak>`_."
msgstr ""

#: ../../../LangRef.rst:18371
msgid "Preserving Debug Information Intrinsics"
msgstr ""

#: ../../../LangRef.rst:18373
msgid ""
"These intrinsics are used to carry certain debuginfo together with IR-level "
"operations. For example, it may be desirable to know the structure/union "
"name and the original user-level field indices. Such information got lost in "
"IR GetElementPtr instruction since the IR types are different from debugInfo "
"types and unions are converted to structs in IR."
msgstr ""

#: ../../../LangRef.rst:18381
msgid "'``llvm.preserve.array.access.index``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:18395
msgid ""
"The '``llvm.preserve.array.access.index``' intrinsic returns the "
"getelementptr address based on array base ``base``, array dimension ``dim`` "
"and the last access index ``index`` into the array. The return type "
"``ret_type`` is a pointer type to the array element. The array ``dim`` and "
"``index`` are preserved which is more robust than getelementptr instruction "
"which may be subject to compiler transformation. The ``llvm.preserve.access."
"index`` type of metadata is attached to this call instruction to provide "
"array or pointer debuginfo type. The metadata is a ``DICompositeType`` or "
"``DIDerivedType`` representing the debuginfo version of ``type``."
msgstr ""

#: ../../../LangRef.rst:18408
msgid ""
"The ``base`` is the array base address.  The ``dim`` is the array dimension. "
"The ``base`` is a pointer if ``dim`` equals 0. The ``index`` is the last "
"access index into the array or pointer."
msgstr ""

#: ../../../LangRef.rst:18415
msgid ""
"The '``llvm.preserve.array.access.index``' intrinsic produces the same "
"result as a getelementptr with base ``base`` and access operands ``{dim's "
"0's, index}``."
msgstr ""

#: ../../../LangRef.rst:18419
msgid "'``llvm.preserve.union.access.index``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:18432
msgid ""
"The '``llvm.preserve.union.access.index``' intrinsic carries the debuginfo "
"field index ``di_index`` and returns the ``base`` address. The ``llvm."
"preserve.access.index`` type of metadata is attached to this call "
"instruction to provide union debuginfo type. The metadata is a "
"``DICompositeType`` representing the debuginfo version of ``type``. The "
"return type ``type`` is the same as the ``base`` type."
msgstr ""

#: ../../../LangRef.rst:18442
msgid ""
"The ``base`` is the union base address. The ``di_index`` is the field index "
"in debuginfo."
msgstr ""

#: ../../../LangRef.rst:18447
msgid ""
"The '``llvm.preserve.union.access.index``' intrinsic returns the ``base`` "
"address."
msgstr ""

#: ../../../LangRef.rst:18450
msgid "'``llvm.preserve.struct.access.index``' Intrinsic"
msgstr ""

#: ../../../LangRef.rst:18464
msgid ""
"The '``llvm.preserve.struct.access.index``' intrinsic returns the "
"getelementptr address based on struct base ``base`` and IR struct member "
"index ``gep_index``. The ``llvm.preserve.access.index`` type of metadata is "
"attached to this call instruction to provide struct debuginfo type. The "
"metadata is a ``DICompositeType`` representing the debuginfo version of "
"``type``. The return type ``ret_type`` is a pointer type to the structure "
"member."
msgstr ""

#: ../../../LangRef.rst:18474
msgid ""
"The ``base`` is the structure base address. The ``gep_index`` is the struct "
"member index based on IR structures. The ``di_index`` is the struct member "
"index based on debuginfo."
msgstr ""

#: ../../../LangRef.rst:18480
msgid ""
"The '``llvm.preserve.struct.access.index``' intrinsic produces the same "
"result as a getelementptr with base ``base`` and access operands ``{0, "
"gep_index}``."
msgstr ""
