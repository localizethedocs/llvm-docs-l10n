# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 17\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr_FR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../GoldPlugin.rst:3
msgid "The LLVM gold plugin"
msgstr ""

#: ../../../GoldPlugin.rst:6
msgid "Introduction"
msgstr ""

#: ../../../GoldPlugin.rst:8
msgid ""
"Building with link time optimization requires cooperation from the system "
"linker. LTO support on Linux systems is available via the `gold linker`_ "
"which supports LTO via plugins. This is the same mechanism used by the `GCC "
"LTO`_ project."
msgstr ""

#: ../../../GoldPlugin.rst:13
msgid ""
"The LLVM gold plugin implements the gold plugin interface on top of :ref:"
"`libLTO`.  The same plugin can also be used by other tools such as ``ar`` "
"and ``nm``.  Note that ld.bfd from binutils version 2.21.51.0.2 and above "
"also supports LTO via plugins.  However, usage of the LLVM gold plugin with "
"ld.bfd is not tested and therefore not officially supported or recommended."
msgstr ""

#: ../../../GoldPlugin.rst:20
msgid ""
"As of LLVM 15, the gold plugin will ignore bitcode from the ``.llvmbc`` "
"section inside of ELF object files.  However, LTO with bitcode files is "
"still supported."
msgstr ""

#: ../../../GoldPlugin.rst:31
msgid "How to build it"
msgstr ""

#: ../../../GoldPlugin.rst:33
msgid ""
"You need to have gold with plugin support and build the LLVMgold plugin. The "
"gold linker is installed as ld.gold. To see whether gold is the default on "
"your system, run ``/usr/bin/ld -v``. It will report \"GNU gold\" or else "
"\"GNU ld\" if not. If gold is already installed at ``/usr/bin/ld.gold``, one "
"option is to simply make that the default by backing up your existing ``/usr/"
"bin/ld`` and creating a symbolic link with ``ln -s /usr/bin/ld.gold /usr/bin/"
"ld``. Alternatively, you can build with clang's ``-fuse-ld=gold`` or add ``-"
"fuse-ld=gold`` to LDFLAGS, which will cause the clang driver to invoke ``/"
"usr/bin/ld.gold`` directly."
msgstr ""

#: ../../../GoldPlugin.rst:43
msgid ""
"If you have gold installed, check for plugin support by running ``/usr/bin/"
"ld.gold -plugin``. If it complains \"missing argument\" then you have plugin "
"support. If not, and you get an error such as \"unknown option\", then you "
"will either need to build gold or install a version with plugin support."
msgstr ""

#: ../../../GoldPlugin.rst:49
msgid "Download, configure and build gold with plugin support:"
msgstr ""

#: ../../../GoldPlugin.rst:59
msgid ""
"That should leave you with ``build/gold/ld-new`` which supports the ``-"
"plugin`` option. Running ``make`` will additionally build ``build/binutils/"
"ar`` and ``nm-new`` binaries supporting plugins."
msgstr ""

#: ../../../GoldPlugin.rst:63
msgid ""
"Once you're ready to switch to using gold, backup your existing ``/usr/bin/"
"ld`` then replace it with ``ld-new``. Alternatively, install in ``/usr/bin/"
"ld.gold`` and use ``-fuse-ld=gold`` as described earlier."
msgstr ""

#: ../../../GoldPlugin.rst:67
msgid ""
"Optionally, add ``--enable-gold=default`` to the above configure invocation "
"to automatically install the newly built gold as the default linker with "
"``make install``."
msgstr ""

#: ../../../GoldPlugin.rst:71
msgid ""
"Build the LLVMgold plugin. Run CMake with ``-DLLVM_BINUTILS_INCDIR=/path/to/"
"binutils/include``.  The correct include path will contain the file ``plugin-"
"api.h``."
msgstr ""

#: ../../../GoldPlugin.rst:76
msgid "Usage"
msgstr ""

#: ../../../GoldPlugin.rst:78
msgid ""
"You should produce bitcode files from ``clang`` with the option ``-flto``. "
"This flag will also cause ``clang`` to look for the gold plugin in the "
"``lib`` directory under its prefix and pass the ``-plugin`` option to "
"``ld``. It will not look for an alternate linker without ``-fuse-ld=gold``, "
"which is why you otherwise need gold to be the installed system linker in "
"your path."
msgstr ""

#: ../../../GoldPlugin.rst:85
msgid ""
"``ar`` and ``nm`` also accept the ``-plugin`` option and it's possible to to "
"install ``LLVMgold.so`` to ``/usr/lib/bfd-plugins`` for a seamless setup. If "
"you built your own gold, be sure to install the ``ar`` and ``nm-new`` you "
"built to ``/usr/bin``."
msgstr ""

#: ../../../GoldPlugin.rst:92
msgid "Example of link time optimization"
msgstr ""

#: ../../../GoldPlugin.rst:94
msgid ""
"The following example shows a worked example of the gold plugin mixing LLVM "
"bitcode and native code."
msgstr ""

#: ../../../GoldPlugin.rst:138
msgid ""
"Gold informs the plugin that foo3 is never referenced outside the IR, "
"leading LLVM to delete that function. However, unlike in the :ref:`libLTO "
"example <libLTO-example>` gold does not currently eliminate foo4."
msgstr ""

#: ../../../GoldPlugin.rst:143
msgid "Quickstart for using LTO with autotooled projects"
msgstr ""

#: ../../../GoldPlugin.rst:145
msgid ""
"Once your system ``ld``, ``ar``, and ``nm`` all support LLVM bitcode, "
"everything is in place for an easy to use LTO build of autotooled projects:"
msgstr ""

#: ../../../GoldPlugin.rst:148
msgid ""
"Follow the instructions :ref:`on how to build LLVMgold.so <lto-how-to-"
"build>`."
msgstr ""

#: ../../../GoldPlugin.rst:151
msgid "Install the newly built binutils to ``$PREFIX``"
msgstr ""

#: ../../../GoldPlugin.rst:153
msgid "Copy ``Release/lib/LLVMgold.so`` to ``$PREFIX/lib/bfd-plugins/``"
msgstr ""

#: ../../../GoldPlugin.rst:155
msgid ""
"Set environment variables (``$PREFIX`` is where you installed clang and "
"binutils):"
msgstr ""

#: ../../../GoldPlugin.rst:166
msgid "Or you can just set your path:"
msgstr ""

#: ../../../GoldPlugin.rst:174
msgid "Configure and build the project as usual:"
msgstr ""

#: ../../../GoldPlugin.rst:180
msgid ""
"The environment variable settings may work for non-autotooled projects too, "
"but you may need to set the ``LD`` environment variable as well."
msgstr ""

#: ../../../GoldPlugin.rst:184
msgid "Licensing"
msgstr ""

#: ../../../GoldPlugin.rst:186
msgid ""
"Gold is licensed under the GPLv3. LLVMgold uses the interface file ``plugin-"
"api.h`` from gold which means that the resulting ``LLVMgold.so`` binary is "
"also GPLv3. This can still be used to link non-GPLv3 programs just as much "
"as gold could without the plugin."
msgstr ""
