# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:12+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../Proposals/VariableNames.rst:3
msgid "Variable Names Plan"
msgstr ""

#: ../../../Proposals/VariableNames.rst:8
msgid ""
"This plan is *provisional*. It is not agreed upon. It is written with the "
"intention of capturing the desires and concerns of the LLVM community, and "
"forming them into a plan that can be agreed upon. The original author is "
"somewhat naïve in the ways of LLVM so there will inevitably be some details "
"that are flawed. You can help - you can edit this page (preferably with a "
"Phabricator review for larger changes) or reply to the `Request For Comments "
"thread <http://lists.llvm.org/pipermail/llvm-dev/2019-February/130083."
"html>`_."
msgstr ""

#: ../../../Proposals/VariableNames.rst:18
msgid "Too Long; Didn't Read"
msgstr ""

#: ../../../Proposals/VariableNames.rst:20
msgid "Improve the readability of LLVM code."
msgstr ""

#: ../../../Proposals/VariableNames.rst:23
msgid "Introduction"
msgstr ""

#: ../../../Proposals/VariableNames.rst:25
msgid ""
"The current `variable naming rule <../CodingStandards.html#name-types-"
"functions-variables-and-enumerators-properly>`_ states:"
msgstr ""

#: ../../../Proposals/VariableNames.rst:29
msgid ""
"Variable names should be nouns (as they represent state). The name should be "
"camel case, and start with an upper case letter (e.g. Leader or Boats)."
msgstr ""

#: ../../../Proposals/VariableNames.rst:32
msgid ""
"This rule is the same as that for type names. This is a problem because the "
"type name cannot be reused for a variable name [*]_. LLVM developers tend to "
"work around this by either prepending ``The`` to the type name::"
msgstr ""

#: ../../../Proposals/VariableNames.rst:38
msgid ""
"... or more commonly use an acronym, despite the coding standard stating "
"\"Avoid abbreviations unless they are well known\"::"
msgstr ""

#: ../../../Proposals/VariableNames.rst:43
msgid ""
"The proliferation of acronyms leads to hard-to-read code such as `this "
"<https://github.com/llvm/llvm-project/"
"blob/0a8bc14ad7f3209fe702d18e250194cd90188596/llvm/lib/Transforms/Vectorize/"
"LoopVectorize.cpp#L7445>`_::"
msgstr ""

#: ../../../Proposals/VariableNames.rst:49
msgid ""
"Many other coding guidelines [LLDB]_ [Google]_ [WebKit]_ [Qt]_ [Rust]_ "
"[Swift]_ [Python]_ require that variable names begin with a lower case "
"letter in contrast to class names which begin with a capital letter. This "
"convention means that the most readable variable name also requires the "
"least thought::"
msgstr ""

#: ../../../Proposals/VariableNames.rst:56
msgid ""
"There is some agreement that the current rule is broken [LattnerAgree]_ "
"[ArsenaultAgree]_ [RobinsonAgree]_ and that acronyms are an obstacle to "
"reading new code [MalyutinDistinguish]_ [CarruthAcronym]_ [PicusAcronym]_. "
"There are some opposing views [ParzyszekAcronym2]_ [RicciAcronyms]_."
msgstr ""

#: ../../../Proposals/VariableNames.rst:61
msgid ""
"This work-in-progress proposal is to change the coding standard for variable "
"names to require that they start with a lower case letter."
msgstr ""

#: ../../../Proposals/VariableNames.rst:64
msgid ""
"In `some cases <https://github.com/llvm/llvm-project/"
"blob/8b72080d4d7b13072f371712eed333f987b7a18e/llvm/lib/CodeGen/SelectionDAG/"
"SelectionDAG.cpp#L2727>`_ the type name *is* reused as a variable name, but "
"this shadows the type name and confuses many debuggers [DenisovCamelBack]_."
msgstr ""

#: ../../../Proposals/VariableNames.rst:70
msgid "Variable Names Coding Standard Options"
msgstr ""

#: ../../../Proposals/VariableNames.rst:72
msgid ""
"There are two main options for variable names that begin with a lower case "
"letter: ``camelBack`` and ``lower_case``. (These are also known by other "
"names but here we use the terminology from clang-tidy)."
msgstr ""

#: ../../../Proposals/VariableNames.rst:76
msgid ""
"``camelBack`` is consistent with [WebKit]_, [Qt]_ and [Swift]_ while "
"``lower_case`` is consistent with [LLDB]_, [Google]_, [Rust]_ and [Python]_."
msgstr ""

#: ../../../Proposals/VariableNames.rst:79
msgid ""
"``camelBack`` is already used for function names, which may be considered an "
"advantage [LattnerFunction]_ or a disadvantage [CarruthFunction]_."
msgstr ""

#: ../../../Proposals/VariableNames.rst:82
msgid ""
"Approval for ``camelBack`` was expressed by [DenisovCamelBack]_ "
"[LattnerFunction]_ [IvanovicDistinguish]_. Opposition to ``camelBack`` was "
"expressed by [CarruthCamelBack]_ [TurnerCamelBack]_. Approval for "
"``lower_case`` was expressed by [CarruthLower]_ [CarruthCamelBack]_ "
"[TurnerLLDB]_. Opposition to ``lower_case`` was expressed by [LattnerLower]_."
msgstr ""

#: ../../../Proposals/VariableNames.rst:91
msgid "Differentiating variable kinds"
msgstr ""

#: ../../../Proposals/VariableNames.rst:93
msgid ""
"An additional requested change is to distinguish between different kinds of "
"variables [RobinsonDistinguish]_ [RobinsonDistinguish2]_ [JonesDistinguish]_ "
"[IvanovicDistinguish]_ [CarruthDistinguish]_ [MalyutinDistinguish]_."
msgstr ""

#: ../../../Proposals/VariableNames.rst:97
msgid ""
"Others oppose this idea [HähnleDistinguish]_ [GreeneDistinguish]_ "
"[HendersonPrefix]_."
msgstr ""

#: ../../../Proposals/VariableNames.rst:100
msgid ""
"A possibility is for member variables to be prefixed with ``m_`` and for "
"global variables to be prefixed with ``g_`` to distinguish them from local "
"variables. This is consistent with [LLDB]_. The ``m_`` prefix is consistent "
"with [WebKit]_."
msgstr ""

#: ../../../Proposals/VariableNames.rst:104
msgid ""
"A variation is for member variables to be prefixed with ``m`` "
"[IvanovicDistinguish]_ [BeylsDistinguish]_. This is consistent with "
"[Mozilla]_."
msgstr ""

#: ../../../Proposals/VariableNames.rst:107
msgid ""
"Another option is for member variables to be suffixed with ``_`` which is "
"consistent with [Google]_ and similar to [Python]_. Opposed by "
"[ParzyszekDistinguish]_."
msgstr ""

#: ../../../Proposals/VariableNames.rst:112
msgid "Reducing the number of acronyms"
msgstr ""

#: ../../../Proposals/VariableNames.rst:114
msgid ""
"While switching coding standard will make it easier to use non-acronym names "
"for new code, it doesn't improve the existing large body of code that uses "
"acronyms extensively to the detriment of its readability. Further, it is "
"natural and generally encouraged that new code be written in the style of "
"the surrounding code. Therefore it is likely that much newly written code "
"will also use acronyms despite what the coding standard says, much as it is "
"today."
msgstr ""

#: ../../../Proposals/VariableNames.rst:121
msgid ""
"As well as changing the case of variable names, they could also be expanded "
"to their non-acronym form e.g. ``Triple T`` → ``Triple triple``."
msgstr ""

#: ../../../Proposals/VariableNames.rst:124
msgid ""
"There is support for expanding many acronyms [CarruthAcronym]_ "
"[PicusAcronym]_ but there is a preference that expanding acronyms be "
"deferred [ParzyszekAcronym]_ [CarruthAcronym]_."
msgstr ""

#: ../../../Proposals/VariableNames.rst:128
msgid ""
"The consensus within the community seems to be that at least some acronyms "
"are valuable [ParzyszekAcronym]_ [LattnerAcronym]_. The most commonly cited "
"acronym is ``TLI`` however that is used to refer to both ``TargetLowering`` "
"and ``TargetLibraryInfo`` [GreeneDistinguish]_."
msgstr ""

#: ../../../Proposals/VariableNames.rst:133
msgid ""
"The following is a list of acronyms considered sufficiently useful that the "
"benefit of using them outweighs the cost of learning them. Acronyms that are "
"either not on the list or are used to refer to a different type should be "
"expanded."
msgstr ""

#: ../../../Proposals/VariableNames.rst:139
#: ../../../Proposals/VariableNames.rst:165
msgid "Class name"
msgstr ""

#: ../../../Proposals/VariableNames.rst:139
#: ../../../Proposals/VariableNames.rst:165
msgid "Variable name"
msgstr ""

#: ../../../Proposals/VariableNames.rst:141
msgid "DeterministicFiniteAutomaton"
msgstr ""

#: ../../../Proposals/VariableNames.rst:141
msgid "dfa"
msgstr ""

#: ../../../Proposals/VariableNames.rst:142
msgid "DominatorTree"
msgstr ""

#: ../../../Proposals/VariableNames.rst:142
msgid "dt"
msgstr ""

#: ../../../Proposals/VariableNames.rst:143
msgid "LoopInfo"
msgstr ""

#: ../../../Proposals/VariableNames.rst:143
msgid "li"
msgstr ""

#: ../../../Proposals/VariableNames.rst:144
msgid "MachineFunction"
msgstr ""

#: ../../../Proposals/VariableNames.rst:144
msgid "mf"
msgstr ""

#: ../../../Proposals/VariableNames.rst:145
msgid "MachineInstr"
msgstr ""

#: ../../../Proposals/VariableNames.rst:145
msgid "mi"
msgstr ""

#: ../../../Proposals/VariableNames.rst:146
msgid "MachineRegisterInfo"
msgstr ""

#: ../../../Proposals/VariableNames.rst:146
msgid "mri"
msgstr ""

#: ../../../Proposals/VariableNames.rst:147
msgid "ScalarEvolution"
msgstr ""

#: ../../../Proposals/VariableNames.rst:147
msgid "se"
msgstr ""

#: ../../../Proposals/VariableNames.rst:148
msgid "TargetInstrInfo"
msgstr ""

#: ../../../Proposals/VariableNames.rst:148
msgid "tii"
msgstr ""

#: ../../../Proposals/VariableNames.rst:149
msgid "TargetLibraryInfo"
msgstr ""

#: ../../../Proposals/VariableNames.rst:149
msgid "tli"
msgstr ""

#: ../../../Proposals/VariableNames.rst:150
msgid "TargetRegisterInfo"
msgstr ""

#: ../../../Proposals/VariableNames.rst:150
msgid "tri"
msgstr ""

#: ../../../Proposals/VariableNames.rst:153
msgid ""
"In some cases renaming acronyms to the full type name will result in overly "
"verbose code. Unlike most classes, a variable's scope is limited and "
"therefore some of its purpose can implied from that scope, meaning that "
"fewer words are necessary to give it a clear name. For example, in an "
"optimization pass the reader can assume that a variable's purpose relates to "
"optimization and therefore an ``OptimizationRemarkEmitter`` variable could "
"be given the name ``remarkEmitter`` or even ``remarker``."
msgstr ""

#: ../../../Proposals/VariableNames.rst:161
msgid ""
"The following is a list of longer class names and the associated shorter "
"variable name."
msgstr ""

#: ../../../Proposals/VariableNames.rst:167
msgid "BasicBlock"
msgstr ""

#: ../../../Proposals/VariableNames.rst:167
msgid "block"
msgstr ""

#: ../../../Proposals/VariableNames.rst:168
msgid "ConstantExpr"
msgstr ""

#: ../../../Proposals/VariableNames.rst:168
msgid "expr"
msgstr ""

#: ../../../Proposals/VariableNames.rst:169
msgid "ExecutionEngine"
msgstr ""

#: ../../../Proposals/VariableNames.rst:169
msgid "engine"
msgstr ""

#: ../../../Proposals/VariableNames.rst:170
msgid "MachineOperand"
msgstr ""

#: ../../../Proposals/VariableNames.rst:170
msgid "operand"
msgstr ""

#: ../../../Proposals/VariableNames.rst:171
msgid "OptimizationRemarkEmitter"
msgstr ""

#: ../../../Proposals/VariableNames.rst:171
msgid "remarker"
msgstr ""

#: ../../../Proposals/VariableNames.rst:172
msgid "PreservedAnalyses"
msgstr ""

#: ../../../Proposals/VariableNames.rst:172
msgid "analyses"
msgstr ""

#: ../../../Proposals/VariableNames.rst:173
msgid "PreservedAnalysesChecker"
msgstr ""

#: ../../../Proposals/VariableNames.rst:173
msgid "checker"
msgstr ""

#: ../../../Proposals/VariableNames.rst:174
msgid "TargetLowering"
msgstr ""

#: ../../../Proposals/VariableNames.rst:174
msgid "lowering"
msgstr ""

#: ../../../Proposals/VariableNames.rst:175
msgid "TargetMachine"
msgstr ""

#: ../../../Proposals/VariableNames.rst:175
msgid "machine"
msgstr ""

#: ../../../Proposals/VariableNames.rst:179
msgid "Transition Options"
msgstr ""

#: ../../../Proposals/VariableNames.rst:181
msgid "There are three main options for transitioning:"
msgstr ""

#: ../../../Proposals/VariableNames.rst:183
#: ../../../Proposals/VariableNames.rst:188
msgid "Keep the current coding standard"
msgstr ""

#: ../../../Proposals/VariableNames.rst:184
#: ../../../Proposals/VariableNames.rst:198
msgid "Laissez faire"
msgstr ""

#: ../../../Proposals/VariableNames.rst:185
#: ../../../Proposals/VariableNames.rst:220
msgid "Big bang"
msgstr ""

#: ../../../Proposals/VariableNames.rst:190
msgid ""
"Proponents of keeping the current coding standard (i.e. not transitioning at "
"all) question whether the cost of transition outweighs the benefit "
"[EmersonConcern]_ [ReamesConcern]_ [BradburyConcern]_. The costs are that "
"``git blame`` will become less usable; and that merging the changes will be "
"costly for downstream maintainers. See `Big bang`_ for potential mitigations."
msgstr ""

#: ../../../Proposals/VariableNames.rst:200
msgid ""
"The coding standard could allow both ``CamelCase`` and ``camelBack`` styles "
"for variable names [LattnerTransition]_."
msgstr ""

#: ../../../Proposals/VariableNames.rst:203
msgid "A code review to implement this is at https://reviews.llvm.org/D57896."
msgstr ""

#: ../../../Proposals/VariableNames.rst:206
msgid "Advantages"
msgstr ""

#: ../../../Proposals/VariableNames.rst:208
msgid "Very easy to implement initially."
msgstr ""

#: ../../../Proposals/VariableNames.rst:211
msgid "Disadvantages"
msgstr ""

#: ../../../Proposals/VariableNames.rst:213
msgid "Leads to inconsistency [BradburyConcern]_ [AminiInconsistent]_."
msgstr ""

#: ../../../Proposals/VariableNames.rst:214
msgid ""
"Inconsistency means it will be hard to know at a guess what name a variable "
"will have [DasInconsistent]_ [CarruthInconsistent]_."
msgstr ""

#: ../../../Proposals/VariableNames.rst:216
msgid ""
"Some large-scale renaming may happen anyway, leading to its disadvantages "
"without any mitigations."
msgstr ""

#: ../../../Proposals/VariableNames.rst:222
msgid ""
"With this approach, variables will be renamed by an automated script in a "
"series of large commits."
msgstr ""

#: ../../../Proposals/VariableNames.rst:225
msgid ""
"The principle advantage of this approach is that it minimises the cost of "
"inconsistency [BradburyTransition]_ [RobinsonTransition]_."
msgstr ""

#: ../../../Proposals/VariableNames.rst:228
msgid ""
"It goes against a policy of avoiding large-scale reformatting of existing "
"code [GreeneDistinguish]_."
msgstr ""

#: ../../../Proposals/VariableNames.rst:231
msgid ""
"It has been suggested that LLD would be a good starter project for the "
"renaming [Ueyama]_."
msgstr ""

#: ../../../Proposals/VariableNames.rst:235
msgid "Keeping git blame usable"
msgstr ""

#: ../../../Proposals/VariableNames.rst:237
msgid ""
"``git blame`` (or ``git annotate``) permits quickly identifying the commit "
"that changed a given line in a file. After renaming variables, many lines "
"will show as being changed by that one commit, requiring a further "
"invocation of ``git blame`` to identify prior, more interesting commits "
"[GreeneGitBlame]_ [RicciAcronyms]_."
msgstr ""

#: ../../../Proposals/VariableNames.rst:243
msgid ""
"**Mitigation**: `git-hyper-blame <https://commondatastorage.googleapis.com/"
"chrome-infra-docs/flat/depot_tools/docs/html/git-hyper-blame.html>`_ can "
"ignore or \"look through\" a given set of commits. A ``.git-blame-ignore-"
"revs`` file identifying the variable renaming commits could be added to the "
"LLVM git repository root directory. It is being `investigated <https://"
"public-inbox.org/git/20190324235020.49706-1-michael@platin.gs/>`_ whether "
"similar functionality could be added to ``git blame`` itself."
msgstr ""

#: ../../../Proposals/VariableNames.rst:253
msgid "Minimising cost of downstream merges"
msgstr ""

#: ../../../Proposals/VariableNames.rst:255
msgid ""
"There are many forks of LLVM with downstream changes. Merging a large-scale "
"renaming change could be difficult for the fork maintainers."
msgstr ""

#: ../../../Proposals/VariableNames.rst:258
msgid ""
"**Mitigation**: A large-scale renaming would be automated. A fork maintainer "
"can merge from the commit immediately before the renaming, then apply the "
"renaming script to their own branch. They can then merge again from the "
"renaming commit, resolving all conflicts by choosing their own version. This "
"could be tested on the [SVE]_ fork."
msgstr ""

#: ../../../Proposals/VariableNames.rst:265
msgid "Provisional Plan"
msgstr ""

#: ../../../Proposals/VariableNames.rst:267
msgid ""
"This is a provisional plan for the `Big bang`_ approach. It has not been "
"agreed."
msgstr ""

#: ../../../Proposals/VariableNames.rst:269
msgid ""
"Investigate improving ``git blame``. The extent to which it can be made to "
"\"look through\" commits may impact how big a change can be made."
msgstr ""

#: ../../../Proposals/VariableNames.rst:272
msgid "Write a script to expand acronyms."
msgstr ""

#: ../../../Proposals/VariableNames.rst:274
msgid ""
"Experiment and perform dry runs of the various refactoring options. Results "
"can be published in forks of the LLVM Git repository."
msgstr ""

#: ../../../Proposals/VariableNames.rst:277
msgid "Consider the evidence and agree on the new policy."
msgstr ""

#: ../../../Proposals/VariableNames.rst:279
msgid "Agree & announce a date for the renaming of the starter project (LLD)."
msgstr ""

#: ../../../Proposals/VariableNames.rst:281
msgid ""
"Update the `policy page <../CodingStandards.html>`_. This will explain the "
"old and new rules and which projects each applies to."
msgstr ""

#: ../../../Proposals/VariableNames.rst:284
msgid "Refactor the starter project in two commits:"
msgstr ""

#: ../../../Proposals/VariableNames.rst:286
msgid ""
"Add or change the project's .clang-tidy to reflect the agreed rules. (This "
"is in a separate commit to enable the merging process described in "
"`Minimising cost of downstream merges`_). Also update the project list on "
"the policy page."
msgstr ""

#: ../../../Proposals/VariableNames.rst:290
msgid ""
"Apply ``clang-tidy`` to the project's files, with only the ``readability-"
"identifier-naming`` rules enabled. ``clang-tidy`` will also reformat the "
"affected lines according to the rules in ``.clang-format``. It is "
"anticipated that this will be a good dog-fooding opportunity for clang-tidy, "
"and bugs should be fixed in the process, likely including:"
msgstr ""

#: ../../../Proposals/VariableNames.rst:296
msgid ""
"`readability-identifier-naming incorrectly fixes lambda capture <https://"
"bugs.llvm.org/show_bug.cgi?id=41119>`_."
msgstr ""

#: ../../../Proposals/VariableNames.rst:298
msgid ""
"`readability-identifier-naming incorrectly fixes variables which become "
"keywords <https://bugs.llvm.org/show_bug.cgi?id=41120>`_."
msgstr ""

#: ../../../Proposals/VariableNames.rst:300
msgid ""
"`readability-identifier-naming misses fixing member variables in destructor "
"<https://bugs.llvm.org/show_bug.cgi?id=41122>`_."
msgstr ""

#: ../../../Proposals/VariableNames.rst:303
msgid "Gather feedback and refine the process as appropriate."
msgstr ""

#: ../../../Proposals/VariableNames.rst:305
msgid ""
"Apply the process to the following projects, with a suitable delay between "
"each (at least 4 weeks after the first change, at least 2 weeks "
"subsequently) to allow gathering further feedback. This list should exclude "
"projects that must adhere to an externally defined standard e.g. libcxx. The "
"list is roughly in chronological order of renaming. Some items may not make "
"sense to rename individually - it is expected that this list will change "
"following experimentation:"
msgstr ""

#: ../../../Proposals/VariableNames.rst:314
msgid "TableGen"
msgstr ""

#: ../../../Proposals/VariableNames.rst:315
msgid "llvm/tools"
msgstr ""

#: ../../../Proposals/VariableNames.rst:316
msgid "clang-tools-extra"
msgstr ""

#: ../../../Proposals/VariableNames.rst:317
msgid "clang"
msgstr ""

#: ../../../Proposals/VariableNames.rst:318
msgid "ARM backend"
msgstr ""

#: ../../../Proposals/VariableNames.rst:319
msgid "AArch64 backend"
msgstr ""

#: ../../../Proposals/VariableNames.rst:320
msgid "AMDGPU backend"
msgstr ""

#: ../../../Proposals/VariableNames.rst:321
msgid "ARC backend"
msgstr ""

#: ../../../Proposals/VariableNames.rst:322
msgid "AVR backend"
msgstr ""

#: ../../../Proposals/VariableNames.rst:323
msgid "BPF backend"
msgstr ""

#: ../../../Proposals/VariableNames.rst:324
msgid "Hexagon backend"
msgstr ""

#: ../../../Proposals/VariableNames.rst:325
msgid "Lanai backend"
msgstr ""

#: ../../../Proposals/VariableNames.rst:326
msgid "MIPS backend"
msgstr ""

#: ../../../Proposals/VariableNames.rst:327
msgid "NVPTX backend"
msgstr ""

#: ../../../Proposals/VariableNames.rst:328
msgid "PowerPC backend"
msgstr ""

#: ../../../Proposals/VariableNames.rst:329
msgid "RISC-V backend"
msgstr ""

#: ../../../Proposals/VariableNames.rst:330
msgid "Sparc backend"
msgstr ""

#: ../../../Proposals/VariableNames.rst:331
msgid "SystemZ backend"
msgstr ""

#: ../../../Proposals/VariableNames.rst:332
msgid "WebAssembly backend"
msgstr ""

#: ../../../Proposals/VariableNames.rst:333
msgid "X86 backend"
msgstr ""

#: ../../../Proposals/VariableNames.rst:334
msgid "XCore backend"
msgstr ""

#: ../../../Proposals/VariableNames.rst:335
msgid "libLTO"
msgstr ""

#: ../../../Proposals/VariableNames.rst:336
msgid "Debug Information"
msgstr ""

#: ../../../Proposals/VariableNames.rst:337
msgid "Remainder of llvm"
msgstr ""

#: ../../../Proposals/VariableNames.rst:338
msgid "compiler-rt"
msgstr ""

#: ../../../Proposals/VariableNames.rst:339
msgid "libunwind"
msgstr ""

#: ../../../Proposals/VariableNames.rst:340
msgid "openmp"
msgstr ""

#: ../../../Proposals/VariableNames.rst:341
msgid "parallel-libs"
msgstr ""

#: ../../../Proposals/VariableNames.rst:342
msgid "polly"
msgstr ""

#: ../../../Proposals/VariableNames.rst:343
msgid "lldb"
msgstr ""

#: ../../../Proposals/VariableNames.rst:345
msgid "Remove the old variable name rule from the policy page."
msgstr ""

#: ../../../Proposals/VariableNames.rst:347
msgid ""
"Repeat many of the steps in the sequence, using a script to expand acronyms."
msgstr ""

#: ../../../Proposals/VariableNames.rst:350
msgid "References"
msgstr ""

#: ../../../Proposals/VariableNames.rst:352
msgid ""
"LLDB Coding Conventions https://llvm.org/svn/llvm-project/lldb/branches/"
"release_39/www/lldb-coding-conventions.html"
msgstr ""

#: ../../../Proposals/VariableNames.rst:353
msgid ""
"Google C++ Style Guide https://google.github.io/styleguide/cppguide."
"html#Variable_Names"
msgstr ""

#: ../../../Proposals/VariableNames.rst:354
msgid ""
"WebKit Code Style Guidelines https://webkit.org/code-style-guidelines/#names"
msgstr ""

#: ../../../Proposals/VariableNames.rst:355
msgid "Qt Coding Style https://wiki.qt.io/Qt_Coding_Style#Declaring_variables"
msgstr ""

#: ../../../Proposals/VariableNames.rst:356
msgid ""
"Rust naming conventions https://doc.rust-lang.org/1.0.0/style/style/naming/"
"README.html"
msgstr ""

#: ../../../Proposals/VariableNames.rst:357
msgid ""
"Swift API Design Guidelines https://swift.org/documentation/api-design-"
"guidelines/#general-conventions"
msgstr ""

#: ../../../Proposals/VariableNames.rst:358
msgid ""
"Style Guide for Python Code https://www.python.org/dev/peps/pep-0008/"
"#function-and-variable-names"
msgstr ""

#: ../../../Proposals/VariableNames.rst:359
msgid ""
"Mozilla Coding style: Prefixes https://firefox-source-docs.mozilla.org/tools/"
"lint/coding-style/coding_style_cpp.html#prefixes"
msgstr ""

#: ../../../Proposals/VariableNames.rst:360
msgid "LLVM with support for SVE https://github.com/ARM-software/LLVM-SVE"
msgstr ""

#: ../../../Proposals/VariableNames.rst:361
msgid ""
"Mehdi Amini, http://lists.llvm.org/pipermail/llvm-dev/2019-February/130329."
"html"
msgstr ""

#: ../../../Proposals/VariableNames.rst:362
msgid ""
"Matt Arsenault, http://lists.llvm.org/pipermail/llvm-dev/2019-"
"February/129934.html"
msgstr ""

#: ../../../Proposals/VariableNames.rst:363
msgid ""
"Kristof Beyls, http://lists.llvm.org/pipermail/llvm-dev/2019-February/130292."
"html"
msgstr ""

#: ../../../Proposals/VariableNames.rst:364
msgid ""
"Alex Bradbury, http://lists.llvm.org/pipermail/llvm-dev/2019-February/130266."
"html"
msgstr ""

#: ../../../Proposals/VariableNames.rst:365
msgid ""
"Alex Bradbury, http://lists.llvm.org/pipermail/llvm-dev/2019-February/130388."
"html"
msgstr ""

#: ../../../Proposals/VariableNames.rst:366
msgid ""
"Chandler Carruth, http://lists.llvm.org/pipermail/llvm-dev/2019-"
"February/130313.html"
msgstr ""

#: ../../../Proposals/VariableNames.rst:367
msgid ""
"Chandler Carruth, http://lists.llvm.org/pipermail/llvm-dev/2019-"
"February/130214.html"
msgstr ""

#: ../../../Proposals/VariableNames.rst:368
msgid ""
"Chandler Carruth, http://lists.llvm.org/pipermail/llvm-dev/2019-"
"February/130310.html"
msgstr ""

#: ../../../Proposals/VariableNames.rst:369
msgid ""
"Chandler Carruth, http://lists.llvm.org/pipermail/llvm-dev/2019-"
"February/130309.html"
msgstr ""

#: ../../../Proposals/VariableNames.rst:370
msgid ""
"Chandler Carruth, http://lists.llvm.org/pipermail/llvm-dev/2019-"
"February/130312.html"
msgstr ""

#: ../../../Proposals/VariableNames.rst:371
msgid ""
"Chandler Carruth, http://lists.llvm.org/pipermail/llvm-dev/2019-"
"February/130430.html"
msgstr ""

#: ../../../Proposals/VariableNames.rst:372
msgid ""
"Sanjoy Das, http://lists.llvm.org/pipermail/llvm-dev/2019-February/130304."
"html"
msgstr ""

#: ../../../Proposals/VariableNames.rst:373
msgid ""
"Alex Denisov, http://lists.llvm.org/pipermail/llvm-dev/2019-February/130179."
"html"
msgstr ""

#: ../../../Proposals/VariableNames.rst:374
msgid ""
"Amara Emerson, http://lists.llvm.org/pipermail/llvm-dev/2019-February/129894."
"html"
msgstr ""

#: ../../../Proposals/VariableNames.rst:375
msgid ""
"David Greene, http://lists.llvm.org/pipermail/llvm-dev/2019-February/130425."
"html"
msgstr ""

#: ../../../Proposals/VariableNames.rst:376
msgid ""
"David Greene, http://lists.llvm.org/pipermail/llvm-dev/2019-February/130228."
"html"
msgstr ""

#: ../../../Proposals/VariableNames.rst:377
msgid ""
"James Henderson, http://lists.llvm.org/pipermail/llvm-dev/2019-"
"February/130465.html"
msgstr ""

#: ../../../Proposals/VariableNames.rst:378
msgid ""
"Nicolai Hähnle, http://lists.llvm.org/pipermail/llvm-dev/2019-"
"February/129923.html"
msgstr ""

#: ../../../Proposals/VariableNames.rst:379
msgid ""
"Nemanja Ivanovic, http://lists.llvm.org/pipermail/llvm-dev/2019-"
"February/130249.html"
msgstr ""

#: ../../../Proposals/VariableNames.rst:380
msgid ""
"JD Jones, http://lists.llvm.org/pipermail/llvm-dev/2019-February/129926.html"
msgstr ""

#: ../../../Proposals/VariableNames.rst:381
msgid ""
"Chris Lattner, http://lists.llvm.org/pipermail/llvm-dev/2019-February/130353."
"html"
msgstr ""

#: ../../../Proposals/VariableNames.rst:382
msgid ""
"Chris Latter, http://lists.llvm.org/pipermail/llvm-dev/2019-February/129907."
"html"
msgstr ""

#: ../../../Proposals/VariableNames.rst:383
msgid ""
"Chris Lattner, http://lists.llvm.org/pipermail/llvm-dev/2019-February/130630."
"html"
msgstr ""

#: ../../../Proposals/VariableNames.rst:384
msgid ""
"Chris Lattner, http://lists.llvm.org/pipermail/llvm-dev/2019-February/130629."
"html"
msgstr ""

#: ../../../Proposals/VariableNames.rst:385
msgid ""
"Chris Lattner, http://lists.llvm.org/pipermail/llvm-dev/2019-February/130355."
"html"
msgstr ""

#: ../../../Proposals/VariableNames.rst:386
msgid ""
"Danila Malyutin, http://lists.llvm.org/pipermail/llvm-dev/2019-"
"February/130320.html"
msgstr ""

#: ../../../Proposals/VariableNames.rst:387
msgid ""
"Krzysztof Parzyszek, http://lists.llvm.org/pipermail/llvm-dev/2019-"
"February/130306.html"
msgstr ""

#: ../../../Proposals/VariableNames.rst:388
msgid ""
"Krzysztof Parzyszek, http://lists.llvm.org/pipermail/llvm-dev/2019-"
"February/130323.html"
msgstr ""

#: ../../../Proposals/VariableNames.rst:389
msgid ""
"Krzysztof Parzyszek, http://lists.llvm.org/pipermail/llvm-dev/2019-"
"February/129941.html"
msgstr ""

#: ../../../Proposals/VariableNames.rst:390
msgid ""
"Diana Picus, http://lists.llvm.org/pipermail/llvm-dev/2019-February/130318."
"html"
msgstr ""

#: ../../../Proposals/VariableNames.rst:391
msgid ""
"Philip Reames, http://lists.llvm.org/pipermail/llvm-dev/2019-February/130181."
"html"
msgstr ""

#: ../../../Proposals/VariableNames.rst:392
msgid ""
"Bruno Ricci, http://lists.llvm.org/pipermail/llvm-dev/2019-February/130328."
"html"
msgstr ""

#: ../../../Proposals/VariableNames.rst:393
msgid ""
"Paul Robinson, http://lists.llvm.org/pipermail/llvm-dev/2019-February/130111."
"html"
msgstr ""

#: ../../../Proposals/VariableNames.rst:394
msgid ""
"Paul Robinson, http://lists.llvm.org/pipermail/llvm-dev/2019-February/129920."
"html"
msgstr ""

#: ../../../Proposals/VariableNames.rst:395
msgid ""
"Paul Robinson, http://lists.llvm.org/pipermail/llvm-dev/2019-February/130229."
"html"
msgstr ""

#: ../../../Proposals/VariableNames.rst:396
msgid ""
"Paul Robinson, http://lists.llvm.org/pipermail/llvm-dev/2019-February/130415."
"html"
msgstr ""

#: ../../../Proposals/VariableNames.rst:397
msgid "Zachary Turner, https://reviews.llvm.org/D57896#1402264"
msgstr ""

#: ../../../Proposals/VariableNames.rst:398
msgid ""
"Zachary Turner, http://lists.llvm.org/pipermail/llvm-dev/2019-"
"February/130213.html"
msgstr ""

#: ../../../Proposals/VariableNames.rst:399
msgid ""
"Rui Ueyama, http://lists.llvm.org/pipermail/llvm-dev/2019-February/130435."
"html"
msgstr ""
