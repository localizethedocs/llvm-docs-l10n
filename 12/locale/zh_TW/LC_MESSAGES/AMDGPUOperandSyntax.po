# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:12+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../AMDGPUOperandSyntax.rst:3
msgid "Syntax of AMDGPU Instruction Operands"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:9
msgid "Conventions"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:11
msgid "The following notation is used throughout this document:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:14
msgid "Notation"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:14 ../../../AMDGPUOperandSyntax.rst:37
#: ../../../AMDGPUOperandSyntax.rst:85 ../../../AMDGPUOperandSyntax.rst:117
#: ../../../AMDGPUOperandSyntax.rst:188 ../../../AMDGPUOperandSyntax.rst:276
#: ../../../AMDGPUOperandSyntax.rst:335 ../../../AMDGPUOperandSyntax.rst:345
#: ../../../AMDGPUOperandSyntax.rst:364 ../../../AMDGPUOperandSyntax.rst:374
#: ../../../AMDGPUOperandSyntax.rst:393 ../../../AMDGPUOperandSyntax.rst:403
#: ../../../AMDGPUOperandSyntax.rst:428 ../../../AMDGPUOperandSyntax.rst:438
#: ../../../AMDGPUOperandSyntax.rst:462 ../../../AMDGPUOperandSyntax.rst:472
#: ../../../AMDGPUOperandSyntax.rst:489 ../../../AMDGPUOperandSyntax.rst:507
#: ../../../AMDGPUOperandSyntax.rst:517 ../../../AMDGPUOperandSyntax.rst:746
#: ../../../AMDGPUOperandSyntax.rst:1014 ../../../AMDGPUOperandSyntax.rst:1076
msgid "Description"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:16
msgid "{0..N}"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:16
msgid "Any integer value in the range from 0 to N (inclusive)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:17
msgid "<x>"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:17
msgid "Syntax and meaning of *x* is explained elsewhere."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:23
msgid "Operands"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:28
msgid "v"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:30
msgid "Vector registers. There are 256 32-bit vector registers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:32
msgid ""
"A sequence of *vector* registers may be used to operate with more than 32 "
"bits of data."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:34
msgid ""
"Assembler currently supports sequences of 1, 2, 3, 4, 8 and 16 *vector* "
"registers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:37 ../../../AMDGPUOperandSyntax.rst:85
#: ../../../AMDGPUOperandSyntax.rst:117 ../../../AMDGPUOperandSyntax.rst:188
#: ../../../AMDGPUOperandSyntax.rst:276 ../../../AMDGPUOperandSyntax.rst:335
#: ../../../AMDGPUOperandSyntax.rst:345 ../../../AMDGPUOperandSyntax.rst:364
#: ../../../AMDGPUOperandSyntax.rst:374 ../../../AMDGPUOperandSyntax.rst:393
#: ../../../AMDGPUOperandSyntax.rst:403 ../../../AMDGPUOperandSyntax.rst:428
#: ../../../AMDGPUOperandSyntax.rst:438 ../../../AMDGPUOperandSyntax.rst:462
#: ../../../AMDGPUOperandSyntax.rst:472 ../../../AMDGPUOperandSyntax.rst:489
#: ../../../AMDGPUOperandSyntax.rst:507 ../../../AMDGPUOperandSyntax.rst:517
#: ../../../AMDGPUOperandSyntax.rst:657 ../../../AMDGPUOperandSyntax.rst:746
#: ../../../AMDGPUOperandSyntax.rst:769 ../../../AMDGPUOperandSyntax.rst:791
#: ../../../AMDGPUOperandSyntax.rst:969
msgid "Syntax"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:39
msgid "**v**\\<N>"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:39 ../../../AMDGPUOperandSyntax.rst:43
msgid "A single 32-bit *vector* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:41 ../../../AMDGPUOperandSyntax.rst:121
#: ../../../AMDGPUOperandSyntax.rst:192 ../../../AMDGPUOperandSyntax.rst:280
msgid ""
"*N* must be a decimal :ref:`integer number<amdgpu_synid_integer_number>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:43
msgid "**v[**\\ <N>\\ **]**"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:45 ../../../AMDGPUOperandSyntax.rst:125
#: ../../../AMDGPUOperandSyntax.rst:197 ../../../AMDGPUOperandSyntax.rst:284
msgid ""
"*N* may be specified as an :ref:`integer "
"number<amdgpu_synid_integer_number>` or an :ref:`absolute "
"expression<amdgpu_synid_absolute_expression>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:48
msgid "**v[**\\ <N>:<K>\\ **]**"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:48 ../../../AMDGPUOperandSyntax.rst:53
msgid "A sequence of (\\ *K-N+1*\\ ) *vector* registers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:50 ../../../AMDGPUOperandSyntax.rst:130
#: ../../../AMDGPUOperandSyntax.rst:202 ../../../AMDGPUOperandSyntax.rst:289
msgid ""
"*N* and *K* may be specified as :ref:`integer "
"numbers<amdgpu_synid_integer_number>` or :ref:`absolute "
"expressions<amdgpu_synid_absolute_expression>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:53
msgid "**[v**\\ <N>, \\ **v**\\ <N+1>, ... **v**\\ <K>\\ **]**"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:55 ../../../AMDGPUOperandSyntax.rst:135
#: ../../../AMDGPUOperandSyntax.rst:208 ../../../AMDGPUOperandSyntax.rst:294
msgid ""
"Register indices must be specified as decimal :ref:`integer "
"numbers<amdgpu_synid_integer_number>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:59 ../../../AMDGPUOperandSyntax.rst:139
#: ../../../AMDGPUOperandSyntax.rst:212 ../../../AMDGPUOperandSyntax.rst:298
msgid "Note: *N* and *K* must satisfy the following conditions:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:61 ../../../AMDGPUOperandSyntax.rst:141
#: ../../../AMDGPUOperandSyntax.rst:215 ../../../AMDGPUOperandSyntax.rst:301
msgid "*N* <= *K*."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:62 ../../../AMDGPUOperandSyntax.rst:142
msgid "0 <= *N* <= 255."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:63 ../../../AMDGPUOperandSyntax.rst:143
msgid "0 <= *K* <= 255."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:64
msgid "*K-N+1* must be equal to 1, 2, 3, 4, 8 or 16."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:66 ../../../AMDGPUOperandSyntax.rst:97
#: ../../../AMDGPUOperandSyntax.rst:146 ../../../AMDGPUOperandSyntax.rst:220
#: ../../../AMDGPUOperandSyntax.rst:306 ../../../AMDGPUOperandSyntax.rst:825
msgid "Examples:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:82
msgid ""
"GFX10 *Image* instructions may use special *NSA* (Non-Sequential Address) "
"syntax for *image addresses*:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:87
msgid "**[Vm**, \\ **Vn**, ... **Vk**\\ **]**"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:87
msgid ""
"A sequence of 32-bit *vector* registers. Each register may be specified "
"using syntax defined :ref:`above<amdgpu_synid_v>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:91
msgid ""
"In contrast with standard syntax, registers in *NSA* sequence are not "
"required to have consecutive indices. Moreover, the same register may appear "
"in the list more than once."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:108
msgid "a"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:110
msgid "Accumulator registers. There are 256 32-bit accumulator registers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:112
msgid ""
"A sequence of *accumulator* registers may be used to operate with more than "
"32 bits of data."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:114
msgid ""
"Assembler currently supports sequences of 1, 2, 4 and 16 *accumulator* "
"registers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:117
msgid "An Alternative Syntax (SP3)"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:119
msgid "**a**\\<N>"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:119
msgid "**acc**\\<N>"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:119 ../../../AMDGPUOperandSyntax.rst:123
msgid "A single 32-bit *accumulator* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:123
msgid "**a[**\\ <N>\\ **]**"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:123
msgid "**acc[**\\ <N>\\ **]**"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:128
msgid "**a[**\\ <N>:<K>\\ **]**"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:128
msgid "**acc[**\\ <N>:<K>\\ **]**"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:128 ../../../AMDGPUOperandSyntax.rst:133
msgid "A sequence of (\\ *K-N+1*\\ ) *accumulator* registers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:133
msgid "**[a**\\ <N>, \\ **a**\\ <N+1>, ... **a**\\ <K>\\ **]**"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:133
msgid "**[acc**\\ <N>, \\ **acc**\\ <N+1>, ... **acc**\\ <K>\\ **]**"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:144
msgid "*K-N+1* must be equal to 1, 2, 4 or 16."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:168
msgid "s"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:170
msgid ""
"Scalar 32-bit registers. The number of available *scalar* registers depends "
"on GPU:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:173 ../../../AMDGPUOperandSyntax.rst:261
msgid "GPU"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:173
msgid "Number of *scalar* registers"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:175 ../../../AMDGPUOperandSyntax.rst:263
msgid "GFX7"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:175
msgid "104"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:176 ../../../AMDGPUOperandSyntax.rst:264
msgid "GFX8"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:176 ../../../AMDGPUOperandSyntax.rst:177
msgid "102"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:177 ../../../AMDGPUOperandSyntax.rst:265
msgid "GFX9"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:178 ../../../AMDGPUOperandSyntax.rst:266
msgid "GFX10"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:178
msgid "106"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:181
msgid ""
"A sequence of *scalar* registers may be used to operate with more than 32 "
"bits of data. Assembler currently supports sequences of 1, 2, 4, 8 and 16 "
"*scalar* registers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:184
msgid ""
"Pairs of *scalar* registers must be even-aligned (the first register must be "
"even). Sequences of 4 and more *scalar* registers must be quad-aligned."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:190
msgid "**s**\\ <N>"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:190 ../../../AMDGPUOperandSyntax.rst:195
msgid "A single 32-bit *scalar* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:195
msgid "**s[**\\ <N>\\ **]**"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:200
msgid "**s[**\\ <N>:<K>\\ **]**"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:200 ../../../AMDGPUOperandSyntax.rst:206
msgid "A sequence of (\\ *K-N+1*\\ ) *scalar* registers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:206
msgid "**[s**\\ <N>, \\ **s**\\ <N+1>, ... **s**\\ <K>\\ **]**"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:214 ../../../AMDGPUOperandSyntax.rst:300
msgid "*N* must be properly aligned based on sequence size."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:216
msgid ""
"0 <= *N* < *SMAX*\\ , where *SMAX* is the number of available *scalar* "
"registers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:217
msgid ""
"0 <= *K* < *SMAX*\\ , where *SMAX* is the number of available *scalar* "
"registers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:218 ../../../AMDGPUOperandSyntax.rst:304
msgid "*K-N+1* must be equal to 1, 2, 4, 8 or 16."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:234
msgid "Examples of *scalar* registers with an invalid alignment:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:244
msgid "trap"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:246
msgid "A set of trap handler registers:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:248
msgid ":ref:`ttmp<amdgpu_synid_ttmp>`"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:249
msgid ":ref:`tba<amdgpu_synid_tba>`"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:250
msgid ":ref:`tma<amdgpu_synid_tma>`"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:255
msgid "ttmp"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:257
msgid ""
"Trap handler temporary scalar registers, 32-bits wide. The number of "
"available *ttmp* registers depends on GPU:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:261
msgid "Number of *ttmp* registers"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:263 ../../../AMDGPUOperandSyntax.rst:264
msgid "12"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:265 ../../../AMDGPUOperandSyntax.rst:266
#: ../../../AMDGPUOperandSyntax.rst:1016 ../../../AMDGPUOperandSyntax.rst:1020
msgid "16"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:269
msgid ""
"A sequence of *ttmp* registers may be used to operate with more than 32 bits "
"of data. Assembler currently supports sequences of 1, 2, 4, 8 and 16 *ttmp* "
"registers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:272
msgid ""
"Pairs of *ttmp* registers must be even-aligned (the first register must be "
"even). Sequences of 4 and more *ttmp* registers must be quad-aligned."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:278
msgid "**ttmp**\\ <N>"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:278 ../../../AMDGPUOperandSyntax.rst:282
msgid "A single 32-bit *ttmp* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:282
msgid "**ttmp[**\\ <N>\\ **]**"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:287
msgid "**ttmp[**\\ <N>:<K>\\ **]**"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:287 ../../../AMDGPUOperandSyntax.rst:292
msgid "A sequence of (\\ *K-N+1*\\ ) *ttmp* registers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:292
msgid "**[ttmp**\\ <N>, \\ **ttmp**\\ <N+1>, ... **ttmp**\\ <K>\\ **]**"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:302
msgid ""
"0 <= *N* < *TMAX*, where *TMAX* is the number of available *ttmp* registers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:303
msgid ""
"0 <= *K* < *TMAX*, where *TMAX* is the number of available *ttmp* registers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:320
msgid "Examples of *ttmp* registers with an invalid alignment:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:330 ../../../AMDGPUOperandSyntax.rst:337
msgid "tba"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:332
msgid ""
"Trap base address, 64-bits wide. Holds the pointer to the current trap "
"handler program."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:335 ../../../AMDGPUOperandSyntax.rst:345
#: ../../../AMDGPUOperandSyntax.rst:364 ../../../AMDGPUOperandSyntax.rst:374
#: ../../../AMDGPUOperandSyntax.rst:627 ../../../AMDGPUOperandSyntax.rst:657
msgid "Availability"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:337
msgid "64-bit *trap base address* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:337 ../../../AMDGPUOperandSyntax.rst:338
#: ../../../AMDGPUOperandSyntax.rst:339 ../../../AMDGPUOperandSyntax.rst:347
#: ../../../AMDGPUOperandSyntax.rst:348 ../../../AMDGPUOperandSyntax.rst:349
#: ../../../AMDGPUOperandSyntax.rst:350 ../../../AMDGPUOperandSyntax.rst:366
#: ../../../AMDGPUOperandSyntax.rst:367 ../../../AMDGPUOperandSyntax.rst:368
#: ../../../AMDGPUOperandSyntax.rst:376 ../../../AMDGPUOperandSyntax.rst:377
#: ../../../AMDGPUOperandSyntax.rst:378 ../../../AMDGPUOperandSyntax.rst:379
msgid "GFX7, GFX8"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:338
msgid "[tba]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:338 ../../../AMDGPUOperandSyntax.rst:339
msgid "64-bit *trap base address* register (an SP3 syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:339
msgid "[tba_lo,tba_hi]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:342
msgid ""
"High and low 32 bits of *trap base address* may be accessed as separate "
"registers:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:347
msgid "tba_lo"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:347
msgid "Low 32 bits of *trap base address* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:348
msgid "tba_hi"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:348
msgid "High 32 bits of *trap base address* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:349
msgid "[tba_lo]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:349
msgid "Low 32 bits of *trap base address* register (an SP3 syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:350
msgid "[tba_hi]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:350
msgid "High 32 bits of *trap base address* register (an SP3 syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:353
msgid ""
"Note that *tba*, *tba_lo* and *tba_hi* are not accessible as assembler "
"registers in GFX9 and GFX10, but *tba* is readable/writable with the help of "
"*s_get_reg* and *s_set_reg* instructions."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:359 ../../../AMDGPUOperandSyntax.rst:366
msgid "tma"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:361
msgid "Trap memory address, 64-bits wide."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:366
msgid "64-bit *trap memory address* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:367
msgid "[tma]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:367 ../../../AMDGPUOperandSyntax.rst:368
msgid "64-bit *trap memory address* register (an SP3 syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:368
msgid "[tma_lo,tma_hi]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:371
msgid ""
"High and low 32 bits of *trap memory address* may be accessed as separate "
"registers:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:376
msgid "tma_lo"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:376
msgid "Low 32 bits of *trap memory address* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:377
msgid "tma_hi"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:377
msgid "High 32 bits of *trap memory address* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:378
msgid "[tma_lo]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:378
msgid "Low 32 bits of *trap memory address* register (an SP3 syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:379
msgid "[tma_hi]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:379
msgid "High 32 bits of *trap memory address* register (an SP3 syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:382
msgid ""
"Note that *tma*, *tma_lo* and *tma_hi* are not accessible as assembler "
"registers in GFX9 and GFX10, but *tma* is readable/writable with the help of "
"*s_get_reg* and *s_set_reg* instructions."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:388 ../../../AMDGPUOperandSyntax.rst:395
msgid "flat_scratch"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:390
msgid ""
"Flat scratch address, 64-bits wide. Holds the base address of scratch memory."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:395
msgid "64-bit *flat scratch* address register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:396
msgid "[flat_scratch]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:396 ../../../AMDGPUOperandSyntax.rst:397
msgid "64-bit *flat scratch* address register (an SP3 syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:397
msgid "[flat_scratch_lo,flat_scratch_hi]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:400
msgid ""
"High and low 32 bits of *flat scratch* address may be accessed as separate "
"registers:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:405
msgid "flat_scratch_lo"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:405
msgid "Low 32 bits of *flat scratch* address register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:406
msgid "flat_scratch_hi"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:406
msgid "High 32 bits of *flat scratch* address register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:407
msgid "[flat_scratch_lo]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:407
msgid "Low 32 bits of *flat scratch* address register (an SP3 syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:408
msgid "[flat_scratch_hi]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:408
msgid "High 32 bits of *flat scratch* address register (an SP3 syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:411
msgid ""
"Note that *flat_scratch*, *flat_scratch_lo* and *flat_scratch_hi* are not "
"accessible as assembler registers in GFX10, but *flat_scratch* is readable/"
"writable with the help of *s_get_reg* and *s_set_reg* instructions."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:418
msgid "xnack"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:420
msgid ""
"Xnack mask, 64-bits wide. Holds a 64-bit mask of which threads received an "
"*XNACK* due to a vector memory operation."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:423
msgid ""
"GFX7 does not support *xnack* feature. For availability of this feature in "
"other GPUs, refer :ref:`this table<amdgpu-processors>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:425 ../../../AMDGPUOperandSyntax.rst:775
msgid "\\"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:430
msgid "xnack_mask"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:430
msgid "64-bit *xnack mask* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:431
msgid "[xnack_mask]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:431 ../../../AMDGPUOperandSyntax.rst:432
msgid "64-bit *xnack mask* register (an SP3 syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:432
msgid "[xnack_mask_lo,xnack_mask_hi]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:435
msgid ""
"High and low 32 bits of *xnack mask* may be accessed as separate registers:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:440
msgid "xnack_mask_lo"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:440
msgid "Low 32 bits of *xnack mask* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:441
msgid "xnack_mask_hi"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:441
msgid "High 32 bits of *xnack mask* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:442
msgid "[xnack_mask_lo]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:442
msgid "Low 32 bits of *xnack mask* register (an SP3 syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:443
msgid "[xnack_mask_hi]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:443
msgid "High 32 bits of *xnack mask* register (an SP3 syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:446
msgid ""
"Note that *xnack_mask*, *xnack_mask_lo* and *xnack_mask_hi* are not "
"accessible as assembler registers in GFX10, but *xnack_mask* is readable/"
"writable with the help of *s_get_reg* and *s_set_reg* instructions."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:454 ../../../AMDGPUOperandSyntax.rst:464
msgid "vcc"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:456
msgid ""
"Vector condition code, 64-bits wide. A bit mask with one bit per thread; it "
"holds the result of a vector compare operation."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:459
msgid ""
"Note that GFX10 H/W does not use high 32 bits of *vcc* in *wave32* mode."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:464
msgid "64-bit *vector condition code* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:465
msgid "[vcc]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:465 ../../../AMDGPUOperandSyntax.rst:466
msgid "64-bit *vector condition code* register (an SP3 syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:466
msgid "[vcc_lo,vcc_hi]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:469
msgid ""
"High and low 32 bits of *vector condition code* may be accessed as separate "
"registers:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:474
msgid "vcc_lo"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:474
msgid "Low 32 bits of *vector condition code* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:475
msgid "vcc_hi"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:475
msgid "High 32 bits of *vector condition code* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:476
msgid "[vcc_lo]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:476
msgid "Low 32 bits of *vector condition code* register (an SP3 syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:477
msgid "[vcc_hi]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:477
msgid "High 32 bits of *vector condition code* register (an SP3 syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:483 ../../../AMDGPUOperandSyntax.rst:491
msgid "m0"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:485
msgid ""
"A 32-bit memory register. It has various uses, including register indexing "
"and bounds checking."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:491
msgid "A 32-bit *memory* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:492
msgid "[m0]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:492
msgid "A 32-bit *memory* register (an SP3 syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:498 ../../../AMDGPUOperandSyntax.rst:509
msgid "exec"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:500
msgid ""
"Execute mask, 64-bits wide. A bit mask with one bit per thread, which is "
"applied to vector instructions and controls which threads execute and which "
"ignore the instruction."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:504
msgid ""
"Note that GFX10 H/W does not use high 32 bits of *exec* in *wave32* mode."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:509
msgid "64-bit *execute mask* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:510
msgid "[exec]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:510 ../../../AMDGPUOperandSyntax.rst:511
msgid "64-bit *execute mask* register (an SP3 syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:511
msgid "[exec_lo,exec_hi]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:514
msgid ""
"High and low 32 bits of *execute mask* may be accessed as separate registers:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:519
msgid "exec_lo"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:519
msgid "Low 32 bits of *execute mask* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:520
msgid "exec_hi"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:520
msgid "High 32 bits of *execute mask* register."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:521
msgid "[exec_lo]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:521
msgid "Low 32 bits of *execute mask* register (an SP3 syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:522
msgid "[exec_hi]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:522
msgid "High 32 bits of *execute mask* register (an SP3 syntax)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:528
msgid "vccz"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:530
msgid ""
"A single bit flag indicating that the :ref:`vcc<amdgpu_synid_vcc>` is all "
"zeros."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:532
msgid ""
"Note: when GFX10 operates in *wave32* mode, this register reflects state of :"
"ref:`vcc_lo<amdgpu_synid_vcc_lo>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:537
msgid "execz"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:539
msgid ""
"A single bit flag indicating that the :ref:`exec<amdgpu_synid_exec>` is all "
"zeros."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:541
msgid ""
"Note: when GFX10 operates in *wave32* mode, this register reflects state of :"
"ref:`exec_lo<amdgpu_synid_exec>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:546
msgid "scc"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:548
msgid "A single bit flag indicating the result of a scalar compare operation."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:553
msgid "lds_direct"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:555
msgid ""
"A special operand which supplies a 32-bit value fetched from *LDS* memory "
"using :ref:`m0<amdgpu_synid_m0>` as an address."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:561
msgid "null"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:563
msgid ""
"This is a special operand which may be used as a source or a destination."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:565
msgid "When used as a destination, the result of the operation is discarded."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:567
msgid "When used as a source, it supplies zero value."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:569
msgid "GFX10 only."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:571
msgid ""
"Due to a H/W bug, this operand cannot be used with VALU instructions in "
"first generation of GFX10."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:576
msgid "inline constant"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:578
msgid ""
"An *inline constant* is an integer or a floating-point value encoded as a "
"part of an instruction. Compare *inline constants* with :ref:"
"`literals<amdgpu_synid_literal>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:581
msgid "Inline constants include:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:583
msgid ":ref:`iconst<amdgpu_synid_iconst>`"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:584
msgid ":ref:`fconst<amdgpu_synid_fconst>`"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:585
msgid ":ref:`ival<amdgpu_synid_ival>`"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:587
msgid ""
"If a number may be encoded as either a :ref:`literal<amdgpu_synid_literal>` "
"or a :ref:`constant<amdgpu_synid_constant>`, assembler selects the latter "
"encoding as more efficient."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:595
msgid "iconst"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:597
msgid ""
"An :ref:`integer number<amdgpu_synid_integer_number>` or an :ref:`absolute "
"expression<amdgpu_synid_absolute_expression>` encoded as an *inline "
"constant*."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:601
msgid ""
"Only a small fraction of integer numbers may be encoded as *inline "
"constants*. They are enumerated in the table below. Other integer numbers "
"have to be encoded as :ref:`literals<amdgpu_synid_literal>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:606 ../../../AMDGPUOperandSyntax.rst:627
msgid "Value"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:606 ../../../AMDGPUOperandSyntax.rst:627
#: ../../../AMDGPUOperandSyntax.rst:657 ../../../AMDGPUOperandSyntax.rst:791
msgid "Note"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:608
msgid "{0..64}"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:608
msgid "Positive integer inline constants."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:609
msgid "{-16..-1}"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:609
msgid "Negative integer inline constants."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:612 ../../../AMDGPUOperandSyntax.rst:646
msgid "GFX7 does not support inline constants for *f16* operands."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:617
msgid "fconst"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:619
msgid ""
"A :ref:`floating-point number<amdgpu_synid_floating-point_number>` encoded "
"as an *inline constant*."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:622
msgid ""
"Only a small fraction of floating-point numbers may be encoded as *inline "
"constants*. They are enumerated in the table below. Other floating-point "
"numbers have to be encoded as :ref:`literals<amdgpu_synid_literal>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:629
msgid "0.0"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:629
msgid "The same as integer constant 0."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:629 ../../../AMDGPUOperandSyntax.rst:630
#: ../../../AMDGPUOperandSyntax.rst:631 ../../../AMDGPUOperandSyntax.rst:632
#: ../../../AMDGPUOperandSyntax.rst:633 ../../../AMDGPUOperandSyntax.rst:634
#: ../../../AMDGPUOperandSyntax.rst:635 ../../../AMDGPUOperandSyntax.rst:636
#: ../../../AMDGPUOperandSyntax.rst:637
msgid "All GPUs"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:630
msgid "0.5"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:630
msgid "Floating-point constant 0.5"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:631
msgid "1.0"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:631
msgid "Floating-point constant 1.0"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:632
msgid "2.0"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:632
msgid "Floating-point constant 2.0"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:633
msgid "4.0"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:633
msgid "Floating-point constant 4.0"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:634
msgid "-0.5"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:634
msgid "Floating-point constant -0.5"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:635
msgid "-1.0"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:635
msgid "Floating-point constant -1.0"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:636
msgid "-2.0"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:636
msgid "Floating-point constant -2.0"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:637
msgid "-4.0"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:637
msgid "Floating-point constant -4.0"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:638
msgid "0.1592"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:638
msgid "1.0/(2.0*pi). Use only for 16-bit operands."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:638 ../../../AMDGPUOperandSyntax.rst:639
#: ../../../AMDGPUOperandSyntax.rst:640
msgid "GFX8, GFX9, GFX10"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:639
msgid "0.15915494"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:639
msgid "1.0/(2.0*pi). Use only for 16- and 32-bit operands."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:640
msgid "0.15915494309189532"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:640
msgid "1.0/(2.0*pi)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:643
msgid ""
"Floating-point inline constants cannot be used with *16-bit integer* "
"operands. \\ Assembler will attempt to encode these values as literals."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:651
msgid "ival"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:653
msgid ""
"A symbolic operand encoded as an *inline constant*. These operands provide "
"read-only access to H/W registers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:659
msgid "shared_base"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:659
msgid "Base address of shared memory region."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:659 ../../../AMDGPUOperandSyntax.rst:660
#: ../../../AMDGPUOperandSyntax.rst:661 ../../../AMDGPUOperandSyntax.rst:662
#: ../../../AMDGPUOperandSyntax.rst:663
msgid "GFX9, GFX10"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:660
msgid "shared_limit"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:660
msgid "Address of the end of shared memory region."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:661
msgid "private_base"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:661
msgid "Base address of private memory region."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:662
msgid "private_limit"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:662
msgid "Address of the end of private memory region."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:663
msgid "pops_exiting_wave_id"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:663
msgid "A dedicated counter for POPS."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:669
msgid "literal"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:671
msgid ""
"A *literal* is a 64-bit value encoded as a separate 32-bit dword in the "
"instruction stream. Compare *literals* with :ref:`inline "
"constants<amdgpu_synid_constant>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:674
msgid ""
"If a number may be encoded as either a :ref:`literal<amdgpu_synid_literal>` "
"or an :ref:`inline constant<amdgpu_synid_constant>`, assembler selects the "
"latter encoding as more efficient."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:679
msgid ""
"Literals may be specified as :ref:`integer "
"numbers<amdgpu_synid_integer_number>`, :ref:`floating-point "
"numbers<amdgpu_synid_floating-point_number>`, :ref:`absolute "
"expressions<amdgpu_synid_absolute_expression>` or :ref:`relocatable "
"expressions<amdgpu_synid_relocatable_expression>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:684
msgid ""
"An instruction may use only one literal but several operands may refer the "
"same literal."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:689
msgid "uimm8"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:691
msgid ""
"A 8-bit :ref:`integer number<amdgpu_synid_integer_number>` or an :ref:"
"`absolute expression<amdgpu_synid_absolute_expression>`. The value must be "
"in the range 0..0xFF."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:698
msgid "uimm32"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:700
msgid ""
"A 32-bit :ref:`integer number<amdgpu_synid_integer_number>` or an :ref:"
"`absolute expression<amdgpu_synid_absolute_expression>`. The value must be "
"in the range 0..0xFFFFFFFF."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:707
msgid "uimm20"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:709
msgid ""
"A 20-bit :ref:`integer number<amdgpu_synid_integer_number>` or an :ref:"
"`absolute expression<amdgpu_synid_absolute_expression>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:712
msgid "The value must be in the range 0..0xFFFFF."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:717
msgid "uimm21"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:719 ../../../AMDGPUOperandSyntax.rst:731
msgid ""
"A 21-bit :ref:`integer number<amdgpu_synid_integer_number>` or an :ref:"
"`absolute expression<amdgpu_synid_absolute_expression>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:722
msgid "The value must be in the range 0..0x1FFFFF."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:724
msgid ""
"Assembler currently supports 20-bit offsets only. Use :ref:"
"`uimm20<amdgpu_synid_uimm20>` as a replacement."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:729
msgid "simm21"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:734
msgid "The value must be in the range -0x100000..0x0FFFFF."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:736
msgid ""
"Assembler currently supports 20-bit unsigned offsets only. Use :ref:"
"`uimm20<amdgpu_synid_uimm20>` as a replacement."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:741 ../../../AMDGPUOperandSyntax.rst:748
msgid "off"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:743
msgid ""
"A special entity which indicates that the value of this operand is not used."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:748
msgid "Indicates an unused operand."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:755
msgid "Numbers"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:760
msgid "Integer Numbers"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:762
msgid ""
"Integer numbers are 64 bits wide. They are converted to :ref:`expected "
"operand type<amdgpu_syn_instruction_type>` as described :ref:"
"`here<amdgpu_synid_int_conv>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:766
msgid ""
"Integer numbers may be specified in binary, octal, hexadecimal and decimal "
"formats:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:769 ../../../AMDGPUOperandSyntax.rst:791
msgid "Format"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:769
msgid "Example"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:771 ../../../AMDGPUOperandSyntax.rst:793
msgid "Decimal"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:771
msgid "[-]?[1-9][0-9]*"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:771
msgid "-1234"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:772
msgid "Binary"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:772
msgid "[-]?0b[01]+"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:772
msgid "0b1010"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:773
msgid "Octal"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:773
msgid "[-]?0[0-7]+"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:773
msgid "010"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:774 ../../../AMDGPUOperandSyntax.rst:796
msgid "Hexadecimal"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:774
msgid "[-]?0x[0-9a-fA-F]+"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:774
msgid "0xff"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:775
msgid "[-]?[0x]?[0-9][0-9a-fA-F]*[hH]"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:775
msgid "0ffh"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:781
msgid "Floating-Point Numbers"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:783
msgid ""
"All floating-point numbers are handled as double (64 bits wide). They are "
"converted to :ref:`expected operand type<amdgpu_syn_instruction_type>` as "
"described :ref:`here<amdgpu_synid_fp_conv>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:788
msgid ""
"Floating-point numbers may be specified in hexadecimal and decimal formats:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:791
msgid "Examples"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:793
msgid "[-]?[0-9]*[.][0-9]*([eE][+-]?[0-9]*)?"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:793
msgid "-1.234, 234e2"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:793
msgid "Must include either a decimal separator or an exponent."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:796
msgid "[-]0x[0-9a-fA-F]*(.[0-9a-fA-F]*)?[pP][+-]?[0-9a-fA-F]+"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:796
msgid "-0x1afp-10, 0x.1afp10"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:802
msgid "Expressions"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:804
msgid ""
"An expression is evaluated to a 64-bit integer. Note that floating-point "
"expressions are not supported."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:807
msgid "There are two kinds of expressions:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:809
msgid ":ref:`Absolute<amdgpu_synid_absolute_expression>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:810
msgid ":ref:`Relocatable<amdgpu_synid_relocatable_expression>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:815
msgid "Absolute Expressions"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:817
msgid ""
"The value of an absolute expression does not change after program "
"relocation. Absolute expressions must not include unassigned and relocatable "
"values such as labels."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:821
msgid ""
"Absolute expressions are evaluated to 64-bit integer values and converted "
"to :ref:`expected operand type<amdgpu_syn_instruction_type>` as described :"
"ref:`here<amdgpu_synid_int_conv>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:835
msgid "Relocatable Expressions"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:837
msgid "The value of a relocatable expression depends on program relocation."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:839
msgid ""
"Note that use of relocatable expressions is limited with branch targets and "
"32-bit integer operands."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:842
msgid ""
"A relocatable expression is evaluated to a 64-bit integer value which "
"depends on operand kind and :ref:`relocation type<amdgpu-relocation-"
"records>` of symbol(s) used in the expression. For example, if an "
"instruction refers a label, this reference is evaluated to an offset from "
"the address after the instruction to the label address:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:853
msgid ""
"Note that values of relocatable expressions are usually unknown at assembly "
"time; they are resolved later by a linker and converted to :ref:`expected "
"operand type<amdgpu_syn_instruction_type>` as described :ref:"
"`here<amdgpu_synid_rl_conv>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:859
msgid "Operands and Operations"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:861
msgid ""
"Expressions are composed of 64-bit integer operands and operations. Operands "
"include :ref:`integer numbers<amdgpu_synid_integer_number>` and :ref:"
"`symbols<amdgpu_synid_symbol>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:865
msgid ""
"Expressions may also use \".\" which is a reference to the current PC "
"(program counter)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:867
msgid ""
":ref:`Unary<amdgpu_synid_expression_un_op>` and :ref:"
"`binary<amdgpu_synid_expression_bin_op>` operations produce 64-bit integer "
"results."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:871
msgid "Syntax of Expressions"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:873
msgid "Syntax of expressions is shown below::"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:908
msgid "Binary Operators"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:910
msgid ""
"Binary operators are described in the following table. They operate on and "
"produce 64-bit integers. Operators with higher priority are performed first."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:915 ../../../AMDGPUOperandSyntax.rst:947
msgid "Operator"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:915
msgid "Priority"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:915 ../../../AMDGPUOperandSyntax.rst:947
#: ../../../AMDGPUOperandSyntax.rst:969
msgid "Meaning"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:917
msgid "\\*"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:917 ../../../AMDGPUOperandSyntax.rst:918
#: ../../../AMDGPUOperandSyntax.rst:919
msgid "5"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:917
msgid "Integer multiplication."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:918
msgid "/"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:918
msgid "Integer division."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:919
msgid "%"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:919
msgid "Integer signed remainder."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:920 ../../../AMDGPUOperandSyntax.rst:951
msgid "\\+"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:920 ../../../AMDGPUOperandSyntax.rst:921
msgid "4"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:920
msgid "Integer addition."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:921 ../../../AMDGPUOperandSyntax.rst:952
#: ../../../AMDGPUOperandSyntax.rst:1082
msgid "\\-"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:921
msgid "Integer subtraction."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:922
msgid "<<"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:922 ../../../AMDGPUOperandSyntax.rst:923
msgid "3"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:922
msgid "Integer shift left."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:923
msgid ">>"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:923
msgid "Logical shift right."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:924
msgid "=="
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:924 ../../../AMDGPUOperandSyntax.rst:925
#: ../../../AMDGPUOperandSyntax.rst:926 ../../../AMDGPUOperandSyntax.rst:927
#: ../../../AMDGPUOperandSyntax.rst:928 ../../../AMDGPUOperandSyntax.rst:929
#: ../../../AMDGPUOperandSyntax.rst:930
msgid "2"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:924
msgid "Equality comparison."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:925
msgid "!="
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:925 ../../../AMDGPUOperandSyntax.rst:926
msgid "Inequality comparison."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:926
msgid "<>"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:927
msgid "<"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:927
msgid "Signed less than comparison."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:928
msgid "<="
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:928
msgid "Signed less than or equal comparison."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:929
msgid ">"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:929
msgid "Signed greater than comparison."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:930
msgid ">="
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:930
msgid "Signed greater than or equal comparison."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:931
msgid "\\|"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:931 ../../../AMDGPUOperandSyntax.rst:932
#: ../../../AMDGPUOperandSyntax.rst:933
msgid "1"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:931
msgid "Bitwise or."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:932
msgid "^"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:932
msgid "Bitwise xor."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:933
msgid "&"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:933
msgid "Bitwise and."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:934
msgid "&&"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:934 ../../../AMDGPUOperandSyntax.rst:935
msgid "0"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:934
msgid "Logical and."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:935
msgid "||"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:935
msgid "Logical or."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:941
msgid "Unary Operators"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:943
msgid ""
"Unary operators are described in the following table. They operate on and "
"produce 64-bit integers."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:949
msgid "!"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:949
msgid "Logical negation."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:950
msgid "~"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:950
msgid "Bitwise negation."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:951
msgid "Integer unary plus."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:952
msgid "Integer unary minus."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:958
msgid "Symbols"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:960
msgid ""
"A symbol is a named 64-bit integer value, representing a relocatable address "
"or an absolute (non-relocatable) number."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:964
msgid "Symbol names have the following syntax:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:964
msgid "``[a-zA-Z_.][a-zA-Z0-9_$.@]*``"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:966
msgid ""
"The table below provides several examples of syntax used for symbol "
"definition."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:971
msgid ".globl <S>"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:971
msgid "Declares a global symbol S without assigning it a value."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:972
msgid ".set <S>, <E>"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:972 ../../../AMDGPUOperandSyntax.rst:973
msgid "Assigns the value of an expression E to a symbol S."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:973
msgid "<S> = <E>"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:974
msgid "<S>:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:974
msgid "Declares a label S and assigns it the current PC value."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:977
msgid ""
"A symbol may be used before it is declared or assigned; unassigned symbols "
"are assumed to be PC-relative."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:980
msgid ""
"Additional information about symbols may be found :ref:`here<amdgpu-"
"symbols>`."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:985
msgid "Type and Size Conversion"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:987
msgid ""
"This section describes what happens when a 64-bit :ref:`integer "
"number<amdgpu_synid_integer_number>`, a :ref:`floating-point "
"number<amdgpu_synid_floating-point_number>` or an :ref:"
"`expression<amdgpu_synid_expression>` is used for an operand which has a "
"different type or size."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:996
msgid "Conversion of Integer Values"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:998
msgid ""
"Instruction operands may be specified as 64-bit :ref:`integer "
"numbers<amdgpu_synid_integer_number>` or :ref:`absolute "
"expressions<amdgpu_synid_absolute_expression>`. These values are converted "
"to the :ref:`expected operand type<amdgpu_syn_instruction_type>` using the "
"following steps:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1002
msgid ""
"1. *Validation*. Assembler checks if the input value may be truncated "
"without loss to the required *truncation width* (see the table below). There "
"are two cases when this operation is enabled:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1005
msgid "The truncated bits are all 0."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1006
msgid ""
"The truncated bits are all 1 and the value after truncation has its MSB bit "
"set."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1008
msgid "In all other cases assembler triggers an error."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1010
msgid ""
"2. *Conversion*. The input value is converted to the expected type as "
"described in the table below. Depending on operand kind, this conversion is "
"performed by either assembler or AMDGPU H/W (or both)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1014 ../../../AMDGPUOperandSyntax.rst:1076
msgid "Expected type"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1014
msgid "Truncation Width"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1014 ../../../AMDGPUOperandSyntax.rst:1076
msgid "Conversion"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1016 ../../../AMDGPUOperandSyntax.rst:1078
msgid "i16, u16, b16"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1016 ../../../AMDGPUOperandSyntax.rst:1020
msgid "num.u16"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1016
msgid "Truncate to 16 bits."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1017 ../../../AMDGPUOperandSyntax.rst:1081
msgid "i32, u32, b32"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1017 ../../../AMDGPUOperandSyntax.rst:1018
#: ../../../AMDGPUOperandSyntax.rst:1019 ../../../AMDGPUOperandSyntax.rst:1021
#: ../../../AMDGPUOperandSyntax.rst:1022
msgid "32"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1017 ../../../AMDGPUOperandSyntax.rst:1021
msgid "num.u32"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1017
msgid "Truncate to 32 bits."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1018
msgid "i64"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1018
msgid "{-1,num.i32}"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1018
msgid "Truncate to 32 bits and then sign-extend the result to 64 bits."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1019
msgid "u64, b64"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1019
msgid "{0,num.u32}"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1019
msgid "Truncate to 32 bits and then zero-extend the result to 64 bits."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1020 ../../../AMDGPUOperandSyntax.rst:1078
#: ../../../AMDGPUOperandSyntax.rst:1083
msgid "f16"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1020
msgid "Use low 16 bits as an f16 value."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1021 ../../../AMDGPUOperandSyntax.rst:1081
#: ../../../AMDGPUOperandSyntax.rst:1084
msgid "f32"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1021
msgid "Use low 32 bits as an f32 value."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1022 ../../../AMDGPUOperandSyntax.rst:1085
msgid "f64"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1022
msgid "{num.u32,0}"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1022
msgid ""
"Use low 32 bits of the number as high 32 bits of the result; low 32 bits of "
"the result are zeroed."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1026 ../../../AMDGPUOperandSyntax.rst:1091
msgid "Examples of enabled conversions:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1051 ../../../AMDGPUOperandSyntax.rst:1112
msgid "Examples of disabled conversions:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1063
msgid "Conversion of Floating-Point Values"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1065
msgid ""
"Instruction operands may be specified as 64-bit :ref:`floating-point "
"numbers<amdgpu_synid_floating-point_number>`. These values are converted to "
"the :ref:`expected operand type<amdgpu_syn_instruction_type>` using the "
"following steps:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1068
msgid ""
"1. *Validation*. Assembler checks if the input f64 number can be converted "
"to the *required floating-point type* (see the table below) without overflow "
"or underflow. Precision lost is allowed. If this conversion is not possible, "
"assembler triggers an error."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1072
msgid ""
"2. *Conversion*. The input value is converted to the expected type as "
"described in the table below. Depending on operand kind, this is performed "
"by either assembler or AMDGPU H/W (or both)."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1076
msgid "Required FP Type"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1078 ../../../AMDGPUOperandSyntax.rst:1083
msgid "f16(num)"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1078
msgid ""
"Convert to f16 and use bits of the result as an integer value. The value has "
"to be encoded as a literal or an error occurs. Note that the value cannot be "
"encoded as an inline constant."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1081 ../../../AMDGPUOperandSyntax.rst:1084
msgid "f32(num)"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1081
msgid "Convert to f32 and use bits of the result as an integer value."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1082
msgid "i64, u64, b64"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1082
msgid "Conversion disabled."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1083
msgid "Convert to f16."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1084
msgid "Convert to f32."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1085
msgid "{num.u32.hi,0}"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1085
msgid ""
"Use high 32 bits of the number as high 32 bits of the result; zero-fill low "
"32 bits of the result."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1088
msgid "Note that the result may differ from the original number."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1123
msgid "Conversion of Relocatable Values"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1125
msgid ""
":ref:`Relocatable expressions<amdgpu_synid_relocatable_expression>` may be "
"used with 32-bit integer operands and jump targets."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1128
msgid ""
"When the value of a relocatable expression is resolved by a linker, it is "
"converted as needed and truncated to the operand size. The conversion "
"depends on :ref:`relocation type<amdgpu-relocation-records>` and operand "
"kind."
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1132
msgid ""
"For example, when a 32-bit operand of an instruction refers a relocatable "
"expression *expr*, this reference is evaluated to a 64-bit offset from the "
"address after the instruction to the address being referenced, *counted in "
"bytes*. Then the value is truncated to 32 bits and encoded as a literal:"
msgstr ""

#: ../../../AMDGPUOperandSyntax.rst:1143
msgid ""
"As another example, when a branch instruction refers a label, this reference "
"is evaluated to an offset from the address after the instruction to the "
"label address, *counted in dwords*. Then the value is truncated to 16 bits:"
msgstr ""
