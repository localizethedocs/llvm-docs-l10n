# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../ReleaseNotes.rst:3
msgid "LLVM 7.0.0 Release Notes"
msgstr ""

#: ../../../ReleaseNotes.rst:10
msgid "Introduction"
msgstr "簡介"

#: ../../../ReleaseNotes.rst:12
msgid ""
"This document contains the release notes for the LLVM Compiler "
"Infrastructure, release 7.0.0.  Here we describe the status of LLVM, "
"including major improvements from the previous release, improvements in "
"various subprojects of LLVM, and some of the current users of the code.  All "
"LLVM releases may be downloaded from the `LLVM releases web site <https://"
"llvm.org/releases/>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:18
msgid ""
"For more information about LLVM, including information about the latest "
"release, please check out the `main LLVM web site <https://llvm.org/>`_.  If "
"you have questions or comments, the `LLVM Developer's Mailing List <https://"
"lists.llvm.org/mailman/listinfo/llvm-dev>`_ is a good place to send them."
msgstr ""

#: ../../../ReleaseNotes.rst:25
msgid "Non-comprehensive list of changes in this release"
msgstr ""

#: ../../../ReleaseNotes.rst:27
msgid ""
"The Windows installer no longer includes a Visual Studio integration. "
"Instead, a new `LLVM Compiler Toolchain Visual Studio extension <https://"
"marketplace.visualstudio.com/items?itemName=LLVMExtensions.llvm-toolchain>`_ "
"is available on the Visual Studio Marketplace. The new integration supports "
"Visual Studio 2017."
msgstr ""

#: ../../../ReleaseNotes.rst:33
msgid "The LoopInstSimplify pass (``-loop-instsimplify``) has been removed."
msgstr ""

#: ../../../ReleaseNotes.rst:35
msgid ""
"Symbols starting with ``?`` are no longer mangled by LLVM when using the "
"Windows ``x`` or ``w`` IR mangling schemes."
msgstr ""

#: ../../../ReleaseNotes.rst:38
msgid ""
"A new tool named :doc:`llvm-exegesis <CommandGuide/llvm-exegesis>` has been "
"added. :program:`llvm-exegesis` automatically measures instruction "
"scheduling properties (latency/uops) and provides a principled way to edit "
"scheduling models."
msgstr ""

#: ../../../ReleaseNotes.rst:43
msgid ""
"A new tool named :doc:`llvm-mca <CommandGuide/llvm-mca>` has been added. :"
"program:`llvm-mca` is a  static performance analysis tool that uses "
"information available in LLVM to statically predict the performance of "
"machine code for a specific CPU."
msgstr ""

#: ../../../ReleaseNotes.rst:48
msgid ""
"Optimization of floating-point casts is improved. This may cause surprising "
"results for code that is relying on the undefined behavior of overflowing "
"casts. The optimization can be disabled by specifying a function attribute: "
"``\"strict-float-cast-overflow\"=\"false\"``. This attribute may be created "
"by the clang option ``-fno-strict-float-cast-overflow``. Code sanitizers can "
"be used to detect affected patterns. The clang option for detecting this "
"problem alone is ``-fsanitize=float-cast-overflow``:"
msgstr ""

#: ../../../ReleaseNotes.rst:71
msgid ""
"``LLVM_ON_WIN32`` is no longer set by ``llvm/Config/config.h`` and ``llvm/"
"Config/llvm-config.h``.  If you used this macro, use the compiler-set "
"``_WIN32`` instead which is set exactly when ``LLVM_ON_WIN32`` used to be "
"set."
msgstr ""

#: ../../../ReleaseNotes.rst:75
msgid ""
"The ``DEBUG`` macro has been renamed to ``LLVM_DEBUG``, the interface "
"remains the same.  If you used this macro you need to migrate to the new "
"one. You should also clang-format your code to make it easier to integrate "
"future changes locally.  This can be done with the following bash commands:"
msgstr ""

#: ../../../ReleaseNotes.rst:85
msgid ""
"Early support for UBsan, X-Ray instrumentation and libFuzzer (x86 and "
"x86_64) for OpenBSD. Support for MSan (x86_64), X-Ray instrumentation and "
"libFuzzer (x86 and x86_64) for FreeBSD."
msgstr ""

#: ../../../ReleaseNotes.rst:89
msgid ""
"``SmallVector<T, 0>`` shrank from ``sizeof(void*) * 4 + sizeof(T)`` to "
"``sizeof(void*) + sizeof(unsigned) * 2``, smaller than ``std::vector<T>`` on "
"64-bit platforms.  The maximum capacity is now restricted to ``UINT32_MAX``. "
"Since SmallVector doesn't have the exception-safety pessimizations some "
"implementations saddle ``std::vector`` with and is better at using "
"``realloc``, it's now a better choice even on the heap (although when "
"``TinyPtrVector`` works, that's even smaller)."
msgstr ""

#: ../../../ReleaseNotes.rst:97
msgid ""
"Preliminary/experimental support for DWARF v5 debugging information, "
"including the new ``.debug_names`` accelerator table. DWARF emitted at ``-"
"O0`` should be fully DWARF v5 compliant. Type units and split DWARF are "
"known not to be compliant, and higher optimization levels will still emit "
"some information in v4 format."
msgstr ""

#: ../../../ReleaseNotes.rst:103
msgid "Added support for the ``.rva`` assembler directive for COFF targets."
msgstr ""

#: ../../../ReleaseNotes.rst:105
msgid ""
"The :program:`llvm-rc` tool (Windows Resource Compiler) has been improved a "
"bit. There are still known missing features, but it is generally usable in "
"many cases. (The tool still doesn't preprocess input files automatically, "
"but it can now handle leftover C declarations in preprocessor output, if "
"given output from a preprocessor run externally.)"
msgstr ""

#: ../../../ReleaseNotes.rst:111
msgid ""
"CodeView debug info can now be emitted for MinGW configurations, if "
"requested."
msgstr ""

#: ../../../ReleaseNotes.rst:113
msgid ""
"The :program:`opt` tool now supports the ``-load-pass-plugin`` option for "
"loading pass plugins for the new PassManager."
msgstr ""

#: ../../../ReleaseNotes.rst:116
msgid "Support for profiling JITed code with perf."
msgstr ""

#: ../../../ReleaseNotes.rst:120
msgid "Changes to the LLVM IR"
msgstr ""

#: ../../../ReleaseNotes.rst:122
msgid ""
"The signatures for the builtins ``@llvm.memcpy``, ``@llvm.memmove``, and "
"``@llvm.memset`` have changed. Alignment is no longer an argument, and are "
"instead conveyed as parameter attributes."
msgstr ""

#: ../../../ReleaseNotes.rst:126
msgid ""
"``invariant.group.barrier`` has been renamed to ``launder.invariant.group``."
msgstr ""

#: ../../../ReleaseNotes.rst:128
msgid ""
"``invariant.group`` metadata can now refer only to empty metadata nodes."
msgstr ""

#: ../../../ReleaseNotes.rst:131
msgid "Changes to the AArch64 Target"
msgstr ""

#: ../../../ReleaseNotes.rst:133
msgid ""
"The ``.inst`` assembler directive is now usable on both COFF and Mach-O "
"targets, in addition to ELF."
msgstr ""

#: ../../../ReleaseNotes.rst:136
msgid "Support for most remaining COFF relocations has been added."
msgstr ""

#: ../../../ReleaseNotes.rst:138
msgid "Support for TLS on Windows has been added."
msgstr ""

#: ../../../ReleaseNotes.rst:140
msgid ""
"Assembler and disassembler support for the ARM Scalable Vector Extension has "
"been added."
msgstr ""

#: ../../../ReleaseNotes.rst:144
msgid "Changes to the ARM Target"
msgstr ""

#: ../../../ReleaseNotes.rst:146
msgid ""
"The ``.inst`` assembler directive is now usable on both COFF and Mach-O "
"targets, in addition to ELF. For Thumb, it can now also automatically deduce "
"the instruction size, without having to specify it with e.g. ``.inst.w`` as "
"before."
msgstr ""

#: ../../../ReleaseNotes.rst:152
msgid "Changes to the Hexagon Target"
msgstr ""

#: ../../../ReleaseNotes.rst:154
msgid ""
"Hexagon now supports auto-vectorization for HVX. It is disabled by default "
"and can be turned on with ``-fvectorize``. For auto-vectorization to take "
"effect, code generation for HVX needs to be enabled with ``-mhvx``. The "
"complete set of options should include ``-fvectorize``, ``-mhvx``, and ``-"
"mhvx-length={64b|128b}``."
msgstr ""

#: ../../../ReleaseNotes.rst:160
msgid ""
"The support for Hexagon ISA V4 is deprecated and will be removed in the next "
"release."
msgstr ""

#: ../../../ReleaseNotes.rst:164
msgid "Changes to the MIPS Target"
msgstr ""

#: ../../../ReleaseNotes.rst:166
msgid "During this release the MIPS target has:"
msgstr ""

#: ../../../ReleaseNotes.rst:168
msgid ""
"Added support for Virtualization, Global INValidate ASE, and CRC ASE "
"instructions."
msgstr ""

#: ../../../ReleaseNotes.rst:171
msgid ""
"Introduced definitions of ``[d]rem``, ``[d]remu``, and microMIPSR6 ``ll/sc`` "
"instructions."
msgstr ""

#: ../../../ReleaseNotes.rst:174
msgid ""
"Shrink-wrapping is now supported and enabled by default (except for ``-O0``)."
msgstr ""

#: ../../../ReleaseNotes.rst:176
msgid "Extended size reduction pass by the LWP and SWP instructions."
msgstr ""

#: ../../../ReleaseNotes.rst:178
msgid "Gained initial support of GlobalISel instruction selection framework."
msgstr ""

#: ../../../ReleaseNotes.rst:180
msgid "Updated the P5600 scheduler model not to use instruction itineraries."
msgstr ""

#: ../../../ReleaseNotes.rst:182
msgid ""
"Added disassembly support for comparison and fused (negative) multiply ``add/"
"sub`` instructions."
msgstr ""

#: ../../../ReleaseNotes.rst:185
msgid "Improved the selection of multiple instructions."
msgstr ""

#: ../../../ReleaseNotes.rst:187
msgid ""
"Load/store ``lb``, ``sb``, ``ld``, ``sd``, ``lld``, ... instructions now "
"support 32/64-bit offsets."
msgstr ""

#: ../../../ReleaseNotes.rst:190
msgid ""
"Added support for ``y``, ``M``, and ``L`` inline assembler operand codes."
msgstr ""

#: ../../../ReleaseNotes.rst:192
msgid "Extended list of relocations supported by the ``.reloc`` directive"
msgstr ""

#: ../../../ReleaseNotes.rst:194
msgid ""
"Fixed using a wrong register class for creating an emergency spill slot for "
"mips3 / n64 ABI."
msgstr ""

#: ../../../ReleaseNotes.rst:197
msgid "MIPS relocation types were generated for microMIPS code."
msgstr ""

#: ../../../ReleaseNotes.rst:199
msgid ""
"Corrected definitions of multiple instructions (``lwp``, ``swp``, ``ctc2``, "
"``cfc2``, ``sync``, ``synci``, ``cvt.d.w``, ...)."
msgstr ""

#: ../../../ReleaseNotes.rst:202
msgid "Fixed atomic operations at ``-O0`` level."
msgstr ""

#: ../../../ReleaseNotes.rst:204
msgid "Fixed local dynamic TLS with Sym64"
msgstr ""

#: ../../../ReleaseNotes.rst:207
msgid "Changes to the PowerPC Target"
msgstr ""

#: ../../../ReleaseNotes.rst:209
msgid "During this release the PowerPC target has:"
msgstr ""

#: ../../../ReleaseNotes.rst:211
msgid ""
"Replaced the list scheduler for post register allocation with the machine "
"scheduler."
msgstr ""

#: ../../../ReleaseNotes.rst:213
msgid "Added support for ``coldcc`` calling convention."
msgstr ""

#: ../../../ReleaseNotes.rst:215
msgid ""
"Added support for ``symbol@high`` and ``symbol@higha`` symbol modifiers."
msgstr ""

#: ../../../ReleaseNotes.rst:217
msgid ""
"Added support for quad-precision floating point type (``__float128``) under "
"the llvm option ``-enable-ppc-quad-precision``."
msgstr ""

#: ../../../ReleaseNotes.rst:219
msgid "Added dump function to ``LatencyPriorityQueue``."
msgstr ""

#: ../../../ReleaseNotes.rst:221
msgid "Completed the Power9 scheduler model."
msgstr ""

#: ../../../ReleaseNotes.rst:223
msgid "Optimized TLS code generation."
msgstr ""

#: ../../../ReleaseNotes.rst:225
msgid "Improved MachineLICM for hoisting constant stores."
msgstr ""

#: ../../../ReleaseNotes.rst:227
msgid ""
"Improved code generation to reduce register use by using more register + "
"immediate instructions."
msgstr ""

#: ../../../ReleaseNotes.rst:229
msgid ""
"Improved code generation to better exploit rotate-and-mask instructions."
msgstr ""

#: ../../../ReleaseNotes.rst:231
msgid "Fixed the bug in dynamic loader for JIT which crashed NNVM."
msgstr ""

#: ../../../ReleaseNotes.rst:233
msgid "Numerous bug fixes and code cleanups."
msgstr ""

#: ../../../ReleaseNotes.rst:236
msgid "Changes to the SystemZ Target"
msgstr ""

#: ../../../ReleaseNotes.rst:238
msgid "During this release the SystemZ target has:"
msgstr ""

#: ../../../ReleaseNotes.rst:240
msgid "Added support for vector registers in inline asm statements."
msgstr ""

#: ../../../ReleaseNotes.rst:242
msgid ""
"Added support for stackmaps, patchpoints, and the anyregcc calling "
"convention."
msgstr ""

#: ../../../ReleaseNotes.rst:245
msgid "Changed the default function alignment to 16 bytes."
msgstr ""

#: ../../../ReleaseNotes.rst:247
msgid "Improved codegen for condition code handling."
msgstr ""

#: ../../../ReleaseNotes.rst:249
msgid ""
"Improved instruction scheduling and microarchitecture tuning for z13/z14."
msgstr ""

#: ../../../ReleaseNotes.rst:251
msgid "Fixed support for generating GCOV coverage data."
msgstr ""

#: ../../../ReleaseNotes.rst:253
msgid "Fixed some codegen bugs."
msgstr ""

#: ../../../ReleaseNotes.rst:256
msgid "Changes to the X86 Target"
msgstr ""

#: ../../../ReleaseNotes.rst:258
msgid ""
"The calling convention for the ``f80`` data type on MinGW targets has been "
"fixed. Normally, the calling convention for this type is handled within "
"clang, but if an intrinsic is used, which LLVM expands into a libcall, the "
"proper calling convention needs to be supported in LLVM as well. (Note, on "
"Windows, this data type is only used for long doubles in MinGW environments "
"- in MSVC environments, long doubles are the same size as normal doubles.)"
msgstr ""

#: ../../../ReleaseNotes.rst:267
msgid "Changes to the OCaml bindings"
msgstr ""

#: ../../../ReleaseNotes.rst:269
msgid "Removed ``add_bb_vectorize``."
msgstr ""

#: ../../../ReleaseNotes.rst:273
msgid "Changes to the C API"
msgstr ""

#: ../../../ReleaseNotes.rst:275
msgid ""
"Removed ``LLVMAddBBVectorizePass``. The implementation was removed and the C "
"interface was made a deprecated no-op in LLVM 5. Use "
"``LLVMAddSLPVectorizePass`` instead to get the supported SLP vectorizer."
msgstr ""

#: ../../../ReleaseNotes.rst:279
msgid ""
"Expanded the OrcJIT APIs so they can register event listeners like debuggers "
"and profilers."
msgstr ""

#: ../../../ReleaseNotes.rst:283
msgid "Changes to the DAG infrastructure"
msgstr ""

#: ../../../ReleaseNotes.rst:284
msgid ""
"``ADDC``/``ADDE``/``SUBC``/``SUBE`` are now deprecated and will default to "
"expand. Backends that wish to continue to use these opcodes should "
"explicitely request to do so using ``setOperationAction`` in their "
"``TargetLowering``. New backends should use ``UADDO``/``ADDCARRY``/``USUBO``/"
"``SUBCARRY`` instead of the deprecated opcodes."
msgstr ""

#: ../../../ReleaseNotes.rst:289
msgid "The ``SETCCE`` opcode has now been removed in favor of ``SETCCCARRY``."
msgstr ""

#: ../../../ReleaseNotes.rst:291
msgid ""
"TableGen now supports multi-alternative pattern fragments via the "
"``PatFrags`` class.  ``PatFrag`` is now derived from ``PatFrags``, which may "
"require minor changes to backends that directly access ``PatFrag`` members."
msgstr ""

#: ../../../ReleaseNotes.rst:297
msgid "External Open Source Projects Using LLVM 7"
msgstr ""

#: ../../../ReleaseNotes.rst:300
msgid "Zig Programming Language"
msgstr ""

#: ../../../ReleaseNotes.rst:302
msgid ""
"`Zig <https://ziglang.org>`_  is an open-source programming language "
"designed for robustness, optimality, and clarity. Zig is an alternative to "
"C, providing high level features such as generics, compile time function "
"execution, partial evaluation, and LLVM-based coroutines, while exposing low "
"level LLVM IR features such as aliases and intrinsics. Zig uses Clang to "
"provide automatic import of .h symbols - even inline functions and macros. "
"Zig uses LLD combined with lazily building compiler-rt to provide out-of-the-"
"box cross-compiling for all supported targets."
msgstr ""

#: ../../../ReleaseNotes.rst:313
msgid "Additional Information"
msgstr ""

#: ../../../ReleaseNotes.rst:315
msgid ""
"A wide variety of additional information is available on the `LLVM web page "
"<https://llvm.org/>`_, in particular in the `documentation <https://llvm.org/"
"docs/>`_ section.  The web page also contains versions of the API "
"documentation which is up-to-date with the Subversion version of the source "
"code.  You can access versions of these documents specific to this release "
"by going into the ``llvm/docs/`` directory in the LLVM tree."
msgstr ""

#: ../../../ReleaseNotes.rst:322
msgid ""
"If you have any questions or comments about LLVM, please feel free to "
"contact us via the `mailing lists <https://llvm.org/docs/#mailing-lists>`_."
msgstr ""
