# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:12+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../TableGen/BackEnds.rst:3
msgid "TableGen BackEnds"
msgstr ""

#: ../../../TableGen/BackEnds.rst:9
msgid "Introduction"
msgstr "簡介"

#: ../../../TableGen/BackEnds.rst:11
msgid ""
"TableGen backends are at the core of TableGen's functionality. The source "
"files provide the classes and records that are parsed and end up as a "
"collection of record instances, but it's up to the backend to interpret and "
"print the records in a way that is meaningful to the user (normally a C++ "
"include file or a textual list of warnings, options, and error messages)."
msgstr ""

#: ../../../TableGen/BackEnds.rst:17
msgid ""
"TableGen is used by both LLVM, Clang, and MLIR with very different goals. "
"LLVM uses it as a way to automate the generation of massive amounts of "
"information regarding instructions, schedules, cores, and architecture "
"features. Some backends generate output that is consumed by more than one "
"source file, so they need to be created in a way that makes it is easy for "
"preprocessor tricks to be used. Some backends can also print C++ code "
"structures, so that they can be directly included as-is."
msgstr ""

#: ../../../TableGen/BackEnds.rst:25
msgid ""
"Clang, on the other hand, uses it mainly for diagnostic messages (errors, "
"warnings, tips) and attributes, so more on the textual end of the scale."
msgstr ""

#: ../../../TableGen/BackEnds.rst:28
msgid ""
"MLIR uses TableGen to define operations, operation dialects, and operation "
"traits."
msgstr ""

#: ../../../TableGen/BackEnds.rst:31
msgid ""
"See the :doc:`TableGen Programmer's Reference <./ProgRef>` for an in-depth "
"description of TableGen, and the :doc:`TableGen Backend Developer's Guide <./"
"BackGuide>` for a guide to writing a new backend."
msgstr ""

#: ../../../TableGen/BackEnds.rst:36
msgid "LLVM BackEnds"
msgstr ""

#: ../../../TableGen/BackEnds.rst:39
msgid ""
"This portion is incomplete. Each section below needs three subsections: "
"description of its purpose with a list of users, output generated from "
"generic input, and finally why it needed a new backend (in case there's "
"something similar)."
msgstr ""

#: ../../../TableGen/BackEnds.rst:44
msgid ""
"Overall, each backend will take the same TableGen file type and transform "
"into similar output for different targets/uses. There is an implicit "
"contract between the TableGen files, the back-ends and their users."
msgstr ""

#: ../../../TableGen/BackEnds.rst:48
msgid ""
"For instance, a global contract is that each back-end produces macro-guarded "
"sections. Based on whether the file is included by a header or a source "
"file, or even in which context of each file the include is being used, you "
"have todefine a macro just before including it, to get the right output:"
msgstr ""

#: ../../../TableGen/BackEnds.rst:58
msgid ""
"And just part of the generated file would be included. This is useful if you "
"need the same information in multiple formats (instantiation, "
"initialization, getter/setter functions, etc) from the same source TableGen "
"file without having to re-compile the TableGen file multiple times."
msgstr ""

#: ../../../TableGen/BackEnds.rst:63
msgid ""
"Sometimes, multiple macros might be defined before the same include file to "
"output multiple blocks:"
msgstr ""

#: ../../../TableGen/BackEnds.rst:73
msgid ""
"The macros will be undef'd automatically as they're used, in the include "
"file."
msgstr ""

#: ../../../TableGen/BackEnds.rst:75
msgid ""
"On all LLVM back-ends, the ``llvm-tblgen`` binary will be executed on the "
"root TableGen file ``<Target>.td``, which should include all others. This "
"guarantees that all information needed is accessible, and that no "
"duplication is needed in the TableGen files."
msgstr ""

#: ../../../TableGen/BackEnds.rst:81
msgid "CodeEmitter"
msgstr ""

#: ../../../TableGen/BackEnds.rst:83
msgid ""
"**Purpose**: CodeEmitterGen uses the descriptions of instructions and their "
"fields to construct an automated code emitter: a function that, given a "
"MachineInstr, returns the (currently, 32-bit unsigned) value of the "
"instruction."
msgstr ""

#: ../../../TableGen/BackEnds.rst:87
msgid ""
"**Output**: C++ code, implementing the target's CodeEmitter class by "
"overriding the virtual functions as ``<Target>CodeEmitter::function()``."
msgstr ""

#: ../../../TableGen/BackEnds.rst:90
msgid ""
"**Usage**: Used to include directly at the end of ``<Target>MCCodeEmitter."
"cpp``."
msgstr ""

#: ../../../TableGen/BackEnds.rst:93
msgid "RegisterInfo"
msgstr ""

#: ../../../TableGen/BackEnds.rst:95
msgid ""
"**Purpose**: This tablegen backend is responsible for emitting a description "
"of a target register file for a code generator.  It uses instances of the "
"Register, RegisterAliases, and RegisterClass classes to gather this "
"information."
msgstr ""

#: ../../../TableGen/BackEnds.rst:99
msgid ""
"**Output**: C++ code with enums and structures representing the register "
"mappings, properties, masks, etc."
msgstr ""

#: ../../../TableGen/BackEnds.rst:102
msgid ""
"**Usage**: Both on ``<Target>BaseRegisterInfo`` and ``<Target>MCTargetDesc`` "
"(headers and source files) with macros defining in which they are for "
"declaration vs. initialization issues."
msgstr ""

#: ../../../TableGen/BackEnds.rst:107
msgid "InstrInfo"
msgstr ""

#: ../../../TableGen/BackEnds.rst:109
msgid ""
"**Purpose**: This tablegen backend is responsible for emitting a description "
"of the target instruction set for the code generator. (what are the "
"differences from CodeEmitter?)"
msgstr ""

#: ../../../TableGen/BackEnds.rst:112
msgid ""
"**Output**: C++ code with enums and structures representing the instruction "
"mappings, properties, masks, etc."
msgstr ""

#: ../../../TableGen/BackEnds.rst:115
msgid ""
"**Usage**: Both on ``<Target>BaseInstrInfo`` and ``<Target>MCTargetDesc`` "
"(headers and source files) with macros defining in which they are for "
"declaration vs. initialization issues."
msgstr ""

#: ../../../TableGen/BackEnds.rst:120
msgid "AsmWriter"
msgstr ""

#: ../../../TableGen/BackEnds.rst:122
msgid "**Purpose**: Emits an assembly printer for the current target."
msgstr ""

#: ../../../TableGen/BackEnds.rst:124
msgid ""
"**Output**: Implementation of ``<Target>InstPrinter::printInstruction()``, "
"among other things."
msgstr ""

#: ../../../TableGen/BackEnds.rst:127
msgid ""
"**Usage**: Included directly into ``InstPrinter/<Target>InstPrinter.cpp``."
msgstr ""

#: ../../../TableGen/BackEnds.rst:130
msgid "AsmMatcher"
msgstr ""

#: ../../../TableGen/BackEnds.rst:132
msgid ""
"**Purpose**: Emits a target specifier matcher for converting parsed assembly "
"operands in the MCInst structures. It also emits a matcher for custom "
"operand parsing. Extensive documentation is written on the "
"``AsmMatcherEmitter.cpp`` file."
msgstr ""

#: ../../../TableGen/BackEnds.rst:137
msgid "**Output**: Assembler parsers' matcher functions, declarations, etc."
msgstr ""

#: ../../../TableGen/BackEnds.rst:139
msgid ""
"**Usage**: Used in back-ends' ``AsmParser/<Target>AsmParser.cpp`` for "
"building the AsmParser class."
msgstr ""

#: ../../../TableGen/BackEnds.rst:143
msgid "Disassembler"
msgstr ""

#: ../../../TableGen/BackEnds.rst:145
msgid ""
"**Purpose**: Contains disassembler table emitters for various architectures. "
"Extensive documentation is written on the ``DisassemblerEmitter.cpp`` file."
msgstr ""

#: ../../../TableGen/BackEnds.rst:149
msgid "**Output**: Decoding tables, static decoding functions, etc."
msgstr ""

#: ../../../TableGen/BackEnds.rst:151
msgid ""
"**Usage**: Directly included in ``Disassembler/<Target>Disassembler.cpp`` to "
"cater for all default decodings, after all hand-made ones."
msgstr ""

#: ../../../TableGen/BackEnds.rst:155
msgid "PseudoLowering"
msgstr ""

#: ../../../TableGen/BackEnds.rst:157
msgid "**Purpose**: Generate pseudo instruction lowering."
msgstr ""

#: ../../../TableGen/BackEnds.rst:159
msgid ""
"**Output**: Implements ``<Target>AsmPrinter::emitPseudoExpansionLowering()``."
msgstr ""

#: ../../../TableGen/BackEnds.rst:161
msgid "**Usage**: Included directly into ``<Target>AsmPrinter.cpp``."
msgstr ""

#: ../../../TableGen/BackEnds.rst:164
msgid "CallingConv"
msgstr ""

#: ../../../TableGen/BackEnds.rst:166
msgid ""
"**Purpose**: Responsible for emitting descriptions of the calling "
"conventions supported by this target."
msgstr ""

#: ../../../TableGen/BackEnds.rst:169
msgid ""
"**Output**: Implement static functions to deal with calling conventions "
"chained by matching styles, returning false on no match."
msgstr ""

#: ../../../TableGen/BackEnds.rst:172
msgid ""
"**Usage**: Used in ISelLowering and FastIsel as function pointers to "
"implementation returned by a CC selection function."
msgstr ""

#: ../../../TableGen/BackEnds.rst:176
msgid "DAGISel"
msgstr ""

#: ../../../TableGen/BackEnds.rst:178
msgid "**Purpose**: Generate a DAG instruction selector."
msgstr ""

#: ../../../TableGen/BackEnds.rst:180
msgid "**Output**: Creates huge functions for automating DAG selection."
msgstr ""

#: ../../../TableGen/BackEnds.rst:182
msgid ""
"**Usage**: Included in ``<Target>ISelDAGToDAG.cpp`` inside the target's "
"implementation of ``SelectionDAGISel``."
msgstr ""

#: ../../../TableGen/BackEnds.rst:186
msgid "DFAPacketizer"
msgstr ""

#: ../../../TableGen/BackEnds.rst:188
msgid ""
"**Purpose**: This class parses the Schedule.td file and produces an API that "
"can be used to reason about whether an instruction can be added to a packet "
"on a VLIW architecture. The class internally generates a deterministic "
"finite automaton (DFA) that models all possible mappings of machine "
"instructions to functional units as instructions are added to a packet."
msgstr ""

#: ../../../TableGen/BackEnds.rst:194
msgid "**Output**: Scheduling tables for GPU back-ends (Hexagon, AMD)."
msgstr ""

#: ../../../TableGen/BackEnds.rst:196
msgid "**Usage**: Included directly on ``<Target>InstrInfo.cpp``."
msgstr ""

#: ../../../TableGen/BackEnds.rst:199
msgid "FastISel"
msgstr ""

#: ../../../TableGen/BackEnds.rst:201
msgid ""
"**Purpose**: This tablegen backend emits code for use by the \"fast\" "
"instruction selection algorithm. See the comments at the top of lib/CodeGen/"
"SelectionDAG/FastISel.cpp for background. This file scans through the "
"target's tablegen instruction-info files and extracts instructions with "
"obvious-looking patterns, and it emits code to look up these instructions by "
"type and operator."
msgstr ""

#: ../../../TableGen/BackEnds.rst:208
msgid "**Output**: Generates ``Predicate`` and ``FastEmit`` methods."
msgstr ""

#: ../../../TableGen/BackEnds.rst:210
msgid ""
"**Usage**: Implements private methods of the targets' implementation of "
"``FastISel`` class."
msgstr ""

#: ../../../TableGen/BackEnds.rst:214
msgid "Subtarget"
msgstr ""

#: ../../../TableGen/BackEnds.rst:216
msgid "**Purpose**: Generate subtarget enumerations."
msgstr ""

#: ../../../TableGen/BackEnds.rst:218
msgid "**Output**: Enums, globals, local tables for sub-target information."
msgstr ""

#: ../../../TableGen/BackEnds.rst:220
msgid ""
"**Usage**: Populates ``<Target>Subtarget`` and ``MCTargetDesc/"
"<Target>MCTargetDesc`` files (both headers and source)."
msgstr ""

#: ../../../TableGen/BackEnds.rst:224
msgid "Intrinsic"
msgstr ""

#: ../../../TableGen/BackEnds.rst:226
msgid "**Purpose**: Generate (target) intrinsic information."
msgstr ""

#: ../../../TableGen/BackEnds.rst:229
msgid "OptParserDefs"
msgstr ""

#: ../../../TableGen/BackEnds.rst:231
msgid "**Purpose**: Print enum values for a class."
msgstr ""

#: ../../../TableGen/BackEnds.rst:234
msgid "SearchableTables"
msgstr ""

#: ../../../TableGen/BackEnds.rst:236
msgid "**Purpose**: Generate custom searchable tables."
msgstr ""

#: ../../../TableGen/BackEnds.rst:238
msgid "**Output**: Enums, global tables, and lookup helper functions."
msgstr ""

#: ../../../TableGen/BackEnds.rst:240
msgid ""
"**Usage**: This backend allows generating free-form, target-specific tables "
"from TableGen records. The ARM and AArch64 targets use this backend to "
"generate tables of system registers; the AMDGPU target uses it to generate "
"meta-data about complex image and memory buffer instructions."
msgstr ""

#: ../../../TableGen/BackEnds.rst:245
msgid "See `SearchableTables Reference`_ for a detailed description."
msgstr ""

#: ../../../TableGen/BackEnds.rst:248
msgid "CTags"
msgstr ""

#: ../../../TableGen/BackEnds.rst:250
msgid ""
"**Purpose**: This tablegen backend emits an index of definitions in ctags(1) "
"format. A helper script, utils/TableGen/tdtags, provides an easier-to-use "
"interface; run 'tdtags -H' for documentation."
msgstr ""

#: ../../../TableGen/BackEnds.rst:255
msgid "X86EVEX2VEX"
msgstr ""

#: ../../../TableGen/BackEnds.rst:257
msgid ""
"**Purpose**: This X86 specific tablegen backend emits tables that map EVEX "
"encoded instructions to their VEX encoded identical instruction."
msgstr ""

#: ../../../TableGen/BackEnds.rst:261
msgid "Clang BackEnds"
msgstr ""

#: ../../../TableGen/BackEnds.rst:264
msgid "ClangAttrClasses"
msgstr ""

#: ../../../TableGen/BackEnds.rst:266
msgid ""
"**Purpose**: Creates Attrs.inc, which contains semantic attribute class "
"declarations for any attribute in ``Attr.td`` that has not set ``ASTNode = "
"0``. This file is included as part of ``Attr.h``."
msgstr ""

#: ../../../TableGen/BackEnds.rst:271
msgid "ClangAttrParserStringSwitches"
msgstr ""

#: ../../../TableGen/BackEnds.rst:273
msgid ""
"**Purpose**: Creates AttrParserStringSwitches.inc, which contains "
"StringSwitch::Case statements for parser-related string switches. Each "
"switch is given its own macro (such as ``CLANG_ATTR_ARG_CONTEXT_LIST``, or "
"``CLANG_ATTR_IDENTIFIER_ARG_LIST``), which is expected to be defined before "
"including AttrParserStringSwitches.inc, and undefined after."
msgstr ""

#: ../../../TableGen/BackEnds.rst:280
msgid "ClangAttrImpl"
msgstr ""

#: ../../../TableGen/BackEnds.rst:282
msgid ""
"**Purpose**: Creates AttrImpl.inc, which contains semantic attribute class "
"definitions for any attribute in ``Attr.td`` that has not set ``ASTNode = "
"0``. This file is included as part of ``AttrImpl.cpp``."
msgstr ""

#: ../../../TableGen/BackEnds.rst:287
msgid "ClangAttrList"
msgstr ""

#: ../../../TableGen/BackEnds.rst:289
msgid ""
"**Purpose**: Creates AttrList.inc, which is used when a list of semantic "
"attribute identifiers is required. For instance, ``AttrKinds.h`` includes "
"this file to generate the list of ``attr::Kind`` enumeration values. This "
"list is separated out into multiple categories: attributes, inheritable "
"attributes, and inheritable parameter attributes. This categorization "
"happens automatically based on information in ``Attr.td`` and is used to "
"implement the ``classof`` functionality required for ``dyn_cast`` and "
"similar APIs."
msgstr ""

#: ../../../TableGen/BackEnds.rst:298
msgid "ClangAttrPCHRead"
msgstr ""

#: ../../../TableGen/BackEnds.rst:300
msgid ""
"**Purpose**: Creates AttrPCHRead.inc, which is used to deserialize "
"attributes in the ``ASTReader::ReadAttributes`` function."
msgstr ""

#: ../../../TableGen/BackEnds.rst:304
msgid "ClangAttrPCHWrite"
msgstr ""

#: ../../../TableGen/BackEnds.rst:306
msgid ""
"**Purpose**: Creates AttrPCHWrite.inc, which is used to serialize attributes "
"in the ``ASTWriter::WriteAttributes`` function."
msgstr ""

#: ../../../TableGen/BackEnds.rst:310
msgid "ClangAttrSpellings"
msgstr ""

#: ../../../TableGen/BackEnds.rst:312
msgid ""
"**Purpose**: Creates AttrSpellings.inc, which is used to implement the "
"``__has_attribute`` feature test macro."
msgstr ""

#: ../../../TableGen/BackEnds.rst:316
msgid "ClangAttrSpellingListIndex"
msgstr ""

#: ../../../TableGen/BackEnds.rst:318
msgid ""
"**Purpose**: Creates AttrSpellingListIndex.inc, which is used to map parsed "
"attribute spellings (including which syntax or scope was used) to an "
"attribute spelling list index. These spelling list index values are internal "
"implementation details exposed via ``AttributeList::"
"getAttributeSpellingListIndex``."
msgstr ""

#: ../../../TableGen/BackEnds.rst:325
msgid "ClangAttrVisitor"
msgstr ""

#: ../../../TableGen/BackEnds.rst:327
msgid ""
"**Purpose**: Creates AttrVisitor.inc, which is used when implementing "
"recursive AST visitors."
msgstr ""

#: ../../../TableGen/BackEnds.rst:331
msgid "ClangAttrTemplateInstantiate"
msgstr ""

#: ../../../TableGen/BackEnds.rst:333
msgid ""
"**Purpose**: Creates AttrTemplateInstantiate.inc, which implements the "
"``instantiateTemplateAttribute`` function, used when instantiating a "
"template that requires an attribute to be cloned."
msgstr ""

#: ../../../TableGen/BackEnds.rst:338
msgid "ClangAttrParsedAttrList"
msgstr ""

#: ../../../TableGen/BackEnds.rst:340
msgid ""
"**Purpose**: Creates AttrParsedAttrList.inc, which is used to generate the "
"``AttributeList::Kind`` parsed attribute enumeration."
msgstr ""

#: ../../../TableGen/BackEnds.rst:344
msgid "ClangAttrParsedAttrImpl"
msgstr ""

#: ../../../TableGen/BackEnds.rst:346
msgid ""
"**Purpose**: Creates AttrParsedAttrImpl.inc, which is used by "
"``AttributeList.cpp`` to implement several functions on the "
"``AttributeList`` class. This functionality is implemented via the "
"``AttrInfoMap ParsedAttrInfo`` array, which contains one element per parsed "
"attribute object."
msgstr ""

#: ../../../TableGen/BackEnds.rst:352
msgid "ClangAttrParsedAttrKinds"
msgstr ""

#: ../../../TableGen/BackEnds.rst:354
msgid ""
"**Purpose**: Creates AttrParsedAttrKinds.inc, which is used to implement the "
"``AttributeList::getKind`` function, mapping a string (and syntax) to a "
"parsed attribute ``AttributeList::Kind`` enumeration."
msgstr ""

#: ../../../TableGen/BackEnds.rst:359
msgid "ClangAttrDump"
msgstr ""

#: ../../../TableGen/BackEnds.rst:361
msgid ""
"**Purpose**: Creates AttrDump.inc, which dumps information about an "
"attribute. It is used to implement ``ASTDumper::dumpAttr``."
msgstr ""

#: ../../../TableGen/BackEnds.rst:365
msgid "ClangDiagsDefs"
msgstr ""

#: ../../../TableGen/BackEnds.rst:367
msgid "Generate Clang diagnostics definitions."
msgstr ""

#: ../../../TableGen/BackEnds.rst:370
msgid "ClangDiagGroups"
msgstr ""

#: ../../../TableGen/BackEnds.rst:372
msgid "Generate Clang diagnostic groups."
msgstr ""

#: ../../../TableGen/BackEnds.rst:375
msgid "ClangDiagsIndexName"
msgstr ""

#: ../../../TableGen/BackEnds.rst:377
msgid "Generate Clang diagnostic name index."
msgstr ""

#: ../../../TableGen/BackEnds.rst:380
msgid "ClangCommentNodes"
msgstr ""

#: ../../../TableGen/BackEnds.rst:382
msgid "Generate Clang AST comment nodes."
msgstr ""

#: ../../../TableGen/BackEnds.rst:385
msgid "ClangDeclNodes"
msgstr ""

#: ../../../TableGen/BackEnds.rst:387
msgid "Generate Clang AST declaration nodes."
msgstr ""

#: ../../../TableGen/BackEnds.rst:390
msgid "ClangStmtNodes"
msgstr ""

#: ../../../TableGen/BackEnds.rst:392
msgid "Generate Clang AST statement nodes."
msgstr ""

#: ../../../TableGen/BackEnds.rst:395
msgid "ClangSACheckers"
msgstr ""

#: ../../../TableGen/BackEnds.rst:397
msgid "Generate Clang Static Analyzer checkers."
msgstr ""

#: ../../../TableGen/BackEnds.rst:400
msgid "ClangCommentHTMLTags"
msgstr ""

#: ../../../TableGen/BackEnds.rst:402
msgid ""
"Generate efficient matchers for HTML tag names that are used in "
"documentation comments."
msgstr ""

#: ../../../TableGen/BackEnds.rst:405
msgid "ClangCommentHTMLTagsProperties"
msgstr ""

#: ../../../TableGen/BackEnds.rst:407
msgid "Generate efficient matchers for HTML tag properties."
msgstr ""

#: ../../../TableGen/BackEnds.rst:410
msgid "ClangCommentHTMLNamedCharacterReferences"
msgstr ""

#: ../../../TableGen/BackEnds.rst:412
msgid ""
"Generate function to translate named character references to UTF-8 sequences."
msgstr ""

#: ../../../TableGen/BackEnds.rst:415
msgid "ClangCommentCommandInfo"
msgstr ""

#: ../../../TableGen/BackEnds.rst:417
msgid ""
"Generate command properties for commands that are used in documentation "
"comments."
msgstr ""

#: ../../../TableGen/BackEnds.rst:420
msgid "ClangCommentCommandList"
msgstr ""

#: ../../../TableGen/BackEnds.rst:422
msgid "Generate list of commands that are used in documentation comments."
msgstr ""

#: ../../../TableGen/BackEnds.rst:425
msgid "ArmNeon"
msgstr ""

#: ../../../TableGen/BackEnds.rst:427
msgid "Generate arm_neon.h for clang."
msgstr ""

#: ../../../TableGen/BackEnds.rst:430
msgid "ArmNeonSema"
msgstr ""

#: ../../../TableGen/BackEnds.rst:432
msgid "Generate ARM NEON sema support for clang."
msgstr ""

#: ../../../TableGen/BackEnds.rst:435
msgid "ArmNeonTest"
msgstr ""

#: ../../../TableGen/BackEnds.rst:437
msgid "Generate ARM NEON tests for clang."
msgstr ""

#: ../../../TableGen/BackEnds.rst:440
msgid "AttrDocs"
msgstr ""

#: ../../../TableGen/BackEnds.rst:442
msgid ""
"**Purpose**: Creates ``AttributeReference.rst`` from ``AttrDocs.td``, and is "
"used for documenting user-facing attributes."
msgstr ""

#: ../../../TableGen/BackEnds.rst:446
msgid "General BackEnds"
msgstr ""

#: ../../../TableGen/BackEnds.rst:449
msgid "Print Records"
msgstr ""

#: ../../../TableGen/BackEnds.rst:451
msgid ""
"The TableGen command option ``--print-records`` invokes a simple backend "
"that prints all the classes and records defined in the source files. This is "
"the default backend option. See the :doc:`TableGen Backend Developer's Guide "
"<./BackGuide>` for more information."
msgstr ""

#: ../../../TableGen/BackEnds.rst:457
msgid "Print Detailed Records"
msgstr ""

#: ../../../TableGen/BackEnds.rst:459
msgid ""
"The TableGen command option ``--print-detailed-records`` invokes a backend "
"that prints all the global variables, classes, and records defined in the "
"source files, with more detail than the default record printer. See the :doc:"
"`TableGen Backend Developer's Guide <./BackGuide>` for more information."
msgstr ""

#: ../../../TableGen/BackEnds.rst:466
msgid "JSON Reference"
msgstr ""

#: ../../../TableGen/BackEnds.rst:468
msgid ""
"**Purpose**: Output all the values in every ``def``, as a JSON data "
"structure that can be easily parsed by a variety of languages. Useful for "
"writing custom backends without having to modify TableGen itself, or for "
"performing auxiliary analysis on the same TableGen data passed to a built-in "
"backend."
msgstr ""

#: ../../../TableGen/BackEnds.rst:474
msgid "**Output**:"
msgstr ""

#: ../../../TableGen/BackEnds.rst:476
msgid ""
"The root of the output file is a JSON object (i.e. dictionary), containing "
"the following fixed keys:"
msgstr ""

#: ../../../TableGen/BackEnds.rst:479
msgid ""
"``!tablegen_json_version``: a numeric version field that will increase if an "
"incompatible change is ever made to the structure of this data. The format "
"described here corresponds to version 1."
msgstr ""

#: ../../../TableGen/BackEnds.rst:483
msgid ""
"``!instanceof``: a dictionary whose keys are the class names defined in the "
"TableGen input. For each key, the corresponding value is an array of strings "
"giving the names of ``def`` records that derive from that class. So "
"``root[\"!instanceof\"][\"Instruction\"]``, for example, would list the "
"names of all the records deriving from the class ``Instruction``."
msgstr ""

#: ../../../TableGen/BackEnds.rst:490
msgid ""
"For each ``def`` record, the root object also has a key for the record name. "
"The corresponding value is a subsidiary object containing the following "
"fixed keys:"
msgstr ""

#: ../../../TableGen/BackEnds.rst:494
msgid ""
"``!superclasses``: an array of strings giving the names of all the classes "
"that this record derives from."
msgstr ""

#: ../../../TableGen/BackEnds.rst:497
msgid ""
"``!fields``: an array of strings giving the names of all the variables in "
"this record that were defined with the ``field`` keyword."
msgstr ""

#: ../../../TableGen/BackEnds.rst:500
msgid ""
"``!name``: a string giving the name of the record. This is always identical "
"to the key in the JSON root object corresponding to this record's "
"dictionary. (If the record is anonymous, the name is arbitrary.)"
msgstr ""

#: ../../../TableGen/BackEnds.rst:505
msgid ""
"``!anonymous``: a boolean indicating whether the record's name was specified "
"by the TableGen input (if it is ``false``), or invented by TableGen itself "
"(if ``true``)."
msgstr ""

#: ../../../TableGen/BackEnds.rst:509
msgid ""
"For each variable defined in a record, the ``def`` object for that record "
"also has a key for the variable name. The corresponding value is a "
"translation into JSON of the variable's value, using the conventions "
"described below."
msgstr ""

#: ../../../TableGen/BackEnds.rst:514
msgid ""
"Some TableGen data types are translated directly into the corresponding JSON "
"type:"
msgstr ""

#: ../../../TableGen/BackEnds.rst:517
msgid ""
"A completely undefined value (e.g. for a variable declared without "
"initializer in some superclass of this record, and never initialized by the "
"record itself or any other superclass) is emitted as the JSON ``null`` value."
msgstr ""

#: ../../../TableGen/BackEnds.rst:522
msgid ""
"``int`` and ``bit`` values are emitted as numbers. Note that TableGen "
"``int`` values are capable of holding integers too large to be exactly "
"representable in IEEE double precision. The integer literal in the JSON "
"output will show the full exact integer value. So if you need to retrieve "
"large integers with full precision, you should use a JSON reader capable of "
"translating such literals back into 64-bit integers without losing "
"precision, such as Python's standard ``json`` module."
msgstr ""

#: ../../../TableGen/BackEnds.rst:531
msgid "``string`` and ``code`` values are emitted as JSON strings."
msgstr ""

#: ../../../TableGen/BackEnds.rst:533
msgid ""
"``list<T>`` values, for any element type ``T``, are emitted as JSON arrays. "
"Each element of the array is represented in turn using these same "
"conventions."
msgstr ""

#: ../../../TableGen/BackEnds.rst:537
msgid ""
"``bits`` values are also emitted as arrays. A ``bits`` array is ordered from "
"least-significant bit to most-significant. So the element with index ``i`` "
"corresponds to the bit described as ``x{i}`` in TableGen source. However, "
"note that this means that scripting languages are likely to *display* the "
"array in the opposite order from the way it appears in the TableGen source "
"or in the diagnostic ``-print-records`` output."
msgstr ""

#: ../../../TableGen/BackEnds.rst:545
msgid ""
"All other TableGen value types are emitted as a JSON object, containing two "
"standard fields: ``kind`` is a discriminator describing which kind of value "
"the object represents, and ``printable`` is a string giving the same "
"representation of the value that would appear in ``-print-records``."
msgstr ""

#: ../../../TableGen/BackEnds.rst:551
msgid ""
"A reference to a ``def`` object has ``kind==\"def\"``, and has an extra "
"field ``def`` giving the name of the object referred to."
msgstr ""

#: ../../../TableGen/BackEnds.rst:554
msgid ""
"A reference to another variable in the same record has ``kind==\"var\"``, "
"and has an extra field ``var`` giving the name of the variable referred to."
msgstr ""

#: ../../../TableGen/BackEnds.rst:558
msgid ""
"A reference to a specific bit of a ``bits``-typed variable in the same "
"record has ``kind==\"varbit\"``, and has two extra fields: ``var`` gives the "
"name of the variable referred to, and ``index`` gives the index of the bit."
msgstr ""

#: ../../../TableGen/BackEnds.rst:563
msgid ""
"A value of type ``dag`` has ``kind==\"dag\"``, and has two extra fields. "
"``operator`` gives the initial value after the opening parenthesis of the "
"dag initializer; ``args`` is an array giving the following arguments. The "
"elements of ``args`` are arrays of length 2, giving the value of each "
"argument followed by its colon-suffixed name (if any). For example, in the "
"JSON representation of the dag value ``(Op 22, \"hello\":$foo)`` (assuming "
"that ``Op`` is the name of a record defined elsewhere with a ``def`` "
"statement):"
msgstr ""

#: ../../../TableGen/BackEnds.rst:572
msgid ""
"``operator`` will be an object in which ``kind==\"def\"`` and ``def==\"Op\"``"
msgstr ""

#: ../../../TableGen/BackEnds.rst:575
msgid "``args`` will be the array ``[[22, null], [\"hello\", \"foo\"]]``."
msgstr ""

#: ../../../TableGen/BackEnds.rst:577
msgid ""
"If any other kind of value or complicated expression appears in the output, "
"it will have ``kind==\"complex\"``, and no additional fields. These values "
"are not expected to be needed by backends. The standard ``printable`` field "
"can be used to extract a representation of them in TableGen source syntax if "
"necessary."
msgstr ""

#: ../../../TableGen/BackEnds.rst:584
msgid "SearchableTables Reference"
msgstr ""

#: ../../../TableGen/BackEnds.rst:586
msgid ""
"A TableGen include file, ``SearchableTable.td``, provides classes for "
"generating C++ searchable tables. These tables are described in the "
"following sections. To generate the C++ code, run ``llvm-tblgen`` with the "
"``--gen-searchable-tables`` option, which invokes the backend that generates "
"the tables from the records you provide."
msgstr ""

#: ../../../TableGen/BackEnds.rst:592
msgid ""
"Each of the data structures generated for searchable tables is guarded by an "
"``#ifdef``. This allows you to include the generated ``.inc`` file and "
"select only certain data structures for inclusion. The examples below show "
"the macro names used in these guards."
msgstr ""

#: ../../../TableGen/BackEnds.rst:598
msgid "Generic Enumerated Types"
msgstr ""

#: ../../../TableGen/BackEnds.rst:600
msgid ""
"The ``GenericEnum`` class makes it easy to define a C++ enumerated type and "
"the enumerated *elements* of that type. To define the type, define a record "
"whose parent class is ``GenericEnum`` and whose name is the desired enum "
"type. This class provides three fields, which you can set in the record "
"using the ``let`` statement."
msgstr ""

#: ../../../TableGen/BackEnds.rst:606
msgid ""
"``string FilterClass``. The enum type will have one element for each record "
"that derives from this class. These records are collected to assemble the "
"complete set of elements."
msgstr ""

#: ../../../TableGen/BackEnds.rst:610
msgid ""
"``string NameField``. The name of a field *in the collected records* that "
"specifies the name of the element. If a record has no such field, the "
"record's name will be used."
msgstr ""

#: ../../../TableGen/BackEnds.rst:614
msgid ""
"``string ValueField``. The name of a field *in the collected records* that "
"specifies the numerical value of the element. If a record has no such field, "
"it will be assigned an integer value. Values are assigned in alphabetical "
"order starting with 0."
msgstr ""

#: ../../../TableGen/BackEnds.rst:619
msgid ""
"Here is an example where the values of the elements are specified "
"explicitly, as a template argument to the ``BEntry`` class. The resulting C+"
"+ code is shown."
msgstr ""

#: ../../../TableGen/BackEnds.rst:652
msgid ""
"In the following example, the values of the elements are assigned "
"automatically. Note that values are assigned from 0, in alphabetical order "
"by element name."
msgstr ""

#: ../../../TableGen/BackEnds.rst:680
msgid "Generic Tables"
msgstr ""

#: ../../../TableGen/BackEnds.rst:682
msgid ""
"The ``GenericTable`` class is used to define a searchable generic table. "
"TableGen produces C++ code to define the table entries and also produces the "
"declaration and definition of a function to search the table based on a "
"primary key. To define the table, define a record whose parent class is "
"``GenericTable`` and whose name is the name of the global table of entries. "
"This class provides six fields."
msgstr ""

#: ../../../TableGen/BackEnds.rst:689
msgid ""
"``string FilterClass``. The table will have one entry for each record that "
"derives from this class."
msgstr ""

#: ../../../TableGen/BackEnds.rst:692
msgid ""
"``string CppTypeName``. The name of the C++ struct/class type of the table "
"that holds the entries. If unspecified, the ``FilterClass`` name is used."
msgstr ""

#: ../../../TableGen/BackEnds.rst:696
msgid ""
"``list<string> Fields``. A list of the names of the fields *in the collected "
"records* that contain the data for the table entries. The order of this list "
"determines the order of the values in the C++ initializers. See below for "
"information about the types of these fields."
msgstr ""

#: ../../../TableGen/BackEnds.rst:701
msgid ""
"``list<string> PrimaryKey``. The list of fields that make up the primary key."
msgstr ""

#: ../../../TableGen/BackEnds.rst:704
msgid ""
"``string PrimaryKeyName``. The name of the generated C++ function that "
"performs a lookup on the primary key."
msgstr ""

#: ../../../TableGen/BackEnds.rst:707
msgid "``bit PrimaryKeyEarlyOut``. See the third example below."
msgstr ""

#: ../../../TableGen/BackEnds.rst:709
msgid ""
"TableGen attempts to deduce the type of each of the table fields so that it "
"can format the C++ initializers in the emitted table. It can deduce ``bit``, "
"``bits<n>``, ``string``, ``Intrinsic``, and ``Instruction``.  These can be "
"used in the primary key. Any other field types must be specified explicitly; "
"this is done as shown in the second example below. Such fields cannot be "
"used in the primary key."
msgstr ""

#: ../../../TableGen/BackEnds.rst:716
msgid ""
"One special case of the field type has to do with code. Arbitrary code is "
"represented by a string, but has to be emitted as a C++ initializer without "
"quotes. If the code field was defined using a code literal (``[{...}]``), "
"then TableGen will know to emit it without quotes. However, if it was "
"defined using a string literal or complex string expression, then TableGen "
"will not know. In this case, you can force TableGen to treat the field as "
"code by including the following line in the ``GenericTable`` record, where "
"*xxx* is the code field name."
msgstr ""

#: ../../../TableGen/BackEnds.rst:729
msgid ""
"Here is an example where TableGen can deduce the field types. Note that the "
"table entry records are anonymous; the names of entry records are irrelevant."
msgstr ""

#: ../../../TableGen/BackEnds.rst:754
msgid ""
"Here is the generated C++ code. The declaration of ``lookupATableByValues`` "
"is guarded by ``GET_ATable_DECL``, while the definitions are guarded by "
"``GET_ATable_IMPL``."
msgstr ""

#: ../../../TableGen/BackEnds.rst:801
msgid ""
"The table entries in ``ATable`` are sorted in order by ``Val1``, and within "
"each of those values, by ``Val2``. This allows a binary search of the table, "
"which is performed in the lookup function by ``std::lower_bound``. The "
"lookup function returns a reference to the found table entry, or the null "
"pointer if no entry is found."
msgstr ""

#: ../../../TableGen/BackEnds.rst:807
msgid ""
"This example includes a field whose type TableGen cannot deduce. The "
"``Kind`` field uses the enumerated type ``CEnum`` defined above. To inform "
"TableGen of the type, the record derived from ``GenericTable`` must include "
"a string field named ``TypeOf_``\\ *field*, where *field* is the name of the "
"field whose type is required."
msgstr ""

#: ../../../TableGen/BackEnds.rst:833
msgid "Here is the generated C++ code."
msgstr ""

#: ../../../TableGen/BackEnds.rst:869
msgid ""
"The ``PrimaryKeyEarlyOut`` field, when set to 1, modifies the lookup "
"function so that it tests the first field of the primary key to determine "
"whether it is within the range of the collected records' primary keys. If "
"not, the function returns the null pointer without performing the binary "
"search. This is useful for tables that provide data for only some of the "
"elements of a larger enum-based space. The first field of the primary key "
"must be an integral type; it cannot be a string."
msgstr ""

#: ../../../TableGen/BackEnds.rst:877
msgid "Adding ``let PrimaryKeyEarlyOut = 1`` to the ``ATable`` above:"
msgstr ""

#: ../../../TableGen/BackEnds.rst:889
msgid "causes the lookup function to change as follows:"
msgstr ""

#: ../../../TableGen/BackEnds.rst:902
msgid "Search Indexes"
msgstr ""

#: ../../../TableGen/BackEnds.rst:904
msgid ""
"The ``SearchIndex`` class is used to define additional lookup functions for "
"generic tables. To define an additional function, define a record whose "
"parent class is ``SearchIndex`` and whose name is the name of the desired "
"lookup function. This class provides three fields."
msgstr ""

#: ../../../TableGen/BackEnds.rst:909
msgid ""
"``GenericTable Table``. The name of the table that is to receive another "
"lookup function."
msgstr ""

#: ../../../TableGen/BackEnds.rst:912
msgid ""
"``list<string> Key``. The list of fields that make up the secondary key."
msgstr ""

#: ../../../TableGen/BackEnds.rst:914
msgid "``bit EarlyOut``. See the third example in `Generic Tables`_."
msgstr ""

#: ../../../TableGen/BackEnds.rst:916
msgid ""
"Here is an example of a secondary key added to the ``CTable`` above. The "
"generated function looks up entries based on the ``Name`` and ``Kind`` "
"fields."
msgstr ""

#: ../../../TableGen/BackEnds.rst:926
msgid ""
"This use of ``SearchIndex`` generates the following additional C++ code."
msgstr ""
