# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 17\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../GlobalISel/RegBankSelect.rst:4
msgid "RegBankSelect"
msgstr ""

#: ../../../GlobalISel/RegBankSelect.rst:6
msgid ""
"This pass constrains the :ref:`gmir-gvregs` operands of generic instructions "
"to some :ref:`gmir-regbank`."
msgstr ""

#: ../../../GlobalISel/RegBankSelect.rst:9
msgid ""
"It iteratively maps instructions to a set of per-operand bank assignment. "
"The possible mappings are determined by the target-provided :ref:"
"`RegisterBankInfo <api-registerbankinfo>`. The mapping is then applied, "
"possibly introducing ``COPY`` instructions if necessary."
msgstr ""

#: ../../../GlobalISel/RegBankSelect.rst:15
msgid ""
"It traverses the ``MachineFunction`` top down so that all operands are "
"already mapped when analyzing an instruction."
msgstr ""

#: ../../../GlobalISel/RegBankSelect.rst:18
msgid ""
"This pass could also remap target-specific instructions when beneficial. In "
"the future, this could replace the ExeDepsFix pass, as we can directly "
"select the best variant for an instruction that's available on multiple "
"banks."
msgstr ""

#: ../../../GlobalISel/RegBankSelect.rst:25
msgid "API: RegisterBankInfo"
msgstr ""

#: ../../../GlobalISel/RegBankSelect.rst:27
msgid ""
"The ``RegisterBankInfo`` class describes multiple aspects of register banks."
msgstr ""

#: ../../../GlobalISel/RegBankSelect.rst:29
msgid ""
"**Banks**: ``addRegBankCoverage`` --- which register bank covers each "
"register class."
msgstr ""

#: ../../../GlobalISel/RegBankSelect.rst:32
msgid ""
"**Cross-Bank Copies**: ``copyCost`` --- the cost of a ``COPY`` from one bank "
"to another."
msgstr ""

#: ../../../GlobalISel/RegBankSelect.rst:35
msgid ""
"**Default Mapping**: ``getInstrMapping`` --- the default bank assignments "
"for a given instruction."
msgstr ""

#: ../../../GlobalISel/RegBankSelect.rst:38
msgid ""
"**Alternative Mapping**: ``getInstrAlternativeMapping`` --- the other "
"possible bank assignments for a given instruction."
msgstr ""

#: ../../../GlobalISel/RegBankSelect.rst:41
msgid ""
"``TODO``: All this information should eventually be static and generated by "
"TableGen, mostly using existing information augmented by bank descriptions."
msgstr ""

#: ../../../GlobalISel/RegBankSelect.rst:45
msgid ""
"``TODO``: ``getInstrMapping`` is currently separate from "
"``getInstrAlternativeMapping`` because the latter is more expensive: as we "
"move to static mapping info, both methods should be free, and we should "
"merge them."
msgstr ""

#: ../../../GlobalISel/RegBankSelect.rst:53
msgid "RegBankSelect Modes"
msgstr ""

#: ../../../GlobalISel/RegBankSelect.rst:55
msgid "``RegBankSelect`` currently has two modes:"
msgstr ""

#: ../../../GlobalISel/RegBankSelect.rst:57
msgid ""
"**Fast** --- For each instruction, pick a target-provided \"default\" bank "
"assignment.  This is the default at -O0."
msgstr ""

#: ../../../GlobalISel/RegBankSelect.rst:60
msgid ""
"**Greedy** --- For each instruction, pick the cheapest of several target-"
"provided bank assignment alternatives."
msgstr ""

#: ../../../GlobalISel/RegBankSelect.rst:63
msgid "We intend to eventually introduce an additional optimizing mode:"
msgstr ""

#: ../../../GlobalISel/RegBankSelect.rst:65
msgid ""
"**Global** --- Across multiple instructions, pick the cheapest combination "
"of bank assignments."
msgstr ""

#: ../../../GlobalISel/RegBankSelect.rst:68
msgid ""
"``NOTE``: On AArch64, we are considering using the Greedy mode even at -O0 "
"(or perhaps at backend -O1):  because :ref:`gmir-llt` doesn't distinguish "
"floating point from integer scalars, the default assignment for loads and "
"stores is the integer bank, introducing cross-bank copies on most floating "
"point operations."
msgstr ""
