# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 18\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../CMake.rst:3
msgid "Building LLVM with CMake"
msgstr "使用 CMake 建置 LLVM"

#: ../../../CMake.rst:9
msgid "Introduction"
msgstr "簡介"

#: ../../../CMake.rst:11
msgid ""
"`CMake <http://www.cmake.org/>`_ is a cross-platform build-generator tool. "
"CMake does not build the project, it generates the files needed by your "
"build tool (GNU make, Visual Studio, etc.) for building LLVM."
msgstr ""

#: ../../../CMake.rst:15
msgid ""
"If **you are a new contributor**, please start with the :doc:"
"`GettingStarted` page.  This page is geared for existing contributors moving "
"from the legacy configure/make system."
msgstr ""

#: ../../../CMake.rst:19
msgid ""
"If you are really anxious about getting a functional LLVM build, go to the "
"`Quick start`_ section. If you are a CMake novice, start with `Basic CMake "
"usage`_ and then go back to the `Quick start`_ section once you know what "
"you are doing. The `Options and variables`_ section is a reference for "
"customizing your build. If you already have experience with CMake, this is "
"the recommended starting point."
msgstr ""

#: ../../../CMake.rst:25
msgid ""
"This page is geared towards users of the LLVM CMake build. If you're looking "
"for information about modifying the LLVM CMake build system you may want to "
"see the :doc:`CMakePrimer` page. It has a basic overview of the CMake "
"language."
msgstr ""

#: ../../../CMake.rst:32
msgid "Quick start"
msgstr ""

#: ../../../CMake.rst:34
msgid "We use here the command-line, non-interactive CMake interface."
msgstr ""

#: ../../../CMake.rst:36
msgid ""
"`Download <http://www.cmake.org/cmake/resources/software.html>`_ and install "
"CMake. Version 3.20.0 is the minimum required."
msgstr ""

#: ../../../CMake.rst:39
msgid ""
"Open a shell. Your development tools must be reachable from this shell "
"through the PATH environment variable."
msgstr ""

#: ../../../CMake.rst:42
msgid ""
"Create a build directory. Building LLVM in the source directory is not "
"supported. cd to this directory:"
msgstr ""

#: ../../../CMake.rst:50
msgid ""
"Execute this command in the shell replacing `path/to/llvm/source/root` with "
"the path to the root of your LLVM source tree:"
msgstr ""

#: ../../../CMake.rst:57
msgid ""
"CMake will detect your development environment, perform a series of tests, "
"and generate the files required for building LLVM. CMake will use default "
"values for all build parameters. See the `Options and variables`_ section "
"for a list of build parameters that you can modify."
msgstr ""

#: ../../../CMake.rst:62
msgid ""
"This can fail if CMake can't detect your toolset, or if it thinks that the "
"environment is not sane enough. In this case, make sure that the toolset "
"that you intend to use is the only one reachable from the shell, and that "
"the shell itself is the correct one for your development environment. CMake "
"will refuse to build MinGW makefiles if you have a POSIX shell reachable "
"through the PATH environment variable, for instance. You can force CMake to "
"use a given build tool; for instructions, see the `Usage`_ section, below.  "
"You may also wish to control which targets LLVM enables, or which LLVM "
"components are built; see the `Frequently Used LLVM-related variables`_ "
"below."
msgstr ""

#: ../../../CMake.rst:73
msgid ""
"After CMake has finished running, proceed to use IDE project files, or start "
"the build from the build directory:"
msgstr ""

#: ../../../CMake.rst:80
msgid ""
"The ``--build`` option tells ``cmake`` to invoke the underlying build tool "
"(``make``, ``ninja``, ``xcodebuild``, ``msbuild``, etc.)"
msgstr ""

#: ../../../CMake.rst:83
msgid ""
"The underlying build tool can be invoked directly, of course, but the ``--"
"build`` option is portable."
msgstr ""

#: ../../../CMake.rst:86
msgid "After LLVM has finished building, install it from the build directory:"
msgstr ""

#: ../../../CMake.rst:92
msgid ""
"The ``--target`` option with ``install`` parameter in addition to the ``--"
"build`` option tells ``cmake`` to build the ``install`` target."
msgstr ""

#: ../../../CMake.rst:95
msgid ""
"It is possible to set a different install prefix at installation time by "
"invoking the ``cmake_install.cmake`` script generated in the build directory:"
msgstr ""

#: ../../../CMake.rst:107
msgid "Basic CMake usage"
msgstr ""

#: ../../../CMake.rst:109
msgid ""
"This section explains basic aspects of CMake which you may need in your day-"
"to-day usage."
msgstr ""

#: ../../../CMake.rst:112
msgid ""
"CMake comes with extensive documentation, in the form of html files, and as "
"online help accessible via the ``cmake`` executable itself. Execute ``cmake "
"--help`` for further help options."
msgstr ""

#: ../../../CMake.rst:116
msgid ""
"CMake allows you to specify a build tool (e.g., GNU make, Visual Studio, or "
"Xcode). If not specified on the command line, CMake tries to guess which "
"build tool to use, based on your environment. Once it has identified your "
"build tool, CMake uses the corresponding *Generator* to create files for "
"your build tool (e.g., Makefiles or Visual Studio or Xcode project files). "
"You can explicitly specify the generator with the command line option ``-G "
"\"Name of the generator\"``. To see a list of the available generators on "
"your system, execute"
msgstr ""

#: ../../../CMake.rst:128
msgid "This will list the generator names at the end of the help text."
msgstr ""

#: ../../../CMake.rst:130
msgid ""
"Generators' names are case-sensitive, and may contain spaces. For this "
"reason, you should enter them exactly as they are listed in the ``cmake --"
"help`` output, in quotes. For example, to generate project files "
"specifically for Visual Studio 12, you can execute:"
msgstr ""

#: ../../../CMake.rst:139
msgid ""
"For a given development platform there can be more than one adequate "
"generator. If you use Visual Studio, \"NMake Makefiles\" is a generator you "
"can use for building with NMake. By default, CMake chooses the most specific "
"generator supported by your development environment. If you want an "
"alternative generator, you must tell this to CMake with the ``-G`` option."
msgstr ""

#: ../../../CMake.rst:145
msgid "Todo"
msgstr ""

#: ../../../CMake.rst:147
msgid ""
"Explain variables and cache. Move explanation here from #options section."
msgstr ""

#: ../../../CMake.rst:152
msgid "Options and variables"
msgstr "選項和變數"

#: ../../../CMake.rst:154
msgid ""
"Variables customize how the build will be generated. Options are boolean "
"variables, with possible values ON/OFF. Options and variables are defined on "
"the CMake command line like this:"
msgstr ""

#: ../../../CMake.rst:162
msgid ""
"You can set a variable after the initial CMake invocation to change its "
"value. You can also undefine a variable:"
msgstr ""

#: ../../../CMake.rst:169
msgid ""
"Variables are stored in the CMake cache. This is a file named ``CMakeCache."
"txt`` stored at the root of your build directory that is generated by "
"``cmake``. Editing it yourself is not recommended."
msgstr ""

#: ../../../CMake.rst:173
msgid ""
"Variables are listed in the CMake cache and later in this document with the "
"variable name and type separated by a colon. You can also specify the "
"variable and type on the CMake command line:"
msgstr ""

#: ../../../CMake.rst:182
msgid "Frequently-used CMake variables"
msgstr ""

#: ../../../CMake.rst:184
msgid ""
"Here are some of the CMake variables that are used often, along with a brief "
"explanation. For full documentation, consult the CMake manual, or execute "
"``cmake --help-variable VARIABLE_NAME``.  See `Frequently Used LLVM-related "
"Variables`_ below for information about commonly used variables that control "
"features of LLVM and enabled subprojects."
msgstr ""

#: ../../../CMake.rst:217
msgid "**CMAKE_BUILD_TYPE**:STRING"
msgstr "**CMAKE_BUILD_TYPE**:STRING"

#: ../../../CMake.rst:193
msgid ""
"This configures the optimization level for ``make`` or ``ninja`` builds."
msgstr ""

#: ../../../CMake.rst:195
msgid "Possible values:"
msgstr "可能值:"

#: ../../../CMake.rst:198
msgid "Build Type"
msgstr ""

#: ../../../CMake.rst:198
msgid "Optimizations"
msgstr ""

#: ../../../CMake.rst:198
msgid "Debug Info"
msgstr ""

#: ../../../CMake.rst:198
msgid "Assertions"
msgstr ""

#: ../../../CMake.rst:198
msgid "Best suited for"
msgstr ""

#: ../../../CMake.rst:200
msgid "**Release**"
msgstr ""

#: ../../../CMake.rst:200 ../../../CMake.rst:202
msgid "For Speed"
msgstr ""

#: ../../../CMake.rst:200 ../../../CMake.rst:202 ../../../CMake.rst:203
msgid "No"
msgstr ""

#: ../../../CMake.rst:200
msgid "Users of LLVM and Clang"
msgstr ""

#: ../../../CMake.rst:201
msgid "**Debug**"
msgstr ""

#: ../../../CMake.rst:201
msgid "None"
msgstr ""

#: ../../../CMake.rst:201 ../../../CMake.rst:202
msgid "Yes"
msgstr ""

#: ../../../CMake.rst:201
msgid "Developers of LLVM"
msgstr ""

#: ../../../CMake.rst:202
msgid "**RelWithDebInfo**"
msgstr ""

#: ../../../CMake.rst:202
msgid "Users that also need Debug"
msgstr ""

#: ../../../CMake.rst:203
msgid "**MinSizeRel**"
msgstr ""

#: ../../../CMake.rst:203
msgid "For Size"
msgstr ""

#: ../../../CMake.rst:203
msgid "When disk space matters"
msgstr ""

#: ../../../CMake.rst:206
msgid ""
"Optimizations make LLVM/Clang run faster, but can be an impediment for step-"
"by-step debugging."
msgstr ""

#: ../../../CMake.rst:208
msgid ""
"Builds with debug information can use a lot of RAM and disk space and is "
"usually slower to run. You can improve RAM usage by using ``lld``, see the :"
"ref:`LLVM_USE_LINKER <llvm_use_linker>` option."
msgstr ""

#: ../../../CMake.rst:211
msgid ""
"Assertions are internal checks to help you find bugs. They typically slow "
"down LLVM and Clang when enabled, but can be useful during development. You "
"can manually set :ref:`LLVM_ENABLE_ASSERTIONS <llvm_enable_assertions>` to "
"override the default from `CMAKE_BUILD_TYPE`."
msgstr ""

#: ../../../CMake.rst:216
msgid ""
"If you are using an IDE such as Visual Studio or Xcode, you should use the "
"IDE settings to set the build type."
msgstr ""

#: ../../../CMake.rst:220
msgid "**CMAKE_INSTALL_PREFIX**:PATH"
msgstr "**CMAKE_INSTALL_PREFIX**:PATH"

#: ../../../CMake.rst:220
msgid "Path where LLVM will be installed when the \"install\" target is built."
msgstr ""

#: ../../../CMake.rst:223
msgid "**CMAKE_{C,CXX}_FLAGS**:STRING"
msgstr "**CMAKE_{C,CXX}_FLAGS**:STRING"

#: ../../../CMake.rst:223
msgid "Extra flags to use when compiling C and C++ source files respectively."
msgstr ""

#: ../../../CMake.rst:228
msgid "**CMAKE_{C,CXX}_COMPILER**:STRING"
msgstr "**CMAKE_{C,CXX}_COMPILER**:STRING"

#: ../../../CMake.rst:226
msgid ""
"Specify the C and C++ compilers to use. If you have multiple compilers "
"installed, CMake might not default to the one you wish to use."
msgstr ""

#: ../../../CMake.rst:233
msgid "Frequently Used LLVM-related variables"
msgstr ""

#: ../../../CMake.rst:235
msgid ""
"The default configuration may not match your requirements. Here are LLVM "
"variables that are frequently used to control that. The full description is "
"in `LLVM-related variables`_ below."
msgstr ""

#: ../../../CMake.rst:241 ../../../CMake.rst:580
msgid "**LLVM_ENABLE_PROJECTS**:STRING"
msgstr "**LLVM_ENABLE_PROJECTS**:STRING"

#: ../../../CMake.rst:240
msgid ""
"Control which projects are enabled. For example you may want to work on "
"clang or lldb by specifying ``-DLLVM_ENABLE_PROJECTS=\"clang;lldb\"``."
msgstr ""

#: ../../../CMake.rst:245 ../../../CMake.rst:593
msgid "**LLVM_ENABLE_RUNTIMES**:STRING"
msgstr "**LLVM_ENABLE_RUNTIMES**:STRING"

#: ../../../CMake.rst:244
msgid ""
"Control which runtimes are enabled. For example you may want to work on libc+"
"+ or libc++abi by specifying ``-DLLVM_ENABLE_RUNTIMES=\"libcxx;libcxxabi\"``."
msgstr ""

#: ../../../CMake.rst:250
msgid "**LLVM_LIBDIR_SUFFIX**:STRING"
msgstr "**LLVM_LIBDIR_SUFFIX**:STRING"

#: ../../../CMake.rst:248
msgid ""
"Extra suffix to append to the directory where libraries are to be installed. "
"On a 64-bit architecture, one could use ``-DLLVM_LIBDIR_SUFFIX=64`` to "
"install libraries to ``/usr/lib64``."
msgstr ""

#: ../../../CMake.rst:257
msgid "**LLVM_PARALLEL_{COMPILE,LINK}_JOBS**:STRING"
msgstr "**LLVM_PARALLEL_{COMPILE,LINK}_JOBS**:STRING"

#: ../../../CMake.rst:253
msgid ""
"Building the llvm toolchain can use a lot of resources, particularly "
"linking. These options, when you use the Ninja generator, allow you to "
"restrict the parallelism. For example, to avoid OOMs or going into swap, "
"permit only one link job per 15GB of RAM available on a 32GB machine, "
"specify ``-G Ninja -DLLVM_PARALLEL_LINK_JOBS=2``."
msgstr ""

#: ../../../CMake.rst:261 ../../../CMake.rst:806
msgid "**LLVM_TARGETS_TO_BUILD**:STRING"
msgstr "**LLVM_TARGETS_TO_BUILD**:STRING"

#: ../../../CMake.rst:260
msgid ""
"Control which targets are enabled. For example you may only need to enable "
"your native target with, for example, ``-DLLVM_TARGETS_TO_BUILD=X86``."
msgstr ""

#: ../../../CMake.rst:267 ../../../CMake.rst:825
msgid "**LLVM_USE_LINKER**:STRING"
msgstr "**LLVM_USE_LINKER**:STRING"

#: ../../../CMake.rst:266
msgid ""
"Override the system's default linker. For instance use ``lld`` with ``-"
"DLLVM_USE_LINKER=lld``."
msgstr ""

#: ../../../CMake.rst:270
msgid "Rarely-used CMake variables"
msgstr ""

#: ../../../CMake.rst:272
msgid ""
"Here are some of the CMake variables that are rarely used, along with a "
"brief explanation and LLVM-related notes.  For full documentation, consult "
"the CMake manual, or execute ``cmake --help-variable VARIABLE_NAME``."
msgstr ""

#: ../../../CMake.rst:278
msgid "**CMAKE_CXX_STANDARD**:STRING"
msgstr "**CMAKE_CXX_STANDARD**:STRING"

#: ../../../CMake.rst:277
msgid ""
"Sets the C++ standard to conform to when building LLVM.  Possible values are "
"17 and 20.  LLVM Requires C++ 17 or higher.  This defaults to 17."
msgstr ""

#: ../../../CMake.rst:282
msgid "**CMAKE_INSTALL_BINDIR**:PATH"
msgstr "**CMAKE_INSTALL_BINDIR**:PATH"

#: ../../../CMake.rst:281
msgid ""
"The path to install executables, relative to the *CMAKE_INSTALL_PREFIX*. "
"Defaults to \"bin\"."
msgstr ""

#: ../../../CMake.rst:286
msgid "**CMAKE_INSTALL_INCLUDEDIR**:PATH"
msgstr "**CMAKE_INSTALL_INCLUDEDIR**:PATH"

#: ../../../CMake.rst:285
msgid ""
"The path to install header files, relative to the *CMAKE_INSTALL_PREFIX*. "
"Defaults to \"include\"."
msgstr ""

#: ../../../CMake.rst:290
msgid "**CMAKE_INSTALL_DOCDIR**:PATH"
msgstr "**CMAKE_INSTALL_DOCDIR**:PATH"

#: ../../../CMake.rst:289
msgid ""
"The path to install documentation, relative to the *CMAKE_INSTALL_PREFIX*. "
"Defaults to \"share/doc\"."
msgstr ""

#: ../../../CMake.rst:294
msgid "**CMAKE_INSTALL_MANDIR**:PATH"
msgstr "**CMAKE_INSTALL_MANDIR**:PATH"

#: ../../../CMake.rst:293
msgid ""
"The path to install manpage files, relative to the *CMAKE_INSTALL_PREFIX*. "
"Defaults to \"share/man\"."
msgstr ""

#: ../../../CMake.rst:299
msgid "LLVM-related variables"
msgstr "LLVM 相關的變數"

#: ../../../CMake.rst:301
msgid ""
"These variables provide fine control over the build of LLVM and enabled sub-"
"projects. Nearly all of these variable names begin with ``LLVM_``."
msgstr ""

#: ../../../CMake.rst:313
msgid "**BUILD_SHARED_LIBS**:BOOL"
msgstr "**BUILD_SHARED_LIBS**:BOOL"

#: ../../../CMake.rst:306
msgid ""
"Flag indicating if each LLVM component (e.g. Support) is built as a shared "
"library (ON) or as a static library (OFF). Its default value is OFF. On "
"Windows, shared libraries may be used when building with MinGW, including "
"mingw-w64, but not when building with the Microsoft toolchain."
msgstr ""

#: ../../../CMake.rst:311
msgid ""
"BUILD_SHARED_LIBS is only recommended for use by LLVM developers. If you "
"want to build LLVM as a shared library, you should use the "
"``LLVM_BUILD_LLVM_DYLIB`` option."
msgstr ""

#: ../../../CMake.rst:322
msgid "**LLVM_ABI_BREAKING_CHECKS**:STRING"
msgstr "**LLVM_ABI_BREAKING_CHECKS**:STRING"

#: ../../../CMake.rst:316
msgid ""
"Used to decide if LLVM should be built with ABI breaking checks or not.  "
"Allowed values are `WITH_ASSERTS` (default), `FORCE_ON` and `FORCE_OFF`.  "
"`WITH_ASSERTS` turns on ABI breaking checks in an assertion enabled build.  "
"`FORCE_ON` (`FORCE_OFF`) turns them on (off) irrespective of whether normal "
"(`NDEBUG`-based) assertions are enabled or not.  A version of LLVM built "
"with ABI breaking checks is not ABI compatible with a version built without "
"it."
msgstr ""

#: ../../../CMake.rst:327
msgid "**LLVM_ADDITIONAL_BUILD_TYPES**:LIST"
msgstr "**LLVM_ADDITIONAL_BUILD_TYPES**:LIST"

#: ../../../CMake.rst:325
msgid ""
"Adding a semicolon separated list of additional build types to this flag "
"allows for them to be specified as values in CMAKE_BUILD_TYPE without "
"encountering a fatal error during the configuration process."
msgstr ""

#: ../../../CMake.rst:333
msgid "**LLVM_UNREACHABLE_OPTIMIZE**:BOOL"
msgstr "**LLVM_UNREACHABLE_OPTIMIZE**:BOOL"

#: ../../../CMake.rst:330
msgid ""
"This flag controls the behavior of `llvm_unreachable()` in release build "
"(when assertions are disabled in general). When ON (default) then "
"`llvm_unreachable()` is considered \"undefined behavior\" and optimized as "
"such. When OFF it is instead replaced with a guaranteed \"trap\"."
msgstr ""

#: ../../../CMake.rst:340
msgid "**LLVM_APPEND_VC_REV**:BOOL"
msgstr "**LLVM_APPEND_VC_REV**:BOOL"

#: ../../../CMake.rst:336
msgid ""
"Embed version control revision info (Git revision id). The version info is "
"provided by the ``LLVM_REVISION`` macro in ``llvm/include/llvm/Support/"
"VCSRevision.h``. Developers using git who don't need revision info can "
"disable this option to avoid re-linking most binaries after a branch switch. "
"Defaults to ON."
msgstr ""

#: ../../../CMake.rst:345
msgid "**LLVM_FORCE_VC_REVISION**:STRING"
msgstr "**LLVM_FORCE_VC_REVISION**:STRING"

#: ../../../CMake.rst:343
msgid ""
"Force a specific Git revision id rather than calling to git to determine it. "
"This is useful in environments where git is not available or non-functional "
"but the VC revision is available through other means."
msgstr ""

#: ../../../CMake.rst:349
msgid "**LLVM_FORCE_VC_REPOSITORY**:STRING"
msgstr "**LLVM_FORCE_VC_REPOSITORY**:STRING"

#: ../../../CMake.rst:348
msgid ""
"Set the git repository to include in version info rather than calling git to "
"determine it."
msgstr ""

#: ../../../CMake.rst:353
msgid "**LLVM_BUILD_32_BITS**:BOOL"
msgstr "**LLVM_BUILD_32_BITS**:BOOL"

#: ../../../CMake.rst:352
msgid ""
"Build 32-bit executables and libraries on 64-bit systems. This option is "
"available only on some 64-bit Unix systems. Defaults to OFF."
msgstr ""

#: ../../../CMake.rst:356
msgid "**LLVM_BUILD_BENCHMARKS**:BOOL"
msgstr "**LLVM_BUILD_BENCHMARKS**:BOOL"

#: ../../../CMake.rst:356
msgid "Adds benchmarks to the list of default targets. Defaults to OFF."
msgstr ""

#: ../../../CMake.rst:364
msgid "**LLVM_BUILD_DOCS**:BOOL"
msgstr "**LLVM_BUILD_DOCS**:BOOL"

#: ../../../CMake.rst:359
msgid ""
"Adds all *enabled* documentation targets (i.e. Doxgyen and Sphinx targets) "
"as dependencies of the default build targets.  This results in all of the "
"(enabled) documentation targets being as part of a normal build.  If the "
"``install`` target is run then this also enables all built documentation "
"targets to be installed. Defaults to OFF.  To enable a particular "
"documentation target, see see LLVM_ENABLE_SPHINX and LLVM_ENABLE_DOXYGEN."
msgstr ""

#: ../../../CMake.rst:369
msgid "**LLVM_BUILD_EXAMPLES**:BOOL"
msgstr "**LLVM_BUILD_EXAMPLES**:BOOL"

#: ../../../CMake.rst:367
msgid ""
"Build LLVM examples. Defaults to OFF. Targets for building each example are "
"generated in any case. See documentation for *LLVM_BUILD_TOOLS* above for "
"more details."
msgstr ""

#: ../../../CMake.rst:380
msgid "**LLVM_BUILD_INSTRUMENTED_COVERAGE**:BOOL"
msgstr "**LLVM_BUILD_INSTRUMENTED_COVERAGE**:BOOL"

#: ../../../CMake.rst:372
msgid ""
"If enabled, `source-based code coverage <https://clang.llvm.org/docs/"
"SourceBasedCodeCoverage.html>`_ instrumentation is enabled while building "
"llvm. If CMake can locate the code coverage scripts and the llvm-cov and "
"llvm-profdata tools that pair to your compiler, the build will also generate "
"the `generate-coverage-report` target to generate the code coverage report "
"for LLVM, and the `clear-profile-data` utility target to delete captured "
"profile data. See documentation for *LLVM_CODE_COVERAGE_TARGETS* and "
"*LLVM_COVERAGE_SOURCE_DIRS* for more information on configuring code "
"coverage reports."
msgstr ""

#: ../../../CMake.rst:385
msgid "**LLVM_CODE_COVERAGE_TARGETS**:STRING"
msgstr "**LLVM_CODE_COVERAGE_TARGETS**:STRING"

#: ../../../CMake.rst:383
msgid ""
"If set to a semicolon separated list of targets, those targets will be used "
"to drive the code coverage reports. If unset, the target list will be "
"constructed using the LLVM build's CMake export list."
msgstr ""

#: ../../../CMake.rst:390
msgid "**LLVM_COVERAGE_SOURCE_DIRS**:STRING"
msgstr "**LLVM_COVERAGE_SOURCE_DIRS**:STRING"

#: ../../../CMake.rst:388
msgid ""
"If set to a semicolon separated list of directories, the coverage reports "
"will limit code coverage summaries to just the listed directories. If unset, "
"coverage reports will include all sources identified by the tooling."
msgstr ""

#: ../../../CMake.rst:396
msgid "**LLVM_INDIVIDUAL_TEST_COVERAGE**:BOOL"
msgstr "**LLVM_INDIVIDUAL_TEST_COVERAGE**:BOOL"

#: ../../../CMake.rst:393
msgid ""
"Enable individual test case coverage. When set to ON, code coverage data for "
"each test case will be generated and stored in a separate directory under "
"the config.test_exec_root path. This feature allows code coverage analysis "
"of each individual test case. Defaults to OFF."
msgstr ""

#: ../../../CMake.rst:406
msgid "**LLVM_BUILD_LLVM_DYLIB**:BOOL"
msgstr "**LLVM_BUILD_LLVM_DYLIB**:BOOL"

#: ../../../CMake.rst:399
msgid ""
"If enabled, the target for building the libLLVM shared library is added. "
"This library contains all of LLVM's components in a single shared library. "
"Defaults to OFF. This cannot be used in conjunction with BUILD_SHARED_LIBS. "
"Tools will only be linked to the libLLVM shared library if "
"LLVM_LINK_LLVM_DYLIB is also ON. The components in the library can be "
"customised by setting LLVM_DYLIB_COMPONENTS to a list of the desired "
"components. This option is not available on Windows."
msgstr ""

#: ../../../CMake.rst:414
msgid "**LLVM_BUILD_TESTS**:BOOL"
msgstr "**LLVM_BUILD_TESTS**:BOOL"

#: ../../../CMake.rst:409
msgid ""
"Include LLVM unit tests in the 'all' build target. Defaults to OFF. Targets "
"for building each unit test are generated in any case. You can build a "
"specific unit test using the targets defined under *unittests*, such as "
"ADTTests, IRTests, SupportTests, etc. (Search for ``add_llvm_unittest`` in "
"the subdirectories of *unittests* for a complete list of unit tests.) It is "
"possible to build all unit tests with the target *UnitTests*."
msgstr ""

#: ../../../CMake.rst:420
msgid "**LLVM_BUILD_TOOLS**:BOOL"
msgstr "**LLVM_BUILD_TOOLS**:BOOL"

#: ../../../CMake.rst:417
msgid ""
"Build LLVM tools. Defaults to ON. Targets for building each tool are "
"generated in any case. You can build a tool separately by invoking its "
"target. For example, you can build *llvm-as* with a Makefile-based system by "
"executing *make llvm-as* at the root of your build directory."
msgstr ""

#: ../../../CMake.rst:428
msgid "**LLVM_CCACHE_BUILD**:BOOL"
msgstr "**LLVM_CCACHE_BUILD**:BOOL"

#: ../../../CMake.rst:423
msgid ""
"If enabled and the ``ccache`` program is available, then LLVM will be built "
"using ``ccache`` to speed up rebuilds of LLVM and its components. Defaults "
"to OFF.  The size and location of the cache maintained by ``ccache`` can be "
"adjusted via the LLVM_CCACHE_MAXSIZE and LLVM_CCACHE_DIR options, which are "
"passed to the CCACHE_MAXSIZE and CCACHE_DIR environment variables, "
"respectively."
msgstr ""

#: ../../../CMake.rst:434
msgid "**LLVM_CREATE_XCODE_TOOLCHAIN**:BOOL"
msgstr "**LLVM_CREATE_XCODE_TOOLCHAIN**:BOOL"

#: ../../../CMake.rst:431
msgid ""
"macOS Only: If enabled CMake will generate a target named 'install-xcode-"
"toolchain'. This target will create a directory at $CMAKE_INSTALL_PREFIX/"
"Toolchains containing an xctoolchain directory which can be used to override "
"the default system tools."
msgstr ""

#: ../../../CMake.rst:437
msgid "**LLVM_<target>_LINKER_FLAGS**:STRING"
msgstr "**LLVM_<target>_LINKER_FLAGS**:STRING"

#: ../../../CMake.rst:437
msgid "Defines the set of linker flags that should be applied to a <target>."
msgstr ""

#: ../../../CMake.rst:443
msgid "**LLVM_DEFAULT_TARGET_TRIPLE**:STRING"
msgstr "**LLVM_DEFAULT_TARGET_TRIPLE**:STRING"

#: ../../../CMake.rst:440
msgid ""
"LLVM target to use for code generation when no target is explicitly "
"specified. It defaults to \"host\", meaning that it shall pick the "
"architecture of the machine where LLVM is being built. If you are building a "
"cross-compiler, set it to the target triple of your desired architecture."
msgstr ""

#: ../../../CMake.rst:452
msgid "**LLVM_DOXYGEN_QCH_FILENAME**:STRING"
msgstr "**LLVM_DOXYGEN_QCH_FILENAME**:STRING"

#: ../../../CMake.rst:446
msgid ""
"The filename of the Qt Compressed Help file that will be generated when ``-"
"DLLVM_ENABLE_DOXYGEN=ON`` and ``-DLLVM_ENABLE_DOXYGEN_QT_HELP=ON`` are "
"given. Defaults to ``org.llvm.qch``. This option is only useful in "
"combination with ``-DLLVM_ENABLE_DOXYGEN_QT_HELP=ON``; otherwise it has no "
"effect."
msgstr ""

#: ../../../CMake.rst:458
msgid "**LLVM_DOXYGEN_QHELPGENERATOR_PATH**:STRING"
msgstr "**LLVM_DOXYGEN_QHELPGENERATOR_PATH**:STRING"

#: ../../../CMake.rst:455
msgid ""
"The path to the ``qhelpgenerator`` executable. Defaults to whatever CMake's "
"``find_program()`` can find. This option is only useful in combination with "
"``-DLLVM_ENABLE_DOXYGEN_QT_HELP=ON``; otherwise it has no effect."
msgstr ""

#: ../../../CMake.rst:467
msgid "**LLVM_DOXYGEN_QHP_CUST_FILTER_NAME**:STRING"
msgstr "**LLVM_DOXYGEN_QHP_CUST_FILTER_NAME**:STRING"

#: ../../../CMake.rst:461
msgid ""
"See `Qt Help Project`_ for more information. Defaults to the CMake variable "
"``${PACKAGE_STRING}`` which is a combination of the package name and version "
"string. This filter can then be used in Qt Creator to select only "
"documentation from LLVM when browsing through all the help files that you "
"might have loaded. This option is only useful in combination with ``-"
"DLLVM_ENABLE_DOXYGEN_QT_HELP=ON``; otherwise it has no effect."
msgstr ""

#: ../../../CMake.rst:476
msgid "**LLVM_DOXYGEN_QHP_NAMESPACE**:STRING"
msgstr "**LLVM_DOXYGEN_QHP_NAMESPACE**:STRING"

#: ../../../CMake.rst:472
msgid ""
"Namespace under which the intermediate Qt Help Project file lives. See `Qt "
"Help Project`_ for more information. Defaults to \"org.llvm\". This option "
"is only useful in combination with ``-DLLVM_ENABLE_DOXYGEN_QT_HELP=ON``; "
"otherwise it has no effect."
msgstr ""

#: ../../../CMake.rst:480
msgid "**LLVM_DOXYGEN_SVG**:BOOL"
msgstr ""

#: ../../../CMake.rst:479
msgid ""
"Uses .svg files instead of .png files for graphs in the Doxygen output. "
"Defaults to OFF."
msgstr ""

#: ../../../CMake.rst:486
msgid "**LLVM_ENABLE_ASSERTIONS**:BOOL"
msgstr "**LLVM_ENABLE_ASSERTIONS**:BOOL"

#: ../../../CMake.rst:485
msgid ""
"Enables code assertions. Defaults to ON if and only if ``CMAKE_BUILD_TYPE`` "
"is *Debug*."
msgstr ""

#: ../../../CMake.rst:489
msgid "**LLVM_ENABLE_BINDINGS**:BOOL"
msgstr "**LLVM_ENABLE_BINDINGS**:BOOL"

#: ../../../CMake.rst:489
msgid "If disabled, do not try to build the OCaml bindings."
msgstr ""

#: ../../../CMake.rst:493
msgid "**LLVM_ENABLE_DIA_SDK**:BOOL"
msgstr "**LLVM_ENABLE_DIA_SDK**:BOOL"

#: ../../../CMake.rst:492
msgid ""
"Enable building with MSVC DIA SDK for PDB debugging support. Available only "
"with MSVC. Defaults to ON."
msgstr ""

#: ../../../CMake.rst:497
msgid "**LLVM_ENABLE_DOXYGEN**:BOOL"
msgstr "**LLVM_ENABLE_DOXYGEN**:BOOL"

#: ../../../CMake.rst:496
msgid ""
"Enables the generation of browsable HTML documentation using doxygen. "
"Defaults to OFF."
msgstr ""

#: ../../../CMake.rst:505
msgid "**LLVM_ENABLE_DOXYGEN_QT_HELP**:BOOL"
msgstr "**LLVM_ENABLE_DOXYGEN_QT_HELP**:BOOL"

#: ../../../CMake.rst:500
msgid ""
"Enables the generation of a Qt Compressed Help file. Defaults to OFF. This "
"affects the make target ``doxygen-llvm``. When enabled, apart from the "
"normal HTML output generated by doxygen, this will produce a QCH file named "
"``org.llvm.qch``. You can then load this file into Qt Creator. This option "
"is only useful in combination with ``-DLLVM_ENABLE_DOXYGEN=ON``; otherwise "
"this has no effect."
msgstr ""

#: ../../../CMake.rst:510
msgid "**LLVM_ENABLE_EH**:BOOL"
msgstr "**LLVM_ENABLE_EH**:BOOL"

#: ../../../CMake.rst:508
msgid ""
"Build LLVM with exception-handling support. This is necessary if you wish to "
"link against LLVM libraries and make use of C++ exceptions in your own code "
"that need to propagate through LLVM code. Defaults to OFF."
msgstr ""

#: ../../../CMake.rst:513
msgid "**LLVM_ENABLE_EXPENSIVE_CHECKS**:BOOL"
msgstr "**LLVM_ENABLE_EXPENSIVE_CHECKS**:BOOL"

#: ../../../CMake.rst:513
msgid "Enable additional time/memory expensive checking. Defaults to OFF."
msgstr ""

#: ../../../CMake.rst:518
msgid "**LLVM_ENABLE_HTTPLIB**:BOOL"
msgstr "**LLVM_ENABLE_HTTPLIB**:BOOL"

#: ../../../CMake.rst:516
msgid ""
"Enables the optional cpp-httplib dependency which is used by llvm-debuginfod "
"to serve debug info over HTTP. `cpp-httplib <https://github.com/yhirose/cpp-"
"httplib>`_ must be installed, or `httplib_ROOT` must be set. Defaults to OFF."
msgstr ""

#: ../../../CMake.rst:526
msgid "**LLVM_ENABLE_FFI**:BOOL"
msgstr "**LLVM_ENABLE_FFI**:BOOL"

#: ../../../CMake.rst:521
msgid ""
"Indicates whether the LLVM Interpreter will be linked with the Foreign "
"Function Interface library (libffi) in order to enable calling external "
"functions. If the library or its headers are installed in a custom location, "
"you can also set the variables FFI_INCLUDE_DIR and FFI_LIBRARY_DIR to the "
"directories where ffi.h and libffi.so can be found, respectively. Defaults "
"to OFF."
msgstr ""

#: ../../../CMake.rst:533
msgid "**LLVM_ENABLE_IDE**:BOOL"
msgstr "**LLVM_ENABLE_IDE**:BOOL"

#: ../../../CMake.rst:529
msgid ""
"Tell the build system that an IDE is being used. This in turn disables the "
"creation of certain convenience build system targets, such as the various "
"``install-*`` and ``check-*`` targets, since IDEs don't always deal well "
"with a large number of targets. This is usually autodetected, but it can be "
"configured manually to explicitly control the generation of those targets."
msgstr ""

#: ../../../CMake.rst:538
msgid "**LLVM_ENABLE_LIBCXX**:BOOL"
msgstr "**LLVM_ENABLE_LIBCXX**:BOOL"

#: ../../../CMake.rst:536
msgid ""
"If the host compiler and linker supports the stdlib flag, -stdlib=libc++ is "
"passed to invocations of both so that the project is built using libc++ "
"instead of stdlibc++. Defaults to OFF."
msgstr ""

#: ../../../CMake.rst:543
msgid "**LLVM_ENABLE_LLVM_LIBC**: BOOL"
msgstr "**LLVM_ENABLE_LLVM_LIBC**: BOOL"

#: ../../../CMake.rst:541
msgid ""
"If the LLVM libc overlay is installed in a location where the host linker "
"can access it, all built executables will be linked against the LLVM libc "
"overlay before linking against the system libc. Defaults to OFF."
msgstr ""

#: ../../../CMake.rst:548
msgid "**LLVM_ENABLE_LIBPFM**:BOOL"
msgstr "**LLVM_ENABLE_LIBPFM**:BOOL"

#: ../../../CMake.rst:546
msgid ""
"Enable building with libpfm to support hardware counter measurements in LLVM "
"tools. Defaults to ON."
msgstr ""

#: ../../../CMake.rst:553
msgid "**LLVM_ENABLE_LLD**:BOOL"
msgstr "**LLVM_ENABLE_LLD**:BOOL"

#: ../../../CMake.rst:551
msgid ""
"This option is equivalent to `-DLLVM_USE_LINKER=lld`, except during a 2-"
"stage build where a dependency is added from the first stage to the second "
"ensuring that lld is built before stage2 begins."
msgstr ""

#: ../../../CMake.rst:558
msgid "**LLVM_ENABLE_LTO**:STRING"
msgstr "**LLVM_ENABLE_LTO**:STRING"

#: ../../../CMake.rst:556
msgid ""
"Add ``-flto`` or ``-flto=`` flags to the compile and link command lines, "
"enabling link-time optimization. Possible values are ``Off``, ``On``, "
"``Thin`` and ``Full``. Defaults to OFF."
msgstr ""

#: ../../../CMake.rst:562
msgid "**LLVM_ENABLE_MODULES**:BOOL"
msgstr "**LLVM_ENABLE_MODULES**:BOOL"

#: ../../../CMake.rst:561
msgid ""
"Compile with `Clang Header Modules <https://clang.llvm.org/docs/Modules."
"html>`_."
msgstr ""

#: ../../../CMake.rst:566
msgid "**LLVM_ENABLE_PEDANTIC**:BOOL"
msgstr "**LLVM_ENABLE_PEDANTIC**:BOOL"

#: ../../../CMake.rst:565
msgid ""
"Enable pedantic mode. This disables compiler-specific extensions, if "
"possible. Defaults to ON."
msgstr ""

#: ../../../CMake.rst:570
msgid "**LLVM_ENABLE_PIC**:BOOL"
msgstr "**LLVM_ENABLE_PIC**:BOOL"

#: ../../../CMake.rst:569
msgid ""
"Add the ``-fPIC`` flag to the compiler command-line, if the compiler "
"supports this flag. Some systems, like Windows, do not need this flag. "
"Defaults to ON."
msgstr ""

#: ../../../CMake.rst:573
msgid ""
"Semicolon-separated list of projects to build, or *all* for building all "
"(clang, lldb, lld, polly, etc) projects. This flag assumes that projects are "
"checked out side-by-side and not nested, i.e. clang needs to be in parallel "
"of llvm instead of nested in `llvm/tools`. This feature allows to have one "
"build for only LLVM and another for clang+llvm using the same source "
"checkout. The full list is: ``clang;clang-tools-extra;cross-project-tests;"
"libc;libclc;lld;lldb;openmp;polly;pstl``"
msgstr ""

#: ../../../CMake.rst:583
msgid ""
"Build libc++, libc++abi, libunwind or compiler-rt using the just-built "
"compiler. This is the correct way to build runtimes when putting together a "
"toolchain. It will build the builtins separately from the other runtimes to "
"preserve correct dependency ordering. If you want to build the runtimes "
"using a system compiler, see the `libc++ documentation <https://libcxx.llvm."
"org/BuildingLibcxx.html>`_. Note: the list should not have duplicates with "
"`LLVM_ENABLE_PROJECTS`. The full list is: ``compiler-rt;libc;libcxx;"
"libcxxabi;libunwind;openmp`` To enable all of them, use: "
"``LLVM_ENABLE_RUNTIMES=all``"
msgstr ""

#: ../../../CMake.rst:596
msgid "**LLVM_ENABLE_RTTI**:BOOL"
msgstr "**LLVM_ENABLE_RTTI**:BOOL"

#: ../../../CMake.rst:596
msgid "Build LLVM with run-time type information. Defaults to OFF."
msgstr ""

#: ../../../CMake.rst:601
msgid "**LLVM_ENABLE_SPHINX**:BOOL"
msgstr "**LLVM_ENABLE_SPHINX**:BOOL"

#: ../../../CMake.rst:599
msgid ""
"If specified, CMake will search for the ``sphinx-build`` executable and will "
"make the ``SPHINX_OUTPUT_HTML`` and ``SPHINX_OUTPUT_MAN`` CMake options "
"available. Defaults to OFF."
msgstr ""

#: ../../../CMake.rst:604
msgid "**LLVM_ENABLE_THREADS**:BOOL"
msgstr "**LLVM_ENABLE_THREADS**:BOOL"

#: ../../../CMake.rst:604
msgid "Build with threads support, if available. Defaults to ON."
msgstr ""

#: ../../../CMake.rst:608
msgid "**LLVM_ENABLE_UNWIND_TABLES**:BOOL"
msgstr "**LLVM_ENABLE_UNWIND_TABLES**:BOOL"

#: ../../../CMake.rst:607
msgid ""
"Enable unwind tables in the binary.  Disabling unwind tables can reduce the "
"size of the libraries.  Defaults to ON."
msgstr ""

#: ../../../CMake.rst:611
msgid "**LLVM_ENABLE_WARNINGS**:BOOL"
msgstr "**LLVM_ENABLE_WARNINGS**:BOOL"

#: ../../../CMake.rst:611
msgid "Enable all compiler warnings. Defaults to ON."
msgstr ""

#: ../../../CMake.rst:614
msgid "**LLVM_ENABLE_WERROR**:BOOL"
msgstr "**LLVM_ENABLE_WERROR**:BOOL"

#: ../../../CMake.rst:614
msgid ""
"Stop and fail the build, if a compiler warning is triggered. Defaults to OFF."
msgstr ""

#: ../../../CMake.rst:618
msgid "**LLVM_ENABLE_Z3_SOLVER**:BOOL"
msgstr "**LLVM_ENABLE_Z3_SOLVER**:BOOL"

#: ../../../CMake.rst:617
msgid ""
"If enabled, the Z3 constraint solver is activated for the Clang static "
"analyzer. A recent version of the z3 library needs to be available on the "
"system."
msgstr ""

#: ../../../CMake.rst:623
msgid "**LLVM_ENABLE_ZLIB**:STRING"
msgstr "**LLVM_ENABLE_ZLIB**:STRING"

#: ../../../CMake.rst:621
msgid ""
"Used to decide if LLVM tools should support compression/decompression with "
"zlib. Allowed values are ``OFF``, ``ON`` (default, enable if zlib is found), "
"and ``FORCE_ON`` (error if zlib is not found)."
msgstr ""

#: ../../../CMake.rst:628
msgid "**LLVM_ENABLE_ZSTD**:STRING"
msgstr "**LLVM_ENABLE_ZSTD**:STRING"

#: ../../../CMake.rst:626
msgid ""
"Used to decide if LLVM tools should support compression/decompression with "
"zstd. Allowed values are ``OFF``, ``ON`` (default, enable if zstd is found), "
"and ``FORCE_ON`` (error if zstd is not found)."
msgstr ""

#: ../../../CMake.rst:633
msgid "**LLVM_EXPERIMENTAL_TARGETS_TO_BUILD**:STRING"
msgstr "**LLVM_EXPERIMENTAL_TARGETS_TO_BUILD**:STRING"

#: ../../../CMake.rst:631
msgid ""
"Semicolon-separated list of experimental targets to build and linked into "
"llvm. This will build the experimental target without needing it to add to "
"the list of all the targets available in the LLVM's main CMakeLists.txt."
msgstr ""

#: ../../../CMake.rst:641
msgid "**LLVM_EXTERNAL_{CLANG,LLD,POLLY}_SOURCE_DIR**:PATH"
msgstr "**LLVM_EXTERNAL_{CLANG,LLD,POLLY}_SOURCE_DIR**:PATH"

#: ../../../CMake.rst:636
msgid ""
"These variables specify the path to the source directory for the external "
"LLVM projects Clang, lld, and Polly, respectively, relative to the top-level "
"source directory.  If the in-tree subdirectory for an external project "
"exists (e.g., llvm/tools/clang for Clang), then the corresponding variable "
"will not be used.  If the variable for an external project does not point to "
"a valid path, then that project will not be built."
msgstr ""

#: ../../../CMake.rst:649
msgid "**LLVM_EXTERNAL_PROJECTS**:STRING"
msgstr "**LLVM_EXTERNAL_PROJECTS**:STRING"

#: ../../../CMake.rst:644
msgid ""
"Semicolon-separated list of additional external projects to build as part of "
"llvm. For each project LLVM_EXTERNAL_<NAME>_SOURCE_DIR have to be specified "
"with the path for the source code of the project. Example: ``-"
"DLLVM_EXTERNAL_PROJECTS=\"Foo;Bar\" -DLLVM_EXTERNAL_FOO_SOURCE_DIR=/src/foo -"
"DLLVM_EXTERNAL_BAR_SOURCE_DIR=/src/bar``."
msgstr ""

#: ../../../CMake.rst:653
msgid "**LLVM_EXTERNALIZE_DEBUGINFO**:BOOL"
msgstr "**LLVM_EXTERNALIZE_DEBUGINFO**:BOOL"

#: ../../../CMake.rst:652
msgid ""
"Generate dSYM files and strip executables and libraries (Darwin Only). "
"Defaults to OFF."
msgstr ""

#: ../../../CMake.rst:658
msgid "**LLVM_FORCE_USE_OLD_TOOLCHAIN**:BOOL"
msgstr "**LLVM_FORCE_USE_OLD_TOOLCHAIN**:BOOL"

#: ../../../CMake.rst:656
msgid ""
"If enabled, the compiler and standard library versions won't be checked. "
"LLVM may not compile at all, or might fail at runtime due to known bugs in "
"these toolchains."
msgstr ""

#: ../../../CMake.rst:661
msgid "**LLVM_INCLUDE_BENCHMARKS**:BOOL"
msgstr "**LLVM_INCLUDE_BENCHMARKS**:BOOL"

#: ../../../CMake.rst:661
msgid "Generate build targets for the LLVM benchmarks. Defaults to ON."
msgstr ""

#: ../../../CMake.rst:665
msgid "**LLVM_INCLUDE_EXAMPLES**:BOOL"
msgstr "**LLVM_INCLUDE_EXAMPLES**:BOOL"

#: ../../../CMake.rst:664
msgid ""
"Generate build targets for the LLVM examples. Defaults to ON. You can use "
"this option to disable the generation of build targets for the LLVM examples."
msgstr ""

#: ../../../CMake.rst:670
msgid "**LLVM_INCLUDE_TESTS**:BOOL"
msgstr "**LLVM_INCLUDE_TESTS**:BOOL"

#: ../../../CMake.rst:668
msgid ""
"Generate build targets for the LLVM unit tests. Defaults to ON. You can use "
"this option to disable the generation of build targets for the LLVM unit "
"tests."
msgstr ""

#: ../../../CMake.rst:674
msgid "**LLVM_INCLUDE_TOOLS**:BOOL"
msgstr "**LLVM_INCLUDE_TOOLS**:BOOL"

#: ../../../CMake.rst:673
msgid ""
"Generate build targets for the LLVM tools. Defaults to ON. You can use this "
"option to disable the generation of build targets for the LLVM tools."
msgstr ""

#: ../../../CMake.rst:678
msgid "**LLVM_INSTALL_BINUTILS_SYMLINKS**:BOOL"
msgstr "**LLVM_INSTALL_BINUTILS_SYMLINKS**:BOOL"

#: ../../../CMake.rst:677
msgid ""
"Install symlinks from the binutils tool names to the corresponding LLVM "
"tools. For example, ar will be symlinked to llvm-ar."
msgstr ""

#: ../../../CMake.rst:682
msgid "**LLVM_INSTALL_CCTOOLS_SYMLINKS**:BOOL"
msgstr "**LLVM_INSTALL_CCTOOLS_SYMLINKS**:BOOL"

#: ../../../CMake.rst:681
msgid ""
"Install symliks from the cctools tool names to the corresponding LLVM tools. "
"For example, lipo will be symlinked to llvm-lipo."
msgstr ""

#: ../../../CMake.rst:687
msgid "**LLVM_INSTALL_OCAMLDOC_HTML_DIR**:STRING"
msgstr "**LLVM_INSTALL_OCAMLDOC_HTML_DIR**:STRING"

#: ../../../CMake.rst:685
msgid ""
"The path to install OCamldoc-generated HTML documentation to. This path can "
"either be absolute or relative to the CMAKE_INSTALL_PREFIX. Defaults to "
"``${CMAKE_INSTALL_DOCDIR}/llvm/ocaml-html``."
msgstr ""

#: ../../../CMake.rst:692
msgid "**LLVM_INSTALL_SPHINX_HTML_DIR**:STRING"
msgstr "**LLVM_INSTALL_SPHINX_HTML_DIR**:STRING"

#: ../../../CMake.rst:690
msgid ""
"The path to install Sphinx-generated HTML documentation to. This path can "
"either be absolute or relative to the CMAKE_INSTALL_PREFIX. Defaults to "
"``${CMAKE_INSTALL_DOCDIR}/llvm/html``."
msgstr ""

#: ../../../CMake.rst:696
msgid "**LLVM_INSTALL_UTILS**:BOOL"
msgstr "**LLVM_INSTALL_UTILS**:BOOL"

#: ../../../CMake.rst:695
msgid ""
"If enabled, utility binaries like ``FileCheck`` and ``not`` will be "
"installed to CMAKE_INSTALL_PREFIX."
msgstr ""

#: ../../../CMake.rst:712
msgid "**LLVM_INTEGRATED_CRT_ALLOC**:PATH"
msgstr "**LLVM_INTEGRATED_CRT_ALLOC**:PATH"

#: ../../../CMake.rst:699
msgid ""
"On Windows, allows embedding a different C runtime allocator into the LLVM "
"tools and libraries. Using a lock-free allocator such as the ones listed "
"below greatly decreases ThinLTO link time by about an order of magnitude. It "
"also midly improves Clang build times, by about 5-10%. At the moment, "
"rpmalloc, snmalloc and mimalloc are supported. Use the path to `git clone` "
"to select the respective allocator, for example:"
msgstr ""

#: ../../../CMake.rst:711
msgid ""
"This flag needs to be used along with the static CRT, ie. if building the "
"Release target, add -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded."
msgstr ""

#: ../../../CMake.rst:717
msgid "**LLVM_INSTALL_DOXYGEN_HTML_DIR**:STRING"
msgstr "**LLVM_INSTALL_DOXYGEN_HTML_DIR**:STRING"

#: ../../../CMake.rst:715
msgid ""
"The path to install Doxygen-generated HTML documentation to. This path can "
"either be absolute or relative to the *CMAKE_INSTALL_PREFIX*. Defaults to "
"``${CMAKE_INSTALL_DOCDIR}/llvm/doxygen-html``."
msgstr ""

#: ../../../CMake.rst:723
msgid "**LLVM_LINK_LLVM_DYLIB**:BOOL"
msgstr "**LLVM_LINK_LLVM_DYLIB**:BOOL"

#: ../../../CMake.rst:720
msgid ""
"If enabled, tools will be linked with the libLLVM shared library. Defaults "
"to OFF. Setting LLVM_LINK_LLVM_DYLIB to ON also sets LLVM_BUILD_LLVM_DYLIB "
"to ON. This option is not available on Windows."
msgstr ""

#: ../../../CMake.rst:728
msgid "**LLVM_LIT_ARGS**:STRING"
msgstr "**LLVM_LIT_ARGS**:STRING"

#: ../../../CMake.rst:726
msgid ""
"Arguments given to lit.  ``make check`` and ``make clang-test`` are "
"affected. By default, ``'-sv --no-progress-bar'`` on Visual C++ and Xcode, "
"``'-sv'`` on others."
msgstr ""

#: ../../../CMake.rst:735
msgid "**LLVM_LIT_TOOLS_DIR**:PATH"
msgstr "**LLVM_LIT_TOOLS_DIR**:PATH"

#: ../../../CMake.rst:731
msgid ""
"The path to GnuWin32 tools for tests. Valid on Windows host.  Defaults to "
"the empty string, in which case lit will look for tools needed for tests (e."
"g. ``grep``, ``sort``, etc.) in your %PATH%. If GnuWin32 is not in your "
"%PATH%, then you can set this variable to the GnuWin32 directory so that lit "
"can find tools needed for tests in that directory."
msgstr ""

#: ../../../CMake.rst:742
msgid "**LLVM_NATIVE_TOOL_DIR**:STRING"
msgstr "**LLVM_NATIVE_TOOL_DIR**:STRING"

#: ../../../CMake.rst:738
msgid ""
"Full path to a directory containing executables for the build host "
"(containing binaries such as ``llvm-tblgen`` and ``clang-tblgen``). This is "
"intended for cross-compiling: if the user sets this variable and the "
"directory contains executables with the expected names, no separate native "
"versions of those executables will be built."
msgstr ""

#: ../../../CMake.rst:749
msgid "**LLVM_NO_INSTALL_NAME_DIR_FOR_BUILD_TREE**:BOOL"
msgstr "**LLVM_NO_INSTALL_NAME_DIR_FOR_BUILD_TREE**:BOOL"

#: ../../../CMake.rst:745
msgid ""
"Defaults to ``OFF``. If set to ``ON``, CMake's default logic for library IDs "
"on Darwin in the build tree will be used. Otherwise the install-time library "
"IDs will be used in the build tree as well. Mainly useful when other CMake "
"library ID control variables (e.g., ``CMAKE_INSTALL_NAME_DIR``) are being "
"set to non-standard values."
msgstr ""

#: ../../../CMake.rst:755
msgid "**LLVM_OPTIMIZED_TABLEGEN**:BOOL"
msgstr "**LLVM_OPTIMIZED_TABLEGEN**:BOOL"

#: ../../../CMake.rst:752
msgid ""
"If enabled and building a debug or asserts build the CMake build system will "
"generate a Release build tree to build a fully optimized tablegen for use "
"during the build. Enabling this option can significantly speed up build "
"times especially when building LLVM in Debug configurations."
msgstr ""

#: ../../../CMake.rst:758
msgid "**LLVM_PARALLEL_COMPILE_JOBS**:STRING"
msgstr ""

#: ../../../CMake.rst:758
msgid "Define the maximum number of concurrent compilation jobs."
msgstr ""

#: ../../../CMake.rst:761
msgid "**LLVM_PARALLEL_LINK_JOBS**:STRING"
msgstr ""

#: ../../../CMake.rst:761
msgid "Define the maximum number of concurrent link jobs."
msgstr ""

#: ../../../CMake.rst:766
msgid "**LLVM_RAM_PER_COMPILE_JOB**:STRING"
msgstr ""

#: ../../../CMake.rst:764
msgid ""
"Calculates the amount of Ninja compile jobs according to available "
"resources. Value has to be in MB, overwrites LLVM_PARALLEL_COMPILE_JOBS. "
"Compile jobs will be between one and amount of logical cores."
msgstr ""

#: ../../../CMake.rst:774
msgid "**LLVM_RAM_PER_LINK_JOB**:STRING"
msgstr ""

#: ../../../CMake.rst:769
msgid ""
"Calculates the amount of Ninja link jobs according to available resources. "
"Value has to be in MB, overwrites LLVM_PARALLEL_LINK_JOBS. Link jobs will be "
"between one and amount of logical cores. Link jobs will not run exclusively "
"therefore you should add an offset of one or two compile jobs to be sure its "
"not terminated in your memory restricted environment. On ELF platforms also "
"consider ``LLVM_USE_SPLIT_DWARF`` in Debug build."
msgstr ""

#: ../../../CMake.rst:778
msgid "**LLVM_PROFDATA_FILE**:PATH"
msgstr "**LLVM_PROFDATA_FILE**:PATH"

#: ../../../CMake.rst:777
msgid ""
"Path to a profdata file to pass into clang's -fprofile-instr-use flag. This "
"can only be specified if you're building with clang."
msgstr ""

#: ../../../CMake.rst:783
msgid "**LLVM_REVERSE_ITERATION**:BOOL"
msgstr "**LLVM_REVERSE_ITERATION**:BOOL"

#: ../../../CMake.rst:781
msgid ""
"If enabled, all supported unordered llvm containers would be iterated in "
"reverse order. This is useful for uncovering non-determinism caused by "
"iteration of unordered containers."
msgstr ""

#: ../../../CMake.rst:788
msgid "**LLVM_STATIC_LINK_CXX_STDLIB**:BOOL"
msgstr "**LLVM_STATIC_LINK_CXX_STDLIB**:BOOL"

#: ../../../CMake.rst:786
msgid ""
"Statically link to the C++ standard library if possible. This uses the flag "
"\"-static-libstdc++\", but a Clang host compiler will statically link to "
"libc++ if used in conjunction with the **LLVM_ENABLE_LIBCXX** flag. Defaults "
"to OFF."
msgstr ""

#: ../../../CMake.rst:793
msgid "**LLVM_TABLEGEN**:STRING"
msgstr "**LLVM_TABLEGEN**:STRING"

#: ../../../CMake.rst:791
msgid ""
"Full path to a native TableGen executable (usually named ``llvm-tblgen``). "
"This is intended for cross-compiling: if the user sets this variable, no "
"native TableGen will be created."
msgstr ""

#: ../../../CMake.rst:799
msgid "**LLVM_TARGET_ARCH**:STRING"
msgstr "**LLVM_TARGET_ARCH**:STRING"

#: ../../../CMake.rst:796
msgid ""
"LLVM target to use for native code generation. This is required for JIT "
"generation. It defaults to \"host\", meaning that it shall pick the "
"architecture of the machine where LLVM is being built. If you are cross-"
"compiling, set it to the target architecture name."
msgstr ""

#: ../../../CMake.rst:802
msgid ""
"Semicolon-separated list of targets to build, or *all* for building all "
"targets. Case-sensitive. Defaults to *all*. Example: ``-"
"DLLVM_TARGETS_TO_BUILD=\"X86;PowerPC\"``. The full list, as of March 2023, "
"is: ``AArch64;AMDGPU;ARM;AVR;BPF;Hexagon;Lanai;LoongArch;Mips;MSP430;NVPTX;"
"PowerPC;RISCV;Sparc;SystemZ;VE;WebAssembly;X86;XCore``"
msgstr ""

#: ../../../CMake.rst:810
msgid "**LLVM_TEMPORARILY_ALLOW_OLD_TOOLCHAIN**:BOOL"
msgstr "**LLVM_TEMPORARILY_ALLOW_OLD_TOOLCHAIN**:BOOL"

#: ../../../CMake.rst:809
msgid ""
"If enabled, the compiler version check will only warn when using a toolchain "
"which is about to be deprecated, instead of emitting an error."
msgstr ""

#: ../../../CMake.rst:815
msgid "**LLVM_UBSAN_FLAGS**:STRING"
msgstr "**LLVM_UBSAN_FLAGS**:STRING"

#: ../../../CMake.rst:813
msgid ""
"Defines the set of compile flags used to enable UBSan. Only used if "
"``LLVM_USE_SANITIZER`` contains ``Undefined``. This can be used to override "
"the default set of UBSan flags."
msgstr ""

#: ../../../CMake.rst:818
msgid "**LLVM_USE_INTEL_JITEVENTS**:BOOL"
msgstr "**LLVM_USE_INTEL_JITEVENTS**:BOOL"

#: ../../../CMake.rst:818
msgid "Enable building support for Intel JIT Events API. Defaults to OFF."
msgstr ""

#: ../../../CMake.rst:821
msgid ""
"Add ``-fuse-ld={name}`` to the link invocation. The possible value depend on "
"your compiler, for clang the value can be an absolute path to your custom "
"linker, otherwise clang will prefix the name with ``ld.`` and apply its "
"usual search. For example to link LLVM with the Gold linker, cmake can be "
"invoked with ``-DLLVM_USE_LINKER=gold``."
msgstr ""

#: ../../../CMake.rst:828
msgid "**LLVM_USE_OPROFILE**:BOOL"
msgstr "**LLVM_USE_OPROFILE**:BOOL"

#: ../../../CMake.rst:828
msgid "Enable building OProfile JIT support. Defaults to OFF."
msgstr ""

#: ../../../CMake.rst:831
msgid "**LLVM_USE_PERF**:BOOL"
msgstr "**LLVM_USE_PERF**:BOOL"

#: ../../../CMake.rst:831
msgid ""
"Enable building support for Perf (linux profiling tool) JIT support. "
"Defaults to OFF."
msgstr ""

#: ../../../CMake.rst:835
msgid "**LLVM_USE_RELATIVE_PATHS_IN_FILES**:BOOL"
msgstr "**LLVM_USE_RELATIVE_PATHS_IN_FILES**:BOOL"

#: ../../../CMake.rst:834
msgid ""
"Rewrite absolute source paths in sources and debug info to relative ones. "
"The source prefix can be adjusted via the LLVM_SOURCE_PREFIX variable."
msgstr ""

#: ../../../CMake.rst:839
msgid "**LLVM_USE_RELATIVE_PATHS_IN_DEBUG_INFO**:BOOL"
msgstr "**LLVM_USE_RELATIVE_PATHS_IN_DEBUG_INFO**:BOOL"

#: ../../../CMake.rst:838
msgid ""
"Rewrite absolute source paths in debug info to relative ones. The source "
"prefix can be adjusted via the LLVM_SOURCE_PREFIX variable."
msgstr ""

#: ../../../CMake.rst:844
msgid "**LLVM_USE_SANITIZER**:STRING"
msgstr "**LLVM_USE_SANITIZER**:STRING"

#: ../../../CMake.rst:842
msgid ""
"Define the sanitizer used to build LLVM binaries and tests. Possible values "
"are ``Address``, ``Memory``, ``MemoryWithOrigins``, ``Undefined``, "
"``Thread``, ``DataFlow``, and ``Address;Undefined``. Defaults to empty "
"string."
msgstr ""

#: ../../../CMake.rst:850
msgid "**LLVM_USE_SPLIT_DWARF**:BOOL"
msgstr "**LLVM_USE_SPLIT_DWARF**:BOOL"

#: ../../../CMake.rst:847
msgid ""
"If enabled CMake will pass ``-gsplit-dwarf`` to the compiler. This option "
"reduces link-time memory usage by reducing the amount of debug information "
"that the linker needs to resolve. It is recommended for platforms using the "
"ELF object format, like Linux systems when linker memory usage is too high."
msgstr ""

#: ../../../CMake.rst:855
msgid "**SPHINX_EXECUTABLE**:STRING"
msgstr "**SPHINX_EXECUTABLE**:STRING"

#: ../../../CMake.rst:853
msgid ""
"The path to the ``sphinx-build`` executable detected by CMake. For "
"installation instructions, see https://www.sphinx-doc.org/en/master/usage/"
"installation.html"
msgstr ""

#: ../../../CMake.rst:862
msgid "**SPHINX_OUTPUT_HTML**:BOOL"
msgstr "**SPHINX_OUTPUT_HTML**:BOOL"

#: ../../../CMake.rst:858
msgid ""
"If enabled (and ``LLVM_ENABLE_SPHINX`` is enabled) then the targets for "
"building the documentation as html are added (but not built by default "
"unless ``LLVM_BUILD_DOCS`` is enabled). There is a target for each project "
"in the source tree that uses sphinx (e.g.  ``docs-llvm-html``, ``docs-clang-"
"html`` and ``docs-lld-html``). Defaults to ON."
msgstr ""

#: ../../../CMake.rst:868
msgid "**SPHINX_OUTPUT_MAN**:BOOL"
msgstr "**SPHINX_OUTPUT_MAN**:BOOL"

#: ../../../CMake.rst:865
msgid ""
"If enabled (and ``LLVM_ENABLE_SPHINX`` is enabled) the targets for building "
"the man pages are added (but not built by default unless ``LLVM_BUILD_DOCS`` "
"is enabled). Currently the only target added is ``docs-llvm-man``. Defaults "
"to ON."
msgstr ""

#: ../../../CMake.rst:872
msgid "**SPHINX_WARNINGS_AS_ERRORS**:BOOL"
msgstr "**SPHINX_WARNINGS_AS_ERRORS**:BOOL"

#: ../../../CMake.rst:871
msgid ""
"If enabled then sphinx documentation warnings will be treated as errors. "
"Defaults to ON."
msgstr ""

#: ../../../CMake.rst:875
msgid "Advanced variables"
msgstr ""

#: ../../../CMake.rst:877
msgid ""
"These are niche, and changing them from their defaults is more likely to "
"cause things to go wrong.  They are also unstable across LLVM versions."
msgstr ""

#: ../../../CMake.rst:882
msgid "**LLVM_TOOLS_INSTALL_DIR**:STRING"
msgstr "**LLVM_TOOLS_INSTALL_DIR**:STRING"

#: ../../../CMake.rst:881
msgid ""
"The path to install the main LLVM tools, relative to the "
"*CMAKE_INSTALL_PREFIX*. Defaults to *CMAKE_INSTALL_BINDIR*."
msgstr ""

#: ../../../CMake.rst:887
msgid "**LLVM_UTILS_INSTALL_DIR**:STRING"
msgstr "**LLVM_UTILS_INSTALL_DIR**:STRING"

#: ../../../CMake.rst:885
msgid ""
"The path to install auxiliary LLVM utilities, relative to the "
"*CMAKE_INSTALL_PREFIX*. Only matters if *LLVM_INSTALL_UTILS* is enabled. "
"Defaults to *LLVM_TOOLS_INSTALL_DIR*."
msgstr ""

#: ../../../CMake.rst:892
msgid "**LLVM_EXAMPLES_INSTALL_DIR**:STRING"
msgstr "**LLVM_EXAMPLES_INSTALL_DIR**:STRING"

#: ../../../CMake.rst:890
msgid ""
"The path for examples of using LLVM, relative to the *CMAKE_INSTALL_PREFIX*. "
"Only matters if *LLVM_BUILD_EXAMPLES* is enabled. Defaults to \"examples\"."
msgstr ""

#: ../../../CMake.rst:895
msgid "CMake Caches"
msgstr ""

#: ../../../CMake.rst:897
msgid ""
"Recently LLVM and Clang have been adding some more complicated build system "
"features. Utilizing these new features often involves a complicated chain of "
"CMake variables passed on the command line. Clang provides a collection of "
"CMake cache scripts to make these features more approachable."
msgstr ""

#: ../../../CMake.rst:902
msgid "CMake cache files are utilized using CMake's -C flag:"
msgstr ""

#: ../../../CMake.rst:908
msgid ""
"CMake cache scripts are processed in an isolated scope, only cached "
"variables remain set when the main configuration runs. CMake cached "
"variables do not reset variables that are already set unless the FORCE "
"option is specified."
msgstr ""

#: ../../../CMake.rst:912
msgid "A few notes about CMake Caches:"
msgstr ""

#: ../../../CMake.rst:914
msgid "Order of command line arguments is important"
msgstr ""

#: ../../../CMake.rst:916
msgid ""
"-D arguments specified before -C are set before the cache is processed and "
"can be read inside the cache file"
msgstr ""

#: ../../../CMake.rst:918
msgid ""
"-D arguments specified after -C are set after the cache is processed and are "
"unset inside the cache file"
msgstr ""

#: ../../../CMake.rst:921
msgid "All -D arguments will override cache file settings"
msgstr ""

#: ../../../CMake.rst:922
msgid ""
"CMAKE_TOOLCHAIN_FILE is evaluated after both the cache file and the command "
"line arguments"
msgstr ""

#: ../../../CMake.rst:924
msgid "It is recommended that all -D options should be specified *before* -C"
msgstr ""

#: ../../../CMake.rst:926
msgid ""
"For more information about some of the advanced build configurations "
"supported via Cache files see :doc:`AdvancedBuilds`."
msgstr ""

#: ../../../CMake.rst:930
msgid "Executing the Tests"
msgstr ""

#: ../../../CMake.rst:932
msgid ""
"Testing is performed when the *check-all* target is built. For instance, if "
"you are using Makefiles, execute this command in the root of your build "
"directory:"
msgstr ""

#: ../../../CMake.rst:939
msgid ""
"On Visual Studio, you may run tests by building the project \"check-all\". "
"For more information about testing, see the :doc:`TestingGuide`."
msgstr ""

#: ../../../CMake.rst:943
msgid "Cross compiling"
msgstr ""

#: ../../../CMake.rst:945
msgid ""
"See `this wiki page <https://gitlab.kitware.com/cmake/community/wikis/doc/"
"cmake/CrossCompiling>`_ for generic instructions on how to cross-compile "
"with CMake. It goes into detailed explanations and may seem daunting, but it "
"is not. On the wiki page there are several examples including toolchain "
"files. Go directly to the ``Information how to set up various cross "
"compiling toolchains`` section for a quick solution."
msgstr ""

#: ../../../CMake.rst:952
msgid ""
"Also see the `LLVM-related variables`_ section for variables used when cross-"
"compiling."
msgstr ""

#: ../../../CMake.rst:956
msgid "Embedding LLVM in your project"
msgstr ""

#: ../../../CMake.rst:958
msgid ""
"From LLVM 3.5 onwards the CMake build system exports LLVM libraries as "
"importable CMake targets. This means that clients of LLVM can now reliably "
"use CMake to develop their own LLVM-based projects against an installed "
"version of LLVM regardless of how it was built."
msgstr ""

#: ../../../CMake.rst:963
msgid ""
"Here is a simple example of a CMakeLists.txt file that imports the LLVM "
"libraries and uses them to build a simple application ``simple-tool``."
msgstr ""

#: ../../../CMake.rst:995
msgid ""
"The ``find_package(...)`` directive when used in CONFIG mode (as in the "
"above example) will look for the ``LLVMConfig.cmake`` file in various "
"locations (see cmake manual for details).  It creates a ``LLVM_DIR`` cache "
"entry to save the directory where ``LLVMConfig.cmake`` is found or allows "
"the user to specify the directory (e.g. by passing ``-DLLVM_DIR=/usr/lib/"
"cmake/llvm`` to the ``cmake`` command or by setting it directly in "
"``ccmake`` or ``cmake-gui``)."
msgstr ""

#: ../../../CMake.rst:1002
msgid "This file is available in two different locations."
msgstr ""

#: ../../../CMake.rst:1004
msgid ""
"``<LLVM_INSTALL_PACKAGE_DIR>/LLVMConfig.cmake`` where "
"``<LLVM_INSTALL_PACKAGE_DIR>`` is the location where LLVM CMake modules are "
"installed as part of an installed version of LLVM. This is typically ``cmake/"
"llvm/`` within the lib directory. On Linux, this is typically ``/usr/lib/"
"cmake/llvm/LLVMConfig.cmake``."
msgstr ""

#: ../../../CMake.rst:1010
msgid ""
"``<LLVM_BUILD_ROOT>/lib/cmake/llvm/LLVMConfig.cmake`` where "
"``<LLVM_BUILD_ROOT>`` is the root of the LLVM build tree. **Note: this is "
"only available when building LLVM with CMake.**"
msgstr ""

#: ../../../CMake.rst:1014
msgid ""
"If LLVM is installed in your operating system's normal installation prefix "
"(e.g. on Linux this is usually ``/usr/``) ``find_package(LLVM ...)`` will "
"automatically find LLVM if it is installed correctly. If LLVM is not "
"installed or you wish to build directly against the LLVM build tree you can "
"use ``LLVM_DIR`` as previously mentioned."
msgstr ""

#: ../../../CMake.rst:1020
msgid ""
"The ``LLVMConfig.cmake`` file sets various useful variables. Notable "
"variables include"
msgstr ""

#: ../../../CMake.rst:1025
msgid "``LLVM_CMAKE_DIR``"
msgstr ""

#: ../../../CMake.rst:1024
msgid ""
"The path to the LLVM CMake directory (i.e. the directory containing "
"LLVMConfig.cmake)."
msgstr ""

#: ../../../CMake.rst:1028
msgid "``LLVM_DEFINITIONS``"
msgstr ""

#: ../../../CMake.rst:1028
msgid ""
"A list of preprocessor defines that should be used when building against "
"LLVM."
msgstr ""

#: ../../../CMake.rst:1031
msgid "``LLVM_ENABLE_ASSERTIONS``"
msgstr ""

#: ../../../CMake.rst:1031
msgid "This is set to ON if LLVM was built with assertions, otherwise OFF."
msgstr ""

#: ../../../CMake.rst:1035
msgid "``LLVM_ENABLE_EH``"
msgstr ""

#: ../../../CMake.rst:1034
msgid ""
"This is set to ON if LLVM was built with exception handling (EH) enabled, "
"otherwise OFF."
msgstr ""

#: ../../../CMake.rst:1039
msgid "``LLVM_ENABLE_RTTI``"
msgstr ""

#: ../../../CMake.rst:1038
msgid ""
"This is set to ON if LLVM was built with run time type information (RTTI), "
"otherwise OFF."
msgstr ""

#: ../../../CMake.rst:1042
msgid "``LLVM_INCLUDE_DIRS``"
msgstr ""

#: ../../../CMake.rst:1042
msgid "A list of include paths to directories containing LLVM header files."
msgstr ""

#: ../../../CMake.rst:1046
msgid "``LLVM_PACKAGE_VERSION``"
msgstr ""

#: ../../../CMake.rst:1045
msgid ""
"The LLVM version. This string can be used with CMake conditionals, e.g., "
"``if (${LLVM_PACKAGE_VERSION} VERSION_LESS \"3.5\")``."
msgstr ""

#: ../../../CMake.rst:1049
msgid "``LLVM_TOOLS_BINARY_DIR``"
msgstr ""

#: ../../../CMake.rst:1049
msgid "The path to the directory containing the LLVM tools (e.g. ``llvm-as``)."
msgstr ""

#: ../../../CMake.rst:1051
msgid ""
"Notice that in the above example we link ``simple-tool`` against several "
"LLVM libraries. The list of libraries is determined by using the "
"``llvm_map_components_to_libnames()`` CMake function. For a list of "
"available components look at the output of running ``llvm-config --"
"components``."
msgstr ""

#: ../../../CMake.rst:1056
msgid ""
"Note that for LLVM < 3.5 ``llvm_map_components_to_libraries()`` was used "
"instead of ``llvm_map_components_to_libnames()``. This is now deprecated and "
"will be removed in a future version of LLVM."
msgstr ""

#: ../../../CMake.rst:1063
msgid "Developing LLVM passes out of source"
msgstr ""

#: ../../../CMake.rst:1065
msgid ""
"It is possible to develop LLVM passes out of LLVM's source tree (i.e. "
"against an installed or built LLVM). An example of a project layout is "
"provided below."
msgstr ""

#: ../../../CMake.rst:1079
msgid "Contents of ``<project dir>/CMakeLists.txt``:"
msgstr ""

#: ../../../CMake.rst:1091
msgid "Contents of ``<project dir>/<pass name>/CMakeLists.txt``:"
msgstr ""

#: ../../../CMake.rst:1097
msgid ""
"Note if you intend for this pass to be merged into the LLVM source tree at "
"some point in the future it might make more sense to use LLVM's internal "
"``add_llvm_library`` function with the MODULE argument instead by..."
msgstr ""

#: ../../../CMake.rst:1102
msgid ""
"Adding the following to ``<project dir>/CMakeLists.txt`` (after "
"``find_package(LLVM ...)``)"
msgstr ""

#: ../../../CMake.rst:1110
msgid "And then changing ``<project dir>/<pass name>/CMakeLists.txt`` to"
msgstr ""

#: ../../../CMake.rst:1118
msgid ""
"When you are done developing your pass, you may wish to integrate it into "
"the LLVM source tree. You can achieve it in two easy steps:"
msgstr ""

#: ../../../CMake.rst:1121
msgid ""
"Copying ``<pass name>`` folder into ``<LLVM root>/lib/Transforms`` directory."
msgstr ""

#: ../../../CMake.rst:1123
msgid ""
"Adding ``add_subdirectory(<pass name>)`` line into ``<LLVM root>/lib/"
"Transforms/CMakeLists.txt``."
msgstr ""

#: ../../../CMake.rst:1127
msgid "Compiler/Platform-specific topics"
msgstr ""

#: ../../../CMake.rst:1129
msgid "Notes for specific compilers and/or platforms."
msgstr ""

#: ../../../CMake.rst:1132
msgid "Windows"
msgstr ""

#: ../../../CMake.rst:1137
msgid "**LLVM_COMPILER_JOBS**:STRING"
msgstr "**LLVM_COMPILER_JOBS**:STRING"

#: ../../../CMake.rst:1135
msgid ""
"Specifies the maximum number of parallel compiler jobs to use per project "
"when building with msbuild or Visual Studio. Only supported for the Visual "
"Studio 2010 CMake generator. 0 means use all processors. Default is 0."
msgstr ""

#: ../../../CMake.rst:1151
msgid "**CMAKE_MT**:STRING"
msgstr "**CMAKE_MT**:STRING"

#: ../../../CMake.rst:1140
msgid ""
"When compiling with clang-cl, recent CMake versions will default to "
"selecting `llvm-mt` as the Manifest Tool instead of Microsoft's `mt.exe`. "
"This will often cause errors like:"
msgstr ""

#: ../../../CMake.rst:1152
msgid "To work around this error, set `CMAKE_MT=mt`."
msgstr ""
