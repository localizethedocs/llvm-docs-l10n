# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../ScudoHardenedAllocator.rst:3
msgid "Scudo Hardened Allocator"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:10
msgid "Introduction"
msgstr "簡介"

#: ../../../ScudoHardenedAllocator.rst:12
msgid ""
"The Scudo Hardened Allocator is a user-mode allocator based on LLVM "
"Sanitizer's CombinedAllocator, which aims at providing additional "
"mitigations against heap based vulnerabilities, while maintaining good "
"performance."
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:16
msgid ""
"The name \"Scudo\" has been retained from the initial implementation (Escudo "
"meaning Shield in Spanish and Portuguese)."
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:20
msgid "Design"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:23
msgid "Chunk Header"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:24
msgid ""
"Every chunk of heap memory will be preceded by a chunk header. This has two "
"purposes, the first one being to store various information about the chunk, "
"the second one being to detect potential heap overflows. In order to achieve "
"this, the header will be checksumed, involving the pointer to the chunk "
"itself and a global secret. Any corruption of the header will be detected "
"when said header is accessed, and the process terminated."
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:31
msgid "The following information is stored in the header:"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:33
msgid "the 16-bit checksum;"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:34
msgid ""
"the user requested size for that chunk, which is necessary for reallocation "
"purposes;"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:36
msgid "the state of the chunk (available, allocated or quarantined);"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:37
msgid ""
"the allocation type (malloc, new, new[] or memalign), to detect potential "
"mismatches in the allocation APIs used;"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:39
msgid ""
"whether or not the chunk is offseted (ie: if the chunk beginning is "
"different than the backend allocation beginning, which is most often the "
"case with some aligned allocations);"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:42
msgid "the associated offset;"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:43
msgid "a 16-bit salt."
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:45
msgid ""
"On x64, which is currently the only architecture supported, the header fits "
"within 16-bytes, which works nicely with the minimum alignment requirements."
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:48
msgid ""
"The checksum is computed as a CRC32 (requiring the SSE 4.2 instruction set) "
"of the global secret, the chunk pointer itself, and the 16 bytes of header "
"with the checksum field zeroed out."
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:52
msgid ""
"The header is atomically loaded and stored to prevent races (this requires "
"platform support such as the cmpxchg16b instruction). This is important as "
"two consecutive chunks could belong to different threads. We also want to "
"avoid any type of double fetches of information located in the header, and "
"use local copies of the header for this purpose."
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:59
msgid "Delayed Freelist"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:60
msgid ""
"A delayed freelist allows us to not return a chunk directly to the backend, "
"but to keep it aside for a while. Once a criterion is met, the delayed "
"freelist is emptied, and the quarantined chunks are returned to the backend. "
"This helps mitigate use-after-free vulnerabilities by reducing the "
"determinism of the allocation and deallocation patterns."
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:66
msgid ""
"This feature is using the Sanitizer's Quarantine as its base, and the amount "
"of memory that it can hold is configurable by the user (see the Options "
"section below)."
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:71
msgid "Randomness"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:72
msgid ""
"It is important for the allocator to not make use of fixed addresses. We use "
"the dynamic base option for the SizeClassAllocator, allowing us to benefit "
"from the randomness of mmap."
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:77
msgid "Usage"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:80
msgid "Library"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:81
msgid ""
"The allocator static library can be built from the LLVM build tree thanks to "
"the ``scudo`` CMake rule. The associated tests can be exercised thanks to "
"the ``check-scudo`` CMake rule."
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:85
msgid ""
"Linking the static library to your project can require the use of the "
"``whole-archive`` linker flag (or equivalent), depending on your linker. "
"Additional flags might also be necessary."
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:89
msgid ""
"Your linked binary should now make use of the Scudo allocation and "
"deallocation functions."
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:92
msgid "You may also build Scudo like this:"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:101
msgid "and then use it with existing binaries as follows:"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:108
msgid "Options"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:109
msgid ""
"Several aspects of the allocator can be configured through the following "
"ways:"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:111
msgid ""
"by defining a ``__scudo_default_options`` function in one's program that "
"returns the options string to be parsed. Said function must have the "
"following prototype: ``extern \"C\" const char* __scudo_default_options()``."
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:115
msgid ""
"through the environment variable SCUDO_OPTIONS, containing the options "
"string to be parsed. Options defined this way will override any definition "
"made through ``__scudo_default_options``;"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:119
msgid ""
"The options string follows a syntax similar to ASan, where distinct options "
"can be assigned in the same string, separated by colons."
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:122
msgid "For example, using the environment variable:"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:128
msgid "Or using the function:"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:137
msgid "The following options are available:"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:140
msgid "Option"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:140
msgid "Default"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:140
msgid "Description"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:142
msgid "QuarantineSizeMb"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:142
msgid "64"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:142
msgid ""
"The size (in Mb) of quarantine used to delay the actual deallocation of "
"chunks. Lower value may reduce memory usage but decrease the effectiveness "
"of the mitigation; a negative value will fallback to a default of 64Mb."
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:148
msgid "ThreadLocalQuarantineSizeKb"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:148
msgid "1024"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:148
msgid ""
"The size (in Kb) of per-thread cache use to offload the global quarantine. "
"Lower value may reduce memory usage but might increase contention on the "
"global quarantine."
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:153
msgid "DeallocationTypeMismatch"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:153
#: ../../../ScudoHardenedAllocator.rst:156
msgid "true"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:153
msgid ""
"Whether or not we report errors on malloc/delete, new/free, new/delete[], "
"etc."
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:156
msgid "DeleteSizeMismatch"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:156
msgid ""
"Whether or not we report errors on mismatch between sizes of new and delete."
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:159
msgid "ZeroContents"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:159
msgid "false"
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:159
msgid "Whether or not we zero chunk contents on allocation and deallocation."
msgstr ""

#: ../../../ScudoHardenedAllocator.rst:163
msgid ""
"Allocator related common Sanitizer options can also be passed through Scudo "
"options, such as ``allocator_may_return_null``. A detailed list including "
"those can be found here: https://github.com/google/sanitizers/wiki/"
"SanitizerCommonFlags."
msgstr ""
