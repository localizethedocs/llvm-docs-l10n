# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../Remarks.rst:3
msgid "Remarks"
msgstr ""

#: ../../../Remarks.rst:9
msgid "Introduction to the LLVM remark diagnostics"
msgstr ""

#: ../../../Remarks.rst:11
msgid ""
"LLVM is able to emit diagnostics from passes describing whether an "
"optimization has been performed or missed for a particular reason, which "
"should give more insight to users about what the compiler did during the "
"compilation pipeline."
msgstr ""

#: ../../../Remarks.rst:15
msgid "There are three main remark types:"
msgstr ""

#: ../../../Remarks.rst:17
msgid "``Passed``"
msgstr ""

#: ../../../Remarks.rst:19
msgid ""
"Remarks that describe a successful optimization performed by the compiler."
msgstr ""

#: ../../../Remarks.rst:0
msgid "Example"
msgstr ""

#: ../../../Remarks.rst:27
msgid "``Missed``"
msgstr ""

#: ../../../Remarks.rst:29
msgid ""
"Remarks that describe an attempt to an optimization by the compiler that "
"could not be performed."
msgstr ""

#: ../../../Remarks.rst:39
msgid "``Analysis``"
msgstr ""

#: ../../../Remarks.rst:41
msgid ""
"Remarks that describe the result of an analysis, that can bring more "
"information to the user regarding the generated code."
msgstr ""

#: ../../../Remarks.rst:55
msgid "Enabling optimization remarks"
msgstr ""

#: ../../../Remarks.rst:57
msgid ""
"There are two modes that are supported for enabling optimization remarks in "
"LLVM: through remark diagnostics, or through serialized remarks."
msgstr ""

#: ../../../Remarks.rst:61
msgid "Remark diagnostics"
msgstr ""

#: ../../../Remarks.rst:63
msgid ""
"Optimization remarks can be emitted as diagnostics. These diagnostics will "
"be propagated to front-ends if desired, or emitted by tools like :doc:`llc "
"<CommandGuide/llc>` or :doc:`opt <CommandGuide/opt>`."
msgstr ""

#: ../../../Remarks.rst:69
msgid ""
"Enables optimization remarks from passes whose name match the given (POSIX) "
"regular expression."
msgstr ""

#: ../../../Remarks.rst:74
msgid ""
"Enables missed optimization remarks from passes whose name match the given "
"(POSIX) regular expression."
msgstr ""

#: ../../../Remarks.rst:79
msgid ""
"Enables optimization analysis remarks from passes whose name match the given "
"(POSIX) regular expression."
msgstr ""

#: ../../../Remarks.rst:83
msgid "Serialized remarks"
msgstr ""

#: ../../../Remarks.rst:85
msgid ""
"While diagnostics are useful during development, it is often more useful to "
"refer to optimization remarks post-compilation, typically during performance "
"analysis."
msgstr ""

#: ../../../Remarks.rst:89
msgid ""
"For that, LLVM can serialize the remarks produced for each compilation unit "
"to a file that can be consumed later."
msgstr ""

#: ../../../Remarks.rst:92
msgid ""
"By default, the format of the serialized remarks is :ref:`YAML "
"<yamlremarks>`, and it can be accompanied by a :ref:`section "
"<remarkssection>` in the object files to easily retrieve it."
msgstr ""

#: ../../../Remarks.rst:96
msgid ""
":doc:`llc <CommandGuide/llc>` and :doc:`opt <CommandGuide/opt>` support the "
"following options:"
msgstr ""

#: ../../../Remarks.rst:100
msgid "``Basic options``"
msgstr ""

#: ../../../Remarks.rst:104
msgid "Enables the serialization of remarks to a file specified in <filename>."
msgstr ""

#: ../../../Remarks.rst:106
msgid "By default, the output is serialized to :ref:`YAML <yamlremarks>`."
msgstr ""

#: ../../../Remarks.rst:110
msgid "Specifies the output format of the serialized remarks."
msgstr ""

#: ../../../Remarks.rst:112
msgid "Supported formats:"
msgstr ""

#: ../../../Remarks.rst:114
msgid ":ref:`yaml <yamlremarks>` (default)"
msgstr ""

#: ../../../Remarks.rst:116
msgid "``Content configuration``"
msgstr ""

#: ../../../Remarks.rst:120
msgid ""
"Only passes whose name match the given (POSIX) regular expression will be "
"serialized to the final output."
msgstr ""

#: ../../../Remarks.rst:125
msgid "With PGO, include profile count in optimization remarks."
msgstr ""

#: ../../../Remarks.rst:129
msgid ""
"The minimum profile count required for an optimization remark to be emitted."
msgstr ""

#: ../../../Remarks.rst:132
msgid "Other tools that support remarks:"
msgstr ""

#: ../../../Remarks.rst:134
msgid ":program:`llvm-lto`"
msgstr ""

#: ../../../Remarks.rst:142
msgid ":program:`gold-plugin` and :program:`lld`"
msgstr ""

#: ../../../Remarks.rst:152
msgid "YAML remarks"
msgstr ""

#: ../../../Remarks.rst:154
msgid "A typical remark serialized to YAML looks like this:"
msgstr ""

#: ../../../Remarks.rst:168
msgid "The following entries are mandatory:"
msgstr ""

#: ../../../Remarks.rst:170
msgid ""
"``<TYPE>``: can be ``Passed``, ``Missed``, ``Analysis``, "
"``AnalysisFPCommute``, ``AnalysisAliasing``, ``Failure``."
msgstr ""

#: ../../../Remarks.rst:172
msgid "``<pass>``: the name of the pass that emitted this remark."
msgstr ""

#: ../../../Remarks.rst:173
msgid "``<name>``: the name of the remark coming from ``<pass>``."
msgstr ""

#: ../../../Remarks.rst:174
msgid "``<function>``: the mangled name of the function."
msgstr ""

#: ../../../Remarks.rst:176
msgid ""
"If a ``DebugLoc`` entry is specified, the following fields are required:"
msgstr ""

#: ../../../Remarks.rst:178
msgid "``<file>``"
msgstr ""

#: ../../../Remarks.rst:179
msgid "``<line>``"
msgstr ""

#: ../../../Remarks.rst:180
msgid "``<column>``"
msgstr ""

#: ../../../Remarks.rst:182
msgid "If an ``arg`` entry is specified, the following fields are required:"
msgstr ""

#: ../../../Remarks.rst:184
msgid "``<key>``"
msgstr ""

#: ../../../Remarks.rst:185
msgid "``<value>``"
msgstr ""

#: ../../../Remarks.rst:187
msgid ""
"If a ``DebugLoc`` entry is specified within an ``arg`` entry, the following "
"fields are required:"
msgstr ""

#: ../../../Remarks.rst:190
msgid "``<arg-file>``"
msgstr ""

#: ../../../Remarks.rst:191
msgid "``<arg-line>``"
msgstr ""

#: ../../../Remarks.rst:192
msgid "``<arg-column>``"
msgstr ""

#: ../../../Remarks.rst:195
msgid "opt-viewer"
msgstr ""

#: ../../../Remarks.rst:197
msgid ""
"The ``opt-viewer`` directory contains a collection of tools that visualize "
"and summarize serialized remarks."
msgstr ""

#: ../../../Remarks.rst:203
msgid "opt-viewer.py"
msgstr ""

#: ../../../Remarks.rst:205
msgid ""
"Output a HTML page which gives visual feedback on compiler interactions with "
"your program."
msgstr ""

#: ../../../Remarks.rst:0
msgid "Examples"
msgstr ""

#: ../../../Remarks.rst:220
msgid "opt-stats.py"
msgstr ""

#: ../../../Remarks.rst:222
msgid "Output statistics about the optimization remarks in the input set."
msgstr ""

#: ../../../Remarks.rst:244
msgid "opt-diff.py"
msgstr ""

#: ../../../Remarks.rst:246
msgid ""
"Produce a new YAML file which contains all of the changes in optimizations "
"between two YAML files."
msgstr ""

#: ../../../Remarks.rst:249
msgid "Typically, this tool should be used to do diffs between:"
msgstr ""

#: ../../../Remarks.rst:251
msgid "new compiler + fixed source vs old compiler + fixed source"
msgstr ""

#: ../../../Remarks.rst:252
msgid "fixed compiler + new source vs fixed compiler + old source"
msgstr ""

#: ../../../Remarks.rst:254
msgid ""
"This diff file can be displayed using :ref:`opt-viewer.py <optviewerpy>`."
msgstr ""

#: ../../../Remarks.rst:266
msgid "Emitting remark diagnostics in the object file"
msgstr ""

#: ../../../Remarks.rst:268
msgid ""
"A section containing metadata on remark diagnostics will be emitted when -"
"remarks-section is passed. The section contains:"
msgstr ""

#: ../../../Remarks.rst:271
msgid "a magic number: \"REMARKS\\\\0\""
msgstr ""

#: ../../../Remarks.rst:272
msgid "the version number: a little-endian uint64_t"
msgstr ""

#: ../../../Remarks.rst:273
msgid ""
"the total size of the string table (the size itself excluded): little-endian "
"uint64_t"
msgstr ""

#: ../../../Remarks.rst:275
msgid "a list of null-terminated strings"
msgstr ""

#: ../../../Remarks.rst:276
msgid ""
"the absolute file path to the serialized remark diagnostics: a null-"
"terminated string."
msgstr ""

#: ../../../Remarks.rst:279
msgid "The section is named:"
msgstr ""

#: ../../../Remarks.rst:281
msgid "``__LLVM,__remarks`` (MachO)"
msgstr ""

#: ../../../Remarks.rst:282
msgid "``.remarks`` (ELF)"
msgstr ""

#: ../../../Remarks.rst:285
msgid "C API"
msgstr ""

#: ../../../Remarks.rst:287
msgid ""
"LLVM provides a library that can be used to parse remarks through a shared "
"library named ``libRemarks``."
msgstr ""

#: ../../../Remarks.rst:290
msgid "The typical usage through the C API is like the following:"
msgstr ""
