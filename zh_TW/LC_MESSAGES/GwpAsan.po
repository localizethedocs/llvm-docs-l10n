# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:12+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../GwpAsan.rst:3
msgid "GWP-ASan"
msgstr ""

#: ../../../GwpAsan.rst:10
msgid "Introduction"
msgstr "簡介"

#: ../../../GwpAsan.rst:12
msgid ""
"GWP-ASan is a sampled allocator framework that assists in finding use-after-"
"free and heap-buffer-overflow bugs in production environments. It informally "
"is a recursive acronym, \"**G**\\WP-ASan **W**\\ill **P**\\rovide "
"**A**\\llocation **SAN**\\ity\"."
msgstr ""

#: ../../../GwpAsan.rst:17
msgid ""
"GWP-ASan is based on the classic `Electric Fence Malloc Debugger <https://"
"linux.die.net/man/3/efence>`_, with a key adaptation. Notably, we only "
"choose a very small percentage of allocations to sample, and apply guard "
"pages to these sampled allocations only. The sampling is small enough to "
"allow us to have very low performance overhead."
msgstr ""

#: ../../../GwpAsan.rst:23
msgid ""
"There is a small, tunable memory overhead that is fixed for the lifetime of "
"the process. This is approximately ~40KiB per process using the default "
"settings, depending on the average size of your allocations."
msgstr ""

#: ../../../GwpAsan.rst:28
msgid "GWP-ASan vs. ASan"
msgstr ""

#: ../../../GwpAsan.rst:30
msgid ""
"Unlike `AddressSanitizer <https://clang.llvm.org/docs/AddressSanitizer."
"html>`_, GWP-ASan does not induce a significant performance overhead. ASan "
"often requires the use of dedicated canaries to be viable in production "
"environments, and as such is often impractical."
msgstr ""

#: ../../../GwpAsan.rst:35
msgid ""
"GWP-ASan is only capable of finding a subset of the memory issues detected "
"by ASan. Furthermore, GWP-ASan's bug detection capabilities are only "
"probabilistic. As such, we recommend using ASan over GWP-ASan in testing, as "
"well as anywhere else that guaranteed error detection is more valuable than "
"the 2x execution slowdown/binary size bloat. For the majority of production "
"environments, this impact is too high, and GWP-ASan proves extremely useful."
msgstr ""

#: ../../../GwpAsan.rst:43
msgid "Design"
msgstr ""

#: ../../../GwpAsan.rst:45
msgid ""
"**Please note:** The implementation of GWP-ASan is largely in-flux, and "
"these details are subject to change. There are currently other "
"implementations of GWP-ASan, such as the implementation featured in "
"`Chromium <https://cs.chromium.org/chromium/src/components/gwp_asan/>`_. The "
"long-term support goal is to ensure feature-parity where reasonable, and to "
"support compiler-rt as the reference implementation."
msgstr ""

#: ../../../GwpAsan.rst:53
msgid "Allocator Support"
msgstr ""

#: ../../../GwpAsan.rst:55
msgid ""
"GWP-ASan is not a replacement for a traditional allocator. Instead, it works "
"by inserting stubs into a supporting allocator to redirect allocations to "
"GWP-ASan when they're chosen to be sampled. These stubs are generally "
"implemented in the implementation of ``malloc()``, ``free()`` and "
"``realloc()``. The stubs are extremely small, which makes using GWP-ASan in "
"most allocators fairly trivial. The stubs follow the same general pattern "
"(example ``malloc()`` pseudocode below):"
msgstr ""

#: ../../../GwpAsan.rst:78
msgid ""
"Then, all the supporting allocator needs to do is compile with ``-"
"DINSTALL_GWP_ASAN_STUBS`` and link against the GWP-ASan library! For "
"performance reasons, we strongly recommend static linkage of the GWP-ASan "
"library."
msgstr ""

#: ../../../GwpAsan.rst:84
msgid "Guarded Allocation Pool"
msgstr ""

#: ../../../GwpAsan.rst:86
msgid ""
"The core of GWP-ASan is the guarded allocation pool. Each sampled allocation "
"is backed using its own *guarded* slot, which may consist of one or more "
"accessible pages. Each guarded slot is surrounded by two *guard* pages, "
"which are mapped as inaccessible. The collection of all guarded slots makes "
"up the *guarded allocation pool*."
msgstr ""

#: ../../../GwpAsan.rst:93
msgid "Buffer Underflow/Overflow Detection"
msgstr ""

#: ../../../GwpAsan.rst:95
msgid ""
"We gain buffer-overflow and buffer-underflow detection through these guard "
"pages. When a memory access overruns the allocated buffer, it will touch the "
"inaccessible guard page, causing memory exception. This exception is caught "
"and handled by the internal crash handler. Because each allocation is "
"recorded with metadata about where (and by what thread) it was allocated and "
"deallocated, we can provide information that will help identify the root "
"cause of the bug."
msgstr ""

#: ../../../GwpAsan.rst:102
msgid ""
"Allocations are randomly selected to be either left- or right-aligned to "
"provide equal detection of both underflows and overflows."
msgstr ""

#: ../../../GwpAsan.rst:106
msgid "Use after Free Detection"
msgstr ""

#: ../../../GwpAsan.rst:108
msgid ""
"The guarded allocation pool also provides use-after-free detection. Whenever "
"a sampled allocation is deallocated, we map its guarded slot as "
"inaccessible. Any memory accesses after deallocation will thus trigger the "
"crash handler, and we can provide useful information about the source of the "
"error."
msgstr ""

#: ../../../GwpAsan.rst:113
msgid ""
"Please note that the use-after-free detection for a sampled allocation is "
"transient. To keep memory overhead fixed while still detecting bugs, "
"deallocated slots are randomly reused to guard future allocations."
msgstr ""

#: ../../../GwpAsan.rst:118
msgid "Usage"
msgstr ""

#: ../../../GwpAsan.rst:120
msgid ""
"GWP-ASan already ships by default in the `Scudo Hardened Allocator <https://"
"llvm.org/docs/ScudoHardenedAllocator.html>`_, so building with ``-"
"fsanitize=scudo`` is the quickest and easiest way to try out GWP-ASan."
msgstr ""

#: ../../../GwpAsan.rst:126
msgid "Options"
msgstr ""

#: ../../../GwpAsan.rst:128
msgid ""
"GWP-ASan's configuration is managed by the supporting allocator. We provide "
"a generic configuration management library that is used by Scudo. It allows "
"several aspects of GWP-ASan to be configured through the following methods:"
msgstr ""

#: ../../../GwpAsan.rst:132
msgid ""
"When the GWP-ASan library is compiled, by setting ``-"
"DGWP_ASAN_DEFAULT_OPTIONS`` to the options string you want set by default. "
"If you're building GWP-ASan as part of a compiler-rt/LLVM build, add it "
"during cmake configure time (e.g. ``cmake ... -"
"DGWP_ASAN_DEFAULT_OPTIONS=\"...\"``). If you're building GWP-ASan outside of "
"compiler-rt, simply ensure that you specify ``-"
"DGWP_ASAN_DEFAULT_OPTIONS=\"...\"`` when building ``optional/options_parser."
"cpp``)."
msgstr ""

#: ../../../GwpAsan.rst:140
msgid ""
"By defining a ``__gwp_asan_default_options`` function in one's program that "
"returns the options string to be parsed. Said function must have the "
"following prototype: ``extern \"C\" const char* "
"__gwp_asan_default_options(void)``, with a default visibility. This will "
"override the compile time define;"
msgstr ""

#: ../../../GwpAsan.rst:145
msgid ""
"Depending on allocator support (Scudo has support for this mechanism): "
"Through the environment variable ``GWP_ASAN_OPTIONS``, containing the "
"options string to be parsed. Options defined this way will override any "
"definition made through ``__gwp_asan_default_options``."
msgstr ""

#: ../../../GwpAsan.rst:150
msgid ""
"The options string follows a syntax similar to ASan, where distinct options "
"can be assigned in the same string, separated by colons."
msgstr ""

#: ../../../GwpAsan.rst:153
msgid "For example, using the environment variable:"
msgstr ""

#: ../../../GwpAsan.rst:159
msgid "Or using the function:"
msgstr ""

#: ../../../GwpAsan.rst:167
msgid "The following options are available:"
msgstr ""

#: ../../../GwpAsan.rst:170
msgid "Option"
msgstr ""

#: ../../../GwpAsan.rst:170
msgid "Default"
msgstr ""

#: ../../../GwpAsan.rst:170
msgid "Description"
msgstr ""

#: ../../../GwpAsan.rst:172
msgid "Enabled"
msgstr ""

#: ../../../GwpAsan.rst:172 ../../../GwpAsan.rst:186
msgid "true"
msgstr ""

#: ../../../GwpAsan.rst:172
msgid "Is GWP-ASan enabled?"
msgstr ""

#: ../../../GwpAsan.rst:174
msgid "PerfectlyRightAlign"
msgstr ""

#: ../../../GwpAsan.rst:174
msgid "false"
msgstr ""

#: ../../../GwpAsan.rst:174
msgid ""
"When allocations are right-aligned, should we perfectly align them up to the "
"page boundary? By default (false), we round up allocation size to the "
"nearest power of two (2, 4, 8, 16) up to a maximum of 16-byte alignment for "
"performance reasons. Setting this to true can find single byte buffer-"
"overflows at the cost of performance, and may be incompatible with some "
"architectures."
msgstr ""

#: ../../../GwpAsan.rst:181
msgid "MaxSimultaneousAllocations"
msgstr ""

#: ../../../GwpAsan.rst:181
msgid "16"
msgstr ""

#: ../../../GwpAsan.rst:181
msgid "Number of simultaneously-guarded allocations available in the pool."
msgstr ""

#: ../../../GwpAsan.rst:183
msgid "SampleRate"
msgstr ""

#: ../../../GwpAsan.rst:183
msgid "5000"
msgstr ""

#: ../../../GwpAsan.rst:183
msgid ""
"The probability (1 / SampleRate) that a page is selected for GWP-ASan "
"sampling. Sample rates up to (2^31 - 1) are supported."
msgstr ""

#: ../../../GwpAsan.rst:186
msgid "InstallSignalHandlers"
msgstr ""

#: ../../../GwpAsan.rst:186
msgid ""
"Install GWP-ASan signal handlers for SIGSEGV during dynamic loading. This "
"allows better error reports by providing stack traces for allocation and "
"deallocation when reporting a memory error. GWP-ASan's signal handler will "
"forward the signal to any previously-installed handler, and user programs "
"that install further signal handlers should make sure they do the same. "
"Note, if the previously installed SIGSEGV handler is SIG_IGN, we terminate "
"the process after dumping the error report."
msgstr ""

#: ../../../GwpAsan.rst:196
msgid "Example"
msgstr ""

#: ../../../GwpAsan.rst:198
msgid ""
"The below code has a use-after-free bug, where the ``string_view`` is "
"created as a reference to the temporary result of the ``string+`` operator. "
"The use-after-free occurs when ``sv`` is dereferenced on line 8."
msgstr ""

#: ../../../GwpAsan.rst:214
msgid ""
"Compiling this code with Scudo+GWP-ASan will probabilistically catch this "
"bug and provide us a detailed error report:"
msgstr ""

#: ../../../GwpAsan.rst:247
msgid ""
"To symbolize these stack traces, some care has to be taken. Scudo currently "
"uses GNU's ``backtrace_symbols()`` from ``<execinfo.h>`` to unwind. The "
"unwinder provides human-readable stack traces in ``function+offset`` form, "
"rather than the normal ``binary+offset`` form. In order to use addr2line or "
"similar tools to recover the exact line number, we must convert the "
"``function+offset`` to ``binary+offset``. A helper script is available at "
"``compiler-rt/lib/gwp_asan/scripts/symbolize.sh``. Using this script will "
"attempt to symbolize each possible line, falling back to the previous output "
"if anything fails. This results in the following output:"
msgstr ""
