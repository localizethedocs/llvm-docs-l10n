# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../Extensions.rst:3
msgid "LLVM Extensions"
msgstr ""

#: ../../../Extensions.rst:12
msgid "Introduction"
msgstr "簡介"

#: ../../../Extensions.rst:14
msgid ""
"This document describes extensions to tools and formats LLVM seeks "
"compatibility with."
msgstr ""

#: ../../../Extensions.rst:18
msgid "General Assembly Syntax"
msgstr ""

#: ../../../Extensions.rst:21
msgid "C99-style Hexadecimal Floating-point Constants"
msgstr ""

#: ../../../Extensions.rst:23
msgid ""
"LLVM's assemblers allow floating-point constants to be written in C99's "
"hexadecimal format instead of decimal if desired."
msgstr ""

#: ../../../Extensions.rst:32
msgid "Machine-specific Assembly Syntax"
msgstr ""

#: ../../../Extensions.rst:35
msgid "X86/COFF-Dependent"
msgstr ""

#: ../../../Extensions.rst:38 ../../../Extensions.rst:189
#: ../../../Extensions.rst:472
msgid "Relocations"
msgstr ""

#: ../../../Extensions.rst:40
msgid "The following additional relocation types are supported:"
msgstr ""

#: ../../../Extensions.rst:42
msgid ""
"**@IMGREL** (AT&T syntax only) generates an image-relative relocation that "
"corresponds to the COFF relocation types ``IMAGE_REL_I386_DIR32NB`` (32-bit) "
"or ``IMAGE_REL_AMD64_ADDR32NB`` (64-bit)."
msgstr ""

#: ../../../Extensions.rst:57
msgid ""
"**.secrel32** generates a relocation that corresponds to the COFF relocation "
"types ``IMAGE_REL_I386_SECREL`` (32-bit) or ``IMAGE_REL_AMD64_SECREL`` (64-"
"bit)."
msgstr ""

#: ../../../Extensions.rst:60
msgid ""
"**.secidx** relocation generates an index of the section that contains the "
"target.  It corresponds to the COFF relocation types "
"``IMAGE_REL_I386_SECTION`` (32-bit) or ``IMAGE_REL_AMD64_SECTION`` (64-bit)."
msgstr ""

#: ../../../Extensions.rst:75
msgid "``.linkonce`` Directive"
msgstr ""

#: ../../../Extensions.rst:77 ../../../Extensions.rst:404
#: ../../../Extensions.rst:411 ../../../Extensions.rst:420
#: ../../../Extensions.rst:430 ../../../Extensions.rst:435
#: ../../../Extensions.rst:440 ../../../Extensions.rst:447
#: ../../../Extensions.rst:458 ../../../Extensions.rst:463
msgid "Syntax:"
msgstr ""

#: ../../../Extensions.rst:79
msgid "``.linkonce [ comdat type ]``"
msgstr ""

#: ../../../Extensions.rst:81
msgid "Supported COMDAT types:"
msgstr ""

#: ../../../Extensions.rst:85
msgid "``discard``"
msgstr ""

#: ../../../Extensions.rst:84
msgid ""
"Discards duplicate sections with the same COMDAT symbol. This is the default "
"if no type is specified."
msgstr ""

#: ../../../Extensions.rst:88
msgid "``one_only``"
msgstr ""

#: ../../../Extensions.rst:88
msgid "If the symbol is defined multiple times, the linker issues an error."
msgstr ""

#: ../../../Extensions.rst:92
msgid "``same_size``"
msgstr ""

#: ../../../Extensions.rst:91
msgid ""
"Duplicates are discarded, but the linker issues an error if any have "
"different sizes."
msgstr ""

#: ../../../Extensions.rst:96
msgid "``same_contents``"
msgstr ""

#: ../../../Extensions.rst:95
msgid ""
"Duplicates are discarded, but the linker issues an error if any duplicates "
"do not have exactly the same content."
msgstr ""

#: ../../../Extensions.rst:99
msgid "``largest``"
msgstr ""

#: ../../../Extensions.rst:99
msgid "Links the largest section from among the duplicates."
msgstr ""

#: ../../../Extensions.rst:103
msgid "``newest``"
msgstr ""

#: ../../../Extensions.rst:102
msgid "Links the newest section from among the duplicates."
msgstr ""

#: ../../../Extensions.rst:112 ../../../Extensions.rst:213
msgid "``.section`` Directive"
msgstr ""

#: ../../../Extensions.rst:114
msgid ""
"MC supports passing the information in ``.linkonce`` at the end of ``."
"section``. For example,  these two codes are equivalent"
msgstr ""

#: ../../../Extensions.rst:132
msgid ""
"Note that in the combined form the COMDAT symbol is explicit. This extension "
"exists to support multiple sections with the same name in different COMDATs:"
msgstr ""

#: ../../../Extensions.rst:149
msgid ""
"In addition to the types allowed with ``.linkonce``, ``.section`` also "
"accepts ``associative``. The meaning is that the section is linked  if a "
"certain other COMDAT section is linked. This other section is indicated by "
"the comdat symbol in this directive. It can be any symbol defined in the "
"associated section, but is usually the associated section's comdat."
msgstr ""

#: ../../../Extensions.rst:155
msgid "The following restrictions apply to the associated section:"
msgstr ""

#: ../../../Extensions.rst:157
msgid "It must be a COMDAT section."
msgstr ""

#: ../../../Extensions.rst:158
msgid "It cannot be another associative COMDAT section."
msgstr ""

#: ../../../Extensions.rst:160
msgid ""
"In the following example the symobl ``sym`` is the comdat symbol of ``.foo`` "
"and ``.bar`` is associated to ``.foo``."
msgstr ""

#: ../../../Extensions.rst:168
msgid "MC supports these flags in the COFF ``.section`` directive:"
msgstr ""

#: ../../../Extensions.rst:170
msgid "``b``: BSS section (``IMAGE_SCN_CNT_INITIALIZED_DATA``)"
msgstr ""

#: ../../../Extensions.rst:171
msgid "``d``: Data section (``IMAGE_SCN_CNT_UNINITIALIZED_DATA``)"
msgstr ""

#: ../../../Extensions.rst:172
msgid "``n``: Section is not loaded (``IMAGE_SCN_LNK_REMOVE``)"
msgstr ""

#: ../../../Extensions.rst:173
msgid "``r``: Read-only"
msgstr ""

#: ../../../Extensions.rst:174
msgid "``s``: Shared section"
msgstr ""

#: ../../../Extensions.rst:175
msgid "``w``: Writable"
msgstr ""

#: ../../../Extensions.rst:176
msgid "``x``: Executable section"
msgstr ""

#: ../../../Extensions.rst:177
msgid "``y``: Not readable"
msgstr ""

#: ../../../Extensions.rst:178
msgid "``D``: Discardable (``IMAGE_SCN_MEM_DISCARDABLE``)"
msgstr ""

#: ../../../Extensions.rst:180
msgid ""
"These flags are all compatible with gas, with the exception of the ``D`` "
"flag, which gnu as does not support. For gas compatibility, sections with a "
"name starting with \".debug\" are implicitly discardable."
msgstr ""

#: ../../../Extensions.rst:186
msgid "ARM64/COFF-Dependent"
msgstr ""

#: ../../../Extensions.rst:191
msgid "The following additional symbol variants are supported:"
msgstr ""

#: ../../../Extensions.rst:193
msgid ""
"**:secrel_lo12:** generates a relocation that corresponds to the COFF "
"relocation types ``IMAGE_REL_ARM64_SECREL_LOW12A`` or "
"``IMAGE_REL_ARM64_SECREL_LOW12L``."
msgstr ""

#: ../../../Extensions.rst:196
msgid ""
"**:secrel_hi12:** generates a relocation that corresponds to the COFF "
"relocation type ``IMAGE_REL_ARM64_SECREL_HIGH12A``."
msgstr ""

#: ../../../Extensions.rst:210
msgid "ELF-Dependent"
msgstr ""

#: ../../../Extensions.rst:215
msgid ""
"In order to support creating multiple sections with the same name and "
"comdat, it is possible to add an unique number at the end of the ``."
"seciton`` directive. For example, the following code creates two sections "
"named ``.text``."
msgstr ""

#: ../../../Extensions.rst:228
msgid ""
"The unique number is not present in the resulting object at all. It is just "
"used in the assembler to differentiate the sections."
msgstr ""

#: ../../../Extensions.rst:231
msgid ""
"The 'o' flag is mapped to SHF_LINK_ORDER. If it is present, a symbol must be "
"given that identifies the section to be placed is the .sh_link."
msgstr ""

#: ../../../Extensions.rst:241
msgid "which is equivalent to just"
msgstr ""

#: ../../../Extensions.rst:249
msgid "``.linker-options`` Section (linker options)"
msgstr ""

#: ../../../Extensions.rst:251
msgid ""
"In order to support passing linker options from the frontend to the linker, "
"a special section of type ``SHT_LLVM_LINKER_OPTIONS`` (usually named ``."
"linker-options`` though the name is not significant as it is identified by "
"the type).  The contents of this section is a simple pair-wise encoding of "
"directives for consideration by the linker.  The strings are encoded as "
"standard null-terminated UTF-8 strings.  They are emitted inline to avoid "
"having the linker traverse the object file for retrieving the value.  The "
"linker is permitted to not honour the option and instead provide a warning/"
"error to the user that the requested option was not honoured."
msgstr ""

#: ../../../Extensions.rst:261
msgid ""
"The section has type ``SHT_LLVM_LINKER_OPTIONS`` and has the ``SHF_EXCLUDE`` "
"flag to ensure that the section is treated as opaque by linkers which do not "
"support the feature and will not be emitted into the final linked binary."
msgstr ""

#: ../../../Extensions.rst:265
msgid "This would be equivalent to the follow raw assembly:"
msgstr ""

#: ../../../Extensions.rst:275
msgid "The following directives are specified:"
msgstr ""

#: ../../../Extensions.rst:277
msgid "lib"
msgstr ""

#: ../../../Extensions.rst:279
msgid ""
"The parameter identifies a library to be linked against.  The library will "
"be looked up in the default and any specified library search paths "
"(specified to this point)."
msgstr ""

#: ../../../Extensions.rst:283
msgid "libpath"
msgstr ""

#: ../../../Extensions.rst:285
msgid ""
"The paramter identifies an additional library search path to be considered "
"when looking up libraries after the inclusion of this option."
msgstr ""

#: ../../../Extensions.rst:289
msgid "``SHT_LLVM_DEPENDENT_LIBRARIES`` Section (Dependent Libraries)"
msgstr ""

#: ../../../Extensions.rst:291
msgid ""
"This section contains strings specifying libraries to be added to the link "
"by the linker."
msgstr ""

#: ../../../Extensions.rst:294
msgid ""
"The section should be consumed by the linker and not written to the output."
msgstr ""

#: ../../../Extensions.rst:296
msgid "The strings are encoded as standard null-terminated UTF-8 strings."
msgstr ""

#: ../../../Extensions.rst:298 ../../../Extensions.rst:479
msgid "For example:"
msgstr ""

#: ../../../Extensions.rst:306
msgid ""
"The interpretation of the library specifiers is defined by the consuming "
"linker."
msgstr ""

#: ../../../Extensions.rst:309
msgid "``SHT_LLVM_CALL_GRAPH_PROFILE`` Section (Call Graph Profile)"
msgstr ""

#: ../../../Extensions.rst:311
msgid ""
"This section is used to pass a call graph profile to the linker which can be "
"used to optimize the placement of sections.  It contains a sequence of (from "
"symbol, to symbol, weight) tuples."
msgstr ""

#: ../../../Extensions.rst:315
msgid ""
"It shall have a type of ``SHT_LLVM_CALL_GRAPH_PROFILE`` (0x6fff4c02), shall "
"have the ``SHF_EXCLUDE`` flag set, the ``sh_link`` member shall hold the "
"section header index of the associated symbol table, and shall have a "
"``sh_entsize`` of 16.  It should be named ``.llvm.call-graph-profile``."
msgstr ""

#: ../../../Extensions.rst:320
msgid ""
"The contents of the section shall be a sequence of ``Elf_CGProfile`` entries."
msgstr ""

#: ../../../Extensions.rst:331
msgid "cgp_from"
msgstr ""

#: ../../../Extensions.rst:331
msgid "The symbol index of the source of the edge."
msgstr ""

#: ../../../Extensions.rst:334
msgid "cgp_to"
msgstr ""

#: ../../../Extensions.rst:334
msgid "The symbol index of the destination of the edge."
msgstr ""

#: ../../../Extensions.rst:337
msgid "cgp_weight"
msgstr ""

#: ../../../Extensions.rst:337
msgid "The weight of the edge."
msgstr ""

#: ../../../Extensions.rst:339
msgid "This is represented in assembly as:"
msgstr ""

#: ../../../Extensions.rst:345
msgid ""
"``.cg_profile`` directives are processed at the end of the file.  It is an "
"error if either ``from`` or ``to`` are undefined temporary symbols.  If "
"either symbol is a temporary symbol, then the section symbol is used "
"instead.  If either symbol is undefined, then that symbol is defined as if "
"``.weak symbol`` has been written at the end of the file.  This forces the "
"symbol to show up in the symbol table."
msgstr ""

#: ../../../Extensions.rst:353
msgid "``SHT_LLVM_ADDRSIG`` Section (address-significance table)"
msgstr ""

#: ../../../Extensions.rst:355
msgid ""
"This section is used to mark symbols as address-significant, i.e. the "
"address of the symbol is used in a comparison or leaks outside the "
"translation unit. It has the same meaning as the absence of the LLVM "
"attributes ``unnamed_addr`` and ``local_unnamed_addr``."
msgstr ""

#: ../../../Extensions.rst:360
msgid ""
"Any sections referred to by symbols that are not marked as address-"
"significant in any object file may be safely merged by a linker without "
"breaking the address uniqueness guarantee provided by the C and C++ language "
"standards."
msgstr ""

#: ../../../Extensions.rst:364
msgid ""
"The contents of the section are a sequence of ULEB128-encoded integers "
"referring to the symbol table indexes of the address-significant symbols."
msgstr ""

#: ../../../Extensions.rst:367
msgid "There are two associated assembly directives:"
msgstr ""

#: ../../../Extensions.rst:373
msgid ""
"This instructs the assembler to emit an address-significance table. Without "
"this directive, all symbols are considered address-significant."
msgstr ""

#: ../../../Extensions.rst:380
msgid "This marks ``sym`` as address-significant."
msgstr ""

#: ../../../Extensions.rst:383
msgid "``SHT_LLVM_SYMPART`` Section (symbol partition specification)"
msgstr ""

#: ../../../Extensions.rst:385
msgid ""
"This section is used to mark symbols with the `partition`_ that they belong "
"to. An ``.llvm_sympart`` section consists of a null-terminated string "
"specifying the name of the partition followed by a relocation referring to "
"the symbol that belongs to the partition. It may be constructed as follows:"
msgstr ""

#: ../../../Extensions.rst:399
msgid "CodeView-Dependent"
msgstr ""

#: ../../../Extensions.rst:402
msgid "``.cv_file`` Directive"
msgstr ""

#: ../../../Extensions.rst:404
msgid "``.cv_file`` *FileNumber FileName* [ *checksum* ] [ *checksumkind* ]"
msgstr ""

#: ../../../Extensions.rst:407
msgid "``.cv_func_id`` Directive"
msgstr ""

#: ../../../Extensions.rst:408
msgid "Introduces a function ID that can be used with ``.cv_loc``."
msgstr ""

#: ../../../Extensions.rst:411
msgid "``.cv_func_id`` *FunctionId*"
msgstr ""

#: ../../../Extensions.rst:414
msgid "``.cv_inline_site_id`` Directive"
msgstr ""

#: ../../../Extensions.rst:415
msgid ""
"Introduces a function ID that can be used with ``.cv_loc``. Includes "
"``inlined at`` source location information for use in the line table of the "
"caller, whether the caller is a real function or another inlined call site."
msgstr ""

#: ../../../Extensions.rst:420
msgid ""
"``.cv_inline_site_id`` *FunctionId* ``within`` *Function* ``inlined_at`` "
"*FileNumber Line* [ *Colomn* ]"
msgstr ""

#: ../../../Extensions.rst:423
msgid "``.cv_loc`` Directive"
msgstr ""

#: ../../../Extensions.rst:424
msgid ""
"The first number is a file number, must have been previously assigned with a "
"``.file`` directive, the second number is the line number and optionally the "
"third number is a column position (zero if not specified).  The remaining "
"optional items are ``.loc`` sub-directives."
msgstr ""

#: ../../../Extensions.rst:430
msgid ""
"``.cv_loc`` *FunctionId FileNumber* [ *Line* ] [ *Column* ] "
"[ *prologue_end* ] [ ``is_stmt`` *value* ]"
msgstr ""

#: ../../../Extensions.rst:433
msgid "``.cv_linetable`` Directive"
msgstr ""

#: ../../../Extensions.rst:435
msgid ""
"``.cv_linetable`` *FunctionId* ``,`` *FunctionStart* ``,`` *FunctionEnd*"
msgstr ""

#: ../../../Extensions.rst:438
msgid "``.cv_inline_linetable`` Directive"
msgstr ""

#: ../../../Extensions.rst:440
msgid ""
"``.cv_inline_linetable`` *PrimaryFunctionId* ``,`` *FileNumber Line "
"FunctionStart FunctionEnd*"
msgstr ""

#: ../../../Extensions.rst:443
msgid "``.cv_def_range`` Directive"
msgstr ""

#: ../../../Extensions.rst:444
msgid "The *GapStart* and *GapEnd* options may be repeated as needed."
msgstr ""

#: ../../../Extensions.rst:447
msgid ""
"``.cv_def_range`` *RangeStart RangeEnd* [ *GapStart GapEnd* ] ``,`` *bytes*"
msgstr ""

#: ../../../Extensions.rst:450
msgid "``.cv_stringtable`` Directive"
msgstr ""

#: ../../../Extensions.rst:453
msgid "``.cv_filechecksums`` Directive"
msgstr ""

#: ../../../Extensions.rst:456
msgid "``.cv_filechecksumoffset`` Directive"
msgstr ""

#: ../../../Extensions.rst:458
msgid "``.cv_filechecksumoffset`` *FileNumber*"
msgstr ""

#: ../../../Extensions.rst:461
msgid "``.cv_fpo_data`` Directive"
msgstr ""

#: ../../../Extensions.rst:463
msgid "``.cv_fpo_data`` *procsym*"
msgstr ""

#: ../../../Extensions.rst:466
msgid "Target Specific Behaviour"
msgstr ""

#: ../../../Extensions.rst:469
msgid "X86"
msgstr ""

#: ../../../Extensions.rst:474
msgid ""
"``@ABS8`` can be applied to symbols which appear as immediate operands to "
"instructions that have an 8-bit immediate form for that operand. It causes "
"the assembler to use the 8-bit form and an 8-bit relocation (e.g. "
"``R_386_8`` or ``R_X86_64_8``) for the symbol."
msgstr ""

#: ../../../Extensions.rst:485
msgid ""
"This causes the assembler to select the form of the 64-bit ``cmpq`` "
"instruction that takes an 8-bit immediate operand that is sign extended to "
"64 bits, as opposed to ``cmpq $foo, %rdi`` which takes a 32-bit immediate "
"operand. This is also not the same as ``cmpb $foo, %dil``, which is an 8-bit "
"comparison."
msgstr ""

#: ../../../Extensions.rst:491
msgid "Windows on ARM"
msgstr ""

#: ../../../Extensions.rst:494 ../../../Extensions.rst:535
msgid "Stack Probe Emission"
msgstr ""

#: ../../../Extensions.rst:496
msgid ""
"The reference implementation (Microsoft Visual Studio 2012) emits stack "
"probes in the following fashion:"
msgstr ""

#: ../../../Extensions.rst:505
msgid ""
"However, this has the limitation of 32 MiB (±16MiB).  In order to "
"accommodate larger binaries, LLVM supports the use of ``-mcode-model=large`` "
"to allow a 4GiB range via a slight deviation.  It will generate an indirect "
"jump as follows:"
msgstr ""

#: ../../../Extensions.rst:518
msgid "Variable Length Arrays"
msgstr ""

#: ../../../Extensions.rst:520
msgid ""
"The reference implementation (Microsoft Visual Studio 2012) does not permit "
"the emission of Variable Length Arrays (VLAs)."
msgstr ""

#: ../../../Extensions.rst:523
msgid ""
"The Windows ARM Itanium ABI extends the base ABI by adding support for "
"emitting a dynamic stack allocation.  When emitting a variable stack "
"allocation, a call to ``__chkstk`` is emitted unconditionally to ensure that "
"guard pages are setup properly.  The emission of this stack probe emission "
"is handled similar to the standard stack probe emission."
msgstr ""

#: ../../../Extensions.rst:529
msgid "The MSVC environment does not emit code for VLAs currently."
msgstr ""

#: ../../../Extensions.rst:532
msgid "Windows on ARM64"
msgstr ""

#: ../../../Extensions.rst:537
msgid ""
"The reference implementation (Microsoft Visual Studio 2017) emits stack "
"probes in the following fashion:"
msgstr ""

#: ../../../Extensions.rst:546
msgid ""
"However, this has the limitation of 256 MiB (±128MiB).  In order to "
"accommodate larger binaries, LLVM supports the use of ``-mcode-model=large`` "
"to allow a 8GiB (±4GiB) range via a slight deviation.  It will generate an "
"indirect jump as follows:"
msgstr ""
