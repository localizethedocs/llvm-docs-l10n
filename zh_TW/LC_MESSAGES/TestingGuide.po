# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:12+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../TestingGuide.rst:3
msgid "LLVM Testing Infrastructure Guide"
msgstr "LLVM 測試基礎設施指南"

#: ../../../TestingGuide.rst:15
msgid "Overview"
msgstr "概覽"

#: ../../../TestingGuide.rst:17
msgid ""
"This document is the reference manual for the LLVM testing infrastructure. "
"It documents the structure of the LLVM testing infrastructure, the tools "
"needed to use it, and how to add and run tests."
msgstr ""

#: ../../../TestingGuide.rst:23
msgid "Requirements"
msgstr ""

#: ../../../TestingGuide.rst:25
msgid ""
"In order to use the LLVM testing infrastructure, you will need all of the "
"software required to build LLVM, as well as `Python <http://python.org>`_ "
"3.6 or later."
msgstr ""

#: ../../../TestingGuide.rst:30
msgid "LLVM Testing Infrastructure Organization"
msgstr ""

#: ../../../TestingGuide.rst:32
msgid ""
"The LLVM testing infrastructure contains three major categories of tests: "
"unit tests, regression tests and whole programs. The unit tests and "
"regression tests are contained inside the LLVM repository itself under "
"``llvm/unittests`` and ``llvm/test`` respectively and are expected to always "
"pass -- they should be run before every commit."
msgstr ""

#: ../../../TestingGuide.rst:38
msgid ""
"The whole programs tests are referred to as the \"LLVM test suite\" (or "
"\"test-suite\") and are in the ``test-suite`` `repository on GitHub <https://"
"github.com/llvm/llvm-test-suite.git>`_. For historical reasons, these tests "
"are also referred to as the \"nightly tests\" in places, which is less "
"ambiguous than \"test-suite\" and remains in use although we run them much "
"more often than nightly."
msgstr ""

#: ../../../TestingGuide.rst:46
msgid "Unit tests"
msgstr ""

#: ../../../TestingGuide.rst:48
msgid ""
"Unit tests are written using `Google Test <https://github.com/google/"
"googletest/blob/master/docs/primer.md>`_ and `Google Mock <https://github."
"com/google/googletest/blob/master/docs/gmock_for_dummies.md>`_ and are "
"located in the ``llvm/unittests`` directory. In general unit tests are "
"reserved for targeting the support library and other generic data structure, "
"we prefer relying on regression tests for testing transformations and "
"analysis on the IR."
msgstr ""

#: ../../../TestingGuide.rst:56
msgid "Regression tests"
msgstr ""

#: ../../../TestingGuide.rst:58
msgid ""
"The regression tests are small pieces of code that test a specific feature "
"of LLVM or trigger a specific bug in LLVM. The language they are written in "
"depends on the part of LLVM being tested. These tests are driven by the :doc:"
"`Lit <CommandGuide/lit>` testing tool (which is part of LLVM), and are "
"located in the ``llvm/test`` directory."
msgstr ""

#: ../../../TestingGuide.rst:64
msgid ""
"Typically when a bug is found in LLVM, a regression test containing just "
"enough code to reproduce the problem should be written and placed somewhere "
"underneath this directory. For example, it can be a small piece of LLVM IR "
"distilled from an actual application or benchmark."
msgstr ""

#: ../../../TestingGuide.rst:70
msgid "Testing Analysis"
msgstr ""

#: ../../../TestingGuide.rst:72
msgid ""
"An analysis is a pass that infer properties on some part of the IR and not "
"transforming it. They are tested in general using the same infrastructure as "
"the regression tests, by creating a separate \"Printer\" pass to consume the "
"analysis result and print it on the standard output in a textual format "
"suitable for FileCheck. See `llvm/test/Analysis/BranchProbabilityInfo/loop."
"ll <https://github.com/llvm/llvm-project/blob/main/llvm/test/Analysis/"
"BranchProbabilityInfo/loop.ll>`_ for an example of such test."
msgstr ""

#: ../../../TestingGuide.rst:81
msgid "``test-suite``"
msgstr ""

#: ../../../TestingGuide.rst:83
msgid ""
"The test suite contains whole programs, which are pieces of code which can "
"be compiled and linked into a stand-alone program that can be executed. "
"These programs are generally written in high level languages such as C or C+"
"+."
msgstr ""

#: ../../../TestingGuide.rst:88
msgid ""
"These programs are compiled using a user specified compiler and set of "
"flags, and then executed to capture the program output and timing "
"information. The output of these programs is compared to a reference output "
"to ensure that the program is being compiled correctly."
msgstr ""

#: ../../../TestingGuide.rst:93
msgid ""
"In addition to compiling and executing programs, whole program tests serve "
"as a way of benchmarking LLVM performance, both in terms of the efficiency "
"of the programs generated as well as the speed with which LLVM compiles, "
"optimizes, and generates code."
msgstr ""

#: ../../../TestingGuide.rst:98
msgid ""
"The test-suite is located in the ``test-suite`` `repository on GitHub "
"<https://github.com/llvm/llvm-test-suite.git>`_."
msgstr ""

#: ../../../TestingGuide.rst:101
msgid "See the :doc:`TestSuiteGuide` for details."
msgstr ""

#: ../../../TestingGuide.rst:104 ../../../TestingGuide.rst:187
msgid "Debugging Information tests"
msgstr ""

#: ../../../TestingGuide.rst:106
msgid ""
"The test suite contains tests to check quality of debugging information. The "
"test are written in C based languages or in LLVM assembly language."
msgstr ""

#: ../../../TestingGuide.rst:109
msgid ""
"These tests are compiled and run under a debugger. The debugger output is "
"checked to validate of debugging information. See README.txt in the test "
"suite for more information. This test suite is located in the ``cross-"
"project-tests/debuginfo-tests`` directory."
msgstr ""

#: ../../../TestingGuide.rst:115
msgid "Quick start"
msgstr ""

#: ../../../TestingGuide.rst:117
msgid ""
"The tests are located in two separate repositories. The unit and regression "
"tests are in the main \"llvm\"/ directory under the directories ``llvm/"
"unittests`` and ``llvm/test`` (so you get these tests for free with the main "
"LLVM tree). Use ``make check-all`` to run the unit and regression tests "
"after building LLVM."
msgstr ""

#: ../../../TestingGuide.rst:123
msgid ""
"The ``test-suite`` module contains more comprehensive tests including whole "
"C and C++ programs. See the :doc:`TestSuiteGuide` for details."
msgstr ""

#: ../../../TestingGuide.rst:127
msgid "Unit and Regression tests"
msgstr ""

#: ../../../TestingGuide.rst:129
msgid "To run all of the LLVM unit tests use the check-llvm-unit target:"
msgstr ""

#: ../../../TestingGuide.rst:135
msgid "To run all of the LLVM regression tests use the check-llvm target:"
msgstr ""

#: ../../../TestingGuide.rst:141
msgid ""
"In order to get reasonable testing performance, build LLVM and subprojects "
"in release mode, i.e."
msgstr ""

#: ../../../TestingGuide.rst:148
msgid ""
"If you have `Clang <https://clang.llvm.org/>`_ checked out and built, you "
"can run the LLVM and Clang tests simultaneously using:"
msgstr ""

#: ../../../TestingGuide.rst:155
msgid ""
"To run the tests with Valgrind (Memcheck by default), use the ``LIT_ARGS`` "
"make variable to pass the required options to lit. For example, you can use:"
msgstr ""

#: ../../../TestingGuide.rst:162
msgid "to enable testing with valgrind and with leak checking enabled."
msgstr ""

#: ../../../TestingGuide.rst:164
msgid ""
"To run individual tests or subsets of tests, you can use the ``llvm-lit`` "
"script which is built as part of LLVM. For example, to run the ``Integer/"
"BitPacked.ll`` test by itself you can run:"
msgstr ""

#: ../../../TestingGuide.rst:172
msgid "or to run all of the ARM CodeGen tests:"
msgstr ""

#: ../../../TestingGuide.rst:178
msgid ""
"The regression tests will use the Python psutil module only if installed in "
"a **non-user** location. Under Linux, install with sudo or within a virtual "
"environment. Under Windows, install Python for all users and then run ``pip "
"install psutil`` in an elevated command prompt."
msgstr ""

#: ../../../TestingGuide.rst:183
msgid ""
"For more information on using the :program:`lit` tool, see ``llvm-lit --"
"help`` or the :doc:`lit man page <CommandGuide/lit>`."
msgstr ""

#: ../../../TestingGuide.rst:189
msgid ""
"To run debugging information tests simply add the ``cross-project-tests`` "
"project to your ``LLVM_ENABLE_PROJECTS`` define on the cmake command-line."
msgstr ""

#: ../../../TestingGuide.rst:194
msgid "Regression test structure"
msgstr ""

#: ../../../TestingGuide.rst:196
msgid ""
"The LLVM regression tests are driven by :program:`lit` and are located in "
"the ``llvm/test`` directory."
msgstr ""

#: ../../../TestingGuide.rst:199
msgid ""
"This directory contains a large array of small tests that exercise various "
"features of LLVM and to ensure that regressions do not occur. The directory "
"is broken into several sub-directories, each focused on a particular area of "
"LLVM."
msgstr ""

#: ../../../TestingGuide.rst:205
msgid "Writing new regression tests"
msgstr ""

#: ../../../TestingGuide.rst:207
msgid ""
"The regression test structure is very simple, but does require some "
"information to be set. This information is gathered via ``cmake`` and is "
"written to a file, ``test/lit.site.cfg`` in the build directory. The ``llvm/"
"test`` Makefile does this work for you."
msgstr ""

#: ../../../TestingGuide.rst:212
msgid ""
"In order for the regression tests to work, each directory of tests must have "
"a ``lit.local.cfg`` file. :program:`lit` looks for this file to determine "
"how to run the tests. This file is just Python code and thus is very "
"flexible, but we've standardized it for the LLVM regression tests. If you're "
"adding a directory of tests, just copy ``lit.local.cfg`` from another "
"directory to get running. The standard ``lit.local.cfg`` simply specifies "
"which files to look in for tests. Any directory that contains only "
"directories does not need the ``lit.local.cfg`` file. Read the :doc:`Lit "
"documentation <CommandGuide/lit>` for more information."
msgstr ""

#: ../../../TestingGuide.rst:222
msgid ""
"Each test file must contain lines starting with \"RUN:\" that tell :program:"
"`lit` how to run it. If there are no RUN lines, :program:`lit` will issue an "
"error while running a test."
msgstr ""

#: ../../../TestingGuide.rst:226
msgid ""
"RUN lines are specified in the comments of the test program using the "
"keyword ``RUN`` followed by a colon, and lastly the command (pipeline) to "
"execute. Together, these lines form the \"script\" that :program:`lit` "
"executes to run the test case. The syntax of the RUN lines is similar to a "
"shell's syntax for pipelines including I/O redirection and variable "
"substitution. However, even though these lines may *look* like a shell "
"script, they are not. RUN lines are interpreted by :program:`lit`. "
"Consequently, the syntax differs from shell in a few ways. You can specify "
"as many RUN lines as needed."
msgstr ""

#: ../../../TestingGuide.rst:236
msgid ""
":program:`lit` performs substitution on each RUN line to replace LLVM tool "
"names with the full paths to the executable built for each tool (in "
"``$(LLVM_OBJ_ROOT)/$(BuildMode)/bin)``. This ensures that :program:`lit` "
"does not invoke any stray LLVM tools in the user's path during testing."
msgstr ""

#: ../../../TestingGuide.rst:241
msgid ""
"Each RUN line is executed on its own, distinct from other lines unless its "
"last character is ``\\``. This continuation character causes the RUN line to "
"be concatenated with the next one. In this way you can build up long "
"pipelines of commands without making huge line lengths. The lines ending in "
"``\\`` are concatenated until a RUN line that doesn't end in ``\\`` is "
"found. This concatenated set of RUN lines then constitutes one execution. :"
"program:`lit` will substitute variables and arrange for the pipeline to be "
"executed. If any process in the pipeline fails, the entire line (and test "
"case) fails too."
msgstr ""

#: ../../../TestingGuide.rst:251
msgid "Below is an example of legal RUN lines in a ``.ll`` file:"
msgstr ""

#: ../../../TestingGuide.rst:259
msgid ""
"As with a Unix shell, the RUN lines permit pipelines and I/O redirection to "
"be used."
msgstr ""

#: ../../../TestingGuide.rst:262
msgid ""
"There are some quoting rules that you must pay attention to when writing "
"your RUN lines. In general nothing needs to be quoted. :program:`lit` won't "
"strip off any quote characters so they will get passed to the invoked "
"program. To avoid this use curly braces to tell :program:`lit` that it "
"should treat everything enclosed as one value."
msgstr ""

#: ../../../TestingGuide.rst:268
msgid ""
"In general, you should strive to keep your RUN lines as simple as possible, "
"using them only to run tools that generate textual output you can then "
"examine. The recommended way to examine output to figure out if the test "
"passes is using the :doc:`FileCheck tool <CommandGuide/FileCheck>`. *[The "
"usage of grep in RUN lines is deprecated - please do not send or commit "
"patches that use it.]*"
msgstr ""

#: ../../../TestingGuide.rst:274
msgid ""
"Put related tests into a single file rather than having a separate file per "
"test. Check if there are files already covering your feature and consider "
"adding your code there instead of creating a new file."
msgstr ""

#: ../../../TestingGuide.rst:279
msgid "Generating assertions in regression tests"
msgstr ""

#: ../../../TestingGuide.rst:281
msgid ""
"Some regression test cases are very large and complex to write/update by "
"hand. In that case to reduce the human work we can use the scripts available "
"in llvm/utils/ to generate the assertions."
msgstr ""

#: ../../../TestingGuide.rst:285
msgid ""
"For example to generate assertions in an :program:`llc`-based test, run:"
msgstr ""

#: ../../../TestingGuide.rst:291
msgid ""
"And if you want to update assertions in an existing test case, pass `-u` "
"option which first check the ``NOTE:`` line exists and matches the script "
"name."
msgstr ""

#: ../../../TestingGuide.rst:294
msgid ""
"These are the most common scripts and their purposes/applications in "
"generating assertions:"
msgstr ""

#: ../../../TestingGuide.rst:318
msgid "Extra files"
msgstr ""

#: ../../../TestingGuide.rst:320
msgid ""
"If your test requires extra files besides the file containing the ``RUN:`` "
"lines and the extra files are small, consider specifying them in the same "
"file and using ``split-file`` to extract them. For example,"
msgstr ""

#: ../../../TestingGuide.rst:336
msgid "The parts are separated by the regex ``^(.|//)--- <part>``."
msgstr ""

#: ../../../TestingGuide.rst:338
msgid ""
"If you want to test relative line numbers like ``[[#@LINE+1]]``, specify ``--"
"leading-lines`` to add leading empty lines to preserve line numbers."
msgstr ""

#: ../../../TestingGuide.rst:341
msgid ""
"If the extra files are large, the idiomatic place to put them is in a "
"subdirectory ``Inputs``. You can then refer to the extra files as ``%S/"
"Inputs/foo.bar``."
msgstr ""

#: ../../../TestingGuide.rst:344
msgid ""
"For example, consider ``test/Linker/ident.ll``. The directory structure is "
"as follows::"
msgstr ""

#: ../../../TestingGuide.rst:354
msgid "For convenience, these are the contents:"
msgstr ""

#: ../../../TestingGuide.rst:380
msgid ""
"For symmetry reasons, ``ident.ll`` is just a dummy file that doesn't "
"actually participate in the test besides holding the ``RUN:`` lines."
msgstr ""

#: ../../../TestingGuide.rst:385
msgid ""
"Some existing tests use ``RUN: true`` in extra files instead of just putting "
"the extra files in an ``Inputs/`` directory. This pattern is deprecated."
msgstr ""

#: ../../../TestingGuide.rst:390
msgid "Fragile tests"
msgstr ""

#: ../../../TestingGuide.rst:392
msgid ""
"It is easy to write a fragile test that would fail spuriously if the tool "
"being tested outputs a full path to the input file.  For example, :program:"
"`opt` by default outputs a ``ModuleID``:"
msgstr ""

#: ../../../TestingGuide.rst:410
msgid ""
"``ModuleID`` can unexpectedly match against ``CHECK`` lines.  For example:"
msgstr ""

#: ../../../TestingGuide.rst:421
msgid "This test will fail if placed into a ``download`` directory."
msgstr ""

#: ../../../TestingGuide.rst:423
msgid ""
"To make your tests robust, always use ``opt ... < %s`` in the RUN line. :"
"program:`opt` does not output a ``ModuleID`` when input comes from stdin."
msgstr ""

#: ../../../TestingGuide.rst:427
msgid "Platform-Specific Tests"
msgstr ""

#: ../../../TestingGuide.rst:429
msgid ""
"Whenever adding tests that require the knowledge of a specific platform, "
"either related to code generated, specific output or back-end features, you "
"must make sure to isolate the features, so that buildbots that run on "
"different architectures (and don't even compile all back-ends), don't fail."
msgstr ""

#: ../../../TestingGuide.rst:435
msgid ""
"The first problem is to check for target-specific output, for example sizes "
"of structures, paths and architecture names, for example:"
msgstr ""

#: ../../../TestingGuide.rst:438
msgid "Tests containing Windows paths will fail on Linux and vice-versa."
msgstr ""

#: ../../../TestingGuide.rst:439
msgid ""
"Tests that check for ``x86_64`` somewhere in the text will fail anywhere "
"else."
msgstr ""

#: ../../../TestingGuide.rst:440
msgid ""
"Tests where the debug information calculates the size of types and "
"structures."
msgstr ""

#: ../../../TestingGuide.rst:442
msgid ""
"Also, if the test rely on any behaviour that is coded in any back-end, it "
"must go in its own directory. So, for instance, code generator tests for ARM "
"go into ``test/CodeGen/ARM`` and so on. Those directories contain a special "
"``lit`` configuration file that ensure all tests in that directory will only "
"run if a specific back-end is compiled and available."
msgstr ""

#: ../../../TestingGuide.rst:448
msgid "For instance, on ``test/CodeGen/ARM``, the ``lit.local.cfg`` is:"
msgstr ""

#: ../../../TestingGuide.rst:456
msgid ""
"Other platform-specific tests are those that depend on a specific feature of "
"a specific sub-architecture, for example only to Intel chips that support "
"``AVX2``."
msgstr ""

#: ../../../TestingGuide.rst:459
msgid ""
"For instance, ``test/CodeGen/X86/psubus.ll`` tests three sub-architecture "
"variants:"
msgstr ""

#: ../../../TestingGuide.rst:468
msgid "And the checks are different:"
msgstr ""

#: ../../../TestingGuide.rst:479
msgid ""
"So, if you're testing for a behaviour that you know is platform-specific or "
"depends on special features of sub-architectures, you must add the specific "
"triple, test with the specific FileCheck and put it into the specific "
"directory that will filter out all other architectures."
msgstr ""

#: ../../../TestingGuide.rst:486
msgid "Constraining test execution"
msgstr ""

#: ../../../TestingGuide.rst:488
msgid ""
"Some tests can be run only in specific configurations, such as with debug "
"builds or on particular platforms. Use ``REQUIRES`` and ``UNSUPPORTED`` to "
"control when the test is enabled."
msgstr ""

#: ../../../TestingGuide.rst:492
msgid ""
"Some tests are expected to fail. For example, there may be a known bug that "
"the test detect. Use ``XFAIL`` to mark a test as an expected failure. An "
"``XFAIL`` test will be successful if its execution fails, and will be a "
"failure if its execution succeeds."
msgstr ""

#: ../../../TestingGuide.rst:506
msgid ""
"``REQUIRES`` and ``UNSUPPORTED`` and ``XFAIL`` all accept a comma-separated "
"list of boolean expressions. The values in each expression may be:"
msgstr ""

#: ../../../TestingGuide.rst:509
msgid ""
"Features added to ``config.available_features`` by configuration files such "
"as ``lit.cfg``. String comparison of features is case-sensitive. "
"Furthermore, a boolean expression can contain any Python regular expression "
"enclosed in ``{{ }}``, in which case the boolean expression is satisfied if "
"any feature matches the regular expression. Regular expressions can appear "
"inside an identifier, so for example ``he{{l+}}o`` would match ``helo``, "
"``hello``, ``helllo``, and so on."
msgstr ""

#: ../../../TestingGuide.rst:515
msgid "Substrings of the target triple (``UNSUPPORTED`` and ``XFAIL`` only)."
msgstr ""

#: ../../../TestingGuide.rst:517
msgid "``REQUIRES`` enables the test if all expressions are true."
msgstr ""

#: ../../../TestingGuide.rst:518
msgid "``UNSUPPORTED`` disables the test if any expression is true."
msgstr ""

#: ../../../TestingGuide.rst:519
msgid "``XFAIL`` expects the test to fail if any expression is true."
msgstr ""

#: ../../../TestingGuide.rst:521
msgid "As a special case, ``XFAIL: *`` is expected to fail everywhere."
msgstr ""

#: ../../../TestingGuide.rst:533
msgid "Substitutions"
msgstr ""

#: ../../../TestingGuide.rst:535
msgid ""
"Besides replacing LLVM tool names the following substitutions are performed "
"in RUN lines:"
msgstr ""

#: ../../../TestingGuide.rst:539
msgid "``%%``"
msgstr ""

#: ../../../TestingGuide.rst:539
msgid "Replaced by a single ``%``. This allows escaping other substitutions."
msgstr ""

#: ../../../TestingGuide.rst:545
msgid "``%s``"
msgstr ""

#: ../../../TestingGuide.rst:542
msgid ""
"File path to the test case's source. This is suitable for passing on the "
"command line as the input to an LLVM tool."
msgstr ""

#: ../../../TestingGuide.rst:545
msgid "Example: ``/home/user/llvm/test/MC/ELF/foo_test.s``"
msgstr ""

#: ../../../TestingGuide.rst:550
msgid "``%S``"
msgstr ""

#: ../../../TestingGuide.rst:548
msgid "Directory path to the test case's source."
msgstr ""

#: ../../../TestingGuide.rst:550
msgid "Example: ``/home/user/llvm/test/MC/ELF``"
msgstr ""

#: ../../../TestingGuide.rst:558
msgid "``%t``"
msgstr ""

#: ../../../TestingGuide.rst:553
msgid ""
"File path to a temporary file name that could be used for this test case. "
"The file name won't conflict with other test cases. You can append to it if "
"you need multiple temporaries. This is useful as the destination of some "
"redirected output."
msgstr ""

#: ../../../TestingGuide.rst:558
msgid "Example: ``/home/user/llvm.build/test/MC/ELF/Output/foo_test.s.tmp``"
msgstr ""

#: ../../../TestingGuide.rst:566
msgid "``%T``"
msgstr ""

#: ../../../TestingGuide.rst:561
msgid ""
"Directory of ``%t``. Deprecated. Shouldn't be used, because it can be easily "
"misused and cause race conditions between tests."
msgstr ""

#: ../../../TestingGuide.rst:564
msgid ""
"Use ``rm -rf %t && mkdir %t`` instead if a temporary directory is necessary."
msgstr ""

#: ../../../TestingGuide.rst:566
msgid "Example: ``/home/user/llvm.build/test/MC/ELF/Output``"
msgstr ""

#: ../../../TestingGuide.rst:568
msgid "``%{pathsep}``"
msgstr ""

#: ../../../TestingGuide.rst:570
msgid "Expands to the path separator, i.e. ``:`` (or ``;`` on Windows)."
msgstr ""

#: ../../../TestingGuide.rst:572
msgid "``%/s, %/S, %/t, %/T:``"
msgstr ""

#: ../../../TestingGuide.rst:574
msgid ""
"Act like the corresponding substitution above but replace any ``\\`` "
"character with a ``/``. This is useful to normalize path separators."
msgstr ""

#: ../../../TestingGuide.rst:577
msgid "Example: ``%s:  C:\\Desktop Files/foo_test.s.tmp``"
msgstr ""

#: ../../../TestingGuide.rst:579
msgid "Example: ``%/s: C:/Desktop Files/foo_test.s.tmp``"
msgstr ""

#: ../../../TestingGuide.rst:581
msgid "``%:s, %:S, %:t, %:T:``"
msgstr ""

#: ../../../TestingGuide.rst:583
msgid ""
"Act like the corresponding substitution above but remove colons at the "
"beginning of Windows paths. This is useful to allow concatenation of "
"absolute paths on Windows to produce a legal path."
msgstr ""

#: ../../../TestingGuide.rst:587
msgid "Example: ``%s:  C:\\Desktop Files\\foo_test.s.tmp``"
msgstr ""

#: ../../../TestingGuide.rst:589
msgid "Example: ``%:s: C\\Desktop Files\\foo_test.s.tmp``"
msgstr ""

#: ../../../TestingGuide.rst:591
msgid "``%errc_<ERRCODE>``"
msgstr ""

#: ../../../TestingGuide.rst:593
msgid ""
"Some error messages may be substituted to allow different spellings based on "
"the host platform."
msgstr ""

#: ../../../TestingGuide.rst:596
msgid ""
"The following error codes are currently supported: ENOENT, EISDIR, EINVAL, "
"EACCES."
msgstr ""

#: ../../../TestingGuide.rst:599
msgid "Example: ``Linux %errc_ENOENT: No such file or directory``"
msgstr ""

#: ../../../TestingGuide.rst:601
msgid "Example: ``Windows %errc_ENOENT: no such file or directory``"
msgstr ""

#: ../../../TestingGuide.rst:603
msgid "**LLVM-specific substitutions:**"
msgstr ""

#: ../../../TestingGuide.rst:609
msgid "``%shlibext``"
msgstr ""

#: ../../../TestingGuide.rst:606
msgid ""
"The suffix for the host platforms shared library files. This includes the "
"period as the first character."
msgstr ""

#: ../../../TestingGuide.rst:609
msgid "Example: ``.so`` (Linux), ``.dylib`` (macOS), ``.dll`` (Windows)"
msgstr ""

#: ../../../TestingGuide.rst:615
msgid "``%exeext``"
msgstr ""

#: ../../../TestingGuide.rst:612
msgid ""
"The suffix for the host platforms executable files. This includes the period "
"as the first character."
msgstr ""

#: ../../../TestingGuide.rst:615
msgid "Example: ``.exe`` (Windows), empty on Linux."
msgstr ""

#: ../../../TestingGuide.rst:621
msgid "``%(line)``, ``%(line+<number>)``, ``%(line-<number>)``"
msgstr ""

#: ../../../TestingGuide.rst:618
msgid ""
"The number of the line where this substitution is used, with an optional "
"integer offset. This can be used in tests with multiple RUN lines, which "
"reference test file's line numbers."
msgstr ""

#: ../../../TestingGuide.rst:623
msgid "**Clang-specific substitutions:**"
msgstr ""

#: ../../../TestingGuide.rst:626
msgid "``%clang``"
msgstr ""

#: ../../../TestingGuide.rst:626
msgid "Invokes the Clang driver."
msgstr ""

#: ../../../TestingGuide.rst:629
msgid "``%clang_cpp``"
msgstr ""

#: ../../../TestingGuide.rst:629
msgid "Invokes the Clang driver for C++."
msgstr ""

#: ../../../TestingGuide.rst:632
msgid "``%clang_cl``"
msgstr ""

#: ../../../TestingGuide.rst:632
msgid "Invokes the CL-compatible Clang driver."
msgstr ""

#: ../../../TestingGuide.rst:635
msgid "``%clangxx``"
msgstr ""

#: ../../../TestingGuide.rst:635
msgid "Invokes the G++-compatible Clang driver."
msgstr ""

#: ../../../TestingGuide.rst:638
msgid "``%clang_cc1``"
msgstr ""

#: ../../../TestingGuide.rst:638
msgid "Invokes the Clang frontend."
msgstr ""

#: ../../../TestingGuide.rst:645
msgid "``%itanium_abi_triple``, ``%ms_abi_triple``"
msgstr ""

#: ../../../TestingGuide.rst:641
msgid ""
"These substitutions can be used to get the current target triple adjusted to "
"the desired ABI. For example, if the test suite is running with the ``i686-"
"pc-win32`` target, ``%itanium_abi_triple`` will expand to ``i686-pc-"
"mingw32``. This allows a test to run with a specific ABI without "
"constraining it to a specific triple."
msgstr ""

#: ../../../TestingGuide.rst:647
msgid "**FileCheck-specific substitutions:**"
msgstr ""

#: ../../../TestingGuide.rst:652
msgid "``%ProtectFileCheckOutput``"
msgstr ""

#: ../../../TestingGuide.rst:650
msgid ""
"This should precede a ``FileCheck`` call if and only if the call's textual "
"output affects test results.  It's usually easy to tell: just look for "
"redirection or piping of the ``FileCheck`` call's stdout or stderr."
msgstr ""

#: ../../../TestingGuide.rst:654
msgid ""
"To add more substitutions, look at ``test/lit.cfg`` or ``lit.local.cfg``."
msgstr ""

#: ../../../TestingGuide.rst:658
msgid "Options"
msgstr ""

#: ../../../TestingGuide.rst:660
msgid ""
"The llvm lit configuration allows to customize some things with user options:"
msgstr ""

#: ../../../TestingGuide.rst:667
msgid "``llc``, ``opt``, ..."
msgstr ""

#: ../../../TestingGuide.rst:663
msgid ""
"Substitute the respective llvm tool name with a custom command line. This "
"allows to specify custom paths and default arguments for these tools. "
"Example:"
msgstr ""

#: ../../../TestingGuide.rst:667
msgid "% llvm-lit \"-Dllc=llc -verify-machineinstrs\""
msgstr ""

#: ../../../TestingGuide.rst:670
msgid "``run_long_tests``"
msgstr ""

#: ../../../TestingGuide.rst:670
msgid "Enable the execution of long running tests."
msgstr ""

#: ../../../TestingGuide.rst:674
msgid "``llvm_site_config``"
msgstr ""

#: ../../../TestingGuide.rst:673
msgid "Load the specified lit configuration instead of the default one."
msgstr ""

#: ../../../TestingGuide.rst:677
msgid "Other Features"
msgstr ""

#: ../../../TestingGuide.rst:679
msgid ""
"To make RUN line writing easier, there are several helper programs. These "
"helpers are in the PATH when running tests, so you can just call them using "
"their name. For example:"
msgstr ""

#: ../../../TestingGuide.rst:685
msgid "``not``"
msgstr ""

#: ../../../TestingGuide.rst:684
msgid ""
"This program runs its arguments and then inverts the result code from it. "
"Zero result codes become 1. Non-zero result codes become 0."
msgstr ""

#: ../../../TestingGuide.rst:687
msgid ""
"To make the output more useful, :program:`lit` will scan the lines of the "
"test case for ones that contain a pattern that matches ``PR[0-9]+``. This is "
"the syntax for specifying a PR (Problem Report) number that is related to "
"the test case. The number after \"PR\" specifies the LLVM Bugzilla number. "
"When a PR number is specified, it will be used in the pass/fail reporting. "
"This is useful to quickly get some context when a test fails."
msgstr ""

#: ../../../TestingGuide.rst:695
msgid ""
"Finally, any line that contains \"END.\" will cause the special "
"interpretation of lines to terminate. This is generally done right after the "
"last RUN: line. This has two side effects:"
msgstr ""

#: ../../../TestingGuide.rst:699
msgid ""
"it prevents special interpretation of lines that are part of the test "
"program, not the instructions to the test case, and"
msgstr ""

#: ../../../TestingGuide.rst:702
msgid ""
"it speeds things up for really big test cases by avoiding interpretation of "
"the remainder of the file."
msgstr ""
