# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 21\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../CommandGuide/llvm-objcopy.rst:2
msgid "llvm-objcopy - object copying and editing tool"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:7
msgid "SYNOPSIS"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:9
msgid ":program:`llvm-objcopy` [*options*] *input* [*output*]"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:12
msgid "DESCRIPTION"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:14
msgid ""
":program:`llvm-objcopy` is a tool to copy and manipulate objects. In basic "
"usage, it makes a semantic copy of the input to the output. If any options "
"are specified, the output may be modified along the way, e.g. by removing "
"sections."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:18
msgid ""
"If no output file is specified, the input file is modified in-place. If \"-"
"\" is specified for the input file, the input is read from the program's "
"standard input stream. If \"-\" is specified for the output file, the output "
"is written to the standard output stream of the program."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:23
msgid ""
"If the input is an archive, any requested operations will be applied to each "
"archive member individually."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:26
msgid ""
"The tool is still in active development, but in most scenarios it works as a "
"drop-in replacement for GNU's :program:`objcopy`."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:30
msgid "GENERIC AND CROSS-PLATFORM OPTIONS"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:32
msgid ""
"The following options are either agnostic of the file format, or apply to "
"multiple file formats."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:37
msgid "Add a .gnu_debuglink section for ``<debug-file>`` to the output."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:41
msgid ""
"Add a section named ``<section>`` with the contents of ``<file>`` to the "
"output. For ELF objects the section will be of type `SHT_NOTE`, if the name "
"starts with \".note\". Otherwise, it will have type `SHT_PROGBITS`. Can be "
"specified multiple times to add multiple sections."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:46
#: ../../../CommandGuide/llvm-objcopy.rst:74
#: ../../../CommandGuide/llvm-objcopy.rst:137
#: ../../../CommandGuide/llvm-objcopy.rst:168
msgid ""
"For MachO objects, ``<section>`` must be formatted as ``<segment name>,"
"<section name>``."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:51
msgid "Ignored for compatibility."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:55
msgid ""
"Use real values for UIDs, GIDs and timestamps when updating archive member "
"headers."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:60
msgid ""
"Remove most local symbols not referenced by relocations from the output. "
"Different file formats may limit this to a subset of the local symbols. For "
"example, file and section symbols in ELF objects will not be discarded. "
"Additionally, remove all debug sections."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:67
msgid ""
"Dump the contents of section ``<section>`` into the file ``<file>``. Can be "
"specified multiple times to dump multiple sections to different files. "
"``<file>`` is unrelated to the input and output files provided to :program:"
"`llvm-objcopy` and as such the normal copying and editing operations will "
"still be performed. No operations are performed on the sections prior to "
"dumping them."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:79
msgid ""
"Enable deterministic mode when copying archives, i.e. use 0 for archive "
"member header UIDs, GIDs and timestamp fields. On by default."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:84
msgid ""
"Mark any defined symbols named ``<symbol>`` as global symbols in the output. "
"Can be specified multiple times to mark multiple symbols."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:89
msgid ""
"Read a list of names from the file ``<filename>`` and mark defined symbols "
"with those names as global in the output. In the file, each line represents "
"a single symbol, with leading and trailing whitespace ignored, as is "
"anything following a '#'. Can be specified multiple times to read names from "
"multiple files."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:96
msgid "Print a summary of command line options."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:100
msgid ""
"Mark all symbols local in the output, except for symbols with the name "
"``<symbol>``. Can be specified multiple times to ignore multiple symbols."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:105
msgid ""
"Mark all symbols local in the output, except for symbols named in the file "
"``<filename>``. In the file, each line represents a single symbol, with "
"leading and trailing whitespace ignored, as is anything following a '#'. Can "
"be specified multiple times to read names from multiple files."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:112
msgid ""
"Mark any defined non-common symbol named ``<symbol>`` as a local symbol in "
"the output. Can be specified multiple times to mark multiple symbols as "
"local."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:117
msgid ""
"Read a list of names from the file ``<filename>`` and mark defined non-"
"common symbols with those names as local in the output. In the file, each "
"line represents a single symbol, with leading and trailing whitespace "
"ignored, as is anything following a '#'. Can be specified multiple times to "
"read names from multiple files."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:125
msgid ""
"Produce a debug file as the output that only preserves contents of sections "
"useful for debugging purposes."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:128
msgid ""
"For ELF objects, this removes the contents of `SHF_ALLOC` sections that are "
"not `SHT_NOTE` by making them `SHT_NOBITS` and shrinking the program headers "
"where possible."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:134
msgid ""
"Remove all sections from the output, except for sections named "
"``<section>``. Can be specified multiple times to keep multiple sections."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:142
msgid ""
"Rename symbols called ``<old>`` to ``<new>`` in the output. Can be specified "
"multiple times to rename multiple symbols."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:147
msgid ""
"Rename symbols in the output as described in the file ``<filename>``. In the "
"file, each line represents a single symbol to rename, with the old name and "
"new name separated by whitespace. Leading and trailing whitespace is "
"ignored, as is anything following a '#'. Can be specified multiple times to "
"read names from multiple files."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:155
msgid ""
"If specified, symbol and section names specified by other switches are "
"treated as extended POSIX regular expression patterns."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:160
msgid ""
"Remove ``<prefix>`` from the start of every symbol name. No-op for symbols "
"that do not start with ``<prefix>``."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:165
msgid ""
"Remove the specified section from the output. Can be specified multiple "
"times to remove multiple sections simultaneously."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:173
msgid ""
"Set the alignment of section ``<section>`` to ``<align>``. Can be specified "
"multiple times to update multiple sections."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:178
msgid ""
"Set section properties in the output of section ``<section>`` based on the "
"specified ``<flag>`` values. Can be specified multiple times to update "
"multiple sections."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:182
msgid ""
"Supported flag names are `alloc`, `load`, `noload`, `readonly`, `exclude`, "
"`debug`, `code`, `data`, `rom`, `share`, `contents`, `merge`, `strings`, and "
"`large`. Not all flags are meaningful for all object file formats or target "
"architectures."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:187
msgid "For ELF objects, the flags have the following effects:"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:189
msgid "`alloc` = add the `SHF_ALLOC` flag."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:190
msgid ""
"`load` = if the section has `SHT_NOBITS` type, mark it as a `SHT_PROGBITS` "
"section."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:192
msgid "`readonly` = if this flag is not specified, add the `SHF_WRITE` flag."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:193
msgid "`exclude` = add the `SHF_EXCLUDE` flag."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:194
msgid "`code` = add the `SHF_EXECINSTR` flag."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:195
msgid "`merge` = add the `SHF_MERGE` flag."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:196
msgid "`strings` = add the `SHF_STRINGS` flag."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:197
msgid ""
"`contents` = if the section has `SHT_NOBITS` type, mark it as a "
"`SHT_PROGBITS` section."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:199
msgid ""
"`large` = add the `SHF_X86_64_LARGE` on x86_64; rejected if the target "
"architecture is not x86_64."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:202
msgid "For COFF objects, the flags have the following effects:"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:204
msgid ""
"`alloc` = add the `IMAGE_SCN_CNT_UNINITIALIZED_DATA` and "
"`IMAGE_SCN_MEM_READ` flags, unless the `load` flag is specified."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:206
msgid ""
"`noload` = add the `IMAGE_SCN_LNK_REMOVE` and `IMAGE_SCN_MEM_READ` flags."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:207
msgid ""
"`readonly` = if this flag is not specified, add the `IMAGE_SCN_MEM_WRITE` "
"flag."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:209
msgid ""
"`exclude` = add the `IMAGE_SCN_LNK_REMOVE` and `IMAGE_SCN_MEM_READ` flags."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:210
msgid ""
"`debug` = add the `IMAGE_SCN_CNT_INITIALIZED_DATA`, "
"`IMAGE_SCN_MEM_DISCARDABLE` and  `IMAGE_SCN_MEM_READ` flags."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:212
msgid ""
"`code` = add the `IMAGE_SCN_CNT_CODE`, `IMAGE_SCN_MEM_EXECUTE` and "
"`IMAGE_SCN_MEM_READ` flags."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:214
msgid ""
"`data` = add the `IMAGE_SCN_CNT_INITIALIZED_DATA` and `IMAGE_SCN_MEM_READ` "
"flags."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:216
msgid ""
"`share` = add the `IMAGE_SCN_MEM_SHARED` and `IMAGE_SCN_MEM_READ` flags."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:220
msgid ""
"Do not change the parameters of symbol ``<symbol>`` when executing other "
"options that can change the symbol's name, binding or visibility."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:225
msgid ""
"Do not change the parameters of symbols named in the file ``<filename>`` "
"when executing other options that can change the symbol's name, binding or "
"visibility. In the file, each line represents a single symbol, with leading "
"and trailing whitespace ignored, as is anything following a '#'. Can be "
"specified multiple times to read names from multiple files."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:233
msgid ""
"Remove all symbols, debug sections and relocations from the output. This "
"option is equivalent to GNU :program:`objcopy`'s ``--strip-all`` switch."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:238
msgid ""
"For ELF objects, remove from the output all symbols and non-alloc sections "
"not within segments, except for .gnu.warning, .ARM.attribute sections and "
"the section name table."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:242
msgid ""
"For COFF and Mach-O objects, remove all symbols, debug sections, and "
"relocations from the output."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:247
msgid "Remove all debug sections from the output."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:251
msgid ""
"Remove all symbols named ``<symbol>`` from the output. Can be specified "
"multiple times to remove multiple symbols."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:256
msgid ""
"Remove all symbols whose names appear in the file ``<filename>``, from the "
"output. In the file, each line represents a single symbol name, with leading "
"and trailing whitespace ignored, as is anything following a '#'. Can be "
"specified multiple times to read names from multiple files."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:263
msgid ""
"Remove from the output all symbols named ``<symbol>`` that are local or "
"undefined and are not required by any relocation."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:268
msgid ""
"Remove all symbols whose names appear in the file ``<filename>``, from the "
"output, if they are local or undefined and are not required by any "
"relocation. In the file, each line represents a single symbol name, with "
"leading and trailing whitespace ignored, as is anything following a '#'. Can "
"be specified multiple times to read names from multiple files."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:276
msgid ""
"Remove from the output all local or undefined symbols that are not required "
"by relocations. Also remove all debug sections."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:281
msgid ""
"Replace the contents of the section ``<name>`` with contents from the file "
"``<file>``. If the section ``<name>`` is part of a segment, the new contents "
"cannot be larger than the existing section."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:287
msgid "Display the version of the :program:`llvm-objcopy` executable."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:291
msgid ""
"Allow wildcard syntax for symbol-related flags. On by default for section-"
"related flags. Incompatible with --regex."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:294
msgid "Wildcard syntax allows the following special symbols:"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:297
msgid "Character"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:297
msgid "Meaning"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:297
msgid "Equivalent"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:299
msgid "``*``"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:299
msgid "Any number of characters"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:299
msgid "``.*``"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:300
msgid "``?``"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:300
msgid "Any single character"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:300
msgid "``.``"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:301
msgid "``\\``"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:301
msgid "Escape the next character"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:302
msgid "``[a-z]``"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:302
msgid "Character class"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:303
msgid "``[!a-z]``, ``[^a-z]``"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:303
msgid "Negated character class"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:303
msgid "``[^a-z]``"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:306
msgid ""
"Additionally, starting a wildcard with '!' will prevent a match, even if "
"another flag matches. For example ``-w -N '*' -N '!x'`` will strip all "
"symbols except for ``x``."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:310
msgid ""
"The order of wildcards does not matter. For example, ``-w -N '*' -N '!x'`` "
"is the same as ``-w -N '!x' -N '*'``."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:315
msgid "Read command-line options and commands from response file `<FILE>`."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:318
msgid "ELF-SPECIFIC OPTIONS"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:320
msgid ""
"The following options are implemented only for ELF objects. If used with "
"other objects, :program:`llvm-objcopy` will either emit an error or silently "
"ignore them."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:326
msgid ""
"Add a new symbol called ``<name>`` to the output symbol table, in the "
"section named ``<section>``, with value ``<value>``. If ``<section>`` is not "
"specified, the symbol is added as an absolute symbol. The ``<flags>`` affect "
"the symbol properties. Accepted values are:"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:331
msgid "`global` = the symbol will have global binding."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:332
msgid "`local` = the symbol will have local binding."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:333
msgid "`weak` = the symbol will have weak binding."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:334
msgid "`default` = the symbol will have default visibility."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:335
msgid "`hidden` = the symbol will have hidden visibility."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:336
msgid "`protected` = the symbol will have protected visibility."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:337
msgid "`file` = the symbol will be an `STT_FILE` symbol."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:338
msgid "`section` = the symbol will be an `STT_SECTION` symbol."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:339
msgid "`object` = the symbol will be an `STT_OBJECT` symbol."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:340
msgid "`function` = the symbol will be an `STT_FUNC` symbol."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:341
msgid "`indirect-function` = the symbol will be an `STT_GNU_IFUNC` symbol."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:343
msgid ""
"Additionally, the following flags are accepted but ignored: `debug`, "
"`constructor`, `warning`, `indirect`, `synthetic`, `unique-object`, `before`."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:346
msgid "Can be specified multiple times to add multiple symbols."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:350
msgid ""
"Allow :program:`llvm-objcopy` to remove sections even if it would leave "
"invalid section references. Any invalid sh_link fields will be set to zero."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:355
msgid "Shift LMA of non-zero-sized segments by ``<val>``."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:359
msgid ""
"Change the address of sections that match ``<section>`` pattern to the "
"specified value, or apply ``+<val>``/``-<val>`` to the current value. Can be "
"specified multiple times to specify multiple patterns. Each section is only "
"modified by one ``--change-section-address`` argument. If a section name "
"matches multiple patterns, the rightmost change applies. The object file "
"needs to be of ET_REL type."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:368
msgid ""
"Add ``<incr>`` to the program's start address. Can be specified multiple "
"times, in which case the values will be applied cumulatively."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:373
msgid ""
"Compress DWARF debug sections in the output, using the specified format. "
"Supported formats are ``zlib`` and ``zstd``. Use ``zlib`` if ``<format>`` is "
"omitted."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:378
msgid ""
"Compress or decompress sections matched by ``<section>`` using the specified "
"format. Supported formats are ``zlib`` and ``zstd``. Specify ``none`` for "
"decompression. When a section is matched by multiple options, the last one "
"wins. A wildcard ``<section>`` starting with '!' is disallowed. Sections "
"within a segment cannot be (de)compressed."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:386
msgid "Decompress any compressed DWARF debug sections in the output."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:390
msgid ""
"Remove local symbols starting with \".L\" not referenced by relocations from "
"the output."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:394
msgid "Remove all sections that are not DWARF .dwo sections from the output."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:398
msgid "Extract the main partition from the output."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:402
msgid "Extract the named partition from the output."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:406
msgid ""
"For binary outputs, fill the gaps between sections with ``<value>`` instead "
"of zero. The value must be an unsigned 8-bit integer."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:411
msgid ""
"Read the input as the specified format. See `SUPPORTED FORMATS`_ for a list "
"of valid ``<format>`` values. If unspecified, :program:`llvm-objcopy` will "
"attempt to determine the format automatically."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:417
msgid ""
"Keep symbols of type `STT_FILE`, even if they would otherwise be stripped."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:421
msgid ""
"When removing sections from the output, do not remove sections named "
"``<section>``. Can be specified multiple times to keep multiple sections."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:426
msgid ""
"When removing symbols from the output, do not remove symbols named "
"``<symbol>``. Can be specified multiple times to keep multiple symbols."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:431
msgid ""
"When removing symbols from the output do not remove symbols named in the "
"file ``<filename>``. In the file, each line represents a single symbol, with "
"leading and trailing whitespace ignored, as is anything following a '#'. Can "
"be specified multiple times to read names from multiple files."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:438
msgid ""
"Mark all symbols with hidden or internal visibility local in the output."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:442
msgid ""
"Specify the visibility of the symbols automatically created when using "
"binary input or :option:`--add-symbol`. Valid options are:"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:445
msgid "`default`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:446
msgid "`hidden`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:447
msgid "`internal`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:448
msgid "`protected`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:450
msgid "The default is `default`."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:454
msgid ""
"When adding note sections, do not verify if the section format is valid."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:458
msgid ""
"Write the output as the specified format. See `SUPPORTED FORMATS`_ for a "
"list of valid ``<format>`` values. If unspecified, the output format is "
"assumed to be the same as the value specified for :option:`--input-target` "
"or the input file's format if that option is also unspecified."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:465
msgid ""
"For binary outputs, pad the output to the load address ``<address>`` using a "
"value of zero or the value specified by :option:`--gap-fill`."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:470
msgid ""
"Add ``<prefix>`` to the front of the names of all allocatable sections in "
"the output."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:475
msgid "Add ``<prefix>`` to the front of every symbol name in the output."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:479
msgid "Preserve access and modification timestamps in the output."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:483
msgid ""
"Remove notes of integer type ``<type>`` and name ``<name>`` from SHT_NOTE "
"sections that are not in a segment. Can be specified multiple times."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:488
msgid ""
"Rename sections called ``<old>`` to ``<new>`` in the output, and apply any "
"specified ``<flag>`` values. See :option:`--set-section-flags` for a list of "
"supported flags. Can be specified multiple times to rename multiple sections."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:494
msgid ""
"Set the type of section ``<section>`` to the integer ``<type>``. Can be "
"specified multiple times to update multiple sections."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:499
msgid ""
"Set the start address of the output to ``<addr>``. Overrides any previously "
"specified :option:`--change-start` or :option:`--adjust-start` options."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:504
msgid "Change the visibility of a symbol to the specified value."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:508
msgid ""
"Read a list of symbols from <filename> and change their visibility to the "
"specified value. Visibility values: default, internal, hidden, protected."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:513
msgid ""
"Equivalent to running :program:`llvm-objcopy` with :option:`--extract-dwo` "
"and ``<dwo-file>`` as the output file and no other options, and then with :"
"option:`--strip-dwo` on the input file."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:519
msgid "Remove all DWARF .dwo sections from the output."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:523
msgid ""
"Remove from the output all non-allocatable sections that are not within "
"segments."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:528
msgid ""
"Remove from the output all section headers and all section data not within "
"segments. Note that many tools will not be able to use an object without "
"section headers."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:534
msgid ""
"Equivalent to :option:`--input-target` and :option:`--output-target` for the "
"specified format. See `SUPPORTED FORMATS`_ for a list of valid ``<format>`` "
"values."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:540
msgid ""
"When adding note sections, verify if the section format is valid. On by "
"default."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:545
msgid ""
"Mark global symbols named ``<symbol>`` as weak symbols in the output. Can be "
"specified multiple times to mark multiple symbols as weak."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:550
msgid ""
"Read a list of names from the file ``<filename>`` and mark global symbols "
"with those names as weak in the output. In the file, each line represents a "
"single symbol, with leading and trailing whitespace ignored, as is anything "
"following a '#'. Can be specified multiple times to read names from multiple "
"files."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:557
msgid "Mark all defined global symbols as weak in the output."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:560
msgid "MACH-O-SPECIFIC OPTIONS"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:564
msgid "Keep undefined symbols, even if they would otherwise be stripped."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:567
msgid "COFF-SPECIFIC OPTIONS"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:571
msgid "Set the PE subsystem, and optionally subsystem version."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:574
msgid "SUPPORTED FORMATS"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:576
msgid ""
"The following values are currently supported by :program:`llvm-objcopy` for "
"the :option:`--input-target`, :option:`--output-target`, and :option:`--"
"target` options. For GNU :program:`objcopy` compatibility, the values are "
"all bfdnames."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:580
msgid "`binary`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:581
msgid "`ihex`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:582
msgid "`elf32-i386`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:583
msgid "`elf32-x86-64`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:584
msgid "`elf64-x86-64`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:585
msgid "`elf32-iamcu`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:586
msgid "`elf32-littlearm`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:587
msgid "`elf64-aarch64`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:588
msgid "`elf64-littleaarch64`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:589
msgid "`elf32-littleriscv`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:590
msgid "`elf64-littleriscv`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:591
msgid "`elf32-powerpc`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:592
msgid "`elf32-powerpcle`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:593
msgid "`elf64-powerpc`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:594
msgid "`elf64-powerpcle`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:595
msgid "`elf32-bigmips`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:596
msgid "`elf32-ntradbigmips`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:597
msgid "`elf32-ntradlittlemips`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:598
msgid "`elf32-tradbigmips`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:599
msgid "`elf32-tradlittlemips`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:600
msgid "`elf64-tradbigmips`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:601
msgid "`elf64-tradlittlemips`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:602
msgid "`elf32-sparc`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:603
msgid "`elf32-sparcel`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:604
msgid "`elf32-hexagon`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:605
msgid "`elf32-loongarch`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:606
msgid "`elf64-loongarch`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:607
msgid "`elf64-s390`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:609
msgid ""
"The following formats are supported by :program:`llvm-objcopy` for the :"
"option:`--output-target` only:"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:612
msgid "`srec`"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:614
msgid ""
"Additionally, all targets except `binary`, `ihex`, and `srec` can have `-"
"freebsd` as a suffix."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:618
msgid "BINARY INPUT AND OUTPUT"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:620
msgid ""
"If `binary` is used as the value for :option:`--input-target`, the input "
"file will be embedded as a data section in an ELF relocatable object, with "
"symbols ``_binary_<file_name>_start``, ``_binary_<file_name>_end``, and "
"``_binary_<file_name>_size`` representing the start, end and size of the "
"data, where ``<file_name>`` is the path of the input file as specified on "
"the command line with non-alphanumeric characters converted to ``_``."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:627
msgid ""
"If `binary` is used as the value for :option:`--output-target`, the output "
"file will be a raw binary file, containing the memory image of the input "
"file. Symbols and relocation information will be discarded. The image will "
"start at the address of the first loadable section in the output."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:633
msgid "EXIT STATUS"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:635
msgid ""
":program:`llvm-objcopy` exits with a non-zero exit code if there is an "
"error. Otherwise, it exits with code 0."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:639
msgid "BUGS"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:641
msgid ""
"To report bugs, please visit <https://github.com/llvm/llvm-project/labels/"
"tools:llvm-objcopy/strip/>."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:643
msgid ""
"There is a known issue with :option:`--input-target` and :option:`--target` "
"causing only ``binary`` and ``ihex`` formats to have any effect. Other "
"values will be ignored and :program:`llvm-objcopy` will attempt to guess the "
"input format."
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:649
msgid "SEE ALSO"
msgstr ""

#: ../../../CommandGuide/llvm-objcopy.rst:651
msgid ":manpage:`llvm-strip(1)`"
msgstr ""
