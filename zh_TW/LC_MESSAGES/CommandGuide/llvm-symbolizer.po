# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../CommandGuide/llvm-symbolizer.rst:2
msgid "llvm-symbolizer - convert addresses into source code locations"
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:5
msgid "SYNOPSIS"
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:7
msgid ":program:`llvm-symbolizer` [options]"
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:10
msgid "DESCRIPTION"
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:12
msgid ""
":program:`llvm-symbolizer` reads object file names and addresses from "
"standard input and prints corresponding source code locations to standard "
"output. If object file is specified in command line, :program:`llvm-"
"symbolizer` processes only addresses from standard input, the rest is output "
"verbatim. This program uses debug info sections and symbol table in the "
"object files."
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:19
msgid "EXAMPLE"
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:69
msgid "OPTIONS"
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:73
msgid "Path to object file to be symbolized."
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:77
msgid ""
"Specify the way function names are printed (omit function name, print short "
"function name, or print full linkage name, respectively). Defaults to "
"``linkage``."
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:83
msgid ""
"Prefer function names stored in symbol table to function names in debug info "
"sections. Defaults to true."
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:88
msgid "Print demangled function names. Defaults to true."
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:92
msgid ""
"If a source code location is in an inlined function, prints all the inlnied "
"frames. Defaults to true."
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:97
msgid ""
"If a binary contains object files for multiple architectures (e.g. it is a "
"Mach-O universal binary), symbolize the object file for a given "
"architecture. You can also specify architecture by writing ``binary_name:"
"arch_name`` in the input (see example above). If architecture is not "
"specified in either way, address will not be symbolized. Defaults to empty "
"string."
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:105
msgid ""
"(Darwin-only flag). If the debug info for a binary isn't present in the "
"default location, look for the debug info at the .dSYM path provided via the "
"``-dsym-hint`` flag. This flag can be used multiple times."
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:111
msgid "Print address before the source code location. Defaults to false."
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:115
msgid ""
"Print human readable output. If ``-inlining`` is specified, enclosing scope "
"is prefixed by (inlined by). Refer to listed examples."
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:119
msgid "EXIT STATUS"
msgstr ""

#: ../../../CommandGuide/llvm-symbolizer.rst:121
msgid ""
":program:`llvm-symbolizer` returns 0. Other exit codes imply internal "
"program error."
msgstr ""
