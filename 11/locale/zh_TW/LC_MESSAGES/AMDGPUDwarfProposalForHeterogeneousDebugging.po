# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:12+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:5
msgid "DWARF Proposal For Heterogeneous Debugging"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:12
msgid ""
"This document describes a **provisional proposal** for DWARF Version 6 [:ref:"
"`DWARF <amdgpu-dwarf-DWARF>`] to support heterogeneous debugging. It is not "
"currently fully implemented and is subject to change."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:19
msgid "Introduction"
msgstr "簡介"

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:21
msgid ""
"AMD [:ref:`AMD <amdgpu-dwarf-AMD>`] has been working on supporting "
"heterogeneous computing through the AMD Radeon Open Compute Platform (ROCm) "
"[:ref:`AMD-ROCm <amdgpu-dwarf-AMD-ROCm>`]. A heterogeneous computing program "
"can be written in a high level language such as C++ or Fortran with OpenMP "
"pragmas, OpenCL, or HIP (a portable C++ programming environment for "
"heterogeneous computing [:ref:`HIP <amdgpu-dwarf-HIP>`]). A heterogeneous "
"compiler and runtime allows a program to execute on multiple devices within "
"the same native process. Devices could include CPUs, GPUs, DSPs, FPGAs, or "
"other special purpose accelerators. Currently HIP programs execute on "
"systems with CPUs and GPUs."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:31
msgid ""
"ROCm is fully open sourced and includes contributions to open source "
"projects such as LLVM for compilation [:ref:`LLVM <amdgpu-dwarf-LLVM>`] and "
"GDB for debugging [:ref:`GDB <amdgpu-dwarf-GDB>`], as well as collaboration "
"with other third party projects such as the GCC compiler [:ref:`GCC <amdgpu-"
"dwarf-GCC>`] and the Perforce TotalView HPC debugger [:ref:`Perforce-"
"TotalView <amdgpu-dwarf-Perforce-TotalView>`]."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:38
msgid ""
"To support debugging heterogeneous programs several features that are not "
"provided by current DWARF Version 5 [:ref:`DWARF <amdgpu-dwarf-DWARF>`] have "
"been identified. This document contains a collection of proposals to address "
"providing those features."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:43
msgid ""
"The :ref:`amdgpu-dwarf-motivation` section describes the issues that are "
"being addressed for heterogeneous computing. That is followed by the :ref:"
"`amdgpu-dwarf-proposed-changes-relative-to-dwarf-version-5` section "
"containing the proposed textual changes relative to the DWARF Version 5 "
"standard. Then there is an :ref:`amdgpu-dwarf-examples` section that links "
"to the AMD GPU specific usage of the features in the proposal that includes "
"an example. Finally, there is a :ref:`amdgpu-dwarf-references` section. "
"There are a number of notes included that raise open questions, or provide "
"alternative approaches considered. The draft proposal seeks to be general in "
"nature and backwards compatible with DWARF Version 5. Its goal is to be "
"applicable to meeting the needs of any heterogeneous system and not be "
"vendor or architecture specific."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:56
msgid ""
"A fundamental aspect of the draft proposal is that it allows DWARF "
"expression location descriptions as stack elements. The draft proposal is "
"based on DWARF Version 5 and maintains compatibility with DWARF Version 5. "
"After attempting several alternatives, the current thinking is that such an "
"addition to DWARF Version 5 is the simplest and cleanest way to support "
"debugging optimized GPU code. It also appears to be generally useful and may "
"be able to address other reported DWARF issues, as well as being helpful in "
"providing better optimization support for non-GPU code."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:65
msgid ""
"General feedback on this draft proposal is sought, together with suggestions "
"on how to clarify, simplify, or organize it before submitting it as a formal "
"DWARF proposal. The current draft proposal is large and may need to be split "
"into separate proposals before formal submission. Any suggestions on how "
"best to do that are appreciated. However, at the initial review stage it is "
"believed there is value in presenting a unified proposal as there are mutual "
"dependencies between the various parts that would not be as apparent if it "
"was broken up into separate independent proposals."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:74
msgid ""
"We are in the process of modifying LLVM and GDB to support this draft "
"proposal which is providing experience and insights. We plan to upstream the "
"changes to those projects for any final form of the proposal."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:78
msgid ""
"The author very much appreciates the input provided so far by many others "
"which has been incorporated into this current version."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:84
msgid "Motivation"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:86
msgid ""
"This document proposes a set of backwards compatible extensions to DWARF "
"Version 5 [:ref:`DWARF <amdgpu-dwarf-DWARF>`] for consideration of inclusion "
"into a future DWARF Version 6 standard to support heterogeneous debugging."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:90
msgid ""
"The remainder of this section provides motivation for each proposed feature "
"in terms of heterogeneous debugging on commercially available AMD GPU "
"hardware (AMDGPU). The goal is to add support to the AMD [:ref:`AMD <amdgpu-"
"dwarf-AMD>`] open source Radeon Open Compute Platform (ROCm) [:ref:`AMD-ROCm "
"<amdgpu-dwarf-AMD-ROCm>`] which is an implementation of the industry "
"standard for heterogeneous computing devices defined by the Heterogeneous "
"System Architecture (HSA) Foundation [:ref:`HSA <amdgpu-dwarf-HSA>`]. ROCm "
"includes the LLVM compiler [:ref:`LLVM <amdgpu-dwarf-LLVM>`] with upstreamed "
"support for AMDGPU [:ref:`AMDGPU-LLVM <amdgpu-dwarf-AMDGPU-LLVM>`]. The goal "
"is to also add the GDB debugger [:ref:`GDB <amdgpu-dwarf-GDB>`] with "
"upstreamed support for AMDGPU [:ref:`AMD-ROCgdb <amdgpu-dwarf-AMD-ROCgdb>`]. "
"In addition, the goal is to work with third parties to enable support for "
"AMDGPU debugging in the GCC compiler [:ref:`GCC <amdgpu-dwarf-GCC>`] and the "
"Perforce TotalView HPC debugger [:ref:`Perforce-TotalView <amdgpu-dwarf-"
"Perforce-TotalView>`]."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:105
msgid ""
"However, the proposal is intended to be vendor and architecture neutral. It "
"is believed to apply to other heterogeous hardware devices including GPUs, "
"DSPs, FPGAs, and other specialized hardware. These collectively include "
"similar characteristics and requirements as AMDGPU devices. Parts of the "
"proposal can also apply to traditional CPU hardware that supports large "
"vector registers. Compilers can map source languages and extensions that "
"describe large scale parallel execution onto the lanes of the vector "
"registers. This is common in programming languages used in ML and HPC. The "
"proposal also includes improved support for optimized code on any "
"architecture. Some of the generalizations may also benefit other issues that "
"have been raised."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:116
msgid ""
"The proposal has evolved though collaboration with many individuals and "
"active prototyping within the GDB debugger and LLVM compiler. Input has also "
"been very much appreciated from the developers working on the Perforce "
"TotalView HPC Debugger and GCC compiler."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:121
msgid ""
"The AMDGPU has several features that require additional DWARF functionality "
"in order to support optimized code."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:124
msgid ""
"AMDGPU optimized code may spill vector registers to non-global address space "
"memory, and this spilling may be done only for lanes that are active on "
"entry to the subprogram. To support this, a location description that can be "
"created as a masked select is required. See ``DW_OP_LLVM_select_bit_piece``."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:129
msgid ""
"Since the active lane mask may be held in a register, a way to get the value "
"of a register on entry to a subprogram is required. To support this an "
"operation that returns the caller value of a register as specified by the "
"Call Frame Information (CFI) is required. See "
"``DW_OP_LLVM_call_frame_entry_reg`` and :ref:`amdgpu-dwarf-call-frame-"
"information`."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:135
msgid ""
"Current DWARF uses an empty expression to indicate an undefined location "
"description. Since the masked select composite location description "
"operation takes more than one location description, it is necessary to have "
"an explicit way to specify an undefined location description. Otherwise it "
"is not possible to specify that a particular one of the input location "
"descriptions is undefined. See ``DW_OP_LLVM_undefined``."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:142
msgid ""
"CFI describes restoring callee saved registers that are spilled. Currently "
"CFI only allows a location description that is a register, memory address, "
"or implicit location description. AMDGPU optimized code may spill scalar "
"registers into portions of vector registers. This requires extending CFI to "
"allow any location description. See :ref:`amdgpu-dwarf-call-frame-"
"information`."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:149
msgid ""
"The vector registers of the AMDGPU are represented as their full wavefront "
"size, meaning the wavefront size times the dword size. This reflects the "
"actual hardware and allows the compiler to generate DWARF for languages that "
"map a thread to the complete wavefront. It also allows more efficient DWARF "
"to be generated to describe the CFI as only a single expression is required "
"for the whole vector register, rather than a separate expression for each "
"lane's dword of the vector register. It also allows the compiler to produce "
"DWARF that indexes the vector register if it spills scalar registers into "
"portions of a vector registers."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:159
msgid ""
"Since DWARF stack value entries have a base type and AMDGPU registers are a "
"vector of dwords, the ability to specify that a base type is a vector is "
"required. See ``DW_AT_LLVM_vector_size``."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:163
msgid ""
"If the source language is mapped onto the AMDGPU wavefronts in a SIMT "
"manner, then the variable DWARF location expressions must compute the "
"location for a single lane of the wavefront. Therefore, a DWARF operation is "
"required to denote the current lane, much like ``DW_OP_push_object_address`` "
"denotes the current object. The ``DW_OP_*piece`` operations only allow "
"literal indices. Therefore, a way to use a computed offset of an arbitrary "
"location description (such as a vector register) is required. See "
"``DW_OP_LLVM_push_lane``, ``DW_OP_LLVM_offset``, "
"``DW_OP_LLVM_offset_uconst``, and ``DW_OP_LLVM_bit_offset``."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:173
msgid ""
"If the source language is mapped onto the AMDGPU wavefronts in a SIMT manner "
"the compiler can use the AMDGPU execution mask register to control which "
"lanes are active. To describe the conceptual location of non-active lanes a "
"DWARF expression is needed that can compute a per lane PC. For efficiency, "
"this is done for the wavefront as a whole. This expression benefits by "
"having a masked select composite location description operation. This "
"requires an attribute for source location of each lane. The AMDGPU may "
"update the execution mask for whole wavefront operations and so needs an "
"attribute that computes the current active lane mask. See "
"``DW_OP_LLVM_select_bit_piece``, ``DW_OP_LLVM_extend``, "
"``DW_AT_LLVM_lane_pc``, and ``DW_AT_LLVM_active_lane``."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:184
msgid ""
"AMDGPU needs to be able to describe addresses that are in different kinds of "
"memory. Optimized code may need to describe a variable that resides in "
"pieces that are in different kinds of storage which may include parts of "
"registers, memory that is in a mixture of memory kinds, implicit values, or "
"be undefined. DWARF has the concept of segment addresses. However, the "
"segment cannot be specified within a DWARF expression, which is only able to "
"specify the offset portion of a segment address. The segment index is only "
"provided by the entity that specifies the DWARF expression. Therefore, the "
"segment index is a property that can only be put on complete objects, such "
"as a variable. That makes it only suitable for describing an entity (such as "
"variable or subprogram code) that is in a single kind of memory. Therefore, "
"AMDGPU uses the DWARF concept of address spaces. For example, a variable may "
"be allocated in a register that is partially spilled to the call stack which "
"is in the private address space, and partially spilled to the local address "
"space."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:199
msgid ""
"DWARF uses the concept of an address in many expression operations but does "
"not define how it relates to address spaces. For example, "
"``DW_OP_push_object_address`` pushes the address of an object. Other "
"contexts implicitly push an address on the stack before evaluating an "
"expression. For example, the ``DW_AT_use_location`` attribute of the "
"``DW_TAG_ptr_to_member_type``. The expression that uses the address needs to "
"do so in a general way and not need to be dependent on the address space of "
"the address. For example, a pointer to member value may want to be applied "
"to an object that may reside in any address space."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:209
msgid ""
"The number of registers and the cost of memory operations is much higher for "
"AMDGPU than a typical CPU. The compiler attempts to optimize whole variables "
"and arrays into registers. Currently DWARF only allows "
"``DW_OP_push_object_address`` and related operations to work with a global "
"memory location. To support AMDGPU optimized code it is required to "
"generalize DWARF to allow any location description to be used. This allows "
"registers, or composite location descriptions that may be a mixture of "
"memory, registers, or even implicit values."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:218
msgid ""
"DWARF Version 5 does not allow location descriptions to be entries on the "
"DWARF stack. They can only be the final result of the evaluation of a DWARF "
"expression. However, by allowing a location description to be a first-class "
"entry on the DWARF stack it becomes possible to compose expressions "
"containing both values and location descriptions naturally. It allows "
"objects to be located in any kind of memory address space, in registers, be "
"implicit values, be undefined, or a composite of any of these. By extending "
"DWARF carefully, all existing DWARF expressions can retain their current "
"semantic meaning. DWARF has implicit conversions that convert from a value "
"that represents an address in the default address space to a memory location "
"description. This can be extended to allow a default address space memory "
"location description to be implicitly converted back to its address value. "
"This allows all DWARF Version 5 expressions to retain their same meaning, "
"while adding the ability to explicitly create memory location descriptions "
"in non-default address spaces and generalizing the power of composite "
"location descriptions to any kind of location description. See :ref:`amdgpu-"
"dwarf-operation-expressions`."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:235
msgid ""
"To allow composition of composite location descriptions, an explicit "
"operation that indicates the end of the definition of a composite location "
"description is required. This can be implied if the end of a DWARF "
"expression is reached, allowing current DWARF expressions to remain legal. "
"See ``DW_OP_LLVM_piece_end``."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:241
msgid ""
"The ``DW_OP_plus`` and ``DW_OP_minus`` can be defined to operate on a memory "
"location description in the default target architecture specific address "
"space and a generic type value to produce an updated memory location "
"description. This allows them to continue to be used to offset an address. "
"To generalize offsetting to any location description, including location "
"descriptions that describe when bytes are in registers, are implicit, or a "
"composite of these, the ``DW_OP_LLVM_offset``, ``DW_OP_LLVM_offset_uconst``, "
"and ``DW_OP_LLVM_bit_offset`` offset operations are added. Unlike "
"``DW_OP_plus``, ``DW_OP_plus_uconst``, and ``DW_OP_minus`` arithmetic "
"operations, these do not define that integer overflow causes wrap-around. "
"The offset operations can operate on location storage of any size. For "
"example, implicit location storage could be any number of bits in size. It "
"is simpler to define offsets that exceed the size of the location storage as "
"being ill-formed, than having to force an implementation to support "
"potentially infinite precision offsets to allow it to correctly track a "
"series of positive and negative offsets that may transiently overflow or "
"underflow, but end up in range. This is simple for the arithmetic operations "
"as they are defined in terms of two's compliment arithmetic on a base type "
"of a fixed size."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:260
msgid ""
"Having the offset operations allows ``DW_OP_push_object_address`` to push a "
"location description that may be in a register, or be an implicit value, and "
"the DWARF expression of ``DW_TAG_ptr_to_member_type`` can contain them to "
"offset within it. ``DW_OP_LLVM_bit_offset`` generalizes DWARF to work with "
"bit fields which is not possible in DWARF Version 5."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:266
msgid ""
"The DWARF ``DW_OP_xderef*`` operations allow a value to be converted into an "
"address of a specified address space which is then read. But it provides no "
"way to create a memory location description for an address in the non-"
"default address space. For example, AMDGPU variables can be allocated in the "
"local address space at a fixed address. It is required to have an operation "
"to create an address in a specific address space that can be used to define "
"the location description of the variable. Defining this operation to produce "
"a location description allows the size of addresses in an address space to "
"be larger than the generic type. See ``DW_OP_LLVM_form_aspace_address``."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:276
msgid ""
"If the ``DW_OP_LLVM_form_aspace_address`` operation had to produce a value "
"that can be implicitly converted to a memory location description, then it "
"would be limited to the size of the generic type which matches the size of "
"the default address space. Its value would be unspecified and likely not "
"match any value in the actual program. By making the result a location "
"description, it allows a consumer great freedom in how it implements it. The "
"implicit conversion back to a value can be limited only to the default "
"address space to maintain compatibility with DWARF Version 5. For other "
"address spaces the producer can use the new operations that explicitly "
"specify the address space."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:286
msgid ""
"``DW_OP_breg*`` treats the register as containing an address in the default "
"address space. It is required to be able to specify the address space of the "
"register value. See ``DW_OP_LLVM_aspace_bregx``."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:290
msgid ""
"Similarly, ``DW_OP_implicit_pointer`` treats its implicit pointer value as "
"being in the default address space. It is required to be able to specify the "
"address space of the pointer value. See "
"``DW_OP_LLVM_aspace_implicit_pointer``."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:295
msgid ""
"Almost all uses of addresses in DWARF are limited to defining location "
"descriptions, or to be dereferenced to read memory. The exception is "
"``DW_CFA_val_offset`` which uses the address to set the value of a register. "
"By defining the CFA DWARF expression as being a memory location description, "
"it can maintain what address space it is, and that can be used to convert "
"the offset address back to an address in that address space. See :ref:"
"`amdgpu-dwarf-call-frame-information`."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:303
msgid ""
"This approach allows all existing DWARF to have the identical semantics. It "
"allows the compiler to explicitly specify the address space it is using. For "
"example, a compiler could choose to access private memory in a swizzled "
"manner when mapping a source language to a wavefront in a SIMT manner, or to "
"access it in an unswizzled manner if mapping the same language with the "
"wavefront being the thread. It also allows the compiler to mix the address "
"space it uses to access private memory. For example, for SIMT it can still "
"spill entire vector registers in an unswizzled manner, while using a "
"swizzled private memory for SIMT variable access. This approach allows "
"memory location descriptions for different address spaces to be combined "
"using the regular ``DW_OP_*piece`` operations."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:315
msgid ""
"Location descriptions are an abstraction of storage, they give freedom to "
"the consumer on how to implement them. They allow the address space to "
"encode lane information so they can be used to read memory with only the "
"memory description and no extra arguments. The same set of operations can "
"operate on locations independent of their kind of storage. The "
"``DW_OP_deref*`` therefore can be used on any storage kind. "
"``DW_OP_xderef*`` is unnecessary except to become a more compact way to "
"convert a non-default address space address followed by dereferencing it."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:324
msgid ""
"In DWARF Version 5 a location description is defined as a single location "
"description or a location list. A location list is defined as either "
"effectively an undefined location description or as one or more single "
"location descriptions to describe an object with multiple places. The "
"``DW_OP_push_object_address`` and ``DW_OP_call*`` operations can put a "
"location description on the stack. Furthermore, debugger information entry "
"attributes such as ``DW_AT_data_member_location``, ``DW_AT_use_location``, "
"and ``DW_AT_vtable_elem_location`` are defined as pushing a location "
"description on the expression stack before evaluating the expression. "
"However, DWARF Version 5 only allows the stack to contain values and so only "
"a single memory address can be on the stack which makes these incapable of "
"handling location descriptions with multiple places, or places other than "
"memory. Since this proposal allows the stack to contain location "
"descriptions, the operations are generalized to support location "
"descriptions that can have multiple places. This is backwards compatible "
"with DWARF Version 5 and allows objects with multiple places to be "
"supported. For example, the expression that describes how to access the "
"field of an object can be evaluated with a location description that has "
"multiple places and will result in a location description with multiple "
"places as expected. With this change, the separate DWARF Version 5 sections "
"that described DWARF expressions and location lists have been unified into a "
"single section that describes DWARF expressions in general. This unification "
"seems to be a natural consequence and a necessity of allowing location "
"descriptions to be part of the evaluation stack."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:348
msgid ""
"For those familiar with the definition of location descriptions in DWARF "
"Version 5, the definition in this proposal is presented differently, but "
"does in fact define the same concept with the same fundamental semantics. "
"However, it does so in a way that allows the concept to extend to support "
"address spaces, bit addressing, the ability for composite location "
"descriptions to be composed of any kind of location description, and the "
"ability to support objects located at multiple places. Collectively these "
"changes expand the set of processors that can be supported and improves "
"support for optimized code."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:357
msgid ""
"Several approaches were considered, and the one proposed appears to be the "
"cleanest and offers the greatest improvement of DWARF's ability to support "
"optimized code. Examining the GDB debugger and LLVM compiler, it appears "
"only to require modest changes as they both already have to support general "
"use of location descriptions. It is anticipated that will also be the case "
"for other debuggers and compilers."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:364
msgid ""
"As an experiment, GDB was modified to evaluate DWARF Version 5 expressions "
"with location descriptions as stack entries and implicit conversions. All "
"GDB tests have passed, except one that turned out to be an invalid test by "
"DWARF Version 5 rules. The code in GDB actually became simpler as all "
"evaluation was on the stack and there was no longer a need to maintain a "
"separate structure for the location description result. This gives "
"confidence of the backwards compatibility."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:372
msgid ""
"Since the AMDGPU supports languages such as OpenCL [:ref:`OpenCL <amdgpu-"
"dwarf-OpenCL>`], there is a need to define source language address classes "
"so they can be used in a consistent way by consumers. It would also be "
"desirable to add support for using them in defining language types rather "
"than the current target architecture specific address spaces. See :ref:"
"`amdgpu-dwarf-segment_addresses`."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:379
msgid ""
"A ``DW_AT_LLVM_augmentation`` attribute is added to a compilation unit "
"debugger information entry to indicate that there is additional target "
"architecture specific information in the debugging information entries of "
"that compilation unit. This allows a consumer to know what extensions are "
"present in the debugger information entries as is possible with the "
"augmentation string of other sections. The format that should be used for "
"the augmentation string in the lookup by name table and CFI Common "
"Information Entry is also recommended to allow a consumer to parse the "
"string when it contains information from multiple vendors."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:389
msgid ""
"The AMDGPU supports programming languages that include online compilation "
"where the source text may be created at runtime. Therefore, a way to embed "
"the source text in the debug information is required. For example, the "
"OpenCL language runtime supports online compilation. See :ref:`amdgpu-dwarf-"
"line-number-information`."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:395
msgid ""
"Support to allow MD5 checksums to be optionally present in the line table is "
"added. This allows linking together compilation units where some have MD5 "
"checksums and some do not. In DWARF Version 5 the file timestamp and file "
"size can be optional, but if the MD5 checksum is present it must be valid "
"for all files. See :ref:`amdgpu-dwarf-line-number-information`."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:401
msgid ""
"Support is added for the HIP programming language [:ref:`HIP <amdgpu-dwarf-"
"HIP>`] which is supported by the AMDGPU. See :ref:`amdgpu-dwarf-language-"
"names`."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:405
msgid ""
"The following sections provide the definitions for the additional "
"operations, as well as clarifying how existing expression operations, CFI "
"operations, and attributes behave with respect to generalized location "
"descriptions that support address spaces and location descriptions that "
"support multiple places. It has been defined such that it is backwards "
"compatible with DWARF Version 5. The definitions are intended to fully "
"define well-formed DWARF in a consistent style based on the DWARF Version 5 "
"specification. Non-normative text is shown in *italics*."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:414
msgid ""
"The names for the new operations, attributes, and constants include \"\\ "
"``LLVM``\\ \" and are encoded with vendor specific codes so this proposal "
"can be implemented as an LLVM vendor extension to DWARF Version 5. If "
"accepted these names would not include the \"\\ ``LLVM``\\ \" and would not "
"use encodings in the vendor range."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:420
msgid ""
"The proposal is described in :ref:`amdgpu-dwarf-proposed-changes-relative-to-"
"dwarf-version-5` and is organized to follow the section ordering of DWARF "
"Version 5. It includes notes to indicate the corresponding DWARF Version 5 "
"sections to which they pertain. Other notes describe additional changes that "
"may be worth considering, and to raise questions."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:430
msgid "Proposed Changes Relative to DWARF Version 5"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:433
msgid "General Description"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:436
msgid "Attribute Types"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:440
msgid "This augments DWARF Version 5 section 2.2 and Table 2.2."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:442
msgid ""
"The following table provides the additional attributes. See :ref:`amdgpu-"
"dwarf-debugging-information-entry-attributes`."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:445
msgid "Attribute names"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:449
msgid "Attribute"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:449
msgid "Usage"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:451
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3814
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3817
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3820
msgid "``DW_AT_LLVM_active_lane``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:451
msgid "SIMD or SIMT active lanes"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:452
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3813
msgid "``DW_AT_LLVM_augmentation``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:452
msgid "Compilation unit augmentation string"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:453
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3815
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3818
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3821
msgid "``DW_AT_LLVM_lane_pc``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:453
msgid "SIMD or SIMT lane program location"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:454
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3816
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3819
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3822
msgid "``DW_AT_LLVM_lanes``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:454
msgid "SIMD or SIMT thread lane count"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:455
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3812
msgid "``DW_AT_LLVM_vector_size``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:455
msgid "Base type vector size"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:461
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3658
msgid "DWARF Expressions"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:465
msgid ""
"This section, and its nested sections, replaces DWARF Version 5 section 2.5 "
"and section 2.6. The new proposed DWARF expression operations are defined as "
"well as clarifying the extensions to already existing DWARF Version 5 "
"operations. It is based on the text of the existing DWARF Version 5 standard."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:470
msgid ""
"DWARF expressions describe how to compute a value or specify a location."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:472
msgid ""
"*The evaluation of a DWARF expression can provide the location of an object, "
"the value of an array bound, the length of a dynamic string, the desired "
"value itself, and so on.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:476
msgid ""
"The evaluation of a DWARF expression can either result in a value or a "
"location description:"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:479
msgid "*value*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:481
msgid ""
"A value has a type and a literal value. It can represent a literal value of "
"any supported base type of the target architecture. The base type specifies "
"the size and encoding of the literal value."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:487
msgid ""
"It may be desirable to add an implicit pointer base type encoding. It would "
"be used for the type of the value that is produced when the ``DW_OP_deref*`` "
"operation retrieves the full contents of an implicit pointer location "
"storage created by the ``DW_OP_implicit_pointer`` or "
"``DW_OP_LLVM_aspace_implicit_pointer`` operations. The literal value would "
"record the debugging information entry and byte dispacement specified by the "
"associated ``DW_OP_implicit_pointer`` or "
"``DW_OP_LLVM_aspace_implicit_pointer`` operations."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:496
msgid ""
"Instead of a base type, a value can have a distinguished generic type, which "
"is an integral type that has the size of an address in the target "
"architecture default address space and unspecified signedness."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:500
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1007
msgid ""
"*The generic type is the same as the unspecified type used for stack "
"operations defined in DWARF Version 4 and before.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:503
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1010
msgid ""
"An integral type is a base type that has an encoding of ``DW_ATE_signed``, "
"``DW_ATE_signed_char``, ``DW_ATE_unsigned``, ``DW_ATE_unsigned_char``, "
"``DW_ATE_boolean``, or any target architecture defined integral encoding in "
"the inclusive range ``DW_ATE_lo_user`` to ``DW_ATE_hi_user``."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:510
msgid ""
"It is unclear if ``DW_ATE_address`` is an integral type. GDB does not seem "
"to consider it as integral."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:513
msgid "*location description*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:515
msgid ""
"*Debugging information must provide consumers a way to find the location of "
"program variables, determine the bounds of dynamic arrays and strings, and "
"possibly to find the base address of a subprogram’s stack frame or the "
"return address of a subprogram. Furthermore, to meet the needs of recent "
"computer architectures and optimization techniques, debugging information "
"must be able to describe the location of an object whose location changes "
"over the object’s lifetime, and may reside at multiple locations "
"simultaneously during parts of an object's lifetime.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:524
msgid ""
"Information about the location of program objects is provided by location "
"descriptions."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:527
msgid ""
"Location descriptions can consist of one or more single location "
"descriptions."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:529
msgid ""
"A single location description specifies the location storage that holds a "
"program object and a position within the location storage where the program "
"object starts. The position within the location storage is expressed as a "
"bit offset relative to the start of the location storage."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:534
msgid ""
"A location storage is a linear stream of bits that can hold values. Each "
"location storage has a size in bits and can be accessed using a zero-based "
"bit offset. The ordering of bits within a location storage uses the bit "
"numbering and direction conventions that are appropriate to the current "
"language on the target architecture."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:540
msgid "There are five kinds of location storage:"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:543
msgid "*memory location storage*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:543
msgid "Corresponds to the target architecture memory address spaces."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:546
msgid "*register location storage*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:546
msgid "Corresponds to the target architecture registers."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:549
msgid "*implicit location storage*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:549
msgid "Corresponds to fixed values that can only be read."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:552
msgid "*undefined location storage*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:552
msgid ""
"Indicates no value is available and therefore cannot be read or written."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:557
msgid "*composite location storage*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:555
msgid ""
"Allows a mixture of these where some bits come from one location storage and "
"some from another location storage, or from disjoint parts of the same "
"location storage."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:561
msgid ""
"It may be better to add an implicit pointer location storage kind used by "
"the ``DW_OP_implicit_pointer`` and ``DW_OP_LLVM_aspace_implicit_pointer`` "
"operations. It would specify the debugger information entry and byte offset "
"provided by the operations."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:566
msgid ""
"*Location descriptions are a language independent representation of "
"addressing rules. They are created using DWARF operation expressions of "
"arbitrary complexity. They can be the result of evaluting a debugger "
"information entry attribute that specifies an operation expression. In this "
"usage they can describe the location of an object as long as its lifetime is "
"either static or the same as the lexical block (see DWARF Version 5 section "
"3.5) that owns it, and it does not move during its lifetime. They can be the "
"result of evaluating a debugger information entry attribute that specifies a "
"location list expression. In this usage they can describe the location of an "
"object that has a limited lifetime, changes its location during its "
"lifetime, or has multiple locations over part or all of its lifetime.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:578
msgid ""
"If a location description has more than one single location description, the "
"DWARF expression is ill-formed if the object value held in each single "
"location description's position within the associated location storage is "
"not the same value, except for the parts of the value that are uninitialized."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:583
msgid ""
"*A location description that has more than one single location description "
"can only be created by a location list expression that has overlapping "
"program location ranges, or certain expression operations that act on a "
"location description that has more than one single location description. "
"There are no operation expression operations that can directly create a "
"location description with more than one single location description.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:590
msgid ""
"*A location description with more than one single location description can "
"be used to describe objects that reside in more than one piece of storage at "
"the same time. An object may have more than one location as a result of "
"optimization. For example, a value that is only read may be promoted from "
"memory to a register for some region of code, but later code may revert to "
"reading the value from memory as the register may be used for other "
"purposes. For the code region where the value is in a register, any change "
"to the object value must be made in both the register and the memory so both "
"regions of code will read the updated value.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:600
msgid ""
"*A consumer of a location description with more than one single location "
"description can read the object's value from any of the single location "
"descriptions (since they all refer to location storage that has the same "
"value), but must write any changed value to all the single location "
"descriptions.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:606
msgid ""
"A DWARF expression can either be encoded as a operation expression (see :ref:"
"`amdgpu-dwarf-operation-expressions`), or as a location list expression "
"(see :ref:`amdgpu-dwarf-location-list-expressions`)."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:610
msgid "A DWARF expression is evaluated in the context of:"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:615
msgid "*A current subprogram*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:613
msgid ""
"This may be used in the evaluation of register access operations to support "
"virtual unwinding of the call stack (see :ref:`amdgpu-dwarf-call-frame-"
"information`)."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:622
msgid "*A current program location*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:618
msgid ""
"This may be used in the evaluation of location list expressions to select "
"amongst multiple program location ranges. It should be the program location "
"corresponding to the current subprogram. If the current subprogram was "
"reached by virtual call stack unwinding, then the program location will "
"correspond to the associated call site."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:631
msgid "*An initial stack*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:625
msgid ""
"This is a list of values or location descriptions that will be pushed on the "
"operation expression evaluation stack in the order provided before "
"evaluation of an operation expression starts."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:629
msgid ""
"Some debugger information entries have attributes that evaluate their DWARF "
"expression value with initial stack entries. In all other cases the initial "
"stack is empty."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:633
msgid ""
"When a DWARF expression is evaluated, it may be specified whether a value or "
"location description is required as the result kind."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:636
msgid ""
"If a result kind is specified, and the result of the evaluation does not "
"match the specified result kind, then the implicit conversions described in :"
"ref:`amdgpu-dwarf-memory-location-description-operations` are performed if "
"valid. Otherwise, the DWARF expression is ill-formed."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:644
msgid "DWARF Operation Expressions"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:646
msgid ""
"An operation expression is comprised of a stream of operations, each "
"consisting of an opcode followed by zero or more operands. The number of "
"operands is implied by the opcode."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:650
msgid ""
"Operations represent a postfix operation on a simple stack machine. Each "
"stack entry can hold either a value or a location description. Operations "
"can act on entries on the stack, including adding entries and removing "
"entries. If the kind of a stack entry does not match the kind required by "
"the operation and is not implicitly convertible to the required kind (see :"
"ref:`amdgpu-dwarf-memory-location-description-operations`), then the DWARF "
"operation expression is ill-formed."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:658
msgid ""
"Evaluation of an operation expression starts with an empty stack on which "
"the entries from the initial stack provided by the context are pushed in the "
"order provided. Then the operations are evaluated, starting with the first "
"operation of the stream, until one past the last operation of the stream is "
"reached. The result of the evaluation is:"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:664
msgid ""
"If evaluation of the DWARF expression requires a location description, then:"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:666
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:697
msgid ""
"If the stack is empty, the result is a location description with one "
"undefined location description."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:669
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:700
msgid ""
"*This rule is for backwards compatibility with DWARF Version 5 which has no "
"explicit operation to create an undefined location description, and uses an "
"empty operation expression for this purpose.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:673
msgid ""
"If the top stack entry is a location description, or can be converted to one "
"(see :ref:`amdgpu-dwarf-memory-location-description-operations`), then the "
"result is that, possibly converted, location description. Any other entries "
"on the stack are discarded."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:678
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:692
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1920
msgid "Otherwise the DWARF expression is ill-formed."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:682
msgid ""
"Could define this case as returning an implicit location description as if "
"the ``DW_OP_implicit`` operation is performed."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:685
msgid "If evaluation of the DWARF expression requires a value, then:"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:687
msgid ""
"If the top stack entry is a value, or can be converted to one (see :ref:"
"`amdgpu-dwarf-memory-location-description-operations`), then the result is "
"that, possibly converted, value. Any other entries on the stack are "
"discarded."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:694
msgid ""
"If evaluation of the DWARF expression does not specify if a value or "
"location description is required, then:"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:706
msgid ""
"This rule is consistent with the rule above for when a location description "
"is requested. However, GDB appears to report this as an error and no GDB "
"tests appear to cause an empty stack for this case."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:710
msgid ""
"Otherwise, the top stack entry is returned. Any other entries on the stack "
"are discarded."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:713
msgid ""
"An operation expression is encoded as a byte block with some form of prefix "
"that specifies the byte count. It can be used:"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:716
msgid ""
"as the value of a debugging information entry attribute that is encoded "
"using class ``exprloc`` (see DWARF Version 5 section 7.5.5),"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:719
msgid "as the operand to certain operation expression operations,"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:721
msgid ""
"as the operand to certain call frame information operations (see :ref:"
"`amdgpu-dwarf-call-frame-information`),"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:724
msgid ""
"and in location list entries (see :ref:`amdgpu-dwarf-location-list-"
"expressions`)."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:730
msgid "Stack Operations"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:732
msgid ""
"The following operations manipulate the DWARF stack. Operations that index "
"the stack assume that the top of the stack (most recently added entry) has "
"index 0. They allow the stack entries to be either a value or location "
"description."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:736
msgid ""
"If any stack entry accessed by a stack operation is an incomplete composite "
"location description (see :ref:`amdgpu-dwarf-composite-location-description-"
"operations`), then the DWARF expression is ill-formed."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:743
msgid ""
"These operations now support stack entries that are values and location "
"descriptions."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:748
msgid ""
"If it is desired to also make them work with incomplete composite location "
"descriptions, then would need to define that the composite location storage "
"specified by the incomplete composite location description is also "
"replicated when a copy is pushed. This ensures that each copy of the "
"incomplete composite location description can update the composite location "
"storage they specify independently."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:755
msgid "``DW_OP_dup``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:757
msgid "``DW_OP_dup`` duplicates the stack entry at the top of the stack."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:759
msgid "``DW_OP_drop``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:761
msgid ""
"``DW_OP_drop`` pops the stack entry at the top of the stack and discards it."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:763
msgid "``DW_OP_pick``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:765
msgid ""
"``DW_OP_pick`` has a single unsigned 1-byte operand that represents an index "
"I. A copy of the stack entry with index I is pushed onto the stack."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:768
msgid "``DW_OP_over``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:770
msgid "``DW_OP_over`` pushes a copy of the entry with index 1."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:772
msgid "*This is equivalent to a ``DW_OP_pick 1`` operation.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:774
msgid "``DW_OP_swap``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:776
msgid ""
"``DW_OP_swap`` swaps the top two stack entries. The entry at the top of the "
"stack becomes the second stack entry, and the second stack entry becomes the "
"top of the stack."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:780
msgid "``DW_OP_rot``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:782
msgid ""
"``DW_OP_rot`` rotates the first three stack entries. The entry at the top of "
"the stack becomes the third stack entry, the second entry becomes the top of "
"the stack, and the third entry becomes the second entry."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:789
msgid "Control Flow Operations"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:791
msgid ""
"The following operations provide simple control of the flow of a DWARF "
"operation expression."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:794
msgid "``DW_OP_nop``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:796
msgid ""
"``DW_OP_nop`` is a place holder. It has no effect on the DWARF stack entries."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:799
msgid ""
"``DW_OP_le``, ``DW_OP_ge``, ``DW_OP_eq``, ``DW_OP_lt``, ``DW_OP_gt``, "
"``DW_OP_ne``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:804
msgid "The same as in DWARF Version 5 section 2.5.1.5."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:806
msgid "``DW_OP_skip``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:808
msgid ""
"``DW_OP_skip`` is an unconditional branch. Its single operand is a 2-byte "
"signed integer constant. The 2-byte constant is the number of bytes of the "
"DWARF expression to skip forward or backward from the current operation, "
"beginning after the 2-byte constant."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:813
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:828
msgid ""
"If the updated position is at one past the end of the last operation, then "
"the operation expression evaluation is complete."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:816
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:831
msgid ""
"Otherwise, the DWARF expression is ill-formed if the updated operation "
"position is not in the range of the first to last operation inclusive, or "
"not at the start of an operation."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:820
msgid "``DW_OP_bra``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:822
msgid ""
"``DW_OP_bra`` is a conditional branch. Its single operand is a 2-byte signed "
"integer constant. This operation pops the top of stack. If the value popped "
"is not the constant 0, the 2-byte constant operand is the number of bytes of "
"the DWARF operation expression to skip forward or backward from the current "
"operation, beginning after the 2-byte constant."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:835
msgid "``DW_OP_call2, DW_OP_call4, DW_OP_call_ref``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:837
msgid ""
"``DW_OP_call2``, ``DW_OP_call4``, and ``DW_OP_call_ref`` perform DWARF "
"procedure calls during evaluation of a DWARF expression."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:840
msgid ""
"``DW_OP_call2`` and ``DW_OP_call4``, have one operand that is a 2- or 4-byte "
"unsigned offset, respectively, of a debugging information entry D in the "
"current compilation unit."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:844
msgid ""
"``DW_OP_call_ref`` has one operand that is a 4-byte unsigned value in the 32-"
"bit DWARF format, or an 8-byte unsigned value in the 64-bit DWARF format, "
"that represents an offset of a debugging information entry D in a ``."
"debug_info`` section, which may be contained in an executable or shared "
"object file other than that containing the operation. For references from "
"one executable or shared object file to another, the relocation must be "
"performed by the consumer."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:859
msgid ""
"*Operand interpretation of* ``DW_OP_call2``\\ *,* ``DW_OP_call4``\\ *, and* "
"``DW_OP_call_ref`` *is exactly like that for* ``DW_FORM_ref2``\\ *, "
"``DW_FORM_ref4``\\ *, and* ``DW_FORM_ref_addr``\\ *, respectively.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:863
msgid "The call operation is evaluated by:"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:865
msgid ""
"If D has a ``DW_AT_location`` attribute that is encoded as a ``exprloc`` "
"that specifies an operation expression E, then execution of the current "
"operation expression continues from the first operation of E. Execution "
"continues until one past the last operation of E is reached, at which point "
"execution continues with the operation following the call operation. Since E "
"is evaluated on the same stack as the call, E can use, add, and/or remove "
"entries already on the stack."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:873
msgid ""
"*Values on the stack at the time of the call may be used as parameters by "
"the called expression and values left on the stack by the called expression "
"may be used as return values by prior agreement between the calling and "
"called expressions.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:878
msgid ""
"If D has a ``DW_AT_location`` attribute that is encoded as a ``loclist`` or "
"``loclistsptr``, then the specified location list expression E is evaluated, "
"and the resulting location description is pushed on the stack. The "
"evaluation of E uses a context that has the same current frame and current "
"program location as the current operation expression, but an empty initial "
"stack."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:887
msgid ""
"This rule avoids having to define how to execute a matched location list "
"entry operation expression on the same stack as the call when there are "
"multiple matches. But it allows the call to obtain the location description "
"for a variable or formal parameter which may use a location list expression."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:893
msgid ""
"An alternative is to treat the case when D has a ``DW_AT_location`` "
"attribute that is encoded as a ``loclist`` or ``loclistsptr``, and the "
"specified location list expression E' matches a single location list entry "
"with operation expression E, the same as the ``exprloc`` case and evaluate "
"on the same stack."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:899
msgid ""
"But this is not attractive as if the attribute is for a variable that "
"happens to end with a non-singleton stack, it will not simply put a location "
"description on the stack. Presumably the intent of using ``DW_OP_call*`` on "
"a variable or formal parameter debugger information entry is to push just "
"one location description on the stack. That location description may have "
"more than one single location description."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:906
msgid ""
"The previous rule for ``exprloc`` also has the same problem as normally a "
"variable or formal parameter location expression may leave multiple entries "
"on the stack and only return the top entry."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:910
msgid ""
"GDB implements ``DW_OP_call*`` by always executing E on the same stack. If "
"the location list has multiple matching entries, it simply picks the first "
"one and ignores the rest. This seems fundementally at odds with the desire "
"to supporting multiple places for variables."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:915
msgid ""
"So, it feels like ``DW_OP_call*`` should both support pushing a location "
"description on the stack for a variable or formal parameter, and also "
"support being able to execute an operation expression on the same stack. "
"Being able to specify a different operation expression for different program "
"locations seems a desirable feature to retain."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:921
msgid ""
"A solution to that is to have a distinct ``DW_AT_LLVM_proc`` attribute for "
"the ``DW_TAG_dwarf_procedure`` debugging information entry. Then the "
"``DW_AT_location`` attribute expression is always executed separately and "
"pushes a location description (that may have multiple single location "
"descriptions), and the ``DW_AT_LLVM_proc`` attribute expression is always "
"executed on the same stack and can leave anything on the stack."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:929
msgid ""
"The ``DW_AT_LLVM_proc`` attribute could have the new classes ``exprproc``, "
"``loclistproc``, and ``loclistsptrproc`` to indicate that the expression is "
"executed on the same stack. ``exprproc`` is the same encoding as "
"``exprloc``. ``loclistproc`` and ``loclistsptrproc`` are the same encoding "
"as their non-\\ ``proc`` counterparts except the DWARF is ill-formed if the "
"location list does not match exactly one location list entry and a default "
"entry is required. These forms indicate explicitly that the matched single "
"operation expression must be executed on the same stack. This is better than "
"ad hoc special rules for ``loclistproc`` and ``loclistsptrproc`` which are "
"currently clearly defined to always return a location description. The "
"producer then explicitly indicates the intent through the attribute classes."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:942
msgid ""
"Such a change would be a breaking change for how GDB implements "
"``DW_OP_call*``. However, are the breaking cases actually occurring in "
"practice? GDB could implement the current approach for DWARF Version 5, and "
"the new semantics for DWARF Version 6 which has been done for some other "
"features."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:948
msgid ""
"Another option is to limit the execution to be on the same stack only to the "
"evaluation of an expression E that is the value of a ``DW_AT_location`` "
"attribute of a ``DW_TAG_dwarf_procedure`` debugging information entry. The "
"DWARF would be ill-formed if E is a location list expression that does not "
"match exactly one location list entry. In all other cases the evaluation of "
"an expression E that is the value of a ``DW_AT_location`` attribute would "
"evaluate E with a context that has the same current frame and current "
"program location as the current operation expression, but an empty initial "
"stack, and push the resulting location description on the stack."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:959
msgid ""
"If D has a ``DW_AT_const_value`` attribute with a value V, then it is as if "
"a ``DW_OP_implicit_value V`` operation was executed."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:962
msgid ""
"*This allows a call operation to be used to compute the location description "
"for any variable or formal parameter regardless of whether the producer has "
"optimized it to a constant. This is consistent with the "
"``DW_OP_implicit_pointer`` operation.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:969
msgid ""
"Alternatively, could deprecate using ``DW_AT_const_value`` for "
"``DW_TAG_variable`` and ``DW_TAG_formal_parameter`` debugger information "
"entries that are constants and instead use ``DW_AT_location`` with an "
"operation expression that results in a location description with one "
"implicit location description. Then this rule would not be required."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:975
msgid "Otherwise, there is no effect and no changes are made to the stack."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:979
msgid ""
"In DWARF Version 5, if D does not have a ``DW_AT_location`` then "
"``DW_OP_call*`` is defined to have no effect. It is unclear that this is the "
"right definition as a producer should be able to rely on using "
"``DW_OP_call*`` to get a location description for any non-\\ "
"``DW_TAG_dwarf_procedure`` debugging information entries. Also, the producer "
"should not be creating DWARF with ``DW_OP_call*`` to a "
"``DW_TAG_dwarf_procedure`` that does not have a ``DW_AT_location`` "
"attribute. So, should this case be defined as an ill-formed DWARF expression?"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:989
msgid ""
"*The* ``DW_TAG_dwarf_procedure`` *debugging information entry can be used to "
"define DWARF procedures that can be called.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:995
msgid "Value Operations"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:997
msgid "This section describes the operations that push values on the stack."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:999
msgid ""
"Each value stack entry has a type and a literal value and can represent a "
"literal value of any supported base type of the target architecture. The "
"base type specifies the size and encoding of the literal value."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1003
msgid ""
"Instead of a base type, value stack entries can have a distinguished generic "
"type, which is an integral type that has the size of an address in the "
"target architecture default address space and unspecified signedness."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1017
msgid ""
"Unclear if ``DW_ATE_address`` is an integral type. GDB does not seem to "
"consider it as integral."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1023
msgid "Literal Operations"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1025
msgid "The following operations all push a literal value onto the DWARF stack."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1027
msgid ""
"Operations other than ``DW_OP_const_type`` push a value V with the generic "
"type. If V is larger than the generic type, then V is truncated to the "
"generic type size and the low-order bits used."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1031
msgid "``DW_OP_lit0``, ``DW_OP_lit1``, ..., ``DW_OP_lit31``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1033
msgid ""
"``DW_OP_lit<N>`` operations encode an unsigned literal value N from 0 "
"through 31, inclusive. They push the value N with the generic type."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1036
msgid ""
"``DW_OP_const1u``, ``DW_OP_const2u``, ``DW_OP_const4u``, ``DW_OP_const8u``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1038
msgid ""
"``DW_OP_const<N>u`` operations have a single operand that is a 1, 2, 4, or 8-"
"byte unsigned integer constant U, respectively. They push the value U with "
"the generic type."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1042
msgid ""
"``DW_OP_const1s``, ``DW_OP_const2s``, ``DW_OP_const4s``, ``DW_OP_const8s``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1044
msgid ""
"``DW_OP_const<N>s`` operations have a single operand that is a 1, 2, 4, or 8-"
"byte signed integer constant S, respectively. They push the value S with the "
"generic type."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1048
msgid "``DW_OP_constu``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1050
msgid ""
"``DW_OP_constu`` has a single unsigned LEB128 integer operand N. It pushes "
"the value N with the generic type."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1053
msgid "``DW_OP_consts``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1055
msgid ""
"``DW_OP_consts`` has a single signed LEB128 integer operand N. It pushes the "
"value N with the generic type."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1058
msgid "``DW_OP_constx``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1060
msgid ""
"``DW_OP_constx`` has a single unsigned LEB128 integer operand that "
"represents a zero-based index into the ``.debug_addr`` section relative to "
"the value of the ``DW_AT_addr_base`` attribute of the associated compilation "
"unit. The value N in the ``.debug_addr`` section has the size of the generic "
"type. It pushes the value N with the generic type."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1066
msgid ""
"*The* ``DW_OP_constx`` *operation is provided for constants that require "
"link-time relocation but should not be interpreted by the consumer as a "
"relocatable address (for example, offsets to thread-local storage).*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1070
msgid "``DW_OP_const_type``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1072
msgid ""
"``DW_OP_const_type`` has three operands. The first is an unsigned LEB128 "
"integer that represents the offset of a debugging information entry D in the "
"current compilation unit, that provides the type of the constant value. The "
"second is a 1-byte unsigned integral constant S. The third is a block of "
"bytes B, with a length equal to S."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1078
msgid ""
"T is the bit size of the type D. The least significant T bits of B are "
"interpreted as a value V of the type D. It pushes the value V with the type "
"D."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1082
msgid ""
"The DWARF is ill-formed if D is not a ``DW_TAG_base_type`` debugging "
"information entry, or if T divided by 8 and rounded up to a multiple of 8 "
"(the byte size) is not equal to S."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1086
msgid ""
"*While the size of the byte block B can be inferred from the type D "
"definition, it is encoded explicitly into the operation so that the "
"operation can be parsed easily without reference to the* ``.debug_info`` "
"*section.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1091
msgid "``DW_OP_LLVM_push_lane`` *New*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1093
msgid ""
"``DW_OP_LLVM_push_lane`` pushes a value with the generic type that is the "
"target architecture specific lane identifier of the thread of execution for "
"which a user presented expression is currently being evaluated."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1097
msgid ""
"*For languages that are implemented using a SIMD or SIMT execution model, "
"this is the lane number that corresponds to the source language thread of "
"execution upon which the user is focused.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1104
msgid "Arithmetic and Logical Operations"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1108
msgid "This section is the same as DWARF Version 5 section 2.5.1.4."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1113
msgid "Type Conversion Operations"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1117
msgid "This section is the same as DWARF Version 5 section 2.5.1.6."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1122
msgid "Special Value Operations"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1124
msgid "There are these special value operations currently defined:"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1126
msgid "``DW_OP_regval_type``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1128
msgid ""
"``DW_OP_regval_type`` has two operands. The first is an unsigned LEB128 "
"integer that represents a register number R. The second is an unsigned "
"LEB128 integer that represents the offset of a debugging information entry D "
"in the current compilation unit, that provides the type of the register "
"value."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1134
msgid ""
"The contents of register R are interpreted as a value V of the type D. The "
"value V is pushed on the stack with the type D."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1137
msgid ""
"The DWARF is ill-formed if D is not a ``DW_TAG_base_type`` debugging "
"information entry, or if the size of type D is not the same as the size of "
"register R."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1143
msgid ""
"Should DWARF allow the type D to be a different size to the size of the "
"register R? Requiring them to be the same bit size avoids any issue of "
"conversion as the bit contents of the register is simply interpreted as a "
"value of the specified type. If a conversion is wanted it can be done "
"explicitly using a ``DW_OP_convert`` operation."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1149
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3098
msgid ""
"GDB has a per register hook that allows a target specific conversion on a "
"register by register basis. It defaults to truncation of bigger registers, "
"and to actually reading bytes from the next register (or reads out of bounds "
"for the last register) for smaller registers. There are no GDB tests that "
"read a register out of bounds (except an illegal hand written assembly test)."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1156
msgid "``DW_OP_deref``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1158
msgid ""
"The ``DW_OP_deref`` operation pops one stack entry that must be a location "
"description L."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1161
msgid ""
"A value of the bit size of the generic type is retrieved from the location "
"storage specified by L. The value V retrieved is pushed on the stack with "
"the generic type."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1165
msgid ""
"If any bit of the value is retrieved from the undefined location storage, or "
"the offset of any bit exceeds the size of the location storage specified by "
"L, then the DWARF expression is ill-formed."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1169
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1206
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1228
msgid ""
"See :ref:`amdgpu-dwarf-implicit-location-descriptions` for special rules "
"concerning implicit location descriptions created by the "
"``DW_OP_implicit_pointer`` and ``DW_OP_LLVM_implicit_aspace_pointer`` "
"operations."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1174
msgid ""
"*If L, or the location description of any composite location description "
"part that is a subcomponent of L, has more than one single location "
"description, then any one of them can be selected as they are required to "
"all have the same value. For any single location description SL, bits are "
"retrieved from the associated storage location starting at the bit offset "
"specified by SL. For a composite location description, the retrieved bits "
"are the concatenation of the N bits from each composite location part PL, "
"where N is limited to the size of PL.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1183
msgid "``DW_OP_deref_size``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1185
msgid ""
"``DW_OP_deref_size`` has a single 1-byte unsigned integral constant that "
"represents a byte result size S."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1188
msgid "It pops one stack entry that must be a location description L."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1190
msgid ""
"T is the smaller of the generic type size and S scaled by 8 (the byte size). "
"A value V of T bits is retrieved from the location storage specified by L. "
"If V is smaller than the size of the generic type, V is zero-extended to the "
"generic type size. V is pushed onto the stack with the generic type."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1195
msgid ""
"The DWARF expression is ill-formed if any bit of the value is retrieved from "
"the undefined location storage, or if the offset of any bit exceeds the size "
"of the location storage specified by L."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1201
msgid ""
"Truncating the value when S is larger than the generic type matches what GDB "
"does. This allows the generic type size to not be a integral byte size. It "
"does allow S to be arbitrarily large. Should S be restricted to the size of "
"the generic type rounded up to a multiple of 8?"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1211
msgid "``DW_OP_deref_type``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1213
msgid ""
"``DW_OP_deref_type`` has two operands. The first is a 1-byte unsigned "
"integral constant S. The second is an unsigned LEB128 integer that "
"represents the offset of a debugging information entry D in the current "
"compilation unit, that provides the type of the result value."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1218
msgid ""
"It pops one stack entry that must be a location description L. T is the bit "
"size of the type D. A value V of T bits is retrieved from the location "
"storage specified by L. V is pushed on the stack with the type D."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1222
msgid ""
"The DWARF is ill-formed if D is not a ``DW_TAG_base_type`` debugging "
"information entry, if T divided by 8 and rounded up to a multiple of 8 (the "
"byte size) is not equal to S, if any bit of the value is retrieved from the "
"undefined location storage, or if the offset of any bit exceeds the size of "
"the location storage specified by L."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1233
msgid ""
"*While the size of the pushed value V can be inferred from the type D "
"definition, it is encoded explicitly into the operation so that the "
"operation can be parsed easily without reference to the* ``.debug_info`` "
"*section.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1240
msgid ""
"It is unclear why the operand S is needed. Unlike ``DW_OP_const_type``, the "
"size is not needed for parsing. Any evaluation needs to get the base type to "
"record with the value to know its encoding and bit size."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1244
msgid ""
"This definition allows the base type to be a bit size since there seems no "
"reason to restrict it."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1247
msgid "``DW_OP_xderef`` *Deprecated*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1249
msgid ""
"``DW_OP_xderef`` pops two stack entries. The first must be an integral type "
"value that represents an address A. The second must be an integral type "
"value that represents a target architecture specific address space "
"identifier AS."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1254
msgid ""
"The operation is equivalent to performing ``DW_OP_swap; "
"DW_OP_LLVM_form_aspace_address; DW_OP_deref``. The value V retrieved is left "
"on the stack with the generic type."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1258
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1274
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1292
msgid ""
"*This operation is deprecated as the* ``DW_OP_LLVM_form_aspace_address`` "
"*operation can be used and provides greater expressiveness.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1261
msgid "``DW_OP_xderef_size`` *Deprecated*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1263
msgid ""
"``DW_OP_xderef_size`` has a single 1-byte unsigned integral constant that "
"represents a byte result size S."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1266
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1284
msgid ""
"It pops two stack entries. The first must be an integral type value that "
"represents an address A. The second must be an integral type value that "
"represents a target architecture specific address space identifier AS."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1270
msgid ""
"The operation is equivalent to performing ``DW_OP_swap; "
"DW_OP_LLVM_form_aspace_address; DW_OP_deref_size S``. The zero-extended "
"value V retrieved is left on the stack with the generic type."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1277
msgid "``DW_OP_xderef_type`` *Deprecated*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1279
msgid ""
"``DW_OP_xderef_type`` has two operands. The first is a 1-byte unsigned "
"integral constant S. The second operand is an unsigned LEB128 integer R that "
"represents the offset of a debugging information entry D in the current "
"compilation unit, that provides the type of the result value."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1288
msgid ""
"The operation is equivalent to performing ``DW_OP_swap; "
"DW_OP_LLVM_form_aspace_address; DW_OP_deref_type S R``. The value V "
"retrieved is left on the stack with the type D."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1295
msgid "``DW_OP_entry_value`` *Deprecated*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1297
msgid ""
"``DW_OP_entry_value`` pushes the value that the described location held upon "
"entering the current subprogram."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1300
msgid ""
"It has two operands. The first is an unsigned LEB128 integer S. The second "
"is a block of bytes, with a length equal S, interpreted as a DWARF operation "
"expression E."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1304
msgid ""
"E is evaluated as if it had been evaluated upon entering the current "
"subprogram with an empty initial stack."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1309
msgid ""
"It is unclear what this means. What is the current program location and "
"current frame that must be used? Does this require reverse execution so the "
"register and memory state are as it was on entry to the current subprogram?"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1314
msgid ""
"The DWARF expression is ill-formed if the evaluation of E executes a "
"``DW_OP_push_object_address`` operation."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1317
msgid ""
"If the result of E is a location description with one register location "
"description (see :ref:`amdgpu-dwarf-register-location-descriptions`), "
"``DW_OP_entry_value`` pushes the value that register had upon entering the "
"current subprogram. The value entry type is the target architecture register "
"base type. If the register value is undefined or the register location "
"description bit offset is not 0, then the DWARF expression is ill-formed."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1324
msgid ""
"*The register location description provides a more compact form for the case "
"where the value was in a register on entry to the subprogram.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1327
msgid ""
"If the result of E is a value V, ``DW_OP_entry_value`` pushes V on the stack."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1330
msgid "Otherwise, the DWARF expression is ill-formed."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1332
msgid ""
"*The values needed to evaluate* ``DW_OP_entry_value`` *could be obtained in "
"several ways. The consumer could suspend execution on entry to the "
"subprogram, record values needed by* ``DW_OP_entry_value`` *expressions "
"within the subprogram, and then continue. When evaluating* "
"``DW_OP_entry_value``\\ *, the consumer would use these recorded values "
"rather than the current values. Or, when evaluating* ``DW_OP_entry_value``\\ "
"*, the consumer could virtually unwind using the Call Frame Information "
"(see* :ref:`amdgpu-dwarf-call-frame-information`\\ *) to recover register "
"values that might have been clobbered since the subprogram entry point.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1342
msgid ""
"*The* ``DW_OP_entry_value`` *operation is deprecated as its main usage is "
"provided by other means. DWARF Version 5 added the* "
"``DW_TAG_call_site_parameter`` *debugger information entry for call sites "
"that has* ``DW_AT_call_value``\\ *,* ``DW_AT_call_data_location``\\ *, and* "
"``DW_AT_call_data_value`` *attributes that provide DWARF expressions to "
"compute actual parameter values at the time of the call, and requires the "
"producer to ensure the expressions are valid to evaluate even when virtually "
"unwound. The* ``DW_OP_LLVM_call_frame_entry_reg`` *operation provides access "
"to registers in the virtually unwound calling frame.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1354
msgid ""
"It is unclear why this operation is defined this way. How would a consumer "
"know what values have to be saved on entry to the subprogram? Does it have "
"to parse every expression of every ``DW_OP_entry_value`` operation to "
"capture all the possible results needed? Or does it have to implement "
"reverse execution so it can evaluate the expression in the context of the "
"entry of the subprogram so it can obtain the entry point register and memory "
"values? Or does the compiler somehow instruct the consumer how to create the "
"saved copies of the variables on entry?"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1363
msgid ""
"If the expression is simply using existing variables, then it is just a "
"regular expression and no special operation is needed. If the main purpose "
"is only to read the entry value of a register using CFI then it would be "
"better to have an operation that explicitly does just that such as the "
"proposed ``DW_OP_LLVM_call_frame_entry_reg`` operation."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1369
msgid ""
"GDB only seems to implement ``DW_OP_entry_value`` when E is exactly "
"``DW_OP_reg*`` or ``DW_OP_breg*; DW_OP_deref*``. It evaluates E in the "
"context of the calling subprogram and the calling call site program "
"location. But the wording suggests that is not the intention."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1374
msgid ""
"Given these issues it is suggested ``DW_OP_entry_value`` is deprecated in "
"favor of using the new facities that have well defined semantics and "
"implementations."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1381
msgid "Location Description Operations"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1383
msgid ""
"This section describes the operations that push location descriptions on the "
"stack."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1387
msgid "General Location Description Operations"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1389
msgid "``DW_OP_LLVM_offset`` *New*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1391
msgid ""
"``DW_OP_LLVM_offset`` pops two stack entries. The first must be an integral "
"type value that represents a byte displacement B. The second must be a "
"location description L."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1395
msgid ""
"It adds the value of B scaled by 8 (the byte size) to the bit offset of each "
"single location description SL of L, and pushes the updated L."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1398
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1429
msgid ""
"If the updated bit offset of any SL is less than 0 or greater than or equal "
"to the size of the location storage specified by SL, then the DWARF "
"expression is ill-formed."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1402
msgid "``DW_OP_LLVM_offset_uconst`` *New*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1404
msgid ""
"``DW_OP_LLVM_offset_uconst`` has a single unsigned LEB128 integer operand "
"that represents a byte displacement B."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1407
msgid ""
"The operation is equivalent to performing ``DW_OP_constu B; "
"DW_OP_LLVM_offset``."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1410
msgid ""
"*This operation is supplied specifically to be able to encode more field "
"displacements in two bytes than can be done with* ``DW_OP_lit*; "
"DW_OP_LLVM_offset``\\ *.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1416
msgid ""
"Should this be named ``DW_OP_LLVM_offset_uconst`` to match "
"``DW_OP_plus_uconst``, or ``DW_OP_LLVM_offset_constu`` to match "
"``DW_OP_constu``?"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1420
msgid "``DW_OP_LLVM_bit_offset`` *New*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1422
msgid ""
"``DW_OP_LLVM_bit_offset`` pops two stack entries. The first must be an "
"integral type value that represents a bit displacement B. The second must be "
"a location description L."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1426
msgid ""
"It adds the value of B to the bit offset of each single location description "
"SL of L, and pushes the updated L."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1433
msgid "``DW_OP_push_object_address``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1435
msgid ""
"``DW_OP_push_object_address`` pushes the location description L of the "
"object currently being evaluated as part of evaluation of a user presented "
"expression."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1439
msgid ""
"This object may correspond to an independent variable described by its own "
"debugging information entry or it may be a component of an array, structure, "
"or class whose address has been dynamically determined by an earlier step "
"during user expression evaluation."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1444
msgid ""
"*This operation provides explicit functionality (especially for arrays "
"involving descriptions) that is analogous to the implicit push of the base "
"location description of a structure prior to evaluation of a "
"``DW_AT_data_member_location`` to access a data member of a structure.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1449
msgid "``DW_OP_LLVM_call_frame_entry_reg`` *New*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1451
msgid ""
"``DW_OP_LLVM_call_frame_entry_reg`` has a single unsigned LEB128 integer "
"operand that represents a target architecture register number R."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1454
msgid ""
"It pushes a location description L that holds the value of register R on "
"entry to the current subprogram as defined by the Call Frame Information "
"(see :ref:`amdgpu-dwarf-call-frame-information`)."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1458
msgid ""
"*If there is no Call Frame Information defined, then the default rules for "
"the target architecture are used. If the register rule is* undefined\\ *, "
"then the undefined location description is pushed. If the register rule is* "
"same value\\ *, then a register location description for R is pushed.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1464
msgid "Undefined Location Description Operations"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1466
msgid ""
"*The undefined location storage represents a piece or all of an object that "
"is present in the source but not in the object code (perhaps due to "
"optimization). Neither reading nor writing to the undefined location storage "
"is meaningful.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1470
msgid ""
"An undefined location description specifies the undefined location storage. "
"There is no concept of the size of the undefined location storage, nor of a "
"bit offset for an undefined location description. The ``DW_OP_LLVM_*offset`` "
"operations leave an undefined location description unchanged. The "
"``DW_OP_*piece`` operations can explicitly or implicitly specify an "
"undefined location description, allowing any size and offset to be "
"specified, and results in a part with all undefined bits."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1478
msgid "``DW_OP_LLVM_undefined`` *New*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1480
msgid ""
"``DW_OP_LLVM_undefined`` pushes a location description L that comprises one "
"undefined location description SL."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1486
msgid "Memory Location Description Operations"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1488
msgid ""
"Each of the target architecture specific address spaces has a corresponding "
"memory location storage that denotes the linear addressable memory of that "
"address space. The size of each memory location storage corresponds to the "
"range of the addresses in the corresponding address space."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1493
msgid ""
"*It is target architecture defined how address space location storage maps "
"to target architecture physical memory. For example, they may be independent "
"memory, or more than one location storage may alias the same physical memory "
"possibly at different offsets and with different interleaving. The mapping "
"may also be dictated by the source language address classes.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1499
msgid ""
"A memory location description specifies a memory location storage. The bit "
"offset corresponds to a bit position within a byte of the memory. Bits "
"accessed using a memory location description, access the corresponding "
"target architecture memory starting at the bit position within the byte "
"specified by the bit offset."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1505
msgid ""
"A memory location description that has a bit offset that is a multiple of 8 "
"(the byte size) is defined to be a byte address memory location description. "
"It has a memory byte address A that is equal to the bit offset divided by 8."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1509
msgid ""
"A memory location description that does not have a bit offset that is a "
"multiple of 8 (the byte size) is defined to be a bit field memory location "
"description. It has a bit position B equal to the bit offset modulo 8, and a "
"memory byte address A equal to the bit offset minus B that is then divided "
"by 8."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1514
msgid ""
"The address space AS of a memory location description is defined to be the "
"address space that corresponds to the memory location storage associated "
"with the memory location description."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1518
msgid ""
"A location description that is comprised of one byte address memory location "
"description SL is defined to be a memory byte address location description. "
"It has a byte address equal to A and an address space equal to AS of the "
"corresponding SL."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1523
msgid ""
"``DW_ASPACE_none`` is defined as the target architecture default address "
"space."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1525
msgid ""
"If a stack entry is required to be a location description, but it is a value "
"V with the generic type, then it is implicitly converted to a location "
"description L with one memory location description SL. SL specifies the "
"memory location storage that corresponds to the target architecture default "
"address space with a bit offset equal to V scaled by 8 (the byte size)."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1533
msgid ""
"If it is wanted to allow any integral type value to be implicitly converted "
"to a memory location description in the target architecture default address "
"space:"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1537
msgid ""
"If a stack entry is required to be a location description, but is a value V "
"with an integral type, then it is implicitly converted to a location "
"description L with a one memory location description SL. If the type size of "
"V is less than the generic type size, then the value V is zero extended to "
"the size of the generic type. The least significant generic type size bits "
"are treated as a twos-complement unsigned value to be used as an address A. "
"SL specifies memory location storage corresponding to the target "
"architecture default address space with a bit offset equal to A scaled by 8 "
"(the byte size)."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1547
msgid ""
"The implicit conversion could also be defined as target architecture "
"specific. For example, GDB checks if V is an integral type. If it is not it "
"gives an error. Otherwise, GDB zero-extends V to 64 bits. If the GDB target "
"defines a hook function, then it is called. The target specific hook "
"function can modify the 64-bit value, possibly sign extending based on the "
"original value type. Finally, GDB treats the 64-bit value V as a memory "
"location address."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1554
msgid ""
"If a stack entry is required to be a location description, but it is an "
"implicit pointer value IPV with the target architecture default address "
"space, then it is implicitly converted to a location description with one "
"single location description specified by IPV. See :ref:`amdgpu-dwarf-"
"implicit-location-descriptions`."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1562
msgid ""
"Is this rule required for DWARF Version 5 backwards compatibility? If not, "
"it can be eliminated, and the producer can use "
"``DW_OP_LLVM_form_aspace_address``."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1566
msgid ""
"If a stack entry is required to be a value, but it is a location description "
"L with one memory location description SL in the target architecture default "
"address space with a bit offset B that is a multiple of 8, then it is "
"implicitly converted to a value equal to B divided by 8 (the byte size) with "
"the generic type."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1572
msgid "``DW_OP_addr``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1574
msgid ""
"``DW_OP_addr`` has a single byte constant value operand, which has the size "
"of the generic type, that represents an address A."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1577
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1595
msgid ""
"It pushes a location description L with one memory location description SL "
"on the stack. SL specifies the memory location storage corresponding to the "
"target architecture default address space with a bit offset equal to A "
"scaled by 8 (the byte size)."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1582
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1600
msgid ""
"*If the DWARF is part of a code object, then A may need to be relocated. For "
"example, in the ELF code object format, A must be adjusted by the difference "
"between the ELF segment virtual address and the virtual address at which the "
"segment is loaded.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1587
msgid "``DW_OP_addrx``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1589
msgid ""
"``DW_OP_addrx`` has a single unsigned LEB128 integer operand that represents "
"a zero-based index into the ``.debug_addr`` section relative to the value of "
"the ``DW_AT_addr_base`` attribute of the associated compilation unit. The "
"address value A in the ``.debug_addr`` section has the size of the generic "
"type."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1605
msgid "``DW_OP_LLVM_form_aspace_address`` *New*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1607
msgid ""
"``DW_OP_LLVM_form_aspace_address`` pops top two stack entries. The first "
"must be an integral type value that represents a target architecture "
"specific address space identifier AS. The second must be an integral type "
"value that represents an address A."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1612
msgid ""
"The address size S is defined as the address bit size of the target "
"architecture specific address space that corresponds to AS."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1615
msgid ""
"A is adjusted to S bits by zero extending if necessary, and then treating "
"the least significant S bits as a twos-complement unsigned value A'."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1618
msgid ""
"It pushes a location description L with one memory location description SL "
"on the stack. SL specifies the memory location storage that corresponds to "
"AS with a bit offset equal to A' scaled by 8 (the byte size)."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1622
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1734
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1948
msgid ""
"The DWARF expression is ill-formed if AS is not one of the values defined by "
"the target architecture specific ``DW_ASPACE_*`` values."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1625
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1821
msgid ""
"See :ref:`amdgpu-dwarf-implicit-location-descriptions` for special rules "
"concerning implicit pointer values produced by dereferencing implicit "
"location descriptions created by the ``DW_OP_implicit_pointer`` and "
"``DW_OP_LLVM_implicit_aspace_pointer`` operations."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1630
msgid "``DW_OP_form_tls_address``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1632
msgid ""
"``DW_OP_form_tls_address`` pops one stack entry that must be an integral "
"type value and treats it as a thread-local storage address T."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1635
msgid ""
"It pushes a location description L with one memory location description SL "
"on the stack. SL is the target architecture specific memory location "
"description that corresponds to the thread-local storage address T."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1639
msgid ""
"The meaning of the thread-local storage address T is defined by the run-time "
"environment. If the run-time environment supports multiple thread-local "
"storage blocks for a single thread, then the block corresponding to the "
"executable or shared library containing this DWARF expression is used."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1644
msgid ""
"*Some implementations of C, C++, Fortran, and other languages support a "
"thread-local storage class. Variables with this storage class have distinct "
"values and addresses in distinct threads, much as automatic variables have "
"distinct values and addresses in each subprogram invocation. Typically, "
"there is a single block of storage containing all thread-local variables "
"declared in the main executable, and a separate block for the variables "
"declared in each shared library. Each thread-local variable can then be "
"accessed in its block using an identifier. This identifier is typically a "
"byte offset into the block and pushed onto the DWARF stack by one of the* "
"``DW_OP_const*`` *operations prior to the* ``DW_OP_form_tls_address`` "
"*operation. Computing the address of the appropriate block can be complex "
"(in some cases, the compiler emits a function call to do it), and difficult "
"to describe using ordinary DWARF location descriptions. Instead of forcing "
"complex thread-local storage calculations into the DWARF expressions, the* "
"``DW_OP_form_tls_address`` *allows the consumer to perform the computation "
"based on the target architecture specific run-time environment.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1661
msgid "``DW_OP_call_frame_cfa``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1663
msgid ""
"``DW_OP_call_frame_cfa`` pushes the location description L of the Canonical "
"Frame Address (CFA) of the current subprogram, obtained from the Call Frame "
"Information on the stack. See :ref:`amdgpu-dwarf-call-frame-information`."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1667
msgid ""
"*Although the value of the* ``DW_AT_frame_base`` *attribute of the debugger "
"information entry corresponding to the current subprogram can be computed "
"using a location list expression, in some cases this would require an "
"extensive location list because the values of the registers used in "
"computing the CFA change during a subprogram execution. If the Call Frame "
"Information is present, then it already encodes such changes, and it is "
"space efficient to reference that using the* ``DW_OP_call_frame_cfa`` "
"*operation.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1676
msgid "``DW_OP_fbreg``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1678
msgid ""
"``DW_OP_fbreg`` has a single signed LEB128 integer operand that represents a "
"byte displacement B."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1681
msgid ""
"The location description L for the *frame base* of the current subprogram is "
"obtained from the ``DW_AT_frame_base`` attribute of the debugger information "
"entry corresponding to the current subprogram as described in :ref:`amdgpu-"
"dwarf-debugging-information-entry-attributes`."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1686
msgid ""
"The location description L is updated as if the ``DW_OP_LLVM_offset_uconst "
"B`` operation was applied. The updated L is pushed on the stack."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1689
msgid "``DW_OP_breg0``, ``DW_OP_breg1``, ..., ``DW_OP_breg31``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1691
msgid ""
"The ``DW_OP_breg<N>`` operations encode the numbers of up to 32 registers, "
"numbered from 0 through 31, inclusive. The register number R corresponds to "
"the N in the operation name."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1695
msgid ""
"They have a single signed LEB128 integer operand that represents a byte "
"displacement B."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1698
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1861
msgid ""
"The address space identifier AS is defined as the one corresponding to the "
"target architecture specific default address space."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1701
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1864
msgid ""
"The address size S is defined as the address bit size of the target "
"architecture specific address space corresponding to AS."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1704
msgid ""
"The contents of the register specified by R are retrieved as a twos-"
"complement unsigned value and zero extended to S bits. B is added and the "
"least significant S bits are treated as a twos-complement unsigned value to "
"be used as an address A."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1709
msgid ""
"They push a location description L comprising one memory location "
"description LS on the stack. LS specifies the memory location storage that "
"corresponds to AS with a bit offset equal to A scaled by 8 (the byte size)."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1713
msgid "``DW_OP_bregx``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1715
msgid ""
"``DW_OP_bregx`` has two operands. The first is an unsigned LEB128 integer "
"that represents a register number R. The second is a signed LEB128 integer "
"that represents a byte displacement B."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1719
msgid ""
"The action is the same as for ``DW_OP_breg<N>`` except that R is used as the "
"register number and B is used as the byte displacement."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1722
msgid "``DW_OP_LLVM_aspace_bregx`` *New*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1724
msgid ""
"``DW_OP_LLVM_aspace_bregx`` has two operands. The first is an unsigned "
"LEB128 integer that represents a register number R. The second is a signed "
"LEB128 integer that represents a byte displacement B. It pops one stack "
"entry that is required to be an integral type value that represents a target "
"architecture specific address space identifier AS."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1730
msgid ""
"The action is the same as for ``DW_OP_breg<N>`` except that R is used as the "
"register number, B is used as the byte displacement, and AS is used as the "
"address space identifier."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1739
msgid ""
"Could also consider adding ``DW_OP_aspace_breg0, DW_OP_aspace_breg1, ..., "
"DW_OP_aspace_bref31`` which would save encoding size."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1745
msgid "Register Location Description Operations"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1747
msgid ""
"There is a register location storage that corresponds to each of the target "
"architecture registers. The size of each register location storage "
"corresponds to the size of the corresponding target architecture register."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1751
msgid ""
"A register location description specifies a register location storage. The "
"bit offset corresponds to a bit position within the register. Bits accessed "
"using a register location description access the corresponding target "
"architecture register starting at the specified bit offset."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1756
msgid "``DW_OP_reg0``, ``DW_OP_reg1``, ..., ``DW_OP_reg31``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1758
msgid ""
"``DW_OP_reg<N>`` operations encode the numbers of up to 32 registers, "
"numbered from 0 through 31, inclusive. The target architecture register "
"number R corresponds to the N in the operation name."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1762
msgid ""
"They push a location description L that specifies one register location "
"description SL on the stack. SL specifies the register location storage that "
"corresponds to R with a bit offset of 0."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1766
msgid "``DW_OP_regx``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1768
msgid ""
"``DW_OP_regx`` has a single unsigned LEB128 integer operand that represents "
"a target architecture register number R."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1771
msgid ""
"It pushes a location description L that specifies one register location "
"description SL on the stack. SL specifies the register location storage that "
"corresponds to R with a bit offset of 0."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1775
msgid ""
"*These operations obtain a register location. To fetch the contents of a "
"register, it is necessary to use* ``DW_OP_regval_type``\\ *, use one of the* "
"``DW_OP_breg*`` *register-based addressing operations, or use* "
"``DW_OP_deref*`` *on a register location description.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1783
msgid "Implicit Location Description Operations"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1785
msgid ""
"Implicit location storage represents a piece or all of an object which has "
"no actual location in the program but whose contents are nonetheless known, "
"either as a constant or can be computed from other locations and values in "
"the program."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1789
msgid ""
"An implicit location description specifies an implicit location storage. The "
"bit offset corresponds to a bit position within the implicit location "
"storage. Bits accessed using an implicit location description, access the "
"corresponding implicit storage value starting at the bit offset."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1794
msgid "``DW_OP_implicit_value``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1796
msgid ""
"``DW_OP_implicit_value`` has two operands. The first is an unsigned LEB128 "
"integer that represents a byte size S. The second is a block of bytes with a "
"length equal to S treated as a literal value V."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1800
msgid ""
"An implicit location storage LS is created with the literal value V and a "
"size of S."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1803
msgid ""
"It pushes location description L with one implicit location description SL "
"on the stack. SL specifies LS with a bit offset of 0."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1806
msgid "``DW_OP_stack_value``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1808
msgid "``DW_OP_stack_value`` pops one stack entry that must be a value V."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1810
msgid ""
"An implicit location storage LS is created with the literal value V and a "
"size equal to V's base type size."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1813
msgid ""
"It pushes a location description L with one implicit location description SL "
"on the stack. SL specifies LS with a bit offset of 0."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1816
msgid ""
"*The* ``DW_OP_stack_value`` *operation specifies that the object does not "
"exist in memory, but its value is nonetheless known. In this form, the "
"location description specifies the actual value of the object, rather than "
"specifying the memory or register storage that holds the value.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1828
msgid ""
"Since location descriptions are allowed on the stack, the "
"``DW_OP_stack_value`` operation no longer terminates the DWARF operation "
"expression execution as in DWARF Version 5."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1832
msgid "``DW_OP_implicit_pointer``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1834
msgid ""
"*An optimizing compiler may eliminate a pointer, while still retaining the "
"value that the pointer addressed.* ``DW_OP_implicit_pointer`` *allows a "
"producer to describe this value.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1838
msgid ""
"``DW_OP_implicit_pointer`` *specifies an object is a pointer to the target "
"architecture default address space that cannot be represented as a real "
"pointer, even though the value it would point to can be described. In this "
"form, the location description specifies a debugging information entry that "
"represents the actual location description of the object to which the "
"pointer would point. Thus, a consumer of the debug information would be able "
"to access the dereferenced pointer, even when it cannot access the pointer "
"itself.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1847
msgid ""
"``DW_OP_implicit_pointer`` has two operands. The first is a 4-byte unsigned "
"value in the 32-bit DWARF format, or an 8-byte unsigned value in the 64-bit "
"DWARF format, that represents a debugging information entry reference R. The "
"second is a signed LEB128 integer that represents a byte displacement B."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1852
msgid ""
"R is used as the offset of a debugging information entry D in a ``."
"debug_info`` section, which may be contained in an executable or shared "
"object file other than that containing the operation. For references from "
"one executable or shared object file to another, the relocation must be "
"performed by the consumer."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1858
msgid ""
"*The first operand interpretation is exactly like that for* "
"``DW_FORM_ref_addr``\\ *.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1867
msgid ""
"An implicit location storage LS is created with the debugging information "
"entry D, address space AS, and size of S."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1870
msgid ""
"It pushes a location description L that comprises one implicit location "
"description SL on the stack. SL specifies LS with a bit offset of 0."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1873
msgid ""
"If a ``DW_OP_deref*`` operation pops a location description L', and "
"retrieves S bits where both:"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1876
msgid ""
"All retrieved bits come from an implicit location description that refers to "
"an implicit location storage that is the same as LS."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1879
msgid ""
"*Note that all bits do not have to come from the same implicit location "
"description, as L' may involve composite location descriptors.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1882
msgid ""
"The bits come from consecutive ascending offsets within their respective "
"implicit location storage."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1885
msgid "*These rules are equivalent to retrieving the complete contents of LS.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1887
msgid ""
"Then the value V pushed by the ``DW_OP_deref*`` operation is an implicit "
"pointer value IPV with a target architecture specific address space of AS, a "
"debugging information entry of D, and a base type of T. If AS is the target "
"architecture default address space, then T is the generic type. Otherwise, T "
"is a target architecture specific integral type with a bit size equal to S."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1893
msgid ""
"Otherwise, if a ``DW_OP_deref*`` operation is applied to a location "
"description such that some retrieved bits come from an implicit location "
"storage that is the same as LS, then the DWARF expression is ill-formed."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1897
msgid ""
"If IPV is either implicitly converted to a location description (only done "
"if AS is the target architecture default address space) or used by "
"``DW_OP_LLVM_form_aspace_address`` (only done if the address space specified "
"is AS), then the resulting location description RL is:"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1902
msgid ""
"If D has a ``DW_AT_location`` attribute, the DWARF expression E from the "
"``DW_AT_location`` attribute is evaluated as a location description. The "
"current subprogram and current program location of the evaluation context "
"that is accessing IPV is used for the evaluation context of E, together with "
"an empty initial stack. RL is the expression result."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1908
msgid ""
"If D has a ``DW_AT_const_value`` attribute, then an implicit location "
"storage RLS is created from the ``DW_AT_const_value`` attribute's value with "
"a size matching the size of the ``DW_AT_const_value`` attribute's value. RL "
"comprises one implicit location description SRL. SRL specifies RLS with a "
"bit offset of 0."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1916
msgid ""
"If using ``DW_AT_const_value`` for variables and formal parameters is "
"deprecated and instead ``DW_AT_location`` is used with an implicit location "
"description, then this rule would not be required."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1922
msgid ""
"The bit offset of RL is updated as if the ``DW_OP_LLVM_offset_uconst B`` "
"operation was applied."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1925
msgid ""
"If a ``DW_OP_stack_value`` operation pops a value that is the same as IPV, "
"then it pushes a location description that is the same as L."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1928
msgid ""
"The DWARF expression is ill-formed if it accesses LS or IPV in any other "
"manner."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1931
msgid ""
"*The restrictions on how an implicit pointer location description created "
"by* ``DW_OP_implicit_pointer`` *and* ``DW_OP_LLVM_aspace_implicit_pointer`` "
"*can be used are to simplify the DWARF consumer. Similarly, for an implicit "
"pointer value created by* ``DW_OP_deref*`` *and* ``DW_OP_stack_value``\\ .*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1936
msgid "``DW_OP_LLVM_aspace_implicit_pointer`` *New*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1938
msgid ""
"``DW_OP_LLVM_aspace_implicit_pointer`` has two operands that are the same as "
"for ``DW_OP_implicit_pointer``."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1941
msgid ""
"It pops one stack entry that must be an integral type value that represents "
"a target architecture specific address space identifier AS."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1944
msgid ""
"The location description L that is pushed on the stack is the same as for "
"``DW_OP_implicit_pointer`` except that the address space identifier used is "
"AS."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1951
msgid ""
"*Typically a* ``DW_OP_implicit_pointer`` *or* "
"``DW_OP_LLVM_aspace_implicit_pointer`` *operation is used in a DWARF "
"expression E*\\ :sub:`1` *of a* ``DW_TAG_variable`` *or* "
"``DW_TAG_formal_parameter`` *debugging information entry D*\\ :sub:`1`\\ "
"*'s* ``DW_AT_location`` *attribute. The debugging information entry "
"referenced by the* ``DW_OP_implicit_pointer`` *or* "
"``DW_OP_LLVM_aspace_implicit_pointer`` *operations is typically itself a* "
"``DW_TAG_variable`` *or* ``DW_TAG_formal_parameter`` *debugging information "
"entry D*\\ :sub:`2` *whose* ``DW_AT_location`` *attribute gives a second "
"DWARF expression E*\\ :sub:`2`\\ *.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1961
msgid ""
"*D*\\ :sub:`1` *and E*\\ :sub:`1` *are describing the location of a pointer "
"type object. D*\\ :sub:`2` *and E*\\ :sub:`2` *are describing the location "
"of the object pointed to by that pointer object.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1965
msgid ""
"*However, D*\\ :sub:`2` *may be any debugging information entry that "
"contains a* ``DW_AT_location`` *or* ``DW_AT_const_value`` *attribute (for "
"example,* ``DW_TAG_dwarf_procedure``\\ *). By using E*\\ :sub:`2`\\ *, a "
"consumer can reconstruct the value of the object when asked to dereference "
"the pointer described by E*\\ :sub:`1` *which contains the* "
"``DW_OP_implicit_pointer`` or ``DW_OP_LLVM_aspace_implicit_pointer`` "
"*operation.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1975
msgid "Composite Location Description Operations"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1977
msgid ""
"A composite location storage represents an object or value which may be "
"contained in part of another location storage or contained in parts of more "
"than one location storage."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1981
msgid ""
"Each part has a part location description L and a part bit size S. L can "
"have one or more single location descriptions SL. If there are more than one "
"SL then that indicates that part is located in more than one place. The bits "
"of each place of the part comprise S contiguous bits from the location "
"storage LS specified by SL starting at the bit offset specified by SL. All "
"the bits must be within the size of LS or the DWARF expression is ill-formed."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1988
msgid ""
"A composite location storage can have zero or more parts. The parts are "
"contiguous such that the zero-based location storage bit index will range "
"over each part with no gaps between them. Therefore, the size of a composite "
"location storage is the sum of the size of its parts. The DWARF expression "
"is ill-formed if the size of the contiguous location storage is larger than "
"the size of the memory location storage corresponding to the largest target "
"architecture specific address space."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1996
msgid ""
"A composite location description specifies a composite location storage. The "
"bit offset corresponds to a bit position within the composite location "
"storage."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:1999
msgid "There are operations that create a composite location storage."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2001
msgid ""
"There are other operations that allow a composite location storage to be "
"incrementally created. Each part is created by a separate operation. There "
"may be one or more operations to create the final composite location "
"storage. A series of such operations describes the parts of the composite "
"location storage that are in the order that the associated part operations "
"are executed."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2007
msgid ""
"To support incremental creation, a composite location storage can be in an "
"incomplete state. When an incremental operation operates on an incomplete "
"composite location storage, it adds a new part, otherwise it creates a new "
"composite location storage. The ``DW_OP_LLVM_piece_end`` operation "
"explicitly makes an incomplete composite location storage complete."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2013
msgid ""
"A composite location description that specifies a composite location storage "
"that is incomplete is termed an incomplete composite location description. A "
"composite location description that specifies a composite location storage "
"that is complete is termed a complete composite location description."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2018
msgid ""
"If the top stack entry is a location description that has one incomplete "
"composite location description SL after the execution of an operation "
"expression has completed, SL is converted to a complete composite location "
"description."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2022
msgid ""
"*Note that this conversion does not happen after the completion of an "
"operation expression that is evaluated on the same stack by the* "
"``DW_OP_call*`` *operations. Such executions are not a separate evaluation "
"of an operation expression, but rather the continued evaluation of the same "
"operation expression that contains the* ``DW_OP_call*`` *operation.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2028
msgid ""
"If a stack entry is required to be a location description L, but L has an "
"incomplete composite location description, then the DWARF expression is ill-"
"formed. The exception is for the operations involved in incrementally "
"creating a composite location description as described below."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2033
msgid ""
"*Note that a DWARF operation expression may arbitrarily compose composite "
"location descriptions from any other location description, including those "
"that have multiple single location descriptions, and those that have "
"composite location descriptions.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2038
msgid ""
"*The incremental composite location description operations are defined to be "
"compatible with the definitions in DWARF Version 5.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2041
msgid "``DW_OP_piece``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2043
msgid ""
"``DW_OP_piece`` has a single unsigned LEB128 integer that represents a byte "
"size S."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2046
msgid "The action is based on the context:"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2048
msgid ""
"If the stack is empty, then a location description L comprised of one "
"incomplete composite location description SL is pushed on the stack."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2051
msgid ""
"An incomplete composite location storage LS is created with a single part P. "
"P specifies a location description PL and has a bit size of S scaled by 8 "
"(the byte size). PL is comprised of one undefined location description PSL."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2056
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2082
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2156
msgid "SL specifies LS with a bit offset of 0."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2058
msgid ""
"Otherwise, if the top stack entry is a location description L comprised of "
"one incomplete composite location description SL, then the incomplete "
"composite location storage LS that SL specifies is updated to append a new "
"part P. P specifies a location description PL and has a bit size of S scaled "
"by 8 (the byte size). PL is comprised of one undefined location description "
"PSL. L is left on the stack."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2065
msgid ""
"Otherwise, if the top stack entry is a location description or can be "
"converted to one, then it is popped and treated as a part location "
"description PL. Then:"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2069
msgid ""
"If the top stack entry (after popping PL) is a location description L "
"comprised of one incomplete composite location description SL, then the "
"incomplete composite location storage LS that SL specifies is updated to "
"append a new part P. P specifies the location description PL and has a bit "
"size of S scaled by 8 (the byte size). L is left on the stack."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2075
msgid ""
"Otherwise, a location description L comprised of one incomplete composite "
"location description SL is pushed on the stack."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2078
msgid ""
"An incomplete composite location storage LS is created with a single part P. "
"P specifies the location description PL and has a bit size of S scaled by 8 "
"(the byte size)."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2084
msgid "Otherwise, the DWARF expression is ill-formed"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2086
msgid ""
"*Many compilers store a single variable in sets of registers or store a "
"variable partially in memory and partially in registers.* ``DW_OP_piece`` "
"*provides a way of describing where a part of a variable is located.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2090
msgid ""
"*If a non-0 byte displacement is required, the* ``DW_OP_LLVM_offset`` "
"*operation can be used to update the location description before using it as "
"the part location description of a* ``DW_OP_piece`` *operation.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2094
msgid ""
"*The evaluation rules for the* ``DW_OP_piece`` *operation allow it to be "
"compatible with the DWARF Version 5 definition.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2099
msgid ""
"Since this proposal allows location descriptions to be entries on the stack, "
"a simpler operation to create composite location descriptions. For example, "
"just one operation that specifies how many parts, and pops pairs of stack "
"entries for the part size and location description. Not only would this be a "
"simpler operation and avoid the complexities of incomplete composite "
"location descriptions, but it may also have a smaller encoding in practice. "
"However, the desire for compatibility with DWARF Version 5 is likely a "
"stronger consideration."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2108
msgid "``DW_OP_bit_piece``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2110
msgid ""
"``DW_OP_bit_piece`` has two operands. The first is an unsigned LEB128 "
"integer that represents the part bit size S. The second is an unsigned "
"LEB128 integer that represents a bit displacement B."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2114
msgid ""
"The action is the same as for ``DW_OP_piece`` except that any part created "
"has the bit size S, and the location description PL of any created part is "
"updated as if the ``DW_OP_constu B; DW_OP_LLVM_bit_offset`` operations were "
"applied."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2119
msgid ""
"``DW_OP_bit_piece`` *is used instead of* ``DW_OP_piece`` *when the piece to "
"be assembled is not byte-sized or is not at the start of the part location "
"description.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2123
msgid ""
"*If a computed bit displacement is required, the* ``DW_OP_LLVM_bit_offset`` "
"*operation can be used to update the location description before using it as "
"the part location description of a* ``DW_OP_bit_piece`` *operation.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2129
msgid ""
"The bit offset operand is not needed as ``DW_OP_LLVM_bit_offset`` can be "
"used on the part's location description."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2132
msgid "``DW_OP_LLVM_piece_end`` *New*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2134
msgid ""
"If the top stack entry is not a location description L comprised of one "
"incomplete composite location description SL, then the DWARF expression is "
"ill-formed."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2138
msgid ""
"Otherwise, the incomplete composite location storage LS specified by SL is "
"updated to be a complete composite location description with the same parts."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2141
msgid "``DW_OP_LLVM_extend`` *New*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2143
msgid ""
"``DW_OP_LLVM_extend`` has two operands. The first is an unsigned LEB128 "
"integer that represents the element bit size S. The second is an unsigned "
"LEB128 integer that represents a count C."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2147
msgid ""
"It pops one stack entry that must be a location description and is treated "
"as the part location description PL."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2150
msgid ""
"A location description L comprised of one complete composite location "
"description SL is pushed on the stack."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2153
msgid ""
"A complete composite location storage LS is created with C identical parts "
"P. Each P specifies PL and has a bit size of S."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2158
msgid ""
"The DWARF expression is ill-formed if the element bit size or count are 0."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2160
msgid "``DW_OP_LLVM_select_bit_piece`` *New*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2162
msgid ""
"``DW_OP_LLVM_select_bit_piece`` has two operands. The first is an unsigned "
"LEB128 integer that represents the element bit size S. The second is an "
"unsigned LEB128 integer that represents a count C."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2166
msgid ""
"It pops three stack entries. The first must be an integral type value that "
"represents a bit mask value M. The second must be a location description "
"that represents the one-location description L1. The third must be a "
"location description that represents the zero-location description L0."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2171
msgid ""
"A complete composite location storage LS is created with C parts P\\ :sub:"
"`N` ordered in ascending N from 0 to C-1 inclusive. Each P\\ :sub:`N` "
"specifies location description PL\\ :sub:`N` and has a bit size of S."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2175
msgid ""
"PL\\ :sub:`N` is as if the ``DW_OP_LLVM_bit_offset N*S`` operation was "
"applied to PLX\\ :sub:`N`\\ ."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2178
msgid ""
"PLX\\ :sub:`N` is the same as L0 if the N\\ :sup:`th` least significant bit "
"of M is a zero, otherwise it is the same as L1."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2181
msgid ""
"A location description L comprised of one complete composite location "
"description SL is pushed on the stack. SL specifies LS with a bit offset of "
"0."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2185
msgid ""
"The DWARF expression is ill-formed if S or C are 0, or if the bit size of M "
"is less than C."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2191
msgid "DWARF Location List Expressions"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2193
msgid ""
"*To meet the needs of recent computer architectures and optimization "
"techniques, debugging information must be able to describe the location of "
"an object whose location changes over the object’s lifetime, and may reside "
"at multiple locations during parts of an object's lifetime. Location list "
"expressions are used in place of operation expressions whenever the object "
"whose location is being described has these requirements.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2200
msgid ""
"A location list expression consists of a series of location list entries. "
"Each location list entry is one of the following kinds:"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2203
msgid "*Bounded location description*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2205
msgid ""
"This kind of location list entry provides an operation expression that "
"evaluates to the location description of an object that is valid over a "
"lifetime bounded by a starting and ending address. The starting address is "
"the lowest address of the address range over which the location is valid. "
"The ending address is the address of the first location past the highest "
"address of the address range."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2212
msgid ""
"The location list entry matches when the current program location is within "
"the given range."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2215
msgid ""
"There are several kinds of bounded location description entries which differ "
"in the way that they specify the starting and ending addresses."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2218
msgid "*Default location description*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2220
msgid ""
"This kind of location list entry provides an operation expression that "
"evaluates to the location description of an object that is valid when no "
"bounded location description entry applies."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2224
msgid ""
"The location list entry matches when the current program location is not "
"within the range of any bounded location description entry."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2227
msgid "*Base address*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2229
msgid ""
"This kind of location list entry provides an address to be used as the base "
"address for beginning and ending address offsets given in certain kinds of "
"bounded location description entries. The applicable base address of a "
"bounded location description entry is the address specified by the closest "
"preceding base address entry in the same location list. If there is no "
"preceding base address entry, then the applicable base address defaults to "
"the base address of the compilation unit (see DWARF Version 5 section 3.1.1)."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2237
msgid ""
"In the case of a compilation unit where all of the machine code is contained "
"in a single contiguous section, no base address entry is needed."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2240
msgid "*End-of-list*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2242
msgid ""
"This kind of location list entry marks the end of the location list "
"expression."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2245
msgid ""
"The address ranges defined by the bounded location description entries of a "
"location list expression may overlap. When they do, they describe a "
"situation in which an object exists simultaneously in more than one place."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2249
msgid ""
"If all of the address ranges in a given location list expression do not "
"collectively cover the entire range over which the object in question is "
"defined, and there is no following default location description entry, it is "
"assumed that the object is not available for the portion of the range that "
"is not covered."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2255
msgid ""
"The operation expression of each matching location list entry is evaluated "
"as a location description and its result is returned as the result of the "
"location list entry. The operation expression is evaluated with the same "
"context as the location list expression, including the same current frame, "
"current program location, and initial stack."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2261
msgid ""
"The result of the evaluation of a DWARF location list expression is a "
"location description that is comprised of the union of the single location "
"descriptions of the location description result of each matching location "
"list entry. If there are no matching location list entries, then the result "
"is a location description that comprises one undefined location description."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2267
msgid ""
"A location list expression can only be used as the value of a debugger "
"information entry attribute that is encoded using class ``loclist`` or "
"``loclistsptr`` (see DWARF Version 5 section 7.5.5). The value of the "
"attribute provides an index into a separate object file section called ``."
"debug_loclists`` or ``.debug_loclists.dwo`` (for split DWARF object files) "
"that contains the location list entries."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2274
msgid ""
"A ``DW_OP_call*`` and ``DW_OP_implicit_pointer`` operation can be used to "
"specify a debugger information entry attribute that has a location list "
"expression. Several debugger information entry attributes allow DWARF "
"expressions that are evaluated with an initial stack that includes a "
"location description that may originate from the evaluation of a location "
"list expression."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2281
msgid ""
"*This location list representation, the* ``loclist`` *and* ``loclistsptr`` "
"*class, and the related* ``DW_AT_loclists_base`` *attribute are new in DWARF "
"Version 5. Together they eliminate most, or all of the code object "
"relocations previously needed for location list expressions.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2288
msgid "The rest of this section is the same as DWARF Version 5 section 2.6.2."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2293
msgid "Segmented Addresses"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2297
msgid "This augments DWARF Version 5 section 2.12."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2299
msgid ""
"DWARF address classes are used for source languages that have the concept of "
"memory spaces. They are used in the ``DW_AT_address_class`` attribute for "
"pointer type, reference type, subprogram, and subprogram type debugger "
"information entries."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2304
msgid ""
"Each DWARF address class is conceptually a separate source language memory "
"space with its own lifetime and aliasing rules. DWARF address classes are "
"used to specify the source language memory spaces that pointer type and "
"reference type values refer, and to specify the source language memory space "
"in which variables are allocated."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2310
msgid ""
"The set of currently defined source language DWARF address classes, together "
"with source language mappings, is given in :ref:`amdgpu-dwarf-address-class-"
"table`."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2314
msgid ""
"Vendor defined source language address classes may be defined using codes in "
"the range ``DW_ADDR_LLVM_lo_user`` to ``DW_ADDR_LLVM_hi_user``."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2317
msgid "Address class"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2321
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3744
msgid "Address Class Name"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2321
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2912
msgid "Meaning"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2321
msgid "C/C++"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2321
msgid "OpenCL"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2321
msgid "CUDA/HIP"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2323
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3746
msgid "``DW_ADDR_none``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2323
msgid "generic"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2323
msgid "*default*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2324
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3747
msgid "``DW_ADDR_LLVM_global``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2324
msgid "global"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2325
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3748
msgid "``DW_ADDR_LLVM_constant``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2325
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3652
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3654
msgid "constant"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2326
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3749
msgid "``DW_ADDR_LLVM_group``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2326
msgid "thread-group"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2326
msgid "local"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2326
msgid "shared"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2327
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3750
msgid "``DW_ADDR_LLVM_private``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2327
msgid "thread"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2327
msgid "private"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2328
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3751
msgid "``DW_ADDR_LLVM_lo_user``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2329
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3752
msgid "``DW_ADDR_LLVM_hi_user``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2332
msgid ""
"DWARF address spaces correspond to target architecture specific linear "
"addressable memory areas. They are used in DWARF expression location "
"descriptions to describe in which target architecture specific memory area "
"data resides."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2337
msgid ""
"*Target architecture specific DWARF address spaces may correspond to "
"hardware supported facilities such as memory utilizing base address "
"registers, scratchpad memory, and memory with special interleaving. The size "
"of addresses in these address spaces may vary. Their access and allocation "
"may be hardware managed with each thread or group of threads having access "
"to independent storage. For these reasons they may have properties that do "
"not allow them to be viewed as part of the unified global virtual address "
"space accessible by all threads.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2345
msgid ""
"*It is target architecture specific whether multiple DWARF address spaces "
"are supported and how source language DWARF address classes map to target "
"architecture specific DWARF address spaces. A target architecture may map "
"multiple source language DWARF address classes to the same target "
"architecture specific DWARF address class. Optimization may determine that "
"variable lifetime and access pattern allows them to be allocated in faster "
"scratchpad memory represented by a different DWARF address space.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2353
msgid ""
"Although DWARF address space identifiers are target architecture specific, "
"``DW_ASPACE_none`` is a common address space supported by all target "
"architectures."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2357
msgid "DWARF address space identifiers are used by:"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2359
msgid ""
"The DWARF expession operations: ``DW_OP_LLVM_aspace_bregx``, "
"``DW_OP_LLVM_form_aspace_address``, ``DW_OP_LLVM_implicit_aspace_pointer``, "
"and ``DW_OP_xderef*``."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2363
msgid ""
"The CFI instructions: ``DW_CFA_def_aspace_cfa`` and "
"``DW_CFA_def_aspace_cfa_sf``."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2368
msgid ""
"With the definition of DWARF address classes and DWARF address spaces in "
"this proposal, DWARF Version 5 table 2.7 needs to be updated. It seems it is "
"an example of DWARF address spaces and not DWARF address classes."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2374
msgid ""
"With the expanded support for DWARF address spaces in this proposal, it may "
"be worth examining if DWARF segments can be eliminated and DWARF address "
"spaces used instead."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2378
msgid ""
"That may involve extending DWARF address spaces to also be used to specify "
"code locations. In target architectures that use different memory areas for "
"code and data this would seem a natural use for DWARF address spaces. This "
"would allow DWARF expression location descriptions to be used to describe "
"the location of subprograms and entry points that are used in expressions "
"involving subprogram pointer type values."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2385
msgid ""
"Currently, DWARF expressions assume data and code resides in the same "
"default DWARF address space, and only the address ranges in DWARF location "
"list entries and in the ``.debug_aranges`` section for accelerated access "
"for addresses allow DWARF segments to be used to distinguish."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2392
msgid ""
"Currently, DWARF defines address class values as being target architecture "
"specific. It is unclear how language specific memory spaces are intended to "
"be represented in DWARF using these."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2396
msgid ""
"For example, OpenCL defines memory spaces (called address spaces in OpenCL) "
"for ``global``, ``local``, ``constant``, and ``private``. These are part of "
"the type system and are modifiers to pointer types. In addition, OpenCL "
"defines ``generic`` pointers that can reference either the ``global``, "
"``local``, or ``private`` memory spaces. To support the OpenCL language the "
"debugger would want to support casting pointers between the ``generic`` and "
"other memory spaces, querying what memory space a ``generic`` pointer value "
"is currently referencing, and possibly using pointer casting to form an "
"address for a specific memory space out of an integral value."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2406
msgid ""
"The method to use to dereference a pointer type or reference type value is "
"defined in DWARF expressions using ``DW_OP_xderef*`` which uses a target "
"architecture specific address space."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2410
msgid ""
"DWARF defines the ``DW_AT_address_class`` attribute on pointer type and "
"reference type debugger information entries. It specifies the method to use "
"to dereference them. Why is the value of this not the same as the address "
"space value used in ``DW_OP_xderef*``? In both cases it is target "
"architecture specific and the architecture presumably will use the same set "
"of methods to dereference pointers in both cases."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2417
msgid ""
"Since ``DW_AT_address_class`` uses a target architecture specific value, it "
"cannot in general capture the source language memory space type modifier "
"concept. On some architectures all source language memory space modifiers "
"may actually use the same method for dereferencing pointers."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2422
msgid ""
"One possibility is for DWARF to add an ``DW_TAG_LLVM_address_class_type`` "
"debugger information entry type modifier that can be applied to a pointer "
"type and reference type. The ``DW_AT_address_class`` attribute could be re-"
"defined to not be target architecture specific and instead define "
"generalized language values (as is proposed above for DWARF address classes "
"in the table :ref:`amdgpu-dwarf-address-class-table`) that will support "
"OpenCL and other languages using memory spaces. The ``DW_AT_address_class`` "
"attribute could be defined to not be applied to pointer types or reference "
"types, but instead only to the new ``DW_TAG_LLVM_address_class_type`` type "
"modifier debugger information entry."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2433
msgid ""
"If a pointer type or reference type is not modified by "
"``DW_TAG_LLVM_address_class_type`` or if ``DW_TAG_LLVM_address_class_type`` "
"has no ``DW_AT_address_class`` attribute, then the pointer type or reference "
"type would be defined to use the ``DW_ADDR_none`` address class as "
"currently. Since modifiers can be chained, it would need to be defined if "
"multiple ``DW_TAG_LLVM_address_class_type`` modifiers were legal, and if so "
"if the outermost one is the one that takes precedence."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2441
msgid ""
"A target architecture implementation that supports multiple address spaces "
"would need to map ``DW_ADDR_none`` appropriately to support CUDA-like "
"languages that have no address classes in the type system but do support "
"variable allocation in address classes. Such variable allocation would "
"result in the variable's location description needing an address space."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2447
msgid ""
"The approach proposed in :ref:`amdgpu-dwarf-address-class-table` is to "
"define the default ``DW_ADDR_none`` to be the generic address class and not "
"the global address class. This matches how CLANG and LLVM have added support "
"for CUDA-like languages on top of existing C++ language support. This allows "
"all addresses to be generic by default which matches CUDA-like languages."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2453
msgid ""
"An alternative approach is to define ``DW_ADDR_none`` as being the global "
"address class and then change ``DW_ADDR_LLVM_global`` to "
"``DW_ADDR_LLVM_generic``. This would match the reality that languages that "
"do not support multiple memory spaces only have one default global memory "
"space. Generally, in these languages if they expose that the target "
"architecture supports multiple address spaces, the default one is still the "
"global memory space. Then a language that does support multiple memory "
"spaces has to explicitly indicate which pointers have the added ability to "
"reference more than the global memory space. However, compilers generating "
"DWARF for CUDA-like languages would then have to define every CUDA-like "
"language pointer type or reference type using "
"``DW_TAG_LLVM_address_class_type`` with a ``DW_AT_address_class`` attribute "
"of ``DW_ADDR_LLVM_generic`` to match the language semantics."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2467
msgid ""
"A new ``DW_AT_LLVM_address_space`` attribute could be defined that can be "
"applied to pointer type, reference type, subprogram, and subprogram type to "
"describe how objects having the given type are dereferenced or called (the "
"role that ``DW_AT_address_class`` currently provides). The values of "
"``DW_AT_address_space`` would be target architecture specific and the same "
"as used in ``DW_OP_xderef*``."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2477
msgid "Debugging Information Entry Attributes"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2481
msgid ""
"This section provides changes to existing debugger information entry "
"attributes and defines attributes added by the proposal. These would be "
"incorporated into the appropriate DWARF Version 5 chapter 2 sections."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2485
msgid "``DW_AT_location``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2487
msgid ""
"Any debugging information entry describing a data object (which includes "
"variables and parameters) or common blocks may have a ``DW_AT_location`` "
"attribute, whose value is a DWARF expression E."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2491
msgid ""
"The result of the attribute is obtained by evaluating E as a location "
"description in the context of the current subprogram, current program "
"location, and with an empty initial stack. See :ref:`amdgpu-dwarf-"
"expressions`."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2496
msgid ""
"See :ref:`amdgpu-dwarf-control-flow-operations` for special evaluation rules "
"used by the ``DW_OP_call*`` operations."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2501
msgid ""
"Delete the description of how the ``DW_OP_call*`` operations evaluate a "
"``DW_AT_location`` attribute as that is now described in the operations."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2506
msgid ""
"See the discussion about the ``DW_AT_location`` attribute in the "
"``DW_OP_call*`` operation. Having each attribute only have a single purpose "
"and single execution semantics seems desirable. It makes it easier for the "
"consumer that no longer have to track the context. It makes it easier for "
"the producer as it can rely on a single semantics for each attribute."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2513
msgid ""
"For that reason, limiting the ``DW_AT_location`` attribute to only "
"supporting evaluating the location description of an object, and using a "
"different attribute and encoding class for the evaluation of DWARF "
"expression *procedures* on the same operation expression stack seems "
"desirable."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2519
msgid "``DW_AT_const_value``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2523
msgid ""
"Could deprecate using the ``DW_AT_const_value`` attribute for "
"``DW_TAG_variable`` or ``DW_TAG_formal_parameter`` debugger information "
"entries that have been optimized to a constant. Instead, ``DW_AT_location`` "
"could be used with a DWARF expression that produces an implicit location "
"description now that any location description can be used within a DWARF "
"expression. This allows the ``DW_OP_call*`` operations to be used to push "
"the location description of any variable regardless of how it is optimized."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2532
msgid "``DW_AT_frame_base``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2534
msgid ""
"A ``DW_TAG_subprogram`` or ``DW_TAG_entry_point`` debugger information entry "
"may have a ``DW_AT_frame_base`` attribute, whose value is a DWARF expression "
"E."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2538
msgid ""
"The result of the attribute is obtained by evaluating E as a location "
"description in the context of the current subprogram, current program "
"location, and with an empty initial stack."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2542
msgid ""
"The DWARF is ill-formed if E contains an ``DW_OP_fbreg`` operation, or the "
"resulting location description L is not comprised of one single location "
"description SL."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2546
msgid ""
"If SL a register location description for register R, then L is replaced "
"with the result of evaluating a ``DW_OP_bregx R, 0`` operation. This "
"computes the frame base memory location description in the target "
"architecture default address space."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2551
msgid ""
"*This allows the more compact* ``DW_OPreg*`` *to be used instead of* "
"``DW_OP_breg* 0``\\ *.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2556
msgid ""
"This rule could be removed and require the producer to create the required "
"location description directly using ``DW_OP_call_frame_cfa``, "
"``DW_OP_breg*``, or ``DW_OP_LLVM_aspace_bregx``. This would also then allow "
"a target to implement the call frames within a large register."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2561
msgid ""
"Otherwise, the DWARF is ill-formed if SL is not a memory location "
"description in any of the target architecture specific address spaces."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2564
msgid "The resulting L is the *frame base* for the subprogram or entry point."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2566
msgid ""
"*Typically, E will use the* ``DW_OP_call_frame_cfa`` *operation or be a "
"stack pointer register plus or minus some offset.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2569
msgid "``DW_AT_data_member_location``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2571
msgid "For a ``DW_AT_data_member_location`` attribute there are two cases:"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2573
msgid ""
"If the attribute is an integer constant B, it provides the offset in bytes "
"from the beginning of the containing entity."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2576
msgid ""
"The result of the attribute is obtained by evaluating a ``DW_OP_LLVM_offset "
"B`` operation with an initial stack comprising the location description of "
"the beginning of the containing entity.  The result of the evaluation is the "
"location description of the base of the member entry."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2582
msgid ""
"*If the beginning of the containing entity is not byte aligned, then the "
"beginning of the member entry has the same bit displacement within a byte.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2586
msgid ""
"Otherwise, the attribute must be a DWARF expression E which is evaluated "
"with a context of the current frame, current program location, and an "
"initial stack comprising the location description of the beginning of the "
"containing entity. The result of the evaluation is the location description "
"of the base of the member entry."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2594
msgid ""
"The beginning of the containing entity can now be any location description, "
"including those with more than one single location description, and those "
"with single location descriptions that are of any kind and have any bit "
"offset."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2599
msgid "``DW_AT_use_location``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2601
msgid ""
"The ``DW_TAG_ptr_to_member_type`` debugging information entry has a "
"``DW_AT_use_location`` attribute whose value is a DWARF expression E. It is "
"used to compute the location description of the member of the class to which "
"the pointer to member entry points."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2606
msgid ""
"*The method used to find the location description of a given member of a "
"class, structure, or union is common to any instance of that class, "
"structure, or union and to any instance of the pointer to member type. The "
"method is thus associated with the pointer to member type, rather than with "
"each object that has a pointer to member type.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2612
msgid ""
"The ``DW_AT_use_location`` DWARF expression is used in conjunction with the "
"location description for a particular object of the given pointer to member "
"type and for a particular structure or class instance."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2616
msgid ""
"The result of the attribute is obtained by evaluating E as a location "
"description with the context of the current subprogram, current program "
"location, and an initial stack comprising two entries. The first entry is "
"the value of the pointer to member object itself. The second entry is the "
"location description of the base of the entire class, structure, or union "
"instance containing the member whose location is being calculated."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2623
msgid "``DW_AT_data_location``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2625
msgid ""
"The ``DW_AT_data_location`` attribute may be used with any type that "
"provides one or more levels of hidden indirection and/or run-time parameters "
"in its representation. Its value is a DWARF operation expression E which "
"computes the location description of the data for an object. When this "
"attribute is omitted, the location description of the data is the same as "
"the location description of the object."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2632
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2674
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2692
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2790
msgid ""
"The result of the attribute is obtained by evaluating E as a location "
"description with the context of the current subprogram, current program "
"location, and an empty initial stack."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2636
msgid ""
"*E will typically involve an operation expression that begins with a* "
"``DW_OP_push_object_address`` *operation which loads the location "
"description of the object which can then serve as a description in "
"subsequent calculation.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2643
msgid ""
"Since ``DW_AT_data_member_location``, ``DW_AT_use_location``, and "
"``DW_AT_vtable_elem_location`` allow both operation expressions and location "
"list expressions, why does ``DW_AT_data_location`` not allow both? In all "
"cases they apply to data objects so less likely that optimization would "
"cause different operation expressions for different program location ranges. "
"But if supporting for some then should be for all."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2651
msgid ""
"It seems odd this attribute is not the same as "
"``DW_AT_data_member_location`` in having an initial stack with the location "
"description of the object since the expression has to need it."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2655
msgid "``DW_AT_vtable_elem_location``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2657
msgid ""
"An entry for a virtual function also has a ``DW_AT_vtable_elem_location`` "
"attribute whose value is a DWARF expression E."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2660
msgid ""
"The result of the attribute is obtained by evaluating E as a location "
"description with the context of the current subprogram, current program "
"location, and an initial stack comprising the location description of the "
"object of the enclosing type."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2665
msgid ""
"The resulting location description is the slot for the function within the "
"virtual function table for the enclosing class."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2668
msgid "``DW_AT_static_link``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2670
msgid ""
"If a ``DW_TAG_subprogram`` or ``DW_TAG_entry_point`` debugger information "
"entry is lexically nested, it may have a ``DW_AT_static_link`` attribute, "
"whose value is a DWARF expression E."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2678
msgid ""
"The DWARF is ill-formed if the resulting location description L is is not "
"comprised of one memory location description in any of the target "
"architecture specific address spaces."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2682
msgid ""
"The resulting L is the *frame base* of the relevant instance of the "
"subprogram that immediately lexically encloses the subprogram or entry point."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2686
msgid "``DW_AT_return_addr``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2688
msgid ""
"A ``DW_TAG_subprogram``, ``DW_TAG_inlined_subroutine``, or "
"``DW_TAG_entry_point`` debugger information entry may have a "
"``DW_AT_return_addr`` attribute, whose value is a DWARF expression E."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2696
msgid ""
"The DWARF is ill-formed if the resulting location description L is not "
"comprised one memory location description in any of the target architecture "
"specific address spaces."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2700
msgid ""
"The resulting L is the place where the return address for the subprogram or "
"entry point is stored."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2705
msgid ""
"It is unclear why ``DW_TAG_inlined_subroutine`` has a ``DW_AT_return_addr`` "
"attribute but not a ``DW_AT_frame_base`` or ``DW_AT_static_link`` attribute. "
"Seems it would either have all of them or none. Since inlined subprograms do "
"not have a frame it seems they would have none of these attributes."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2711
msgid ""
"``DW_AT_call_value``, ``DW_AT_call_data_location``, and "
"``DW_AT_call_data_value``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2713
msgid ""
"A ``DW_TAG_call_site_parameter`` debugger information entry may have a "
"``DW_AT_call_value`` attribute, whose value is a DWARF operation expression "
"E\\ :sub:`1`\\ ."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2717
msgid ""
"The result of the ``DW_AT_call_value`` attribute is obtained by evaluating "
"E\\ :sub:`1` as a value with the context of the call site subprogram, call "
"site program location, and an empty initial stack."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2721
msgid ""
"The call site subprogram is the subprogram containing the "
"``DW_TAG_call_site_parameter`` debugger information entry. The call site "
"program location is the location of call site in the call site subprogram."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2725
msgid ""
"*The consumer may have to virtually unwind to the call site in order to "
"evaluate the attribute. This will provide both the call site subprogram and "
"call site program location needed to evaluate the expression.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2729
msgid ""
"The resulting value V\\ :sub:`1` is the value of the parameter at the time "
"of the call made by the call site."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2732
msgid ""
"For parameters passed by reference, where the code passes a pointer to a "
"location which contains the parameter, or for reference type parameters, the "
"``DW_TAG_call_site_parameter`` debugger information entry may also have a "
"``DW_AT_call_data_location`` attribute whose value is a DWARF operation "
"expression E\\ :sub:`2`\\ , and a ``DW_AT_call_data_value`` attribute whose "
"value is a DWARF operation expression E\\ :sub:`3`\\ ."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2739
msgid ""
"The value of the ``DW_AT_call_data_location`` attribute is obtained by "
"evaluating E\\ :sub:`2` as a location description with the context of the "
"call site subprogram, call site program location, and an empty initial stack."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2744
msgid ""
"The resulting location description L\\ :sub:`2` is the location where the "
"referenced parameter lives during the call made by the call site. If E\\ :"
"sub:`2` would just be a ``DW_OP_push_object_address``, then the "
"``DW_AT_call_data_location`` attribute may be omitted."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2749
msgid ""
"The value of the ``DW_AT_call_data_value`` attribute is obtained by "
"evaluating E\\ :sub:`3` as a value with the context of the call site "
"subprogram, call site program location, and an empty initial stack."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2753
msgid ""
"The resulting value V\\ :sub:`3` is the value in L\\ :sub:`2` at the time of "
"the call made by the call site."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2756
msgid ""
"If it is not possible to avoid the expressions of these attributes from "
"accessing registers or memory locations that might be clobbered by the "
"subprogram being called by the call site, then the associated attribute "
"should not be provided."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2761
msgid ""
"*The reason for the restriction is that the parameter may need to be "
"accessed during the execution of the callee. The consumer may virtually "
"unwind from the called subprogram back to the caller and then evaluate the "
"attribute expressions. The call frame information (see* :ref:`amdgpu-dwarf-"
"call-frame-information`\\ *) will not be able to restore registers that have "
"been clobbered, and clobbered memory will no longer have the value at the "
"time of the call.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2769
msgid "``DW_AT_LLVM_lanes`` *New*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2771
msgid ""
"For languages that are implemented using a SIMD or SIMT execution model, a "
"``DW_TAG_subprogram``, ``DW_TAG_inlined_subroutine``, or "
"``DW_TAG_entry_point`` debugger information entry may have a "
"``DW_AT_LLVM_lanes`` attribute whose value is an integer constant that is "
"the number of lanes per thread. This is the static number of lanes per "
"thread. It is not the dynamic number of lanes with which the thread was "
"initiated, for example, due to smaller or partial work-groups."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2779
msgid "If not present, the default value of 1 is used."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2781
msgid "The DWARF is ill-formed if the value is 0."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2783
msgid "``DW_AT_LLVM_lane_pc`` *New*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2785
msgid ""
"For languages that are implemented using a SIMD or SIMT execution model, a "
"``DW_TAG_subprogram``, ``DW_TAG_inlined_subroutine``, or "
"``DW_TAG_entry_point`` debugging information entry may have a "
"``DW_AT_LLVM_lane_pc`` attribute whose value is a DWARF expression E."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2794
msgid ""
"The resulting location description L is for a thread lane count sized vector "
"of generic type elements. The thread lane count is the value of the "
"``DW_AT_LLVM_lanes`` attribute. Each element holds the conceptual program "
"location of the corresponding lane, where the least significant element "
"corresponds to the first target architecture specific lane identifier and so "
"forth. If the lane was not active when the current subprogram was called, "
"its element is an undefined location description."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2802
msgid ""
"``DW_AT_LLVM_lane_pc`` *allows the compiler to indicate conceptually where "
"each lane of a SIMT thread is positioned even when it is in divergent "
"control flow that is not active.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2806
msgid ""
"*Typically, the result is a location description with one composite location "
"description with each part being a location description with either one "
"undefined location description or one memory location description.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2810
msgid ""
"If not present, the thread is not being used in a SIMT manner, and the "
"thread's current program location is used."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2813
msgid "``DW_AT_LLVM_active_lane`` *New*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2815
msgid ""
"For languages that are implemented using a SIMD or SIMT execution model, a "
"``DW_TAG_subprogram``, ``DW_TAG_inlined_subroutine``, or "
"``DW_TAG_entry_point`` debugger information entry may have a "
"``DW_AT_LLVM_active_lane`` attribute whose value is a DWARF expression E."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2820
msgid ""
"The result of the attribute is obtained by evaluating E as a value with the "
"context of the current subprogram, current program location, and an empty "
"initial stack."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2824
msgid ""
"The DWARF is ill-formed if the resulting value V is not an integral value."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2826
msgid ""
"The resulting V is a bit mask of active lanes for the current program "
"location. The N\\ :sup:`th` least significant bit of the mask corresponds to "
"the N\\ :sup:`th` lane. If the bit is 1 the lane is active, otherwise it is "
"inactive."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2831
msgid ""
"*Some targets may update the target architecture execution mask for regions "
"of code that must execute with different sets of lanes than the current "
"active lanes. For example, some code must execute with all lanes made "
"temporarily active.* ``DW_AT_LLVM_active_lane`` *allows the compiler to "
"provide the means to determine the source language active lanes.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2837
msgid ""
"If not present and ``DW_AT_LLVM_lanes`` is greater than 1, then the target "
"architecture execution mask is used."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2840
msgid "``DW_AT_LLVM_vector_size`` *New*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2842
msgid ""
"A ``DW_TAG_base_type`` debugger information entry for a base type T may have "
"a ``DW_AT_LLVM_vector_size`` attribute whose value is an integer constant "
"that is the vector type size N."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2846
msgid ""
"The representation of a vector base type is as N contiguous elements, each "
"one having the representation of a base type T' that is the same as T "
"without the ``DW_AT_LLVM_vector_size`` attribute."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2850
msgid ""
"If a ``DW_TAG_base_type`` debugger information entry does not have a "
"``DW_AT_LLVM_vector_size`` attribute, then the base type is not a vector "
"type."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2854
msgid "The DWARF is ill-formed if N is not greater than 0."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2858
msgid ""
"LLVM has mention of a non-upstreamed debugger information entry that is "
"intended to support vector types. However, that was not for a base type so "
"would not be suitable as the type of a stack value entry. But perhaps that "
"could be replaced by using this attribute."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2863
msgid "``DW_AT_LLVM_augmentation`` *New*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2865
msgid ""
"A ``DW_TAG_compile_unit`` debugger information entry for a compilation unit "
"may have a ``DW_AT_LLVM_augmentation`` attribute, whose value is an "
"augmentation string."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2869
msgid ""
"*The augmentation string allows producers to indicate that there is "
"additional vendor or target specific information in the debugging "
"information entries. For example, this might be information about the "
"version of vendor specific extensions that are being used.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2874
msgid ""
"If not present, or if the string is empty, then the compilation unit has no "
"augmentation string."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2877
msgid "The format for the augmentation string is:"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:0
msgid ""
"``[``\\ *vendor*\\ ``:v``\\ *X*\\ ``.``\\ *Y*\\ [\\ ``:``\\ *options*\\ ]\\ "
"``]``\\ *"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2881
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3197
msgid ""
"Where *vendor* is the producer, ``vX.Y`` specifies the major X and minor Y "
"version number of the extensions used, and *options* is an optional string "
"providing additional information about the extensions. The version number "
"must conform to semantic versioning [:ref:`SEMVER <amdgpu-dwarf-SEMVER>`]. "
"The *options* string must not contain the \"\\ ``]``\\ \" character."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2887
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2976
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3203
msgid "For example:"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2894
msgid "Program Scope Entities"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2899
msgid "Unit Entities"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2903
msgid "This augments DWARF Version 5 section 3.1.1 and Table 3.1."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2905
msgid ""
"Additional language codes defined for use with the ``DW_AT_language`` "
"attribute are defined in :ref:`amdgpu-dwarf-language-names-table`."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2908
msgid "Language Names"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2912
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3725
msgid "Language Name"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2914
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3727
msgid "``DW_LANG_LLVM_HIP``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2914
msgid "HIP Language."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2917
msgid ""
"The HIP language [:ref:`HIP <amdgpu-dwarf-HIP>`] can be supported by "
"extending the C++ language."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2921
msgid "Other Debugger Information"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2924
msgid "Accelerated Access"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2929
msgid "Lookup By Name"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2932
msgid "Contents of the Name Index"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2936
msgid "The following provides changes to DWARF Version 5 section 6.1.1.1."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2938
msgid ""
"The rule for debugger information entries included in the name index in the "
"optional ``.debug_names`` section is extended to also include named "
"``DW_TAG_variable`` debugging information entries with a ``DW_AT_location`` "
"attribute that includes a ``DW_OP_LLVM_form_aspace_address`` operation."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2943
msgid ""
"The name index must contain an entry for each debugging information entry "
"that defines a named subprogram, label, variable, type, or namespace, "
"subject to the following rules:"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2947
msgid ""
"``DW_TAG_variable`` debugging information entries with a ``DW_AT_location`` "
"attribute that includes a ``DW_OP_addr``, "
"``DW_OP_LLVM_form_aspace_address``, or ``DW_OP_form_tls_address`` operation "
"are included; otherwise, they are excluded."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2953
msgid "Data Representation of the Name Index"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2956
msgid "Section Header"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2960
msgid ""
"The following provides an addition to DWARF Version 5 section 6.1.1.4.1 item "
"14 ``augmentation_string``."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2963
msgid ""
"A null-terminated UTF-8 vendor specific augmentation string, which provides "
"additional information about the contents of this index. If provided, the "
"recommended format for augmentation string is:"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2969
msgid ""
"Where *vendor* is the producer, ``vX.Y`` specifies the major X and minor Y "
"version number of the extensions used in the DWARF of the compilation unit, "
"and *options* is an optional string providing additional information about "
"the extensions. The version number must conform to semantic versioning [:ref:"
"`SEMVER <amdgpu-dwarf-SEMVER>`]. The *options* string must not contain the "
"\"\\ ``]``\\ \" character."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2984
msgid ""
"This is different to the definition in DWARF Version 5 but is consistent "
"with the other augmentation strings and allows multiple vendor extensions to "
"be supported."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2991
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3756
msgid "Line Number Information"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2994
msgid "The Line Number Program Header"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:2997
msgid "Standard Content Descriptions"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3001
msgid "This augments DWARF Version 5 section 6.2.4.1."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3005
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3771
msgid "``DW_LNCT_LLVM_source``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3007
msgid ""
"The component is a null-terminated UTF-8 source text string with \"\\ "
"``\\n``\\ \" line endings. This content code is paired with the same forms "
"as ``DW_LNCT_path``. It can be used for file name entries."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3011
msgid ""
"The value is an empty null-terminated string if no source is available. If "
"the source is available but is an empty file then the value is a null-"
"terminated single \"\\ ``\\n``\\ \"."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3015
msgid ""
"*When the source field is present, consumers can use the embedded source "
"instead of attempting to discover the source on disk using the file path "
"provided by the* ``DW_LNCT_path`` *field. When the source field is absent, "
"consumers can access the file to get the source text.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3020
msgid ""
"*This is particularly useful for programing languages that support runtime "
"compilation and runtime generation of source text. In these cases, the "
"source text does not reside in any permanent file. For example, the OpenCL "
"language [:ref:`OpenCL <amdgpu-dwarf-OpenCL>`] supports online compilation.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3025
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3772
msgid "``DW_LNCT_LLVM_is_MD5``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3027
msgid ""
"``DW_LNCT_LLVM_is_MD5`` indicates if the ``DW_LNCT_MD5`` content kind, if "
"present, is valid: when 0 it is not valid and when 1 it is valid. If "
"``DW_LNCT_LLVM_is_MD5`` content kind is not present, and ``DW_LNCT_MD5`` "
"content kind is present, then the MD5 checksum is valid."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3032
msgid ""
"``DW_LNCT_LLVM_is_MD5`` is always paired with the ``DW_FORM_udata`` form."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3034
msgid ""
"*This allows a compilation unit to have a mixture of files with and without "
"MD5 checksums. This can happen when multiple relocatable files are linked "
"together.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3041
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3776
msgid "Call Frame Information"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3045
msgid ""
"This section provides changes to existing Call Frame Information and defines "
"instructions added by the proposal. Additional support is added for address "
"spaces. Register unwind DWARF expressions are generalized to allow any "
"location description, including those with composite and implicit location "
"descriptions."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3051
msgid ""
"These changes would be incorporated into the DWARF Version 5 section 6.1."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3054
msgid "Structure of Call Frame Information"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3056
msgid "The register rules are:"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3060
msgid "*undefined*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3059
msgid ""
"A register that has this rule has no recoverable value in the previous "
"frame. (By convention, it is not preserved by a callee.)"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3064
msgid "*same value*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3063
msgid ""
"This register has not been modified from the previous frame. (By convention, "
"it is preserved by the callee, but the callee has not modified it.)"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3071
msgid "*offset(N)*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3067
msgid ""
"N is a signed byte offset. The previous value of this register is saved at "
"the location description computed as if the DWARF operation expression "
"``DW_OP_LLVM_offset N`` is evaluated as a location description with an "
"initial stack comprising the location description of the current CFA (see :"
"ref:`amdgpu-dwarf-operation-expressions`)."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3103
msgid "*val_offset(N)*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3074
msgid ""
"N is a signed byte offset. The previous value of this register is the memory "
"byte address of the location description computed as if the DWARF operation "
"expression ``DW_OP_LLVM_offset N`` is evaluated as a location description "
"with an initial stack comprising the location description of the current CFA "
"(see :ref:`amdgpu-dwarf-operation-expressions`)."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3080
msgid ""
"The DWARF is ill-formed if the CFA location description is not a memory byte "
"address location description, or if the register size does not match the "
"size of an address in the address space of the current CFA location "
"description."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3084
msgid ""
"*Since the CFA location description is required to be a memory byte address "
"location description, the value of val_offset(N) will also be a memory byte "
"address location description since it is offsetting the CFA location "
"description by N bytes. Furthermore, the value of val_offset(N) will be a "
"memory byte address in the same address space as the CFA location "
"description.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3093
msgid ""
"Should DWARF allow the address size to be a different size to the size of "
"the register? Requiring them to be the same bit size avoids any issue of "
"conversion as the bit contents of the register is simply interpreted as a "
"value of the address."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3108
msgid "*register(R)*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3106
msgid ""
"The previous value of this register is stored in another register numbered R."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3108
msgid "The DWARF is ill-formed if the register sizes do not match."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3117
msgid "*expression(E)*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3111
msgid ""
"The previous value of this register is located at the location description "
"produced by evaluating the DWARF operation expression E (see :ref:`amdgpu-"
"dwarf-operation-expressions`)."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3115
msgid ""
"E is evaluated as a location description in the context of the current "
"subprogram, current program location, and with an initial stack comprising "
"the location description of the current CFA."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3137
msgid "*val_expression(E)*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3120
msgid ""
"The previous value of this register is the value produced by evaluating the "
"DWARF operation expression E (see :ref:`amdgpu-dwarf-operation-expressions`)."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3123
msgid ""
"E is evaluated as a value in the context of the current subprogram, current "
"program location, and with an initial stack comprising the location "
"description of the current CFA."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3127
msgid ""
"The DWARF is ill-formed if the resulting value type size does not match the "
"register size."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3132
msgid ""
"This has limited usefulness as the DWARF expression E can only produce "
"values up to the size of the generic type. This is due to not allowing any "
"operations that specify a type in a CFI operation expression. This makes it "
"unusable for registers that are larger than the generic type. However, "
"*expression(E)* can be used to create an implicit location description of "
"any size."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3140
msgid "*architectural*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3140
msgid "The rule is defined externally to this specification by the augmenter."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3142
msgid ""
"A Common Information Entry holds information that is shared among many Frame "
"Description Entries. There is at least one CIE in every non-empty ``."
"debug_frame`` section. A CIE contains the following fields, in order:"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3146
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3256
msgid "``length`` (initial length)"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3148
msgid ""
"A constant that gives the number of bytes of the CIE structure, not "
"including the length field itself. The size of the length field plus the "
"value of length must be an integral multiple of the address size specified "
"in the ``address_size`` field."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3153
msgid ""
"``CIE_id`` (4 or 8 bytes, see :ref:`amdgpu-dwarf-32-bit-and-64-bit-dwarf-"
"formats`)"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3156
msgid "A constant that is used to distinguish CIEs from FDEs."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3158
msgid ""
"In the 32-bit DWARF format, the value of the CIE id in the CIE header is "
"0xffffffff; in the 64-bit DWARF format, the value is 0xffffffffffffffff."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3161
msgid "``version`` (ubyte)"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3163
msgid ""
"A version number. This number is specific to the call frame information and "
"is independent of the DWARF version number."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3166
msgid "The value of the CIE version number is 4."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3170
msgid "Would this be increased to 5 to reflect the changes in the proposal?"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3172
msgid "``augmentation`` (sequence of UTF-8 characters)"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3174
msgid ""
"A null-terminated UTF-8 string that identifies the augmentation to this CIE "
"or to the FDEs that use it. If a reader encounters an augmentation string "
"that is unexpected, then only the following fields can be read:"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3178
msgid "CIE: length, CIE_id, version, augmentation"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3179
msgid "FDE: length, CIE_pointer, initial_location, address_range"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3181
msgid "If there is no augmentation, this value is a zero byte."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3183
msgid ""
"*The augmentation string allows users to indicate that there is additional "
"vendor and target architecture specific information in the CIE or FDE which "
"is needed to virtually unwind a stack frame. For example, this might be "
"information about dynamically allocated data which needs to be freed on exit "
"from the routine.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3189
msgid ""
"*Because the* ``.debug_frame`` *section is useful independently of any* ``."
"debug_info`` *section, the augmentation string always uses UTF-8 encoding.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3193
msgid "The recommended format for the augmentation string is:"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3209
msgid "``address_size`` (ubyte)"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3211
msgid ""
"The size of a target address in this CIE and any FDEs that use it, in bytes. "
"If a compilation unit exists for this frame, its address size must match the "
"address size here."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3215
msgid "``segment_selector_size`` (ubyte)"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3217
msgid ""
"The size of a segment selector in this CIE and any FDEs that use it, in "
"bytes."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3220
msgid "``code_alignment_factor`` (unsigned LEB128)"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3222
msgid ""
"A constant that is factored out of all advance location instructions (see :"
"ref:`amdgpu-dwarf-row-creation-instructions`). The resulting value is "
"``(operand * code_alignment_factor)``."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3226
msgid "``data_alignment_factor`` (signed LEB128)"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3228
msgid ""
"A constant that is factored out of certain offset instructions (see :ref:"
"`amdgpu-dwarf-cfa-definition-instructions` and :ref:`amdgpu-dwarf-register-"
"rule-instructions`). The resulting value is ``(operand * "
"data_alignment_factor)``."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3233
msgid "``return_address_register`` (unsigned LEB128)"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3235
msgid ""
"An unsigned LEB128 constant that indicates which column in the rule table "
"represents the return address of the subprogram. Note that this column might "
"not correspond to an actual machine register."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3239
msgid "``initial_instructions`` (array of ubyte)"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3241
msgid ""
"A sequence of rules that are interpreted to create the initial setting of "
"each column in the table."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3244
msgid ""
"The default rule for all columns before interpretation of the initial "
"instructions is the undefined rule. However, an ABI authoring body or a "
"compilation system authoring body may specify an alternate default value for "
"any or all columns."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3249
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3284
msgid "``padding`` (array of ubyte)"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3251
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3286
msgid ""
"Enough ``DW_CFA_nop`` instructions to make the size of this entry match the "
"length value above."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3254
msgid "An FDE contains the following fields, in order:"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3258
msgid ""
"A constant that gives the number of bytes of the header and instruction "
"stream for this subprogram, not including the length field itself. The size "
"of the length field plus the value of length must be an integral multiple of "
"the address size."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3263
msgid ""
"``CIE_pointer`` (4 or 8 bytes, see :ref:`amdgpu-dwarf-32-bit-and-64-bit-"
"dwarf-formats`)"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3266
msgid ""
"A constant offset into the ``.debug_frame`` section that denotes the CIE "
"that is associated with this FDE."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3269
msgid "``initial_location`` (segment selector and target address)"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3271
msgid ""
"The address of the first location associated with this table entry. If the "
"segment_selector_size field of this FDE’s CIE is non-zero, the initial "
"location is preceded by a segment selector of the given length."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3275
msgid "``address_range`` (target address)"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3277
msgid "The number of bytes of program instructions described by this entry."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3279
msgid "``instructions`` (array of ubyte)"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3281
msgid ""
"A sequence of table defining instructions that are described in :ref:`amdgpu-"
"dwarf-call-frame-instructions`."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3292
msgid "Call Frame Instructions"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3294
msgid ""
"Some call frame instructions have operands that are encoded as DWARF "
"operation expressions E (see :ref:`amdgpu-dwarf-operation-expressions`). The "
"DWARF operations that can be used in E have the following restrictions:"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3298
msgid ""
"``DW_OP_addrx``, ``DW_OP_call2``, ``DW_OP_call4``, ``DW_OP_call_ref``, "
"``DW_OP_const_type``, ``DW_OP_constx``, ``DW_OP_convert``, "
"``DW_OP_deref_type``, ``DW_OP_fbreg``, ``DW_OP_implicit_pointer``, "
"``DW_OP_regval_type``, ``DW_OP_reinterpret``, and ``DW_OP_xderef_type`` "
"operations are not allowed because the call frame information must not "
"depend on other debug sections."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3305
msgid ""
"``DW_OP_push_object_address`` is not allowed because there is no object "
"context to provide a value to push."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3308
msgid ""
"``DW_OP_LLVM_push_lane`` is not allowed because the call frame instructions "
"describe the actions for the whole thread, not the lanes independently."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3311
msgid ""
"``DW_OP_call_frame_cfa`` and ``DW_OP_entry_value`` are not allowed because "
"their use would be circular."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3314
msgid ""
"``DW_OP_LLVM_call_frame_entry_reg`` is not allowed if evaluating E causes a "
"circular dependency between ``DW_OP_LLVM_call_frame_entry_reg`` operations."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3317
msgid ""
"*For example, if a register R1 has a* ``DW_CFA_def_cfa_expression`` "
"*instruction that evaluates a* ``DW_OP_LLVM_call_frame_entry_reg`` "
"*operation that specifies register R2, and register R2 has a* "
"``DW_CFA_def_cfa_expression`` *instruction that that evaluates a* "
"``DW_OP_LLVM_call_frame_entry_reg`` *operation that specifies register R1.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3323
msgid ""
"*Call frame instructions to which these restrictions apply include* "
"``DW_CFA_def_cfa_expression``\\ *,* ``DW_CFA_expression``\\ *, and* "
"``DW_CFA_val_expression``\\ *.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3330
msgid "Row Creation Instructions"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3334
msgid "These instructions are the same as in DWARF Version 5 section 6.4.2.1."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3339
msgid "CFA Definition Instructions"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3341
msgid "``DW_CFA_def_cfa``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3343
msgid ""
"The ``DW_CFA_def_cfa`` instruction takes two unsigned LEB128 operands "
"representing a register number R and a (non-factored) byte displacement B. "
"AS is set to the target architecture default address space identifier. The "
"required action is to define the current CFA rule to be the result of "
"evaluating the DWARF operation expression ``DW_OP_constu AS; "
"DW_OP_aspace_bregx R, B`` as a location description."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3350
msgid "``DW_CFA_def_cfa_sf``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3352
msgid ""
"The ``DW_CFA_def_cfa_sf`` instruction takes two operands: an unsigned LEB128 "
"value representing a register number R and a signed LEB128 factored byte "
"displacement B. AS is set to the target architecture default address space "
"identifier. The required action is to define the current CFA rule to be the "
"result of evaluating the DWARF operation expression ``DW_OP_constu AS; "
"DW_OP_aspace_bregx R, B*data_alignment_factor`` as a location description."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3359
msgid ""
"*The action is the same as* ``DW_CFA_def_cfa`` *except that the second "
"operand is signed and factored.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3362
msgid "``DW_CFA_def_aspace_cfa`` *New*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3364
msgid ""
"The ``DW_CFA_def_aspace_cfa`` instruction takes three unsigned LEB128 "
"operands representing a register number R, a (non-factored) byte "
"displacement B, and a target architecture specific address space identifier "
"AS. The required action is to define the current CFA rule to be the result "
"of evaluating the DWARF operation expression ``DW_OP_constu AS; "
"DW_OP_aspace_bregx R, B`` as a location description."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3371
msgid ""
"If AS is not one of the values defined by the target architecture specific "
"``DW_ASPACE_*`` values then the DWARF expression is ill-formed."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3374
msgid "``DW_CFA_def_aspace_cfa_sf`` *New*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3376
msgid ""
"The ``DW_CFA_def_cfa_sf`` instruction takes three operands: an unsigned "
"LEB128 value representing a register number R, a signed LEB128 factored byte "
"displacement B, and an unsigned LEB128 value representing a target "
"architecture specific address space identifier AS. The required action is to "
"define the current CFA rule to be the result of evaluating the DWARF "
"operation expression ``DW_OP_constu AS; DW_OP_aspace_bregx R, "
"B*data_alignment_factor`` as a location description."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3384
msgid ""
"If AS is not one of the values defined by the target architecture specific "
"``DW_ASPACE_*`` values, then the DWARF expression is ill-formed."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3387
msgid ""
"*The action is the same as* ``DW_CFA_aspace_def_cfa`` *except that the "
"second operand is signed and factored.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3390
msgid "``DW_CFA_def_cfa_register``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3392
msgid ""
"The ``DW_CFA_def_cfa_register`` instruction takes a single unsigned LEB128 "
"operand representing a register number R. The required action is to define "
"the current CFA rule to be the result of evaluating the DWARF operation "
"expression ``DW_OP_constu AS; DW_OP_aspace_bregx R, B`` as a location "
"description. B and AS are the old CFA byte displacement and address space "
"respectively."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3399
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3411
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3423
msgid ""
"If the subprogram has no current CFA rule, or the rule was defined by a "
"``DW_CFA_def_cfa_expression`` instruction, then the DWARF is ill-formed."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3402
msgid "``DW_CFA_def_cfa_offset``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3404
msgid ""
"The ``DW_CFA_def_cfa_offset`` instruction takes a single unsigned LEB128 "
"operand representing a (non-factored) byte displacement B. The required "
"action is to define the current CFA rule to be the result of evaluating the "
"DWARF operation expression ``DW_OP_constu AS; DW_OP_aspace_bregx R, B`` as a "
"location description. R and AS are the old CFA register number and address "
"space respectively."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3414
msgid "``DW_CFA_def_cfa_offset_sf``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3416
msgid ""
"The ``DW_CFA_def_cfa_offset_sf`` instruction takes a signed LEB128 operand "
"representing a factored byte displacement B. The required action is to "
"define the current CFA rule to be the result of evaluating the DWARF "
"operation expression ``DW_OP_constu AS; DW_OP_aspace_bregx R, "
"B*data_alignment_factor`` as a location description. R and AS are the old "
"CFA register number and address space respectively."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3426
msgid ""
"*The action is the same as* ``DW_CFA_def_cfa_offset`` *except that the "
"operand is signed and factored.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3429
msgid "``DW_CFA_def_cfa_expression``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3431
msgid ""
"The ``DW_CFA_def_cfa_expression`` instruction takes a single operand encoded "
"as a ``DW_FORM_exprloc`` value representing a DWARF operation expression E. "
"The required action is to define the current CFA rule to be the result of "
"evaluating E as a location description in the context of the current "
"subprogram, current program location, and an empty initial stack."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3437
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3533
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3546
msgid ""
"*See* :ref:`amdgpu-dwarf-call-frame-instructions` *regarding restrictions on "
"the DWARF expression operations that can be used in E.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3440
msgid ""
"The DWARF is ill-formed if the result of evaluating E is not a memory byte "
"address location description."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3446
msgid "Register Rule Instructions"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3448
msgid "``DW_CFA_undefined``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3450
msgid ""
"The ``DW_CFA_undefined`` instruction takes a single unsigned LEB128 operand "
"that represents a register number R. The required action is to set the rule "
"for the register specified by R to ``undefined``."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3454
msgid "``DW_CFA_same_value``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3456
msgid ""
"The ``DW_CFA_same_value`` instruction takes a single unsigned LEB128 operand "
"that represents a register number R. The required action is to set the rule "
"for the register specified by R to ``same value``."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3460
msgid "``DW_CFA_offset``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3462
msgid ""
"The ``DW_CFA_offset`` instruction takes two operands: a register number R "
"(encoded with the opcode) and an unsigned LEB128 constant representing a "
"factored displacement B. The required action is to change the rule for the "
"register specified by R to be an *offset(B\\*data_alignment_factor)* rule."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3469
msgid ""
"Seems this should be named ``DW_CFA_offset_uf`` since the offset is unsigned "
"factored."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3472
msgid "``DW_CFA_offset_extended``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3474
msgid ""
"The ``DW_CFA_offset_extended`` instruction takes two unsigned LEB128 "
"operands representing a register number R and a factored displacement B. "
"This instruction is identical to ``DW_CFA_offset`` except for the encoding "
"and size of the register operand."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3481
msgid ""
"Seems this should be named ``DW_CFA_offset_extended_uf`` since the "
"displacement is unsigned factored."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3484
msgid "``DW_CFA_offset_extended_sf``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3486
msgid ""
"The ``DW_CFA_offset_extended_sf`` instruction takes two operands: an "
"unsigned LEB128 value representing a register number R and a signed LEB128 "
"factored displacement B. This instruction is identical to "
"``DW_CFA_offset_extended`` except that B is signed."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3491
msgid "``DW_CFA_val_offset``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3493
msgid ""
"The ``DW_CFA_val_offset`` instruction takes two unsigned LEB128 operands "
"representing a register number R and a factored displacement B. The required "
"action is to change the rule for the register indicated by R to be a "
"*val_offset(B\\*data_alignment_factor)* rule."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3500
msgid ""
"Seems this should be named ``DW_CFA_val_offset_uf`` since the displacement "
"is unsigned factored."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3505
msgid ""
"An alternative is to define ``DW_CFA_val_offset`` to implicitly use the "
"target architecture default address space, and add another operation that "
"specifies the address space."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3509
msgid "``DW_CFA_val_offset_sf``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3511
msgid ""
"The ``DW_CFA_val_offset_sf`` instruction takes two operands: an unsigned "
"LEB128 value representing a register number R and a signed LEB128 factored "
"displacement B. This instruction is identical to ``DW_CFA_val_offset`` "
"except that B is signed."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3516
msgid "``DW_CFA_register``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3518
msgid ""
"The ``DW_CFA_register`` instruction takes two unsigned LEB128 operands "
"representing register numbers R1 and R2 respectively. The required action is "
"to set the rule for the register specified by R1 to be a *register(R2)* rule."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3522
msgid "``DW_CFA_expression``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3524
msgid ""
"The ``DW_CFA_expression`` instruction takes two operands: an unsigned LEB128 "
"value representing a register number R, and a ``DW_FORM_block`` value "
"representing a DWARF operation expression E. The required action is to "
"change the rule for the register specified by R to be an *expression(E)* "
"rule."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3530
msgid ""
"*That is, E computes the location description where the register value can "
"be retrieved.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3536
msgid "``DW_CFA_val_expression``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3538
msgid ""
"The ``DW_CFA_val_expression`` instruction takes two operands: an unsigned "
"LEB128 value representing a register number R, and a ``DW_FORM_block`` value "
"representing a DWARF operation expression E. The required action is to "
"change the rule for the register specified by R to be a *val_expression(E)* "
"rule."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3544
msgid "*That is, E computes the value of register R.*"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3549
msgid ""
"If the result of evaluating E is not a value with a base type size that "
"matches the register size, then the DWARF is ill-formed."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3552
msgid "``DW_CFA_restore``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3554
msgid ""
"The ``DW_CFA_restore`` instruction takes a single operand (encoded with the "
"opcode) that represents a register number R. The required action is to "
"change the rule for the register specified by R to the rule assigned it by "
"the ``initial_instructions`` in the CIE."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3559
msgid "``DW_CFA_restore_extended``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3561
msgid ""
"The ``DW_CFA_restore_extended`` instruction takes a single unsigned LEB128 "
"operand that represents a register number R. This instruction is identical "
"to ``DW_CFA_restore`` except for the encoding and size of the register "
"operand."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3567
msgid "Row State Instructions"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3571
msgid "These instructions are the same as in DWARF Version 5 section 6.4.2.4."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3574
msgid "Padding Instruction"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3578
msgid "These instructions are the same as in DWARF Version 5 section 6.4.2.5."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3581
msgid "Call Frame Instruction Usage"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3585
msgid "The same as in DWARF Version 5 section 6.4.3."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3590
msgid "Call Frame Calling Address"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3594
msgid "The same as in DWARF Version 5 section 6.4.4."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3597
msgid "Data Representation"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3602
msgid "32-Bit and 64-Bit DWARF Formats"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3606
msgid "This augments DWARF Version 5 section 7.4."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3608
msgid ""
"Within the body of the ``.debug_info`` section, certain forms of attribute "
"value depend on the choice of DWARF format as follows. For the 32-bit DWARF "
"format, the value is a 4-byte unsigned integer; for the 64-bit DWARF format, "
"the value is an 8-byte unsigned integer."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3613
msgid "``.debug_info`` section attribute form roles"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3617
msgid "Form"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3617
msgid "Role"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3619
msgid "DW_FORM_line_strp"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3619
msgid "offset in ``.debug_line_str``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3620
msgid "DW_FORM_ref_addr"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3620
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3626
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3627
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3628
msgid "offset in ``.debug_info``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3621
msgid "DW_FORM_sec_offset"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3621
msgid "offset in a section other than ``.debug_info`` or ``.debug_str``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3623
msgid "DW_FORM_strp"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3623
msgid "offset in ``.debug_str``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3624
msgid "DW_FORM_strp_sup"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3624
msgid "offset in ``.debug_str`` section of supplementary object file"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3626
msgid "DW_OP_call_ref"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3627
msgid "DW_OP_implicit_pointer"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3628
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3695
msgid "DW_OP_LLVM_aspace_implicit_pointer"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3632
msgid "Format of Debugging Information"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3635
msgid "Attribute Encodings"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3639
msgid "This augments DWARF Version 5 section 7.5.4 and Table 7.5."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3641
msgid ""
"The following table gives the encoding of the additional debugging "
"information entry attributes."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3644
msgid "Attribute encodings"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3648
msgid "Attribute Name"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3648
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3725
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3744
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3769
msgid "Value"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3648
msgid "Classes"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3650
msgid "DW_AT_LLVM_active_lane"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3650
msgid "0x3e08"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3650
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3653
msgid "exprloc, loclist"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3651
msgid "DW_AT_LLVM_augmentation"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3651
msgid "0x3e09"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3651
msgid "string"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3652
msgid "DW_AT_LLVM_lanes"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3652
msgid "0x3e0a"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3653
msgid "DW_AT_LLVM_lane_pc"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3653
msgid "0x3e0b"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3654
msgid "DW_AT_LLVM_vector_size"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3654
msgid "0x3e0c"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3662
msgid ""
"Rename DWARF Version 5 section 7.7 to reflect the unification of location "
"descriptions into DWARF expressions."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3666
msgid "Operation Expressions"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3670
msgid ""
"Rename DWARF Version 5 section 7.7.1 and delete section 7.7.2 to reflect the "
"unification of location descriptions into DWARF expressions."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3673
msgid "This augments DWARF Version 5 section 7.7.1 and Table 7.9."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3675
msgid ""
"The following table gives the encoding of the additional DWARF expression "
"operations."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3678
msgid "DWARF Operation Encodings"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3682
msgid "Operation"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3682
msgid "Code"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3682
msgid "Number of Operands"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3682
msgid "Notes"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3686
msgid "DW_OP_LLVM_form_aspace_address"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3686
msgid "0xe1"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3686
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3687
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3688
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3690
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3692
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3697
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3727
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3792
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3793
msgid "0"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3687
msgid "DW_OP_LLVM_push_lane"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3687
msgid "0xe2"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3688
msgid "DW_OP_LLVM_offset"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3688
msgid "0xe3"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3689
msgid "DW_OP_LLVM_offset_uconst"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3689
msgid "0xe4"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3689
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3691
msgid "1"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3689
msgid "ULEB128 byte displacement"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3690
msgid "DW_OP_LLVM_bit_offset"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3690
msgid "0xe5"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3691
msgid "DW_OP_LLVM_call_frame_entry_reg"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3691
msgid "0xe6"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3691
msgid "ULEB128 register number"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3692
msgid "DW_OP_LLVM_undefined"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3692
msgid "0xe7"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3693
msgid "DW_OP_LLVM_aspace_bregx"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3693
msgid "0xe8"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3693
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3695
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3698
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3700
msgid "2"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3693
msgid "ULEB128 register number, ULEB128 byte displacement"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3695
msgid "0xe9"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3695
msgid "4- or 8-byte offset of DIE, SLEB128 byte displacement"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3697
msgid "DW_OP_LLVM_piece_end"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3697
msgid "0xea"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3698
msgid "DW_OP_LLVM_extend"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3698
msgid "0xeb"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3698
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3700
msgid "ULEB128 bit size, ULEB128 count"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3700
msgid "DW_OP_LLVM_select_bit_piece"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3700
msgid "0xec"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3705
msgid "Location List Expressions"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3709
msgid ""
"Rename DWARF Version 5 section 7.7.3 to reflect that location lists are a "
"kind of DWARF expression."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3713
msgid "Source Languages"
msgstr "來源語言"

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3717
msgid "This augments DWARF Version 5 section 7.12 and Table 7.17."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3719
msgid ""
"The following table gives the encoding of the additional DWARF languages."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3721
msgid "Language encodings"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3725
msgid "Default Lower Bound"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3727
msgid "0x8100"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3731
msgid "Address Class and Address Space Encodings"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3735
msgid "This replaces DWARF Version 5 section 7.13."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3737
msgid ""
"The encodings of the constants used for the currently defined address "
"classes are given in :ref:`amdgpu-dwarf-address-class-encodings-table`."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3740
msgid "Address class encodings"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3746
msgid "0x0000"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3747
msgid "0x0001"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3748
msgid "0x0002"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3749
msgid "0x0003"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3750
msgid "0x0004"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3751
msgid "0x8000"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3752
msgid "0xffff"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3760
msgid "This augments DWARF Version 5 section 7.22 and Table 7.27."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3762
msgid ""
"The following table gives the encoding of the additional line number header "
"entry formats."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3765
msgid "Line number header entry format encodings"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3769
msgid "Line number header entry format name"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3771
msgid "0x2001"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3772
msgid "0x2002"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3780
msgid "This augments DWARF Version 5 section 7.24 and Table 7.29."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3782
msgid ""
"The following table gives the encoding of the additional call frame "
"information instructions."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3785
msgid "Call frame instruction encodings"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3789
msgid "Instruction"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3789
msgid "High 2 Bits"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3789
msgid "Low 6 Bits"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3789
msgid "Operand 1"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3789
msgid "Operand 2"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3789
msgid "Operand 3"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3792
msgid "DW_CFA_def_aspace_cfa"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3792
msgid "0x30"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3792
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3793
msgid "ULEB128 register"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3792
msgid "ULEB128 offset"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3792
#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3793
msgid "ULEB128 address space"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3793
msgid "DW_CFA_def_aspace_cfa_sf"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3793
msgid "0x31"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3793
msgid "SLEB128 offset"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3797
msgid "Attributes by Tag Value (Informative)"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3801
msgid "This augments DWARF Version 5 Appendix A and Table A.1."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3803
msgid ""
"The following table provides the additional attributes that are applicable "
"to debugger information entries."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3806
msgid "Attributes by tag value"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3810
msgid "Tag Name"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3810
msgid "Applicable Attributes"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3812
msgid "``DW_TAG_base_type``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3813
msgid "``DW_TAG_compile_unit``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3814
msgid "``DW_TAG_entry_point``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3817
msgid "``DW_TAG_inlined_subroutine``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3820
msgid "``DW_TAG_subprogram``"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3828
msgid "Examples"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3830
msgid ""
"The AMD GPU specific usage of the features in the proposal, including "
"examples, is available at :ref:`amdgpu-dwarf-debug-information`."
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3836
msgid "References"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3840
msgid "[AMD] `Advanced Micro Devices <https://www.amd.com/>`__"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3844
msgid ""
"[AMD-ROCm] `AMD ROCm Platform <https://rocm-documentation.readthedocs.io>`__"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3848
msgid ""
"[AMD-ROCgdb] `AMD ROCm Debugger (ROCgdb) <https://github.com/ROCm-Developer-"
"Tools/ROCgdb>`__"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3852
msgid ""
"[AMDGPU-LLVM] `User Guide for AMDGPU LLVM Backend <https://llvm.org/docs/"
"AMDGPUUsage.html>`__"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3856
msgid ""
"[CUDA] `Nvidia CUDA Language <https://docs.nvidia.com/cuda/cuda-c-"
"programming-guide/>`__"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3860
msgid "[DWARF] `DWARF Debugging Information Format <http://dwarfstd.org/>`__"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3864
msgid ""
"[ELF] `Executable and Linkable Format (ELF) <http://www.sco.com/developers/"
"gabi/>`__"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3868
msgid ""
"[GCC] `GCC: The GNU Compiler Collection <https://www.gnu.org/software/gcc/"
">`__"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3872
msgid ""
"[GDB] `GDB: The GNU Project Debugger <https://www.gnu.org/software/gdb/>`__"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3876
msgid ""
"[HIP] `HIP Programming Guide <https://rocm-documentation.readthedocs.io/en/"
"latest/Programming_Guides/Programming-Guides.html#hip-programing-guide>`__"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3880
msgid ""
"[HSA] `Heterogeneous System Architecture (HSA) Foundation <http://www."
"hsafoundation.com/>`__"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3884
msgid "[LLVM] `The LLVM Compiler Infrastructure <https://llvm.org/>`__"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3888
msgid ""
"[OpenCL] `The OpenCL Specification Version 2.0 <http://www.khronos.org/"
"registry/cl/specs/opencl-2.0.pdf>`__"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3892
msgid ""
"[Perforce-TotalView] `Perforce TotalView HPC Debugging Software <https://"
"totalview.io/products/totalview>`__"
msgstr ""

#: ../../../AMDGPUDwarfProposalForHeterogeneousDebugging.rst:3896
msgid "[SEMVER] `Semantic Versioning <https://semver.org/>`__"
msgstr ""
