# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:12+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../HowToCrossCompileLLVM.rst:3
msgid "How To Cross-Compile Clang/LLVM using Clang/LLVM"
msgstr ""

#: ../../../HowToCrossCompileLLVM.rst:6
msgid "Introduction"
msgstr ""

#: ../../../HowToCrossCompileLLVM.rst:8
msgid ""
"This document contains information about building LLVM and Clang on host "
"machine, targeting another platform."
msgstr ""

#: ../../../HowToCrossCompileLLVM.rst:11
msgid ""
"For more information on how to use Clang as a cross-compiler, please check "
"https://clang.llvm.org/docs/CrossCompilation.html."
msgstr ""

#: ../../../HowToCrossCompileLLVM.rst:14
msgid "TODO: Add MIPS and other platforms to this document."
msgstr ""

#: ../../../HowToCrossCompileLLVM.rst:17
msgid "Cross-Compiling from x86_64 to ARM"
msgstr ""

#: ../../../HowToCrossCompileLLVM.rst:19
msgid ""
"In this use case, we'll be using CMake and Ninja, on a Debian-based Linux "
"system, cross-compiling from an x86_64 host (most Intel and AMD chips "
"nowadays) to a hard-float ARM target (most ARM targets nowadays)."
msgstr ""

#: ../../../HowToCrossCompileLLVM.rst:23
msgid "The packages you'll need are:"
msgstr ""

#: ../../../HowToCrossCompileLLVM.rst:25
msgid "``cmake``"
msgstr ""

#: ../../../HowToCrossCompileLLVM.rst:26
msgid "``ninja-build`` (from backports in Ubuntu)"
msgstr ""

#: ../../../HowToCrossCompileLLVM.rst:27
msgid "``gcc-4.7-arm-linux-gnueabihf``"
msgstr ""

#: ../../../HowToCrossCompileLLVM.rst:28
msgid "``gcc-4.7-multilib-arm-linux-gnueabihf``"
msgstr ""

#: ../../../HowToCrossCompileLLVM.rst:29
msgid "``binutils-arm-linux-gnueabihf``"
msgstr ""

#: ../../../HowToCrossCompileLLVM.rst:30
msgid "``libgcc1-armhf-cross``"
msgstr ""

#: ../../../HowToCrossCompileLLVM.rst:31
msgid "``libsfgcc1-armhf-cross``"
msgstr ""

#: ../../../HowToCrossCompileLLVM.rst:32
msgid "``libstdc++6-armhf-cross``"
msgstr ""

#: ../../../HowToCrossCompileLLVM.rst:33
msgid "``libstdc++6-4.7-dev-armhf-cross``"
msgstr ""

#: ../../../HowToCrossCompileLLVM.rst:36
msgid "Configuring CMake"
msgstr ""

#: ../../../HowToCrossCompileLLVM.rst:38
msgid ""
"For more information on how to configure CMake for LLVM/Clang, see :doc:"
"`CMake`."
msgstr ""

#: ../../../HowToCrossCompileLLVM.rst:41
msgid "The CMake options you need to add are:"
msgstr ""

#: ../../../HowToCrossCompileLLVM.rst:43
msgid "``-DCMAKE_CROSSCOMPILING=True``"
msgstr ""

#: ../../../HowToCrossCompileLLVM.rst:44
msgid "``-DCMAKE_INSTALL_PREFIX=<install-dir>``"
msgstr ""

#: ../../../HowToCrossCompileLLVM.rst:45
msgid "``-DLLVM_TABLEGEN=<path-to-host-bin>/llvm-tblgen``"
msgstr ""

#: ../../../HowToCrossCompileLLVM.rst:46
msgid "``-DCLANG_TABLEGEN=<path-to-host-bin>/clang-tblgen``"
msgstr ""

#: ../../../HowToCrossCompileLLVM.rst:47
msgid "``-DLLVM_DEFAULT_TARGET_TRIPLE=arm-linux-gnueabihf``"
msgstr ""

#: ../../../HowToCrossCompileLLVM.rst:48
msgid "``-DLLVM_TARGET_ARCH=ARM``"
msgstr ""

#: ../../../HowToCrossCompileLLVM.rst:49
msgid "``-DLLVM_TARGETS_TO_BUILD=ARM``"
msgstr ""

#: ../../../HowToCrossCompileLLVM.rst:51
msgid ""
"If you're compiling with GCC, you can use architecture options for your "
"target, and the compiler driver will detect everything that it needs:"
msgstr ""

#: ../../../HowToCrossCompileLLVM.rst:54
msgid "``-DCMAKE_CXX_FLAGS='-march=armv7-a -mcpu=cortex-a9 -mfloat-abi=hard'``"
msgstr ""

#: ../../../HowToCrossCompileLLVM.rst:56
msgid ""
"However, if you're using Clang, the driver might not be up-to-date with your "
"specific Linux distribution, version or GCC layout, so you'll need to fudge."
msgstr ""

#: ../../../HowToCrossCompileLLVM.rst:59
msgid "In addition to the ones above, you'll also need:"
msgstr ""

#: ../../../HowToCrossCompileLLVM.rst:61
msgid ""
"``'-target arm-linux-gnueabihf'`` or whatever is the triple of your cross "
"GCC."
msgstr ""

#: ../../../HowToCrossCompileLLVM.rst:62
msgid ""
"``'--sysroot=/usr/arm-linux-gnueabihf'``, ``'--sysroot=/opt/gcc/arm-linux-"
"gnueabihf'`` or whatever is the location of your GCC's sysroot (where /lib, /"
"bin etc are)."
msgstr ""

#: ../../../HowToCrossCompileLLVM.rst:64
msgid ""
"Appropriate use of ``-I`` and ``-L``, depending on how the cross GCC is "
"installed, and where are the libraries and headers."
msgstr ""

#: ../../../HowToCrossCompileLLVM.rst:67
msgid ""
"The TableGen options are required to compile it with the host compiler, so "
"you'll need to compile LLVM (or at least ``llvm-tblgen``) to your host "
"platform before you start. The CXX flags define the target, cpu (which in "
"this case defaults to ``fpu=VFP3`` with NEON), and forcing the hard-float "
"ABI. If you're using Clang as a cross-compiler, you will *also* have to set "
"``--sysroot`` to make sure it picks the correct linker."
msgstr ""

#: ../../../HowToCrossCompileLLVM.rst:74
msgid ""
"When using Clang, it's important that you choose the triple to be "
"*identical* to the GCC triple and the sysroot. This will make it easier for "
"Clang to find the correct tools and include headers. But that won't mean all "
"headers and libraries will be found. You'll still need to use ``-I`` and ``-"
"L`` to locate those extra ones, depending on your distribution."
msgstr ""

#: ../../../HowToCrossCompileLLVM.rst:80
msgid ""
"Most of the time, what you want is to have a native compiler to the platform "
"itself, but not others. So there's rarely a point in compiling all back-"
"ends. For that reason, you should also set the ``TARGETS_TO_BUILD`` to only "
"build the back-end you're targeting to."
msgstr ""

#: ../../../HowToCrossCompileLLVM.rst:85
msgid ""
"You must set the ``CMAKE_INSTALL_PREFIX``, otherwise a ``ninja install`` "
"will copy ARM binaries to your root filesystem, which is not what you want."
msgstr ""

#: ../../../HowToCrossCompileLLVM.rst:90
msgid "Hacks"
msgstr ""

#: ../../../HowToCrossCompileLLVM.rst:92
msgid ""
"There are some bugs in current LLVM, which require some fiddling before "
"running CMake:"
msgstr ""

#: ../../../HowToCrossCompileLLVM.rst:95
msgid ""
"If you're using Clang as the cross-compiler, there is a problem in the LLVM "
"ARM back-end that is producing absolute relocations on position-independent "
"code (``R_ARM_THM_MOVW_ABS_NC``), so for now, you should disable PIC:"
msgstr ""

#: ../../../HowToCrossCompileLLVM.rst:104
msgid ""
"This is not a problem, since Clang/LLVM libraries are statically linked "
"anyway, it shouldn't affect much."
msgstr ""

#: ../../../HowToCrossCompileLLVM.rst:107
msgid ""
"The ARM libraries won't be installed in your system. But the CMake prepare "
"step, which checks for dependencies, will check the *host* libraries, not "
"the *target* ones. Below there's a list of some dependencies, but your "
"project could have more, or this document could be outdated. You'll see the "
"errors while linking as an indication of that."
msgstr ""

#: ../../../HowToCrossCompileLLVM.rst:114
msgid ""
"Debian based distros have a way to add ``multiarch``, which adds a new "
"architecture and allows you to install packages for those systems. See "
"https://wiki.debian.org/Multiarch/HOWTO for more info."
msgstr ""

#: ../../../HowToCrossCompileLLVM.rst:118
msgid ""
"But not all distros will have that, and possibly not an easy way to install "
"them in any anyway, so you'll have to build/download them separately."
msgstr ""

#: ../../../HowToCrossCompileLLVM.rst:122
msgid ""
"A quick way of getting the libraries is to download them from a distribution "
"repository, like Debian (http://packages.debian.org/jessie/), and download "
"the missing libraries. Note that the ``libXXX`` will have the shared objects "
"(``.so``) and the ``libXXX-dev`` will give you the headers and the static "
"(``.a``) library. Just in case, download both."
msgstr ""

#: ../../../HowToCrossCompileLLVM.rst:129
msgid ""
"The ones you need for ARM are: ``libtinfo``, ``zlib1g``, ``libxml2`` and "
"``liblzma``. In the Debian repository you'll find downloads for all "
"architectures."
msgstr ""

#: ../../../HowToCrossCompileLLVM.rst:133
msgid ""
"After you download and unpack all ``.deb`` packages, copy all ``.so`` and ``."
"a`` to a directory, make the appropriate symbolic links (if necessary), and "
"add the relevant ``-L`` and ``-I`` paths to ``-DCMAKE_CXX_FLAGS`` above."
msgstr ""

#: ../../../HowToCrossCompileLLVM.rst:140
msgid "Running CMake and Building"
msgstr ""

#: ../../../HowToCrossCompileLLVM.rst:142
msgid "Finally, if you're using your platform compiler, run:"
msgstr ""

#: ../../../HowToCrossCompileLLVM.rst:148
msgid "If you're using Clang as the cross-compiler, run:"
msgstr ""

#: ../../../HowToCrossCompileLLVM.rst:154
msgid ""
"If you have ``clang``/``clang++`` on the path, it should just work, and "
"special Ninja files will be created in the build directory. I strongly "
"suggest you to run ``cmake`` on a separate build directory, *not* inside the "
"source tree."
msgstr ""

#: ../../../HowToCrossCompileLLVM.rst:159
msgid "To build, simply type:"
msgstr ""

#: ../../../HowToCrossCompileLLVM.rst:165
msgid ""
"It should automatically find out how many cores you have, what are the rules "
"that needs building and will build the whole thing."
msgstr ""

#: ../../../HowToCrossCompileLLVM.rst:168
msgid ""
"You can't run ``ninja check-all`` on this tree because the created binaries "
"are targeted to ARM, not x86_64."
msgstr ""

#: ../../../HowToCrossCompileLLVM.rst:172
msgid "Installing and Using"
msgstr ""

#: ../../../HowToCrossCompileLLVM.rst:174
msgid "After the LLVM/Clang has built successfully, you should install it via:"
msgstr ""

#: ../../../HowToCrossCompileLLVM.rst:181
msgid ""
"which will create a sysroot on the install-dir. You can then tar that "
"directory into a binary with the full triple name (for easy identification), "
"like:"
msgstr ""

#: ../../../HowToCrossCompileLLVM.rst:190
msgid ""
"If you copy that tarball to your target board, you'll be able to use it for "
"running the test-suite, for example. Follow the guidelines at https://llvm."
"org/docs/lnt/quickstart.html, unpack the tarball in the test directory, and "
"use options:"
msgstr ""

#: ../../../HowToCrossCompileLLVM.rst:203
msgid ""
"Remember to add the ``-jN`` options to ``lnt`` to the number of CPUs on your "
"board. Also, the path to your clang has to be absolute, so you'll need the "
"`pwd` trick above."
msgstr ""
