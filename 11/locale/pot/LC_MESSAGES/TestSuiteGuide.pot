# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:12+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../TestSuiteGuide.md:1
msgid "test-suite Guide"
msgstr ""

#: ../../../TestSuiteGuide.md:4
msgid "Quickstart"
msgstr ""

#: ../../../TestSuiteGuide.md:7
msgid ""
"The lit test runner is required to run the tests. You can either use one "
"from an LLVM build:"
msgstr ""

#: ../../../TestSuiteGuide.md:15
msgid ""
"An alternative is installing it as a python package in a python virtual "
"environment:"
msgstr ""

#: ../../../TestSuiteGuide.md:27
msgid "Check out the test-suite module with:"
msgstr ""

#: ../../../TestSuiteGuide.md:33
msgid ""
"Create a build directory and use CMake to configure the suite. Use the "
"CMAKE_C_COMPILER option to specify the compiler to test. Use a cache file to "
"choose a typical build configuration:"
msgstr ""

#: ../../../TestSuiteGuide.md:45
msgid "Build the benchmarks:"
msgstr ""

#: ../../../TestSuiteGuide.md:55
msgid "Run the tests with lit:"
msgstr ""

#: ../../../TestSuiteGuide.md:71
msgid "Show and compare result files (optional):"
msgstr ""

#: ../../../TestSuiteGuide.md:83
msgid "Structure"
msgstr ""

#: ../../../TestSuiteGuide.md:86
msgid ""
"The test-suite contains benchmark and test programs.  The programs come with "
"reference outputs so that their correctness can be checked.  The suite comes "
"with tools to collect metrics such as benchmark runtime, compilation time "
"and code size."
msgstr ""

#: ../../../TestSuiteGuide.md:91
msgid "The test-suite is divided into several directories:"
msgstr ""

#: ../../../TestSuiteGuide.md:93
msgid "SingleSource/"
msgstr ""

#: ../../../TestSuiteGuide.md:95
msgid ""
"Contains test programs that are only a single source file in size.  A "
"subdirectory may contain several programs."
msgstr ""

#: ../../../TestSuiteGuide.md:98
msgid "MultiSource/"
msgstr ""

#: ../../../TestSuiteGuide.md:100
msgid ""
"Contains subdirectories which entire programs with multiple source files. "
"Large benchmarks and whole applications go here."
msgstr ""

#: ../../../TestSuiteGuide.md:103
msgid "MicroBenchmarks/"
msgstr ""

#: ../../../TestSuiteGuide.md:105
msgid ""
"Programs using the google-benchmark library. The programs define functions "
"that are run multiple times until the measurement results are statistically "
"significant."
msgstr ""

#: ../../../TestSuiteGuide.md:109
msgid "External/"
msgstr ""

#: ../../../TestSuiteGuide.md:111
msgid ""
"Contains descriptions and test data for code that cannot be directly "
"distributed with the test-suite. The most prominent members of this "
"directory are the SPEC CPU benchmark suites. See External Suites."
msgstr ""

#: ../../../TestSuiteGuide.md:116
msgid "Bitcode/"
msgstr ""

#: ../../../TestSuiteGuide.md:118
msgid "These tests are mostly written in LLVM bitcode."
msgstr ""

#: ../../../TestSuiteGuide.md:120
msgid "CTMark/"
msgstr ""

#: ../../../TestSuiteGuide.md:122
msgid ""
"Contains symbolic links to other benchmarks forming a representative sample "
"for compilation performance measurements."
msgstr ""

#: ../../../TestSuiteGuide.md:125
msgid "Benchmarks"
msgstr ""

#: ../../../TestSuiteGuide.md:127
msgid ""
"Every program can work as a correctness test. Some programs are unsuitable "
"for performance measurements. Setting the TEST_SUITE_BENCHMARKING_ONLY CMake "
"option to ON will disable them."
msgstr ""

#: ../../../TestSuiteGuide.md:132
msgid "Configuration"
msgstr ""

#: ../../../TestSuiteGuide.md:135
msgid ""
"The test-suite has configuration options to customize building and running "
"the benchmarks. CMake can print a list of them:"
msgstr ""

#: ../../../TestSuiteGuide.md:146
msgid "Common Configuration Options"
msgstr ""

#: ../../../TestSuiteGuide.md:148
msgid "CMAKE_C_FLAGS"
msgstr ""

#: ../../../TestSuiteGuide.md:150
msgid ""
"Specify extra flags to be passed to C compiler invocations.  The flags are "
"also passed to the C++ compiler and linker invocations.  See https://cmake."
"org/cmake/help/latest/variable/CMAKE_LANG_FLAGS.html"
msgstr ""

#: ../../../TestSuiteGuide.md:154
msgid "CMAKE_C_COMPILER"
msgstr ""

#: ../../../TestSuiteGuide.md:156
msgid ""
"Select the C compiler executable to be used. Note that the C++ compiler is "
"inferred automatically i.e. when specifying path/to/clang CMake will "
"automatically use path/to/clang++ as the C++ compiler.  See https://cmake."
"org/cmake/help/latest/variable/CMAKE_LANG_COMPILER.html"
msgstr ""

#: ../../../TestSuiteGuide.md:161
msgid "CMAKE_BUILD_TYPE"
msgstr ""

#: ../../../TestSuiteGuide.md:163
msgid ""
"Select a build type like OPTIMIZE or DEBUG selecting a set of predefined "
"compiler flags. These flags are applied regardless of the CMAKE_C_FLAGS "
"option and may be changed by modifying CMAKE_C_FLAGS_OPTIMIZE etc.  See "
"https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html"
msgstr ""

#: ../../../TestSuiteGuide.md:168
msgid "TEST_SUITE_RUN_UNDER"
msgstr ""

#: ../../../TestSuiteGuide.md:170
msgid ""
"Prefix test invocations with the given tool. This is typically used to run "
"cross-compiled tests within a simulator tool."
msgstr ""

#: ../../../TestSuiteGuide.md:173
msgid "TEST_SUITE_BENCHMARKING_ONLY"
msgstr ""

#: ../../../TestSuiteGuide.md:175
msgid ""
"Disable tests that are unsuitable for performance measurements. The disabled "
"tests either run for a very short time or are dominated by I/O performance "
"making them unsuitable as compiler performance tests."
msgstr ""

#: ../../../TestSuiteGuide.md:179
msgid "TEST_SUITE_SUBDIRS"
msgstr ""

#: ../../../TestSuiteGuide.md:181
msgid ""
"Semicolon-separated list of directories to include. This can be used to only "
"build parts of the test-suite or to include external suites.  This option "
"does not work reliably with deeper subdirectories as it skips intermediate "
"CMakeLists.txt files which may be required."
msgstr ""

#: ../../../TestSuiteGuide.md:186
msgid "TEST_SUITE_COLLECT_STATS"
msgstr ""

#: ../../../TestSuiteGuide.md:188
msgid ""
"Collect internal LLVM statistics. Appends -save-stats=obj when invocing the "
"compiler and makes the lit runner collect and merge the statistic files."
msgstr ""

#: ../../../TestSuiteGuide.md:191
msgid "TEST_SUITE_RUN_BENCHMARKS"
msgstr ""

#: ../../../TestSuiteGuide.md:193
msgid ""
"If this is set to OFF then lit will not actually run the tests but just "
"collect build statistics like compile time and code size."
msgstr ""

#: ../../../TestSuiteGuide.md:196
msgid "TEST_SUITE_USE_PERF"
msgstr ""

#: ../../../TestSuiteGuide.md:198
msgid ""
"Use the perf tool for time measurement instead of the timeit tool that comes "
"with the test-suite.  The perf is usually available on linux systems."
msgstr ""

#: ../../../TestSuiteGuide.md:201
msgid ""
"TEST_SUITE_SPEC2000_ROOT, TEST_SUITE_SPEC2006_ROOT, "
"TEST_SUITE_SPEC2017_ROOT, ..."
msgstr ""

#: ../../../TestSuiteGuide.md:203
msgid ""
"Specify installation directories of external benchmark suites. You can find "
"more information about expected versions or usage in the README files in the "
"External directory (such as External/SPEC/README)"
msgstr ""

#: ../../../TestSuiteGuide.md:207
msgid "Common CMake Flags"
msgstr ""

#: ../../../TestSuiteGuide.md:209
msgid "-GNinja"
msgstr ""

#: ../../../TestSuiteGuide.md:211
msgid "Generate build files for the ninja build tool."
msgstr ""

#: ../../../TestSuiteGuide.md:213
msgid "-Ctest-suite/cmake/caches/<cachefile.cmake>"
msgstr ""

#: ../../../TestSuiteGuide.md:215
msgid ""
"Use a CMake cache.  The test-suite comes with several CMake caches which "
"predefine common or tricky build configurations."
msgstr ""

#: ../../../TestSuiteGuide.md:219
msgid "Displaying and Analyzing Results"
msgstr ""

#: ../../../TestSuiteGuide.md:222
msgid ""
"The compare.py script displays and compares result files.  A result file is "
"produced when invoking lit with the -o filename.json flag."
msgstr ""

#: ../../../TestSuiteGuide.md:225
msgid "Example usage:"
msgstr ""

#: ../../../TestSuiteGuide.md:227
msgid "Basic Usage:"
msgstr ""

#: ../../../TestSuiteGuide.md:251
msgid "Show compile_time or text segment size metrics:"
msgstr ""

#: ../../../TestSuiteGuide.md:258
msgid "Compare two result files and filter short running tests:"
msgstr ""

#: ../../../TestSuiteGuide.md:271
msgid ""
"Merge multiple baseline and experiment result files by taking the minimum "
"runtime each:"
msgstr ""

#: ../../../TestSuiteGuide.md:278
msgid "Continuous Tracking with LNT"
msgstr ""

#: ../../../TestSuiteGuide.md:280
msgid ""
"LNT is a set of client and server tools for continuously monitoring "
"performance. You can find more information at https://llvm.org/docs/lnt. The "
"official LNT instance of the LLVM project is hosted at http://lnt.llvm.org."
msgstr ""

#: ../../../TestSuiteGuide.md:286
msgid "External Suites"
msgstr ""

#: ../../../TestSuiteGuide.md:289
msgid "External suites such as SPEC can be enabled by either"
msgstr ""

#: ../../../TestSuiteGuide.md:291
msgid ""
"placing (or linking) them into the test-suite/test-suite-externals/xxx "
"directory (example: test-suite/test-suite-externals/speccpu2000)"
msgstr ""

#: ../../../TestSuiteGuide.md:292
msgid ""
"using a configuration option such as -D TEST_SUITE_SPEC2000_ROOT=path/to/"
"speccpu2000"
msgstr ""

#: ../../../TestSuiteGuide.md:294
msgid ""
"You can find further information in the respective README files such as test-"
"suite/External/SPEC/README."
msgstr ""

#: ../../../TestSuiteGuide.md:297
msgid ""
"For the SPEC benchmarks you can switch between the test, train and ref input "
"datasets via the TEST_SUITE_RUN_TYPE configuration option. The train dataset "
"is used by default."
msgstr ""

#: ../../../TestSuiteGuide.md:302
msgid "Custom Suites"
msgstr ""

#: ../../../TestSuiteGuide.md:305
msgid ""
"You can build custom suites using the test-suite infrastructure. A custom "
"suite has a CMakeLists.txt file at the top directory. The CMakeLists.txt "
"will be picked up automatically if placed into a subdirectory of the test-"
"suite or when setting the TEST_SUITE_SUBDIRS variable:"
msgstr ""

#: ../../../TestSuiteGuide.md:315
msgid "Profile Guided Optimization"
msgstr ""

#: ../../../TestSuiteGuide.md:318
msgid ""
"Profile guided optimization requires to compile and run twice. First the "
"benchmark should be compiled with profile generation instrumentation enabled "
"and setup for training data. The lit runner will merge the profile files "
"using llvm-profdata so they can be used by the second compilation run."
msgstr ""

#: ../../../TestSuiteGuide.md:323 ../../../TestSuiteGuide.md:370
msgid "Example:"
msgstr ""

#: ../../../TestSuiteGuide.md:340
msgid "The TEST_SUITE_RUN_TYPE setting only affects the SPEC benchmark suites."
msgstr ""

#: ../../../TestSuiteGuide.md:343
msgid "Cross Compilation and External Devices"
msgstr ""

#: ../../../TestSuiteGuide.md:346
msgid "Compilation"
msgstr ""

#: ../../../TestSuiteGuide.md:348
msgid ""
"CMake allows to cross compile to a different target via toolchain files. "
"More information can be found here:"
msgstr ""

#: ../../../TestSuiteGuide.md:351
msgid "https://llvm.org/docs/lnt/tests.html#cross-compiling"
msgstr ""

#: ../../../TestSuiteGuide.md:353
msgid "https://cmake.org/cmake/help/latest/manual/cmake-toolchains.7.html"
msgstr ""

#: ../../../TestSuiteGuide.md:355
msgid ""
"Cross compilation from macOS to iOS is possible with the test-suite/cmake/"
"caches/target-target-*-iphoneos-internal.cmake CMake cache files; this "
"requires an internal iOS SDK."
msgstr ""

#: ../../../TestSuiteGuide.md:359
msgid "Running"
msgstr ""

#: ../../../TestSuiteGuide.md:361
msgid "There are two ways to run the tests in a cross compilation setting:"
msgstr ""

#: ../../../TestSuiteGuide.md:363
msgid ""
"Via SSH connection to an external device: The TEST_SUITE_REMOTE_HOST option "
"should be set to the SSH hostname.  The executables and data files need to "
"be transferred to the device after compilation.  This is typically done via "
"the rsync make target.  After this, the lit runner can be used on the host "
"machine. It will prefix the benchmark and verification command lines with an "
"ssh command."
msgstr ""

#: ../../../TestSuiteGuide.md:382
msgid ""
"You can specify a simulator for the target machine with the "
"TEST_SUITE_RUN_UNDER setting. The lit runner will prefix all benchmark "
"invocations with it."
msgstr ""

#: ../../../TestSuiteGuide.md:387
msgid "Running the test-suite via LNT"
msgstr ""

#: ../../../TestSuiteGuide.md:390
msgid ""
"The LNT tool can run the test-suite. Use this when submitting test results "
"to an LNT instance.  See https://llvm.org/docs/lnt/tests.html#llvm-cmake-"
"test-suite for details."
msgstr ""

#: ../../../TestSuiteGuide.md:395
msgid "Running the test-suite via Makefiles (deprecated)"
msgstr ""

#: ../../../TestSuiteGuide.md:398
msgid ""
"Note: The test-suite comes with a set of Makefiles that are considered "
"deprecated.  They do not support newer testing modes like Bitcode or "
"Microbenchmarks and are harder to use."
msgstr ""

#: ../../../TestSuiteGuide.md:402
msgid "Old documentation is available in the test-suite Makefile Guide."
msgstr ""
