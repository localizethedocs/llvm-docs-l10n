# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:12+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../ReleaseNotes.rst:3
msgid "LLVM 11.0.0 Release Notes"
msgstr ""

#: ../../../ReleaseNotes.rst:9
msgid "Introduction"
msgstr ""

#: ../../../ReleaseNotes.rst:11
msgid ""
"This document contains the release notes for the LLVM Compiler "
"Infrastructure, release 11.0.0.  Here we describe the status of LLVM, "
"including major improvements from the previous release, improvements in "
"various subprojects of LLVM, and some of the current users of the code.  All "
"LLVM releases may be downloaded from the `LLVM releases web site <https://"
"llvm.org/releases/>`_."
msgstr ""

#: ../../../ReleaseNotes.rst:17
msgid ""
"For more information about LLVM, including information about the latest "
"release, please check out the `main LLVM web site <https://llvm.org/>`_.  If "
"you have questions or comments, the `LLVM Developer's Mailing List <https://"
"lists.llvm.org/mailman/listinfo/llvm-dev>`_ is a good place to send them."
msgstr ""

#: ../../../ReleaseNotes.rst:24
msgid "Deprecated and Removed Features/APIs"
msgstr ""

#: ../../../ReleaseNotes.rst:25
msgid "BG/Q support, including QPX, will be removed in the 12.0.0 release."
msgstr ""

#: ../../../ReleaseNotes.rst:28
msgid "Non-comprehensive list of changes in this release"
msgstr ""

#: ../../../ReleaseNotes.rst:30
msgid ""
"The llgo frontend has been removed for now, but may be resurrected in the "
"future."
msgstr ""

#: ../../../ReleaseNotes.rst:34
msgid "Changes to the LLVM IR"
msgstr ""

#: ../../../ReleaseNotes.rst:36
msgid ""
"The callsite attribute `vector-function-abi-variant <https://llvm.org/docs/"
"LangRef.html#call-site-attributes>`_ has been added to describe the mapping "
"between scalar functions and vector functions, to enable vectorization of "
"call sites. The information provided by the attribute is interfaced via the "
"API provided by the ``VFDatabase`` class. When scanning through the set of "
"vector functions associated with a scalar call, the loop vectorizer now "
"relies on ``VFDatabase``, instead of ``TargetLibraryInfo``."
msgstr ""

#: ../../../ReleaseNotes.rst:45
msgid ""
"`dereferenceable` attributes and metadata on pointers no longer imply "
"anything about the alignment of the pointer in question. Previously, some "
"optimizations would make assumptions based on the type of the pointer. This "
"behavior was undocumented. To preserve optimizations, frontends may need to "
"be updated to generate appropriate `align` attributes and metadata."
msgstr ""

#: ../../../ReleaseNotes.rst:51
msgid ""
"The DIModule metadata is extended to contain file and line number "
"information. This information is used to represent Fortran modules debug "
"info at IR level."
msgstr ""

#: ../../../ReleaseNotes.rst:55
msgid ""
"LLVM IR now supports two distinct ``llvm::FixedVectorType`` and ``llvm::"
"ScalableVectorType`` vector types, both derived from the base class ``llvm::"
"VectorType``. A number of algorithms dealing with IR vector types have been "
"updated to make sure they work for both scalable and fixed vector types. "
"Where possible, the code has been made generic to cover both cases using the "
"base class. Specifically, places that were using the type ``unsigned`` to "
"count the number of lanes of a vector are now using ``llvm::ElementCount``. "
"In places where ``uint64_t`` was used to denote the size in bits of a IR "
"type we have partially migrated the codebase to using ``llvm::TypeSize``."
msgstr ""

#: ../../../ReleaseNotes.rst:66
msgid ""
"Branching on ``undef``/``poison`` is undefined behavior. It is needed for "
"correctly analyzing value ranges based on branch conditions. This is "
"consistent with MSan's behavior as well."
msgstr ""

#: ../../../ReleaseNotes.rst:70
msgid ""
"``memset``/``memcpy``/``memmove`` can take ``undef``/``poison`` pointer(s) "
"if the size to fill is zero."
msgstr ""

#: ../../../ReleaseNotes.rst:73
msgid ""
"Passing ``undef``/``poison`` to a standard I/O library function call "
"(`printf`/`fputc`/...) is undefined behavior. The new ``noundef`` attribute "
"is attached to the functions' arguments. The full list is available at "
"``llvm::inferLibFuncAttributes``."
msgstr ""

#: ../../../ReleaseNotes.rst:79
msgid "Changes to building LLVM"
msgstr ""

#: ../../../ReleaseNotes.rst:81
msgid ""
"The LLVM project has started the migration towards Python 3, and the build "
"system now prefers Python 3 whenever available.  If the Python 3 interpreter "
"(or libraries) are not found, the build system will, for the time being, "
"fall back to Python 2.  It is recommended that downstream projects migrate "
"to Python 3 as Python 2 has been end-of-life'd by the Python Software "
"Foundation."
msgstr ""

#: ../../../ReleaseNotes.rst:89
msgid "Changes to the JIT infrastructure"
msgstr ""

#: ../../../ReleaseNotes.rst:91
msgid ""
"LLJIT now supports execution of static inits / deinits via the LLJIT::"
"initialize and LLJIT::deinitialize methods"
msgstr ""

#: ../../../ReleaseNotes.rst:94
msgid ""
"Static libraries can now be added to a JITDylib using the "
"StaticLibraryDefinitionGenerator class"
msgstr ""

#: ../../../ReleaseNotes.rst:97
msgid ""
"A C API has been added for OrcV2 (llvm-project/llvm/include/llvm-c/Orc.h)"
msgstr ""

#: ../../../ReleaseNotes.rst:99
msgid ""
"Several OrcV2 example projects have been added to llvm-project/llvm/examples/"
"OrcV2Examples"
msgstr ""

#: ../../../ReleaseNotes.rst:102
msgid "Many bug fixes and API improvements"
msgstr ""

#: ../../../ReleaseNotes.rst:105
msgid "Changes to the AArch64 Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:107
msgid ""
"Back up and restore x18 in functions with windows calling convention on non-"
"windows OSes."
msgstr ""

#: ../../../ReleaseNotes.rst:110
msgid ""
"Clearly error out on unsupported relocations when targeting COFF, instead of "
"silently accepting some (without being able to do what was requested)."
msgstr ""

#: ../../../ReleaseNotes.rst:113
msgid ""
"Implemented codegen support for the SVE C-language intrinsics documented in "
"`Arm C Language Extensions (ACLE) for SVE <https://developer.arm.com/"
"documentation/100987/>`_ (version ``00bet5``). For more information, see the "
"``clang`` 11 release notes."
msgstr ""

#: ../../../ReleaseNotes.rst:119 ../../../ReleaseNotes.rst:155
msgid "Added support for Armv8.6-A:"
msgstr ""

#: ../../../ReleaseNotes.rst:121
msgid "Assembly support for the following extensions:"
msgstr ""

#: ../../../ReleaseNotes.rst:123
msgid "Enhanced Counter Virtualization (ARMv8.6-ECV)."
msgstr ""

#: ../../../ReleaseNotes.rst:124
msgid "Fine Grained Traps (ARMv8.6-FGT)."
msgstr ""

#: ../../../ReleaseNotes.rst:125
msgid "Activity Monitors virtualization (ARMv8.6-AMU)."
msgstr ""

#: ../../../ReleaseNotes.rst:126
msgid "Data gathering hint (ARMv8.0-DGH)."
msgstr ""

#: ../../../ReleaseNotes.rst:128
msgid ""
"Assembly and intrinsics support for the Armv8.6-A Matrix Multiply extension "
"for Neon and SVE vectors."
msgstr ""

#: ../../../ReleaseNotes.rst:131
msgid ""
"Support for the ARMv8.2-BF16 BFloat16 extension. This includes a new C-level "
"storage-only `__bf16` type, a `BFloat` IR type, a `bf16` MVT, and assembly "
"and intrinsics support."
msgstr ""

#: ../../../ReleaseNotes.rst:135
msgid ""
"Added support for Cortex-A34, Cortex-A77, Cortex-A78 and Cortex-X1 cores."
msgstr ""

#: ../../../ReleaseNotes.rst:138
msgid "Changes to the ARM Backend"
msgstr ""

#: ../../../ReleaseNotes.rst:140
msgid ""
"Implemented C-language intrinsics for the full Arm v8.1-M MVE instruction "
"set. ``<arm_mve.h>`` now supports the complete API defined in the Arm C "
"Language Extensions."
msgstr ""

#: ../../../ReleaseNotes.rst:144
msgid ""
"Added support for assembly for the optional Custom Datapath Extension (CDE) "
"for Arm M-profile targets."
msgstr ""

#: ../../../ReleaseNotes.rst:147
msgid ""
"Implemented C-language intrinsics ``<arm_cde.h>`` for the CDE instruction "
"set."
msgstr ""

#: ../../../ReleaseNotes.rst:149
msgid ""
"Clang now defaults to ``-fomit-frame-pointer`` when targeting non-Android "
"Linux for arm and thumb when optimizations are enabled. Users that were "
"previously not specifying a value and relying on the implicit compiler "
"default may wish to specify ``-fno-omit-frame-pointer`` to get the old "
"behavior. This improves compatibility with GCC."
msgstr ""

#: ../../../ReleaseNotes.rst:157
msgid ""
"Assembly and intrinsics support for the Armv8.6-A Matrix Multiply extension "
"for Neon vectors."
msgstr ""

#: ../../../ReleaseNotes.rst:160
msgid ""
"Support for the ARMv8.2-AA32BF16 BFloat16 extension. This includes a new C-"
"level storage-only `__bf16` type, a `BFloat` IR type, a `bf16` MVT, and "
"assembly and intrinsics support."
msgstr ""

#: ../../../ReleaseNotes.rst:164
msgid "Added support for CMSE."
msgstr ""

#: ../../../ReleaseNotes.rst:166
msgid ""
"Added support for Cortex-M55, Cortex-A77, Cortex-A78 and Cortex-X1 cores."
msgstr ""

#: ../../../ReleaseNotes.rst:168
msgid ""
"The Machine Outliner is now supported for ARM and Thumb2, it is not turned "
"on by default and can be enabled with the ``-moutline`` clang flag."
msgstr ""

#: ../../../ReleaseNotes.rst:173
msgid "Changes to the PowerPC Target"
msgstr ""

#: ../../../ReleaseNotes.rst:175
msgid "Optimization:"
msgstr ""

#: ../../../ReleaseNotes.rst:177
msgid ""
"Improved Loop Unroll-and-Jam legality checks, allowing it to handle more "
"than two level loop nests"
msgstr ""

#: ../../../ReleaseNotes.rst:178
msgid "Improved Loop Unroll to be able to unroll more loops"
msgstr ""

#: ../../../ReleaseNotes.rst:179
msgid ""
"Implemented an option to allow loop fusion to work on loops with different "
"constant trip counts"
msgstr ""

#: ../../../ReleaseNotes.rst:181
msgid "Codegen:"
msgstr ""

#: ../../../ReleaseNotes.rst:183
msgid "POWER10 support"
msgstr ""

#: ../../../ReleaseNotes.rst:185
msgid "Added PC Relative addressing"
msgstr ""

#: ../../../ReleaseNotes.rst:186
msgid "Added __int128 vector bool support"
msgstr ""

#: ../../../ReleaseNotes.rst:188
msgid ""
"Security enhancement via probe-stack attribute support to protect against "
"stack clash"
msgstr ""

#: ../../../ReleaseNotes.rst:189
msgid "Floating point support enhancements"
msgstr ""

#: ../../../ReleaseNotes.rst:191
msgid "Improved half precision and quad precision support, including GLIBC"
msgstr ""

#: ../../../ReleaseNotes.rst:192
msgid "constrained FP operation support for arithmetic/rounding/max/min"
msgstr ""

#: ../../../ReleaseNotes.rst:193
msgid ""
"cleaning up fast math flags checks in DAGCombine, Legalizer, and Lowering"
msgstr ""

#: ../../../ReleaseNotes.rst:195
msgid ""
"Performance improvements from instruction exploitation, especially for "
"vector permute on LE"
msgstr ""

#: ../../../ReleaseNotes.rst:196
msgid "Scheduling enhancements"
msgstr ""

#: ../../../ReleaseNotes.rst:198
msgid "Added MacroFusion for POWER8"
msgstr ""

#: ../../../ReleaseNotes.rst:199
msgid "Added post-ra heuristics for POWER9"
msgstr ""

#: ../../../ReleaseNotes.rst:201
msgid "Target dependent passes tuning"
msgstr ""

#: ../../../ReleaseNotes.rst:203
msgid "Updated LoopStrengthReduce to use instruction number as first priority"
msgstr ""

#: ../../../ReleaseNotes.rst:204
msgid "Enhanced MachineCombiner to expose more ILP"
msgstr ""

#: ../../../ReleaseNotes.rst:206
msgid "Code quality and maintenance enhancements"
msgstr ""

#: ../../../ReleaseNotes.rst:208
msgid "Enabled more machine verification passes"
msgstr ""

#: ../../../ReleaseNotes.rst:209
msgid "Added ability to parse and emit additional extended mnemonics"
msgstr ""

#: ../../../ReleaseNotes.rst:210
msgid "Numerous bug fixes"
msgstr ""

#: ../../../ReleaseNotes.rst:212
msgid "AIX Support Improvements:"
msgstr ""

#: ../../../ReleaseNotes.rst:214
msgid ""
"Enabled compile and link such that a simple <stdio.h> \"Hello World\" "
"program works with standard headers"
msgstr ""

#: ../../../ReleaseNotes.rst:215
msgid "Added support for the C calling convention for non-vector code"
msgstr ""

#: ../../../ReleaseNotes.rst:216
msgid "Implemented correct stack frame layout for functions"
msgstr ""

#: ../../../ReleaseNotes.rst:217
msgid ""
"In llvm-objdump, added support for relocations, improved selection of symbol "
"labels, and added the --symbol-description option"
msgstr ""

#: ../../../ReleaseNotes.rst:221
msgid "Changes to the RISC-V Target"
msgstr ""

#: ../../../ReleaseNotes.rst:223
msgid "New features:"
msgstr ""

#: ../../../ReleaseNotes.rst:225
msgid ""
"After consultation through an RFC, the RISC-V backend now accepts patches "
"for proposed instruction set extensions that have not yet been ratified.  "
"For these experimental extensions, there is no expectation of ongoing "
"support - the compiler support will continue to change until the "
"specification is finalised. In line with this policy, MC layer and code "
"generation support was added for version 0.92 of the proposed Bit "
"Manipulation Extension and MC layer support was added for version 0.8 of the "
"proposed RISC-V Vector instruction set extension. As these extensions are "
"not yet ratified, compiler support will continue to change to match the "
"specifications until they are finalised."
msgstr ""

#: ../../../ReleaseNotes.rst:234
msgid ""
"ELF attribute sections are now created, encoding information such as the ISA "
"string."
msgstr ""

#: ../../../ReleaseNotes.rst:236
msgid ""
"Support for saving/restoring callee-saved registers via libcalls (a code "
"size optimisation)."
msgstr ""

#: ../../../ReleaseNotes.rst:238
msgid "llvm-objdump will now print branch targets as part of disassembly."
msgstr ""

#: ../../../ReleaseNotes.rst:240
msgid "Improvements:"
msgstr ""

#: ../../../ReleaseNotes.rst:242
msgid ""
"If an immediate can be generated using a pair of `addi` instructions, that "
"pair will be selected rather than materialising the immediate into a "
"separate register with an `lui` and `addi` pair."
msgstr ""

#: ../../../ReleaseNotes.rst:245
msgid "Multiplication by a constant was optimised."
msgstr ""

#: ../../../ReleaseNotes.rst:246
msgid ""
"`addi` instructions are now folded into the offset of a load/store "
"instruction even if the load/store itself has a non-zero offset, when it is "
"safe to do so."
msgstr ""

#: ../../../ReleaseNotes.rst:249
msgid ""
"Additional target hooks were implemented to minimise generation of "
"unnecessary control flow instruction."
msgstr ""

#: ../../../ReleaseNotes.rst:251
msgid ""
"The RISC-V backend's load/store peephole optimisation pass now supports "
"constant pools, improving code generation for floating point constants."
msgstr ""

#: ../../../ReleaseNotes.rst:253
msgid ""
"Debug scratch register names `dscratch0` and `dscratch1` are now recognised "
"in addition to the legacy `dscratch` register name."
msgstr ""

#: ../../../ReleaseNotes.rst:255
msgid "Codegen for checking isnan was improved, removing a redundant `and`."
msgstr ""

#: ../../../ReleaseNotes.rst:256
msgid "The `dret` instruction is now supported by the MC layer."
msgstr ""

#: ../../../ReleaseNotes.rst:257
msgid ""
"`.option pic` and `.option nopic` are now supported in assembly and `.reloc` "
"was extended to support arbitrary relocation types."
msgstr ""

#: ../../../ReleaseNotes.rst:259
msgid "Scheduling info metadata was improved."
msgstr ""

#: ../../../ReleaseNotes.rst:260
msgid "The `jump` pseudo instruction is now supported."
msgstr ""

#: ../../../ReleaseNotes.rst:262
msgid "Bug fixes:"
msgstr ""

#: ../../../ReleaseNotes.rst:264
msgid ""
"A failure to insert indirect branches in position independent code was fixed."
msgstr ""

#: ../../../ReleaseNotes.rst:266
msgid ""
"The calculated expanded size of atomic pseudo operations was fixed, avoiding "
"\"fixup value out of range\" errors during branch relaxation for some inputs."
msgstr ""

#: ../../../ReleaseNotes.rst:268
msgid "The `mcountinhibit` CSR is now recognised."
msgstr ""

#: ../../../ReleaseNotes.rst:269
msgid ""
"The correct libcall is now emitted for converting a float/double to a 32-bit "
"signed or unsigned integer on RV64 targets lacking the F or D extensions."
msgstr ""

#: ../../../ReleaseNotes.rst:273
msgid "Changes to the SystemZ Target"
msgstr ""

#: ../../../ReleaseNotes.rst:275
msgid "Added support for the MemorySanitizer and the LeakSanitizer."
msgstr ""

#: ../../../ReleaseNotes.rst:276
msgid "Added support for the ``-fstack-clash-protection`` command line option."
msgstr ""

#: ../../../ReleaseNotes.rst:277
msgid ""
"Enhanced the assembler parser to allow using `%r0` even in an address "
"register context, and to allow specifying registers using plain integer "
"numbers instead of register names everywhere."
msgstr ""

#: ../../../ReleaseNotes.rst:280
msgid ""
"Fixed wrong code generation violating the platform ABI when passing a C++ "
"class (not struct) type having only a single member of floating-point type."
msgstr ""

#: ../../../ReleaseNotes.rst:283
msgid ""
"Fixed wrong code generation when using the `vec_store_len_r` or "
"`vec_load_len_r` intrinsics with an immediate length argument of 16 or "
"larger."
msgstr ""

#: ../../../ReleaseNotes.rst:286
msgid ""
"Miscellaneous codegen enhancements, in particular to improve vector code."
msgstr ""

#: ../../../ReleaseNotes.rst:289
msgid "Changes to the X86 Target"
msgstr ""

#: ../../../ReleaseNotes.rst:291
msgid ""
"Functions with the probe-stack attribute set to \"inline-asm\" are now "
"protected against stack clash without the need of a third-party probing "
"function and with limited impact on performance."
msgstr ""

#: ../../../ReleaseNotes.rst:294
msgid ""
"-x86-enable-old-knl-abi command line switch has been removed. v32i16/v64i8 "
"vectors are always passed in ZMM register when avx512f is enabled and "
"avx512bw is disabled."
msgstr ""

#: ../../../ReleaseNotes.rst:297
msgid ""
"Vectors larger than 512 bits with i16 or i8 elements will be passed in "
"multiple ZMM registers when avx512f is enabled. Previously this required "
"avx512bw otherwise they would split into multiple YMM registers. This means "
"vXi16/vXi8 vectors are consistently treated the same as vXi32/vXi64/vXf64/"
"vXf32 vectors of the same total width."
msgstr ""

#: ../../../ReleaseNotes.rst:302
msgid "Support was added for Intel AMX instructions."
msgstr ""

#: ../../../ReleaseNotes.rst:303
msgid "Support was added for TSXLDTRK instructions."
msgstr ""

#: ../../../ReleaseNotes.rst:304
msgid "A pass was added for mitigating the Load Value Injection vulnerability."
msgstr ""

#: ../../../ReleaseNotes.rst:305
msgid ""
"The Speculative Execution Side Effect Suppression pass was added which can "
"be used to as a last resort mitigation for speculative execution related CPU "
"vulnerabilities."
msgstr ""

#: ../../../ReleaseNotes.rst:308
msgid ""
"Improved recognition of boolean vector reductions with better MOVMSKB/PTEST "
"handling"
msgstr ""

#: ../../../ReleaseNotes.rst:310
msgid ""
"Exteded recognition of rotation patterns to handle funnel shift as well, "
"allowing us to remove the existing x86-specific SHLD/SHRD combine."
msgstr ""

#: ../../../ReleaseNotes.rst:314
msgid "Changes to the AMDGPU Target"
msgstr ""

#: ../../../ReleaseNotes.rst:316
msgid ""
"The backend default denormal handling mode has been switched to on for all "
"targets for all compute function types. Frontends wishing to retain the old "
"behavior should explicitly request f32 denormal flushing."
msgstr ""

#: ../../../ReleaseNotes.rst:322
msgid "Changes to the AVR Target"
msgstr ""

#: ../../../ReleaseNotes.rst:324
msgid ""
"Moved from an experimental backend to an official backend. AVR support is "
"now included by default in all LLVM builds and releases and is available "
"under the \"avr-unknown-unknown\" target triple."
msgstr ""

#: ../../../ReleaseNotes.rst:329
msgid "Changes to the WebAssembly Target"
msgstr ""

#: ../../../ReleaseNotes.rst:331
msgid ""
"Programs which don't have a \"main\" function, called \"reactors\" are now "
"properly supported, with a new `-mexec-model=reactor` flag. Programs which "
"previously used `-Wl,--no-entry` to avoid having a main function should "
"switch to this new flag, so that static initialization is properly performed."
msgstr ""

#: ../../../ReleaseNotes.rst:337
msgid ""
"`__attribute__((visibility(\"protected\")))` now evokes a warning, as "
"WebAssembly does not support \"protected\" visibility."
msgstr ""

#: ../../../ReleaseNotes.rst:341
msgid "Changes to the Windows Target"
msgstr ""

#: ../../../ReleaseNotes.rst:343
msgid ""
"Produce COFF weak external symbols for IR level weak symbols without a "
"comdat (e.g. for `__attribute__((weak))` in C)"
msgstr ""

#: ../../../ReleaseNotes.rst:348
msgid "Changes to the DAG infrastructure"
msgstr ""

#: ../../../ReleaseNotes.rst:350
msgid ""
"A SelDag-level freeze instruction has landed. It is simply lowered as a copy "
"operation to MachineIR, but to make it fully correct either IMPLICIT_DEF "
"should be fixed or the equivalent FREEZE operation should be added to "
"MachineIR."
msgstr ""

#: ../../../ReleaseNotes.rst:356
msgid "Changes to the Debug Info"
msgstr ""

#: ../../../ReleaseNotes.rst:358
msgid ""
"LLVM now supports the debug entry values (DW_OP_entry_value) production for "
"the x86, ARM, and AArch64 targets by default. Other targets can use the "
"utility by using the experimental option (\"-debug-entry-values\"). This is "
"a debug info feature that allows debuggers to recover the value of optimized-"
"out parameters by going up a stack frame and interpreting the values passed "
"to the callee. The feature improves the debugging user experience when "
"debugging optimized code."
msgstr ""

#: ../../../ReleaseNotes.rst:367
msgid "Changes to the Gold Plugin"
msgstr ""

#: ../../../ReleaseNotes.rst:369
msgid ""
"``--plugin-opt=whole-program-visibility`` is added to specify that classes "
"have hidden LTO visibility in LTO and ThinLTO links of source files compiled "
"with ``-fwhole-program-vtables``. See `LTOVisibility <https://clang.llvm.org/"
"docs/LTOVisibility.html>`_ for details. (`D71913 <https://reviews.llvm.org/"
"D71913>`_)"
msgstr ""

#: ../../../ReleaseNotes.rst:373
msgid "Changes to the LLVM tools"
msgstr ""

#: ../../../ReleaseNotes.rst:375
msgid ""
"Added an option (--show-section-sizes) to llvm-dwarfdump to show the sizes "
"of all debug sections within a file."
msgstr ""

#: ../../../ReleaseNotes.rst:378
msgid ""
"llvm-nm now implements the flag ``--special-syms`` and will filter out "
"special symbols, i.e. mapping symbols on ARM and AArch64, by default. This "
"matches the GNU nm behavior."
msgstr ""

#: ../../../ReleaseNotes.rst:382
msgid ""
"llvm-rc now tolerates -1 as menu item ID, supports the language id option "
"and allows string table values to be split into multiple string literals"
msgstr ""

#: ../../../ReleaseNotes.rst:385
msgid ""
"llvm-lib supports adding import library objects in addition to regular "
"object files"
msgstr ""

#: ../../../ReleaseNotes.rst:389
msgid "External Open Source Projects Using LLVM 11"
msgstr ""

#: ../../../ReleaseNotes.rst:392
msgid "Zig Programming Language"
msgstr ""

#: ../../../ReleaseNotes.rst:394
msgid ""
"`Zig <https://ziglang.org>`_  is a general-purpose programming language and "
"toolchain for maintaining robust, optimal, and reusable software. In "
"addition to supporting LLVM as an optional backend, Zig links Clang and LLD "
"to provide an out-of-the-box cross compilation experience, not only for Zig "
"code but for C and C++ code as well. Using a sophisticated caching system, "
"Zig lazily builds from source compiler-rt, mingw-w64, musl, glibc, libcxx, "
"libcxxabi, and libunwind for the selected target - a \"batteries included\" "
"drop-in for GCC/Clang that works the same on every platform."
msgstr ""

#: ../../../ReleaseNotes.rst:404
msgid "Additional Information"
msgstr ""

#: ../../../ReleaseNotes.rst:406
msgid ""
"A wide variety of additional information is available on the `LLVM web page "
"<https://llvm.org/>`_, in particular in the `documentation <https://llvm.org/"
"docs/>`_ section.  The web page also contains versions of the API "
"documentation which is up-to-date with the Git version of the source code.  "
"You can access versions of these documents specific to this release by going "
"into the ``llvm/docs/`` directory in the LLVM tree."
msgstr ""

#: ../../../ReleaseNotes.rst:413
msgid ""
"If you have any questions or comments about LLVM, please feel free to "
"contact us via the `mailing lists <https://llvm.org/docs/#mailing-lists>`_."
msgstr ""
