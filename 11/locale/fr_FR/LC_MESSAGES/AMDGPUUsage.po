# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2025, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:12+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr_FR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../AMDGPUUsage.rst:3
msgid "User Guide for AMDGPU Backend"
msgstr ""

#: ../../../AMDGPUUsage.rst:27
msgid "Introduction"
msgstr ""

#: ../../../AMDGPUUsage.rst:29
msgid ""
"The AMDGPU backend provides ISA code generation for AMD GPUs, starting with "
"the R600 family up until the current GCN families. It lives in the ``llvm/"
"lib/Target/AMDGPU`` directory."
msgstr ""

#: ../../../AMDGPUUsage.rst:34
msgid "LLVM"
msgstr ""

#: ../../../AMDGPUUsage.rst:39
msgid "Target Triples"
msgstr ""

#: ../../../AMDGPUUsage.rst:41
msgid ""
"Use the ``clang -target <Architecture>-<Vendor>-<OS>-<Environment>`` option "
"to specify the target triple:"
msgstr ""

#: ../../../AMDGPUUsage.rst:44
msgid "AMDGPU Architectures"
msgstr ""

#: ../../../AMDGPUUsage.rst:48
msgid "Architecture"
msgstr ""

#: ../../../AMDGPUUsage.rst:48 ../../../AMDGPUUsage.rst:58
#: ../../../AMDGPUUsage.rst:68 ../../../AMDGPUUsage.rst:83
#: ../../../AMDGPUUsage.rst:301 ../../../AMDGPUUsage.rst:490
#: ../../../AMDGPUUsage.rst:584 ../../../AMDGPUUsage.rst:731
#: ../../../AMDGPUUsage.rst:910 ../../../AMDGPUUsage.rst:950
#: ../../../AMDGPUUsage.rst:985 ../../../AMDGPUUsage.rst:1206
#: ../../../AMDGPUUsage.rst:1962 ../../../AMDGPUUsage.rst:2100
#: ../../../AMDGPUUsage.rst:2144 ../../../AMDGPUUsage.rst:2181
#: ../../../AMDGPUUsage.rst:2222 ../../../AMDGPUUsage.rst:2411
#: ../../../AMDGPUUsage.rst:2511 ../../../AMDGPUUsage.rst:2556
#: ../../../AMDGPUUsage.rst:2700 ../../../AMDGPUUsage.rst:2998
#: ../../../AMDGPUUsage.rst:3090 ../../../AMDGPUUsage.rst:3376
#: ../../../AMDGPUUsage.rst:3529 ../../../AMDGPUUsage.rst:3544
#: ../../../AMDGPUUsage.rst:3558 ../../../AMDGPUUsage.rst:3573
#: ../../../AMDGPUUsage.rst:3614 ../../../AMDGPUUsage.rst:3817
#: ../../../AMDGPUUsage.rst:6390 ../../../AMDGPUUsage.rst:6866
#: ../../../AMDGPUUsage.rst:6885 ../../../AMDGPUUsage.rst:6931
#: ../../../AMDGPUUsage.rst:6971 ../../../AMDGPUUsage.rst:6999
#: ../../../AMDGPUUsage.rst:7559
msgid "Description"
msgstr ""

#: ../../../AMDGPUUsage.rst:50 ../../../AMDGPUUsage.rst:107
#: ../../../AMDGPUUsage.rst:108 ../../../AMDGPUUsage.rst:109
#: ../../../AMDGPUUsage.rst:110 ../../../AMDGPUUsage.rst:113
#: ../../../AMDGPUUsage.rst:114 ../../../AMDGPUUsage.rst:115
#: ../../../AMDGPUUsage.rst:118 ../../../AMDGPUUsage.rst:119
#: ../../../AMDGPUUsage.rst:120 ../../../AMDGPUUsage.rst:121
#: ../../../AMDGPUUsage.rst:122 ../../../AMDGPUUsage.rst:125
#: ../../../AMDGPUUsage.rst:126 ../../../AMDGPUUsage.rst:127
#: ../../../AMDGPUUsage.rst:128 ../../../AMDGPUUsage.rst:772
msgid "``r600``"
msgstr ""

#: ../../../AMDGPUUsage.rst:50
msgid "AMD GPUs HD2XXX-HD6XXX for graphics and compute shaders."
msgstr ""

#: ../../../AMDGPUUsage.rst:51 ../../../AMDGPUUsage.rst:131
#: ../../../AMDGPUUsage.rst:132 ../../../AMDGPUUsage.rst:138
#: ../../../AMDGPUUsage.rst:148 ../../../AMDGPUUsage.rst:152
#: ../../../AMDGPUUsage.rst:156 ../../../AMDGPUUsage.rst:165
#: ../../../AMDGPUUsage.rst:171 ../../../AMDGPUUsage.rst:177
#: ../../../AMDGPUUsage.rst:180 ../../../AMDGPUUsage.rst:186
#: ../../../AMDGPUUsage.rst:189 ../../../AMDGPUUsage.rst:197
#: ../../../AMDGPUUsage.rst:203 ../../../AMDGPUUsage.rst:206
#: ../../../AMDGPUUsage.rst:208 ../../../AMDGPUUsage.rst:212
#: ../../../AMDGPUUsage.rst:219 ../../../AMDGPUUsage.rst:221
#: ../../../AMDGPUUsage.rst:226 ../../../AMDGPUUsage.rst:230
#: ../../../AMDGPUUsage.rst:237 ../../../AMDGPUUsage.rst:244
#: ../../../AMDGPUUsage.rst:250 ../../../AMDGPUUsage.rst:256
#: ../../../AMDGPUUsage.rst:262
msgid "``amdgcn``"
msgstr ""

#: ../../../AMDGPUUsage.rst:51
msgid "AMD GPUs GCN GFX6 onwards for graphics and compute shaders."
msgstr ""

#: ../../../AMDGPUUsage.rst:54
msgid "AMDGPU Vendors"
msgstr ""

#: ../../../AMDGPUUsage.rst:58
msgid "Vendor"
msgstr ""

#: ../../../AMDGPUUsage.rst:60
msgid "``amd``"
msgstr ""

#: ../../../AMDGPUUsage.rst:60
msgid "Can be used for all AMD GPU usage."
msgstr ""

#: ../../../AMDGPUUsage.rst:61 ../../../AMDGPUUsage.rst:75
msgid "``mesa3d``"
msgstr ""

#: ../../../AMDGPUUsage.rst:61
msgid "Can be used if the OS is ``mesa3d``."
msgstr ""

#: ../../../AMDGPUUsage.rst:64
msgid "AMDGPU Operating Systems"
msgstr ""

#: ../../../AMDGPUUsage.rst:68
msgid "OS"
msgstr ""

#: ../../../AMDGPUUsage.rst:70 ../../../AMDGPUUsage.rst:85
msgid "*<empty>*"
msgstr ""

#: ../../../AMDGPUUsage.rst:70
msgid "Defaults to the *unknown* OS."
msgstr ""

#: ../../../AMDGPUUsage.rst:71
msgid "``amdhsa``"
msgstr ""

#: ../../../AMDGPUUsage.rst:71
msgid ""
"Compute kernels executed on HSA [HSA]_ compatible runtimes such as AMD's "
"ROCm [AMD-ROCm]_."
msgstr ""

#: ../../../AMDGPUUsage.rst:73
msgid "``amdpal``"
msgstr ""

#: ../../../AMDGPUUsage.rst:73
msgid "Graphic shaders and compute kernels executed on AMD PAL runtime."
msgstr ""

#: ../../../AMDGPUUsage.rst:75
msgid "Graphic shaders and compute kernels executed on Mesa 3D runtime."
msgstr ""

#: ../../../AMDGPUUsage.rst:79
msgid "AMDGPU Environments"
msgstr ""

#: ../../../AMDGPUUsage.rst:83
msgid "Environment"
msgstr ""

#: ../../../AMDGPUUsage.rst:85
msgid "Default."
msgstr ""

#: ../../../AMDGPUUsage.rst:91
msgid "Processors"
msgstr ""

#: ../../../AMDGPUUsage.rst:93
msgid ""
"Use the ``clang -mcpu <Processor>`` option to specify the AMDGPU processor. "
"The names from both the *Processor* and *Alternative Processor* can be used."
msgstr ""

#: ../../../AMDGPUUsage.rst:96
msgid "AMDGPU Processors"
msgstr ""

#: ../../../AMDGPUUsage.rst:100
msgid "Processor"
msgstr ""

#: ../../../AMDGPUUsage.rst:100
msgid "Alternative Processor"
msgstr ""

#: ../../../AMDGPUUsage.rst:100
msgid "Target Triple Architecture"
msgstr ""

#: ../../../AMDGPUUsage.rst:100
msgid "dGPU/ APU"
msgstr ""

#: ../../../AMDGPUUsage.rst:100
msgid "Target Features Supported [Default]"
msgstr ""

#: ../../../AMDGPUUsage.rst:100
msgid "ROCm Support"
msgstr ""

#: ../../../AMDGPUUsage.rst:100
msgid "Example Products"
msgstr ""

#: ../../../AMDGPUUsage.rst:105
msgid "**Radeon HD 2000/3000 Series (R600)** [AMD-RADEON-HD-2000-3000]_"
msgstr ""

#: ../../../AMDGPUUsage.rst:107 ../../../AMDGPUUsage.rst:108
#: ../../../AMDGPUUsage.rst:109 ../../../AMDGPUUsage.rst:110
#: ../../../AMDGPUUsage.rst:113 ../../../AMDGPUUsage.rst:114
#: ../../../AMDGPUUsage.rst:115 ../../../AMDGPUUsage.rst:118
#: ../../../AMDGPUUsage.rst:119 ../../../AMDGPUUsage.rst:120
#: ../../../AMDGPUUsage.rst:121 ../../../AMDGPUUsage.rst:122
#: ../../../AMDGPUUsage.rst:125 ../../../AMDGPUUsage.rst:126
#: ../../../AMDGPUUsage.rst:127 ../../../AMDGPUUsage.rst:128
#: ../../../AMDGPUUsage.rst:131 ../../../AMDGPUUsage.rst:132
#: ../../../AMDGPUUsage.rst:148 ../../../AMDGPUUsage.rst:152
#: ../../../AMDGPUUsage.rst:165 ../../../AMDGPUUsage.rst:189
#: ../../../AMDGPUUsage.rst:197 ../../../AMDGPUUsage.rst:203
#: ../../../AMDGPUUsage.rst:206 ../../../AMDGPUUsage.rst:212
#: ../../../AMDGPUUsage.rst:221 ../../../AMDGPUUsage.rst:226
#: ../../../AMDGPUUsage.rst:230 ../../../AMDGPUUsage.rst:244
#: ../../../AMDGPUUsage.rst:250 ../../../AMDGPUUsage.rst:256
#: ../../../AMDGPUUsage.rst:262
msgid "dGPU"
msgstr ""

#: ../../../AMDGPUUsage.rst:108 ../../../AMDGPUUsage.rst:773
msgid "``r630``"
msgstr ""

#: ../../../AMDGPUUsage.rst:109 ../../../AMDGPUUsage.rst:774
msgid "``rs880``"
msgstr ""

#: ../../../AMDGPUUsage.rst:110 ../../../AMDGPUUsage.rst:775
msgid "``rv670``"
msgstr ""

#: ../../../AMDGPUUsage.rst:111
msgid "**Radeon HD 4000 Series (R700)** [AMD-RADEON-HD-4000]_"
msgstr ""

#: ../../../AMDGPUUsage.rst:113 ../../../AMDGPUUsage.rst:776
msgid "``rv710``"
msgstr ""

#: ../../../AMDGPUUsage.rst:114 ../../../AMDGPUUsage.rst:777
msgid "``rv730``"
msgstr ""

#: ../../../AMDGPUUsage.rst:115 ../../../AMDGPUUsage.rst:778
msgid "``rv770``"
msgstr ""

#: ../../../AMDGPUUsage.rst:116
msgid "**Radeon HD 5000 Series (Evergreen)** [AMD-RADEON-HD-5000]_"
msgstr ""

#: ../../../AMDGPUUsage.rst:118 ../../../AMDGPUUsage.rst:779
msgid "``cedar``"
msgstr ""

#: ../../../AMDGPUUsage.rst:119 ../../../AMDGPUUsage.rst:780
msgid "``cypress``"
msgstr ""

#: ../../../AMDGPUUsage.rst:120 ../../../AMDGPUUsage.rst:781
msgid "``juniper``"
msgstr ""

#: ../../../AMDGPUUsage.rst:121 ../../../AMDGPUUsage.rst:782
msgid "``redwood``"
msgstr ""

#: ../../../AMDGPUUsage.rst:122 ../../../AMDGPUUsage.rst:783
msgid "``sumo``"
msgstr ""

#: ../../../AMDGPUUsage.rst:123
msgid "**Radeon HD 6000 Series (Northern Islands)** [AMD-RADEON-HD-6000]_"
msgstr ""

#: ../../../AMDGPUUsage.rst:125 ../../../AMDGPUUsage.rst:784
msgid "``barts``"
msgstr ""

#: ../../../AMDGPUUsage.rst:126 ../../../AMDGPUUsage.rst:785
msgid "``caicos``"
msgstr ""

#: ../../../AMDGPUUsage.rst:127 ../../../AMDGPUUsage.rst:786
msgid "``cayman``"
msgstr ""

#: ../../../AMDGPUUsage.rst:128 ../../../AMDGPUUsage.rst:787
msgid "``turks``"
msgstr ""

#: ../../../AMDGPUUsage.rst:129
msgid "**GCN GFX6 (Southern Islands (SI))** [AMD-GCN-GFX6]_"
msgstr ""

#: ../../../AMDGPUUsage.rst:131 ../../../AMDGPUUsage.rst:790
msgid "``gfx600``"
msgstr ""

#: ../../../AMDGPUUsage.rst:131
msgid "``tahiti``"
msgstr ""

#: ../../../AMDGPUUsage.rst:132 ../../../AMDGPUUsage.rst:791
msgid "``gfx601``"
msgstr ""

#: ../../../AMDGPUUsage.rst:132
msgid "``hainan``"
msgstr ""

#: ../../../AMDGPUUsage.rst:133
msgid "``oland``"
msgstr ""

#: ../../../AMDGPUUsage.rst:134
msgid "``pitcairn``"
msgstr ""

#: ../../../AMDGPUUsage.rst:135
msgid "``verde``"
msgstr ""

#: ../../../AMDGPUUsage.rst:136
msgid "**GCN GFX7 (Sea Islands (CI))** [AMD-GCN-GFX7]_"
msgstr ""

#: ../../../AMDGPUUsage.rst:138 ../../../AMDGPUUsage.rst:792
msgid "``gfx700``"
msgstr ""

#: ../../../AMDGPUUsage.rst:138
msgid "``kaveri``"
msgstr ""

#: ../../../AMDGPUUsage.rst:138 ../../../AMDGPUUsage.rst:156
#: ../../../AMDGPUUsage.rst:171 ../../../AMDGPUUsage.rst:177
#: ../../../AMDGPUUsage.rst:180 ../../../AMDGPUUsage.rst:186
#: ../../../AMDGPUUsage.rst:208 ../../../AMDGPUUsage.rst:219
#: ../../../AMDGPUUsage.rst:237
msgid "APU"
msgstr ""

#: ../../../AMDGPUUsage.rst:138
msgid "A6-7000"
msgstr ""

#: ../../../AMDGPUUsage.rst:139
msgid "A6 Pro-7050B"
msgstr ""

#: ../../../AMDGPUUsage.rst:140
msgid "A8-7100"
msgstr ""

#: ../../../AMDGPUUsage.rst:141
msgid "A8 Pro-7150B"
msgstr ""

#: ../../../AMDGPUUsage.rst:142
msgid "A10-7300"
msgstr ""

#: ../../../AMDGPUUsage.rst:143
msgid "A10 Pro-7350B"
msgstr ""

#: ../../../AMDGPUUsage.rst:144
msgid "FX-7500"
msgstr ""

#: ../../../AMDGPUUsage.rst:145
msgid "A8-7200P"
msgstr ""

#: ../../../AMDGPUUsage.rst:146
msgid "A10-7400P"
msgstr ""

#: ../../../AMDGPUUsage.rst:147
msgid "FX-7600P"
msgstr ""

#: ../../../AMDGPUUsage.rst:148 ../../../AMDGPUUsage.rst:793
msgid "``gfx701``"
msgstr ""

#: ../../../AMDGPUUsage.rst:148
msgid "``hawaii``"
msgstr ""

#: ../../../AMDGPUUsage.rst:148 ../../../AMDGPUUsage.rst:152
#: ../../../AMDGPUUsage.rst:177 ../../../AMDGPUUsage.rst:189
#: ../../../AMDGPUUsage.rst:197 ../../../AMDGPUUsage.rst:203
#: ../../../AMDGPUUsage.rst:206 ../../../AMDGPUUsage.rst:212
msgid "ROCm"
msgstr ""

#: ../../../AMDGPUUsage.rst:148
msgid "FirePro W8100"
msgstr ""

#: ../../../AMDGPUUsage.rst:149
msgid "FirePro W9100"
msgstr ""

#: ../../../AMDGPUUsage.rst:150
msgid "FirePro S9150"
msgstr ""

#: ../../../AMDGPUUsage.rst:151
msgid "FirePro S9170"
msgstr ""

#: ../../../AMDGPUUsage.rst:152 ../../../AMDGPUUsage.rst:794
msgid "``gfx702``"
msgstr ""

#: ../../../AMDGPUUsage.rst:152
msgid "Radeon R9 290"
msgstr ""

#: ../../../AMDGPUUsage.rst:153
msgid "Radeon R9 290x"
msgstr ""

#: ../../../AMDGPUUsage.rst:154
msgid "Radeon R390"
msgstr ""

#: ../../../AMDGPUUsage.rst:155
msgid "Radeon R390x"
msgstr ""

#: ../../../AMDGPUUsage.rst:156 ../../../AMDGPUUsage.rst:795
msgid "``gfx703``"
msgstr ""

#: ../../../AMDGPUUsage.rst:156
msgid "``kabini``"
msgstr ""

#: ../../../AMDGPUUsage.rst:157
msgid "``mullins``"
msgstr ""

#: ../../../AMDGPUUsage.rst:156
msgid "E1-2100"
msgstr ""

#: ../../../AMDGPUUsage.rst:157
msgid "E1-2200"
msgstr ""

#: ../../../AMDGPUUsage.rst:158
msgid "E1-2500"
msgstr ""

#: ../../../AMDGPUUsage.rst:159
msgid "E2-3000"
msgstr ""

#: ../../../AMDGPUUsage.rst:160
msgid "E2-3800"
msgstr ""

#: ../../../AMDGPUUsage.rst:161
msgid "A4-5000"
msgstr ""

#: ../../../AMDGPUUsage.rst:162
msgid "A4-5100"
msgstr ""

#: ../../../AMDGPUUsage.rst:163
msgid "A6-5200"
msgstr ""

#: ../../../AMDGPUUsage.rst:164
msgid "A4 Pro-3340B"
msgstr ""

#: ../../../AMDGPUUsage.rst:165 ../../../AMDGPUUsage.rst:796
msgid "``gfx704``"
msgstr ""

#: ../../../AMDGPUUsage.rst:165
msgid "``bonaire``"
msgstr ""

#: ../../../AMDGPUUsage.rst:165
msgid "Radeon HD 7790"
msgstr ""

#: ../../../AMDGPUUsage.rst:166
msgid "Radeon HD 8770"
msgstr ""

#: ../../../AMDGPUUsage.rst:167
msgid "R7 260"
msgstr ""

#: ../../../AMDGPUUsage.rst:168
msgid "R7 260X"
msgstr ""

#: ../../../AMDGPUUsage.rst:169
msgid "**GCN GFX8 (Volcanic Islands (VI))** [AMD-GCN-GFX8]_"
msgstr ""

#: ../../../AMDGPUUsage.rst:171 ../../../AMDGPUUsage.rst:798
msgid "``gfx801``"
msgstr ""

#: ../../../AMDGPUUsage.rst:171
msgid "``carrizo``"
msgstr ""

#: ../../../AMDGPUUsage.rst:171 ../../../AMDGPUUsage.rst:177
#: ../../../AMDGPUUsage.rst:180 ../../../AMDGPUUsage.rst:186
#: ../../../AMDGPUUsage.rst:208 ../../../AMDGPUUsage.rst:219
#: ../../../AMDGPUUsage.rst:237
msgid "xnack [on]"
msgstr ""

#: ../../../AMDGPUUsage.rst:171
msgid "A6-8500P"
msgstr ""

#: ../../../AMDGPUUsage.rst:172
msgid "Pro A6-8500B"
msgstr ""

#: ../../../AMDGPUUsage.rst:173
msgid "A8-8600P"
msgstr ""

#: ../../../AMDGPUUsage.rst:174
msgid "Pro A8-8600B"
msgstr ""

#: ../../../AMDGPUUsage.rst:175
msgid "FX-8800P"
msgstr ""

#: ../../../AMDGPUUsage.rst:176
msgid "Pro A12-8800B"
msgstr ""

#: ../../../AMDGPUUsage.rst:177 ../../../AMDGPUUsage.rst:180
#: ../../../AMDGPUUsage.rst:186 ../../../AMDGPUUsage.rst:203
#: ../../../AMDGPUUsage.rst:206
msgid "\\"
msgstr ""

#: ../../../AMDGPUUsage.rst:177
msgid "A10-8700P"
msgstr ""

#: ../../../AMDGPUUsage.rst:178
msgid "Pro A10-8700B"
msgstr ""

#: ../../../AMDGPUUsage.rst:179
msgid "A10-8780P"
msgstr ""

#: ../../../AMDGPUUsage.rst:180
msgid "A10-9600P"
msgstr ""

#: ../../../AMDGPUUsage.rst:181
msgid "A10-9630P"
msgstr ""

#: ../../../AMDGPUUsage.rst:182
msgid "A12-9700P"
msgstr ""

#: ../../../AMDGPUUsage.rst:183
msgid "A12-9730P"
msgstr ""

#: ../../../AMDGPUUsage.rst:184
msgid "FX-9800P"
msgstr ""

#: ../../../AMDGPUUsage.rst:185
msgid "FX-9830P"
msgstr ""

#: ../../../AMDGPUUsage.rst:186
msgid "E2-9010"
msgstr ""

#: ../../../AMDGPUUsage.rst:187
msgid "A6-9210"
msgstr ""

#: ../../../AMDGPUUsage.rst:188
msgid "A9-9410"
msgstr ""

#: ../../../AMDGPUUsage.rst:189 ../../../AMDGPUUsage.rst:799
msgid "``gfx802``"
msgstr ""

#: ../../../AMDGPUUsage.rst:189
msgid "``iceland``"
msgstr ""

#: ../../../AMDGPUUsage.rst:190
msgid "``tonga``"
msgstr ""

#: ../../../AMDGPUUsage.rst:189 ../../../AMDGPUUsage.rst:197
#: ../../../AMDGPUUsage.rst:203 ../../../AMDGPUUsage.rst:206
#: ../../../AMDGPUUsage.rst:212 ../../../AMDGPUUsage.rst:221
#: ../../../AMDGPUUsage.rst:226 ../../../AMDGPUUsage.rst:244
#: ../../../AMDGPUUsage.rst:250 ../../../AMDGPUUsage.rst:256
msgid "xnack [off]"
msgstr ""

#: ../../../AMDGPUUsage.rst:189
msgid "FirePro S7150"
msgstr ""

#: ../../../AMDGPUUsage.rst:190
msgid "FirePro S7100"
msgstr ""

#: ../../../AMDGPUUsage.rst:191
msgid "FirePro W7100"
msgstr ""

#: ../../../AMDGPUUsage.rst:192
msgid "Radeon R285"
msgstr ""

#: ../../../AMDGPUUsage.rst:193
msgid "Radeon R9 380"
msgstr ""

#: ../../../AMDGPUUsage.rst:194
msgid "Radeon R9 385"
msgstr ""

#: ../../../AMDGPUUsage.rst:195
msgid "Mobile FirePro M7170"
msgstr ""

#: ../../../AMDGPUUsage.rst:197 ../../../AMDGPUUsage.rst:800
msgid "``gfx803``"
msgstr ""

#: ../../../AMDGPUUsage.rst:197
msgid "``fiji``"
msgstr ""

#: ../../../AMDGPUUsage.rst:197
msgid "Radeon R9 Nano"
msgstr ""

#: ../../../AMDGPUUsage.rst:198
msgid "Radeon R9 Fury"
msgstr ""

#: ../../../AMDGPUUsage.rst:199
msgid "Radeon R9 FuryX"
msgstr ""

#: ../../../AMDGPUUsage.rst:200
msgid "Radeon Pro Duo"
msgstr ""

#: ../../../AMDGPUUsage.rst:201
msgid "FirePro S9300x2"
msgstr ""

#: ../../../AMDGPUUsage.rst:202
msgid "Radeon Instinct MI8"
msgstr ""

#: ../../../AMDGPUUsage.rst:203
msgid "``polaris10``"
msgstr ""

#: ../../../AMDGPUUsage.rst:203
msgid "Radeon RX 470"
msgstr ""

#: ../../../AMDGPUUsage.rst:204
msgid "Radeon RX 480"
msgstr ""

#: ../../../AMDGPUUsage.rst:205
msgid "Radeon Instinct MI6"
msgstr ""

#: ../../../AMDGPUUsage.rst:206
msgid "``polaris11``"
msgstr ""

#: ../../../AMDGPUUsage.rst:206
msgid "Radeon RX 460"
msgstr ""

#: ../../../AMDGPUUsage.rst:208 ../../../AMDGPUUsage.rst:801
msgid "``gfx810``"
msgstr ""

#: ../../../AMDGPUUsage.rst:208
msgid "``stoney``"
msgstr ""

#: ../../../AMDGPUUsage.rst:210
msgid "**GCN GFX9** [AMD-GCN-GFX9]_"
msgstr ""

#: ../../../AMDGPUUsage.rst:212 ../../../AMDGPUUsage.rst:802
msgid "``gfx900``"
msgstr ""

#: ../../../AMDGPUUsage.rst:212
msgid "Radeon Vega Frontier Edition"
msgstr ""

#: ../../../AMDGPUUsage.rst:214
msgid "Radeon RX Vega 56"
msgstr ""

#: ../../../AMDGPUUsage.rst:215
msgid "Radeon RX Vega 64"
msgstr ""

#: ../../../AMDGPUUsage.rst:216
msgid "Radeon RX Vega 64 Liquid"
msgstr ""

#: ../../../AMDGPUUsage.rst:218
msgid "Radeon Instinct MI25"
msgstr ""

#: ../../../AMDGPUUsage.rst:219 ../../../AMDGPUUsage.rst:803
msgid "``gfx902``"
msgstr ""

#: ../../../AMDGPUUsage.rst:219
msgid "Ryzen 3 2200G"
msgstr ""

#: ../../../AMDGPUUsage.rst:220
msgid "Ryzen 5 2400G"
msgstr ""

#: ../../../AMDGPUUsage.rst:221 ../../../AMDGPUUsage.rst:804
msgid "``gfx904``"
msgstr ""

#: ../../../AMDGPUUsage.rst:221 ../../../AMDGPUUsage.rst:230
#: ../../../AMDGPUUsage.rst:237 ../../../AMDGPUUsage.rst:262
msgid "*TBA*"
msgstr ""

#: ../../../AMDGPUUsage.rst:223 ../../../AMDGPUUsage.rst:234
#: ../../../AMDGPUUsage.rst:239 ../../../AMDGPUUsage.rst:571
#: ../../../AMDGPUUsage.rst:1010 ../../../AMDGPUUsage.rst:1840
#: ../../../AMDGPUUsage.rst:1846 ../../../AMDGPUUsage.rst:1928
#: ../../../AMDGPUUsage.rst:2081 ../../../AMDGPUUsage.rst:2344
#: ../../../AMDGPUUsage.rst:2361 ../../../AMDGPUUsage.rst:2400
#: ../../../AMDGPUUsage.rst:2823 ../../../AMDGPUUsage.rst:2840
#: ../../../AMDGPUUsage.rst:2879 ../../../AMDGPUUsage.rst:6463
#: ../../../AMDGPUUsage.rst:6585 ../../../AMDGPUUsage.rst:6629
#: ../../../AMDGPUUsage.rst:6641 ../../../AMDGPUUsage.rst:6654
#: ../../../AMDGPUUsage.rst:6726 ../../../AMDGPUUsage.rst:6738
#: ../../../AMDGPUUsage.rst:6752 ../../../AMDGPUUsage.rst:6808
#: ../../../AMDGPUUsage.rst:6812 ../../../AMDGPUUsage.rst:7272
msgid "Todo"
msgstr ""

#: ../../../AMDGPUUsage.rst:224 ../../../AMDGPUUsage.rst:235
#: ../../../AMDGPUUsage.rst:240
msgid "Add product names."
msgstr ""

#: ../../../AMDGPUUsage.rst:226 ../../../AMDGPUUsage.rst:805
msgid "``gfx906``"
msgstr ""

#: ../../../AMDGPUUsage.rst:226
msgid "Radeon Instinct MI50"
msgstr ""

#: ../../../AMDGPUUsage.rst:227
msgid "Radeon Instinct MI60"
msgstr ""

#: ../../../AMDGPUUsage.rst:228
msgid "Radeon VII"
msgstr ""

#: ../../../AMDGPUUsage.rst:229
msgid "Radeon Pro VII"
msgstr ""

#: ../../../AMDGPUUsage.rst:230 ../../../AMDGPUUsage.rst:806
msgid "``gfx908``"
msgstr ""

#: ../../../AMDGPUUsage.rst:230
msgid "xnack [off] sram-ecc [on]"
msgstr ""

#: ../../../AMDGPUUsage.rst:237 ../../../AMDGPUUsage.rst:807
msgid "``gfx909``"
msgstr ""

#: ../../../AMDGPUUsage.rst:242
msgid "**GCN GFX10** [AMD-GCN-GFX10]_"
msgstr ""

#: ../../../AMDGPUUsage.rst:244 ../../../AMDGPUUsage.rst:809
msgid "``gfx1010``"
msgstr ""

#: ../../../AMDGPUUsage.rst:246 ../../../AMDGPUUsage.rst:252
#: ../../../AMDGPUUsage.rst:258 ../../../AMDGPUUsage.rst:262
msgid "wavefrontsize64 [off]"
msgstr ""

#: ../../../AMDGPUUsage.rst:248 ../../../AMDGPUUsage.rst:254
#: ../../../AMDGPUUsage.rst:260 ../../../AMDGPUUsage.rst:264
msgid "cumode [off]"
msgstr ""

#: ../../../AMDGPUUsage.rst:244
msgid "Radeon RX 5700"
msgstr ""

#: ../../../AMDGPUUsage.rst:245
msgid "Radeon RX 5700 XT"
msgstr ""

#: ../../../AMDGPUUsage.rst:246
msgid "Radeon Pro 5600 XT"
msgstr ""

#: ../../../AMDGPUUsage.rst:250 ../../../AMDGPUUsage.rst:810
msgid "``gfx1011``"
msgstr ""

#: ../../../AMDGPUUsage.rst:250
msgid "Radeon Pro 5600M"
msgstr ""

#: ../../../AMDGPUUsage.rst:256 ../../../AMDGPUUsage.rst:811
msgid "``gfx1012``"
msgstr ""

#: ../../../AMDGPUUsage.rst:256
msgid "Radeon RX 5500"
msgstr ""

#: ../../../AMDGPUUsage.rst:257
msgid "Radeon RX 5500 XT"
msgstr ""

#: ../../../AMDGPUUsage.rst:262 ../../../AMDGPUUsage.rst:812
msgid "``gfx1030``"
msgstr ""

#: ../../../AMDGPUUsage.rst:274
msgid "Target Features"
msgstr ""

#: ../../../AMDGPUUsage.rst:276
msgid ""
"Target features control how code is generated to support certain processor "
"specific features. Not all target features are supported by all processors. "
"The runtime must ensure that the features supported by the device used to "
"execute the code match the features enabled when generating the code. A "
"mismatch of features may result in incorrect execution, or a reduction in "
"performance."
msgstr ""

#: ../../../AMDGPUUsage.rst:283
msgid ""
"The target features supported by each processor, and the default value used "
"if not specified explicitly, is listed in :ref:`amdgpu-processor-table`."
msgstr ""

#: ../../../AMDGPUUsage.rst:287
msgid ""
"Use the ``clang -m[no-]<TargetFeature>`` option to specify the AMDGPU target "
"features."
msgstr ""

#: ../../../AMDGPUUsage.rst:290 ../../../AMDGPUUsage.rst:1148
#: ../../../AMDGPUUsage.rst:1970 ../../../AMDGPUUsage.rst:2042
msgid "For example:"
msgstr ""

#: ../../../AMDGPUUsage.rst:292
msgid "``-mxnack``"
msgstr ""

#: ../../../AMDGPUUsage.rst:293
msgid "Enable the ``xnack`` feature."
msgstr ""

#: ../../../AMDGPUUsage.rst:331
msgid "``-mno-xnack``"
msgstr ""

#: ../../../AMDGPUUsage.rst:295
msgid "Disable the ``xnack`` feature."
msgstr ""

#: ../../../AMDGPUUsage.rst:297
msgid "AMDGPU Target Features"
msgstr ""

#: ../../../AMDGPUUsage.rst:301
msgid "Target Feature"
msgstr ""

#: ../../../AMDGPUUsage.rst:303
msgid "-m[no-]xnack"
msgstr ""

#: ../../../AMDGPUUsage.rst:303
msgid ""
"Enable/disable generating code that has memory clauses that are compatible "
"with having XNACK replay enabled."
msgstr ""

#: ../../../AMDGPUUsage.rst:307
msgid ""
"This is used for demand paging and page migration. If XNACK replay is "
"enabled in the device, then if a page fault occurs the code may execute "
"incorrectly if the ``xnack`` feature is not enabled. Executing code that has "
"the feature enabled on a device that does not have XNACK replay enabled will "
"execute correctly but may be less performant than code with the feature "
"disabled."
msgstr ""

#: ../../../AMDGPUUsage.rst:318
msgid "-m[no-]sram-ecc"
msgstr ""

#: ../../../AMDGPUUsage.rst:318
msgid ""
"Enable/disable generating code that assumes SRAM ECC is enabled/disabled."
msgstr ""

#: ../../../AMDGPUUsage.rst:321
msgid "-m[no-]wavefrontsize64"
msgstr ""

#: ../../../AMDGPUUsage.rst:321
msgid ""
"Control the default wavefront size used when generating code for kernels. "
"When disabled native wavefront size 32 is used, when enabled wavefront size "
"64 is used."
msgstr ""

#: ../../../AMDGPUUsage.rst:326
msgid "-m[no-]cumode"
msgstr ""

#: ../../../AMDGPUUsage.rst:326
msgid ""
"Control the default wavefront execution mode used when generating code for "
"kernels. When disabled native WGP wavefront execution mode is used, when "
"enabled CU wavefront execution mode is used (see :ref:`amdgpu-amdhsa-memory-"
"model`)."
msgstr ""

#: ../../../AMDGPUUsage.rst:336
msgid "Address Spaces"
msgstr ""

#: ../../../AMDGPUUsage.rst:338
msgid ""
"The AMDGPU architecture supports a number of memory address spaces. The "
"address space names use the OpenCL standard names, with some additions."
msgstr ""

#: ../../../AMDGPUUsage.rst:341
msgid ""
"The AMDGPU address spaces correspond to target architecture specific LLVM "
"address space numbers used in LLVM IR."
msgstr ""

#: ../../../AMDGPUUsage.rst:344
msgid ""
"The AMDGPU address spaces are described in :ref:`amdgpu-address-spaces-"
"table`. Only 64-bit process address spaces are supported for the ``amdgcn`` "
"target."
msgstr ""

#: ../../../AMDGPUUsage.rst:348
msgid "AMDGPU Address Spaces"
msgstr ""

#: ../../../AMDGPUUsage.rst:352
msgid "64-Bit Process Address Space"
msgstr ""

#: ../../../AMDGPUUsage.rst:354 ../../../AMDGPUUsage.rst:1356
msgid "Address Space Name"
msgstr ""

#: ../../../AMDGPUUsage.rst:354
msgid "LLVM IR Address Space Number"
msgstr ""

#: ../../../AMDGPUUsage.rst:354
msgid "HSA Segment Name"
msgstr ""

#: ../../../AMDGPUUsage.rst:354
msgid "Hardware Name"
msgstr ""

#: ../../../AMDGPUUsage.rst:354
msgid "Address Size"
msgstr ""

#: ../../../AMDGPUUsage.rst:354
msgid "NULL Value"
msgstr ""

#: ../../../AMDGPUUsage.rst:357
msgid "Generic"
msgstr ""

#: ../../../AMDGPUUsage.rst:357 ../../../AMDGPUUsage.rst:642
#: ../../../AMDGPUUsage.rst:655 ../../../AMDGPUUsage.rst:660
#: ../../../AMDGPUUsage.rst:661 ../../../AMDGPUUsage.rst:1076
#: ../../../AMDGPUUsage.rst:1208 ../../../AMDGPUUsage.rst:3378
#: ../../../AMDGPUUsage.rst:3546 ../../../AMDGPUUsage.rst:3560
#: ../../../AMDGPUUsage.rst:3575 ../../../AMDGPUUsage.rst:6868
#: ../../../AMDGPUUsage.rst:6887 ../../../AMDGPUUsage.rst:7561
#: ../../../AMDGPUUsage.rst:7563 ../../../AMDGPUUsage.rst:7565
#: ../../../AMDGPUUsage.rst:7567 ../../../AMDGPUUsage.rst:7569
#: ../../../AMDGPUUsage.rst:7571 ../../../AMDGPUUsage.rst:7573
#: ../../../AMDGPUUsage.rst:7575 ../../../AMDGPUUsage.rst:7577
#: ../../../AMDGPUUsage.rst:7583 ../../../AMDGPUUsage.rst:7587
#: ../../../AMDGPUUsage.rst:7589 ../../../AMDGPUUsage.rst:7591
#: ../../../AMDGPUUsage.rst:7593 ../../../AMDGPUUsage.rst:7614
#: ../../../AMDGPUUsage.rst:7618 ../../../AMDGPUUsage.rst:7622
#: ../../../AMDGPUUsage.rst:7634 ../../../AMDGPUUsage.rst:7642
#: ../../../AMDGPUUsage.rst:7644 ../../../AMDGPUUsage.rst:7646
#: ../../../AMDGPUUsage.rst:7648 ../../../AMDGPUUsage.rst:7650
#: ../../../AMDGPUUsage.rst:7652 ../../../AMDGPUUsage.rst:7654
#: ../../../AMDGPUUsage.rst:7656
msgid "0"
msgstr ""

#: ../../../AMDGPUUsage.rst:357
msgid "flat"
msgstr ""

#: ../../../AMDGPUUsage.rst:357 ../../../AMDGPUUsage.rst:358
#: ../../../AMDGPUUsage.rst:361 ../../../AMDGPUUsage.rst:656
#: ../../../AMDGPUUsage.rst:1217 ../../../AMDGPUUsage.rst:1222
msgid "64"
msgstr ""

#: ../../../AMDGPUUsage.rst:357 ../../../AMDGPUUsage.rst:358
#: ../../../AMDGPUUsage.rst:361
msgid "0x0000000000000000"
msgstr ""

#: ../../../AMDGPUUsage.rst:358 ../../../AMDGPUUsage.rst:1317
#: ../../../AMDGPUUsage.rst:1318 ../../../AMDGPUUsage.rst:1363
msgid "Global"
msgstr ""

#: ../../../AMDGPUUsage.rst:358 ../../../AMDGPUUsage.rst:659
#: ../../../AMDGPUUsage.rst:1077 ../../../AMDGPUUsage.rst:1213
#: ../../../AMDGPUUsage.rst:3547 ../../../AMDGPUUsage.rst:3562
#: ../../../AMDGPUUsage.rst:3577 ../../../AMDGPUUsage.rst:3726
#: ../../../AMDGPUUsage.rst:3748 ../../../AMDGPUUsage.rst:3756
#: ../../../AMDGPUUsage.rst:3767 ../../../AMDGPUUsage.rst:3778
#: ../../../AMDGPUUsage.rst:3781 ../../../AMDGPUUsage.rst:3784
#: ../../../AMDGPUUsage.rst:3787 ../../../AMDGPUUsage.rst:3790
#: ../../../AMDGPUUsage.rst:3821 ../../../AMDGPUUsage.rst:3824
#: ../../../AMDGPUUsage.rst:3827 ../../../AMDGPUUsage.rst:6869
#: ../../../AMDGPUUsage.rst:7002 ../../../AMDGPUUsage.rst:7585
#: ../../../AMDGPUUsage.rst:7603 ../../../AMDGPUUsage.rst:7606
#: ../../../AMDGPUUsage.rst:7630 ../../../AMDGPUUsage.rst:7632
#: ../../../AMDGPUUsage.rst:7640
msgid "1"
msgstr ""

#: ../../../AMDGPUUsage.rst:358 ../../../AMDGPUUsage.rst:4268
#: ../../../AMDGPUUsage.rst:4283 ../../../AMDGPUUsage.rst:4301
#: ../../../AMDGPUUsage.rst:4303 ../../../AMDGPUUsage.rst:4311
#: ../../../AMDGPUUsage.rst:4313 ../../../AMDGPUUsage.rst:4321
#: ../../../AMDGPUUsage.rst:4331 ../../../AMDGPUUsage.rst:4334
#: ../../../AMDGPUUsage.rst:4415 ../../../AMDGPUUsage.rst:4467
#: ../../../AMDGPUUsage.rst:4470 ../../../AMDGPUUsage.rst:4550
#: ../../../AMDGPUUsage.rst:4877 ../../../AMDGPUUsage.rst:4880
#: ../../../AMDGPUUsage.rst:5022 ../../../AMDGPUUsage.rst:5068
#: ../../../AMDGPUUsage.rst:5071 ../../../AMDGPUUsage.rst:5213
#: ../../../AMDGPUUsage.rst:5417 ../../../AMDGPUUsage.rst:5420
#: ../../../AMDGPUUsage.rst:5637 ../../../AMDGPUUsage.rst:6025
#: ../../../AMDGPUUsage.rst:6030 ../../../AMDGPUUsage.rst:6218
#: ../../../AMDGPUUsage.rst:6316 ../../../AMDGPUUsage.rst:6321
#: ../../../AMDGPUUsage.rst:6326 ../../../AMDGPUUsage.rst:6331
msgid "global"
msgstr ""

#: ../../../AMDGPUUsage.rst:359
msgid "Region"
msgstr ""

#: ../../../AMDGPUUsage.rst:359 ../../../AMDGPUUsage.rst:1079
#: ../../../AMDGPUUsage.rst:3548 ../../../AMDGPUUsage.rst:3563
#: ../../../AMDGPUUsage.rst:3579 ../../../AMDGPUUsage.rst:3626
#: ../../../AMDGPUUsage.rst:3629 ../../../AMDGPUUsage.rst:3633
#: ../../../AMDGPUUsage.rst:3642 ../../../AMDGPUUsage.rst:3645
#: ../../../AMDGPUUsage.rst:7003
msgid "2"
msgstr ""

#: ../../../AMDGPUUsage.rst:359
msgid "N/A"
msgstr ""

#: ../../../AMDGPUUsage.rst:359
msgid "GDS"
msgstr ""

#: ../../../AMDGPUUsage.rst:359 ../../../AMDGPUUsage.rst:360
#: ../../../AMDGPUUsage.rst:362 ../../../AMDGPUUsage.rst:965
#: ../../../AMDGPUUsage.rst:1208 ../../../AMDGPUUsage.rst:1213
#: ../../../AMDGPUUsage.rst:1226 ../../../AMDGPUUsage.rst:1230
#: ../../../AMDGPUUsage.rst:1233 ../../../AMDGPUUsage.rst:1239
#: ../../../AMDGPUUsage.rst:1246 ../../../AMDGPUUsage.rst:3367
#: ../../../AMDGPUUsage.rst:3520 ../../../AMDGPUUsage.rst:3535
msgid "32"
msgstr ""

#: ../../../AMDGPUUsage.rst:359
msgid "*not implemented for AMDHSA*"
msgstr ""

#: ../../../AMDGPUUsage.rst:360
msgid "Local"
msgstr ""

#: ../../../AMDGPUUsage.rst:360 ../../../AMDGPUUsage.rst:1081
#: ../../../AMDGPUUsage.rst:3549 ../../../AMDGPUUsage.rst:3564
#: ../../../AMDGPUUsage.rst:3581 ../../../AMDGPUUsage.rst:7004
#: ../../../AMDGPUUsage.rst:7626
msgid "3"
msgstr ""

#: ../../../AMDGPUUsage.rst:360
msgid "group"
msgstr ""

#: ../../../AMDGPUUsage.rst:360
msgid "LDS"
msgstr ""

#: ../../../AMDGPUUsage.rst:360 ../../../AMDGPUUsage.rst:362
msgid "0xFFFFFFFF"
msgstr ""

#: ../../../AMDGPUUsage.rst:361
msgid "Constant"
msgstr ""

#: ../../../AMDGPUUsage.rst:361 ../../../AMDGPUUsage.rst:1083
#: ../../../AMDGPUUsage.rst:1363 ../../../AMDGPUUsage.rst:1364
#: ../../../AMDGPUUsage.rst:1365 ../../../AMDGPUUsage.rst:1366
#: ../../../AMDGPUUsage.rst:1368 ../../../AMDGPUUsage.rst:1369
#: ../../../AMDGPUUsage.rst:1372 ../../../AMDGPUUsage.rst:3618
#: ../../../AMDGPUUsage.rst:7005
msgid "4"
msgstr ""

#: ../../../AMDGPUUsage.rst:361 ../../../AMDGPUUsage.rst:4271
#: ../../../AMDGPUUsage.rst:4286
msgid "constant"
msgstr ""

#: ../../../AMDGPUUsage.rst:361
msgid "*same as global*"
msgstr ""

#: ../../../AMDGPUUsage.rst:362
msgid "Private"
msgstr ""

#: ../../../AMDGPUUsage.rst:362 ../../../AMDGPUUsage.rst:1084
#: ../../../AMDGPUUsage.rst:7006
msgid "5"
msgstr ""

#: ../../../AMDGPUUsage.rst:362 ../../../AMDGPUUsage.rst:4270
#: ../../../AMDGPUUsage.rst:4285
msgid "private"
msgstr ""

#: ../../../AMDGPUUsage.rst:362
msgid "scratch"
msgstr ""

#: ../../../AMDGPUUsage.rst:363
msgid "Constant 32-bit"
msgstr ""

#: ../../../AMDGPUUsage.rst:363 ../../../AMDGPUUsage.rst:1085
#: ../../../AMDGPUUsage.rst:3393 ../../../AMDGPUUsage.rst:7008
msgid "6"
msgstr ""

#: ../../../AMDGPUUsage.rst:363 ../../../AMDGPUUsage.rst:364
#: ../../../AMDGPUUsage.rst:456
msgid "*TODO*"
msgstr ""

#: ../../../AMDGPUUsage.rst:363
msgid "0x00000000"
msgstr ""

#: ../../../AMDGPUUsage.rst:364
msgid "Buffer Fat Pointer (experimental)"
msgstr ""

#: ../../../AMDGPUUsage.rst:364 ../../../AMDGPUUsage.rst:1087
#: ../../../AMDGPUUsage.rst:3400 ../../../AMDGPUUsage.rst:7010
msgid "7"
msgstr ""

#: ../../../AMDGPUUsage.rst:393
msgid "**Generic**"
msgstr ""

#: ../../../AMDGPUUsage.rst:368
msgid ""
"The generic address space uses the hardware flat address support available "
"in GFX7-GFX10. This uses two fixed ranges of virtual addresses (the private "
"and local apertures), that are outside the range of addressable global "
"memory, to map from a flat address to a private or local address."
msgstr ""

#: ../../../AMDGPUUsage.rst:373
msgid ""
"FLAT instructions can take a flat address and access global, private "
"(scratch), and group (LDS) memory depending on if the address is within one "
"of the aperture ranges. Flat access to scratch requires hardware aperture "
"setup and setup in the kernel prologue (see :ref:`amdgpu-amdhsa-kernel-"
"prolog-flat-scratch`). Flat access to LDS requires hardware aperture setup "
"and M0 (GFX7-GFX8) register setup (see :ref:`amdgpu-amdhsa-kernel-prolog-"
"m0`)."
msgstr ""

#: ../../../AMDGPUUsage.rst:381
msgid ""
"To convert between a private or group address space address (termed a "
"segment address) and a flat address the base address of the corresponding "
"aperture can be used. For GFX7-GFX8 these are available in the :ref:`amdgpu-"
"amdhsa-hsa-aql-queue` the address of which can be obtained with Queue Ptr "
"SGPR (see :ref:`amdgpu-amdhsa-initial-kernel-execution-state`). For GFX9-"
"GFX10 the aperture base addresses are directly available as inline constant "
"registers ``SRC_SHARED_BASE/LIMIT`` and ``SRC_PRIVATE_BASE/LIMIT``. In 64-"
"bit address mode the aperture sizes are 2^32 bytes and the base is aligned "
"to 2^32 which makes it easier to convert from flat to segment or segment to "
"flat."
msgstr ""

#: ../../../AMDGPUUsage.rst:392
msgid ""
"A global address space address has the same value when used as a flat "
"address so no conversion is needed."
msgstr ""

#: ../../../AMDGPUUsage.rst:405
msgid "**Global and Constant**"
msgstr ""

#: ../../../AMDGPUUsage.rst:396
msgid ""
"The global and constant address spaces both use global virtual addresses, "
"which are the same virtual address space used by the CPU. However, some "
"virtual addresses may only be accessible to the CPU, some only accessible by "
"the GPU, and some by both."
msgstr ""

#: ../../../AMDGPUUsage.rst:401
msgid ""
"Using the constant address space indicates that the data will not change "
"during the execution of the kernel. This allows scalar read instructions to "
"be used. The vector and scalar L1 caches are invalidated of volatile data "
"before each kernel dispatch execution to allow constant memory to change "
"values between kernel dispatches."
msgstr ""

#: ../../../AMDGPUUsage.rst:413
msgid "**Region**"
msgstr ""

#: ../../../AMDGPUUsage.rst:408
msgid ""
"The region address space uses the hardware Global Data Store (GDS). All "
"wavefronts executing on the same device will access the same memory for any "
"given region address. However, the same region address accessed by "
"wavefronts executing on different devices will access different memory. It "
"is higher performance than global memory. It is allocated by the runtime. "
"The data store (DS) instructions can be used to access it."
msgstr ""

#: ../../../AMDGPUUsage.rst:423
msgid "**Local**"
msgstr ""

#: ../../../AMDGPUUsage.rst:416
msgid ""
"The local address space uses the hardware Local Data Store (LDS) which is "
"automatically allocated when the hardware creates the wavefronts of a work-"
"group, and freed when all the wavefronts of a work-group have terminated. "
"All wavefronts belonging to the same work-group will access the same memory "
"for any given local address. However, the same local address accessed by "
"wavefronts belonging to different work-groups will access different memory. "
"It is higher performance than global memory. The data store (DS) "
"instructions can be used to access it."
msgstr ""

#: ../../../AMDGPUUsage.rst:453
msgid "**Private**"
msgstr ""

#: ../../../AMDGPUUsage.rst:426
msgid ""
"The private address space uses the hardware scratch memory support which "
"automatically allocates memory when it creates a wavefront and frees it when "
"a wavefronts terminates. The memory accessed by a lane of a wavefront for "
"any given private address will be different to the memory accessed by "
"another lane of the same or different wavefront for the same private address."
msgstr ""

#: ../../../AMDGPUUsage.rst:432
msgid ""
"If a kernel dispatch uses scratch, then the hardware allocates memory from a "
"pool of backing memory allocated by the runtime for each wavefront. The "
"lanes of the wavefront access this using dword (4 byte) interleaving. The "
"mapping used from private address to backing memory address is:"
msgstr ""

#: ../../../AMDGPUUsage.rst:437
msgid ""
"``wavefront-scratch-base + ((private-address / 4) * wavefront-size * 4) + "
"(wavefront-lane-id * 4) + (private-address % 4)``"
msgstr ""

#: ../../../AMDGPUUsage.rst:441
msgid ""
"If each lane of a wavefront accesses the same private address, the "
"interleaving results in adjacent dwords being accessed and hence requires "
"fewer cache lines to be fetched."
msgstr ""

#: ../../../AMDGPUUsage.rst:445
msgid ""
"There are different ways that the wavefront scratch base address is "
"determined by a wavefront (see :ref:`amdgpu-amdhsa-initial-kernel-execution-"
"state`)."
msgstr ""

#: ../../../AMDGPUUsage.rst:449
msgid ""
"Scratch memory can be accessed in an interleaved manner using buffer "
"instructions with the scratch buffer descriptor and per wavefront scratch "
"offset, by the scratch instructions, or by flat instructions. Multi-dword "
"access is not supported except by flat and scratch instructions in GFX9-"
"GFX10."
msgstr ""

#: ../../../AMDGPUUsage.rst:456
msgid "**Constant 32-bit**"
msgstr ""

#: ../../../AMDGPUUsage.rst:465
msgid "**Buffer Fat Pointer**"
msgstr ""

#: ../../../AMDGPUUsage.rst:459
msgid ""
"The buffer fat pointer is an experimental address space that is currently "
"unsupported in the backend. It exposes a non-integral pointer that is in the "
"future intended to support the modelling of 128-bit buffer descriptors plus "
"a 32-bit offset into the buffer (in total encapsulating a 160-bit "
"*pointer*), allowing normal LLVM load/store/atomic operations to be used to "
"model the buffer descriptors used heavily in graphics workloads targeting "
"the backend."
msgstr ""

#: ../../../AMDGPUUsage.rst:470
msgid "Memory Scopes"
msgstr ""

#: ../../../AMDGPUUsage.rst:472
msgid ""
"This section provides LLVM memory synchronization scopes supported by the "
"AMDGPU backend memory model when the target triple OS is ``amdhsa`` (see :"
"ref:`amdgpu-amdhsa-memory-model` and :ref:`amdgpu-target-triples`)."
msgstr ""

#: ../../../AMDGPUUsage.rst:476
msgid ""
"The memory model supported is based on the HSA memory model [HSA]_ which is "
"based in turn on HRF-indirect with scope inclusion [HRF]_. The happens-"
"before relation is transitive over the synchronizes-with relation "
"independent of scope and synchronizes-with allows the memory scope instances "
"to be inclusive (see table :ref:`amdgpu-amdhsa-llvm-sync-scopes-table`)."
msgstr ""

#: ../../../AMDGPUUsage.rst:482
msgid ""
"This is different to the OpenCL [OpenCL]_ memory model which does not have "
"scope inclusion and requires the memory scopes to exactly match. However, "
"this is conservatively correct for OpenCL."
msgstr ""

#: ../../../AMDGPUUsage.rst:486
msgid "AMDHSA LLVM Sync Scopes"
msgstr ""

#: ../../../AMDGPUUsage.rst:490
msgid "LLVM Sync Scope"
msgstr ""

#: ../../../AMDGPUUsage.rst:492 ../../../AMDGPUUsage.rst:828
#: ../../../AMDGPUUsage.rst:834 ../../../AMDGPUUsage.rst:835
#: ../../../AMDGPUUsage.rst:836 ../../../AMDGPUUsage.rst:838
#: ../../../AMDGPUUsage.rst:839 ../../../AMDGPUUsage.rst:840
#: ../../../AMDGPUUsage.rst:1076 ../../../AMDGPUUsage.rst:4268
#: ../../../AMDGPUUsage.rst:4282 ../../../AMDGPUUsage.rst:4283
#: ../../../AMDGPUUsage.rst:4292 ../../../AMDGPUUsage.rst:4610
#: ../../../AMDGPUUsage.rst:4612 ../../../AMDGPUUsage.rst:4733
#: ../../../AMDGPUUsage.rst:5259 ../../../AMDGPUUsage.rst:5261
#: ../../../AMDGPUUsage.rst:5342 ../../../AMDGPUUsage.rst:5787
#: ../../../AMDGPUUsage.rst:5789 ../../../AMDGPUUsage.rst:5918
#: ../../../AMDGPUUsage.rst:6336 ../../../AMDGPUUsage.rst:6354
#: ../../../AMDGPUUsage.rst:6355 ../../../AMDGPUUsage.rst:6974
msgid "*none*"
msgstr ""

#: ../../../AMDGPUUsage.rst:492
msgid "The default: ``system``."
msgstr ""

#: ../../../AMDGPUUsage.rst:494 ../../../AMDGPUUsage.rst:508
#: ../../../AMDGPUUsage.rst:521 ../../../AMDGPUUsage.rst:532
msgid ""
"Synchronizes with, and participates in modification and seq_cst total "
"orderings with, other operations (except image operations) for all address "
"spaces (except private, or generic that accesses private) provided the other "
"operation's sync scope is:"
msgstr ""

#: ../../../AMDGPUUsage.rst:500
msgid "``system``."
msgstr ""

#: ../../../AMDGPUUsage.rst:501
msgid "``agent`` and executed by a thread on the same agent."
msgstr ""

#: ../../../AMDGPUUsage.rst:503 ../../../AMDGPUUsage.rst:516
msgid "``workgroup`` and executed by a thread in the same work-group."
msgstr ""

#: ../../../AMDGPUUsage.rst:505 ../../../AMDGPUUsage.rst:518
#: ../../../AMDGPUUsage.rst:529
msgid "``wavefront`` and executed by a thread in the same wavefront."
msgstr ""

#: ../../../AMDGPUUsage.rst:508
msgid "``agent``"
msgstr ""

#: ../../../AMDGPUUsage.rst:514
msgid "``system`` or ``agent`` and executed by a thread on the same agent."
msgstr ""

#: ../../../AMDGPUUsage.rst:521
msgid "``workgroup``"
msgstr ""

#: ../../../AMDGPUUsage.rst:527
msgid ""
"``system``, ``agent`` or ``workgroup`` and executed by a thread in the same "
"work-group."
msgstr ""

#: ../../../AMDGPUUsage.rst:532
msgid "``wavefront``"
msgstr ""

#: ../../../AMDGPUUsage.rst:538
msgid ""
"``system``, ``agent``, ``workgroup`` or ``wavefront`` and executed by a "
"thread in the same wavefront."
msgstr ""

#: ../../../AMDGPUUsage.rst:542
msgid "``singlethread``"
msgstr ""

#: ../../../AMDGPUUsage.rst:542
msgid ""
"Only synchronizes with and participates in modification and seq_cst total "
"orderings with, other operations (except image operations) running in the "
"same thread for all address spaces (for example, in signal handlers)."
msgstr ""

#: ../../../AMDGPUUsage.rst:548
msgid "``one-as``"
msgstr ""

#: ../../../AMDGPUUsage.rst:548
msgid ""
"Same as ``system`` but only synchronizes with other operations within the "
"same address space."
msgstr ""

#: ../../../AMDGPUUsage.rst:551
msgid "``agent-one-as``"
msgstr ""

#: ../../../AMDGPUUsage.rst:551
msgid ""
"Same as ``agent`` but only synchronizes with other operations within the "
"same address space."
msgstr ""

#: ../../../AMDGPUUsage.rst:554
msgid "``workgroup-one-as``"
msgstr ""

#: ../../../AMDGPUUsage.rst:554
msgid ""
"Same as ``workgroup`` but only synchronizes with other operations within the "
"same address space."
msgstr ""

#: ../../../AMDGPUUsage.rst:557
msgid "``wavefront-one-as``"
msgstr ""

#: ../../../AMDGPUUsage.rst:557
msgid ""
"Same as ``wavefront`` but only synchronizes with other operations within the "
"same address space."
msgstr ""

#: ../../../AMDGPUUsage.rst:560
msgid "``singlethread-one-as``"
msgstr ""

#: ../../../AMDGPUUsage.rst:560
msgid ""
"Same as ``singlethread`` but only synchronizes with other operations within "
"the same address space."
msgstr ""

#: ../../../AMDGPUUsage.rst:565
msgid "LLVM IR Intrinsics"
msgstr ""

#: ../../../AMDGPUUsage.rst:567
msgid "The AMDGPU backend implements the following LLVM IR intrinsics."
msgstr ""

#: ../../../AMDGPUUsage.rst:569
msgid "*This section is WIP.*"
msgstr ""

#: ../../../AMDGPUUsage.rst:573
msgid "List AMDGPU intrinsics."
msgstr ""

#: ../../../AMDGPUUsage.rst:576
msgid "LLVM IR Attributes"
msgstr ""

#: ../../../AMDGPUUsage.rst:578
msgid "The AMDGPU backend supports the following LLVM IR attributes."
msgstr ""

#: ../../../AMDGPUUsage.rst:580
msgid "AMDGPU LLVM IR Attributes"
msgstr ""

#: ../../../AMDGPUUsage.rst:584
msgid "LLVM Attribute"
msgstr ""

#: ../../../AMDGPUUsage.rst:586
msgid "\"amdgpu-flat-work-group-size\"=\"min,max\""
msgstr ""

#: ../../../AMDGPUUsage.rst:586
msgid ""
"Specify the minimum and maximum flat work group sizes that will be specified "
"when the kernel is dispatched. Generated by the "
"``amdgpu_flat_work_group_size`` CLANG attribute [CLANG-ATTR]_."
msgstr ""

#: ../../../AMDGPUUsage.rst:589
msgid "\"amdgpu-implicitarg-num-bytes\"=\"n\""
msgstr ""

#: ../../../AMDGPUUsage.rst:589
msgid ""
"Number of kernel argument bytes to add to the kernel argument block size for "
"the implicit arguments. This varies by OS and language (for OpenCL see :ref:"
"`opencl-kernel-implicit-arguments-appended-for-amdhsa-os-table`)."
msgstr ""

#: ../../../AMDGPUUsage.rst:593
msgid "\"amdgpu-num-sgpr\"=\"n\""
msgstr ""

#: ../../../AMDGPUUsage.rst:593
msgid ""
"Specifies the number of SGPRs to use. Generated by the ``amdgpu_num_sgpr`` "
"CLANG attribute [CLANG-ATTR]_."
msgstr ""

#: ../../../AMDGPUUsage.rst:595
msgid "\"amdgpu-num-vgpr\"=\"n\""
msgstr ""

#: ../../../AMDGPUUsage.rst:595
msgid ""
"Specifies the number of VGPRs to use. Generated by the ``amdgpu_num_vgpr`` "
"CLANG attribute [CLANG-ATTR]_."
msgstr ""

#: ../../../AMDGPUUsage.rst:597
msgid "\"amdgpu-waves-per-eu\"=\"m,n\""
msgstr ""

#: ../../../AMDGPUUsage.rst:597
msgid ""
"Specify the minimum and maximum number of waves per execution unit. "
"Generated by the ``amdgpu_waves_per_eu`` CLANG attribute [CLANG-ATTR]_."
msgstr ""

#: ../../../AMDGPUUsage.rst:600
msgid "\"amdgpu-ieee\" true/false."
msgstr ""

#: ../../../AMDGPUUsage.rst:600
msgid ""
"Specify whether the function expects the IEEE field of the mode register to "
"be set on entry. Overrides the default for the calling convention."
msgstr ""

#: ../../../AMDGPUUsage.rst:603
msgid "\"amdgpu-dx10-clamp\" true/false."
msgstr ""

#: ../../../AMDGPUUsage.rst:603
msgid ""
"Specify whether the function expects the DX10_CLAMP field of the mode "
"register to be set on entry. Overrides the default for the calling "
"convention."
msgstr ""

#: ../../../AMDGPUUsage.rst:611
msgid "ELF Code Object"
msgstr ""

#: ../../../AMDGPUUsage.rst:613
msgid ""
"The AMDGPU backend generates a standard ELF [ELF]_ relocatable code object "
"that can be linked by ``lld`` to produce a standard ELF shared code object "
"which can be loaded and executed on an AMDGPU target."
msgstr ""

#: ../../../AMDGPUUsage.rst:620
msgid "Header"
msgstr ""

#: ../../../AMDGPUUsage.rst:622
msgid "The AMDGPU backend uses the following ELF header:"
msgstr ""

#: ../../../AMDGPUUsage.rst:624
msgid "AMDGPU ELF Header"
msgstr ""

#: ../../../AMDGPUUsage.rst:628 ../../../AMDGPUUsage.rst:1074
msgid "Field"
msgstr ""

#: ../../../AMDGPUUsage.rst:628 ../../../AMDGPUUsage.rst:652
#: ../../../AMDGPUUsage.rst:731 ../../../AMDGPUUsage.rst:768
#: ../../../AMDGPUUsage.rst:921 ../../../AMDGPUUsage.rst:962
#: ../../../AMDGPUUsage.rst:1074 ../../../AMDGPUUsage.rst:1314
#: ../../../AMDGPUUsage.rst:1356 ../../../AMDGPUUsage.rst:3544
#: ../../../AMDGPUUsage.rst:3558 ../../../AMDGPUUsage.rst:3573
msgid "Value"
msgstr ""

#: ../../../AMDGPUUsage.rst:630 ../../../AMDGPUUsage.rst:670
msgid "``e_ident[EI_CLASS]``"
msgstr ""

#: ../../../AMDGPUUsage.rst:630
msgid "``ELFCLASS64``"
msgstr ""

#: ../../../AMDGPUUsage.rst:631 ../../../AMDGPUUsage.rst:673
msgid "``e_ident[EI_DATA]``"
msgstr ""

#: ../../../AMDGPUUsage.rst:631
msgid "``ELFDATA2LSB``"
msgstr ""

#: ../../../AMDGPUUsage.rst:632 ../../../AMDGPUUsage.rst:685
msgid "``e_ident[EI_OSABI]``"
msgstr ""

#: ../../../AMDGPUUsage.rst:632 ../../../AMDGPUUsage.rst:655
msgid "``ELFOSABI_NONE``"
msgstr ""

#: ../../../AMDGPUUsage.rst:633 ../../../AMDGPUUsage.rst:656
msgid "``ELFOSABI_AMDGPU_HSA``"
msgstr ""

#: ../../../AMDGPUUsage.rst:634 ../../../AMDGPUUsage.rst:657
msgid "``ELFOSABI_AMDGPU_PAL``"
msgstr ""

#: ../../../AMDGPUUsage.rst:635 ../../../AMDGPUUsage.rst:658
msgid "``ELFOSABI_AMDGPU_MESA3D``"
msgstr ""

#: ../../../AMDGPUUsage.rst:636 ../../../AMDGPUUsage.rst:698
msgid "``e_ident[EI_ABIVERSION]``"
msgstr ""

#: ../../../AMDGPUUsage.rst:636 ../../../AMDGPUUsage.rst:659
msgid "``ELFABIVERSION_AMDGPU_HSA``"
msgstr ""

#: ../../../AMDGPUUsage.rst:637 ../../../AMDGPUUsage.rst:660
msgid "``ELFABIVERSION_AMDGPU_PAL``"
msgstr ""

#: ../../../AMDGPUUsage.rst:638 ../../../AMDGPUUsage.rst:661
msgid "``ELFABIVERSION_AMDGPU_MESA3D``"
msgstr ""

#: ../../../AMDGPUUsage.rst:639 ../../../AMDGPUUsage.rst:711
msgid "``e_type``"
msgstr ""

#: ../../../AMDGPUUsage.rst:639 ../../../AMDGPUUsage.rst:706
msgid "``ET_REL``"
msgstr ""

#: ../../../AMDGPUUsage.rst:640 ../../../AMDGPUUsage.rst:709
msgid "``ET_DYN``"
msgstr ""

#: ../../../AMDGPUUsage.rst:641 ../../../AMDGPUUsage.rst:718
msgid "``e_machine``"
msgstr ""

#: ../../../AMDGPUUsage.rst:641 ../../../AMDGPUUsage.rst:654
msgid "``EM_AMDGPU``"
msgstr ""

#: ../../../AMDGPUUsage.rst:642 ../../../AMDGPUUsage.rst:722
msgid "``e_entry``"
msgstr ""

#: ../../../AMDGPUUsage.rst:643 ../../../AMDGPUUsage.rst:813
msgid "``e_flags``"
msgstr ""

#: ../../../AMDGPUUsage.rst:643
msgid "See :ref:`amdgpu-elf-header-e_flags-table`"
msgstr ""

#: ../../../AMDGPUUsage.rst:648
msgid "AMDGPU ELF Header Enumeration Values"
msgstr ""

#: ../../../AMDGPUUsage.rst:652 ../../../AMDGPUUsage.rst:731
#: ../../../AMDGPUUsage.rst:768 ../../../AMDGPUUsage.rst:824
#: ../../../AMDGPUUsage.rst:910 ../../../AMDGPUUsage.rst:921
#: ../../../AMDGPUUsage.rst:950 ../../../AMDGPUUsage.rst:962
#: ../../../AMDGPUUsage.rst:985
msgid "Name"
msgstr ""

#: ../../../AMDGPUUsage.rst:654
msgid "224"
msgstr ""

#: ../../../AMDGPUUsage.rst:657
msgid "65"
msgstr ""

#: ../../../AMDGPUUsage.rst:658
msgid "66"
msgstr ""

#: ../../../AMDGPUUsage.rst:665
msgid "The ELF class is:"
msgstr ""

#: ../../../AMDGPUUsage.rst:667
msgid "``ELFCLASS32`` for ``r600`` architecture."
msgstr ""

#: ../../../AMDGPUUsage.rst:669
msgid ""
"``ELFCLASS64`` for ``amdgcn`` architecture which only supports 64-bit "
"process address space applications."
msgstr ""

#: ../../../AMDGPUUsage.rst:673
msgid "All AMDGPU targets use ``ELFDATA2LSB`` for little-endian byte ordering."
msgstr ""

#: ../../../AMDGPUUsage.rst:676
msgid ""
"One of the following AMDGPU target architecture specific OS ABIs (see :ref:"
"`amdgpu-os-table`):"
msgstr ""

#: ../../../AMDGPUUsage.rst:679
msgid "``ELFOSABI_NONE`` for *unknown* OS."
msgstr ""

#: ../../../AMDGPUUsage.rst:681
msgid "``ELFOSABI_AMDGPU_HSA`` for ``amdhsa`` OS."
msgstr ""

#: ../../../AMDGPUUsage.rst:683
msgid "``ELFOSABI_AMDGPU_PAL`` for ``amdpal`` OS."
msgstr ""

#: ../../../AMDGPUUsage.rst:685
msgid "``ELFOSABI_AMDGPU_MESA3D`` for ``mesa3D`` OS."
msgstr ""

#: ../../../AMDGPUUsage.rst:688
msgid ""
"The ABI version of the AMDGPU target architecture specific OS ABI to which "
"the code object conforms:"
msgstr ""

#: ../../../AMDGPUUsage.rst:691
msgid ""
"``ELFABIVERSION_AMDGPU_HSA`` is used to specify the version of AMD HSA "
"runtime ABI."
msgstr ""

#: ../../../AMDGPUUsage.rst:694
msgid ""
"``ELFABIVERSION_AMDGPU_PAL`` is used to specify the version of AMD PAL "
"runtime ABI."
msgstr ""

#: ../../../AMDGPUUsage.rst:697
msgid ""
"``ELFABIVERSION_AMDGPU_MESA3D`` is used to specify the version of AMD MESA "
"3D runtime ABI."
msgstr ""

#: ../../../AMDGPUUsage.rst:701
msgid "Can be one of the following values:"
msgstr ""

#: ../../../AMDGPUUsage.rst:705
msgid ""
"The type produced by the AMDGPU backend compiler as it is relocatable code "
"object."
msgstr ""

#: ../../../AMDGPUUsage.rst:709
msgid "The type produced by the linker as it is a shared code object."
msgstr ""

#: ../../../AMDGPUUsage.rst:711
msgid "The AMD HSA runtime loader requires a ``ET_DYN`` code object."
msgstr ""

#: ../../../AMDGPUUsage.rst:714
msgid ""
"The value ``EM_AMDGPU`` is used for the machine for all processors supported "
"by the ``r600`` and ``amdgcn`` architectures (see :ref:`amdgpu-processor-"
"table`). The specific processor is specified in the ``EF_AMDGPU_MACH`` bit "
"field of the ``e_flags`` (see :ref:`amdgpu-elf-header-e_flags-table`)."
msgstr ""

#: ../../../AMDGPUUsage.rst:721
msgid ""
"The entry point is 0 as the entry points for individual kernels must be "
"selected in order to invoke them through AQL packets."
msgstr ""

#: ../../../AMDGPUUsage.rst:725
msgid "The AMDGPU backend uses the following ELF header flags:"
msgstr ""

#: ../../../AMDGPUUsage.rst:727
msgid "AMDGPU ELF Header ``e_flags``"
msgstr ""

#: ../../../AMDGPUUsage.rst:733
msgid "**AMDGPU Processor Flag**"
msgstr ""

#: ../../../AMDGPUUsage.rst:733
msgid "See :ref:`amdgpu-processor-table`."
msgstr ""

#: ../../../AMDGPUUsage.rst:735
msgid "``EF_AMDGPU_MACH``"
msgstr ""

#: ../../../AMDGPUUsage.rst:735
msgid "0x000000ff"
msgstr ""

#: ../../../AMDGPUUsage.rst:735
msgid ""
"AMDGPU processor selection mask for ``EF_AMDGPU_MACH_xxx`` values defined "
"in :ref:`amdgpu-ef-amdgpu-mach-table`."
msgstr ""

#: ../../../AMDGPUUsage.rst:740
msgid "``EF_AMDGPU_XNACK``"
msgstr ""

#: ../../../AMDGPUUsage.rst:740
msgid "0x00000100"
msgstr ""

#: ../../../AMDGPUUsage.rst:740
msgid ""
"Indicates if the ``xnack`` target feature is enabled for all code contained "
"in the code object. If the processor does not support the ``xnack`` target "
"feature then must be 0. See :ref:`amdgpu-target-features`."
msgstr ""

#: ../../../AMDGPUUsage.rst:751
msgid "``EF_AMDGPU_SRAM_ECC``"
msgstr ""

#: ../../../AMDGPUUsage.rst:751
msgid "0x00000200"
msgstr ""

#: ../../../AMDGPUUsage.rst:751
msgid ""
"Indicates if the ``sram-ecc`` target feature is enabled for all code "
"contained in the code object. If the processor does not support the ``sram-"
"ecc`` target feature then must be 0. See :ref:`amdgpu-target-features`."
msgstr ""

#: ../../../AMDGPUUsage.rst:764
msgid "AMDGPU ``EF_AMDGPU_MACH`` Values"
msgstr ""

#: ../../../AMDGPUUsage.rst:768
msgid "Description (see :ref:`amdgpu-processor-table`)"
msgstr ""

#: ../../../AMDGPUUsage.rst:771
msgid "``EF_AMDGPU_MACH_NONE``"
msgstr ""

#: ../../../AMDGPUUsage.rst:771
msgid "0x000"
msgstr ""

#: ../../../AMDGPUUsage.rst:771
msgid "*not specified*"
msgstr ""

#: ../../../AMDGPUUsage.rst:772
msgid "``EF_AMDGPU_MACH_R600_R600``"
msgstr ""

#: ../../../AMDGPUUsage.rst:772
msgid "0x001"
msgstr ""

#: ../../../AMDGPUUsage.rst:773
msgid "``EF_AMDGPU_MACH_R600_R630``"
msgstr ""

#: ../../../AMDGPUUsage.rst:773
msgid "0x002"
msgstr ""

#: ../../../AMDGPUUsage.rst:774
msgid "``EF_AMDGPU_MACH_R600_RS880``"
msgstr ""

#: ../../../AMDGPUUsage.rst:774
msgid "0x003"
msgstr ""

#: ../../../AMDGPUUsage.rst:775
msgid "``EF_AMDGPU_MACH_R600_RV670``"
msgstr ""

#: ../../../AMDGPUUsage.rst:775
msgid "0x004"
msgstr ""

#: ../../../AMDGPUUsage.rst:776
msgid "``EF_AMDGPU_MACH_R600_RV710``"
msgstr ""

#: ../../../AMDGPUUsage.rst:776
msgid "0x005"
msgstr ""

#: ../../../AMDGPUUsage.rst:777
msgid "``EF_AMDGPU_MACH_R600_RV730``"
msgstr ""

#: ../../../AMDGPUUsage.rst:777
msgid "0x006"
msgstr ""

#: ../../../AMDGPUUsage.rst:778
msgid "``EF_AMDGPU_MACH_R600_RV770``"
msgstr ""

#: ../../../AMDGPUUsage.rst:778
msgid "0x007"
msgstr ""

#: ../../../AMDGPUUsage.rst:779
msgid "``EF_AMDGPU_MACH_R600_CEDAR``"
msgstr ""

#: ../../../AMDGPUUsage.rst:779
msgid "0x008"
msgstr ""

#: ../../../AMDGPUUsage.rst:780
msgid "``EF_AMDGPU_MACH_R600_CYPRESS``"
msgstr ""

#: ../../../AMDGPUUsage.rst:780
msgid "0x009"
msgstr ""

#: ../../../AMDGPUUsage.rst:781
msgid "``EF_AMDGPU_MACH_R600_JUNIPER``"
msgstr ""

#: ../../../AMDGPUUsage.rst:781
msgid "0x00a"
msgstr ""

#: ../../../AMDGPUUsage.rst:782
msgid "``EF_AMDGPU_MACH_R600_REDWOOD``"
msgstr ""

#: ../../../AMDGPUUsage.rst:782
msgid "0x00b"
msgstr ""

#: ../../../AMDGPUUsage.rst:783
msgid "``EF_AMDGPU_MACH_R600_SUMO``"
msgstr ""

#: ../../../AMDGPUUsage.rst:783
msgid "0x00c"
msgstr ""

#: ../../../AMDGPUUsage.rst:784
msgid "``EF_AMDGPU_MACH_R600_BARTS``"
msgstr ""

#: ../../../AMDGPUUsage.rst:784
msgid "0x00d"
msgstr ""

#: ../../../AMDGPUUsage.rst:785
msgid "``EF_AMDGPU_MACH_R600_CAICOS``"
msgstr ""

#: ../../../AMDGPUUsage.rst:785
msgid "0x00e"
msgstr ""

#: ../../../AMDGPUUsage.rst:786
msgid "``EF_AMDGPU_MACH_R600_CAYMAN``"
msgstr ""

#: ../../../AMDGPUUsage.rst:786
msgid "0x00f"
msgstr ""

#: ../../../AMDGPUUsage.rst:787
msgid "``EF_AMDGPU_MACH_R600_TURKS``"
msgstr ""

#: ../../../AMDGPUUsage.rst:787
msgid "0x010"
msgstr ""

#: ../../../AMDGPUUsage.rst:788 ../../../AMDGPUUsage.rst:797
#: ../../../AMDGPUUsage.rst:808 ../../../AMDGPUUsage.rst:923
#: ../../../AMDGPUUsage.rst:925 ../../../AMDGPUUsage.rst:964
#: ../../../AMDGPUUsage.rst:1092
msgid "*reserved*"
msgstr ""

#: ../../../AMDGPUUsage.rst:788
msgid "0x011 - 0x01f"
msgstr ""

#: ../../../AMDGPUUsage.rst:788
msgid "Reserved for ``r600`` architecture processors."
msgstr ""

#: ../../../AMDGPUUsage.rst:790
msgid "``EF_AMDGPU_MACH_AMDGCN_GFX600``"
msgstr ""

#: ../../../AMDGPUUsage.rst:790
msgid "0x020"
msgstr ""

#: ../../../AMDGPUUsage.rst:791
msgid "``EF_AMDGPU_MACH_AMDGCN_GFX601``"
msgstr ""

#: ../../../AMDGPUUsage.rst:791
msgid "0x021"
msgstr ""

#: ../../../AMDGPUUsage.rst:792
msgid "``EF_AMDGPU_MACH_AMDGCN_GFX700``"
msgstr ""

#: ../../../AMDGPUUsage.rst:792
msgid "0x022"
msgstr ""

#: ../../../AMDGPUUsage.rst:793
msgid "``EF_AMDGPU_MACH_AMDGCN_GFX701``"
msgstr ""

#: ../../../AMDGPUUsage.rst:793
msgid "0x023"
msgstr ""

#: ../../../AMDGPUUsage.rst:794
msgid "``EF_AMDGPU_MACH_AMDGCN_GFX702``"
msgstr ""

#: ../../../AMDGPUUsage.rst:794
msgid "0x024"
msgstr ""

#: ../../../AMDGPUUsage.rst:795
msgid "``EF_AMDGPU_MACH_AMDGCN_GFX703``"
msgstr ""

#: ../../../AMDGPUUsage.rst:795
msgid "0x025"
msgstr ""

#: ../../../AMDGPUUsage.rst:796
msgid "``EF_AMDGPU_MACH_AMDGCN_GFX704``"
msgstr ""

#: ../../../AMDGPUUsage.rst:796
msgid "0x026"
msgstr ""

#: ../../../AMDGPUUsage.rst:797
msgid "0x027"
msgstr ""

#: ../../../AMDGPUUsage.rst:797 ../../../AMDGPUUsage.rst:808
#: ../../../AMDGPUUsage.rst:6421 ../../../AMDGPUUsage.rst:6422
#: ../../../AMDGPUUsage.rst:6423 ../../../AMDGPUUsage.rst:6426
#: ../../../AMDGPUUsage.rst:6427 ../../../AMDGPUUsage.rst:6428
msgid "Reserved."
msgstr ""

#: ../../../AMDGPUUsage.rst:798
msgid "``EF_AMDGPU_MACH_AMDGCN_GFX801``"
msgstr ""

#: ../../../AMDGPUUsage.rst:798
msgid "0x028"
msgstr ""

#: ../../../AMDGPUUsage.rst:799
msgid "``EF_AMDGPU_MACH_AMDGCN_GFX802``"
msgstr ""

#: ../../../AMDGPUUsage.rst:799
msgid "0x029"
msgstr ""

#: ../../../AMDGPUUsage.rst:800
msgid "``EF_AMDGPU_MACH_AMDGCN_GFX803``"
msgstr ""

#: ../../../AMDGPUUsage.rst:800
msgid "0x02a"
msgstr ""

#: ../../../AMDGPUUsage.rst:801
msgid "``EF_AMDGPU_MACH_AMDGCN_GFX810``"
msgstr ""

#: ../../../AMDGPUUsage.rst:801
msgid "0x02b"
msgstr ""

#: ../../../AMDGPUUsage.rst:802
msgid "``EF_AMDGPU_MACH_AMDGCN_GFX900``"
msgstr ""

#: ../../../AMDGPUUsage.rst:802
msgid "0x02c"
msgstr ""

#: ../../../AMDGPUUsage.rst:803
msgid "``EF_AMDGPU_MACH_AMDGCN_GFX902``"
msgstr ""

#: ../../../AMDGPUUsage.rst:803
msgid "0x02d"
msgstr ""

#: ../../../AMDGPUUsage.rst:804
msgid "``EF_AMDGPU_MACH_AMDGCN_GFX904``"
msgstr ""

#: ../../../AMDGPUUsage.rst:804
msgid "0x02e"
msgstr ""

#: ../../../AMDGPUUsage.rst:805
msgid "``EF_AMDGPU_MACH_AMDGCN_GFX906``"
msgstr ""

#: ../../../AMDGPUUsage.rst:805
msgid "0x02f"
msgstr ""

#: ../../../AMDGPUUsage.rst:806
msgid "``EF_AMDGPU_MACH_AMDGCN_GFX908``"
msgstr ""

#: ../../../AMDGPUUsage.rst:806
msgid "0x030"
msgstr ""

#: ../../../AMDGPUUsage.rst:807
msgid "``EF_AMDGPU_MACH_AMDGCN_GFX909``"
msgstr ""

#: ../../../AMDGPUUsage.rst:807
msgid "0x031"
msgstr ""

#: ../../../AMDGPUUsage.rst:808
msgid "0x032"
msgstr ""

#: ../../../AMDGPUUsage.rst:809
msgid "``EF_AMDGPU_MACH_AMDGCN_GFX1010``"
msgstr ""

#: ../../../AMDGPUUsage.rst:809
msgid "0x033"
msgstr ""

#: ../../../AMDGPUUsage.rst:810
msgid "``EF_AMDGPU_MACH_AMDGCN_GFX1011``"
msgstr ""

#: ../../../AMDGPUUsage.rst:810
msgid "0x034"
msgstr ""

#: ../../../AMDGPUUsage.rst:811
msgid "``EF_AMDGPU_MACH_AMDGCN_GFX1012``"
msgstr ""

#: ../../../AMDGPUUsage.rst:811
msgid "0x035"
msgstr ""

#: ../../../AMDGPUUsage.rst:812
msgid "``EF_AMDGPU_MACH_AMDGCN_GFX1030``"
msgstr ""

#: ../../../AMDGPUUsage.rst:812
msgid "0x036"
msgstr ""

#: ../../../AMDGPUUsage.rst:816
msgid "Sections"
msgstr ""

#: ../../../AMDGPUUsage.rst:818
msgid ""
"An AMDGPU target ELF code object has the standard ELF sections which include:"
msgstr ""

#: ../../../AMDGPUUsage.rst:820
msgid "AMDGPU ELF Sections"
msgstr ""

#: ../../../AMDGPUUsage.rst:824 ../../../AMDGPUUsage.rst:910
#: ../../../AMDGPUUsage.rst:950 ../../../AMDGPUUsage.rst:985
msgid "Type"
msgstr ""

#: ../../../AMDGPUUsage.rst:824
msgid "Attributes"
msgstr ""

#: ../../../AMDGPUUsage.rst:826 ../../../AMDGPUUsage.rst:989
msgid "``.bss``"
msgstr ""

#: ../../../AMDGPUUsage.rst:826
msgid "``SHT_NOBITS``"
msgstr ""

#: ../../../AMDGPUUsage.rst:826 ../../../AMDGPUUsage.rst:827
#: ../../../AMDGPUUsage.rst:832
msgid "``SHF_ALLOC`` + ``SHF_WRITE``"
msgstr ""

#: ../../../AMDGPUUsage.rst:827 ../../../AMDGPUUsage.rst:987
msgid "``.data``"
msgstr ""

#: ../../../AMDGPUUsage.rst:827 ../../../AMDGPUUsage.rst:828
#: ../../../AMDGPUUsage.rst:830 ../../../AMDGPUUsage.rst:831
#: ../../../AMDGPUUsage.rst:832 ../../../AMDGPUUsage.rst:837
#: ../../../AMDGPUUsage.rst:841
msgid "``SHT_PROGBITS``"
msgstr ""

#: ../../../AMDGPUUsage.rst:828
msgid "``.debug_``\\ *\\**"
msgstr ""

#: ../../../AMDGPUUsage.rst:829
msgid "``.dynamic``"
msgstr ""

#: ../../../AMDGPUUsage.rst:829
msgid "``SHT_DYNAMIC``"
msgstr ""

#: ../../../AMDGPUUsage.rst:829 ../../../AMDGPUUsage.rst:830
#: ../../../AMDGPUUsage.rst:831 ../../../AMDGPUUsage.rst:833
#: ../../../AMDGPUUsage.rst:837
msgid "``SHF_ALLOC``"
msgstr ""

#: ../../../AMDGPUUsage.rst:830
msgid "``.dynstr``"
msgstr ""

#: ../../../AMDGPUUsage.rst:831
msgid "``.dynsym``"
msgstr ""

#: ../../../AMDGPUUsage.rst:832
msgid "``.got``"
msgstr ""

#: ../../../AMDGPUUsage.rst:833
msgid "``.hash``"
msgstr ""

#: ../../../AMDGPUUsage.rst:833
msgid "``SHT_HASH``"
msgstr ""

#: ../../../AMDGPUUsage.rst:834 ../../../AMDGPUUsage.rst:856
msgid "``.note``"
msgstr ""

#: ../../../AMDGPUUsage.rst:834
msgid "``SHT_NOTE``"
msgstr ""

#: ../../../AMDGPUUsage.rst:835
msgid "``.rela``\\ *name*"
msgstr ""

#: ../../../AMDGPUUsage.rst:835 ../../../AMDGPUUsage.rst:836
msgid "``SHT_RELA``"
msgstr ""

#: ../../../AMDGPUUsage.rst:836
msgid "``.rela.dyn``"
msgstr ""

#: ../../../AMDGPUUsage.rst:837 ../../../AMDGPUUsage.rst:988
#: ../../../AMDGPUUsage.rst:990
msgid "``.rodata``"
msgstr ""

#: ../../../AMDGPUUsage.rst:838
msgid "``.shstrtab``"
msgstr ""

#: ../../../AMDGPUUsage.rst:838 ../../../AMDGPUUsage.rst:839
msgid "``SHT_STRTAB``"
msgstr ""

#: ../../../AMDGPUUsage.rst:839
msgid "``.strtab``"
msgstr ""

#: ../../../AMDGPUUsage.rst:840
msgid "``.symtab``"
msgstr ""

#: ../../../AMDGPUUsage.rst:840
msgid "``SHT_SYMTAB``"
msgstr ""

#: ../../../AMDGPUUsage.rst:841 ../../../AMDGPUUsage.rst:872
#: ../../../AMDGPUUsage.rst:991
msgid "``.text``"
msgstr ""

#: ../../../AMDGPUUsage.rst:841
msgid "``SHF_ALLOC`` + ``SHF_EXECINSTR``"
msgstr ""

#: ../../../AMDGPUUsage.rst:844
msgid ""
"These sections have their standard meanings (see [ELF]_) and are only "
"generated if needed."
msgstr ""

#: ../../../AMDGPUUsage.rst:849
msgid "``.debug``\\ *\\**"
msgstr ""

#: ../../../AMDGPUUsage.rst:848
msgid ""
"The standard DWARF sections. See :ref:`amdgpu-dwarf-debug-information` for "
"information on the DWARF produced by the AMDGPU backend."
msgstr ""

#: ../../../AMDGPUUsage.rst:852
msgid "``.dynamic``, ``.dynstr``, ``.dynsym``, ``.hash``"
msgstr ""

#: ../../../AMDGPUUsage.rst:852
msgid "The standard sections used by a dynamic loader."
msgstr ""

#: ../../../AMDGPUUsage.rst:855
msgid ""
"See :ref:`amdgpu-note-records` for the note records supported by the AMDGPU "
"backend."
msgstr ""

#: ../../../AMDGPUUsage.rst:867
msgid "``.rela``\\ *name*, ``.rela.dyn``"
msgstr ""

#: ../../../AMDGPUUsage.rst:859
msgid ""
"For relocatable code objects, *name* is the name of the section that the "
"relocation records apply. For example, ``.rela.text`` is the section name "
"for relocation records associated with the ``.text`` section."
msgstr ""

#: ../../../AMDGPUUsage.rst:863
msgid ""
"For linked shared code objects, ``.rela.dyn`` contains all the relocation "
"records from each of the relocatable code object's ``.rela``\\ *name* "
"sections."
msgstr ""

#: ../../../AMDGPUUsage.rst:866
msgid ""
"See :ref:`amdgpu-relocation-records` for the relocation records supported by "
"the AMDGPU backend."
msgstr ""

#: ../../../AMDGPUUsage.rst:870
msgid ""
"The executable machine code for the kernels and functions they call. "
"Generated as position independent code. See :ref:`amdgpu-code-conventions` "
"for information on conventions used in the isa generation."
msgstr ""

#: ../../../AMDGPUUsage.rst:877
msgid "Note Records"
msgstr ""

#: ../../../AMDGPUUsage.rst:879
msgid ""
"The AMDGPU backend code object contains ELF note records in the ``.note`` "
"section. The set of generated notes and their semantics depend on the code "
"object version; see :ref:`amdgpu-note-records-v2` and :ref:`amdgpu-note-"
"records-v3`."
msgstr ""

#: ../../../AMDGPUUsage.rst:884
msgid ""
"As required by ``ELFCLASS32`` and ``ELFCLASS64``, minimal zero-byte padding "
"must be generated after the ``name`` field to ensure the ``desc`` field is 4 "
"byte aligned. In addition, minimal zero-byte padding must be generated to "
"ensure the ``desc`` field size is a multiple of 4 bytes. The "
"``sh_addralign`` field of the ``.note`` section must be at least 4 to "
"indicate at least 8 byte alignment."
msgstr ""

#: ../../../AMDGPUUsage.rst:894
msgid "Code Object V2 Note Records (-mattr=-code-object-v3)"
msgstr ""

#: ../../../AMDGPUUsage.rst:896
msgid ""
"Code Object V2 is not the default code object version emitted by this "
"version of LLVM. For a description of the notes generated with the default "
"configuration (Code Object V3) see :ref:`amdgpu-note-records-v3`."
msgstr ""

#: ../../../AMDGPUUsage.rst:900
msgid ""
"The AMDGPU backend code object uses the following ELF note record in the ``."
"note`` section when compiling for Code Object V2 (-mattr=-code-object-v3)."
msgstr ""

#: ../../../AMDGPUUsage.rst:903 ../../../AMDGPUUsage.rst:943
msgid ""
"Additional note records may be present, but any which are not documented "
"here are deprecated and should not be used."
msgstr ""

#: ../../../AMDGPUUsage.rst:906
msgid "AMDGPU Code Object V2 ELF Note Records"
msgstr ""

#: ../../../AMDGPUUsage.rst:912
msgid "\"AMD\""
msgstr ""

#: ../../../AMDGPUUsage.rst:912 ../../../AMDGPUUsage.rst:924
#: ../../../AMDGPUUsage.rst:933
msgid "``NT_AMD_AMDGPU_HSA_METADATA``"
msgstr ""

#: ../../../AMDGPUUsage.rst:912
msgid "<metadata null terminated string>"
msgstr ""

#: ../../../AMDGPUUsage.rst:917
msgid "AMDGPU Code Object V2 ELF Note Record Enumeration Values"
msgstr ""

#: ../../../AMDGPUUsage.rst:923
msgid "0-9"
msgstr ""

#: ../../../AMDGPUUsage.rst:924 ../../../AMDGPUUsage.rst:1090
#: ../../../AMDGPUUsage.rst:3424
msgid "10"
msgstr ""

#: ../../../AMDGPUUsage.rst:925 ../../../AMDGPUUsage.rst:1091
msgid "11"
msgstr ""

#: ../../../AMDGPUUsage.rst:929
msgid ""
"Specifies extensible metadata associated with the code objects executed on "
"HSA [HSA]_ compatible runtimes such as AMD's ROCm [AMD-ROCm]_. It is "
"required when the target triple OS is ``amdhsa`` (see :ref:`amdgpu-target-"
"triples`). See :ref:`amdgpu-amdhsa-code-object-metadata-v2` for the syntax "
"of the code object metadata string."
msgstr ""

#: ../../../AMDGPUUsage.rst:938
msgid "Code Object V3 Note Records (-mattr=+code-object-v3)"
msgstr ""

#: ../../../AMDGPUUsage.rst:940
msgid ""
"The AMDGPU backend code object uses the following ELF note record in the ``."
"note`` section when compiling for Code Object V3 (-mattr=+code-object-v3)."
msgstr ""

#: ../../../AMDGPUUsage.rst:946
msgid "AMDGPU Code Object V3 ELF Note Records"
msgstr ""

#: ../../../AMDGPUUsage.rst:952
msgid "\"AMDGPU\""
msgstr ""

#: ../../../AMDGPUUsage.rst:952 ../../../AMDGPUUsage.rst:965
#: ../../../AMDGPUUsage.rst:972
msgid "``NT_AMDGPU_METADATA``"
msgstr ""

#: ../../../AMDGPUUsage.rst:952
msgid "Metadata in Message Pack [MsgPack]_ binary format."
msgstr ""

#: ../../../AMDGPUUsage.rst:958
msgid "AMDGPU Code Object V3 ELF Note Record Enumeration Values"
msgstr ""

#: ../../../AMDGPUUsage.rst:964
msgid "0-31"
msgstr ""

#: ../../../AMDGPUUsage.rst:969
msgid ""
"Specifies extensible metadata associated with an AMDGPU code object. It is "
"encoded as a map in the Message Pack [MsgPack]_ binary data format. See :ref:"
"`amdgpu-amdhsa-code-object-metadata-v3` for the map keys defined for the "
"``amdhsa`` OS."
msgstr ""

#: ../../../AMDGPUUsage.rst:977
msgid "Symbols"
msgstr ""

#: ../../../AMDGPUUsage.rst:979
msgid "Symbols include the following:"
msgstr ""

#: ../../../AMDGPUUsage.rst:981
msgid "AMDGPU ELF Symbols"
msgstr ""

#: ../../../AMDGPUUsage.rst:985
msgid "Section"
msgstr ""

#: ../../../AMDGPUUsage.rst:987 ../../../AMDGPUUsage.rst:991
#: ../../../AMDGPUUsage.rst:992
msgid "*link-name*"
msgstr ""

#: ../../../AMDGPUUsage.rst:987 ../../../AMDGPUUsage.rst:990
#: ../../../AMDGPUUsage.rst:992
msgid "``STT_OBJECT``"
msgstr ""

#: ../../../AMDGPUUsage.rst:987 ../../../AMDGPUUsage.rst:1013
msgid "Global variable"
msgstr ""

#: ../../../AMDGPUUsage.rst:990
msgid "*link-name*\\ ``.kd``"
msgstr ""

#: ../../../AMDGPUUsage.rst:990 ../../../AMDGPUUsage.rst:1019
msgid "Kernel descriptor"
msgstr ""

#: ../../../AMDGPUUsage.rst:991
msgid "``STT_FUNC``"
msgstr ""

#: ../../../AMDGPUUsage.rst:991 ../../../AMDGPUUsage.rst:1022
msgid "Kernel entry point"
msgstr ""

#: ../../../AMDGPUUsage.rst:992
msgid "SHN_AMDGPU_LDS"
msgstr ""

#: ../../../AMDGPUUsage.rst:992
msgid "Global variable in LDS"
msgstr ""

#: ../../../AMDGPUUsage.rst:996
msgid "Global variables both used and defined by the compilation unit."
msgstr ""

#: ../../../AMDGPUUsage.rst:998
msgid ""
"If the symbol is defined in the compilation unit then it is allocated in the "
"appropriate section according to if it has initialized data or is readonly."
msgstr ""

#: ../../../AMDGPUUsage.rst:1001
msgid ""
"If the symbol is external then its section is ``STN_UNDEF`` and the loader "
"will resolve relocations using the definition provided by another code "
"object or explicitly defined by the runtime."
msgstr ""

#: ../../../AMDGPUUsage.rst:1005
msgid ""
"If the symbol resides in local/group memory (LDS) then its section is the "
"special processor specific section name ``SHN_AMDGPU_LDS``, and the "
"``st_value`` field describes alignment requirements as it does for common "
"symbols."
msgstr ""

#: ../../../AMDGPUUsage.rst:1012
msgid ""
"Add description of linked shared object symbols. Seems undefined symbols are "
"marked as STT_NOTYPE."
msgstr ""

#: ../../../AMDGPUUsage.rst:1016
msgid ""
"Every HSA kernel has an associated kernel descriptor. It is the address of "
"the kernel descriptor that is used in the AQL dispatch packet used to invoke "
"the kernel, not the kernel entry point. The layout of the HSA kernel "
"descriptor is defined in :ref:`amdgpu-amdhsa-kernel-descriptor`."
msgstr ""

#: ../../../AMDGPUUsage.rst:1022
msgid "Every HSA kernel also has a symbol for its machine code entry point."
msgstr ""

#: ../../../AMDGPUUsage.rst:1027
msgid "Relocation Records"
msgstr ""

#: ../../../AMDGPUUsage.rst:1029
msgid ""
"AMDGPU backend generates ``Elf64_Rela`` relocation records. Supported "
"relocatable fields are:"
msgstr ""

#: ../../../AMDGPUUsage.rst:1035 ../../../AMDGPUUsage.rst:1077
#: ../../../AMDGPUUsage.rst:1079 ../../../AMDGPUUsage.rst:1083
#: ../../../AMDGPUUsage.rst:1085 ../../../AMDGPUUsage.rst:1087
#: ../../../AMDGPUUsage.rst:1088 ../../../AMDGPUUsage.rst:1089
#: ../../../AMDGPUUsage.rst:1090 ../../../AMDGPUUsage.rst:1091
msgid "``word32``"
msgstr ""

#: ../../../AMDGPUUsage.rst:1033
msgid ""
"This specifies a 32-bit field occupying 4 bytes with arbitrary byte "
"alignment. These values use the same byte order as other word values in the "
"AMDGPU architecture."
msgstr ""

#: ../../../AMDGPUUsage.rst:1040 ../../../AMDGPUUsage.rst:1081
#: ../../../AMDGPUUsage.rst:1084 ../../../AMDGPUUsage.rst:1093
msgid "``word64``"
msgstr ""

#: ../../../AMDGPUUsage.rst:1038
msgid ""
"This specifies a 64-bit field occupying 8 bytes with arbitrary byte "
"alignment. These values use the same byte order as other word values in the "
"AMDGPU architecture."
msgstr ""

#: ../../../AMDGPUUsage.rst:1042
msgid "Following notations are used for specifying relocation calculations:"
msgstr ""

#: ../../../AMDGPUUsage.rst:1045
msgid "**A**"
msgstr ""

#: ../../../AMDGPUUsage.rst:1045
msgid ""
"Represents the addend used to compute the value of the relocatable field."
msgstr ""

#: ../../../AMDGPUUsage.rst:1049
msgid "**G**"
msgstr ""

#: ../../../AMDGPUUsage.rst:1048
msgid ""
"Represents the offset into the global offset table at which the relocation "
"entry's symbol will reside during execution."
msgstr ""

#: ../../../AMDGPUUsage.rst:1052
msgid "**GOT**"
msgstr ""

#: ../../../AMDGPUUsage.rst:1052
msgid "Represents the address of the global offset table."
msgstr ""

#: ../../../AMDGPUUsage.rst:1056
msgid "**P**"
msgstr ""

#: ../../../AMDGPUUsage.rst:1055
msgid ""
"Represents the place (section offset for ``et_rel`` or address for "
"``et_dyn``) of the storage unit being relocated (computed using "
"``r_offset``)."
msgstr ""

#: ../../../AMDGPUUsage.rst:1061
msgid "**S**"
msgstr ""

#: ../../../AMDGPUUsage.rst:1059
msgid ""
"Represents the value of the symbol whose index resides in the relocation "
"entry. Relocations not using this must specify a symbol index of "
"``STN_UNDEF``."
msgstr ""

#: ../../../AMDGPUUsage.rst:1066
msgid "**B**"
msgstr ""

#: ../../../AMDGPUUsage.rst:1064
msgid ""
"Represents the base address of a loaded executable or shared object which is "
"the difference between the ELF address and the actual load address. "
"Relocations using this are only valid in executable or shared objects."
msgstr ""

#: ../../../AMDGPUUsage.rst:1068
msgid "The following relocation types are supported:"
msgstr ""

#: ../../../AMDGPUUsage.rst:1070
msgid "AMDGPU ELF Relocation Records"
msgstr ""

#: ../../../AMDGPUUsage.rst:1074
msgid "Relocation Type"
msgstr ""

#: ../../../AMDGPUUsage.rst:1074
msgid "Kind"
msgstr ""

#: ../../../AMDGPUUsage.rst:1074
msgid "Calculation"
msgstr ""

#: ../../../AMDGPUUsage.rst:1076
msgid "``R_AMDGPU_NONE``"
msgstr ""

#: ../../../AMDGPUUsage.rst:1077
msgid "``R_AMDGPU_ABS32_LO``"
msgstr ""

#: ../../../AMDGPUUsage.rst:1077 ../../../AMDGPUUsage.rst:1079
#: ../../../AMDGPUUsage.rst:1081 ../../../AMDGPUUsage.rst:1085
msgid "Static, Dynamic"
msgstr ""

#: ../../../AMDGPUUsage.rst:1077
msgid "(S + A) & 0xFFFFFFFF"
msgstr ""

#: ../../../AMDGPUUsage.rst:1079
msgid "``R_AMDGPU_ABS32_HI``"
msgstr ""

#: ../../../AMDGPUUsage.rst:1079
msgid "(S + A) >> 32"
msgstr ""

#: ../../../AMDGPUUsage.rst:1081
msgid "``R_AMDGPU_ABS64``"
msgstr ""

#: ../../../AMDGPUUsage.rst:1081 ../../../AMDGPUUsage.rst:1085
msgid "S + A"
msgstr ""

#: ../../../AMDGPUUsage.rst:1083
msgid "``R_AMDGPU_REL32``"
msgstr ""

#: ../../../AMDGPUUsage.rst:1083 ../../../AMDGPUUsage.rst:1084
#: ../../../AMDGPUUsage.rst:1087 ../../../AMDGPUUsage.rst:1088
#: ../../../AMDGPUUsage.rst:1089 ../../../AMDGPUUsage.rst:1090
#: ../../../AMDGPUUsage.rst:1091
msgid "Static"
msgstr ""

#: ../../../AMDGPUUsage.rst:1083 ../../../AMDGPUUsage.rst:1084
msgid "S + A - P"
msgstr ""

#: ../../../AMDGPUUsage.rst:1084
msgid "``R_AMDGPU_REL64``"
msgstr ""

#: ../../../AMDGPUUsage.rst:1085
msgid "``R_AMDGPU_ABS32``"
msgstr ""

#: ../../../AMDGPUUsage.rst:1087
msgid "``R_AMDGPU_GOTPCREL``"
msgstr ""

#: ../../../AMDGPUUsage.rst:1087
msgid "G + GOT + A - P"
msgstr ""

#: ../../../AMDGPUUsage.rst:1088
msgid "``R_AMDGPU_GOTPCREL32_LO``"
msgstr ""

#: ../../../AMDGPUUsage.rst:1088 ../../../AMDGPUUsage.rst:1363
#: ../../../AMDGPUUsage.rst:1364 ../../../AMDGPUUsage.rst:3408
#: ../../../AMDGPUUsage.rst:7002 ../../../AMDGPUUsage.rst:7003
#: ../../../AMDGPUUsage.rst:7004 ../../../AMDGPUUsage.rst:7005
#: ../../../AMDGPUUsage.rst:7006 ../../../AMDGPUUsage.rst:7008
#: ../../../AMDGPUUsage.rst:7010
msgid "8"
msgstr ""

#: ../../../AMDGPUUsage.rst:1088
msgid "(G + GOT + A - P) & 0xFFFFFFFF"
msgstr ""

#: ../../../AMDGPUUsage.rst:1089
msgid "``R_AMDGPU_GOTPCREL32_HI``"
msgstr ""

#: ../../../AMDGPUUsage.rst:1089 ../../../AMDGPUUsage.rst:3416
msgid "9"
msgstr ""

#: ../../../AMDGPUUsage.rst:1089
msgid "(G + GOT + A - P) >> 32"
msgstr ""

#: ../../../AMDGPUUsage.rst:1090
msgid "``R_AMDGPU_REL32_LO``"
msgstr ""

#: ../../../AMDGPUUsage.rst:1090
msgid "(S + A - P) & 0xFFFFFFFF"
msgstr ""

#: ../../../AMDGPUUsage.rst:1091
msgid "``R_AMDGPU_REL32_HI``"
msgstr ""

#: ../../../AMDGPUUsage.rst:1091
msgid "(S + A - P) >> 32"
msgstr ""

#: ../../../AMDGPUUsage.rst:1092 ../../../AMDGPUUsage.rst:6871
msgid "12"
msgstr ""

#: ../../../AMDGPUUsage.rst:1093
msgid "``R_AMDGPU_RELATIVE64``"
msgstr ""

#: ../../../AMDGPUUsage.rst:1093
msgid "Dynamic"
msgstr ""

#: ../../../AMDGPUUsage.rst:1093 ../../../AMDGPUUsage.rst:3439
msgid "13"
msgstr ""

#: ../../../AMDGPUUsage.rst:1093
msgid "B + A"
msgstr ""

#: ../../../AMDGPUUsage.rst:1096
msgid ""
"``R_AMDGPU_ABS32_LO`` and ``R_AMDGPU_ABS32_HI`` are only supported by the "
"``mesa3d`` OS, which does not support ``R_AMDGPU_ABS64``."
msgstr ""

#: ../../../AMDGPUUsage.rst:1099
msgid ""
"There is no current OS loader support for 32-bit programs and so "
"``R_AMDGPU_ABS32`` is not used."
msgstr ""

#: ../../../AMDGPUUsage.rst:1105
msgid "Loaded Code Object Path Uniform Resource Identifier (URI)"
msgstr ""

#: ../../../AMDGPUUsage.rst:1107
msgid ""
"The AMD GPU code object loader represents the path of the ELF shared object "
"from which the code object was loaded as a textual Unifom Resource "
"Identifier (URI). Note that the code object is the in memory loaded "
"relocated form of the ELF shared object.  Multiple code objects may be "
"loaded at different memory addresses in the same process from the same ELF "
"shared object."
msgstr ""

#: ../../../AMDGPUUsage.rst:1113
msgid ""
"The loaded code object path URI syntax is defined by the following BNF "
"syntax:"
msgstr ""

#: ../../../AMDGPUUsage.rst:1127
msgid "**number**"
msgstr ""

#: ../../../AMDGPUUsage.rst:1126
msgid ""
"Is a C integral literal where hexadecimal values are prefixed by \"0x\" or "
"\"0X\", and octal values by \"0\"."
msgstr ""

#: ../../../AMDGPUUsage.rst:1133
msgid "**file_path**"
msgstr ""

#: ../../../AMDGPUUsage.rst:1130
msgid ""
"Is the file's path specified as a URI encoded UTF-8 string. In URI encoding, "
"every character that is not in the regular expression ``[a-zA-Z0-9/_.~-]`` "
"is encoded as two uppercase hexidecimal digits proceeded by \"%\".  "
"Directories in the path are separated by \"/\"."
msgstr ""

#: ../../../AMDGPUUsage.rst:1138
msgid "**offset**"
msgstr ""

#: ../../../AMDGPUUsage.rst:1136
msgid ""
"Is a 0-based byte offset to the start of the code object.  For a file URI, "
"it is from the start of the file specified by the ``file_path``, and if "
"omitted defaults to 0. For a memory URI, it is the memory address and is "
"required."
msgstr ""

#: ../../../AMDGPUUsage.rst:1142
msgid "**size**"
msgstr ""

#: ../../../AMDGPUUsage.rst:1141
msgid ""
"Is the number of bytes in the code object.  For a file URI, if omitted it "
"defaults to the size of the file.  It is required for a memory URI."
msgstr ""

#: ../../../AMDGPUUsage.rst:1146
msgid "**process_id**"
msgstr ""

#: ../../../AMDGPUUsage.rst:1145
msgid ""
"Is the identity of the process owning the memory.  For Linux it is the C "
"unsigned integral decimal literal for the process ID (PID)."
msgstr ""

#: ../../../AMDGPUUsage.rst:1159
msgid "DWARF Debug Information"
msgstr ""

#: ../../../AMDGPUUsage.rst:1163
msgid ""
"This section describes a **provisional proposal** for AMDGPU DWARF [DWARF]_ "
"that is not currently fully implemented and is subject to change."
msgstr ""

#: ../../../AMDGPUUsage.rst:1166
msgid ""
"AMDGPU generates DWARF [DWARF]_ debugging information ELF sections (see :ref:"
"`amdgpu-elf-code-object`) which contain information that maps the code "
"object executable code and data to the source language constructs. It can be "
"used by tools such as debuggers and profilers. It uses features defined in :"
"doc:`AMDGPUDwarfProposalForHeterogeneousDebugging` that are made available "
"in DWARF Version 4 and DWARF Version 5 as an LLVM vendor extension."
msgstr ""

#: ../../../AMDGPUUsage.rst:1173
msgid ""
"This section defines the AMDGPU target architecture specific DWARF mappings."
msgstr ""

#: ../../../AMDGPUUsage.rst:1178
msgid "Register Identifier"
msgstr ""

#: ../../../AMDGPUUsage.rst:1180
msgid ""
"This section defines the AMDGPU target architecture register numbers used in "
"DWARF operation expressions (see DWARF Version 5 section 2.5 and :ref:"
"`amdgpu-dwarf-operation-expressions`) and Call Frame Information "
"instructions (see DWARF Version 5 section 6.4 and :ref:`amdgpu-dwarf-call-"
"frame-information`)."
msgstr ""

#: ../../../AMDGPUUsage.rst:1186
msgid ""
"A single code object can contain code for kernels that have different "
"wavefront sizes. The vector registers and some scalar registers are based on "
"the wavefront size. AMDGPU defines distinct DWARF registers for each "
"wavefront size. This simplifies the consumer of the DWARF so that each "
"register has a fixed size, rather than being dynamic according to the "
"wavefront size mode. Similarly, distinct DWARF registers are defined for "
"those registers that vary in size according to the process address size. "
"This allows a consumer to treat a specific AMDGPU processor as a single "
"architecture regardless of how it is configured at run time. The compiler "
"explicitly specifies the DWARF registers that match the mode in which the "
"code it is generating will be executed."
msgstr ""

#: ../../../AMDGPUUsage.rst:1197
msgid ""
"DWARF registers are encoded as numbers, which are mapped to architecture "
"registers. The mapping for AMDGPU is defined in :ref:`amdgpu-dwarf-register-"
"mapping-table`. All AMDGPU targets use the same mapping."
msgstr ""

#: ../../../AMDGPUUsage.rst:1202
msgid "AMDGPU DWARF Register Mapping"
msgstr ""

#: ../../../AMDGPUUsage.rst:1206
msgid "DWARF Register"
msgstr ""

#: ../../../AMDGPUUsage.rst:1206
msgid "AMDGPU Register"
msgstr ""

#: ../../../AMDGPUUsage.rst:1206 ../../../AMDGPUUsage.rst:1356
msgid "Bit Size"
msgstr ""

#: ../../../AMDGPUUsage.rst:1208
msgid "PC_32"
msgstr ""

#: ../../../AMDGPUUsage.rst:1208
msgid ""
"Program Counter (PC) when executing in a 32-bit process address space. Used "
"in the CFI to describe the PC of the calling frame."
msgstr ""

#: ../../../AMDGPUUsage.rst:1213
msgid "EXEC_MASK_32"
msgstr ""

#: ../../../AMDGPUUsage.rst:1213
msgid "Execution Mask Register when executing in wavefront 32 mode."
msgstr ""

#: ../../../AMDGPUUsage.rst:1215
msgid "2-15"
msgstr ""

#: ../../../AMDGPUUsage.rst:1215 ../../../AMDGPUUsage.rst:1224
#: ../../../AMDGPUUsage.rst:1228 ../../../AMDGPUUsage.rst:1231
#: ../../../AMDGPUUsage.rst:1236 ../../../AMDGPUUsage.rst:1242
#: ../../../AMDGPUUsage.rst:1245 ../../../AMDGPUUsage.rst:1247
#: ../../../AMDGPUUsage.rst:1252 ../../../AMDGPUUsage.rst:1258
#: ../../../AMDGPUUsage.rst:1264 ../../../AMDGPUUsage.rst:1270
#: ../../../AMDGPUUsage.rst:1367 ../../../AMDGPUUsage.rst:1370
msgid "*Reserved*"
msgstr ""

#: ../../../AMDGPUUsage.rst:1215 ../../../AMDGPUUsage.rst:1224
msgid "*Reserved for highly accessed registers using DWARF shortcut.*"
msgstr ""

#: ../../../AMDGPUUsage.rst:1217
msgid "16"
msgstr ""

#: ../../../AMDGPUUsage.rst:1217
msgid "PC_64"
msgstr ""

#: ../../../AMDGPUUsage.rst:1217
msgid ""
"Program Counter (PC) when executing in a 64-bit process address space. Used "
"in the CFI to describe the PC of the calling frame."
msgstr ""

#: ../../../AMDGPUUsage.rst:1222
msgid "17"
msgstr ""

#: ../../../AMDGPUUsage.rst:1222
msgid "EXEC_MASK_64"
msgstr ""

#: ../../../AMDGPUUsage.rst:1222
msgid "Execution Mask Register when executing in wavefront 64 mode."
msgstr ""

#: ../../../AMDGPUUsage.rst:1224
msgid "18-31"
msgstr ""

#: ../../../AMDGPUUsage.rst:1226
msgid "32-95"
msgstr ""

#: ../../../AMDGPUUsage.rst:1226
msgid "SGPR0-SGPR63"
msgstr ""

#: ../../../AMDGPUUsage.rst:1226 ../../../AMDGPUUsage.rst:1246
msgid "Scalar General Purpose Registers."
msgstr ""

#: ../../../AMDGPUUsage.rst:1228
msgid "96-127"
msgstr ""

#: ../../../AMDGPUUsage.rst:1228
msgid "*Reserved for frequently accessed registers using DWARF 1-byte ULEB.*"
msgstr ""

#: ../../../AMDGPUUsage.rst:1230
msgid "128"
msgstr ""

#: ../../../AMDGPUUsage.rst:1230
msgid "SCC"
msgstr ""

#: ../../../AMDGPUUsage.rst:1230
msgid "Scalar Condition Code Register."
msgstr ""

#: ../../../AMDGPUUsage.rst:1231
msgid "129-511"
msgstr ""

#: ../../../AMDGPUUsage.rst:1231
msgid "*Reserved for future Scalar Architectural Registers.*"
msgstr ""

#: ../../../AMDGPUUsage.rst:1233 ../../../AMDGPUUsage.rst:3081
msgid "512"
msgstr ""

#: ../../../AMDGPUUsage.rst:1233
msgid "VCC_32"
msgstr ""

#: ../../../AMDGPUUsage.rst:1233
msgid "Vector Condition Code Register when executing in wavefront 32 mode."
msgstr ""

#: ../../../AMDGPUUsage.rst:1236
msgid "513-1023"
msgstr ""

#: ../../../AMDGPUUsage.rst:1236
msgid ""
"*Reserved for future Vector Architectural Registers when executing in "
"wavefront 32 mode.*"
msgstr ""

#: ../../../AMDGPUUsage.rst:1239
msgid "768"
msgstr ""

#: ../../../AMDGPUUsage.rst:1239
msgid "VCC_64"
msgstr ""

#: ../../../AMDGPUUsage.rst:1239
msgid "Vector Condition Code Register when executing in wavefront 64 mode."
msgstr ""

#: ../../../AMDGPUUsage.rst:1242
msgid "769-1023"
msgstr ""

#: ../../../AMDGPUUsage.rst:1242
msgid ""
"*Reserved for future Vector Architectural Registers when executing in "
"wavefront 64 mode.*"
msgstr ""

#: ../../../AMDGPUUsage.rst:1245
msgid "1024-1087"
msgstr ""

#: ../../../AMDGPUUsage.rst:1245
msgid "*Reserved for padding.*"
msgstr ""

#: ../../../AMDGPUUsage.rst:1246
msgid "1088-1129"
msgstr ""

#: ../../../AMDGPUUsage.rst:1246
msgid "SGPR64-SGPR105"
msgstr ""

#: ../../../AMDGPUUsage.rst:1247
msgid "1130-1535"
msgstr ""

#: ../../../AMDGPUUsage.rst:1247
msgid "*Reserved for future Scalar General Purpose Registers.*"
msgstr ""

#: ../../../AMDGPUUsage.rst:1249
msgid "1536-1791"
msgstr ""

#: ../../../AMDGPUUsage.rst:1249 ../../../AMDGPUUsage.rst:1261
msgid "VGPR0-VGPR255"
msgstr ""

#: ../../../AMDGPUUsage.rst:1249 ../../../AMDGPUUsage.rst:1255
msgid "32*32"
msgstr ""

#: ../../../AMDGPUUsage.rst:1249
msgid "Vector General Purpose Registers when executing in wavefront 32 mode."
msgstr ""

#: ../../../AMDGPUUsage.rst:1252
msgid "1792-2047"
msgstr ""

#: ../../../AMDGPUUsage.rst:1252
msgid ""
"*Reserved for future Vector General Purpose Registers when executing in "
"wavefront 32 mode.*"
msgstr ""

#: ../../../AMDGPUUsage.rst:1255
msgid "2048-2303"
msgstr ""

#: ../../../AMDGPUUsage.rst:1255 ../../../AMDGPUUsage.rst:1267
msgid "AGPR0-AGPR255"
msgstr ""

#: ../../../AMDGPUUsage.rst:1255
msgid "Vector Accumulation Registers when executing in wavefront 32 mode."
msgstr ""

#: ../../../AMDGPUUsage.rst:1258
msgid "2304-2559"
msgstr ""

#: ../../../AMDGPUUsage.rst:1258
msgid ""
"*Reserved for future Vector Accumulation Registers when executing in "
"wavefront 32 mode.*"
msgstr ""

#: ../../../AMDGPUUsage.rst:1261
msgid "2560-2815"
msgstr ""

#: ../../../AMDGPUUsage.rst:1261 ../../../AMDGPUUsage.rst:1267
msgid "64*32"
msgstr ""

#: ../../../AMDGPUUsage.rst:1261
msgid "Vector General Purpose Registers when executing in wavefront 64 mode."
msgstr ""

#: ../../../AMDGPUUsage.rst:1264
msgid "2816-3071"
msgstr ""

#: ../../../AMDGPUUsage.rst:1264
msgid ""
"*Reserved for future Vector General Purpose Registers when executing in "
"wavefront 64 mode.*"
msgstr ""

#: ../../../AMDGPUUsage.rst:1267
msgid "3072-3327"
msgstr ""

#: ../../../AMDGPUUsage.rst:1267
msgid "Vector Accumulation Registers when executing in wavefront 64 mode."
msgstr ""

#: ../../../AMDGPUUsage.rst:1270
msgid "3328-3583"
msgstr ""

#: ../../../AMDGPUUsage.rst:1270
msgid ""
"*Reserved for future Vector Accumulation Registers when executing in "
"wavefront 64 mode.*"
msgstr ""

#: ../../../AMDGPUUsage.rst:1275
msgid ""
"The vector registers are represented as the full size for the wavefront. "
"They are organized as consecutive dwords (32-bits), one per lane, with the "
"dword at the least significant bit position corresponding to lane 0 and so "
"forth. DWARF location expressions involving the ``DW_OP_LLVM_offset`` and "
"``DW_OP_LLVM_push_lane`` operations are used to select the part of the "
"vector register corresponding to the lane that is executing the current "
"thread of execution in languages that are implemented using a SIMD or SIMT "
"execution model."
msgstr ""

#: ../../../AMDGPUUsage.rst:1284
msgid ""
"If the wavefront size is 32 lanes then the wavefront 32 mode register "
"definitions are used. If the wavefront size is 64 lanes then the wavefront "
"64 mode register definitions are used. Some AMDGPU targets support executing "
"in both wavefront 32 and wavefront 64 mode. The register definitions "
"corresponding to the wavefront mode of the generated code will be used."
msgstr ""

#: ../../../AMDGPUUsage.rst:1290
msgid ""
"If code is generated to execute in a 32-bit process address space, then the "
"32-bit process address space register definitions are used. If code is "
"generated to execute in a 64-bit process address space, then the 64-bit "
"process address space register definitions are used. The ``amdgcn`` target "
"only supports the 64-bit process address space."
msgstr ""

#: ../../../AMDGPUUsage.rst:1299
msgid "Address Class Identifier"
msgstr ""

#: ../../../AMDGPUUsage.rst:1301
msgid ""
"The DWARF address class represents the source language memory space. See "
"DWARF Version 5 section 2.12 which is updated by the propoal in :ref:`amdgpu-"
"dwarf-segment_addresses`."
msgstr ""

#: ../../../AMDGPUUsage.rst:1305
msgid ""
"The DWARF address class mapping used for AMDGPU is defined in :ref:`amdgpu-"
"dwarf-address-class-mapping-table`."
msgstr ""

#: ../../../AMDGPUUsage.rst:1308
msgid "AMDGPU DWARF Address Class Mapping"
msgstr ""

#: ../../../AMDGPUUsage.rst:1312 ../../../AMDGPUUsage.rst:1354
msgid "DWARF"
msgstr ""

#: ../../../AMDGPUUsage.rst:1312 ../../../AMDGPUUsage.rst:1354
msgid "AMDGPU"
msgstr ""

#: ../../../AMDGPUUsage.rst:1314
msgid "Address Class Name"
msgstr ""

#: ../../../AMDGPUUsage.rst:1314 ../../../AMDGPUUsage.rst:1356
msgid "Address Space"
msgstr ""

#: ../../../AMDGPUUsage.rst:1316
msgid "``DW_ADDR_none``"
msgstr ""

#: ../../../AMDGPUUsage.rst:1316
msgid "0x0000"
msgstr ""

#: ../../../AMDGPUUsage.rst:1316 ../../../AMDGPUUsage.rst:1364
msgid "Generic (Flat)"
msgstr ""

#: ../../../AMDGPUUsage.rst:1317
msgid "``DW_ADDR_LLVM_global``"
msgstr ""

#: ../../../AMDGPUUsage.rst:1317
msgid "0x0001"
msgstr ""

#: ../../../AMDGPUUsage.rst:1318
msgid "``DW_ADDR_LLVM_constant``"
msgstr ""

#: ../../../AMDGPUUsage.rst:1318
msgid "0x0002"
msgstr ""

#: ../../../AMDGPUUsage.rst:1319
msgid "``DW_ADDR_LLVM_group``"
msgstr ""

#: ../../../AMDGPUUsage.rst:1319
msgid "0x0003"
msgstr ""

#: ../../../AMDGPUUsage.rst:1319 ../../../AMDGPUUsage.rst:1366
msgid "Local (group/LDS)"
msgstr ""

#: ../../../AMDGPUUsage.rst:1320
msgid "``DW_ADDR_LLVM_private``"
msgstr ""

#: ../../../AMDGPUUsage.rst:1320
msgid "0x0004"
msgstr ""

#: ../../../AMDGPUUsage.rst:1320 ../../../AMDGPUUsage.rst:1368
#: ../../../AMDGPUUsage.rst:1369 ../../../AMDGPUUsage.rst:1372
msgid "Private (Scratch)"
msgstr ""

#: ../../../AMDGPUUsage.rst:1321
msgid "``DW_ADDR_AMDGPU_region``"
msgstr ""

#: ../../../AMDGPUUsage.rst:1321
msgid "0x8000"
msgstr ""

#: ../../../AMDGPUUsage.rst:1321 ../../../AMDGPUUsage.rst:1365
msgid "Region (GDS)"
msgstr ""

#: ../../../AMDGPUUsage.rst:1324
msgid ""
"The DWARF address class values defined in the proposal at :ref:`amdgpu-dwarf-"
"segment_addresses` are used."
msgstr ""

#: ../../../AMDGPUUsage.rst:1327
msgid ""
"In addition, ``DW_ADDR_AMDGPU_region`` is encoded as a vendor extension. "
"This is available for use for the AMD extension for access to the hardware "
"GDS memory which is scratchpad memory allocated per device."
msgstr ""

#: ../../../AMDGPUUsage.rst:1331
msgid ""
"For AMDGPU if no ``DW_AT_address_class`` attribute is present, then the "
"default address class of ``DW_ADDR_none`` is used."
msgstr ""

#: ../../../AMDGPUUsage.rst:1334
msgid ""
"See :ref:`amdgpu-dwarf-address-space-identifier` for information on the "
"AMDGPU mapping of DWARF address classes to DWARF address spaces, including "
"address size and NULL value."
msgstr ""

#: ../../../AMDGPUUsage.rst:1341
msgid "Address Space Identifier"
msgstr ""

#: ../../../AMDGPUUsage.rst:1343
msgid ""
"DWARF address spaces correspond to target architecture specific linear "
"addressable memory areas. See DWARF Version 5 section 2.12 and :ref:`amdgpu-"
"dwarf-segment_addresses`."
msgstr ""

#: ../../../AMDGPUUsage.rst:1347
msgid ""
"The DWARF address space mapping used for AMDGPU is defined in :ref:`amdgpu-"
"dwarf-address-space-mapping-table`."
msgstr ""

#: ../../../AMDGPUUsage.rst:1350
msgid "AMDGPU DWARF Address Space Mapping"
msgstr ""

#: ../../../AMDGPUUsage.rst:1354
msgid "Notes"
msgstr ""

#: ../../../AMDGPUUsage.rst:1356
msgid "Address"
msgstr ""

#: ../../../AMDGPUUsage.rst:1358
msgid "64-bit process address space"
msgstr ""

#: ../../../AMDGPUUsage.rst:1358
msgid "32-bit process address space"
msgstr ""

#: ../../../AMDGPUUsage.rst:1363
msgid "``DW_ASPACE_none``"
msgstr ""

#: ../../../AMDGPUUsage.rst:1363
msgid "0x00"
msgstr ""

#: ../../../AMDGPUUsage.rst:1363
msgid "*default address space*"
msgstr ""

#: ../../../AMDGPUUsage.rst:1364
msgid "``DW_ASPACE_AMDGPU_generic``"
msgstr ""

#: ../../../AMDGPUUsage.rst:1364
msgid "0x01"
msgstr ""

#: ../../../AMDGPUUsage.rst:1365
msgid "``DW_ASPACE_AMDGPU_region``"
msgstr ""

#: ../../../AMDGPUUsage.rst:1365
msgid "0x02"
msgstr ""

#: ../../../AMDGPUUsage.rst:1366
msgid "``DW_ASPACE_AMDGPU_local``"
msgstr ""

#: ../../../AMDGPUUsage.rst:1366
msgid "0x03"
msgstr ""

#: ../../../AMDGPUUsage.rst:1367
msgid "0x04"
msgstr ""

#: ../../../AMDGPUUsage.rst:1368
msgid "``DW_ASPACE_AMDGPU_private_lane``"
msgstr ""

#: ../../../AMDGPUUsage.rst:1368
msgid "0x05"
msgstr ""

#: ../../../AMDGPUUsage.rst:1368
msgid "*focused lane*"
msgstr ""

#: ../../../AMDGPUUsage.rst:1369
msgid "``DW_ASPACE_AMDGPU_private_wave``"
msgstr ""

#: ../../../AMDGPUUsage.rst:1369
msgid "0x06"
msgstr ""

#: ../../../AMDGPUUsage.rst:1369
msgid "*unswizzled wavefront*"
msgstr ""

#: ../../../AMDGPUUsage.rst:1370
msgid "0x07- 0x1F"
msgstr ""

#: ../../../AMDGPUUsage.rst:1372
msgid "``DW_ASPACE_AMDGPU_private_lane<0-63>``"
msgstr ""

#: ../../../AMDGPUUsage.rst:1372
msgid "0x20- 0x5F"
msgstr ""

#: ../../../AMDGPUUsage.rst:1372
msgid "*specific lane*"
msgstr ""

#: ../../../AMDGPUUsage.rst:1376
msgid ""
"See :ref:`amdgpu-address-spaces` for information on the AMDGPU address "
"spaces including address size and NULL value."
msgstr ""

#: ../../../AMDGPUUsage.rst:1379
msgid ""
"The ``DW_ASPACE_none`` address space is the default target architecture "
"address space used in DWARF operations that do not specify an address space. "
"It therefore has to map to the global address space so that the "
"``DW_OP_addr*`` and related operations can refer to addresses in the program "
"code."
msgstr ""

#: ../../../AMDGPUUsage.rst:1384
msgid ""
"The ``DW_ASPACE_AMDGPU_generic`` address space allows location expressions "
"to specify the flat address space. If the address corresponds to an address "
"in the local address space, then it corresponds to the wavefront that is "
"executing the focused thread of execution. If the address corresponds to an "
"address in the private address space, then it corresponds to the lane that "
"is executing the focused thread of execution for languages that are "
"implemented using a SIMD or SIMT execution model."
msgstr ""

#: ../../../AMDGPUUsage.rst:1394
msgid ""
"CUDA-like languages such as HIP that do not have address spaces in the "
"language type system, but do allow variables to be allocated in different "
"address spaces, need to explicitly specify the ``DW_ASPACE_AMDGPU_generic`` "
"address space in the DWARF expression operations as the default address "
"space is the global address space."
msgstr ""

#: ../../../AMDGPUUsage.rst:1400
msgid ""
"The ``DW_ASPACE_AMDGPU_local`` address space allows location expressions to "
"specify the local address space corresponding to the wavefront that is "
"executing the focused thread of execution."
msgstr ""

#: ../../../AMDGPUUsage.rst:1404
msgid ""
"The ``DW_ASPACE_AMDGPU_private_lane`` address space allows location "
"expressions to specify the private address space corresponding to the lane "
"that is executing the focused thread of execution for languages that are "
"implemented using a SIMD or SIMT execution model."
msgstr ""

#: ../../../AMDGPUUsage.rst:1409
msgid ""
"The ``DW_ASPACE_AMDGPU_private_wave`` address space allows location "
"expressions to specify the unswizzled private address space corresponding to "
"the wavefront that is executing the focused thread of execution. The "
"wavefront view of private memory is the per wavefront unswizzled backing "
"memory layout defined in :ref:`amdgpu-address-spaces`, such that address 0 "
"corresponds to the first location for the backing memory of the wavefront "
"(namely the address is not offset by ``wavefront-scratch-base``). The "
"following formula can be used to convert from a "
"``DW_ASPACE_AMDGPU_private_lane`` address to a "
"``DW_ASPACE_AMDGPU_private_wave`` address:"
msgstr ""

#: ../../../AMDGPUUsage.rst:1425
msgid ""
"If the ``DW_ASPACE_AMDGPU_private_lane`` address is dword aligned, and the "
"start of the dwords for each lane starting with lane 0 is required, then "
"this simplifies to:"
msgstr ""

#: ../../../AMDGPUUsage.rst:1434
msgid ""
"A compiler can use the ``DW_ASPACE_AMDGPU_private_wave`` address space to "
"read a complete spilled vector register back into a complete vector register "
"in the CFI. The frame pointer can be a private lane address which is dword "
"aligned, which can be shifted to multiply by the wavefront size, and then "
"used to form a private wavefront address that gives a location for a "
"contiguous set of dwords, one per lane, where the vector register dwords are "
"spilled. The compiler knows the wavefront size since it generates the code. "
"Note that the type of the address may have to be converted as the size of a "
"``DW_ASPACE_AMDGPU_private_lane`` address may be smaller than the size of a "
"``DW_ASPACE_AMDGPU_private_wave`` address."
msgstr ""

#: ../../../AMDGPUUsage.rst:1445
msgid ""
"The ``DW_ASPACE_AMDGPU_private_lane<N>`` address space allows location "
"expressions to specify the private address space corresponding to a specific "
"lane N. For example, this can be used when the compiler spills scalar "
"registers to scratch memory, with each scalar register being saved to a "
"different lane's scratch memory."
msgstr ""

#: ../../../AMDGPUUsage.rst:1454
msgid "Lane identifier"
msgstr ""

#: ../../../AMDGPUUsage.rst:1456
msgid ""
"DWARF lane identifies specify a target architecture lane position for "
"hardware that executes in a SIMD or SIMT manner, and on which a source "
"language maps its threads of execution onto those lanes. The DWARF lane "
"identifier is pushed by the ``DW_OP_LLVM_push_lane`` DWARF expression "
"operation. See DWARF Version 5 section 2.5 which is updated by the proposal "
"in :ref:`amdgpu-dwarf-operation-expressions`."
msgstr ""

#: ../../../AMDGPUUsage.rst:1463
msgid ""
"For AMDGPU, the lane identifier corresponds to the hardware lane ID of a "
"wavefront. It is numbered from 0 to the wavefront size minus 1."
msgstr ""

#: ../../../AMDGPUUsage.rst:1467
msgid "Operation Expressions"
msgstr ""

#: ../../../AMDGPUUsage.rst:1469
msgid ""
"DWARF expressions are used to compute program values and the locations of "
"program objects. See DWARF Version 5 section 2.5 and :ref:`amdgpu-dwarf-"
"operation-expressions`."
msgstr ""

#: ../../../AMDGPUUsage.rst:1473
msgid ""
"DWARF location descriptions describe how to access storage which includes "
"memory and registers. When accessing storage on AMDGPU, bytes are ordered "
"with least significant bytes first, and bits are ordered within bytes with "
"least significant bits first."
msgstr ""

#: ../../../AMDGPUUsage.rst:1478
msgid ""
"For AMDGPU CFI expressions, ``DW_OP_LLVM_select_bit_piece`` is used to "
"describe unwinding vector registers that are spilled under the execution "
"mask to memory: the zero-single location description is the vector register, "
"and the one-single location description is the spilled memory location "
"description. The ``DW_OP_LLVM_form_aspace_address`` is used to specify the "
"address space of the memory location description."
msgstr ""

#: ../../../AMDGPUUsage.rst:1485
msgid ""
"In AMDGPU expressions, ``DW_OP_LLVM_select_bit_piece`` is used by the "
"``DW_AT_LLVM_lane_pc`` attribute expression where divergent control flow is "
"controlled by the execution mask. An undefined location description together "
"with ``DW_OP_LLVM_extend`` is used to indicate the lane was not active on "
"entry to the subprogram. See :ref:`amdgpu-dwarf-dw-at-llvm-lane-pc` for an "
"example."
msgstr ""

#: ../../../AMDGPUUsage.rst:1492
msgid "Debugger Information Entry Attributes"
msgstr ""

#: ../../../AMDGPUUsage.rst:1494
msgid ""
"This section describes how certain debugger information entry attributes are "
"used by AMDGPU. See the sections in DWARF Version 5 section 2 which are "
"updated by the proposal in :ref:`amdgpu-dwarf-debugging-information-entry-"
"attributes`."
msgstr ""

#: ../../../AMDGPUUsage.rst:1501
msgid "``DW_AT_LLVM_lane_pc``"
msgstr ""

#: ../../../AMDGPUUsage.rst:1503
msgid ""
"For AMDGPU, the ``DW_AT_LLVM_lane_pc`` attribute is used to specify the "
"program location of the separate lanes of a SIMT thread."
msgstr ""

#: ../../../AMDGPUUsage.rst:1506
msgid ""
"If the lane is an active lane then this will be the same as the current "
"program location."
msgstr ""

#: ../../../AMDGPUUsage.rst:1509
msgid ""
"If the lane is inactive, but was active on entry to the subprogram, then "
"this is the program location in the subprogram at which execution of the "
"lane is conceptual positioned."
msgstr ""

#: ../../../AMDGPUUsage.rst:1513
msgid ""
"If the lane was not active on entry to the subprogram, then this will be the "
"undefined location. A client debugger can check if the lane is part of a "
"valid work-group by checking that the lane is in the range of the associated "
"work-group within the grid, accounting for partial work-groups. If it is "
"not, then the debugger can omit any information for the lane. Otherwise, the "
"debugger may repeatedly unwind the stack and inspect the "
"``DW_AT_LLVM_lane_pc`` of the calling subprogram until it finds a non-"
"undefined location. Conceptually the lane only has the call frames that it "
"has a non-undefined ``DW_AT_LLVM_lane_pc``."
msgstr ""

#: ../../../AMDGPUUsage.rst:1523
msgid ""
"The following example illustrates how the AMDGPU backend can generate a "
"DWARF location list expression for the nested ``IF/THEN/ELSE`` structures of "
"the following subprogram pseudo code for a target with 64 lanes per "
"wavefront."
msgstr ""

#: ../../../AMDGPUUsage.rst:1547
msgid ""
"The AMDGPU backend may generate the following pseudo LLVM MIR to manipulate "
"the execution mask (``EXEC``) to linearize the control flow. The condition "
"is evaluated to make a mask of the lanes for which the condition evaluates "
"to true. First the ``THEN`` region is executed by setting the ``EXEC`` mask "
"to the logical ``AND`` of the current ``EXEC`` mask with the condition mask. "
"Then the ``ELSE`` region is executed by negating the ``EXEC`` mask and "
"logical ``AND`` of the saved ``EXEC`` mask at the start of the region. After "
"the ``IF/THEN/ELSE`` region the ``EXEC`` mask is restored to the value it "
"had at the beginning of the region. This is shown below. Other approaches "
"are possible, but the basic concept is the same."
msgstr ""

#: ../../../AMDGPUUsage.rst:1589
msgid ""
"To create the DWARF location list expression that defines the location "
"description of a vector of lane program locations, the LLVM MIR "
"``DBG_VALUE`` pseudo instruction can be used to annotate the linearized "
"control flow. This can be done by defining an artificial variable for the "
"lane PC. The DWARF location list expression created for it is used as the "
"value of the ``DW_AT_LLVM_lane_pc`` attribute on the subprogram's debugger "
"information entry."
msgstr ""

#: ../../../AMDGPUUsage.rst:1596
msgid ""
"A DWARF procedure is defined for each well nested structured control flow "
"region which provides the conceptual lane program location for a lane if it "
"is not active (namely it is divergent). The DWARF operation expression for "
"each region conceptually inherits the value of the immediately enclosing "
"region and modifies it according to the semantics of the region."
msgstr ""

#: ../../../AMDGPUUsage.rst:1602
msgid ""
"For an ``IF/THEN/ELSE`` region the divergent program location is at the "
"start of the region for the ``THEN`` region since it is executed first. For "
"the ``ELSE`` region the divergent program location is at the end of the ``IF/"
"THEN/ELSE`` region since the ``THEN`` region has completed."
msgstr ""

#: ../../../AMDGPUUsage.rst:1607
msgid ""
"The lane PC artificial variable is assigned at each region transition. It "
"uses the immediately enclosing region's DWARF procedure to compute the "
"program location for each lane assuming they are divergent, and then "
"modifies the result by inserting the current program location for each lane "
"that the ``EXEC`` mask indicates is active."
msgstr ""

#: ../../../AMDGPUUsage.rst:1613
msgid ""
"By having separate DWARF procedures for each region, they can be reused to "
"define the value for any nested region. This reduces the total size of the "
"DWARF operation expressions."
msgstr ""

#: ../../../AMDGPUUsage.rst:1617
msgid "The following provides an example using pseudo LLVM MIR."
msgstr ""

#: ../../../AMDGPUUsage.rst:1749
msgid ""
"The DWARF procedure ``%__active_lane_pc`` is used to update the lane pc "
"elements that are active, with the current program location."
msgstr ""

#: ../../../AMDGPUUsage.rst:1752
msgid ""
"Artificial variables %__lex_1_save_exec and %__lex_1_1_save_exec are created "
"for the execution masks saved on entry to a region. Using the ``DBG_VALUE`` "
"pseudo instruction, location list entries will be created that describe "
"where the artificial variables are allocated at any given program location. "
"The compiler may allocate them to registers or spill them to memory."
msgstr ""

#: ../../../AMDGPUUsage.rst:1758
msgid ""
"The DWARF procedures for each region use the values of the saved execution "
"mask artificial variables to only update the lanes that are active on entry "
"to the region. All other lanes retain the value of the enclosing region "
"where they were last active. If they were not active on entry to the "
"subprogram, then will have the undefined location description."
msgstr ""

#: ../../../AMDGPUUsage.rst:1764
msgid ""
"Other structured control flow regions can be handled similarly. For example, "
"loops would set the divergent program location for the region at the end of "
"the loop. Any lanes active will be in the loop, and any lanes not active "
"must have exited the loop."
msgstr ""

#: ../../../AMDGPUUsage.rst:1769
msgid ""
"An ``IF/THEN/ELSEIF/ELSEIF/...`` region can be treated as a nest of ``IF/"
"THEN/ELSE`` regions."
msgstr ""

#: ../../../AMDGPUUsage.rst:1772
msgid ""
"The DWARF procedures can use the active lane artificial variable described "
"in :ref:`amdgpu-dwarf-amdgpu-dw-at-llvm-active-lane` rather than the actual "
"``EXEC`` mask in order to support whole or quad wavefront mode."
msgstr ""

#: ../../../AMDGPUUsage.rst:1779
msgid "``DW_AT_LLVM_active_lane``"
msgstr ""

#: ../../../AMDGPUUsage.rst:1781
msgid ""
"The ``DW_AT_LLVM_active_lane`` attribute on a subprogram debugger "
"information entry is used to specify the lanes that are conceptually active "
"for a SIMT thread."
msgstr ""

#: ../../../AMDGPUUsage.rst:1785
msgid ""
"The execution mask may be modified to implement whole or quad wavefront mode "
"operations. For example, all lanes may need to temporarily be made active to "
"execute a whole wavefront operation. Such regions would save the ``EXEC`` "
"mask, update it to enable the necessary lanes, perform the operations, and "
"then restore the ``EXEC`` mask from the saved value. While executing the "
"whole wavefront region, the conceptual execution mask is the saved value, "
"not the ``EXEC`` value."
msgstr ""

#: ../../../AMDGPUUsage.rst:1793
msgid ""
"This is handled by defining an artificial variable for the active lane mask. "
"The active lane mask artificial variable would be the actual ``EXEC`` mask "
"for normal regions, and the saved execution mask for regions where the mask "
"is temporarily updated. The location list expression created for this "
"artificial variable is used to define the value of the "
"``DW_AT_LLVM_active_lane`` attribute."
msgstr ""

#: ../../../AMDGPUUsage.rst:1801
msgid "``DW_AT_LLVM_augmentation``"
msgstr ""

#: ../../../AMDGPUUsage.rst:1803
msgid ""
"For AMDGPU, the ``DW_AT_LLVM_augmentation`` attribute of a compilation unit "
"debugger information entry has the following value for the augmentation "
"string:"
msgstr ""

#: ../../../AMDGPUUsage.rst:1810
msgid ""
"The \"vX.Y\" specifies the major X and minor Y version number of the AMDGPU "
"extensions used in the DWARF of the compilation unit. The version number "
"conforms to [SEMVER]_."
msgstr ""

#: ../../../AMDGPUUsage.rst:1815
msgid "Call Frame Information"
msgstr ""

#: ../../../AMDGPUUsage.rst:1817
msgid ""
"DWARF Call Frame Information (CFI) describes how a consumer can virtually "
"*unwind* call frames in a running process or core dump. See DWARF Version 5 "
"section 6.4 and :ref:`amdgpu-dwarf-call-frame-information`."
msgstr ""

#: ../../../AMDGPUUsage.rst:1821
msgid ""
"For AMDGPU, the Common Information Entry (CIE) fields have the following "
"values:"
msgstr ""

#: ../../../AMDGPUUsage.rst:1823
msgid ""
"``augmentation`` string contains the following null-terminated UTF-8 string:"
msgstr ""

#: ../../../AMDGPUUsage.rst:1829
msgid ""
"The ``vX.Y`` specifies the major X and minor Y version number of the AMDGPU "
"extensions used in this CIE or to the FDEs that use it. The version number "
"conforms to [SEMVER]_."
msgstr ""

#: ../../../AMDGPUUsage.rst:1833
msgid ""
"``address_size`` for the ``Global`` address space is defined in :ref:`amdgpu-"
"dwarf-address-space-identifier`."
msgstr ""

#: ../../../AMDGPUUsage.rst:1836
msgid ""
"``segment_selector_size`` is 0 as AMDGPU does not use a segment selector."
msgstr ""

#: ../../../AMDGPUUsage.rst:1838
msgid "``code_alignment_factor`` is 4 bytes."
msgstr ""

#: ../../../AMDGPUUsage.rst:1842 ../../../AMDGPUUsage.rst:1848
msgid "Add to :ref:`amdgpu-processor-table` table."
msgstr ""

#: ../../../AMDGPUUsage.rst:1844
msgid "``data_alignment_factor`` is 4 bytes."
msgstr ""

#: ../../../AMDGPUUsage.rst:1850
msgid ""
"``return_address_register`` is ``PC_32`` for 32-bit processes and ``PC_64`` "
"for 64-bit processes defined in :ref:`amdgpu-dwarf-register-identifier`."
msgstr ""

#: ../../../AMDGPUUsage.rst:1853
msgid ""
"``initial_instructions`` Since a subprogram X with fewer registers can be "
"called from subprogram Y that has more allocated, X will not change any of "
"the extra registers as it cannot access them. Therefore, the default rule "
"for all columns is ``same value``."
msgstr ""

#: ../../../AMDGPUUsage.rst:1858
msgid ""
"For AMDGPU the register number follows the numbering defined in :ref:`amdgpu-"
"dwarf-register-identifier`."
msgstr ""

#: ../../../AMDGPUUsage.rst:1861
msgid ""
"For AMDGPU the instructions are variable size. A consumer can subtract 1 "
"from the return address to get the address of a byte within the call site "
"instructions. See DWARF Version 5 section 6.4.4."
msgstr ""

#: ../../../AMDGPUUsage.rst:1866
msgid "Accelerated Access"
msgstr ""

#: ../../../AMDGPUUsage.rst:1868
msgid "See DWARF Version 5 section 6.1."
msgstr ""

#: ../../../AMDGPUUsage.rst:1871
msgid "Lookup By Name Section Header"
msgstr ""

#: ../../../AMDGPUUsage.rst:1873
msgid ""
"See DWARF Version 5 section 6.1.1.4.1 and :ref:`amdgpu-dwarf-lookup-by-name`."
msgstr ""

#: ../../../AMDGPUUsage.rst:1875
msgid "For AMDGPU the lookup by name section header table:"
msgstr ""

#: ../../../AMDGPUUsage.rst:1877
msgid "``augmentation_string_size`` (uword)"
msgstr ""

#: ../../../AMDGPUUsage.rst:1879
msgid ""
"Set to the length of the ``augmentation_string`` value which is always a "
"multiple of 4."
msgstr ""

#: ../../../AMDGPUUsage.rst:1882
msgid "``augmentation_string`` (sequence of UTF-8 characters)"
msgstr ""

#: ../../../AMDGPUUsage.rst:1884
msgid ""
"Contains the following UTF-8 string null padded to a multiple of 4 bytes:"
msgstr ""

#: ../../../AMDGPUUsage.rst:1890
msgid ""
"The \"vX.Y\" specifies the major X and minor Y version number of the AMDGPU "
"extensions used in the DWARF of this index. The version number conforms to "
"[SEMVER]_."
msgstr ""

#: ../../../AMDGPUUsage.rst:1896
msgid ""
"This is different to the DWARF Version 5 definition that requires the first "
"4 characters to be the vendor ID. But this is consistent with the other "
"augmentation strings and does allow multiple vendor contributions. However, "
"backwards compatibility may be more desirable."
msgstr ""

#: ../../../AMDGPUUsage.rst:1902
msgid "Lookup By Address Section Header"
msgstr ""

#: ../../../AMDGPUUsage.rst:1904
msgid "See DWARF Version 5 section 6.1.2."
msgstr ""

#: ../../../AMDGPUUsage.rst:1906
msgid "For AMDGPU the lookup by address section header table:"
msgstr ""

#: ../../../AMDGPUUsage.rst:1908 ../../../AMDGPUUsage.rst:1938
#: ../../../AMDGPUUsage.rst:2000
msgid "``address_size`` (ubyte)"
msgstr ""

#: ../../../AMDGPUUsage.rst:1910
msgid ""
"Match the address size for the ``Global`` address space defined in :ref:"
"`amdgpu-dwarf-address-space-identifier`."
msgstr ""

#: ../../../AMDGPUUsage.rst:1913 ../../../AMDGPUUsage.rst:1941
msgid "``segment_selector_size`` (ubyte)"
msgstr ""

#: ../../../AMDGPUUsage.rst:1915
msgid ""
"AMDGPU does not use a segment selector so this is 0. The entries in the ``."
"debug_aranges`` do not have a segment selector."
msgstr ""

#: ../../../AMDGPUUsage.rst:1919
msgid "Line Number Information"
msgstr ""

#: ../../../AMDGPUUsage.rst:1921
msgid ""
"See DWARF Version 5 section 6.2 and :ref:`amdgpu-dwarf-line-number-"
"information`."
msgstr ""

#: ../../../AMDGPUUsage.rst:1923
msgid ""
"AMDGPU does not use the ``isa`` state machine registers and always sets it "
"to 0. The instruction set must be obtained from the ELF file header "
"``e_flags`` field in the ``EF_AMDGPU_MACH`` bit position (see :ref:`ELF "
"Header <amdgpu-elf-header>`). See DWARF Version 5 section 6.2.2."
msgstr ""

#: ../../../AMDGPUUsage.rst:1930
msgid ""
"Should the ``isa`` state machine register be used to indicate if the code is "
"in wavefront32 or wavefront64 mode? Or used to specify the architecture ISA?"
msgstr ""

#: ../../../AMDGPUUsage.rst:1933
msgid ""
"For AMDGPU the line number program header fields have the following values "
"(see DWARF Version 5 section 6.2.4):"
msgstr ""

#: ../../../AMDGPUUsage.rst:1937 ../../../AMDGPUUsage.rst:1999
msgid ""
"Matches the address size for the ``Global`` address space defined in :ref:"
"`amdgpu-dwarf-address-space-identifier`."
msgstr ""

#: ../../../AMDGPUUsage.rst:1941
msgid "AMDGPU does not use a segment selector so this is 0."
msgstr ""

#: ../../../AMDGPUUsage.rst:1944
msgid "``minimum_instruction_length`` (ubyte)"
msgstr ""

#: ../../../AMDGPUUsage.rst:1944
msgid "For GFX9-GFX10 this is 4."
msgstr ""

#: ../../../AMDGPUUsage.rst:1947
msgid "``maximum_operations_per_instruction`` (ubyte)"
msgstr ""

#: ../../../AMDGPUUsage.rst:1947
msgid "For GFX9-GFX10 this is 1."
msgstr ""

#: ../../../AMDGPUUsage.rst:1949
msgid ""
"Source text for online-compiled programs (for example, those compiled by the "
"OpenCL language runtime) may be embedded into the DWARF Version 5 line "
"table. See DWARF Version 5 section 6.2.4.1 which is updated by the proposal "
"in :ref:`DW_LNCT_LLVM_source <amdgpu-dwarf-line-number-information-dw-lnct-"
"llvm-source>`."
msgstr ""

#: ../../../AMDGPUUsage.rst:1955
msgid ""
"The Clang option used to control source embedding in AMDGPU is defined in :"
"ref:`amdgpu-clang-debug-options-table`."
msgstr ""

#: ../../../AMDGPUUsage.rst:1958
msgid "AMDGPU Clang Debug Options"
msgstr ""

#: ../../../AMDGPUUsage.rst:1962
msgid "Debug Flag"
msgstr ""

#: ../../../AMDGPUUsage.rst:1964
msgid "-g[no-]embed-source"
msgstr ""

#: ../../../AMDGPUUsage.rst:1964
msgid ""
"Enable/disable embedding source text in DWARF debug sections. Useful for "
"environments where source cannot be written to disk, such as when performing "
"online compilation."
msgstr ""

#: ../../../AMDGPUUsage.rst:1973
msgid "``-gembed-source``"
msgstr ""

#: ../../../AMDGPUUsage.rst:1973
msgid "Enable the embedded source."
msgstr ""

#: ../../../AMDGPUUsage.rst:1976
msgid "``-gno-embed-source``"
msgstr ""

#: ../../../AMDGPUUsage.rst:1976
msgid "Disable the embedded source."
msgstr ""

#: ../../../AMDGPUUsage.rst:1979
msgid "32-Bit and 64-Bit DWARF Formats"
msgstr ""

#: ../../../AMDGPUUsage.rst:1981
msgid ""
"See DWARF Version 5 section 7.4 and :ref:`amdgpu-dwarf-32-bit-and-64-bit-"
"dwarf-formats`."
msgstr ""

#: ../../../AMDGPUUsage.rst:1984
msgid "For AMDGPU:"
msgstr ""

#: ../../../AMDGPUUsage.rst:1986
msgid ""
"For the ``amdgcn`` target architecture only the 64-bit process address space "
"is supported."
msgstr ""

#: ../../../AMDGPUUsage.rst:1989
msgid ""
"The producer can generate either 32-bit or 64-bit DWARF format. LLVM "
"generates the 32-bit DWARF format."
msgstr ""

#: ../../../AMDGPUUsage.rst:1993
msgid "Unit Headers"
msgstr ""

#: ../../../AMDGPUUsage.rst:1995
msgid ""
"For AMDGPU the following values apply for each of the unit headers described "
"in DWARF Version 5 sections 7.5.1.1, 7.5.1.2, and 7.5.1.3:"
msgstr ""

#: ../../../AMDGPUUsage.rst:2005
msgid "Code Conventions"
msgstr ""

#: ../../../AMDGPUUsage.rst:2007
msgid ""
"This section provides code conventions used for each supported target triple "
"OS (see :ref:`amdgpu-target-triples`)."
msgstr ""

#: ../../../AMDGPUUsage.rst:2011
msgid "AMDHSA"
msgstr ""

#: ../../../AMDGPUUsage.rst:2013
msgid ""
"This section provides code conventions used when the target triple OS is "
"``amdhsa`` (see :ref:`amdgpu-target-triples`)."
msgstr ""

#: ../../../AMDGPUUsage.rst:2019
msgid "Code Object Target Identification"
msgstr ""

#: ../../../AMDGPUUsage.rst:2021
msgid ""
"The AMDHSA OS uses the following syntax to specify the code object target as "
"a single string:"
msgstr ""

#: ../../../AMDGPUUsage.rst:2024
msgid ""
"``<Architecture>-<Vendor>-<OS>-<Environment>-<Processor><Target Features>``"
msgstr ""

#: ../../../AMDGPUUsage.rst:2026
msgid "Where:"
msgstr ""

#: ../../../AMDGPUUsage.rst:2028
msgid ""
"``<Architecture>``, ``<Vendor>``, ``<OS>`` and ``<Environment>`` are the "
"same as the *Target Triple* (see :ref:`amdgpu-target-triples`)."
msgstr ""

#: ../../../AMDGPUUsage.rst:2032
msgid ""
"``<Processor>`` is the same as the *Processor* (see :ref:`amdgpu-"
"processors`)."
msgstr ""

#: ../../../AMDGPUUsage.rst:2035
msgid ""
"``<Target Features>`` is a list of the enabled *Target Features* (see :ref:"
"`amdgpu-target-features`), each prefixed by a plus, that apply to "
"*Processor*. The list must be in the same order as listed in the table :ref:"
"`amdgpu-target-feature-table`. Note that *Target Features* must be included "
"in the list if they are enabled even if that is the default for *Processor*."
msgstr ""

#: ../../../AMDGPUUsage.rst:2044
msgid "``\"amdgcn-amd-amdhsa--gfx902+xnack\"``"
msgstr ""

#: ../../../AMDGPUUsage.rst:2049
msgid "Code Object Metadata"
msgstr ""

#: ../../../AMDGPUUsage.rst:2051
msgid ""
"The code object metadata specifies extensible metadata associated with the "
"code objects executed on HSA [HSA]_ compatible runtimes such as AMD's ROCm "
"[AMD-ROCm]_. The encoding and semantics of this metadata depends on the code "
"object version; see :ref:`amdgpu-amdhsa-code-object-metadata-v2` and :ref:"
"`amdgpu-amdhsa-code-object-metadata-v3`."
msgstr ""

#: ../../../AMDGPUUsage.rst:2057
msgid ""
"Code object metadata is specified in a note record (see :ref:`amdgpu-note-"
"records`) and is required when the target triple OS is ``amdhsa`` (see :ref:"
"`amdgpu-target-triples`). It must contain the minimum information necessary "
"to support the ROCM kernel queries. For example, the segment sizes needed in "
"a dispatch packet. In addition, a high-level language runtime may require "
"other information to be included. For example, the AMD OpenCL runtime "
"records kernel argument information."
msgstr ""

#: ../../../AMDGPUUsage.rst:2068
msgid "Code Object V2 Metadata (-mattr=-code-object-v3)"
msgstr ""

#: ../../../AMDGPUUsage.rst:2070
msgid ""
"Code Object V2 is not the default code object version emitted by this "
"version of LLVM. For a description of the metadata generated with the "
"default configuration (Code Object V3) see :ref:`amdgpu-amdhsa-code-object-"
"metadata-v3`."
msgstr ""

#: ../../../AMDGPUUsage.rst:2075
msgid ""
"Code object V2 metadata is specified by the ``NT_AMD_AMDGPU_METADATA`` note "
"record (see :ref:`amdgpu-note-records-v2`)."
msgstr ""

#: ../../../AMDGPUUsage.rst:2078
msgid ""
"The metadata is specified as a YAML formatted string (see [YAML]_ and :doc:"
"`YamlIO`)."
msgstr ""

#: ../../../AMDGPUUsage.rst:2083
msgid ""
"Is the string null terminated? It probably should not if YAML allows it to "
"contain null characters, otherwise it should be."
msgstr ""

#: ../../../AMDGPUUsage.rst:2086
msgid ""
"The metadata is represented as a single YAML document comprised of the "
"mapping defined in table :ref:`amdgpu-amdhsa-code-object-metadata-map-table-"
"v2` and referenced tables."
msgstr ""

#: ../../../AMDGPUUsage.rst:2090
msgid ""
"For boolean values, the string values of ``false`` and ``true`` are used for "
"false and true respectively."
msgstr ""

#: ../../../AMDGPUUsage.rst:2093
msgid ""
"Additional information can be added to the mappings. To avoid conflicts, any "
"non-AMD key names should be prefixed by \"*vendor-name*.\"."
msgstr ""

#: ../../../AMDGPUUsage.rst:2096
msgid "AMDHSA Code Object V2 Metadata Map"
msgstr ""

#: ../../../AMDGPUUsage.rst:2100 ../../../AMDGPUUsage.rst:2144
#: ../../../AMDGPUUsage.rst:2181 ../../../AMDGPUUsage.rst:2222
#: ../../../AMDGPUUsage.rst:2411 ../../../AMDGPUUsage.rst:2511
#: ../../../AMDGPUUsage.rst:2556 ../../../AMDGPUUsage.rst:2700
msgid "String Key"
msgstr ""

#: ../../../AMDGPUUsage.rst:2100 ../../../AMDGPUUsage.rst:2144
#: ../../../AMDGPUUsage.rst:2181 ../../../AMDGPUUsage.rst:2222
#: ../../../AMDGPUUsage.rst:2411 ../../../AMDGPUUsage.rst:2511
#: ../../../AMDGPUUsage.rst:2556 ../../../AMDGPUUsage.rst:2700
msgid "Value Type"
msgstr ""

#: ../../../AMDGPUUsage.rst:2100 ../../../AMDGPUUsage.rst:2144
#: ../../../AMDGPUUsage.rst:2181 ../../../AMDGPUUsage.rst:2222
#: ../../../AMDGPUUsage.rst:2411 ../../../AMDGPUUsage.rst:2511
#: ../../../AMDGPUUsage.rst:2556 ../../../AMDGPUUsage.rst:2700
msgid "Required?"
msgstr ""

#: ../../../AMDGPUUsage.rst:2102
msgid "\"Version\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2102 ../../../AMDGPUUsage.rst:2157
#: ../../../AMDGPUUsage.rst:2513 ../../../AMDGPUUsage.rst:2571
msgid "sequence of 2 integers"
msgstr ""

#: ../../../AMDGPUUsage.rst:2102 ../../../AMDGPUUsage.rst:2132
#: ../../../AMDGPUUsage.rst:2146 ../../../AMDGPUUsage.rst:2147
#: ../../../AMDGPUUsage.rst:2226 ../../../AMDGPUUsage.rst:2227
#: ../../../AMDGPUUsage.rst:2229 ../../../AMDGPUUsage.rst:2413
#: ../../../AMDGPUUsage.rst:2418 ../../../AMDGPUUsage.rst:2429
#: ../../../AMDGPUUsage.rst:2439 ../../../AMDGPUUsage.rst:2444
#: ../../../AMDGPUUsage.rst:2446 ../../../AMDGPUUsage.rst:2462
#: ../../../AMDGPUUsage.rst:2466 ../../../AMDGPUUsage.rst:2513
#: ../../../AMDGPUUsage.rst:2543 ../../../AMDGPUUsage.rst:2558
#: ../../../AMDGPUUsage.rst:2559 ../../../AMDGPUUsage.rst:2611
#: ../../../AMDGPUUsage.rst:2616 ../../../AMDGPUUsage.rst:2627
#: ../../../AMDGPUUsage.rst:2637 ../../../AMDGPUUsage.rst:2642
#: ../../../AMDGPUUsage.rst:2644 ../../../AMDGPUUsage.rst:2665
#: ../../../AMDGPUUsage.rst:2674 ../../../AMDGPUUsage.rst:2704
#: ../../../AMDGPUUsage.rst:2705 ../../../AMDGPUUsage.rst:2709
#: ../../../AMDGPUUsage.rst:7597 ../../../AMDGPUUsage.rst:7600
msgid "Required"
msgstr ""

#: ../../../AMDGPUUsage.rst:2102 ../../../AMDGPUUsage.rst:2513
msgid "The first integer is the major version. Currently 1."
msgstr ""

#: ../../../AMDGPUUsage.rst:2104 ../../../AMDGPUUsage.rst:2515
msgid "The second integer is the minor version. Currently 0."
msgstr ""

#: ../../../AMDGPUUsage.rst:2106
msgid "\"Printf\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2106 ../../../AMDGPUUsage.rst:2517
msgid "sequence of strings"
msgstr ""

#: ../../../AMDGPUUsage.rst:2106 ../../../AMDGPUUsage.rst:2517
msgid ""
"Each string is encoded information about a printf function call. The encoded "
"information is organized as fields separated by colon (':'):"
msgstr ""

#: ../../../AMDGPUUsage.rst:2111 ../../../AMDGPUUsage.rst:2522
msgid "``ID:N:S[0]:S[1]:...:S[N-1]:FormatString``"
msgstr ""

#: ../../../AMDGPUUsage.rst:2113 ../../../AMDGPUUsage.rst:2524
msgid "where:"
msgstr ""

#: ../../../AMDGPUUsage.rst:2117 ../../../AMDGPUUsage.rst:2528
msgid "``ID``"
msgstr ""

#: ../../../AMDGPUUsage.rst:2116 ../../../AMDGPUUsage.rst:2527
msgid "A 32-bit integer as a unique id for each printf function call"
msgstr ""

#: ../../../AMDGPUUsage.rst:2122 ../../../AMDGPUUsage.rst:2533
msgid "``N``"
msgstr ""

#: ../../../AMDGPUUsage.rst:2120 ../../../AMDGPUUsage.rst:2531
msgid ""
"A 32-bit integer equal to the number of arguments of printf function call "
"minus 1"
msgstr ""

#: ../../../AMDGPUUsage.rst:2127 ../../../AMDGPUUsage.rst:2538
msgid "``S[i]`` (where i = 0, 1, ... , N-1)"
msgstr ""

#: ../../../AMDGPUUsage.rst:2125 ../../../AMDGPUUsage.rst:2536
msgid ""
"32-bit integers for the size in bytes of the i-th FormatString argument of "
"the printf function call"
msgstr ""

#: ../../../AMDGPUUsage.rst:2130 ../../../AMDGPUUsage.rst:2541
msgid "FormatString"
msgstr ""

#: ../../../AMDGPUUsage.rst:2130 ../../../AMDGPUUsage.rst:2541
msgid "The format string passed to the printf function call."
msgstr ""

#: ../../../AMDGPUUsage.rst:2132
msgid "\"Kernels\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2132 ../../../AMDGPUUsage.rst:2165
msgid "sequence of mapping"
msgstr ""

#: ../../../AMDGPUUsage.rst:2132
msgid ""
"Sequence of the mappings for each kernel in the code object. See :ref:"
"`amdgpu-amdhsa-code-object-kernel-metadata-map-table-v2` for the definition "
"of the mapping."
msgstr ""

#: ../../../AMDGPUUsage.rst:2140
msgid "AMDHSA Code Object V2 Kernel Metadata Map"
msgstr ""

#: ../../../AMDGPUUsage.rst:2146 ../../../AMDGPUUsage.rst:2224
msgid "\"Name\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2146 ../../../AMDGPUUsage.rst:2147
#: ../../../AMDGPUUsage.rst:2149 ../../../AMDGPUUsage.rst:2199
#: ../../../AMDGPUUsage.rst:2205 ../../../AMDGPUUsage.rst:2224
#: ../../../AMDGPUUsage.rst:2225 ../../../AMDGPUUsage.rst:2229
#: ../../../AMDGPUUsage.rst:2321 ../../../AMDGPUUsage.rst:2331
#: ../../../AMDGPUUsage.rst:2351 ../../../AMDGPUUsage.rst:2364
#: ../../../AMDGPUUsage.rst:2558 ../../../AMDGPUUsage.rst:2559
#: ../../../AMDGPUUsage.rst:2561 ../../../AMDGPUUsage.rst:2596
#: ../../../AMDGPUUsage.rst:2602 ../../../AMDGPUUsage.rst:2702
#: ../../../AMDGPUUsage.rst:2703 ../../../AMDGPUUsage.rst:2709
#: ../../../AMDGPUUsage.rst:2801 ../../../AMDGPUUsage.rst:2810
#: ../../../AMDGPUUsage.rst:2830 ../../../AMDGPUUsage.rst:2843
msgid "string"
msgstr ""

#: ../../../AMDGPUUsage.rst:2146 ../../../AMDGPUUsage.rst:2558
msgid "Source name of the kernel."
msgstr ""

#: ../../../AMDGPUUsage.rst:2147
msgid "\"SymbolName\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2147 ../../../AMDGPUUsage.rst:2559
msgid "Name of the kernel descriptor ELF symbol."
msgstr ""

#: ../../../AMDGPUUsage.rst:2149
msgid "\"Language\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2149 ../../../AMDGPUUsage.rst:2561
msgid "Source language of the kernel. Values include:"
msgstr ""

#: ../../../AMDGPUUsage.rst:2152 ../../../AMDGPUUsage.rst:2564
msgid "\"OpenCL C\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2153 ../../../AMDGPUUsage.rst:2565
msgid "\"OpenCL C++\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2154 ../../../AMDGPUUsage.rst:2566
msgid "\"HCC\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2155 ../../../AMDGPUUsage.rst:2568
msgid "\"OpenMP\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2157
msgid "\"LanguageVersion\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2157 ../../../AMDGPUUsage.rst:2571
msgid "The first integer is the major version."
msgstr ""

#: ../../../AMDGPUUsage.rst:2159 ../../../AMDGPUUsage.rst:2573
msgid "The second integer is the minor version."
msgstr ""

#: ../../../AMDGPUUsage.rst:2161
msgid "\"Attrs\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2161 ../../../AMDGPUUsage.rst:2169
msgid "mapping"
msgstr ""

#: ../../../AMDGPUUsage.rst:2161
msgid ""
"Mapping of kernel attributes. See :ref:`amdgpu-amdhsa-code-object-kernel-"
"attribute-metadata-map-table-v2` for the mapping definition."
msgstr ""

#: ../../../AMDGPUUsage.rst:2165
msgid "\"Args\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2165
msgid ""
"Sequence of mappings of the kernel arguments. See :ref:`amdgpu-amdhsa-code-"
"object-kernel-argument-metadata-map-table-v2` for the definition of the "
"mapping."
msgstr ""

#: ../../../AMDGPUUsage.rst:2169
msgid "\"CodeProps\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2169
msgid ""
"Mapping of properties related to the kernel code. See :ref:`amdgpu-amdhsa-"
"code-object-kernel-code-properties-metadata-map-table-v2` for the mapping "
"definition."
msgstr ""

#: ../../../AMDGPUUsage.rst:2177
msgid "AMDHSA Code Object V2 Kernel Attribute Metadata Map"
msgstr ""

#: ../../../AMDGPUUsage.rst:2183
msgid "\"ReqdWorkGroupSize\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2183 ../../../AMDGPUUsage.rst:2192
#: ../../../AMDGPUUsage.rst:2580 ../../../AMDGPUUsage.rst:2589
msgid "sequence of 3 integers"
msgstr ""

#: ../../../AMDGPUUsage.rst:2183 ../../../AMDGPUUsage.rst:2580
msgid ""
"If not 0, 0, 0 then all values must be >=1 and the dispatch work-group size "
"X, Y, Z must correspond to the specified values. Defaults to 0, 0, 0."
msgstr ""

#: ../../../AMDGPUUsage.rst:2189 ../../../AMDGPUUsage.rst:2586
msgid "Corresponds to the OpenCL ``reqd_work_group_size`` attribute."
msgstr ""

#: ../../../AMDGPUUsage.rst:2192
msgid "\"WorkGroupSizeHint\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2192 ../../../AMDGPUUsage.rst:2589
msgid ""
"The dispatch work-group size X, Y, Z is likely to be the specified values."
msgstr ""

#: ../../../AMDGPUUsage.rst:2196 ../../../AMDGPUUsage.rst:2593
msgid "Corresponds to the OpenCL ``work_group_size_hint`` attribute."
msgstr ""

#: ../../../AMDGPUUsage.rst:2199
msgid "\"VecTypeHint\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2199 ../../../AMDGPUUsage.rst:2596
msgid "The name of a scalar or vector type."
msgstr ""

#: ../../../AMDGPUUsage.rst:2202 ../../../AMDGPUUsage.rst:2599
msgid "Corresponds to the OpenCL ``vec_type_hint`` attribute."
msgstr ""

#: ../../../AMDGPUUsage.rst:2205
msgid "\"RuntimeHandle\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2205 ../../../AMDGPUUsage.rst:2602
msgid ""
"The external symbol name associated with a kernel. OpenCL runtime allocates "
"a global buffer for the symbol and saves the kernel's address to it, which "
"is used for device side enqueueing. Only available for device side enqueued "
"kernels."
msgstr ""

#: ../../../AMDGPUUsage.rst:2218
msgid "AMDHSA Code Object V2 Kernel Argument Metadata Map"
msgstr ""

#: ../../../AMDGPUUsage.rst:2224 ../../../AMDGPUUsage.rst:2702
msgid "Kernel argument name."
msgstr ""

#: ../../../AMDGPUUsage.rst:2225
msgid "\"TypeName\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2225 ../../../AMDGPUUsage.rst:2703
msgid "Kernel argument type name."
msgstr ""

#: ../../../AMDGPUUsage.rst:2226
msgid "\"Size\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2226 ../../../AMDGPUUsage.rst:2227
#: ../../../AMDGPUUsage.rst:2325 ../../../AMDGPUUsage.rst:2413
#: ../../../AMDGPUUsage.rst:2418 ../../../AMDGPUUsage.rst:2429
#: ../../../AMDGPUUsage.rst:2439 ../../../AMDGPUUsage.rst:2444
#: ../../../AMDGPUUsage.rst:2446 ../../../AMDGPUUsage.rst:2462
#: ../../../AMDGPUUsage.rst:2466 ../../../AMDGPUUsage.rst:2474
#: ../../../AMDGPUUsage.rst:2479 ../../../AMDGPUUsage.rst:2611
#: ../../../AMDGPUUsage.rst:2616 ../../../AMDGPUUsage.rst:2627
#: ../../../AMDGPUUsage.rst:2637 ../../../AMDGPUUsage.rst:2642
#: ../../../AMDGPUUsage.rst:2644 ../../../AMDGPUUsage.rst:2665
#: ../../../AMDGPUUsage.rst:2674 ../../../AMDGPUUsage.rst:2682
#: ../../../AMDGPUUsage.rst:2687 ../../../AMDGPUUsage.rst:2704
#: ../../../AMDGPUUsage.rst:2705 ../../../AMDGPUUsage.rst:2804
msgid "integer"
msgstr ""

#: ../../../AMDGPUUsage.rst:2226 ../../../AMDGPUUsage.rst:2704
msgid "Kernel argument size in bytes."
msgstr ""

#: ../../../AMDGPUUsage.rst:2227
msgid "\"Align\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2227
msgid "Kernel argument alignment in bytes. Must be a power of two."
msgstr ""

#: ../../../AMDGPUUsage.rst:2229
msgid "\"ValueKind\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2229 ../../../AMDGPUUsage.rst:2709
msgid ""
"Kernel argument kind that specifies how to set up the corresponding "
"argument. Values include:"
msgstr ""

#: ../../../AMDGPUUsage.rst:2236
msgid "\"ByValue\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2235 ../../../AMDGPUUsage.rst:2715
msgid "The argument is copied directly into the kernarg."
msgstr ""

#: ../../../AMDGPUUsage.rst:2241
msgid "\"GlobalBuffer\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2239 ../../../AMDGPUUsage.rst:2719
msgid ""
"A global address space pointer to the buffer data is passed in the kernarg."
msgstr ""

#: ../../../AMDGPUUsage.rst:2246
msgid "\"DynamicSharedPointer\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2244 ../../../AMDGPUUsage.rst:2724
msgid ""
"A group address space pointer to dynamically allocated LDS is passed in the "
"kernarg."
msgstr ""

#: ../../../AMDGPUUsage.rst:2251
msgid "\"Sampler\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2249 ../../../AMDGPUUsage.rst:2729
msgid "A global address space pointer to a S# is passed in the kernarg."
msgstr ""

#: ../../../AMDGPUUsage.rst:2256
msgid "\"Image\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2254 ../../../AMDGPUUsage.rst:2734
msgid "A global address space pointer to a T# is passed in the kernarg."
msgstr ""

#: ../../../AMDGPUUsage.rst:2261
msgid "\"Pipe\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2259 ../../../AMDGPUUsage.rst:2739
msgid ""
"A global address space pointer to an OpenCL pipe is passed in the kernarg."
msgstr ""

#: ../../../AMDGPUUsage.rst:2267
msgid "\"Queue\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2264 ../../../AMDGPUUsage.rst:2744
msgid ""
"A global address space pointer to an OpenCL device enqueue queue is passed "
"in the kernarg."
msgstr ""

#: ../../../AMDGPUUsage.rst:2273
msgid "\"HiddenGlobalOffsetX\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2270 ../../../AMDGPUUsage.rst:2750
msgid ""
"The OpenCL grid dispatch global offset for the X dimension is passed in the "
"kernarg."
msgstr ""

#: ../../../AMDGPUUsage.rst:2279
msgid "\"HiddenGlobalOffsetY\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2276 ../../../AMDGPUUsage.rst:2756
msgid ""
"The OpenCL grid dispatch global offset for the Y dimension is passed in the "
"kernarg."
msgstr ""

#: ../../../AMDGPUUsage.rst:2285
msgid "\"HiddenGlobalOffsetZ\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2282 ../../../AMDGPUUsage.rst:2762
msgid ""
"The OpenCL grid dispatch global offset for the Z dimension is passed in the "
"kernarg."
msgstr ""

#: ../../../AMDGPUUsage.rst:2291
msgid "\"HiddenNone\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2288 ../../../AMDGPUUsage.rst:2768
msgid ""
"An argument that is not used by the kernel. Space needs to be left for it, "
"but it does not need to be set up."
msgstr ""

#: ../../../AMDGPUUsage.rst:2296
msgid "\"HiddenPrintfBuffer\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2294 ../../../AMDGPUUsage.rst:2774
msgid ""
"A global address space pointer to the runtime printf buffer is passed in "
"kernarg."
msgstr ""

#: ../../../AMDGPUUsage.rst:2301
msgid "\"HiddenHostcallBuffer\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2299 ../../../AMDGPUUsage.rst:2779
msgid ""
"A global address space pointer to the runtime hostcall buffer is passed in "
"kernarg."
msgstr ""

#: ../../../AMDGPUUsage.rst:2308
msgid "\"HiddenDefaultQueue\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2304 ../../../AMDGPUUsage.rst:2784
msgid ""
"A global address space pointer to the OpenCL device enqueue queue that "
"should be used by the kernel by default is passed in the kernarg."
msgstr ""

#: ../../../AMDGPUUsage.rst:2314
msgid "\"HiddenCompletionAction\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2311 ../../../AMDGPUUsage.rst:2791
msgid ""
"A global address space pointer to help link enqueued kernels into the "
"ancestor tree for determining when the parent kernel has finished."
msgstr ""

#: ../../../AMDGPUUsage.rst:2319
msgid "\"HiddenMultiGridSyncArg\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2317 ../../../AMDGPUUsage.rst:2797
msgid ""
"A global address space pointer for multi-grid synchronization is passed in "
"the kernarg."
msgstr ""

#: ../../../AMDGPUUsage.rst:2321
msgid "\"ValueType\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2321 ../../../AMDGPUUsage.rst:2801
msgid ""
"Unused and deprecated. This should no longer be emitted, but is accepted for "
"compatibility."
msgstr ""

#: ../../../AMDGPUUsage.rst:2325
msgid "\"PointeeAlign\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2325
msgid ""
"Alignment in bytes of pointee type for pointer type kernel argument. Must be "
"a power of 2. Only present if \"ValueKind\" is \"DynamicSharedPointer\"."
msgstr ""

#: ../../../AMDGPUUsage.rst:2331
msgid "\"AddrSpaceQual\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2331
msgid ""
"Kernel argument address space qualifier. Only present if \"ValueKind\" is "
"\"GlobalBuffer\" or \"DynamicSharedPointer\". Values are:"
msgstr ""

#: ../../../AMDGPUUsage.rst:2337
msgid "\"Private\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2338
msgid "\"Global\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2339
msgid "\"Constant\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2340
msgid "\"Local\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2341
msgid "\"Generic\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2342
msgid "\"Region\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2345
msgid ""
"Is GlobalBuffer only Global or Constant? Is DynamicSharedPointer always "
"Local? Can HCC allow Generic? How can Private or Region ever happen?"
msgstr ""

#: ../../../AMDGPUUsage.rst:2351
msgid "\"AccQual\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2351
msgid ""
"Kernel argument access qualifier. Only present if \"ValueKind\" is \"Image\" "
"or \"Pipe\". Values are:"
msgstr ""

#: ../../../AMDGPUUsage.rst:2357 ../../../AMDGPUUsage.rst:2377
msgid "\"ReadOnly\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2358 ../../../AMDGPUUsage.rst:2378
msgid "\"WriteOnly\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2359 ../../../AMDGPUUsage.rst:2379
msgid "\"ReadWrite\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2362
msgid "Does this apply to GlobalBuffer?"
msgstr ""

#: ../../../AMDGPUUsage.rst:2364
msgid "\"ActualAccQual\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2364
msgid ""
"The actual memory accesses performed by the kernel on the kernel argument. "
"Only present if \"ValueKind\" is \"GlobalBuffer\", \"Image\", or \"Pipe\". "
"This may be more restrictive than indicated by \"AccQual\" to reflect what "
"the kernel actual does. If not present then the runtime must assume what is "
"implied by \"AccQual\" and \"IsConst\". Values are:"
msgstr ""

#: ../../../AMDGPUUsage.rst:2381
msgid "\"IsConst\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2381 ../../../AMDGPUUsage.rst:2386
#: ../../../AMDGPUUsage.rst:2391 ../../../AMDGPUUsage.rst:2396
#: ../../../AMDGPUUsage.rst:2860 ../../../AMDGPUUsage.rst:2865
#: ../../../AMDGPUUsage.rst:2870 ../../../AMDGPUUsage.rst:2875
msgid "boolean"
msgstr ""

#: ../../../AMDGPUUsage.rst:2381
msgid ""
"Indicates if the kernel argument is const qualified. Only present if "
"\"ValueKind\" is \"GlobalBuffer\"."
msgstr ""

#: ../../../AMDGPUUsage.rst:2386
msgid "\"IsRestrict\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2386
msgid ""
"Indicates if the kernel argument is restrict qualified. Only present if "
"\"ValueKind\" is \"GlobalBuffer\"."
msgstr ""

#: ../../../AMDGPUUsage.rst:2391
msgid "\"IsVolatile\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2391
msgid ""
"Indicates if the kernel argument is volatile qualified. Only present if "
"\"ValueKind\" is \"GlobalBuffer\"."
msgstr ""

#: ../../../AMDGPUUsage.rst:2396
msgid "\"IsPipe\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2396
msgid ""
"Indicates if the kernel argument is pipe qualified. Only present if "
"\"ValueKind\" is \"Pipe\"."
msgstr ""

#: ../../../AMDGPUUsage.rst:2401
msgid "Can GlobalBuffer be pipe qualified?"
msgstr ""

#: ../../../AMDGPUUsage.rst:2407
msgid "AMDHSA Code Object V2 Kernel Code Properties Metadata Map"
msgstr ""

#: ../../../AMDGPUUsage.rst:2413
msgid "\"KernargSegmentSize\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2413 ../../../AMDGPUUsage.rst:2611
msgid ""
"The size in bytes of the kernarg segment that holds the values of the "
"arguments to the kernel."
msgstr ""

#: ../../../AMDGPUUsage.rst:2418
msgid "\"GroupSegmentFixedSize\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2418 ../../../AMDGPUUsage.rst:2616
msgid ""
"The amount of group segment memory required by a work-group in bytes. This "
"does not include any dynamically allocated group segment memory that may be "
"added when the kernel is dispatched."
msgstr ""

#: ../../../AMDGPUUsage.rst:2429
msgid "\"PrivateSegmentFixedSize\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2429 ../../../AMDGPUUsage.rst:2627
msgid ""
"The amount of fixed private address space memory required for a work-item in "
"bytes. If the kernel uses a dynamic call stack then additional space must be "
"added to this value for the call stack."
msgstr ""

#: ../../../AMDGPUUsage.rst:2439
msgid "\"KernargSegmentAlign\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2439 ../../../AMDGPUUsage.rst:2637
msgid ""
"The maximum byte alignment of arguments in the kernarg segment. Must be a "
"power of 2."
msgstr ""

#: ../../../AMDGPUUsage.rst:2444
msgid "\"WavefrontSize\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2444 ../../../AMDGPUUsage.rst:2642
msgid "Wavefront size. Must be a power of 2."
msgstr ""

#: ../../../AMDGPUUsage.rst:2446
msgid "\"NumSGPRs\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2446
msgid ""
"Number of scalar registers used by a wavefront for GFX6-GFX10. This includes "
"the special SGPRs for VCC, Flat Scratch (GFX7-GFX10) and XNACK (for GFX8-"
"GFX10). It does not include the 16 SGPR added if a trap handler is enabled. "
"It is not rounded up to the allocation granularity."
msgstr ""

#: ../../../AMDGPUUsage.rst:2462
msgid "\"NumVGPRs\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2462
msgid "Number of vector registers used by each work-item for GFX6-GFX10"
msgstr ""

#: ../../../AMDGPUUsage.rst:2466
msgid "\"MaxFlatWorkGroupSize\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2466 ../../../AMDGPUUsage.rst:2674
msgid ""
"Maximum flat work-group size supported by the kernel in work-items. Must be "
">=1 and consistent with ReqdWorkGroupSize if not 0, 0, 0."
msgstr ""

#: ../../../AMDGPUUsage.rst:2474
msgid "\"NumSpilledSGPRs\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2474 ../../../AMDGPUUsage.rst:2682
msgid ""
"Number of stores from a scalar register to a register allocator created "
"spill location."
msgstr ""

#: ../../../AMDGPUUsage.rst:2479
msgid "\"NumSpilledVGPRs\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2479 ../../../AMDGPUUsage.rst:2687
msgid ""
"Number of stores from a vector register to a register allocator created "
"spill location."
msgstr ""

#: ../../../AMDGPUUsage.rst:2489
msgid "Code Object V3 Metadata (-mattr=+code-object-v3)"
msgstr ""

#: ../../../AMDGPUUsage.rst:2491
msgid ""
"Code object V3 metadata is specified by the ``NT_AMDGPU_METADATA`` note "
"record (see :ref:`amdgpu-note-records-v3`)."
msgstr ""

#: ../../../AMDGPUUsage.rst:2494
msgid ""
"The metadata is represented as Message Pack formatted binary data (see "
"[MsgPack]_). The top level is a Message Pack map that includes the keys "
"defined in table :ref:`amdgpu-amdhsa-code-object-metadata-map-table-v3` and "
"referenced tables."
msgstr ""

#: ../../../AMDGPUUsage.rst:2500
msgid ""
"Additional information can be added to the maps. To avoid conflicts, any key "
"names should be prefixed by \"*vendor-name*.\" where ``vendor-name`` can be "
"the name of the vendor and specific vendor tool that generates the "
"information. The prefix is abbreviated to simply \".\" when it appears "
"within a map that has been added by the same *vendor-name*."
msgstr ""

#: ../../../AMDGPUUsage.rst:2507
msgid "AMDHSA Code Object V3 Metadata Map"
msgstr ""

#: ../../../AMDGPUUsage.rst:2513
msgid "\"amdhsa.version\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2517
msgid "\"amdhsa.printf\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2543
msgid "\"amdhsa.kernels\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2543 ../../../AMDGPUUsage.rst:2575
msgid "sequence of map"
msgstr ""

#: ../../../AMDGPUUsage.rst:2543
msgid ""
"Sequence of the maps for each kernel in the code object. See :ref:`amdgpu-"
"amdhsa-code-object-kernel-metadata-map-table-v3` for the definition of the "
"keys included in that map."
msgstr ""

#: ../../../AMDGPUUsage.rst:2552
msgid "AMDHSA Code Object V3 Kernel Metadata Map"
msgstr ""

#: ../../../AMDGPUUsage.rst:2558 ../../../AMDGPUUsage.rst:2702
msgid "\".name\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2559
msgid "\".symbol\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2561
msgid "\".language\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2567
msgid "\"HIP\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2569
msgid "\"Assembler\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2571
msgid "\".language_version\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2575
msgid "\".args\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2575
msgid ""
"Sequence of maps of the kernel arguments. See :ref:`amdgpu-amdhsa-code-"
"object-kernel-argument-metadata-map-table-v3` for the definition of the keys "
"included in that map."
msgstr ""

#: ../../../AMDGPUUsage.rst:2580
msgid "\".reqd_workgroup_size\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2589
msgid "\".workgroup_size_hint\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2596
msgid "\".vec_type_hint\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2602
msgid "\".device_enqueue_symbol\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2611
msgid "\".kernarg_segment_size\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2616
msgid "\".group_segment_fixed_size\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2627
msgid "\".private_segment_fixed_size\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2637
msgid "\".kernarg_segment_align\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2642
msgid "\".wavefront_size\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2644
msgid "\".sgpr_count\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2644
msgid ""
"Number of scalar registers required by a wavefront for GFX6-GFX9. A register "
"is required if it is used explicitly, or if a higher numbered register is "
"used explicitly. This includes the special SGPRs for VCC, Flat Scratch (GFX7-"
"GFX9) and XNACK (for GFX8-GFX9). It does not include the 16 SGPR added if a "
"trap handler is enabled. It is not rounded up to the allocation granularity."
msgstr ""

#: ../../../AMDGPUUsage.rst:2665
msgid "\".vgpr_count\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2665
msgid ""
"Number of vector registers required by each work-item for GFX6-GFX9. A "
"register is required if it is used explicitly, or if a higher numbered "
"register is used explicitly."
msgstr ""

#: ../../../AMDGPUUsage.rst:2674
msgid "\".max_flat_workgroup_size\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2682
msgid "\".sgpr_spill_count\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2687
msgid "\".vgpr_spill_count\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2696
msgid "AMDHSA Code Object V3 Kernel Argument Metadata Map"
msgstr ""

#: ../../../AMDGPUUsage.rst:2703
msgid "\".type_name\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2704
msgid "\".size\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2705
msgid "\".offset\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2705
msgid ""
"Kernel argument offset in bytes. The offset must be a multiple of the "
"alignment required by the argument."
msgstr ""

#: ../../../AMDGPUUsage.rst:2709
msgid "\".value_kind\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2716
msgid "\"by_value\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2721
msgid "\"global_buffer\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2726
msgid "\"dynamic_shared_pointer\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2731
msgid "\"sampler\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2736
msgid "\"image\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2741
msgid "\"pipe\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2747
msgid "\"queue\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2753
msgid "\"hidden_global_offset_x\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2759
msgid "\"hidden_global_offset_y\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2765
msgid "\"hidden_global_offset_z\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2771
msgid "\"hidden_none\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2776
msgid "\"hidden_printf_buffer\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2781
msgid "\"hidden_hostcall_buffer\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2788
msgid "\"hidden_default_queue\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2794
msgid "\"hidden_completion_action\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2799
msgid "\"hidden_multigrid_sync_arg\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2801
msgid "\".value_type\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2804
msgid "\".pointee_align\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2804
msgid ""
"Alignment in bytes of pointee type for pointer type kernel argument. Must be "
"a power of 2. Only present if \".value_kind\" is \"dynamic_shared_pointer\"."
msgstr ""

#: ../../../AMDGPUUsage.rst:2810
msgid "\".address_space\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2810
msgid ""
"Kernel argument address space qualifier. Only present if \".value_kind\" is "
"\"global_buffer\" or \"dynamic_shared_pointer\". Values are:"
msgstr ""

#: ../../../AMDGPUUsage.rst:2816
msgid "\"private\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2817
msgid "\"global\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2818
msgid "\"constant\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2819
msgid "\"local\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2820
msgid "\"generic\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2821
msgid "\"region\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2824
msgid ""
"Is \"global_buffer\" only \"global\" or \"constant\"? Is "
"\"dynamic_shared_pointer\" always \"local\"? Can HCC allow \"generic\"? How "
"can \"private\" or \"region\" ever happen?"
msgstr ""

#: ../../../AMDGPUUsage.rst:2830
msgid "\".access\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2830
msgid ""
"Kernel argument access qualifier. Only present if \".value_kind\" is "
"\"image\" or \"pipe\". Values are:"
msgstr ""

#: ../../../AMDGPUUsage.rst:2836 ../../../AMDGPUUsage.rst:2856
msgid "\"read_only\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2837 ../../../AMDGPUUsage.rst:2857
msgid "\"write_only\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2838 ../../../AMDGPUUsage.rst:2858
msgid "\"read_write\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2841
msgid "Does this apply to \"global_buffer\"?"
msgstr ""

#: ../../../AMDGPUUsage.rst:2843
msgid "\".actual_access\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2843
msgid ""
"The actual memory accesses performed by the kernel on the kernel argument. "
"Only present if \".value_kind\" is \"global_buffer\", \"image\", or "
"\"pipe\". This may be more restrictive than indicated by \".access\" to "
"reflect what the kernel actual does. If not present then the runtime must "
"assume what is implied by \".access\" and \".is_const\"      . Values are:"
msgstr ""

#: ../../../AMDGPUUsage.rst:2860
msgid "\".is_const\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2860
msgid ""
"Indicates if the kernel argument is const qualified. Only present if \"."
"value_kind\" is \"global_buffer\"."
msgstr ""

#: ../../../AMDGPUUsage.rst:2865
msgid "\".is_restrict\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2865
msgid ""
"Indicates if the kernel argument is restrict qualified. Only present if \"."
"value_kind\" is \"global_buffer\"."
msgstr ""

#: ../../../AMDGPUUsage.rst:2870
msgid "\".is_volatile\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2870
msgid ""
"Indicates if the kernel argument is volatile qualified. Only present if \"."
"value_kind\" is \"global_buffer\"."
msgstr ""

#: ../../../AMDGPUUsage.rst:2875
msgid "\".is_pipe\""
msgstr ""

#: ../../../AMDGPUUsage.rst:2875
msgid ""
"Indicates if the kernel argument is pipe qualified. Only present if \"."
"value_kind\" is \"pipe\"."
msgstr ""

#: ../../../AMDGPUUsage.rst:2880
msgid "Can \"global_buffer\" be pipe qualified?"
msgstr ""

#: ../../../AMDGPUUsage.rst:2887
msgid "Kernel Dispatch"
msgstr ""

#: ../../../AMDGPUUsage.rst:2889
msgid ""
"The HSA architected queuing language (AQL) defines a user space memory "
"interface that can be used to control the dispatch of kernels, in an agent "
"independent way. An agent can have zero or more AQL queues created for it "
"using the ROCm runtime, in which AQL packets (all of which are 64 bytes) can "
"be placed. See the *HSA Platform System Architecture Specification* [HSA]_ "
"for the AQL queue mechanics and packet layouts."
msgstr ""

#: ../../../AMDGPUUsage.rst:2896
msgid ""
"The packet processor of a kernel agent is responsible for detecting and "
"dispatching HSA kernels from the AQL queues associated with it. For AMD GPUs "
"the packet processor is implemented by the hardware command processor (CP), "
"asynchronous dispatch controller (ADC) and shader processor input controller "
"(SPI)."
msgstr ""

#: ../../../AMDGPUUsage.rst:2902
msgid ""
"The ROCm runtime can be used to allocate an AQL queue object. It uses the "
"kernel mode driver to initialize and register the AQL queue with CP."
msgstr ""

#: ../../../AMDGPUUsage.rst:2905
msgid ""
"To dispatch a kernel the following actions are performed. This can occur in "
"the CPU host program, or from an HSA kernel executing on a GPU."
msgstr ""

#: ../../../AMDGPUUsage.rst:2908
msgid ""
"A pointer to an AQL queue for the kernel agent on which the kernel is to be "
"executed is obtained."
msgstr ""

#: ../../../AMDGPUUsage.rst:2910
msgid ""
"A pointer to the kernel descriptor (see :ref:`amdgpu-amdhsa-kernel-"
"descriptor`) of the kernel to execute is obtained. It must be for a kernel "
"that is contained in a code object that that was loaded by the ROCm runtime "
"on the kernel agent with which the AQL queue is associated."
msgstr ""

#: ../../../AMDGPUUsage.rst:2915
msgid ""
"Space is allocated for the kernel arguments using the ROCm runtime allocator "
"for a memory region with the kernarg property for the kernel agent that will "
"execute the kernel. It must be at least 16-byte aligned."
msgstr ""

#: ../../../AMDGPUUsage.rst:2918
msgid ""
"Kernel argument values are assigned to the kernel argument memory "
"allocation. The layout is defined in the *HSA Programmer's Language "
"Reference* [HSA]_. For AMDGPU the kernel execution directly accesses the "
"kernel argument memory in the same way constant memory is accessed. (Note "
"that the HSA specification allows an implementation to copy the kernel "
"argument contents to another location that is accessed by the kernel.)"
msgstr ""

#: ../../../AMDGPUUsage.rst:2924
msgid ""
"An AQL kernel dispatch packet is created on the AQL queue. The ROCm runtime "
"api uses 64-bit atomic operations to reserve space in the AQL queue for the "
"packet. The packet must be set up, and the final write must use an atomic "
"store release to set the packet kind to ensure the packet contents are "
"visible to the kernel agent. AQL defines a doorbell signal mechanism to "
"notify the kernel agent that the AQL queue has been updated. These rules, "
"and the layout of the AQL queue and kernel dispatch packet is defined in the "
"*HSA System Architecture Specification* [HSA]_."
msgstr ""

#: ../../../AMDGPUUsage.rst:2932
msgid ""
"A kernel dispatch packet includes information about the actual dispatch, "
"such as grid and work-group size, together with information from the code "
"object about the kernel, such as segment sizes. The ROCm runtime queries on "
"the kernel symbol can be used to obtain the code object values which are "
"recorded in the :ref:`amdgpu-amdhsa-code-object-metadata`."
msgstr ""

#: ../../../AMDGPUUsage.rst:2937
msgid ""
"CP executes micro-code and is responsible for detecting and setting up the "
"GPU to execute the wavefronts of a kernel dispatch."
msgstr ""

#: ../../../AMDGPUUsage.rst:2939
msgid ""
"CP ensures that when the a wavefront starts executing the kernel machine "
"code, the scalar general purpose registers (SGPR) and vector general purpose "
"registers (VGPR) are set up as required by the machine code. The required "
"setup is defined in the :ref:`amdgpu-amdhsa-kernel-descriptor`. The initial "
"register state is defined in :ref:`amdgpu-amdhsa-initial-kernel-execution-"
"state`."
msgstr ""

#: ../../../AMDGPUUsage.rst:2945
msgid ""
"The prolog of the kernel machine code (see :ref:`amdgpu-amdhsa-kernel-"
"prolog`) sets up the machine state as necessary before continuing executing "
"the machine code that corresponds to the kernel."
msgstr ""

#: ../../../AMDGPUUsage.rst:2948
msgid ""
"When the kernel dispatch has completed execution, CP signals the completion "
"signal specified in the kernel dispatch packet if not 0."
msgstr ""

#: ../../../AMDGPUUsage.rst:2952
msgid "Image and Samplers"
msgstr ""

#: ../../../AMDGPUUsage.rst:2954
msgid ""
"Image and sample handles created by the ROCm runtime are 64-bit addresses of "
"a hardware 32-byte V# and 48 byte S# object respectively. In order to "
"support the HSA ``query_sampler`` operations two extra dwords are used to "
"store the HSA BRIG enumeration values for the queries that are not trivially "
"deducible from the S# representation."
msgstr ""

#: ../../../AMDGPUUsage.rst:2961
msgid "HSA Signals"
msgstr ""

#: ../../../AMDGPUUsage.rst:2963
msgid ""
"HSA signal handles created by the ROCm runtime are 64-bit addresses of a "
"structure allocated in memory accessible from both the CPU and GPU. The "
"structure is defined by the ROCm runtime and subject to change between "
"releases (see [AMD-ROCm-github]_)."
msgstr ""

#: ../../../AMDGPUUsage.rst:2971
msgid "HSA AQL Queue"
msgstr ""

#: ../../../AMDGPUUsage.rst:2973
msgid ""
"The HSA AQL queue structure is defined by the ROCm runtime and subject to "
"change between releases (see [AMD-ROCm-github]_). For some processors it "
"contains fields needed to implement certain language features such as the "
"flat address aperture bases. It also contains fields used by CP such as "
"managing the allocation of scratch memory."
msgstr ""

#: ../../../AMDGPUUsage.rst:2982
msgid "Kernel Descriptor"
msgstr ""

#: ../../../AMDGPUUsage.rst:2984
msgid ""
"A kernel descriptor consists of the information needed by CP to initiate the "
"execution of a kernel, including the entry point address of the machine code "
"that implements the kernel."
msgstr ""

#: ../../../AMDGPUUsage.rst:2989 ../../../AMDGPUUsage.rst:2994
msgid "Kernel Descriptor for GFX6-GFX10"
msgstr ""

#: ../../../AMDGPUUsage.rst:2991
msgid ""
"CP microcode requires the Kernel descriptor to be allocated on 64-byte "
"alignment."
msgstr ""

#: ../../../AMDGPUUsage.rst:2998 ../../../AMDGPUUsage.rst:3090
#: ../../../AMDGPUUsage.rst:3376 ../../../AMDGPUUsage.rst:3529
#: ../../../AMDGPUUsage.rst:6671
msgid "Bits"
msgstr ""

#: ../../../AMDGPUUsage.rst:2998 ../../../AMDGPUUsage.rst:3090
#: ../../../AMDGPUUsage.rst:3376 ../../../AMDGPUUsage.rst:3529
#: ../../../AMDGPUUsage.rst:6671
msgid "Size"
msgstr ""

#: ../../../AMDGPUUsage.rst:2998 ../../../AMDGPUUsage.rst:3090
#: ../../../AMDGPUUsage.rst:3376 ../../../AMDGPUUsage.rst:3529
#: ../../../AMDGPUUsage.rst:6671
msgid "Field Name"
msgstr ""

#: ../../../AMDGPUUsage.rst:3000
msgid "31:0"
msgstr ""

#: ../../../AMDGPUUsage.rst:3000 ../../../AMDGPUUsage.rst:3009
#: ../../../AMDGPUUsage.rst:3027 ../../../AMDGPUUsage.rst:3037
#: ../../../AMDGPUUsage.rst:3044
msgid "4 bytes"
msgstr ""

#: ../../../AMDGPUUsage.rst:3000
msgid "GROUP_SEGMENT_FIXED_SIZE"
msgstr ""

#: ../../../AMDGPUUsage.rst:3000
msgid ""
"The amount of fixed local address space memory required for a work-group in "
"bytes. This does not include any dynamically allocated local address space "
"memory that may be added when the kernel is dispatched."
msgstr ""

#: ../../../AMDGPUUsage.rst:3009
msgid "63:32"
msgstr ""

#: ../../../AMDGPUUsage.rst:3009
msgid "PRIVATE_SEGMENT_FIXED_SIZE"
msgstr ""

#: ../../../AMDGPUUsage.rst:3009
msgid ""
"The amount of fixed private address space memory required for a work-item in "
"bytes. If is_dynamic_callstack is 1 then additional space must be added to "
"this value for the call stack."
msgstr ""

#: ../../../AMDGPUUsage.rst:3017
msgid "127:64"
msgstr ""

#: ../../../AMDGPUUsage.rst:3017 ../../../AMDGPUUsage.rst:3018
msgid "8 bytes"
msgstr ""

#: ../../../AMDGPUUsage.rst:3017 ../../../AMDGPUUsage.rst:3025
#: ../../../AMDGPUUsage.rst:3028 ../../../AMDGPUUsage.rst:3070
#: ../../../AMDGPUUsage.rst:3072 ../../../AMDGPUUsage.rst:3079
#: ../../../AMDGPUUsage.rst:3080 ../../../AMDGPUUsage.rst:3303
#: ../../../AMDGPUUsage.rst:3320 ../../../AMDGPUUsage.rst:3322
#: ../../../AMDGPUUsage.rst:3334 ../../../AMDGPUUsage.rst:3357
#: ../../../AMDGPUUsage.rst:3519 ../../../AMDGPUUsage.rst:3533
msgid "Reserved, must be 0."
msgstr ""

#: ../../../AMDGPUUsage.rst:3018
msgid "191:128"
msgstr ""

#: ../../../AMDGPUUsage.rst:3018
msgid "KERNEL_CODE_ENTRY_BYTE_OFFSET"
msgstr ""

#: ../../../AMDGPUUsage.rst:3018
msgid ""
"Byte offset (possibly negative) from base address of kernel descriptor to "
"kernel's entry point instruction which must be 256 byte aligned."
msgstr ""

#: ../../../AMDGPUUsage.rst:3025
msgid "351:272"
msgstr ""

#: ../../../AMDGPUUsage.rst:3025
msgid "20 bytes"
msgstr ""

#: ../../../AMDGPUUsage.rst:3027
msgid "383:352"
msgstr ""

#: ../../../AMDGPUUsage.rst:3027
msgid "COMPUTE_PGM_RSRC3"
msgstr ""

#: ../../../AMDGPUUsage.rst:3027 ../../../AMDGPUUsage.rst:3071
#: ../../../AMDGPUUsage.rst:3333 ../../../AMDGPUUsage.rst:3356
msgid "GFX6-9"
msgstr ""

#: ../../../AMDGPUUsage.rst:3035 ../../../AMDGPUUsage.rst:3077
#: ../../../AMDGPUUsage.rst:3140 ../../../AMDGPUUsage.rst:3331
#: ../../../AMDGPUUsage.rst:3354 ../../../AMDGPUUsage.rst:3365
#: ../../../AMDGPUUsage.rst:7579 ../../../AMDGPUUsage.rst:7636
#: ../../../AMDGPUUsage.rst:7640 ../../../AMDGPUUsage.rst:7642
msgid "GFX10"
msgstr ""

#: ../../../AMDGPUUsage.rst:3030
msgid ""
"Compute Shader (CS) program settings used by CP to set up "
"``COMPUTE_PGM_RSRC3`` configuration register. See :ref:`amdgpu-amdhsa-"
"compute_pgm_rsrc3-gfx10-table`."
msgstr ""

#: ../../../AMDGPUUsage.rst:3037
msgid "415:384"
msgstr ""

#: ../../../AMDGPUUsage.rst:3037
msgid "COMPUTE_PGM_RSRC1"
msgstr ""

#: ../../../AMDGPUUsage.rst:3037
msgid ""
"Compute Shader (CS) program settings used by CP to set up "
"``COMPUTE_PGM_RSRC1`` configuration register. See :ref:`amdgpu-amdhsa-"
"compute_pgm_rsrc1-gfx6-gfx10-table`."
msgstr ""

#: ../../../AMDGPUUsage.rst:3044
msgid "447:416"
msgstr ""

#: ../../../AMDGPUUsage.rst:3044
msgid "COMPUTE_PGM_RSRC2"
msgstr ""

#: ../../../AMDGPUUsage.rst:3044
msgid ""
"Compute Shader (CS) program settings used by CP to set up "
"``COMPUTE_PGM_RSRC2`` configuration register. See :ref:`amdgpu-amdhsa-"
"compute_pgm_rsrc2-gfx6-gfx10-table`."
msgstr ""

#: ../../../AMDGPUUsage.rst:3051
msgid "448"
msgstr ""

#: ../../../AMDGPUUsage.rst:3051 ../../../AMDGPUUsage.rst:3063
#: ../../../AMDGPUUsage.rst:3064 ../../../AMDGPUUsage.rst:3065
#: ../../../AMDGPUUsage.rst:3066 ../../../AMDGPUUsage.rst:3067
#: ../../../AMDGPUUsage.rst:3068 ../../../AMDGPUUsage.rst:3071
#: ../../../AMDGPUUsage.rst:3242 ../../../AMDGPUUsage.rst:3251
#: ../../../AMDGPUUsage.rst:3262 ../../../AMDGPUUsage.rst:3270
#: ../../../AMDGPUUsage.rst:3285 ../../../AMDGPUUsage.rst:3294
#: ../../../AMDGPUUsage.rst:3302 ../../../AMDGPUUsage.rst:3321
#: ../../../AMDGPUUsage.rst:3333 ../../../AMDGPUUsage.rst:3356
#: ../../../AMDGPUUsage.rst:3378 ../../../AMDGPUUsage.rst:3393
#: ../../../AMDGPUUsage.rst:3400 ../../../AMDGPUUsage.rst:3408
#: ../../../AMDGPUUsage.rst:3416 ../../../AMDGPUUsage.rst:3424
#: ../../../AMDGPUUsage.rst:3439 ../../../AMDGPUUsage.rst:3455
#: ../../../AMDGPUUsage.rst:3495 ../../../AMDGPUUsage.rst:3505
#: ../../../AMDGPUUsage.rst:3508 ../../../AMDGPUUsage.rst:3510
#: ../../../AMDGPUUsage.rst:3512 ../../../AMDGPUUsage.rst:3514
#: ../../../AMDGPUUsage.rst:3516 ../../../AMDGPUUsage.rst:3519
msgid "1 bit"
msgstr ""

#: ../../../AMDGPUUsage.rst:3051
msgid "ENABLE_SGPR_PRIVATE_SEGMENT _BUFFER"
msgstr ""

#: ../../../AMDGPUUsage.rst:3051
msgid ""
"Enable the setup of the SGPR user data registers (see :ref:`amdgpu-amdhsa-"
"initial-kernel-execution-state`)."
msgstr ""

#: ../../../AMDGPUUsage.rst:3056
msgid ""
"The total number of SGPR user data registers requested must not exceed 16 "
"and match value in ``compute_pgm_rsrc2.user_sgpr.user_sgpr_count``. Any "
"requests beyond 16 will be ignored."
msgstr ""

#: ../../../AMDGPUUsage.rst:3063
msgid "449"
msgstr ""

#: ../../../AMDGPUUsage.rst:3063
msgid "ENABLE_SGPR_DISPATCH_PTR"
msgstr ""

#: ../../../AMDGPUUsage.rst:3063 ../../../AMDGPUUsage.rst:3064
#: ../../../AMDGPUUsage.rst:3065 ../../../AMDGPUUsage.rst:3066
#: ../../../AMDGPUUsage.rst:3067 ../../../AMDGPUUsage.rst:3068
msgid "*see above*"
msgstr ""

#: ../../../AMDGPUUsage.rst:3064
msgid "450"
msgstr ""

#: ../../../AMDGPUUsage.rst:3064
msgid "ENABLE_SGPR_QUEUE_PTR"
msgstr ""

#: ../../../AMDGPUUsage.rst:3065
msgid "451"
msgstr ""

#: ../../../AMDGPUUsage.rst:3065
msgid "ENABLE_SGPR_KERNARG_SEGMENT_PTR"
msgstr ""

#: ../../../AMDGPUUsage.rst:3066
msgid "452"
msgstr ""

#: ../../../AMDGPUUsage.rst:3066
msgid "ENABLE_SGPR_DISPATCH_ID"
msgstr ""

#: ../../../AMDGPUUsage.rst:3067
msgid "453"
msgstr ""

#: ../../../AMDGPUUsage.rst:3067
msgid "ENABLE_SGPR_FLAT_SCRATCH_INIT"
msgstr ""

#: ../../../AMDGPUUsage.rst:3068
msgid "454"
msgstr ""

#: ../../../AMDGPUUsage.rst:3068
msgid "ENABLE_SGPR_PRIVATE_SEGMENT _SIZE"
msgstr ""

#: ../../../AMDGPUUsage.rst:3070
msgid "457:455"
msgstr ""

#: ../../../AMDGPUUsage.rst:3070
msgid "3 bits"
msgstr ""

#: ../../../AMDGPUUsage.rst:3071
msgid "458"
msgstr ""

#: ../../../AMDGPUUsage.rst:3071
msgid "ENABLE_WAVEFRONT_SIZE32"
msgstr ""

#: ../../../AMDGPUUsage.rst:3074
msgid "If 0 execute in wavefront size 64 mode."
msgstr ""

#: ../../../AMDGPUUsage.rst:3076
msgid "If 1 execute in native wavefront size 32 mode."
msgstr ""

#: ../../../AMDGPUUsage.rst:3079
msgid "463:459"
msgstr ""

#: ../../../AMDGPUUsage.rst:3079 ../../../AMDGPUUsage.rst:3385
msgid "5 bits"
msgstr ""

#: ../../../AMDGPUUsage.rst:3080
msgid "511:464"
msgstr ""

#: ../../../AMDGPUUsage.rst:3080
msgid "6 bytes"
msgstr ""

#: ../../../AMDGPUUsage.rst:3081
msgid "**Total size 64 bytes.**"
msgstr ""

#: ../../../AMDGPUUsage.rst:3086
msgid "compute_pgm_rsrc1 for GFX6-GFX10"
msgstr ""

#: ../../../AMDGPUUsage.rst:3092
msgid "5:0"
msgstr ""

#: ../../../AMDGPUUsage.rst:3092
msgid "6 bits"
msgstr ""

#: ../../../AMDGPUUsage.rst:3092
msgid "GRANULATED_WORKITEM_VGPR_COUNT"
msgstr ""

#: ../../../AMDGPUUsage.rst:3092
msgid ""
"Number of vector register blocks used by each work-item; granularity is "
"device specific:"
msgstr ""

#: ../../../AMDGPUUsage.rst:3098 ../../../AMDGPUUsage.rst:3321
msgid "GFX6-GFX9"
msgstr ""

#: ../../../AMDGPUUsage.rst:3098
msgid "vgprs_used 0..256"
msgstr ""

#: ../../../AMDGPUUsage.rst:3099 ../../../AMDGPUUsage.rst:3102
msgid "max(0, ceil(vgprs_used / 4) - 1)"
msgstr ""

#: ../../../AMDGPUUsage.rst:3101
msgid "GFX10 (wavefront size 64)"
msgstr ""

#: ../../../AMDGPUUsage.rst:3101 ../../../AMDGPUUsage.rst:3104
msgid "max_vgpr 1..256"
msgstr ""

#: ../../../AMDGPUUsage.rst:3105
msgid "GFX10 (wavefront size 32)"
msgstr ""

#: ../../../AMDGPUUsage.rst:3105
msgid "max(0, ceil(vgprs_used / 8) - 1)"
msgstr ""

#: ../../../AMDGPUUsage.rst:3107
msgid ""
"Where vgprs_used is defined as the highest VGPR number explicitly referenced "
"plus one."
msgstr ""

#: ../../../AMDGPUUsage.rst:3112
msgid "Used by CP to set up ``COMPUTE_PGM_RSRC1.VGPRS``."
msgstr ""

#: ../../../AMDGPUUsage.rst:3115
msgid ""
"The :ref:`amdgpu-assembler` calculates this automatically for the selected "
"processor from values provided to the `.amdhsa_kernel` directive by the `."
"amdhsa_next_free_vgpr` nested directive (see :ref:`amdhsa-kernel-directives-"
"table`)."
msgstr ""

#: ../../../AMDGPUUsage.rst:3126
msgid "9:6"
msgstr ""

#: ../../../AMDGPUUsage.rst:3126 ../../../AMDGPUUsage.rst:3531
msgid "4 bits"
msgstr ""

#: ../../../AMDGPUUsage.rst:3126
msgid "GRANULATED_WAVEFRONT_SGPR_COUNT"
msgstr ""

#: ../../../AMDGPUUsage.rst:3126
msgid ""
"Number of scalar register blocks used by a wavefront; granularity is device "
"specific:"
msgstr ""

#: ../../../AMDGPUUsage.rst:3132 ../../../AMDGPUUsage.rst:3302
#: ../../../AMDGPUUsage.rst:3893
msgid "GFX6-GFX8"
msgstr ""

#: ../../../AMDGPUUsage.rst:3132 ../../../AMDGPUUsage.rst:3135
msgid "sgprs_used 0..112"
msgstr ""

#: ../../../AMDGPUUsage.rst:3133
msgid "max(0, ceil(sgprs_used / 8) - 1)"
msgstr ""

#: ../../../AMDGPUUsage.rst:3135
msgid "GFX9"
msgstr ""

#: ../../../AMDGPUUsage.rst:3136
msgid "2 * max(0, ceil(sgprs_used / 16) - 1)"
msgstr ""

#: ../../../AMDGPUUsage.rst:3138
msgid "Reserved, must be 0. (128 SGPRs always allocated.)"
msgstr ""

#: ../../../AMDGPUUsage.rst:3142
msgid ""
"Where sgprs_used is defined as the highest SGPR number explicitly referenced "
"plus one, plus a target specific number of additional special SGPRs for VCC, "
"FLAT_SCRATCH (GFX7+) and XNACK_MASK (GFX8+), and any additional target "
"specific limitations. It does not include the 16 SGPRs added if a trap "
"handler is enabled."
msgstr ""

#: ../../../AMDGPUUsage.rst:3158
msgid ""
"The target specific limitations and special SGPR layout are defined in the "
"hardware documentation, which can be found in the :ref:`amdgpu-processors` "
"table."
msgstr ""

#: ../../../AMDGPUUsage.rst:3167
msgid "Used by CP to set up ``COMPUTE_PGM_RSRC1.SGPRS``."
msgstr ""

#: ../../../AMDGPUUsage.rst:3170
msgid ""
"The :ref:`amdgpu-assembler` calculates this automatically for the selected "
"processor from values provided to the `.amdhsa_kernel` directive by the `."
"amdhsa_next_free_sgpr` and `.amdhsa_reserve_*` nested directives (see :ref:"
"`amdhsa-kernel-directives-table`)."
msgstr ""

#: ../../../AMDGPUUsage.rst:3182
msgid "11:10"
msgstr ""

#: ../../../AMDGPUUsage.rst:3182 ../../../AMDGPUUsage.rst:3190
#: ../../../AMDGPUUsage.rst:3203 ../../../AMDGPUUsage.rst:3216
#: ../../../AMDGPUUsage.rst:3229 ../../../AMDGPUUsage.rst:3320
#: ../../../AMDGPUUsage.rst:3431 ../../../AMDGPUUsage.rst:6676
msgid "2 bits"
msgstr ""

#: ../../../AMDGPUUsage.rst:3182
msgid "PRIORITY"
msgstr ""

#: ../../../AMDGPUUsage.rst:3182 ../../../AMDGPUUsage.rst:3242
#: ../../../AMDGPUUsage.rst:3262 ../../../AMDGPUUsage.rst:3285
#: ../../../AMDGPUUsage.rst:3294 ../../../AMDGPUUsage.rst:3393
#: ../../../AMDGPUUsage.rst:3439 ../../../AMDGPUUsage.rst:3455
#: ../../../AMDGPUUsage.rst:3474
msgid "Must be 0."
msgstr ""

#: ../../../AMDGPUUsage.rst:3184
msgid "Start executing wavefront at the specified priority."
msgstr ""

#: ../../../AMDGPUUsage.rst:3187
msgid "CP is responsible for filling in ``COMPUTE_PGM_RSRC1.PRIORITY``."
msgstr ""

#: ../../../AMDGPUUsage.rst:3190
msgid "13:12"
msgstr ""

#: ../../../AMDGPUUsage.rst:3190
msgid "FLOAT_ROUND_MODE_32"
msgstr ""

#: ../../../AMDGPUUsage.rst:3190
msgid ""
"Wavefront starts execution with specified rounding mode for single (32 bit) "
"floating point precision floating point operations."
msgstr ""

#: ../../../AMDGPUUsage.rst:3197 ../../../AMDGPUUsage.rst:3210
msgid ""
"Floating point rounding mode values are defined in :ref:`amdgpu-amdhsa-"
"floating-point-rounding-mode-enumeration-values-table`."
msgstr ""

#: ../../../AMDGPUUsage.rst:3201 ../../../AMDGPUUsage.rst:3214
#: ../../../AMDGPUUsage.rst:3227 ../../../AMDGPUUsage.rst:3240
msgid "Used by CP to set up ``COMPUTE_PGM_RSRC1.FLOAT_MODE``."
msgstr ""

#: ../../../AMDGPUUsage.rst:3203
msgid "15:14"
msgstr ""

#: ../../../AMDGPUUsage.rst:3203
msgid "FLOAT_ROUND_MODE_16_64"
msgstr ""

#: ../../../AMDGPUUsage.rst:3203
msgid ""
"Wavefront starts execution with specified rounding denorm mode for half/"
"double (16 and 64-bit) floating point precision floating point operations."
msgstr ""

#: ../../../AMDGPUUsage.rst:3216
msgid "17:16"
msgstr ""

#: ../../../AMDGPUUsage.rst:3216
msgid "FLOAT_DENORM_MODE_32"
msgstr ""

#: ../../../AMDGPUUsage.rst:3216
msgid ""
"Wavefront starts execution with specified denorm mode for single (32 bit)  "
"floating point precision floating point operations."
msgstr ""

#: ../../../AMDGPUUsage.rst:3223 ../../../AMDGPUUsage.rst:3236
msgid ""
"Floating point denorm mode values are defined in :ref:`amdgpu-amdhsa-"
"floating-point-denorm-mode-enumeration-values-table`."
msgstr ""

#: ../../../AMDGPUUsage.rst:3229
msgid "19:18"
msgstr ""

#: ../../../AMDGPUUsage.rst:3229
msgid "FLOAT_DENORM_MODE_16_64"
msgstr ""

#: ../../../AMDGPUUsage.rst:3229
msgid ""
"Wavefront starts execution with specified denorm mode for half/double (16 "
"and 64-bit) floating point precision floating point operations."
msgstr ""

#: ../../../AMDGPUUsage.rst:3242
msgid "20"
msgstr ""

#: ../../../AMDGPUUsage.rst:3242
msgid "PRIV"
msgstr ""

#: ../../../AMDGPUUsage.rst:3244
msgid "Start executing wavefront in privilege trap handler mode."
msgstr ""

#: ../../../AMDGPUUsage.rst:3248
msgid "CP is responsible for filling in ``COMPUTE_PGM_RSRC1.PRIV``."
msgstr ""

#: ../../../AMDGPUUsage.rst:3251
msgid "21"
msgstr ""

#: ../../../AMDGPUUsage.rst:3251
msgid "ENABLE_DX10_CLAMP"
msgstr ""

#: ../../../AMDGPUUsage.rst:3251
msgid ""
"Wavefront starts execution with DX10 clamp mode enabled. Used by the vector "
"ALU to force DX10 style treatment of NaN's (when set, clamp NaN to zero, "
"otherwise pass NaN through)."
msgstr ""

#: ../../../AMDGPUUsage.rst:3260
msgid "Used by CP to set up ``COMPUTE_PGM_RSRC1.DX10_CLAMP``."
msgstr ""

#: ../../../AMDGPUUsage.rst:3262
msgid "22"
msgstr ""

#: ../../../AMDGPUUsage.rst:3262
msgid "DEBUG_MODE"
msgstr ""

#: ../../../AMDGPUUsage.rst:3264
msgid "Start executing wavefront in single step mode."
msgstr ""

#: ../../../AMDGPUUsage.rst:3267
msgid "CP is responsible for filling in ``COMPUTE_PGM_RSRC1.DEBUG_MODE``."
msgstr ""

#: ../../../AMDGPUUsage.rst:3270
msgid "23"
msgstr ""

#: ../../../AMDGPUUsage.rst:3270
msgid "ENABLE_IEEE_MODE"
msgstr ""

#: ../../../AMDGPUUsage.rst:3270
msgid ""
"Wavefront starts execution with IEEE mode enabled. Floating point opcodes "
"that support exception flag gathering will quiet and propagate signaling-NaN "
"inputs per IEEE 754-2008. Min_dx10 and max_dx10 become IEEE 754-2008 "
"compliant due to signaling-NaN propagation and quieting."
msgstr ""

#: ../../../AMDGPUUsage.rst:3283
msgid "Used by CP to set up ``COMPUTE_PGM_RSRC1.IEEE_MODE``."
msgstr ""

#: ../../../AMDGPUUsage.rst:3285 ../../../AMDGPUUsage.rst:3495
msgid "24"
msgstr ""

#: ../../../AMDGPUUsage.rst:3285
msgid "BULKY"
msgstr ""

#: ../../../AMDGPUUsage.rst:3287
msgid "Only one work-group allowed to execute on a compute unit."
msgstr ""

#: ../../../AMDGPUUsage.rst:3291
msgid "CP is responsible for filling in ``COMPUTE_PGM_RSRC1.BULKY``."
msgstr ""

#: ../../../AMDGPUUsage.rst:3294 ../../../AMDGPUUsage.rst:3505
msgid "25"
msgstr ""

#: ../../../AMDGPUUsage.rst:3294
msgid "CDBG_USER"
msgstr ""

#: ../../../AMDGPUUsage.rst:3296
msgid "Flag that can be used to control debugging code."
msgstr ""

#: ../../../AMDGPUUsage.rst:3299
msgid "CP is responsible for filling in ``COMPUTE_PGM_RSRC1.CDBG_USER``."
msgstr ""

#: ../../../AMDGPUUsage.rst:3302 ../../../AMDGPUUsage.rst:3508
msgid "26"
msgstr ""

#: ../../../AMDGPUUsage.rst:3302
msgid "FP16_OVFL"
msgstr ""

#: ../../../AMDGPUUsage.rst:3318 ../../../AMDGPUUsage.rst:3724
#: ../../../AMDGPUUsage.rst:3897 ../../../AMDGPUUsage.rst:3956
#: ../../../AMDGPUUsage.rst:7634
msgid "GFX9-GFX10"
msgstr ""

#: ../../../AMDGPUUsage.rst:3305
msgid "Wavefront starts execution with specified fp16 overflow mode."
msgstr ""

#: ../../../AMDGPUUsage.rst:3309
msgid "If 0, fp16 overflow generates +/-INF values."
msgstr ""

#: ../../../AMDGPUUsage.rst:3311
msgid ""
"If 1, fp16 overflow that is the result of an +/-INF input value or divide by "
"0 produces a +/-INF, otherwise clamps computed overflow to +/-MAX_FP16 as "
"appropriate."
msgstr ""

#: ../../../AMDGPUUsage.rst:3318
msgid "Used by CP to set up ``COMPUTE_PGM_RSRC1.FP16_OVFL``."
msgstr ""

#: ../../../AMDGPUUsage.rst:3320
msgid "28:27"
msgstr ""

#: ../../../AMDGPUUsage.rst:3321 ../../../AMDGPUUsage.rst:3514
msgid "29"
msgstr ""

#: ../../../AMDGPUUsage.rst:3321
msgid "WGP_MODE"
msgstr ""

#: ../../../AMDGPUUsage.rst:3324
msgid "If 0 execute work-groups in CU wavefront execution mode."
msgstr ""

#: ../../../AMDGPUUsage.rst:3326
msgid "If 1 execute work-groups on in WGP wavefront execution mode."
msgstr ""

#: ../../../AMDGPUUsage.rst:3329
msgid "See :ref:`amdgpu-amdhsa-memory-model`."
msgstr ""

#: ../../../AMDGPUUsage.rst:3331
msgid "Used by CP to set up ``COMPUTE_PGM_RSRC1.WGP_MODE``."
msgstr ""

#: ../../../AMDGPUUsage.rst:3333 ../../../AMDGPUUsage.rst:3516
msgid "30"
msgstr ""

#: ../../../AMDGPUUsage.rst:3333
msgid "MEM_ORDERED"
msgstr ""

#: ../../../AMDGPUUsage.rst:3336
msgid "Controls the behavior of the waitcnt's vmcnt and vscnt counters."
msgstr ""

#: ../../../AMDGPUUsage.rst:3340
msgid ""
"If 0 vmcnt reports completion of load and atomic with return out of order "
"with sample instructions, and the vscnt reports the completion of store and "
"atomic without return in order."
msgstr ""

#: ../../../AMDGPUUsage.rst:3347
msgid ""
"If 1 vmcnt reports completion of load, atomic with return and sample "
"instructions in order, and the vscnt reports the completion of store and "
"atomic without return in order."
msgstr ""

#: ../../../AMDGPUUsage.rst:3354
msgid "Used by CP to set up ``COMPUTE_PGM_RSRC1.MEM_ORDERED``."
msgstr ""

#: ../../../AMDGPUUsage.rst:3356 ../../../AMDGPUUsage.rst:3519
msgid "31"
msgstr ""

#: ../../../AMDGPUUsage.rst:3356
msgid "FWD_PROGRESS"
msgstr ""

#: ../../../AMDGPUUsage.rst:3359
msgid "If 0 execute SIMD wavefronts using oldest first policy."
msgstr ""

#: ../../../AMDGPUUsage.rst:3361
msgid ""
"If 1 execute SIMD wavefronts to ensure wavefronts will make some forward "
"progress."
msgstr ""

#: ../../../AMDGPUUsage.rst:3365
msgid "Used by CP to set up ``COMPUTE_PGM_RSRC1.FWD_PROGRESS``."
msgstr ""

#: ../../../AMDGPUUsage.rst:3367
msgid "**Total size 4 bytes**"
msgstr ""

#: ../../../AMDGPUUsage.rst:3372
msgid "compute_pgm_rsrc2 for GFX6-GFX10"
msgstr ""

#: ../../../AMDGPUUsage.rst:3378
msgid "ENABLE_SGPR_PRIVATE_SEGMENT _WAVEFRONT_OFFSET"
msgstr ""

#: ../../../AMDGPUUsage.rst:3378
msgid ""
"Enable the setup of the SGPR wavefront scratch offset system register (see :"
"ref:`amdgpu-amdhsa-initial-kernel-execution-state`)."
msgstr ""

#: ../../../AMDGPUUsage.rst:3383
msgid "Used by CP to set up ``COMPUTE_PGM_RSRC2.SCRATCH_EN``."
msgstr ""

#: ../../../AMDGPUUsage.rst:3385
msgid "5:1"
msgstr ""

#: ../../../AMDGPUUsage.rst:3385
msgid "USER_SGPR_COUNT"
msgstr ""

#: ../../../AMDGPUUsage.rst:3385
msgid ""
"The total number of SGPR user data registers requested. This number must "
"match the number of user data registers enabled."
msgstr ""

#: ../../../AMDGPUUsage.rst:3391
msgid "Used by CP to set up ``COMPUTE_PGM_RSRC2.USER_SGPR``."
msgstr ""

#: ../../../AMDGPUUsage.rst:3393
msgid "ENABLE_TRAP_HANDLER"
msgstr ""

#: ../../../AMDGPUUsage.rst:3395
msgid ""
"This bit represents ``COMPUTE_PGM_RSRC2.TRAP_PRESENT``, which is set by the "
"CP if the runtime has installed a trap handler."
msgstr ""

#: ../../../AMDGPUUsage.rst:3400
msgid "ENABLE_SGPR_WORKGROUP_ID_X"
msgstr ""

#: ../../../AMDGPUUsage.rst:3400
msgid ""
"Enable the setup of the system SGPR register for the work-group id in the X "
"dimension (see :ref:`amdgpu-amdhsa-initial-kernel-execution-state`)."
msgstr ""

#: ../../../AMDGPUUsage.rst:3406
msgid "Used by CP to set up ``COMPUTE_PGM_RSRC2.TGID_X_EN``."
msgstr ""

#: ../../../AMDGPUUsage.rst:3408
msgid "ENABLE_SGPR_WORKGROUP_ID_Y"
msgstr ""

#: ../../../AMDGPUUsage.rst:3408
msgid ""
"Enable the setup of the system SGPR register for the work-group id in the Y "
"dimension (see :ref:`amdgpu-amdhsa-initial-kernel-execution-state`)."
msgstr ""

#: ../../../AMDGPUUsage.rst:3414
msgid "Used by CP to set up ``COMPUTE_PGM_RSRC2.TGID_Y_EN``."
msgstr ""

#: ../../../AMDGPUUsage.rst:3416
msgid "ENABLE_SGPR_WORKGROUP_ID_Z"
msgstr ""

#: ../../../AMDGPUUsage.rst:3416
msgid ""
"Enable the setup of the system SGPR register for the work-group id in the Z "
"dimension (see :ref:`amdgpu-amdhsa-initial-kernel-execution-state`)."
msgstr ""

#: ../../../AMDGPUUsage.rst:3422
msgid "Used by CP to set up ``COMPUTE_PGM_RSRC2.TGID_Z_EN``."
msgstr ""

#: ../../../AMDGPUUsage.rst:3424
msgid "ENABLE_SGPR_WORKGROUP_INFO"
msgstr ""

#: ../../../AMDGPUUsage.rst:3424
msgid ""
"Enable the setup of the system SGPR register for work-group information "
"(see :ref:`amdgpu-amdhsa-initial-kernel-execution-state`)."
msgstr ""

#: ../../../AMDGPUUsage.rst:3429
msgid "Used by CP to set up ``COMPUTE_PGM_RSRC2.TGID_SIZE_EN``."
msgstr ""

#: ../../../AMDGPUUsage.rst:3431
msgid "12:11"
msgstr ""

#: ../../../AMDGPUUsage.rst:3431
msgid "ENABLE_VGPR_WORKITEM_ID"
msgstr ""

#: ../../../AMDGPUUsage.rst:3431
msgid ""
"Enable the setup of the VGPR system registers used for the work-item ID. :"
"ref:`amdgpu-amdhsa-system-vgpr-work-item-id-enumeration-values-table` "
"defines the values."
msgstr ""

#: ../../../AMDGPUUsage.rst:3437
msgid "Used by CP to set up ``COMPUTE_PGM_RSRC2.TIDIG_CMP_CNT``."
msgstr ""

#: ../../../AMDGPUUsage.rst:3439
msgid "ENABLE_EXCEPTION_ADDRESS_WATCH"
msgstr ""

#: ../../../AMDGPUUsage.rst:3441
msgid ""
"Wavefront starts execution with address watch exceptions enabled which are "
"generated when L1 has witnessed a thread access an *address of interest*."
msgstr ""

#: ../../../AMDGPUUsage.rst:3449
msgid ""
"CP is responsible for filling in the address watch bit in "
"``COMPUTE_PGM_RSRC2.EXCP_EN_MSB`` according to what the runtime requests."
msgstr ""

#: ../../../AMDGPUUsage.rst:3455
msgid "14"
msgstr ""

#: ../../../AMDGPUUsage.rst:3455
msgid "ENABLE_EXCEPTION_MEMORY"
msgstr ""

#: ../../../AMDGPUUsage.rst:3457
msgid ""
"Wavefront starts execution with memory violation exceptions exceptions "
"enabled which are generated when a memory violation has occurred for this "
"wavefront from L1 or LDS (write-to-read-only-memory, mis-aligned atomic, LDS "
"address out of range, illegal address, etc.)."
msgstr ""

#: ../../../AMDGPUUsage.rst:3469
msgid ""
"CP sets the memory violation bit in ``COMPUTE_PGM_RSRC2.EXCP_EN_MSB`` "
"according to what the runtime requests."
msgstr ""

#: ../../../AMDGPUUsage.rst:3474
msgid "23:15"
msgstr ""

#: ../../../AMDGPUUsage.rst:3474
msgid "9 bits"
msgstr ""

#: ../../../AMDGPUUsage.rst:3474
msgid "GRANULATED_LDS_SIZE"
msgstr ""

#: ../../../AMDGPUUsage.rst:3476
msgid ""
"CP uses the rounded value from the dispatch packet, not this value, as the "
"dispatch may contain dynamically allocated group segment memory. CP writes "
"directly to ``COMPUTE_PGM_RSRC2.LDS_SIZE``."
msgstr ""

#: ../../../AMDGPUUsage.rst:3485
msgid ""
"Amount of group segment (LDS) to allocate for each work-group. Granularity "
"is device specific:"
msgstr ""

#: ../../../AMDGPUUsage.rst:3490
msgid "GFX6:"
msgstr ""

#: ../../../AMDGPUUsage.rst:3491
msgid "roundup(lds-size / (64 * 4))"
msgstr ""

#: ../../../AMDGPUUsage.rst:3493
msgid "GFX7-GFX10:"
msgstr ""

#: ../../../AMDGPUUsage.rst:3493
msgid "roundup(lds-size / (128 * 4))"
msgstr ""

#: ../../../AMDGPUUsage.rst:3495
msgid "ENABLE_EXCEPTION_IEEE_754_FP _INVALID_OPERATION"
msgstr ""

#: ../../../AMDGPUUsage.rst:3495
msgid "Wavefront starts execution with specified exceptions enabled."
msgstr ""

#: ../../../AMDGPUUsage.rst:3499
msgid ""
"Used by CP to set up ``COMPUTE_PGM_RSRC2.EXCP_EN`` (set from bits 0..6)."
msgstr ""

#: ../../../AMDGPUUsage.rst:3503
msgid "IEEE 754 FP Invalid Operation"
msgstr ""

#: ../../../AMDGPUUsage.rst:3505
msgid "ENABLE_EXCEPTION_FP_DENORMAL _SOURCE"
msgstr ""

#: ../../../AMDGPUUsage.rst:3505
msgid "FP Denormal one or more input operands is a denormal number"
msgstr ""

#: ../../../AMDGPUUsage.rst:3508
msgid "ENABLE_EXCEPTION_IEEE_754_FP _DIVISION_BY_ZERO"
msgstr ""

#: ../../../AMDGPUUsage.rst:3508
msgid "IEEE 754 FP Division by Zero"
msgstr ""

#: ../../../AMDGPUUsage.rst:3510
msgid "27"
msgstr ""

#: ../../../AMDGPUUsage.rst:3510
msgid "ENABLE_EXCEPTION_IEEE_754_FP _OVERFLOW"
msgstr ""

#: ../../../AMDGPUUsage.rst:3510
msgid "IEEE 754 FP FP Overflow"
msgstr ""

#: ../../../AMDGPUUsage.rst:3512
msgid "28"
msgstr ""

#: ../../../AMDGPUUsage.rst:3512
msgid "ENABLE_EXCEPTION_IEEE_754_FP _UNDERFLOW"
msgstr ""

#: ../../../AMDGPUUsage.rst:3512
msgid "IEEE 754 FP Underflow"
msgstr ""

#: ../../../AMDGPUUsage.rst:3514
msgid "ENABLE_EXCEPTION_IEEE_754_FP _INEXACT"
msgstr ""

#: ../../../AMDGPUUsage.rst:3514
msgid "IEEE 754 FP Inexact"
msgstr ""

#: ../../../AMDGPUUsage.rst:3516
msgid "ENABLE_EXCEPTION_INT_DIVIDE_BY _ZERO"
msgstr ""

#: ../../../AMDGPUUsage.rst:3516
msgid "Integer Division by Zero (rcp_iflag_f32 instruction only)"
msgstr ""

#: ../../../AMDGPUUsage.rst:3520 ../../../AMDGPUUsage.rst:3535
msgid "**Total size 4 bytes.**"
msgstr ""

#: ../../../AMDGPUUsage.rst:3525
msgid "compute_pgm_rsrc3 for GFX10"
msgstr ""

#: ../../../AMDGPUUsage.rst:3531
msgid "3:0"
msgstr ""

#: ../../../AMDGPUUsage.rst:3531
msgid "SHARED_VGPR_COUNT"
msgstr ""

#: ../../../AMDGPUUsage.rst:3531
msgid ""
"Number of shared VGPRs for wavefront size 64. Granularity 8. Value 0-120. "
"compute_pgm_rsrc1.vgprs + shared_vgpr_cnt cannot exceed 64."
msgstr ""

#: ../../../AMDGPUUsage.rst:3533
msgid "31:4"
msgstr ""

#: ../../../AMDGPUUsage.rst:3533
msgid "28 bits"
msgstr ""

#: ../../../AMDGPUUsage.rst:3540
msgid "Floating Point Rounding Mode Enumeration Values"
msgstr ""

#: ../../../AMDGPUUsage.rst:3544 ../../../AMDGPUUsage.rst:3558
#: ../../../AMDGPUUsage.rst:3573
msgid "Enumeration Name"
msgstr ""

#: ../../../AMDGPUUsage.rst:3546
msgid "FLOAT_ROUND_MODE_NEAR_EVEN"
msgstr ""

#: ../../../AMDGPUUsage.rst:3546
msgid "Round Ties To Even"
msgstr ""

#: ../../../AMDGPUUsage.rst:3547
msgid "FLOAT_ROUND_MODE_PLUS_INFINITY"
msgstr ""

#: ../../../AMDGPUUsage.rst:3547
msgid "Round Toward +infinity"
msgstr ""

#: ../../../AMDGPUUsage.rst:3548
msgid "FLOAT_ROUND_MODE_MINUS_INFINITY"
msgstr ""

#: ../../../AMDGPUUsage.rst:3548
msgid "Round Toward -infinity"
msgstr ""

#: ../../../AMDGPUUsage.rst:3549
msgid "FLOAT_ROUND_MODE_ZERO"
msgstr ""

#: ../../../AMDGPUUsage.rst:3549
msgid "Round Toward 0"
msgstr ""

#: ../../../AMDGPUUsage.rst:3554
msgid "Floating Point Denorm Mode Enumeration Values"
msgstr ""

#: ../../../AMDGPUUsage.rst:3560
msgid "FLOAT_DENORM_MODE_FLUSH_SRC_DST"
msgstr ""

#: ../../../AMDGPUUsage.rst:3560
msgid "Flush Source and Destination Denorms"
msgstr ""

#: ../../../AMDGPUUsage.rst:3562
msgid "FLOAT_DENORM_MODE_FLUSH_DST"
msgstr ""

#: ../../../AMDGPUUsage.rst:3562
msgid "Flush Output Denorms"
msgstr ""

#: ../../../AMDGPUUsage.rst:3563
msgid "FLOAT_DENORM_MODE_FLUSH_SRC"
msgstr ""

#: ../../../AMDGPUUsage.rst:3563
msgid "Flush Source Denorms"
msgstr ""

#: ../../../AMDGPUUsage.rst:3564
msgid "FLOAT_DENORM_MODE_FLUSH_NONE"
msgstr ""

#: ../../../AMDGPUUsage.rst:3564
msgid "No Flush"
msgstr ""

#: ../../../AMDGPUUsage.rst:3569
msgid "System VGPR Work-Item ID Enumeration Values"
msgstr ""

#: ../../../AMDGPUUsage.rst:3575
msgid "SYSTEM_VGPR_WORKITEM_ID_X"
msgstr ""

#: ../../../AMDGPUUsage.rst:3575
msgid "Set work-item X dimension ID."
msgstr ""

#: ../../../AMDGPUUsage.rst:3577
msgid "SYSTEM_VGPR_WORKITEM_ID_X_Y"
msgstr ""

#: ../../../AMDGPUUsage.rst:3577
msgid "Set work-item X and Y dimensions ID."
msgstr ""

#: ../../../AMDGPUUsage.rst:3579
msgid "SYSTEM_VGPR_WORKITEM_ID_X_Y_Z"
msgstr ""

#: ../../../AMDGPUUsage.rst:3579
msgid "Set work-item X, Y and Z dimensions ID."
msgstr ""

#: ../../../AMDGPUUsage.rst:3581
msgid "SYSTEM_VGPR_WORKITEM_ID_UNDEFINED"
msgstr ""

#: ../../../AMDGPUUsage.rst:3581
msgid "Undefined."
msgstr ""

#: ../../../AMDGPUUsage.rst:3587
msgid "Initial Kernel Execution State"
msgstr ""

#: ../../../AMDGPUUsage.rst:3589
msgid ""
"This section defines the register state that will be set up by the packet "
"processor prior to the start of execution of every wavefront. This is "
"limited by the constraints of the hardware controllers of CP/ADC/SPI."
msgstr ""

#: ../../../AMDGPUUsage.rst:3593
msgid ""
"The order of the SGPR registers is defined, but the compiler can specify "
"which ones are actually setup in the kernel descriptor using the "
"``enable_sgpr_*`` bit fields (see :ref:`amdgpu-amdhsa-kernel-descriptor`). "
"The register numbers used for enabled registers are dense starting at SGPR0: "
"the first enabled register is SGPR0, the next enabled register is SGPR1 "
"etc.; disabled registers do not have an SGPR number."
msgstr ""

#: ../../../AMDGPUUsage.rst:3600
msgid ""
"The initial SGPRs comprise up to 16 User SRGPs that are set by CP and apply "
"to all wavefronts of the grid. It is possible to specify more than 16 User "
"SGPRs using the ``enable_sgpr_*`` bit fields, in which case only the first "
"16 are actually initialized. These are then immediately followed by the "
"System SGPRs that are set up by ADC/SPI and can have different values for "
"each wavefront of the grid dispatch."
msgstr ""

#: ../../../AMDGPUUsage.rst:3607
msgid ""
"SGPR register initial state is defined in :ref:`amdgpu-amdhsa-sgpr-register-"
"set-up-order-table`."
msgstr ""

#: ../../../AMDGPUUsage.rst:3610
msgid "SGPR Register Set Up Order"
msgstr ""

#: ../../../AMDGPUUsage.rst:3614
msgid "SGPR Order"
msgstr ""

#: ../../../AMDGPUUsage.rst:3614 ../../../AMDGPUUsage.rst:3817
msgid "Name (kernel descriptor enable field)"
msgstr ""

#: ../../../AMDGPUUsage.rst:3614
msgid "Number of SGPRs"
msgstr ""

#: ../../../AMDGPUUsage.rst:3618 ../../../AMDGPUUsage.rst:3821
msgid "First"
msgstr ""

#: ../../../AMDGPUUsage.rst:3618
msgid "Private Segment Buffer (enable_sgpr_private _segment_buffer)"
msgstr ""

#: ../../../AMDGPUUsage.rst:3618
msgid ""
"V# that can be used, together with Scratch Wavefront Offset as an offset, to "
"access the private address space using a segment address."
msgstr ""

#: ../../../AMDGPUUsage.rst:3624
msgid "CP uses the value provided by the runtime."
msgstr ""

#: ../../../AMDGPUUsage.rst:3626 ../../../AMDGPUUsage.rst:3629
#: ../../../AMDGPUUsage.rst:3633 ../../../AMDGPUUsage.rst:3642
#: ../../../AMDGPUUsage.rst:3645 ../../../AMDGPUUsage.rst:3726
#: ../../../AMDGPUUsage.rst:3748 ../../../AMDGPUUsage.rst:3756
#: ../../../AMDGPUUsage.rst:3767 ../../../AMDGPUUsage.rst:3778
#: ../../../AMDGPUUsage.rst:3781 ../../../AMDGPUUsage.rst:3784
#: ../../../AMDGPUUsage.rst:3787 ../../../AMDGPUUsage.rst:3790
#: ../../../AMDGPUUsage.rst:3824 ../../../AMDGPUUsage.rst:3827
msgid "then"
msgstr ""

#: ../../../AMDGPUUsage.rst:3626
msgid "Dispatch Ptr (enable_sgpr_dispatch_ptr)"
msgstr ""

#: ../../../AMDGPUUsage.rst:3626
msgid ""
"64-bit address of AQL dispatch packet for kernel dispatch actually executing."
msgstr ""

#: ../../../AMDGPUUsage.rst:3629
msgid "Queue Ptr (enable_sgpr_queue_ptr)"
msgstr ""

#: ../../../AMDGPUUsage.rst:3629
msgid ""
"64-bit address of amd_queue_t object for AQL queue on which the dispatch "
"packet was queued."
msgstr ""

#: ../../../AMDGPUUsage.rst:3633
msgid "Kernarg Segment Ptr (enable_sgpr_kernarg _segment_ptr)"
msgstr ""

#: ../../../AMDGPUUsage.rst:3633
msgid ""
"64-bit address of Kernarg segment. This is directly copied from the "
"kernarg_address in the kernel dispatch packet."
msgstr ""

#: ../../../AMDGPUUsage.rst:3639 ../../../AMDGPUUsage.rst:3737
msgid ""
"Having CP load it once avoids loading it at the beginning of every wavefront."
msgstr ""

#: ../../../AMDGPUUsage.rst:3642
msgid "Dispatch Id (enable_sgpr_dispatch_id)"
msgstr ""

#: ../../../AMDGPUUsage.rst:3642
msgid "64-bit Dispatch ID of the dispatch packet being executed."
msgstr ""

#: ../../../AMDGPUUsage.rst:3645
msgid "Flat Scratch Init (enable_sgpr_flat_scratch _init)"
msgstr ""

#: ../../../AMDGPUUsage.rst:3645
msgid "This is 2 SGPRs:"
msgstr ""

#: ../../../AMDGPUUsage.rst:3647 ../../../AMDGPUUsage.rst:3931
msgid "GFX6"
msgstr ""

#: ../../../AMDGPUUsage.rst:3648
msgid "Not supported."
msgstr ""

#: ../../../AMDGPUUsage.rst:3705 ../../../AMDGPUUsage.rst:3933
msgid "GFX7-GFX8"
msgstr ""

#: ../../../AMDGPUUsage.rst:3650
msgid ""
"The first SGPR is a 32-bit byte offset from ``SH_HIDDEN_PRIVATE_BASE_VIMID`` "
"to per SPI base of memory for scratch for the queue executing the kernel "
"dispatch. CP obtains this from the runtime. (The Scratch Segment Buffer base "
"address is ``SH_HIDDEN_PRIVATE_BASE_VIMID`` plus this offset.) The value of "
"Scratch Wavefront Offset must be added to this offset by the kernel machine "
"code, right shifted by 8, and moved to the FLAT_SCRATCH_HI SGPR register. "
"FLAT_SCRATCH_HI corresponds to SGPRn-4 on GFX7, and SGPRn-6 on GFX8 (where "
"SGPRn is the highest numbered SGPR allocated to the wavefront). "
"FLAT_SCRATCH_HI is multiplied by 256 (as it is in units of 256 bytes) and "
"added to ``SH_HIDDEN_PRIVATE_BASE_VIMID`` to calculate the per wavefront "
"FLAT SCRATCH BASE in flat memory instructions that access the scratch "
"aperture."
msgstr ""

#: ../../../AMDGPUUsage.rst:3684
msgid ""
"The second SGPR is 32-bit byte size of a single work-item's scratch memory "
"usage. CP obtains this from the runtime, and it is always a multiple of "
"DWORD. CP checks that the value in the kernel dispatch packet Private "
"Segment Byte Size is not larger and requests the runtime to increase the "
"queue's scratch size if necessary. The kernel code must move it to "
"FLAT_SCRATCH_LO which is SGPRn-3 on GFX7 and SGPRn-5 on GFX8. "
"FLAT_SCRATCH_LO is used as the FLAT SCRATCH SIZE in flat memory "
"instructions. Having CP load it once avoids loading it at the beginning of "
"every wavefront."
msgstr ""

#: ../../../AMDGPUUsage.rst:3708
msgid ""
"This is the 64-bit base address of the per SPI scratch backing memory "
"managed by SPI for the queue executing the kernel dispatch. CP obtains this "
"from the runtime (and divides it if there are multiple Shader Arrays each "
"with its own SPI). The value of Scratch Wavefront Offset must be added by "
"the kernel machine code and the result moved to the FLAT_SCRATCH SGPR which "
"is SGPRn-6 and SGPRn-5. It is used as the FLAT SCRATCH BASE in flat memory "
"instructions."
msgstr ""

#: ../../../AMDGPUUsage.rst:3726
msgid "Private Segment Size"
msgstr ""

#: ../../../AMDGPUUsage.rst:3726
msgid ""
"The 32-bit byte size of a (enable_sgpr_private single work-item's "
"scratch_segment_size) memory allocation. This is the value from the kernel "
"dispatch packet Private Segment Byte Size rounded up by CP to a multiple of "
"DWORD."
msgstr ""

#: ../../../AMDGPUUsage.rst:3741
msgid ""
"This is not used for GFX7-GFX8 since it is the same value as the second SGPR "
"of Flat Scratch Init. However, it may be needed for GFX9-GFX10 which changes "
"the meaning of the Flat Scratch Init value."
msgstr ""

#: ../../../AMDGPUUsage.rst:3748
msgid "Grid Work-Group Count X (enable_sgpr_grid _workgroup_count_X)"
msgstr ""

#: ../../../AMDGPUUsage.rst:3748
msgid ""
"32-bit count of the number of work-groups in the X dimension for the grid "
"being executed. Computed from the fields in the kernel dispatch packet as "
"((grid_size.x + workgroup_size.x - 1) / workgroup_size.x)."
msgstr ""

#: ../../../AMDGPUUsage.rst:3756
msgid ""
"Grid Work-Group Count Y (enable_sgpr_grid _workgroup_count_Y && less than 16 "
"previous SGPRs)"
msgstr ""

#: ../../../AMDGPUUsage.rst:3756
msgid ""
"32-bit count of the number of work-groups in the Y dimension for the grid "
"being executed. Computed from the fields in the kernel dispatch packet as "
"((grid_size.y + workgroup_size.y - 1) / workgroupSize.y)."
msgstr ""

#: ../../../AMDGPUUsage.rst:3765 ../../../AMDGPUUsage.rst:3776
msgid "Only initialized if <16 previous SGPRs initialized."
msgstr ""

#: ../../../AMDGPUUsage.rst:3767
msgid ""
"Grid Work-Group Count Z (enable_sgpr_grid _workgroup_count_Z && less than 16 "
"previous SGPRs)"
msgstr ""

#: ../../../AMDGPUUsage.rst:3767
msgid ""
"32-bit count of the number of work-groups in the Z dimension for the grid "
"being executed. Computed from the fields in the kernel dispatch packet as "
"((grid_size.z + workgroup_size.z - 1) / workgroupSize.z)."
msgstr ""

#: ../../../AMDGPUUsage.rst:3778
msgid "Work-Group Id X (enable_sgpr_workgroup_id _X)"
msgstr ""

#: ../../../AMDGPUUsage.rst:3778
msgid "32-bit work-group id in X dimension of grid for wavefront."
msgstr ""

#: ../../../AMDGPUUsage.rst:3781
msgid "Work-Group Id Y (enable_sgpr_workgroup_id _Y)"
msgstr ""

#: ../../../AMDGPUUsage.rst:3781
msgid "32-bit work-group id in Y dimension of grid for wavefront."
msgstr ""

#: ../../../AMDGPUUsage.rst:3784
msgid "Work-Group Id Z (enable_sgpr_workgroup_id _Z)"
msgstr ""

#: ../../../AMDGPUUsage.rst:3784
msgid "32-bit work-group id in Z dimension of grid for wavefront."
msgstr ""

#: ../../../AMDGPUUsage.rst:3787
msgid "Work-Group Info (enable_sgpr_workgroup _info)"
msgstr ""

#: ../../../AMDGPUUsage.rst:3787
msgid ""
"{first_wavefront, 14'b0000, ordered_append_term[10:0], "
"threadgroup_size_in_wavefronts[5:0]}"
msgstr ""

#: ../../../AMDGPUUsage.rst:3790
msgid ""
"Scratch Wavefront Offset (enable_sgpr_private _segment_wavefront_offset)"
msgstr ""

#: ../../../AMDGPUUsage.rst:3790
msgid ""
"32-bit byte offset from base of scratch base of queue executing the kernel "
"dispatch. Must be used as an offset with Private segment address when using "
"Scratch Segment Buffer. It must be used to set up FLAT SCRATCH for flat "
"addressing (see :ref:`amdgpu-amdhsa-kernel-prolog-flat-scratch`)."
msgstr ""

#: ../../../AMDGPUUsage.rst:3803
msgid ""
"The order of the VGPR registers is defined, but the compiler can specify "
"which ones are actually setup in the kernel descriptor using the "
"``enable_vgpr*`` bit fields (see :ref:`amdgpu-amdhsa-kernel-descriptor`). "
"The register numbers used for enabled registers are dense starting at VGPR0: "
"the first enabled register is VGPR0, the next enabled register is VGPR1 "
"etc.; disabled registers do not have a VGPR number."
msgstr ""

#: ../../../AMDGPUUsage.rst:3810
msgid ""
"VGPR register initial state is defined in :ref:`amdgpu-amdhsa-vgpr-register-"
"set-up-order-table`."
msgstr ""

#: ../../../AMDGPUUsage.rst:3813
msgid "VGPR Register Set Up Order"
msgstr ""

#: ../../../AMDGPUUsage.rst:3817
msgid "VGPR Order"
msgstr ""

#: ../../../AMDGPUUsage.rst:3817
msgid "Number of VGPRs"
msgstr ""

#: ../../../AMDGPUUsage.rst:3821
msgid "Work-Item Id X (Always initialized)"
msgstr ""

#: ../../../AMDGPUUsage.rst:3821
msgid "32-bit work item id in X dimension of work-group for wavefront lane."
msgstr ""

#: ../../../AMDGPUUsage.rst:3824
msgid "Work-Item Id Y (enable_vgpr_workitem_id > 0)"
msgstr ""

#: ../../../AMDGPUUsage.rst:3824
msgid "32-bit work item id in Y dimension of work-group for wavefront lane."
msgstr ""

#: ../../../AMDGPUUsage.rst:3827
msgid "Work-Item Id Z (enable_vgpr_workitem_id > 1)"
msgstr ""

#: ../../../AMDGPUUsage.rst:3827
msgid "32-bit work item id in Z dimension of work-group for wavefront lane."
msgstr ""

#: ../../../AMDGPUUsage.rst:3832
msgid "The setting of registers is done by GPU CP/ADC/SPI hardware as follows:"
msgstr ""

#: ../../../AMDGPUUsage.rst:3834
msgid ""
"SGPRs before the Work-Group Ids are set by CP using the 16 User Data "
"registers."
msgstr ""

#: ../../../AMDGPUUsage.rst:3836
msgid ""
"Work-group Id registers X, Y, Z are set by ADC which supports any "
"combination including none."
msgstr ""

#: ../../../AMDGPUUsage.rst:3838
msgid ""
"Scratch Wavefront Offset is set by SPI in a per wavefront basis which is why "
"its value cannot be included with the flat scratch init value which is per "
"queue."
msgstr ""

#: ../../../AMDGPUUsage.rst:3841
msgid ""
"The VGPRs are set by SPI which only supports specifying either (X), (X, Y) "
"or (X, Y, Z)."
msgstr ""

#: ../../../AMDGPUUsage.rst:3844
msgid ""
"Flat Scratch register pair are adjacent SGPRs so they can be moved as a 64-"
"bit value to the hardware required SGPRn-3 and SGPRn-4 respectively."
msgstr ""

#: ../../../AMDGPUUsage.rst:3847
msgid ""
"The global segment can be accessed either using buffer instructions (GFX6 "
"which has V# 64-bit address support), flat instructions (GFX7-GFX10), or "
"global instructions (GFX9-GFX10)."
msgstr ""

#: ../../../AMDGPUUsage.rst:3851
msgid ""
"If buffer operations are used, then the compiler can generate a V# with the "
"following properties:"
msgstr ""

#: ../../../AMDGPUUsage.rst:3854
msgid "base address of 0"
msgstr ""

#: ../../../AMDGPUUsage.rst:3855
msgid "no swizzle"
msgstr ""

#: ../../../AMDGPUUsage.rst:3856
msgid "ATC: 1 if IOMMU present (such as APU)"
msgstr ""

#: ../../../AMDGPUUsage.rst:3857
msgid "ptr64: 1"
msgstr ""

#: ../../../AMDGPUUsage.rst:3858
msgid ""
"MTYPE set to support memory coherence that matches the runtime (such as CC "
"for APU and NC for dGPU)."
msgstr ""

#: ../../../AMDGPUUsage.rst:3864
msgid "Kernel Prolog"
msgstr ""

#: ../../../AMDGPUUsage.rst:3866
msgid ""
"The compiler performs initialization in the kernel prologue depending on the "
"target and information about things like stack usage in the kernel and "
"called functions. Some of this initialization requires the compiler to "
"request certain User and System SGPRs be present in the :ref:`amdgpu-amdhsa-"
"initial-kernel-execution-state` via the :ref:`amdgpu-amdhsa-kernel-"
"descriptor`."
msgstr ""

#: ../../../AMDGPUUsage.rst:3876
msgid "CFI"
msgstr ""

#: ../../../AMDGPUUsage.rst:3878
msgid "The CFI return address is undefined."
msgstr ""

#: ../../../AMDGPUUsage.rst:3880
msgid ""
"The CFI CFA is defined using an expression which evaluates to a location "
"description that comprises one memory location description for the "
"``DW_ASPACE_AMDGPU_private_lane`` address space address ``0``."
msgstr ""

#: ../../../AMDGPUUsage.rst:3887
msgid "M0"
msgstr ""

#: ../../../AMDGPUUsage.rst:3890
msgid ""
"The M0 register must be initialized with a value at least the total LDS size "
"if the kernel may access LDS via DS or flat operations. Total LDS size is "
"available in dispatch packet. For M0, it is also possible to use maximum "
"possible value of LDS for given target (0x7FFF for GFX6 and 0xFFFF for GFX7-"
"GFX8)."
msgstr ""

#: ../../../AMDGPUUsage.rst:3896
msgid ""
"The M0 register is not used for range checking LDS accesses and so does not "
"need to be initialized in the prolog."
msgstr ""

#: ../../../AMDGPUUsage.rst:3902
msgid "Stack Pointer"
msgstr ""

#: ../../../AMDGPUUsage.rst:3904
msgid ""
"If the kernel has function calls it must set up the ABI stack pointer "
"described in :ref:`amdgpu-amdhsa-function-call-convention-non-kernel-"
"functions` by setting SGPR32 to the unswizzled scratch offset of the address "
"past the last local allocation."
msgstr ""

#: ../../../AMDGPUUsage.rst:3912
msgid "Frame Pointer"
msgstr ""

#: ../../../AMDGPUUsage.rst:3914
msgid ""
"If the kernel needs a frame pointer for the reasons defined in "
"``SIFrameLowering`` then SGPR33 is used and is always set to ``0`` in the "
"kernel prolog. If a frame pointer is not required then all uses of the frame "
"pointer are replaced with immediate ``0`` offsets."
msgstr ""

#: ../../../AMDGPUUsage.rst:3922
msgid "Flat Scratch"
msgstr ""

#: ../../../AMDGPUUsage.rst:3924
msgid ""
"If the kernel or any function it calls may use flat operations to access "
"scratch memory, the prolog code must set up the FLAT_SCRATCH register pair "
"(FLAT_SCRATCH_LO/FLAT_SCRATCH_HI which are in SGPRn-4/SGPRn-3). "
"Initialization uses Flat Scratch Init and Scratch Wavefront Offset SGPR "
"registers (see :ref:`amdgpu-amdhsa-initial-kernel-execution-state`):"
msgstr ""

#: ../../../AMDGPUUsage.rst:3931
msgid "Flat scratch is not supported."
msgstr ""

#: ../../../AMDGPUUsage.rst:3935
msgid ""
"The low word of Flat Scratch Init is 32-bit byte offset from "
"``SH_HIDDEN_PRIVATE_BASE_VIMID`` to the base of scratch backing memory being "
"managed by SPI for the queue executing the kernel dispatch. This is the same "
"value used in the Scratch Segment Buffer V# base address. The prolog must "
"add the value of Scratch Wavefront Offset to get the wavefront's byte "
"scratch backing memory offset from ``SH_HIDDEN_PRIVATE_BASE_VIMID``. Since "
"FLAT_SCRATCH_LO is in units of 256 bytes, the offset must be right shifted "
"by 8 before moving into FLAT_SCRATCH_LO."
msgstr ""

#: ../../../AMDGPUUsage.rst:3944
msgid ""
"The second word of Flat Scratch Init is 32-bit byte size of a single work-"
"items scratch memory usage. This is directly loaded from the kernel dispatch "
"packet Private Segment Byte Size and rounded up to a multiple of DWORD. "
"Having CP load it once avoids loading it at the beginning of every "
"wavefront. The prolog must move it to FLAT_SCRATCH_LO for use as FLAT "
"SCRATCH SIZE."
msgstr ""

#: ../../../AMDGPUUsage.rst:3952
msgid ""
"The Flat Scratch Init is the 64-bit address of the base of scratch backing "
"memory being managed by SPI for the queue executing the kernel dispatch. The "
"prolog must add the value of Scratch Wavefront Offset and moved to the "
"FLAT_SCRATCH pair for use as the flat scratch base in flat memory "
"instructions."
msgstr ""

#: ../../../AMDGPUUsage.rst:3961
msgid "Private Segment Buffer"
msgstr ""

#: ../../../AMDGPUUsage.rst:3963
msgid ""
"A set of four SGPRs beginning at a four-aligned SGPR index are always "
"selected to serve as the scratch V# for the kernel as follows:"
msgstr ""

#: ../../../AMDGPUUsage.rst:3966
msgid ""
"If it is known during instruction selection that there is stack usage, "
"SGPR0-3 is reserved for use as the scratch V#.  Stack usage is assumed if "
"optimizations are disabled (``-O0``), if stack objects already exist (for "
"locals, etc.), or if there are any function calls."
msgstr ""

#: ../../../AMDGPUUsage.rst:3971
msgid ""
"Otherwise, four high numbered SGPRs beginning at a four-aligned SGPR index "
"are reserved for the tentative scratch V#. These will be used if it is "
"determined that spilling is needed."
msgstr ""

#: ../../../AMDGPUUsage.rst:3975
msgid ""
"If no use is made of the tentative scratch V#, then it is unreserved, and "
"the register count is determined ignoring it."
msgstr ""

#: ../../../AMDGPUUsage.rst:3977
msgid ""
"If use is made of the tentative scratch V#, then its register numbers are "
"shifted to the first four-aligned SGPR index after the highest one allocated "
"by the register allocator, and all uses are updated. The register count "
"includes them in the shifted location."
msgstr ""

#: ../../../AMDGPUUsage.rst:3981
msgid ""
"In either case, if the processor has the SGPR allocation bug, the tentative "
"allocation is not shifted or unreserved in order to ensure the register "
"count is higher to workaround the bug."
msgstr ""

#: ../../../AMDGPUUsage.rst:3987
msgid ""
"This approach of using a tentative scratch V# and shifting the register "
"numbers if used avoids having to perform register allocation a second time "
"if the tentative V# is eliminated. This is more efficient and avoids the "
"problem that the second register allocation may perform spilling which will "
"fail as there is no longer a scratch V#."
msgstr ""

#: ../../../AMDGPUUsage.rst:3993
msgid ""
"When the kernel prolog code is being emitted it is known whether the scratch "
"V# described above is actually used. If it is, the prolog code must set it "
"up by copying the Private Segment Buffer to the scratch V# registers and "
"then adding the Private Segment Wavefront Offset to the queue base address "
"in the V#. The result is a V# with a base address pointing to the beginning "
"of the wavefront scratch backing memory."
msgstr ""

#: ../../../AMDGPUUsage.rst:4000
msgid ""
"The Private Segment Buffer is always requested, but the Private Segment "
"Wavefront Offset is only requested if it is used (see :ref:`amdgpu-amdhsa-"
"initial-kernel-execution-state`)."
msgstr ""

#: ../../../AMDGPUUsage.rst:4007
msgid "Memory Model"
msgstr ""

#: ../../../AMDGPUUsage.rst:4009
msgid ""
"This section describes the mapping of LLVM memory model onto AMDGPU machine "
"code (see :ref:`memmodel`)."
msgstr ""

#: ../../../AMDGPUUsage.rst:4012
msgid ""
"The AMDGPU backend supports the memory synchronization scopes specified in :"
"ref:`amdgpu-memory-scopes`."
msgstr ""

#: ../../../AMDGPUUsage.rst:4015
msgid ""
"The code sequences used to implement the memory model are defined in table :"
"ref:`amdgpu-amdhsa-memory-model-code-sequences-gfx6-gfx10-table`."
msgstr ""

#: ../../../AMDGPUUsage.rst:4018
msgid ""
"The sequences specify the order of instructions that a single thread must "
"execute. The ``s_waitcnt`` and ``buffer_wbinvl1_vol`` are defined with "
"respect to other memory instructions executed by the same thread. This "
"allows them to be moved earlier or later which can allow them to be combined "
"with other instances of the same instruction, or hoisted/sunk out of loops "
"to improve performance. Only the instructions related to the memory model "
"are given; additional ``s_waitcnt`` instructions are required to ensure "
"registers are defined before being used. These may be able to be combined "
"with the memory model ``s_waitcnt`` instructions as described above."
msgstr ""

#: ../../../AMDGPUUsage.rst:4028
msgid "The AMDGPU backend supports the following memory models:"
msgstr ""

#: ../../../AMDGPUUsage.rst:4031
msgid "HSA Memory Model [HSA]_"
msgstr ""

#: ../../../AMDGPUUsage.rst:4031
msgid ""
"The HSA memory model uses a single happens-before relation for all address "
"spaces (see :ref:`amdgpu-address-spaces`)."
msgstr ""

#: ../../../AMDGPUUsage.rst:4044
msgid "OpenCL Memory Model [OpenCL]_"
msgstr ""

#: ../../../AMDGPUUsage.rst:4034
msgid ""
"The OpenCL memory model which has separate happens-before relations for the "
"global and local address spaces. Only a fence specifying both global and "
"local address space, and seq_cst instructions join the relationships. Since "
"the LLVM ``memfence`` instruction does not allow an address space to be "
"specified the OpenCL fence has to conservatively assume both local and "
"global address space was specified. However, optimizations can often be done "
"to eliminate the additional ``s_waitcnt`` instructions when there are no "
"intervening memory instructions which access the corresponding address "
"space. The code sequences in the table indicate what can be omitted for the "
"OpenCL memory. The target triple environment is used to determine if the "
"source language is OpenCL (see :ref:`amdgpu-opencl`)."
msgstr ""

#: ../../../AMDGPUUsage.rst:4046
msgid ""
"``ds/flat_load/store/atomic`` instructions to local memory are termed LDS "
"operations."
msgstr ""

#: ../../../AMDGPUUsage.rst:4049
msgid ""
"``buffer/global/flat_load/store/atomic`` instructions to global memory are "
"termed vector memory operations."
msgstr ""

#: ../../../AMDGPUUsage.rst:4052
msgid "For GFX6-GFX9:"
msgstr ""

#: ../../../AMDGPUUsage.rst:4054 ../../../AMDGPUUsage.rst:4104
msgid "Each agent has multiple shader arrays (SA)."
msgstr ""

#: ../../../AMDGPUUsage.rst:4055
msgid "Each SA has multiple compute units (CU)."
msgstr ""

#: ../../../AMDGPUUsage.rst:4056 ../../../AMDGPUUsage.rst:4107
msgid "Each CU has multiple SIMDs that execute wavefronts."
msgstr ""

#: ../../../AMDGPUUsage.rst:4057
msgid ""
"The wavefronts for a single work-group are executed in the same CU but may "
"be executed by different SIMDs."
msgstr ""

#: ../../../AMDGPUUsage.rst:4059
msgid ""
"Each CU has a single LDS memory shared by the wavefronts of the work-groups "
"executing on it."
msgstr ""

#: ../../../AMDGPUUsage.rst:4061
msgid ""
"All LDS operations of a CU are performed as wavefront wide operations in a "
"global order and involve no caching. Completion is reported to a wavefront "
"in execution order."
msgstr ""

#: ../../../AMDGPUUsage.rst:4064
msgid ""
"The LDS memory has multiple request queues shared by the SIMDs of a CU. "
"Therefore, the LDS operations performed by different wavefronts of a work-"
"group can be reordered relative to each other, which can result in "
"reordering the visibility of vector memory operations with respect to LDS "
"operations of other wavefronts in the same work-group. A ``s_waitcnt "
"lgkmcnt(0)`` is required to ensure synchronization between LDS operations "
"and vector memory operations between wavefronts of a work-group, but not "
"between operations performed by the same wavefront."
msgstr ""

#: ../../../AMDGPUUsage.rst:4072
msgid ""
"The vector memory operations are performed as wavefront wide operations and "
"completion is reported to a wavefront in execution order. The exception is "
"that for GFX7-GFX9 ``flat_load/store/atomic`` instructions can report out of "
"vector memory order if they access LDS memory, and out of LDS operation "
"order if they access global memory."
msgstr ""

#: ../../../AMDGPUUsage.rst:4077
msgid ""
"The vector memory operations access a single vector L1 cache shared by all "
"SIMDs a CU. Therefore, no special action is required for coherence between "
"the lanes of a single wavefront, or for coherence between wavefronts in the "
"same work-group. A ``buffer_wbinvl1_vol`` is required for coherence between "
"wavefronts executing in different work-groups as they may be executing on "
"different CUs."
msgstr ""

#: ../../../AMDGPUUsage.rst:4083
msgid ""
"The scalar memory operations access a scalar L1 cache shared by all "
"wavefronts on a group of CUs. The scalar and vector L1 caches are not "
"coherent. However, scalar operations are used in a restricted way so do not "
"impact the memory model. See :ref:`amdgpu-address-spaces`."
msgstr ""

#: ../../../AMDGPUUsage.rst:4087
msgid ""
"The vector and scalar memory operations use an L2 cache shared by all CUs on "
"the same agent."
msgstr ""

#: ../../../AMDGPUUsage.rst:4089 ../../../AMDGPUUsage.rst:4159
msgid ""
"The L2 cache has independent channels to service disjoint ranges of virtual "
"addresses."
msgstr ""

#: ../../../AMDGPUUsage.rst:4091
msgid ""
"Each CU has a separate request queue per channel. Therefore, the vector and "
"scalar memory operations performed by wavefronts executing in different work-"
"groups (which may be executing on different CUs) of an agent can be "
"reordered relative to each other. A ``s_waitcnt vmcnt(0)`` is required to "
"ensure synchronization between vector memory operations of different CUs. It "
"ensures a previous vector memory operation has completed before executing a "
"subsequent vector memory or LDS operation and so can be used to meet the "
"requirements of acquire and release."
msgstr ""

#: ../../../AMDGPUUsage.rst:4099 ../../../AMDGPUUsage.rst:4170
msgid ""
"The L2 cache can be kept coherent with other agents on some targets, or "
"ranges of virtual addresses can be set up to bypass it to ensure system "
"coherence."
msgstr ""

#: ../../../AMDGPUUsage.rst:4102
msgid "For GFX10:"
msgstr ""

#: ../../../AMDGPUUsage.rst:4105
msgid "Each SA has multiple work-group processors (WGP)."
msgstr ""

#: ../../../AMDGPUUsage.rst:4106
msgid "Each WGP has multiple compute units (CU)."
msgstr ""

#: ../../../AMDGPUUsage.rst:4108
msgid ""
"The wavefronts for a single work-group are executed in the same WGP. In CU "
"wavefront execution mode the wavefronts may be executed by different SIMDs "
"in the same CU. In WGP wavefront execution mode the wavefronts may be "
"executed by different SIMDs in different CUs in the same WGP."
msgstr ""

#: ../../../AMDGPUUsage.rst:4113
msgid ""
"Each WGP has a single LDS memory shared by the wavefronts of the work-groups "
"executing on it."
msgstr ""

#: ../../../AMDGPUUsage.rst:4115
msgid ""
"All LDS operations of a WGP are performed as wavefront wide operations in a "
"global order and involve no caching. Completion is reported to a wavefront "
"in execution order."
msgstr ""

#: ../../../AMDGPUUsage.rst:4118
msgid ""
"The LDS memory has multiple request queues shared by the SIMDs of a WGP. "
"Therefore, the LDS operations performed by different wavefronts of a work-"
"group can be reordered relative to each other, which can result in "
"reordering the visibility of vector memory operations with respect to LDS "
"operations of other wavefronts in the same work-group. A ``s_waitcnt "
"lgkmcnt(0)`` is required to ensure synchronization between LDS operations "
"and vector memory operations between wavefronts of a work-group, but not "
"between operations performed by the same wavefront."
msgstr ""

#: ../../../AMDGPUUsage.rst:4126
msgid ""
"The vector memory operations are performed as wavefront wide operations. "
"Completion of load/store/sample operations are reported to a wavefront in "
"execution order of other load/store/sample operations performed by that "
"wavefront."
msgstr ""

#: ../../../AMDGPUUsage.rst:4130
msgid ""
"The vector memory operations access a vector L0 cache. There is a single L0 "
"cache per CU. Each SIMD of a CU accesses the same L0 cache. Therefore, no "
"special action is required for coherence between the lanes of a single "
"wavefront. However, a ``BUFFER_GL0_INV`` is required for coherence between "
"wavefronts executing in the same work-group as they may be executing on "
"SIMDs of different CUs that access different L0s. A ``BUFFER_GL0_INV`` is "
"also required for coherence between wavefronts executing in different work-"
"groups as they may be executing on different WGPs."
msgstr ""

#: ../../../AMDGPUUsage.rst:4138
msgid ""
"The scalar memory operations access a scalar L0 cache shared by all "
"wavefronts on a WGP. The scalar and vector L0 caches are not coherent. "
"However, scalar operations are used in a restricted way so do not impact the "
"memory model. See :ref:`amdgpu-address-spaces`."
msgstr ""

#: ../../../AMDGPUUsage.rst:4142
msgid ""
"The vector and scalar memory L0 caches use an L1 cache shared by all WGPs on "
"the same SA. Therefore, no special action is required for coherence between "
"the wavefronts of a single work-group. However, a ``BUFFER_GL1_INV`` is "
"required for coherence between wavefronts executing in different work-groups "
"as they may be executing on different SAs that access different L1s."
msgstr ""

#: ../../../AMDGPUUsage.rst:4147
msgid ""
"The L1 caches have independent quadrants to service disjoint ranges of "
"virtual addresses."
msgstr ""

#: ../../../AMDGPUUsage.rst:4149
msgid ""
"Each L0 cache has a separate request queue per L1 quadrant. Therefore, the "
"vector and scalar memory operations performed by different wavefronts, "
"whether executing in the same or different work-groups (which may be "
"executing on different CUs accessing different L0s), can be reordered "
"relative to each other. A ``s_waitcnt vmcnt(0) & vscnt(0)`` is required to "
"ensure synchronization between vector memory operations of different "
"wavefronts. It ensures a previous vector memory operation has completed "
"before executing a subsequent vector memory or LDS operation and so can be "
"used to meet the requirements of acquire, release and sequential consistency."
msgstr ""

#: ../../../AMDGPUUsage.rst:4158
msgid "The L1 caches use an L2 cache shared by all SAs on the same agent."
msgstr ""

#: ../../../AMDGPUUsage.rst:4161
msgid ""
"Each L1 quadrant of a single SA accesses a different L2 channel. Each L1 "
"quadrant has a separate request queue per L2 channel. Therefore, the vector "
"and scalar memory operations performed by wavefronts executing in different "
"work-groups (which may be executing on different SAs) of an agent can be "
"reordered relative to each other. A ``s_waitcnt vmcnt(0) & vscnt(0)`` is "
"required to ensure synchronization between vector memory operations of "
"different SAs. It ensures a previous vector memory operation has completed "
"before executing a subsequent vector memory and so can be used to meet the "
"requirements of acquire, release and sequential consistency."
msgstr ""

#: ../../../AMDGPUUsage.rst:4173
msgid ""
"Private address space uses ``buffer_load/store`` using the scratch V# (GFX6-"
"GFX8), or ``scratch_load/store`` (GFX9-GFX10). Since only a single thread is "
"accessing the memory, atomic memory orderings are not meaningful, and all "
"accesses are treated as non-atomic."
msgstr ""

#: ../../../AMDGPUUsage.rst:4178
msgid ""
"Constant address space uses ``buffer/global_load`` instructions (or "
"equivalent scalar memory instructions). Since the constant address space "
"contents do not change during the execution of a kernel dispatch it is not "
"legal to perform stores, and atomic memory orderings are not meaningful, and "
"all access are treated as non-atomic."
msgstr ""

#: ../../../AMDGPUUsage.rst:4184
msgid ""
"A memory synchronization scope wider than work-group is not meaningful for "
"the group (LDS) address space and is treated as work-group."
msgstr ""

#: ../../../AMDGPUUsage.rst:4187
msgid ""
"The memory model does not support the region address space which is treated "
"as non-atomic."
msgstr ""

#: ../../../AMDGPUUsage.rst:4190
msgid ""
"Acquire memory ordering is not meaningful on store atomic instructions and "
"is treated as non-atomic."
msgstr ""

#: ../../../AMDGPUUsage.rst:4193
msgid ""
"Release memory ordering is not meaningful on load atomic instructions and is "
"treated a non-atomic."
msgstr ""

#: ../../../AMDGPUUsage.rst:4196
msgid ""
"Acquire-release memory ordering is not meaningful on load or store atomic "
"instructions and is treated as acquire and release respectively."
msgstr ""

#: ../../../AMDGPUUsage.rst:4199
msgid ""
"AMDGPU backend only uses scalar memory operations to access memory that is "
"proven to not change during the execution of the kernel dispatch. This "
"includes constant address space and global address space for program scope "
"const variables. Therefore, the kernel machine code does not have to "
"maintain the scalar L1 cache to ensure it is coherent with the vector L1 "
"cache. The scalar and vector L1 caches are invalidated between kernel "
"dispatches by CP since constant address space data may change between kernel "
"dispatch executions. See :ref:`amdgpu-address-spaces`."
msgstr ""

#: ../../../AMDGPUUsage.rst:4208
msgid ""
"The one exception is if scalar writes are used to spill SGPR registers. In "
"this case the AMDGPU backend ensures the memory location used to spill is "
"never accessed by vector memory operations at the same time. If scalar "
"writes are used then a ``s_dcache_wb`` is inserted before the ``s_endpgm`` "
"and before a function return since the locations may be used for vector "
"memory instructions by a future wavefront that uses the same scratch area, "
"or a function call that creates a frame at the same address, respectively. "
"There is no need for a ``s_dcache_inv`` as all scalar writes are write-"
"before-read in the same thread."
msgstr ""

#: ../../../AMDGPUUsage.rst:4217
msgid ""
"For GFX6-GFX9, scratch backing memory (which is used for the private address "
"space) is accessed with MTYPE NC_NV (non-coherent non-volatile). Since the "
"private address space is only accessed by a single thread, and is always "
"write-before-read, there is never a need to invalidate these entries from "
"the L1 cache. Hence all cache invalidates are done as ``*_vol`` to only "
"invalidate the volatile cache lines."
msgstr ""

#: ../../../AMDGPUUsage.rst:4224
msgid ""
"For GFX10, scratch backing memory (which is used for the private address "
"space) is accessed with MTYPE NC (non-coherent). Since the private address "
"space is only accessed by a single thread, and is always write-before-read, "
"there is never a need to invalidate these entries from the L0 or L1 caches."
msgstr ""

#: ../../../AMDGPUUsage.rst:4229
msgid ""
"For GFX10, wavefronts are executed in native mode with in-order reporting of "
"loads and sample instructions. In this mode vmcnt reports completion of "
"load, atomic with return and sample instructions in order, and the vscnt "
"reports the completion of store and atomic without return in order. See "
"``MEM_ORDERED`` field in :ref:`amdgpu-amdhsa-compute_pgm_rsrc1-gfx6-gfx10-"
"table`."
msgstr ""

#: ../../../AMDGPUUsage.rst:4235
msgid ""
"In GFX10, wavefronts can be executed in WGP or CU wavefront execution mode:"
msgstr ""

#: ../../../AMDGPUUsage.rst:4237
msgid ""
"In WGP wavefront execution mode the wavefronts of a work-group are executed "
"on the SIMDs of both CUs of the WGP. Therefore, explicit management of the "
"per CU L0 caches is required for work-group synchronization. Also accesses "
"to L1 at work-group scope need to be explicitly ordered as the accesses from "
"different CUs are not ordered."
msgstr ""

#: ../../../AMDGPUUsage.rst:4242
msgid ""
"In CU wavefront execution mode the wavefronts of a work-group are executed "
"on the SIMDs of a single CU of the WGP. Therefore, all global memory access "
"by the work-group access the same L0 which in turn ensures L1 accesses are "
"ordered and so do not require explicit management of the caches for work-"
"group synchronization."
msgstr ""

#: ../../../AMDGPUUsage.rst:4248
msgid ""
"See ``WGP_MODE`` field in :ref:`amdgpu-amdhsa-compute_pgm_rsrc1-gfx6-gfx10-"
"table` and :ref:`amdgpu-target-features`."
msgstr ""

#: ../../../AMDGPUUsage.rst:4252
msgid ""
"On dGPU the kernarg backing memory is accessed as UC (uncached) to avoid "
"needing to invalidate the L2 cache. For GFX6-GFX9, this also causes it to be "
"treated as non-volatile and so is not invalidated by ``*_vol``. On APU it is "
"accessed as CC (cache coherent) and so the L2 cache will be coherent with "
"the CPU and other agents."
msgstr ""

#: ../../../AMDGPUUsage.rst:4258
msgid "AMDHSA Memory Model Code Sequences GFX6-GFX10"
msgstr ""

#: ../../../AMDGPUUsage.rst:4262
msgid "LLVM Instr"
msgstr ""

#: ../../../AMDGPUUsage.rst:4262
msgid "LLVM Memory Ordering"
msgstr ""

#: ../../../AMDGPUUsage.rst:4262
msgid "LLVM Memory Sync Scope"
msgstr ""

#: ../../../AMDGPUUsage.rst:4262
msgid "AMDGPU Address Space"
msgstr ""

#: ../../../AMDGPUUsage.rst:4262
msgid "AMDGPU Machine Code GFX6-9"
msgstr ""

#: ../../../AMDGPUUsage.rst:4262
msgid "AMDGPU Machine Code GFX10"
msgstr ""

#: ../../../AMDGPUUsage.rst:4266
msgid "**Non-Atomic**"
msgstr ""

#: ../../../AMDGPUUsage.rst:4268 ../../../AMDGPUUsage.rst:4282
msgid "load"
msgstr ""

#: ../../../AMDGPUUsage.rst:4269 ../../../AMDGPUUsage.rst:4284
#: ../../../AMDGPUUsage.rst:4302 ../../../AMDGPUUsage.rst:4304
#: ../../../AMDGPUUsage.rst:4312 ../../../AMDGPUUsage.rst:4314
#: ../../../AMDGPUUsage.rst:4322 ../../../AMDGPUUsage.rst:4333
#: ../../../AMDGPUUsage.rst:4383 ../../../AMDGPUUsage.rst:4440
#: ../../../AMDGPUUsage.rst:4469 ../../../AMDGPUUsage.rst:4518
#: ../../../AMDGPUUsage.rst:4579 ../../../AMDGPUUsage.rst:4879
#: ../../../AMDGPUUsage.rst:4970 ../../../AMDGPUUsage.rst:5023
#: ../../../AMDGPUUsage.rst:5070 ../../../AMDGPUUsage.rst:5161
#: ../../../AMDGPUUsage.rst:5214 ../../../AMDGPUUsage.rst:5419
#: ../../../AMDGPUUsage.rst:5558 ../../../AMDGPUUsage.rst:5711
#: ../../../AMDGPUUsage.rst:6027 ../../../AMDGPUUsage.rst:6031
#: ../../../AMDGPUUsage.rst:6219 ../../../AMDGPUUsage.rst:6318
#: ../../../AMDGPUUsage.rst:6322 ../../../AMDGPUUsage.rst:6328
#: ../../../AMDGPUUsage.rst:6332
msgid "generic"
msgstr ""

#: ../../../AMDGPUUsage.rst:4268
msgid "!volatile & !nontemporal"
msgstr ""

#: ../../../AMDGPUUsage.rst:4270 ../../../AMDGPUUsage.rst:4301
#: ../../../AMDGPUUsage.rst:4303 ../../../AMDGPUUsage.rst:4334
msgid "buffer/global/flat_load"
msgstr ""

#: ../../../AMDGPUUsage.rst:4272
msgid "volatile & !nontemporal"
msgstr ""

#: ../../../AMDGPUUsage.rst:4274 ../../../AMDGPUUsage.rst:4303
#: ../../../AMDGPUUsage.rst:4311 ../../../AMDGPUUsage.rst:4415
msgid "buffer/global/flat_load glc=1"
msgstr ""

#: ../../../AMDGPUUsage.rst:4277 ../../../AMDGPUUsage.rst:4287
msgid "nontemporal"
msgstr ""

#: ../../../AMDGPUUsage.rst:4279
msgid "buffer/global/flat_load glc=1 slc=1"
msgstr ""

#: ../../../AMDGPUUsage.rst:4274 ../../../AMDGPUUsage.rst:4311
msgid "buffer/global/flat_load glc=1 dlc=1"
msgstr ""

#: ../../../AMDGPUUsage.rst:4279
msgid "buffer/global/flat_load slc=1"
msgstr ""

#: ../../../AMDGPUUsage.rst:4282 ../../../AMDGPUUsage.rst:4292
#: ../../../AMDGPUUsage.rst:4308 ../../../AMDGPUUsage.rst:4318
#: ../../../AMDGPUUsage.rst:4326 ../../../AMDGPUUsage.rst:4332
#: ../../../AMDGPUUsage.rst:4357 ../../../AMDGPUUsage.rst:4468
#: ../../../AMDGPUUsage.rst:4493 ../../../AMDGPUUsage.rst:4878
#: ../../../AMDGPUUsage.rst:4934 ../../../AMDGPUUsage.rst:5069
#: ../../../AMDGPUUsage.rst:5125 ../../../AMDGPUUsage.rst:5418
#: ../../../AMDGPUUsage.rst:5497 ../../../AMDGPUUsage.rst:6026
#: ../../../AMDGPUUsage.rst:6130 ../../../AMDGPUUsage.rst:6317
#: ../../../AMDGPUUsage.rst:6327
msgid "local"
msgstr ""

#: ../../../AMDGPUUsage.rst:4282 ../../../AMDGPUUsage.rst:4308
#: ../../../AMDGPUUsage.rst:4357
msgid "ds_load"
msgstr ""

#: ../../../AMDGPUUsage.rst:4283 ../../../AMDGPUUsage.rst:4292
msgid "store"
msgstr ""

#: ../../../AMDGPUUsage.rst:4283
msgid "!nontemporal"
msgstr ""

#: ../../../AMDGPUUsage.rst:4285 ../../../AMDGPUUsage.rst:4313
#: ../../../AMDGPUUsage.rst:4933
msgid "buffer/global/flat_store"
msgstr ""

#: ../../../AMDGPUUsage.rst:4289
msgid "buffer/global/flat_store glc=1 slc=1"
msgstr ""

#: ../../../AMDGPUUsage.rst:4289
msgid "buffer/global/flat_store slc=1"
msgstr ""

#: ../../../AMDGPUUsage.rst:4292 ../../../AMDGPUUsage.rst:4318
#: ../../../AMDGPUUsage.rst:4969
msgid "ds_store"
msgstr ""

#: ../../../AMDGPUUsage.rst:4293
msgid "**Unordered Atomic**"
msgstr ""

#: ../../../AMDGPUUsage.rst:4295 ../../../AMDGPUUsage.rst:4301
#: ../../../AMDGPUUsage.rst:4303 ../../../AMDGPUUsage.rst:4308
#: ../../../AMDGPUUsage.rst:4311 ../../../AMDGPUUsage.rst:4331
#: ../../../AMDGPUUsage.rst:4334 ../../../AMDGPUUsage.rst:4357
#: ../../../AMDGPUUsage.rst:4383 ../../../AMDGPUUsage.rst:4415
#: ../../../AMDGPUUsage.rst:4440 ../../../AMDGPUUsage.rst:6025
#: ../../../AMDGPUUsage.rst:6030 ../../../AMDGPUUsage.rst:6130
#: ../../../AMDGPUUsage.rst:6218
msgid "load atomic"
msgstr ""

#: ../../../AMDGPUUsage.rst:4295 ../../../AMDGPUUsage.rst:4296
#: ../../../AMDGPUUsage.rst:4297 ../../../AMDGPUUsage.rst:6354
msgid "unordered"
msgstr ""

#: ../../../AMDGPUUsage.rst:4295 ../../../AMDGPUUsage.rst:4296
#: ../../../AMDGPUUsage.rst:4297
msgid "*any*"
msgstr ""

#: ../../../AMDGPUUsage.rst:4295 ../../../AMDGPUUsage.rst:4296
msgid "*Same as non-atomic*."
msgstr ""

#: ../../../AMDGPUUsage.rst:4296 ../../../AMDGPUUsage.rst:4313
#: ../../../AMDGPUUsage.rst:4318 ../../../AMDGPUUsage.rst:4877
#: ../../../AMDGPUUsage.rst:4880 ../../../AMDGPUUsage.rst:4934
#: ../../../AMDGPUUsage.rst:4970 ../../../AMDGPUUsage.rst:5022
#: ../../../AMDGPUUsage.rst:6316 ../../../AMDGPUUsage.rst:6321
msgid "store atomic"
msgstr ""

#: ../../../AMDGPUUsage.rst:4297 ../../../AMDGPUUsage.rst:4321
#: ../../../AMDGPUUsage.rst:4326 ../../../AMDGPUUsage.rst:4467
#: ../../../AMDGPUUsage.rst:4470 ../../../AMDGPUUsage.rst:4493
#: ../../../AMDGPUUsage.rst:4518 ../../../AMDGPUUsage.rst:4550
#: ../../../AMDGPUUsage.rst:4579 ../../../AMDGPUUsage.rst:5068
#: ../../../AMDGPUUsage.rst:5071 ../../../AMDGPUUsage.rst:5125
#: ../../../AMDGPUUsage.rst:5161 ../../../AMDGPUUsage.rst:5213
#: ../../../AMDGPUUsage.rst:5417 ../../../AMDGPUUsage.rst:5420
#: ../../../AMDGPUUsage.rst:5497 ../../../AMDGPUUsage.rst:5558
#: ../../../AMDGPUUsage.rst:5637 ../../../AMDGPUUsage.rst:5711
#: ../../../AMDGPUUsage.rst:6326 ../../../AMDGPUUsage.rst:6331
msgid "atomicrmw"
msgstr ""

#: ../../../AMDGPUUsage.rst:4297
msgid "*Same as monotonic atomic*."
msgstr ""

#: ../../../AMDGPUUsage.rst:4299
msgid "**Monotonic Atomic**"
msgstr ""

#: ../../../AMDGPUUsage.rst:4301 ../../../AMDGPUUsage.rst:4303
#: ../../../AMDGPUUsage.rst:4308 ../../../AMDGPUUsage.rst:4311
#: ../../../AMDGPUUsage.rst:4313 ../../../AMDGPUUsage.rst:4318
#: ../../../AMDGPUUsage.rst:4321 ../../../AMDGPUUsage.rst:4326
#: ../../../AMDGPUUsage.rst:6355
msgid "monotonic"
msgstr ""

#: ../../../AMDGPUUsage.rst:4301 ../../../AMDGPUUsage.rst:4308
#: ../../../AMDGPUUsage.rst:4313 ../../../AMDGPUUsage.rst:4318
#: ../../../AMDGPUUsage.rst:4321 ../../../AMDGPUUsage.rst:4326
#: ../../../AMDGPUUsage.rst:4331 ../../../AMDGPUUsage.rst:4467
#: ../../../AMDGPUUsage.rst:4610 ../../../AMDGPUUsage.rst:4877
#: ../../../AMDGPUUsage.rst:5068 ../../../AMDGPUUsage.rst:5259
#: ../../../AMDGPUUsage.rst:5417 ../../../AMDGPUUsage.rst:5787
#: ../../../AMDGPUUsage.rst:6025 ../../../AMDGPUUsage.rst:6316
#: ../../../AMDGPUUsage.rst:6326 ../../../AMDGPUUsage.rst:6336
msgid "singlethread"
msgstr ""

#: ../../../AMDGPUUsage.rst:4302 ../../../AMDGPUUsage.rst:4309
#: ../../../AMDGPUUsage.rst:4314 ../../../AMDGPUUsage.rst:4319
#: ../../../AMDGPUUsage.rst:4322 ../../../AMDGPUUsage.rst:4327
#: ../../../AMDGPUUsage.rst:4332 ../../../AMDGPUUsage.rst:4468
#: ../../../AMDGPUUsage.rst:4611 ../../../AMDGPUUsage.rst:4878
#: ../../../AMDGPUUsage.rst:5069 ../../../AMDGPUUsage.rst:5260
#: ../../../AMDGPUUsage.rst:5418 ../../../AMDGPUUsage.rst:5788
#: ../../../AMDGPUUsage.rst:6026 ../../../AMDGPUUsage.rst:6317
#: ../../../AMDGPUUsage.rst:6327 ../../../AMDGPUUsage.rst:6337
msgid "wavefront"
msgstr ""

#: ../../../AMDGPUUsage.rst:4303 ../../../AMDGPUUsage.rst:4310
#: ../../../AMDGPUUsage.rst:4315 ../../../AMDGPUUsage.rst:4320
#: ../../../AMDGPUUsage.rst:4323 ../../../AMDGPUUsage.rst:4328
#: ../../../AMDGPUUsage.rst:4334 ../../../AMDGPUUsage.rst:4357
#: ../../../AMDGPUUsage.rst:4383 ../../../AMDGPUUsage.rst:4470
#: ../../../AMDGPUUsage.rst:4493 ../../../AMDGPUUsage.rst:4518
#: ../../../AMDGPUUsage.rst:4612 ../../../AMDGPUUsage.rst:4880
#: ../../../AMDGPUUsage.rst:4934 ../../../AMDGPUUsage.rst:4970
#: ../../../AMDGPUUsage.rst:5071 ../../../AMDGPUUsage.rst:5125
#: ../../../AMDGPUUsage.rst:5161 ../../../AMDGPUUsage.rst:5261
#: ../../../AMDGPUUsage.rst:5420 ../../../AMDGPUUsage.rst:5497
#: ../../../AMDGPUUsage.rst:5558 ../../../AMDGPUUsage.rst:5789
#: ../../../AMDGPUUsage.rst:6030 ../../../AMDGPUUsage.rst:6130
#: ../../../AMDGPUUsage.rst:6318 ../../../AMDGPUUsage.rst:6328
#: ../../../AMDGPUUsage.rst:6338
msgid "workgroup"
msgstr ""

#: ../../../AMDGPUUsage.rst:4306 ../../../AMDGPUUsage.rst:4336
#: ../../../AMDGPUUsage.rst:4385
msgid "If CU wavefront execution mode, omit glc=1."
msgstr ""

#: ../../../AMDGPUUsage.rst:4311 ../../../AMDGPUUsage.rst:4316
#: ../../../AMDGPUUsage.rst:4324 ../../../AMDGPUUsage.rst:4415
#: ../../../AMDGPUUsage.rst:4440 ../../../AMDGPUUsage.rst:4550
#: ../../../AMDGPUUsage.rst:4579 ../../../AMDGPUUsage.rst:4733
#: ../../../AMDGPUUsage.rst:5022 ../../../AMDGPUUsage.rst:5213
#: ../../../AMDGPUUsage.rst:5342 ../../../AMDGPUUsage.rst:5637
#: ../../../AMDGPUUsage.rst:5711 ../../../AMDGPUUsage.rst:5918
#: ../../../AMDGPUUsage.rst:6218 ../../../AMDGPUUsage.rst:6321
#: ../../../AMDGPUUsage.rst:6331 ../../../AMDGPUUsage.rst:6339
msgid "agent"
msgstr ""

#: ../../../AMDGPUUsage.rst:4312 ../../../AMDGPUUsage.rst:4317
#: ../../../AMDGPUUsage.rst:4325 ../../../AMDGPUUsage.rst:4416
#: ../../../AMDGPUUsage.rst:4441 ../../../AMDGPUUsage.rst:4551
#: ../../../AMDGPUUsage.rst:4580 ../../../AMDGPUUsage.rst:4734
#: ../../../AMDGPUUsage.rst:5023 ../../../AMDGPUUsage.rst:5214
#: ../../../AMDGPUUsage.rst:5343 ../../../AMDGPUUsage.rst:5638
#: ../../../AMDGPUUsage.rst:5712 ../../../AMDGPUUsage.rst:5919
#: ../../../AMDGPUUsage.rst:6219 ../../../AMDGPUUsage.rst:6322
#: ../../../AMDGPUUsage.rst:6332 ../../../AMDGPUUsage.rst:6340
msgid "system"
msgstr ""

#: ../../../AMDGPUUsage.rst:4321 ../../../AMDGPUUsage.rst:4470
#: ../../../AMDGPUUsage.rst:4550 ../../../AMDGPUUsage.rst:5124
#: ../../../AMDGPUUsage.rst:5471 ../../../AMDGPUUsage.rst:5682
msgid "buffer/global/flat_atomic"
msgstr ""

#: ../../../AMDGPUUsage.rst:4326 ../../../AMDGPUUsage.rst:4493
#: ../../../AMDGPUUsage.rst:5160 ../../../AMDGPUUsage.rst:5532
msgid "ds_atomic"
msgstr ""

#: ../../../AMDGPUUsage.rst:4329
msgid "**Acquire Atomic**"
msgstr ""

#: ../../../AMDGPUUsage.rst:4331 ../../../AMDGPUUsage.rst:4334
#: ../../../AMDGPUUsage.rst:4357 ../../../AMDGPUUsage.rst:4383
#: ../../../AMDGPUUsage.rst:4415 ../../../AMDGPUUsage.rst:4440
#: ../../../AMDGPUUsage.rst:4467 ../../../AMDGPUUsage.rst:4470
#: ../../../AMDGPUUsage.rst:4493 ../../../AMDGPUUsage.rst:4518
#: ../../../AMDGPUUsage.rst:4550 ../../../AMDGPUUsage.rst:4579
#: ../../../AMDGPUUsage.rst:4610 ../../../AMDGPUUsage.rst:4612
#: ../../../AMDGPUUsage.rst:4733 ../../../AMDGPUUsage.rst:6356
msgid "acquire"
msgstr ""

#: ../../../AMDGPUUsage.rst:4331
msgid "buffer/global/ds/flat_load"
msgstr ""

#: ../../../AMDGPUUsage.rst:4334
msgid "buffer/global_load glc=1"
msgstr ""

#: ../../../AMDGPUUsage.rst:4338 ../../../AMDGPUUsage.rst:4417
#: ../../../AMDGPUUsage.rst:4551 ../../../AMDGPUUsage.rst:5683
msgid "s_waitcnt vmcnt(0)"
msgstr ""

#: ../../../AMDGPUUsage.rst:4340 ../../../AMDGPUUsage.rst:4351
#: ../../../AMDGPUUsage.rst:4376 ../../../AMDGPUUsage.rst:4409
#: ../../../AMDGPUUsage.rst:4473 ../../../AMDGPUUsage.rst:4487
#: ../../../AMDGPUUsage.rst:4544 ../../../AMDGPUUsage.rst:4727
#: ../../../AMDGPUUsage.rst:4936 ../../../AMDGPUUsage.rst:5127
#: ../../../AMDGPUUsage.rst:5491 ../../../AMDGPUUsage.rst:5499
#: ../../../AMDGPUUsage.rst:5551 ../../../AMDGPUUsage.rst:5631
#: ../../../AMDGPUUsage.rst:5912 ../../../AMDGPUUsage.rst:6138
msgid "If CU wavefront execution mode, omit."
msgstr ""

#: ../../../AMDGPUUsage.rst:4341 ../../../AMDGPUUsage.rst:4361
#: ../../../AMDGPUUsage.rst:4477
msgid ""
"Must happen before the following buffer_gl0_inv and before any following "
"global/generic load/load atomic/store/store atomic/atomicrmw."
msgstr ""

#: ../../../AMDGPUUsage.rst:4349 ../../../AMDGPUUsage.rst:4374
#: ../../../AMDGPUUsage.rst:4407 ../../../AMDGPUUsage.rst:4485
#: ../../../AMDGPUUsage.rst:4510 ../../../AMDGPUUsage.rst:4542
#: ../../../AMDGPUUsage.rst:4725 ../../../AMDGPUUsage.rst:5489
#: ../../../AMDGPUUsage.rst:5549 ../../../AMDGPUUsage.rst:5629
#: ../../../AMDGPUUsage.rst:5910
msgid "buffer_gl0_inv"
msgstr ""

#: ../../../AMDGPUUsage.rst:4352 ../../../AMDGPUUsage.rst:4378
#: ../../../AMDGPUUsage.rst:4410 ../../../AMDGPUUsage.rst:4488
#: ../../../AMDGPUUsage.rst:4513 ../../../AMDGPUUsage.rst:4545
#: ../../../AMDGPUUsage.rst:4728 ../../../AMDGPUUsage.rst:5492
#: ../../../AMDGPUUsage.rst:5553 ../../../AMDGPUUsage.rst:5632
#: ../../../AMDGPUUsage.rst:5913
msgid "Ensures that following loads will not see stale data."
msgstr ""

#: ../../../AMDGPUUsage.rst:4358 ../../../AMDGPUUsage.rst:4387
#: ../../../AMDGPUUsage.rst:4612 ../../../AMDGPUUsage.rst:4880
#: ../../../AMDGPUUsage.rst:4970 ../../../AMDGPUUsage.rst:5071
#: ../../../AMDGPUUsage.rst:5161 ../../../AMDGPUUsage.rst:5261
#: ../../../AMDGPUUsage.rst:5420 ../../../AMDGPUUsage.rst:5533
#: ../../../AMDGPUUsage.rst:5558 ../../../AMDGPUUsage.rst:5610
#: ../../../AMDGPUUsage.rst:5789 ../../../AMDGPUUsage.rst:6030
msgid "s_waitcnt lgkmcnt(0)"
msgstr ""

#: ../../../AMDGPUUsage.rst:4360 ../../../AMDGPUUsage.rst:4377
#: ../../../AMDGPUUsage.rst:4391 ../../../AMDGPUUsage.rst:4496
#: ../../../AMDGPUUsage.rst:4523 ../../../AMDGPUUsage.rst:4885
#: ../../../AMDGPUUsage.rst:4937 ../../../AMDGPUUsage.rst:4975
#: ../../../AMDGPUUsage.rst:5076 ../../../AMDGPUUsage.rst:5128
#: ../../../AMDGPUUsage.rst:5166 ../../../AMDGPUUsage.rst:5425
#: ../../../AMDGPUUsage.rst:5500 ../../../AMDGPUUsage.rst:5535
#: ../../../AMDGPUUsage.rst:5563 ../../../AMDGPUUsage.rst:5614
msgid "If OpenCL, omit."
msgstr ""

#: ../../../AMDGPUUsage.rst:4361 ../../../AMDGPUUsage.rst:4393
#: ../../../AMDGPUUsage.rst:4497 ../../../AMDGPUUsage.rst:4529
#: ../../../AMDGPUUsage.rst:4651 ../../../AMDGPUUsage.rst:4865
#: ../../../AMDGPUUsage.rst:5536 ../../../AMDGPUUsage.rst:5616
#: ../../../AMDGPUUsage.rst:5846 ../../../AMDGPUUsage.rst:6009
msgid ""
"Must happen before any following global/generic load/load atomic/store/store "
"atomic/atomicrmw."
msgstr ""

#: ../../../AMDGPUUsage.rst:4367 ../../../AMDGPUUsage.rst:4400
#: ../../../AMDGPUUsage.rst:5542 ../../../AMDGPUUsage.rst:5622
msgid ""
"Ensures any following global data read is no older than the load atomic "
"value being acquired."
msgstr ""

#: ../../../AMDGPUUsage.rst:4383
msgid "flat_load"
msgstr ""

#: ../../../AMDGPUUsage.rst:4383 ../../../AMDGPUUsage.rst:4440
msgid "flat_load glc=1"
msgstr ""

#: ../../../AMDGPUUsage.rst:4387 ../../../AMDGPUUsage.rst:4733
#: ../../../AMDGPUUsage.rst:5022 ../../../AMDGPUUsage.rst:5213
#: ../../../AMDGPUUsage.rst:5342 ../../../AMDGPUUsage.rst:5637
#: ../../../AMDGPUUsage.rst:5711 ../../../AMDGPUUsage.rst:5918
#: ../../../AMDGPUUsage.rst:6218
msgid "s_waitcnt lgkmcnt(0) & vmcnt(0)"
msgstr ""

#: ../../../AMDGPUUsage.rst:4390
msgid "If CU wavefront execution mode, omit vmcnt."
msgstr ""

#: ../../../AMDGPUUsage.rst:4391 ../../../AMDGPUUsage.rst:4583
#: ../../../AMDGPUUsage.rst:4885 ../../../AMDGPUUsage.rst:4975
#: ../../../AMDGPUUsage.rst:5025 ../../../AMDGPUUsage.rst:5216
#: ../../../AMDGPUUsage.rst:5640 ../../../AMDGPUUsage.rst:5714
#: ../../../AMDGPUUsage.rst:5760
msgid "If OpenCL, omit lgkmcnt(0)."
msgstr ""

#: ../../../AMDGPUUsage.rst:4393
msgid ""
"Must happen before the following buffer_gl0_inv and any following global/"
"generic load/load atomic/store/store atomic/atomicrmw."
msgstr ""

#: ../../../AMDGPUUsage.rst:4419 ../../../AMDGPUUsage.rst:4446
#: ../../../AMDGPUUsage.rst:4557 ../../../AMDGPUUsage.rst:4588
#: ../../../AMDGPUUsage.rst:5689 ../../../AMDGPUUsage.rst:5765
msgid "Must happen before following buffer_wbinvl1_vol."
msgstr ""

#: ../../../AMDGPUUsage.rst:4422
msgid "Ensures the load has completed before invalidating the cache."
msgstr ""

#: ../../../AMDGPUUsage.rst:4427 ../../../AMDGPUUsage.rst:4454
#: ../../../AMDGPUUsage.rst:4566 ../../../AMDGPUUsage.rst:4597
#: ../../../AMDGPUUsage.rst:4862 ../../../AMDGPUUsage.rst:5698
#: ../../../AMDGPUUsage.rst:5774 ../../../AMDGPUUsage.rst:6006
msgid "buffer_wbinvl1_vol"
msgstr ""

#: ../../../AMDGPUUsage.rst:4430 ../../../AMDGPUUsage.rst:4457
#: ../../../AMDGPUUsage.rst:4569 ../../../AMDGPUUsage.rst:4600
#: ../../../AMDGPUUsage.rst:5701 ../../../AMDGPUUsage.rst:5777
msgid ""
"Must happen before any following global/generic load/load atomic/atomicrmw."
msgstr ""

#: ../../../AMDGPUUsage.rst:4435 ../../../AMDGPUUsage.rst:4462
#: ../../../AMDGPUUsage.rst:4574 ../../../AMDGPUUsage.rst:4605
#: ../../../AMDGPUUsage.rst:4870 ../../../AMDGPUUsage.rst:5706
#: ../../../AMDGPUUsage.rst:5782
msgid "Ensures that following loads will not see stale global data."
msgstr ""

#: ../../../AMDGPUUsage.rst:4415
msgid "buffer/global_load glc=1 dlc=1"
msgstr ""

#: ../../../AMDGPUUsage.rst:4419 ../../../AMDGPUUsage.rst:4557
#: ../../../AMDGPUUsage.rst:4588 ../../../AMDGPUUsage.rst:5689
#: ../../../AMDGPUUsage.rst:5765
msgid "Must happen before following buffer_gl*_inv."
msgstr ""

#: ../../../AMDGPUUsage.rst:4422
msgid "Ensures the load has completed before invalidating the caches."
msgstr ""

#: ../../../AMDGPUUsage.rst:4427 ../../../AMDGPUUsage.rst:4454
#: ../../../AMDGPUUsage.rst:4566 ../../../AMDGPUUsage.rst:4597
#: ../../../AMDGPUUsage.rst:4862 ../../../AMDGPUUsage.rst:5698
#: ../../../AMDGPUUsage.rst:5774 ../../../AMDGPUUsage.rst:6006
msgid "buffer_gl0_inv; buffer_gl1_inv"
msgstr ""

#: ../../../AMDGPUUsage.rst:4441 ../../../AMDGPUUsage.rst:4580
#: ../../../AMDGPUUsage.rst:5757
msgid "s_waitcnt vmcnt(0) & lgkmcnt(0)"
msgstr ""

#: ../../../AMDGPUUsage.rst:4444
msgid "If OpenCL omit lgkmcnt(0)."
msgstr ""

#: ../../../AMDGPUUsage.rst:4449
msgid "Ensures the flat_load has completed before invalidating the cache."
msgstr ""

#: ../../../AMDGPUUsage.rst:4440
msgid "flat_load glc=1 dlc=1"
msgstr ""

#: ../../../AMDGPUUsage.rst:4446
msgid "Must happen before following buffer_gl*_invl."
msgstr ""

#: ../../../AMDGPUUsage.rst:4449
msgid "Ensures the flat_load has completed before invalidating the caches."
msgstr ""

#: ../../../AMDGPUUsage.rst:4467 ../../../AMDGPUUsage.rst:5068
#: ../../../AMDGPUUsage.rst:5258 ../../../AMDGPUUsage.rst:5417
msgid "buffer/global/ds/flat_atomic"
msgstr ""

#: ../../../AMDGPUUsage.rst:4470 ../../../AMDGPUUsage.rst:4550
#: ../../../AMDGPUUsage.rst:5124 ../../../AMDGPUUsage.rst:5471
#: ../../../AMDGPUUsage.rst:5682
msgid "buffer/global_atomic"
msgstr ""

#: ../../../AMDGPUUsage.rst:4471 ../../../AMDGPUUsage.rst:4551
#: ../../../AMDGPUUsage.rst:5472 ../../../AMDGPUUsage.rst:5683
msgid "s_waitcnt vm/vscnt(0)"
msgstr ""

#: ../../../AMDGPUUsage.rst:4474 ../../../AMDGPUUsage.rst:4585
#: ../../../AMDGPUUsage.rst:5762
msgid "Use vmcnt if atomic with return and vscnt if atomic with no-return."
msgstr ""

#: ../../../AMDGPUUsage.rst:4494 ../../../AMDGPUUsage.rst:4519
msgid "waitcnt lgkmcnt(0)"
msgstr ""

#: ../../../AMDGPUUsage.rst:4503 ../../../AMDGPUUsage.rst:4535
#: ../../../AMDGPUUsage.rst:5482
msgid ""
"Ensures any following global data read is no older than the atomicrmw value "
"being acquired."
msgstr ""

#: ../../../AMDGPUUsage.rst:4497 ../../../AMDGPUUsage.rst:4529
#: ../../../AMDGPUUsage.rst:4709 ../../../AMDGPUUsage.rst:5479
#: ../../../AMDGPUUsage.rst:5536 ../../../AMDGPUUsage.rst:5616
#: ../../../AMDGPUUsage.rst:5894
msgid "Must happen before the following buffer_gl0_inv."
msgstr ""

#: ../../../AMDGPUUsage.rst:4512 ../../../AMDGPUUsage.rst:5552
msgid "If OpenCL omit."
msgstr ""

#: ../../../AMDGPUUsage.rst:4518 ../../../AMDGPUUsage.rst:4579
#: ../../../AMDGPUUsage.rst:5212 ../../../AMDGPUUsage.rst:5609
#: ../../../AMDGPUUsage.rst:5756
msgid "flat_atomic"
msgstr ""

#: ../../../AMDGPUUsage.rst:4519
msgid "waitcnt lgkmcnt(0) & vm/vscnt(0)"
msgstr ""

#: ../../../AMDGPUUsage.rst:4522 ../../../AMDGPUUsage.rst:5474
#: ../../../AMDGPUUsage.rst:5613
msgid "If CU wavefront execution mode, omit vm/vscnt."
msgstr ""

#: ../../../AMDGPUUsage.rst:4523
msgid "If OpenCL, omit waitcnt lgkmcnt(0).."
msgstr ""

#: ../../../AMDGPUUsage.rst:4525 ../../../AMDGPUUsage.rst:4553
#: ../../../AMDGPUUsage.rst:5475 ../../../AMDGPUUsage.rst:5685
msgid ""
"Use vmcnt if atomic with return and vscnt if atomic with no-return. waitcnt "
"lgkmcnt(0)."
msgstr ""

#: ../../../AMDGPUUsage.rst:4560 ../../../AMDGPUUsage.rst:4591
#: ../../../AMDGPUUsage.rst:5692 ../../../AMDGPUUsage.rst:5768
msgid "Ensures the atomicrmw has completed before invalidating the cache."
msgstr ""

#: ../../../AMDGPUUsage.rst:4560 ../../../AMDGPUUsage.rst:4591
#: ../../../AMDGPUUsage.rst:5692 ../../../AMDGPUUsage.rst:5768
msgid "Ensures the atomicrmw has completed before invalidating the caches."
msgstr ""

#: ../../../AMDGPUUsage.rst:4580 ../../../AMDGPUUsage.rst:5757
msgid "s_waitcnt vm/vscnt(0) & lgkmcnt(0)"
msgstr ""

#: ../../../AMDGPUUsage.rst:4610 ../../../AMDGPUUsage.rst:4612
#: ../../../AMDGPUUsage.rst:4733 ../../../AMDGPUUsage.rst:5259
#: ../../../AMDGPUUsage.rst:5261 ../../../AMDGPUUsage.rst:5342
#: ../../../AMDGPUUsage.rst:5787 ../../../AMDGPUUsage.rst:5789
#: ../../../AMDGPUUsage.rst:5918 ../../../AMDGPUUsage.rst:6336
msgid "fence"
msgstr ""

#: ../../../AMDGPUUsage.rst:4617 ../../../AMDGPUUsage.rst:5266
#: ../../../AMDGPUUsage.rst:5794
msgid "If OpenCL and address space is not generic, omit."
msgstr ""

#: ../../../AMDGPUUsage.rst:4625 ../../../AMDGPUUsage.rst:5274
#: ../../../AMDGPUUsage.rst:5353
msgid ""
"However, since LLVM currently has no address space on the fence need to "
"conservatively always generate. If fence had an address space then set to "
"address space of OpenCL fence flag, or to generic if both local and global "
"flags are specified."
msgstr ""

#: ../../../AMDGPUUsage.rst:4640
msgid ""
"Must happen after any preceding local/generic load atomic/atomicrmw with an "
"equal or wider sync scope and memory ordering stronger than unordered (this "
"is termed the fence-paired-atomic)."
msgstr ""

#: ../../../AMDGPUUsage.rst:4657
msgid ""
"Ensures any following global data read is no older than the value read by "
"the fence-paired-atomic."
msgstr ""

#: ../../../AMDGPUUsage.rst:4612 ../../../AMDGPUUsage.rst:4733
#: ../../../AMDGPUUsage.rst:4880 ../../../AMDGPUUsage.rst:4970
#: ../../../AMDGPUUsage.rst:5022 ../../../AMDGPUUsage.rst:5071
#: ../../../AMDGPUUsage.rst:5161 ../../../AMDGPUUsage.rst:5261
#: ../../../AMDGPUUsage.rst:5342 ../../../AMDGPUUsage.rst:5420
#: ../../../AMDGPUUsage.rst:5558 ../../../AMDGPUUsage.rst:5637
#: ../../../AMDGPUUsage.rst:5711 ../../../AMDGPUUsage.rst:5789
#: ../../../AMDGPUUsage.rst:5918 ../../../AMDGPUUsage.rst:6030
#: ../../../AMDGPUUsage.rst:6218
msgid "s_waitcnt lgkmcnt(0) & vmcnt(0) & vscnt(0)"
msgstr ""

#: ../../../AMDGPUUsage.rst:4615 ../../../AMDGPUUsage.rst:4883
#: ../../../AMDGPUUsage.rst:4973 ../../../AMDGPUUsage.rst:5074
#: ../../../AMDGPUUsage.rst:5164 ../../../AMDGPUUsage.rst:5264
#: ../../../AMDGPUUsage.rst:5423 ../../../AMDGPUUsage.rst:5561
#: ../../../AMDGPUUsage.rst:5792 ../../../AMDGPUUsage.rst:6033
msgid "If CU wavefront execution mode, omit vmcnt and vscnt."
msgstr ""

#: ../../../AMDGPUUsage.rst:4617 ../../../AMDGPUUsage.rst:4736
#: ../../../AMDGPUUsage.rst:5266 ../../../AMDGPUUsage.rst:5345
#: ../../../AMDGPUUsage.rst:5794 ../../../AMDGPUUsage.rst:5921
msgid "If OpenCL and address space is not generic, omit lgkmcnt(0)."
msgstr ""

#: ../../../AMDGPUUsage.rst:4621 ../../../AMDGPUUsage.rst:4740
#: ../../../AMDGPUUsage.rst:5270 ../../../AMDGPUUsage.rst:5349
#: ../../../AMDGPUUsage.rst:5798 ../../../AMDGPUUsage.rst:5925
msgid "If OpenCL and address space is local, omit vmcnt(0) and vscnt(0)."
msgstr ""

#: ../../../AMDGPUUsage.rst:4663 ../../../AMDGPUUsage.rst:4800
#: ../../../AMDGPUUsage.rst:4893 ../../../AMDGPUUsage.rst:4983
#: ../../../AMDGPUUsage.rst:5027 ../../../AMDGPUUsage.rst:5084
#: ../../../AMDGPUUsage.rst:5174 ../../../AMDGPUUsage.rst:5218
#: ../../../AMDGPUUsage.rst:5295 ../../../AMDGPUUsage.rst:5368
#: ../../../AMDGPUUsage.rst:5433 ../../../AMDGPUUsage.rst:5571
#: ../../../AMDGPUUsage.rst:5642 ../../../AMDGPUUsage.rst:5716
#: ../../../AMDGPUUsage.rst:5817 ../../../AMDGPUUsage.rst:5937
#: ../../../AMDGPUUsage.rst:6035 ../../../AMDGPUUsage.rst:6221
msgid ""
"Could be split into separate s_waitcnt vmcnt(0), s_waitcnt vscnt(0) and "
"s_waitcnt lgkmcnt(0) to allow them to be independently moved according to "
"the following rules."
msgstr ""

#: ../../../AMDGPUUsage.rst:4672 ../../../AMDGPUUsage.rst:4809
msgid ""
"s_waitcnt vmcnt(0) must happen after any preceding global/generic load "
"atomic/ atomicrmw-with-return-value with an equal or wider sync scope and "
"memory ordering stronger than unordered (this is termed the fence-paired-"
"atomic)."
msgstr ""

#: ../../../AMDGPUUsage.rst:4685 ../../../AMDGPUUsage.rst:4822
msgid ""
"s_waitcnt vscnt(0) must happen after any preceding global/generic atomicrmw-"
"no-return-value with an equal or wider sync scope and memory ordering "
"stronger than unordered (this is termed the fence-paired-atomic)."
msgstr ""

#: ../../../AMDGPUUsage.rst:4697 ../../../AMDGPUUsage.rst:4773
#: ../../../AMDGPUUsage.rst:4834
msgid ""
"s_waitcnt lgkmcnt(0) must happen after any preceding local/generic load "
"atomic/atomicrmw with an equal or wider sync scope and memory ordering "
"stronger than unordered (this is termed the fence-paired-atomic)."
msgstr ""

#: ../../../AMDGPUUsage.rst:4712 ../../../AMDGPUUsage.rst:4788
msgid ""
"Ensures that the fence-paired atomic has completed before invalidating the "
"cache. Therefore any following locations read must be no older than the "
"value read by the fence-paired-atomic."
msgstr ""

#: ../../../AMDGPUUsage.rst:4744 ../../../AMDGPUUsage.rst:5802
#: ../../../AMDGPUUsage.rst:5929
msgid ""
"However, since LLVM currently has no address space on the fence need to "
"conservatively always generate (see comment for previous fence)."
msgstr ""

#: ../../../AMDGPUUsage.rst:4752 ../../../AMDGPUUsage.rst:5027
#: ../../../AMDGPUUsage.rst:5218 ../../../AMDGPUUsage.rst:5368
#: ../../../AMDGPUUsage.rst:5642 ../../../AMDGPUUsage.rst:5716
#: ../../../AMDGPUUsage.rst:5937 ../../../AMDGPUUsage.rst:6221
msgid ""
"Could be split into separate s_waitcnt vmcnt(0) and s_waitcnt lgkmcnt(0) to "
"allow them to be independently moved according to the following rules."
msgstr ""

#: ../../../AMDGPUUsage.rst:4761
msgid ""
"s_waitcnt vmcnt(0) must happen after any preceding global/generic load "
"atomic/atomicrmw with an equal or wider sync scope and memory ordering "
"stronger than unordered (this is termed the fence-paired-atomic)."
msgstr ""

#: ../../../AMDGPUUsage.rst:4785 ../../../AMDGPUUsage.rst:5966
msgid "Must happen before the following buffer_wbinvl1_vol."
msgstr ""

#: ../../../AMDGPUUsage.rst:4846 ../../../AMDGPUUsage.rst:5966
msgid "Must happen before the following buffer_gl*_inv."
msgstr ""

#: ../../../AMDGPUUsage.rst:4849
msgid ""
"Ensures that the fence-paired atomic has completed before invalidating the "
"caches. Therefore any following locations read must be no older than the "
"value read by the fence-paired-atomic."
msgstr ""

#: ../../../AMDGPUUsage.rst:4875
msgid "**Release Atomic**"
msgstr ""

#: ../../../AMDGPUUsage.rst:4877 ../../../AMDGPUUsage.rst:4880
#: ../../../AMDGPUUsage.rst:4934 ../../../AMDGPUUsage.rst:4970
#: ../../../AMDGPUUsage.rst:5022 ../../../AMDGPUUsage.rst:5068
#: ../../../AMDGPUUsage.rst:5071 ../../../AMDGPUUsage.rst:5125
#: ../../../AMDGPUUsage.rst:5161 ../../../AMDGPUUsage.rst:5213
#: ../../../AMDGPUUsage.rst:5259 ../../../AMDGPUUsage.rst:5261
#: ../../../AMDGPUUsage.rst:5342 ../../../AMDGPUUsage.rst:6361
msgid "release"
msgstr ""

#: ../../../AMDGPUUsage.rst:4877 ../../../AMDGPUUsage.rst:5067
msgid "buffer/global/ds/flat_store"
msgstr ""

#: ../../../AMDGPUUsage.rst:4887 ../../../AMDGPUUsage.rst:4977
#: ../../../AMDGPUUsage.rst:5078 ../../../AMDGPUUsage.rst:5168
#: ../../../AMDGPUUsage.rst:5427 ../../../AMDGPUUsage.rst:5565
msgid ""
"Must happen after any preceding local/generic load/store/load atomic/store "
"atomic/atomicrmw."
msgstr ""

#: ../../../AMDGPUUsage.rst:4922 ../../../AMDGPUUsage.rst:4958
#: ../../../AMDGPUUsage.rst:5010 ../../../AMDGPUUsage.rst:5056
#: ../../../AMDGPUUsage.rst:5149 ../../../AMDGPUUsage.rst:5521
msgid "Must happen before the following store."
msgstr ""

#: ../../../AMDGPUUsage.rst:4925 ../../../AMDGPUUsage.rst:5013
msgid ""
"Ensures that all memory operations to local have completed before performing "
"the store that is being released."
msgstr ""

#: ../../../AMDGPUUsage.rst:4902 ../../../AMDGPUUsage.rst:4946
#: ../../../AMDGPUUsage.rst:4992 ../../../AMDGPUUsage.rst:5036
#: ../../../AMDGPUUsage.rst:5093 ../../../AMDGPUUsage.rst:5137
#: ../../../AMDGPUUsage.rst:5183 ../../../AMDGPUUsage.rst:5227
#: ../../../AMDGPUUsage.rst:5304 ../../../AMDGPUUsage.rst:5377
#: ../../../AMDGPUUsage.rst:5442 ../../../AMDGPUUsage.rst:5509
#: ../../../AMDGPUUsage.rst:5580 ../../../AMDGPUUsage.rst:5651
#: ../../../AMDGPUUsage.rst:5826 ../../../AMDGPUUsage.rst:5946
msgid ""
"s_waitcnt vmcnt(0) must happen after any preceding global/generic load/load "
"atomic/ atomicrmw-with-return-value."
msgstr ""

#: ../../../AMDGPUUsage.rst:4908 ../../../AMDGPUUsage.rst:4952
#: ../../../AMDGPUUsage.rst:4998 ../../../AMDGPUUsage.rst:5043
#: ../../../AMDGPUUsage.rst:5099 ../../../AMDGPUUsage.rst:5143
#: ../../../AMDGPUUsage.rst:5189 ../../../AMDGPUUsage.rst:5234
#: ../../../AMDGPUUsage.rst:5311 ../../../AMDGPUUsage.rst:5384
#: ../../../AMDGPUUsage.rst:5448 ../../../AMDGPUUsage.rst:5515
#: ../../../AMDGPUUsage.rst:5586 ../../../AMDGPUUsage.rst:5658
#: ../../../AMDGPUUsage.rst:5732 ../../../AMDGPUUsage.rst:5833
#: ../../../AMDGPUUsage.rst:5953
msgid ""
"s_waitcnt vscnt(0) must happen after any preceding global/generic store/"
"store atomic/ atomicrmw-no-return-value."
msgstr ""

#: ../../../AMDGPUUsage.rst:4915 ../../../AMDGPUUsage.rst:5005
#: ../../../AMDGPUUsage.rst:5049 ../../../AMDGPUUsage.rst:5106
#: ../../../AMDGPUUsage.rst:5196 ../../../AMDGPUUsage.rst:5240
#: ../../../AMDGPUUsage.rst:5390 ../../../AMDGPUUsage.rst:5455
#: ../../../AMDGPUUsage.rst:5593 ../../../AMDGPUUsage.rst:5664
#: ../../../AMDGPUUsage.rst:5738 ../../../AMDGPUUsage.rst:5959
msgid ""
"s_waitcnt lgkmcnt(0) must happen after any preceding local/generic load/"
"store/load atomic/store atomic/atomicrmw."
msgstr ""

#: ../../../AMDGPUUsage.rst:4925 ../../../AMDGPUUsage.rst:5013
msgid ""
"Ensures that all memory operations have completed before performing the "
"store that is being released."
msgstr ""

#: ../../../AMDGPUUsage.rst:4933
msgid "buffer/global_store"
msgstr ""

#: ../../../AMDGPUUsage.rst:4934 ../../../AMDGPUUsage.rst:5125
#: ../../../AMDGPUUsage.rst:5497
msgid "waitcnt vmcnt(0) & vscnt(0)"
msgstr ""

#: ../../../AMDGPUUsage.rst:4938 ../../../AMDGPUUsage.rst:5129
#: ../../../AMDGPUUsage.rst:5501 ../../../AMDGPUUsage.rst:6139
msgid ""
"Could be split into separate s_waitcnt vmcnt(0) and s_waitcnt vscnt(0) to "
"allow them to be independently moved according to the following rules."
msgstr ""

#: ../../../AMDGPUUsage.rst:4961 ../../../AMDGPUUsage.rst:5152
#: ../../../AMDGPUUsage.rst:5524
msgid ""
"Ensures that all global memory operations have completed before performing "
"the store that is being released."
msgstr ""

#: ../../../AMDGPUUsage.rst:5021
msgid "flat_store"
msgstr ""

#: ../../../AMDGPUUsage.rst:5036 ../../../AMDGPUUsage.rst:5227
#: ../../../AMDGPUUsage.rst:5377 ../../../AMDGPUUsage.rst:5651
#: ../../../AMDGPUUsage.rst:5725 ../../../AMDGPUUsage.rst:5946
msgid ""
"s_waitcnt vmcnt(0) must happen after any preceding global/generic load/store/"
"load atomic/store atomic/atomicrmw."
msgstr ""

#: ../../../AMDGPUUsage.rst:5059
msgid ""
"Ensures that all memory operations to memory have completed before "
"performing the store that is being released."
msgstr ""

#: ../../../AMDGPUUsage.rst:5113 ../../../AMDGPUUsage.rst:5201
#: ../../../AMDGPUUsage.rst:5247 ../../../AMDGPUUsage.rst:5460
#: ../../../AMDGPUUsage.rst:5598 ../../../AMDGPUUsage.rst:5671
#: ../../../AMDGPUUsage.rst:5745
msgid "Must happen before the following atomicrmw."
msgstr ""

#: ../../../AMDGPUUsage.rst:5116 ../../../AMDGPUUsage.rst:5204
#: ../../../AMDGPUUsage.rst:5463 ../../../AMDGPUUsage.rst:5601
msgid ""
"Ensures that all memory operations to local have completed before performing "
"the atomicrmw that is being released."
msgstr ""

#: ../../../AMDGPUUsage.rst:5116 ../../../AMDGPUUsage.rst:5204
#: ../../../AMDGPUUsage.rst:5463 ../../../AMDGPUUsage.rst:5601
#: ../../../AMDGPUUsage.rst:5748
msgid ""
"Ensures that all memory operations have completed before performing the "
"atomicrmw that is being released."
msgstr ""

#: ../../../AMDGPUUsage.rst:5166 ../../../AMDGPUUsage.rst:5563
#: ../../../AMDGPUUsage.rst:5614
msgid "If OpenCL, omit waitcnt lgkmcnt(0)."
msgstr ""

#: ../../../AMDGPUUsage.rst:5250
msgid ""
"Ensures that all memory operations to global and local have completed before "
"performing the atomicrmw that is being released."
msgstr ""

#: ../../../AMDGPUUsage.rst:5214
msgid "s_waitcnt lkkmcnt(0) &"
msgstr ""

#: ../../../AMDGPUUsage.rst:5214
msgid "vmcnt(0) & vscnt(0)"
msgstr ""

#: ../../../AMDGPUUsage.rst:5289 ../../../AMDGPUUsage.rst:5811
msgid ""
"Must happen after any preceding local/generic load/load atomic/store/store "
"atomic/atomicrmw."
msgstr ""

#: ../../../AMDGPUUsage.rst:5324 ../../../AMDGPUUsage.rst:5397
msgid ""
"Must happen before any following store atomic/atomicrmw with an equal or "
"wider sync scope and memory ordering stronger than unordered (this is termed "
"the fence-paired-atomic)."
msgstr ""

#: ../../../AMDGPUUsage.rst:5334
msgid ""
"Ensures that all memory operations to local have completed before performing "
"the following fence-paired-atomic."
msgstr ""

#: ../../../AMDGPUUsage.rst:5317 ../../../AMDGPUUsage.rst:5839
msgid ""
"s_waitcnt lgkmcnt(0) must happen after any preceding local/generic load/"
"store/load atomic/store atomic/ atomicrmw."
msgstr ""

#: ../../../AMDGPUUsage.rst:5334 ../../../AMDGPUUsage.rst:5407
msgid ""
"Ensures that all memory operations have completed before performing the "
"following fence-paired-atomic."
msgstr ""

#: ../../../AMDGPUUsage.rst:5349
msgid "If OpenCL and address space is local, omit vmcnt(0)."
msgstr ""

#: ../../../AMDGPUUsage.rst:5415
msgid "**Acquire-Release Atomic**"
msgstr ""

#: ../../../AMDGPUUsage.rst:5417 ../../../AMDGPUUsage.rst:5420
#: ../../../AMDGPUUsage.rst:5497 ../../../AMDGPUUsage.rst:5558
#: ../../../AMDGPUUsage.rst:5637 ../../../AMDGPUUsage.rst:5711
#: ../../../AMDGPUUsage.rst:5787 ../../../AMDGPUUsage.rst:5789
#: ../../../AMDGPUUsage.rst:5918 ../../../AMDGPUUsage.rst:6367
msgid "acq_rel"
msgstr ""

#: ../../../AMDGPUUsage.rst:5425
msgid "If OpenCL, omit s_waitcnt lgkmcnt(0)."
msgstr ""

#: ../../../AMDGPUUsage.rst:5610
msgid "s_waitcnt lgkmcnt(0) & vm/vscnt(0)"
msgstr ""

#: ../../../AMDGPUUsage.rst:5674 ../../../AMDGPUUsage.rst:5748
msgid ""
"Ensures that all memory operations to global have completed before "
"performing the atomicrmw that is being released."
msgstr ""

#: ../../../AMDGPUUsage.rst:5725
msgid ""
"s_waitcnt vmcnt(0) must happen after any preceding global/generic load/load "
"atomic atomicrmw-with-return-value."
msgstr ""

#: ../../../AMDGPUUsage.rst:5852
msgid ""
"Ensures that all memory operations to local have completed before performing "
"any following global memory operations."
msgstr ""

#: ../../../AMDGPUUsage.rst:5859
msgid ""
"Ensures that the preceding local/generic load atomic/atomicrmw with an equal "
"or wider sync scope and memory ordering stronger than unordered (this is "
"termed the acquire-fence-paired-atomic ) has completed before following "
"global memory operations. This satisfies the requirements of acquire."
msgstr ""

#: ../../../AMDGPUUsage.rst:5877
msgid ""
"Ensures that all previous memory operations have completed before a "
"following local/generic store atomic/atomicrmw with an equal or wider sync "
"scope and memory ordering stronger than unordered (this is termed the "
"release-fence-paired-atomic ). This satisfies the requirements of release."
msgstr ""

#: ../../../AMDGPUUsage.rst:5852
msgid ""
"Ensures that all memory operations have completed before performing any "
"following global memory operations."
msgstr ""

#: ../../../AMDGPUUsage.rst:5897
msgid ""
"Ensures that the acquire-fence-paired atomic has completed before "
"invalidating the cache. Therefore any following locations read must be no "
"older than the value read by the acquire-fence-paired-atomic."
msgstr ""

#: ../../../AMDGPUUsage.rst:5969
msgid ""
"Ensures that the preceding global/local/generic load atomic/atomicrmw with "
"an equal or wider sync scope and memory ordering stronger than unordered "
"(this is termed the acquire-fence-paired-atomic ) has completed before "
"invalidating the cache. This satisfies the requirements of acquire."
msgstr ""

#: ../../../AMDGPUUsage.rst:5987
msgid ""
"Ensures that all previous memory operations have completed before a "
"following global/local/generic store atomic/atomicrmw with an equal or wider "
"sync scope and memory ordering stronger than unordered (this is termed the "
"release-fence-paired-atomic ). This satisfies the requirements of release."
msgstr ""

#: ../../../AMDGPUUsage.rst:6015
msgid ""
"Ensures that following loads will not see stale global data. This satisfies "
"the requirements of acquire."
msgstr ""

#: ../../../AMDGPUUsage.rst:5969
msgid ""
"Ensures that the preceding global/local/generic load atomic/atomicrmw with "
"an equal or wider sync scope and memory ordering stronger than unordered "
"(this is termed the acquire-fence-paired-atomic ) has completed before "
"invalidating the caches. This satisfies the requirements of acquire."
msgstr ""

#: ../../../AMDGPUUsage.rst:6023
msgid "**Sequential Consistent Atomic**"
msgstr ""

#: ../../../AMDGPUUsage.rst:6025 ../../../AMDGPUUsage.rst:6030
#: ../../../AMDGPUUsage.rst:6130 ../../../AMDGPUUsage.rst:6218
#: ../../../AMDGPUUsage.rst:6316 ../../../AMDGPUUsage.rst:6321
#: ../../../AMDGPUUsage.rst:6326 ../../../AMDGPUUsage.rst:6331
#: ../../../AMDGPUUsage.rst:6336 ../../../AMDGPUUsage.rst:6368
msgid "seq_cst"
msgstr ""

#: ../../../AMDGPUUsage.rst:6025 ../../../AMDGPUUsage.rst:6130
msgid ""
"*Same as corresponding load atomic acquire, except must generated all "
"instructions even for OpenCL.*"
msgstr ""

#: ../../../AMDGPUUsage.rst:6044
msgid ""
"Must happen after preceding global/generic load atomic/store atomic/"
"atomicrmw with memory ordering of seq_cst and with equal or wider sync "
"scope. (Note that seq_cst fences have their own s_waitcnt lgkmcnt(0) and so "
"do not need to be considered.)"
msgstr ""

#: ../../../AMDGPUUsage.rst:6092
msgid ""
"Ensures any preceding sequential consistent local memory instructions have "
"completed before executing this sequentially consistent instruction. This "
"prevents reordering a seq_cst store followed by a seq_cst load. (Note that "
"seq_cst is stronger than acquire/release as the reordering of load acquire "
"followed by a store release is prevented by the waitcnt of the release, but "
"there is nothing preventing a store release followed by load acquire from "
"competing out of order.)"
msgstr ""

#: ../../../AMDGPUUsage.rst:6123 ../../../AMDGPUUsage.rst:6210
#: ../../../AMDGPUUsage.rst:6309
msgid ""
"*Following instructions same as corresponding load atomic acquire, except "
"must generated all instructions even for OpenCL.*"
msgstr ""

#: ../../../AMDGPUUsage.rst:6044 ../../../AMDGPUUsage.rst:6230
msgid ""
"waitcnt lgkmcnt(0) must happen after preceding local load atomic/store "
"atomic/atomicrmw with memory ordering of seq_cst and with equal or wider "
"sync scope. (Note that seq_cst fences have their own s_waitcnt lgkmcnt(0) "
"and so do not need to be considered.)"
msgstr ""

#: ../../../AMDGPUUsage.rst:6060 ../../../AMDGPUUsage.rst:6147
msgid ""
"waitcnt vmcnt(0) Must happen after preceding global/generic load atomic/ "
"atomicrmw-with-return-value with memory ordering of seq_cst and with equal "
"or wider sync scope. (Note that seq_cst fences have their own s_waitcnt "
"vmcnt(0) and so do not need to be considered.)"
msgstr ""

#: ../../../AMDGPUUsage.rst:6076 ../../../AMDGPUUsage.rst:6163
#: ../../../AMDGPUUsage.rst:6262
msgid ""
"waitcnt vscnt(0) Must happen after preceding global/generic store atomic/ "
"atomicrmw-no-return-value with memory ordering of seq_cst and with equal or "
"wider sync scope. (Note that seq_cst fences have their own s_waitcnt "
"vscnt(0) and so do not need to be considered.)"
msgstr ""

#: ../../../AMDGPUUsage.rst:6092
msgid ""
"Ensures any preceding sequential consistent global/local memory instructions "
"have completed before executing this sequentially consistent instruction. "
"This prevents reordering a seq_cst store followed by a seq_cst load. (Note "
"that seq_cst is stronger than acquire/release as the reordering of load "
"acquire followed by a store release is prevented by the waitcnt of the "
"release, but there is nothing preventing a store release followed by load "
"acquire from competing out of order.)"
msgstr ""

#: ../../../AMDGPUUsage.rst:6136
msgid "s_waitcnt vmcnt(0) & vscnt(0)"
msgstr ""

#: ../../../AMDGPUUsage.rst:6179 ../../../AMDGPUUsage.rst:6278
msgid ""
"Ensures any preceding sequential consistent global memory instructions have "
"completed before executing this sequentially consistent instruction. This "
"prevents reordering a seq_cst store followed by a seq_cst load. (Note that "
"seq_cst is stronger than acquire/release as the reordering of load acquire "
"followed by a store release is prevented by the waitcnt of the release, but "
"there is nothing preventing a store release followed by load acquire from "
"competing out of order.)"
msgstr ""

#: ../../../AMDGPUUsage.rst:6230
msgid ""
"waitcnt lgkmcnt(0) must happen after preceding global/generic load atomic/"
"store atomic/atomicrmw with memory ordering of seq_cst and with equal or "
"wider sync scope. (Note that seq_cst fences have their own s_waitcnt "
"lgkmcnt(0) and so do not need to be considered.)"
msgstr ""

#: ../../../AMDGPUUsage.rst:6246
msgid ""
"waitcnt vmcnt(0) must happen after preceding global/generic load atomic/"
"store atomic/atomicrmw with memory ordering of seq_cst and with equal or "
"wider sync scope. (Note that seq_cst fences have their own s_waitcnt "
"vmcnt(0) and so do not need to be considered.)"
msgstr ""

#: ../../../AMDGPUUsage.rst:6246
msgid ""
"waitcnt vmcnt(0) must happen after preceding global/generic load atomic/ "
"atomicrmw-with-return-value with memory ordering of seq_cst and with equal "
"or wider sync scope. (Note that seq_cst fences have their own s_waitcnt "
"vmcnt(0) and so do not need to be considered.)"
msgstr ""

#: ../../../AMDGPUUsage.rst:6316 ../../../AMDGPUUsage.rst:6321
msgid ""
"*Same as corresponding store atomic release, except must generated all "
"instructions even for OpenCL.*"
msgstr ""

#: ../../../AMDGPUUsage.rst:6326 ../../../AMDGPUUsage.rst:6331
msgid ""
"*Same as corresponding atomicrmw acq_rel, except must generated all "
"instructions even for OpenCL.*"
msgstr ""

#: ../../../AMDGPUUsage.rst:6336
msgid ""
"*Same as corresponding fence acq_rel, except must generated all instructions "
"even for OpenCL.*"
msgstr ""

#: ../../../AMDGPUUsage.rst:6343
msgid ""
"The memory order also adds the single thread optimization constrains defined "
"in table :ref:`amdgpu-amdhsa-memory-model-single-thread-optimization-"
"constraints-gfx6-gfx10-table`."
msgstr ""

#: ../../../AMDGPUUsage.rst:6347
msgid "AMDHSA Memory Model Single Thread Optimization Constraints GFX6-GFX10"
msgstr ""

#: ../../../AMDGPUUsage.rst:6351
msgid "LLVM Memory"
msgstr ""

#: ../../../AMDGPUUsage.rst:6351
msgid "Optimization Constraints"
msgstr ""

#: ../../../AMDGPUUsage.rst:6352
msgid "Ordering"
msgstr ""

#: ../../../AMDGPUUsage.rst:6356
msgid ""
"If a load atomic/atomicrmw then no following load/load atomic/store/ store "
"atomic/atomicrmw/fence instruction can be moved before the acquire."
msgstr ""

#: ../../../AMDGPUUsage.rst:6359
msgid ""
"If a fence then same as load atomic, plus no preceding associated fence-"
"paired-atomic can be moved after the fence."
msgstr ""

#: ../../../AMDGPUUsage.rst:6361
msgid ""
"If a store atomic/atomicrmw then no preceding load/load atomic/store/ store "
"atomic/atomicrmw/fence instruction can be moved after the release."
msgstr ""

#: ../../../AMDGPUUsage.rst:6364
msgid ""
"If a fence then same as store atomic, plus no following associated fence-"
"paired-atomic can be moved before the fence."
msgstr ""

#: ../../../AMDGPUUsage.rst:6367
msgid "Same constraints as both acquire and release."
msgstr ""

#: ../../../AMDGPUUsage.rst:6368
msgid ""
"If a load atomic then same constraints as acquire, plus no preceding "
"sequentially consistent load atomic/store atomic/atomicrmw/fence instruction "
"can be moved after the seq_cst."
msgstr ""

#: ../../../AMDGPUUsage.rst:6372
msgid ""
"If a store atomic then the same constraints as release, plus no following "
"sequentially consistent load atomic/store atomic/atomicrmw/fence instruction "
"can be moved before the seq_cst."
msgstr ""

#: ../../../AMDGPUUsage.rst:6376
msgid "If an atomicrmw/fence then same constraints as acq_rel."
msgstr ""

#: ../../../AMDGPUUsage.rst:6380 ../../../AMDGPUUsage.rst:6961
msgid "Trap Handler ABI"
msgstr ""

#: ../../../AMDGPUUsage.rst:6382
msgid ""
"For code objects generated by AMDGPU backend for HSA [HSA]_ compatible "
"runtimes (such as ROCm [AMD-ROCm]_), the runtime installs a trap handler "
"that supports the ``s_trap`` instruction with the following usage:"
msgstr ""

#: ../../../AMDGPUUsage.rst:6386
msgid "AMDGPU Trap Handler for AMDHSA OS"
msgstr ""

#: ../../../AMDGPUUsage.rst:6390 ../../../AMDGPUUsage.rst:6971
msgid "Usage"
msgstr ""

#: ../../../AMDGPUUsage.rst:6390 ../../../AMDGPUUsage.rst:6971
msgid "Code Sequence"
msgstr ""

#: ../../../AMDGPUUsage.rst:6390
msgid "Trap Handler Inputs"
msgstr ""

#: ../../../AMDGPUUsage.rst:6393 ../../../AMDGPUUsage.rst:6421
#: ../../../AMDGPUUsage.rst:6422 ../../../AMDGPUUsage.rst:6423
#: ../../../AMDGPUUsage.rst:6426 ../../../AMDGPUUsage.rst:6427
#: ../../../AMDGPUUsage.rst:6428
msgid "reserved"
msgstr ""

#: ../../../AMDGPUUsage.rst:6393
msgid "``s_trap 0x00``"
msgstr ""

#: ../../../AMDGPUUsage.rst:6393
msgid "Reserved by hardware."
msgstr ""

#: ../../../AMDGPUUsage.rst:6394
msgid "``debugtrap(arg)``"
msgstr ""

#: ../../../AMDGPUUsage.rst:6394
msgid "``s_trap 0x01``"
msgstr ""

#: ../../../AMDGPUUsage.rst:6394 ../../../AMDGPUUsage.rst:6400
msgid "``SGPR0-1``:"
msgstr ""

#: ../../../AMDGPUUsage.rst:6395 ../../../AMDGPUUsage.rst:6399
msgid "``queue_ptr``"
msgstr ""

#: ../../../AMDGPUUsage.rst:6396
msgid "``VGPR0``:"
msgstr ""

#: ../../../AMDGPUUsage.rst:6397
msgid "``arg``"
msgstr ""

#: ../../../AMDGPUUsage.rst:6394
msgid "Reserved for HSA ``debugtrap`` intrinsic (not implemented)."
msgstr ""

#: ../../../AMDGPUUsage.rst:6398
msgid "``llvm.trap``"
msgstr ""

#: ../../../AMDGPUUsage.rst:6398
msgid "``s_trap 0x02``"
msgstr ""

#: ../../../AMDGPUUsage.rst:6398
msgid ""
"Causes dispatch to be terminated and its associated queue put into the error "
"state."
msgstr ""

#: ../../../AMDGPUUsage.rst:6402
msgid "``llvm.debugtrap``"
msgstr ""

#: ../../../AMDGPUUsage.rst:6402
msgid "``s_trap 0x03``"
msgstr ""

#: ../../../AMDGPUUsage.rst:6402
msgid ""
"If debugger not installed then behaves as a no-operation. The trap handler "
"is entered and immediately returns to continue execution of the wavefront."
msgstr ""

#: ../../../AMDGPUUsage.rst:6412
msgid ""
"If the debugger is installed, causes the debug trap to be reported by the "
"debugger and the wavefront is put in the halt state until resumed by the "
"debugger."
msgstr ""

#: ../../../AMDGPUUsage.rst:6421
msgid "``s_trap 0x04``"
msgstr ""

#: ../../../AMDGPUUsage.rst:6422
msgid "``s_trap 0x05``"
msgstr ""

#: ../../../AMDGPUUsage.rst:6423
msgid "``s_trap 0x06``"
msgstr ""

#: ../../../AMDGPUUsage.rst:6424
msgid "debugger breakpoint"
msgstr ""

#: ../../../AMDGPUUsage.rst:6424
msgid "``s_trap 0x07``"
msgstr ""

#: ../../../AMDGPUUsage.rst:6424
msgid "Reserved for debugger breakpoints."
msgstr ""

#: ../../../AMDGPUUsage.rst:6426
msgid "``s_trap 0x08``"
msgstr ""

#: ../../../AMDGPUUsage.rst:6427
msgid "``s_trap 0xfe``"
msgstr ""

#: ../../../AMDGPUUsage.rst:6428
msgid "``s_trap 0xff``"
msgstr ""

#: ../../../AMDGPUUsage.rst:6434
msgid "Call Convention"
msgstr ""

#: ../../../AMDGPUUsage.rst:6438
msgid ""
"This section is currently incomplete and has inakkuracies. It is WIP that "
"will be updated as information is determined."
msgstr ""

#: ../../../AMDGPUUsage.rst:6441
msgid ""
"See :ref:`amdgpu-dwarf-address-space-identifier` for information on swizzled "
"addresses. Unswizzled addresses are normal linear addresses."
msgstr ""

#: ../../../AMDGPUUsage.rst:6447
msgid "Kernel Functions"
msgstr ""

#: ../../../AMDGPUUsage.rst:6449
msgid ""
"This section describes the call convention ABI for the outer kernel function."
msgstr ""

#: ../../../AMDGPUUsage.rst:6451
msgid ""
"See :ref:`amdgpu-amdhsa-initial-kernel-execution-state` for the kernel call "
"convention."
msgstr ""

#: ../../../AMDGPUUsage.rst:6454
msgid ""
"The following is not part of the AMDGPU kernel calling convention but "
"describes how the AMDGPU implements function calls:"
msgstr ""

#: ../../../AMDGPUUsage.rst:6457
msgid ""
"Clang decides the kernarg layout to match the *HSA Programmer's Language "
"Reference* [HSA]_."
msgstr ""

#: ../../../AMDGPUUsage.rst:6460
msgid "All structs are passed directly."
msgstr ""

#: ../../../AMDGPUUsage.rst:6461
msgid "Lambda values are passed *TBA*."
msgstr ""

#: ../../../AMDGPUUsage.rst:6465
msgid ""
"Does this really follow HSA rules? Or are structs >16 bytes passed by-value "
"struct?"
msgstr ""

#: ../../../AMDGPUUsage.rst:6467
msgid "What is ABI for lambda values?"
msgstr ""

#: ../../../AMDGPUUsage.rst:6469
msgid ""
"The kernel performs certain setup in its prolog, as described in :ref:"
"`amdgpu-amdhsa-kernel-prolog`."
msgstr ""

#: ../../../AMDGPUUsage.rst:6475
msgid "Non-Kernel Functions"
msgstr ""

#: ../../../AMDGPUUsage.rst:6477
msgid ""
"This section describes the call convention ABI for functions other than the "
"outer kernel function."
msgstr ""

#: ../../../AMDGPUUsage.rst:6480
msgid ""
"If a kernel has function calls then scratch is always allocated and used for "
"the call stack which grows from low address to high address using the "
"swizzled scratch address space."
msgstr ""

#: ../../../AMDGPUUsage.rst:6484
msgid "On entry to a function:"
msgstr ""

#: ../../../AMDGPUUsage.rst:6486
msgid ""
"SGPR0-3 contain a V# with the following properties (see :ref:`amdgpu-amdhsa-"
"kernel-prolog-private-segment-buffer`):"
msgstr ""

#: ../../../AMDGPUUsage.rst:6489
msgid ""
"Base address pointing to the beginning of the wavefront scratch backing "
"memory."
msgstr ""

#: ../../../AMDGPUUsage.rst:6491
msgid "Swizzled with dword element size and stride of wavefront size elements."
msgstr ""

#: ../../../AMDGPUUsage.rst:6493
msgid ""
"The FLAT_SCRATCH register pair is setup. See :ref:`amdgpu-amdhsa-kernel-"
"prolog-flat-scratch`."
msgstr ""

#: ../../../AMDGPUUsage.rst:6495
msgid ""
"GFX6-8: M0 register set to the size of LDS in bytes. See :ref:`amdgpu-amdhsa-"
"kernel-prolog-m0`."
msgstr ""

#: ../../../AMDGPUUsage.rst:6497
msgid "The EXEC register is set to the lanes active on entry to the function."
msgstr ""

#: ../../../AMDGPUUsage.rst:6498
msgid "MODE register: *TBD*"
msgstr ""

#: ../../../AMDGPUUsage.rst:6499
msgid ""
"VGPR0-31 and SGPR4-29 are used to pass function input arguments as described "
"below."
msgstr ""

#: ../../../AMDGPUUsage.rst:6501
msgid ""
"SGPR30-31 return address (RA). The code address that the function must "
"return to when it completes. The value is undefined if the function is *no "
"return*."
msgstr ""

#: ../../../AMDGPUUsage.rst:6504
msgid ""
"SGPR32 is used for the stack pointer (SP). It is an unswizzled scratch "
"offset relative to the beginning of the wavefront scratch backing memory."
msgstr ""

#: ../../../AMDGPUUsage.rst:6507
msgid ""
"The unswizzled SP can be used with buffer instructions as an unswizzled SGPR "
"offset with the scratch V# in SGPR0-3 to access the stack in a swizzled "
"manner."
msgstr ""

#: ../../../AMDGPUUsage.rst:6511
msgid "The unswizzled SP value can be converted into the swizzled SP value by:"
msgstr ""

#: ../../../AMDGPUUsage.rst:0
msgid "swizzled SP = unswizzled SP / wavefront size"
msgstr ""

#: ../../../AMDGPUUsage.rst:6515
msgid ""
"This may be used to obtain the private address space address of stack "
"objects and to convert this address to a flat address by adding the flat "
"scratch aperture base address."
msgstr ""

#: ../../../AMDGPUUsage.rst:6519
msgid ""
"The swizzled SP value is always 4 bytes aligned for the ``r600`` "
"architecture and 16 byte aligned for the ``amdgcn`` architecture."
msgstr ""

#: ../../../AMDGPUUsage.rst:6524
msgid ""
"The ``amdgcn`` value is selected to avoid dynamic stack alignment for the "
"OpenCL language which has the largest base type defined as 16 bytes."
msgstr ""

#: ../../../AMDGPUUsage.rst:6527
msgid ""
"On entry, the swizzled SP value is the address of the first function "
"argument passed on the stack. Other stack passed arguments are positive "
"offsets from the entry swizzled SP value."
msgstr ""

#: ../../../AMDGPUUsage.rst:6531
msgid ""
"The function may use positive offsets beyond the last stack passed argument "
"for stack allocated local variables and register spill slots. If necessary, "
"the function may align these to greater alignment than 16 bytes. After these "
"the function may dynamically allocate space for such things as runtime sized "
"``alloca`` local allocations."
msgstr ""

#: ../../../AMDGPUUsage.rst:6537
msgid ""
"If the function calls another function, it will place any stack allocated "
"arguments after the last local allocation and adjust SGPR32 to the address "
"after the last local allocation."
msgstr ""

#: ../../../AMDGPUUsage.rst:6541
msgid "All other registers are unspecified."
msgstr ""

#: ../../../AMDGPUUsage.rst:6542
msgid ""
"Any necessary ``waitcnt`` has been performed to ensure memory is available "
"to the function."
msgstr ""

#: ../../../AMDGPUUsage.rst:6545
msgid "On exit from a function:"
msgstr ""

#: ../../../AMDGPUUsage.rst:6547
msgid ""
"VGPR0-31 and SGPR4-29 are used to pass function result arguments as "
"described below. Any registers used are considered clobbered registers."
msgstr ""

#: ../../../AMDGPUUsage.rst:6549
msgid ""
"The following registers are preserved and have the same value as on entry:"
msgstr ""

#: ../../../AMDGPUUsage.rst:6551
msgid "FLAT_SCRATCH"
msgstr ""

#: ../../../AMDGPUUsage.rst:6552
msgid "EXEC"
msgstr ""

#: ../../../AMDGPUUsage.rst:6553
msgid "GFX6-8: M0"
msgstr ""

#: ../../../AMDGPUUsage.rst:6554
msgid "All SGPR registers except the clobbered registers of SGPR4-31."
msgstr ""

#: ../../../AMDGPUUsage.rst:6555
msgid ""
"VGPR40-47 VGPR56-63 VGPR72-79 VGPR88-95 VGPR104-111 VGPR120-127 VGPR136-143 "
"VGPR152-159 VGPR168-175 VGPR184-191 VGPR200-207 VGPR216-223 VGPR232-239 "
"VGPR248-255"
msgstr ""

#: ../../../AMDGPUUsage.rst:6570
msgid ""
"*Except the argument registers, the VGPR cloberred and the preserved "
"registers are intermixed at regular intervals in order to get a better "
"occupancy.*"
msgstr ""

#: ../../../AMDGPUUsage.rst:6574
msgid ""
"For the AMDGPU backend, an inter-procedural register allocation (IPRA) "
"optimization may mark some of clobbered SGPR and VGPR registers as preserved "
"if it can be determined that the called function does not change their value."
msgstr ""

#: ../../../AMDGPUUsage.rst:6579
msgid "The PC is set to the RA provided on entry."
msgstr ""

#: ../../../AMDGPUUsage.rst:6580
msgid "MODE register: *TBD*."
msgstr ""

#: ../../../AMDGPUUsage.rst:6581
msgid "All other registers are clobbered."
msgstr ""

#: ../../../AMDGPUUsage.rst:6582
msgid ""
"Any necessary ``waitcnt`` has been performed to ensure memory accessed by "
"function is available to the caller."
msgstr ""

#: ../../../AMDGPUUsage.rst:6587
msgid "On gfx908 are all ACC registers clobbered?"
msgstr ""

#: ../../../AMDGPUUsage.rst:6589
msgid ""
"How are function results returned? The address of structured types is passed "
"by reference, but what about other types?"
msgstr ""

#: ../../../AMDGPUUsage.rst:6592
msgid ""
"The function input arguments are made up of the formal arguments explicitly "
"declared by the source language function plus the implicit input arguments "
"used by the implementation."
msgstr ""

#: ../../../AMDGPUUsage.rst:6596
msgid "The source language input arguments are:"
msgstr ""

#: ../../../AMDGPUUsage.rst:6598
msgid ""
"Any source language implicit ``this`` or ``self`` argument comes first as a "
"pointer type."
msgstr ""

#: ../../../AMDGPUUsage.rst:6600
msgid ""
"Followed by the function formal arguments in left to right source order."
msgstr ""

#: ../../../AMDGPUUsage.rst:6602
msgid "The source language result arguments are:"
msgstr ""

#: ../../../AMDGPUUsage.rst:6604
msgid "The function result argument."
msgstr ""

#: ../../../AMDGPUUsage.rst:6606
msgid ""
"The source language input or result struct type arguments that are less than "
"or equal to 16 bytes, are decomposed recursively into their base type "
"fields, and each field is passed as if a separate argument. For input "
"arguments, if the called function requires the struct to be in memory, for "
"example because its address is taken, then the function body is responsible "
"for allocating a stack location and copying the field arguments into it. "
"Clang terms this *direct struct*."
msgstr ""

#: ../../../AMDGPUUsage.rst:6614
msgid ""
"The source language input struct type arguments that are greater than 16 "
"bytes, are passed by reference. The caller is responsible for allocating a "
"stack location to make a copy of the struct value and pass the address as "
"the input argument. The called function is responsible to perform the "
"dereference when accessing the input argument. Clang terms this *by-value "
"struct*."
msgstr ""

#: ../../../AMDGPUUsage.rst:6620
msgid ""
"A source language result struct type argument that is greater than 16 bytes, "
"is returned by reference. The caller is responsible for allocating a stack "
"location to hold the result value and passes the address as the last input "
"argument (before the implicit input arguments). In this case there are no "
"result arguments. The called function is responsible to perform the "
"dereference when storing the result value. Clang terms this *structured "
"return (sret)*."
msgstr ""

#: ../../../AMDGPUUsage.rst:6627
msgid "*TODO: correct the ``sret`` definition.*"
msgstr ""

#: ../../../AMDGPUUsage.rst:6631
msgid ""
"Is this definition correct? Or is ``sret`` only used if passing in "
"registers, and pass as non-decomposed struct as stack argument? Or something "
"else? Is the memory location in the caller stack frame, or a stack memory "
"argument and so no address is passed as the caller can directly write to the "
"argument stack location? But then the stack location is still live after "
"return. If an argument stack location is it the first stack argument or the "
"last one?"
msgstr ""

#: ../../../AMDGPUUsage.rst:6638
msgid ""
"Lambda argument types are treated as struct types with an implementation "
"defined set of fields."
msgstr ""

#: ../../../AMDGPUUsage.rst:6643
msgid "Need to specify the ABI for lambda types for AMDGPU."
msgstr ""

#: ../../../AMDGPUUsage.rst:6645
msgid ""
"For AMDGPU backend all source language arguments (including the decomposed "
"struct type arguments) are passed in VGPRs unless marked ``inreg`` in which "
"case they are passed in SGPRs."
msgstr ""

#: ../../../AMDGPUUsage.rst:6649
msgid ""
"The AMDGPU backend walks the function call graph from the leaves to "
"determine which implicit input arguments are used, propagating to each "
"caller of the function. The used implicit arguments are appended to the "
"function arguments after the source language arguments in the following "
"order:"
msgstr ""

#: ../../../AMDGPUUsage.rst:6656
msgid "Is recursion or external functions supported?"
msgstr ""

#: ../../../AMDGPUUsage.rst:6658
msgid "Work-Item ID (1 VGPR)"
msgstr ""

#: ../../../AMDGPUUsage.rst:6660
msgid ""
"The X, Y and Z work-item ID are packed into a single VGRP with the following "
"layout. Only fields actually used by the function are set. The other bits "
"are undefined."
msgstr ""

#: ../../../AMDGPUUsage.rst:6664
msgid ""
"The values come from the initial kernel execution state. See :ref:`amdgpu-"
"amdhsa-vgpr-register-set-up-order-table`."
msgstr ""

#: ../../../AMDGPUUsage.rst:6667
msgid "Work-item implicit argument layout"
msgstr ""

#: ../../../AMDGPUUsage.rst:6673
msgid "9:0"
msgstr ""

#: ../../../AMDGPUUsage.rst:6673 ../../../AMDGPUUsage.rst:6674
#: ../../../AMDGPUUsage.rst:6675
msgid "10 bits"
msgstr ""

#: ../../../AMDGPUUsage.rst:6673
msgid "X Work-Item ID"
msgstr ""

#: ../../../AMDGPUUsage.rst:6674
msgid "19:10"
msgstr ""

#: ../../../AMDGPUUsage.rst:6674
msgid "Y Work-Item ID"
msgstr ""

#: ../../../AMDGPUUsage.rst:6675
msgid "29:20"
msgstr ""

#: ../../../AMDGPUUsage.rst:6675
msgid "Z Work-Item ID"
msgstr ""

#: ../../../AMDGPUUsage.rst:6676
msgid "31:30"
msgstr ""

#: ../../../AMDGPUUsage.rst:6676
msgid "Unused"
msgstr ""

#: ../../../AMDGPUUsage.rst:6679
msgid "Dispatch Ptr (2 SGPRs)"
msgstr ""

#: ../../../AMDGPUUsage.rst:6681 ../../../AMDGPUUsage.rst:6686
#: ../../../AMDGPUUsage.rst:6691 ../../../AMDGPUUsage.rst:6696
#: ../../../AMDGPUUsage.rst:6701 ../../../AMDGPUUsage.rst:6706
#: ../../../AMDGPUUsage.rst:6711
msgid ""
"The value comes from the initial kernel execution state. See :ref:`amdgpu-"
"amdhsa-sgpr-register-set-up-order-table`."
msgstr ""

#: ../../../AMDGPUUsage.rst:6684
msgid "Queue Ptr (2 SGPRs)"
msgstr ""

#: ../../../AMDGPUUsage.rst:6689
msgid "Kernarg Segment Ptr (2 SGPRs)"
msgstr ""

#: ../../../AMDGPUUsage.rst:6694
msgid "Dispatch id (2 SGPRs)"
msgstr ""

#: ../../../AMDGPUUsage.rst:6699
msgid "Work-Group ID X (1 SGPR)"
msgstr ""

#: ../../../AMDGPUUsage.rst:6704
msgid "Work-Group ID Y (1 SGPR)"
msgstr ""

#: ../../../AMDGPUUsage.rst:6709
msgid "Work-Group ID Z (1 SGPR)"
msgstr ""

#: ../../../AMDGPUUsage.rst:6714
msgid "Implicit Argument Ptr (2 SGPRs)"
msgstr ""

#: ../../../AMDGPUUsage.rst:6716
msgid ""
"The value is computed by adding an offset to Kernarg Segment Ptr to get the "
"global address space pointer to the first kernarg implicit argument."
msgstr ""

#: ../../../AMDGPUUsage.rst:6719
msgid ""
"The input and result arguments are assigned in order in the following manner:"
msgstr ""

#: ../../../AMDGPUUsage.rst:6723
msgid ""
"There are likely some errors and omissions in the following description that "
"need correction."
msgstr ""

#: ../../../AMDGPUUsage.rst:6728
msgid ""
"Check the clang source code to decipher how function arguments and return "
"results are handled. Also see the AMDGPU specific values used."
msgstr ""

#: ../../../AMDGPUUsage.rst:6731
msgid ""
"VGPR arguments are assigned to consecutive VGPRs starting at VGPR0 up to "
"VGPR31."
msgstr ""

#: ../../../AMDGPUUsage.rst:6734 ../../../AMDGPUUsage.rst:6745
msgid ""
"If there are more arguments than will fit in these registers, the remaining "
"arguments are allocated on the stack in order on naturally aligned addresses."
msgstr ""

#: ../../../AMDGPUUsage.rst:6740
msgid "How are overly aligned structures allocated on the stack?"
msgstr ""

#: ../../../AMDGPUUsage.rst:6742
msgid ""
"SGPR arguments are assigned to consecutive SGPRs starting at SGPR0 up to "
"SGPR29."
msgstr ""

#: ../../../AMDGPUUsage.rst:6749
msgid ""
"Note that decomposed struct type arguments may have some fields passed in "
"registers and some in memory."
msgstr ""

#: ../../../AMDGPUUsage.rst:6754
msgid ""
"So, a struct which can pass some fields as decomposed register arguments, "
"will pass the rest as decomposed stack elements? But an argument that will "
"not start in registers will not be decomposed and will be passed as a non-"
"decomposed stack value?"
msgstr ""

#: ../../../AMDGPUUsage.rst:6759
msgid ""
"The following is not part of the AMDGPU function calling convention but "
"describes how the AMDGPU implements function calls:"
msgstr ""

#: ../../../AMDGPUUsage.rst:6762
msgid ""
"SGPR33 is used as a frame pointer (FP) if necessary. Like the SP it is an "
"unswizzled scratch address. It is only needed if runtime sized ``alloca`` "
"are used, or for the reasons defined in ``SIFrameLowering``."
msgstr ""

#: ../../../AMDGPUUsage.rst:6765
msgid ""
"Runtime stack alignment is supported. SGPR34 is used as a base pointer (BP) "
"to access the incoming stack arguments in the function. The BP is needed "
"only when the function requires the runtime stack alignment."
msgstr ""

#: ../../../AMDGPUUsage.rst:6769
msgid "Allocating SGPR arguments on the stack are not supported."
msgstr ""

#: ../../../AMDGPUUsage.rst:6771
msgid ""
"No CFI is currently generated. See :ref:`amdgpu-dwarf-call-frame-"
"information`."
msgstr ""

#: ../../../AMDGPUUsage.rst:6776
msgid ""
"CFI will be generated that defines the CFA as the unswizzled address "
"relative to the wave scratch base in the unswizzled private address space of "
"the lowest address stack allocated local variable."
msgstr ""

#: ../../../AMDGPUUsage.rst:6780
msgid ""
"``DW_AT_frame_base`` will be defined as the swizzled address in the swizzled "
"private address space by dividing the CFA by the wavefront size (since CFA "
"is always at least dword aligned which matches the scratch swizzle element "
"size)."
msgstr ""

#: ../../../AMDGPUUsage.rst:6785
msgid ""
"If no dynamic stack alignment was performed, the stack allocated arguments "
"are accessed as negative offsets relative to ``DW_AT_frame_base``, and the "
"local variables and register spill slots are accessed as positive offsets "
"relative to ``DW_AT_frame_base``."
msgstr ""

#: ../../../AMDGPUUsage.rst:6790
msgid ""
"Function argument passing is implemented by copying the input physical "
"registers to virtual registers on entry. The register allocator can spill if "
"necessary. These are copied back to physical registers at call sites. The "
"net effect is that each function call can have these values in entirely "
"distinct locations. The IPRA can help avoid shuffling argument registers."
msgstr ""

#: ../../../AMDGPUUsage.rst:6795
msgid ""
"Call sites are implemented by setting up the arguments at positive offsets "
"from SP. Then SP is incremented to account for the known frame size before "
"the call and decremented after the call."
msgstr ""

#: ../../../AMDGPUUsage.rst:6801
msgid ""
"The CFI will reflect the changed calculation needed to compute the CFA from "
"SP."
msgstr ""

#: ../../../AMDGPUUsage.rst:6804
msgid ""
"4 byte spill slots are used in the stack frame. One slot is allocated for an "
"emergency spill slot. Buffer instructions are used for stack accesses and "
"not the ``flat_scratch`` instruction."
msgstr ""

#: ../../../AMDGPUUsage.rst:6810
msgid "Explain when the emergency spill slot is used."
msgstr ""

#: ../../../AMDGPUUsage.rst:6814
msgid "Possible broken issues:"
msgstr ""

#: ../../../AMDGPUUsage.rst:6816
msgid "Stack arguments must be aligned to required alignment."
msgstr ""

#: ../../../AMDGPUUsage.rst:6817
msgid "Stack is aligned to max(16, max formal argument alignment)"
msgstr ""

#: ../../../AMDGPUUsage.rst:6818
msgid "Direct argument < 64 bits should check register budget."
msgstr ""

#: ../../../AMDGPUUsage.rst:6819
msgid "Register budget calculation should respect ``inreg`` for SGPR."
msgstr ""

#: ../../../AMDGPUUsage.rst:6820
msgid "SGPR overflow is not handled."
msgstr ""

#: ../../../AMDGPUUsage.rst:6821
msgid "struct with 1 member unpeeling is not checking size of member."
msgstr ""

#: ../../../AMDGPUUsage.rst:6822
msgid "``sret`` is after ``this`` pointer."
msgstr ""

#: ../../../AMDGPUUsage.rst:6823
msgid "Caller is not implementing stack realignment: need an extra pointer."
msgstr ""

#: ../../../AMDGPUUsage.rst:6824
msgid "Should say AMDGPU passes FP rather than SP."
msgstr ""

#: ../../../AMDGPUUsage.rst:6825
msgid ""
"Should CFI define CFA as address of locals or arguments. Difference is "
"apparent when have implemented dynamic alignment."
msgstr ""

#: ../../../AMDGPUUsage.rst:6827
msgid ""
"If ``SCRATCH`` instruction could allow negative offsets, then can make FP be "
"highest address of stack frame and use negative offset for locals. Would "
"allow SP to be the same as FP and could support signal-handler-like as now "
"have a real SP for the top of the stack."
msgstr ""

#: ../../../AMDGPUUsage.rst:6831
msgid ""
"How is ``sret`` passed on the stack? In argument stack area? Can it overlay "
"arguments?"
msgstr ""

#: ../../../AMDGPUUsage.rst:6835
msgid "AMDPAL"
msgstr ""

#: ../../../AMDGPUUsage.rst:6837
msgid ""
"This section provides code conventions used when the target triple OS is "
"``amdpal`` (see :ref:`amdgpu-target-triples`) for passing runtime parameters "
"from the application/runtime to each invocation of a hardware shader. These "
"parameters include both generic, application-controlled parameters called "
"*user data* as well as system-generated parameters that are a product of the "
"draw or dispatch execution."
msgstr ""

#: ../../../AMDGPUUsage.rst:6845
msgid "User Data"
msgstr ""

#: ../../../AMDGPUUsage.rst:6847
msgid ""
"Each hardware stage has a set of 32-bit *user data registers* which can be "
"written from a command buffer and then loaded into SGPRs when waves are "
"launched via a subsequent dispatch or draw operation. This is the way most "
"arguments are passed from the application/runtime to a hardware shader."
msgstr ""

#: ../../../AMDGPUUsage.rst:6853
msgid "Compute User Data"
msgstr ""

#: ../../../AMDGPUUsage.rst:6855
msgid ""
"Compute shader user data mappings are simpler than graphics shaders and have "
"a fixed mapping."
msgstr ""

#: ../../../AMDGPUUsage.rst:6858
msgid ""
"Note that there are always 10 available *user data entries* in registers - "
"entries beyond that limit must be fetched from memory (via the spill table "
"pointer) by the shader."
msgstr ""

#: ../../../AMDGPUUsage.rst:6862
msgid "PAL Compute Shader User Data Registers"
msgstr ""

#: ../../../AMDGPUUsage.rst:6866 ../../../AMDGPUUsage.rst:6885
msgid "User Register"
msgstr ""

#: ../../../AMDGPUUsage.rst:6868 ../../../AMDGPUUsage.rst:6887
msgid "Global Internal Table (32-bit pointer)"
msgstr ""

#: ../../../AMDGPUUsage.rst:6869 ../../../AMDGPUUsage.rst:6888
msgid "Per-Shader Internal Table (32-bit pointer)"
msgstr ""

#: ../../../AMDGPUUsage.rst:6870
msgid "2 - 11"
msgstr ""

#: ../../../AMDGPUUsage.rst:6870
msgid "Application-Controlled User Data (10 32-bit values)"
msgstr ""

#: ../../../AMDGPUUsage.rst:6871 ../../../AMDGPUUsage.rst:6891
msgid "Spill Table (32-bit pointer)"
msgstr ""

#: ../../../AMDGPUUsage.rst:6872
msgid "13 - 14"
msgstr ""

#: ../../../AMDGPUUsage.rst:6872
msgid "Thread Group Count (64-bit pointer)"
msgstr ""

#: ../../../AMDGPUUsage.rst:6873
msgid "15"
msgstr ""

#: ../../../AMDGPUUsage.rst:6873
msgid "GDS Range"
msgstr ""

#: ../../../AMDGPUUsage.rst:6877
msgid "Graphics User Data"
msgstr ""

#: ../../../AMDGPUUsage.rst:6879
msgid "Graphics pipelines support a much more flexible user data mapping:"
msgstr ""

#: ../../../AMDGPUUsage.rst:6881
msgid "PAL Graphics Shader User Data Registers"
msgstr ""

#: ../../../AMDGPUUsage.rst:6889
msgid "1-15"
msgstr ""

#: ../../../AMDGPUUsage.rst:6889
msgid ""
"Application Controlled User Data (1-15 Contiguous 32-bit Values in Registers)"
msgstr ""

#: ../../../AMDGPUUsage.rst:6892
msgid "Draw Index (First Stage Only)"
msgstr ""

#: ../../../AMDGPUUsage.rst:6893
msgid "Vertex Offset (First Stage Only)"
msgstr ""

#: ../../../AMDGPUUsage.rst:6894
msgid "Instance Offset (First Stage Only)"
msgstr ""

#: ../../../AMDGPUUsage.rst:6897
msgid ""
"The placement of the global internal table remains fixed in the first *user "
"data SGPR register*. Otherwise all parameters are optional, and can be "
"mapped to any desired *user data SGPR register*, with the following "
"restrictions:"
msgstr ""

#: ../../../AMDGPUUsage.rst:6901
msgid ""
"Draw Index, Vertex Offset, and Instance Offset can only be used by the first "
"active hardware stage in a graphics pipeline (i.e. where the API vertex "
"shader runs)."
msgstr ""

#: ../../../AMDGPUUsage.rst:6905
msgid ""
"Application-controlled user data must be mapped into a contiguous range of "
"user data registers."
msgstr ""

#: ../../../AMDGPUUsage.rst:6908
msgid ""
"The application-controlled user data range supports compaction remapping, so "
"only *entries* that are actually consumed by the shader must be assigned to "
"corresponding *registers*. Note that in order to support an efficient "
"runtime implementation, the remapping must pack *registers* in the same "
"order as *entries*, with unused *entries* removed."
msgstr ""

#: ../../../AMDGPUUsage.rst:6917
msgid "Global Internal Table"
msgstr ""

#: ../../../AMDGPUUsage.rst:6919
msgid ""
"The global internal table is a table of *shader resource descriptors* (SRDs) "
"that define how certain engine-wide, runtime-managed resources should be "
"accessed from a shader. The majority of these resources have HW-defined "
"formats, and it is up to the compiler to write/read data as required by the "
"target hardware."
msgstr ""

#: ../../../AMDGPUUsage.rst:6925
msgid "The following table illustrates the required format:"
msgstr ""

#: ../../../AMDGPUUsage.rst:6927
msgid "PAL Global Internal Table"
msgstr ""

#: ../../../AMDGPUUsage.rst:6931
msgid "Offset"
msgstr ""

#: ../../../AMDGPUUsage.rst:6933
msgid "0-3"
msgstr ""

#: ../../../AMDGPUUsage.rst:6933
msgid "Graphics Scratch SRD"
msgstr ""

#: ../../../AMDGPUUsage.rst:6934
msgid "4-7"
msgstr ""

#: ../../../AMDGPUUsage.rst:6934
msgid "Compute Scratch SRD"
msgstr ""

#: ../../../AMDGPUUsage.rst:6935
msgid "8-11"
msgstr ""

#: ../../../AMDGPUUsage.rst:6935
msgid "ES/GS Ring Output SRD"
msgstr ""

#: ../../../AMDGPUUsage.rst:6936
msgid "12-15"
msgstr ""

#: ../../../AMDGPUUsage.rst:6936
msgid "ES/GS Ring Input SRD"
msgstr ""

#: ../../../AMDGPUUsage.rst:6937
msgid "16-19"
msgstr ""

#: ../../../AMDGPUUsage.rst:6937
msgid "GS/VS Ring Output #0"
msgstr ""

#: ../../../AMDGPUUsage.rst:6938
msgid "20-23"
msgstr ""

#: ../../../AMDGPUUsage.rst:6938
msgid "GS/VS Ring Output #1"
msgstr ""

#: ../../../AMDGPUUsage.rst:6939
msgid "24-27"
msgstr ""

#: ../../../AMDGPUUsage.rst:6939
msgid "GS/VS Ring Output #2"
msgstr ""

#: ../../../AMDGPUUsage.rst:6940
msgid "28-31"
msgstr ""

#: ../../../AMDGPUUsage.rst:6940
msgid "GS/VS Ring Output #3"
msgstr ""

#: ../../../AMDGPUUsage.rst:6941
msgid "32-35"
msgstr ""

#: ../../../AMDGPUUsage.rst:6941
msgid "GS/VS Ring Input SRD"
msgstr ""

#: ../../../AMDGPUUsage.rst:6942
msgid "36-39"
msgstr ""

#: ../../../AMDGPUUsage.rst:6942
msgid "Tessellation Factor Buffer SRD"
msgstr ""

#: ../../../AMDGPUUsage.rst:6943
msgid "40-43"
msgstr ""

#: ../../../AMDGPUUsage.rst:6943
msgid "Off-Chip LDS Buffer SRD"
msgstr ""

#: ../../../AMDGPUUsage.rst:6944
msgid "44-47"
msgstr ""

#: ../../../AMDGPUUsage.rst:6944
msgid "Off-Chip Param Cache Buffer SRD"
msgstr ""

#: ../../../AMDGPUUsage.rst:6945
msgid "48-51"
msgstr ""

#: ../../../AMDGPUUsage.rst:6945
msgid "Sample Position Buffer SRD"
msgstr ""

#: ../../../AMDGPUUsage.rst:6946
msgid "52"
msgstr ""

#: ../../../AMDGPUUsage.rst:6946
msgid "vaRange::ShadowDescriptorTable High Bits"
msgstr ""

#: ../../../AMDGPUUsage.rst:6949
msgid ""
"The pointer to the global internal table passed to the shader as user data "
"is a 32-bit pointer. The top 32 bits should be assumed to be the same as the "
"top 32 bits of the pipeline, so the shader may use the program counter's top "
"32 bits."
msgstr ""

#: ../../../AMDGPUUsage.rst:6955
msgid "Unspecified OS"
msgstr ""

#: ../../../AMDGPUUsage.rst:6957
msgid ""
"This section provides code conventions used when the target triple OS is "
"empty (see :ref:`amdgpu-target-triples`)."
msgstr ""

#: ../../../AMDGPUUsage.rst:6963
msgid ""
"For code objects generated by AMDGPU backend for non-amdhsa OS, the runtime "
"does not install a trap handler. The ``llvm.trap`` and ``llvm.debugtrap`` "
"instructions are handled as follows:"
msgstr ""

#: ../../../AMDGPUUsage.rst:6967
msgid "AMDGPU Trap Handler for Non-AMDHSA OS"
msgstr ""

#: ../../../AMDGPUUsage.rst:6973
msgid "llvm.trap"
msgstr ""

#: ../../../AMDGPUUsage.rst:6973
msgid "s_endpgm"
msgstr ""

#: ../../../AMDGPUUsage.rst:6973
msgid "Causes wavefront to be terminated."
msgstr ""

#: ../../../AMDGPUUsage.rst:6974
msgid "llvm.debugtrap"
msgstr ""

#: ../../../AMDGPUUsage.rst:6974
msgid "Compiler warning given that there is no trap handler installed."
msgstr ""

#: ../../../AMDGPUUsage.rst:6979
msgid "Source Languages"
msgstr ""

#: ../../../AMDGPUUsage.rst:6984
msgid "OpenCL"
msgstr ""

#: ../../../AMDGPUUsage.rst:6986
msgid "When the language is OpenCL the following differences occur:"
msgstr ""

#: ../../../AMDGPUUsage.rst:6988
msgid ""
"The OpenCL memory model is used (see :ref:`amdgpu-amdhsa-memory-model`)."
msgstr ""

#: ../../../AMDGPUUsage.rst:6989
msgid ""
"The AMDGPU backend appends additional arguments to the kernel's explicit "
"arguments for the AMDHSA OS (see :ref:`opencl-kernel-implicit-arguments-"
"appended-for-amdhsa-os-table`)."
msgstr ""

#: ../../../AMDGPUUsage.rst:6992
msgid ""
"Additional metadata is generated (see :ref:`amdgpu-amdhsa-code-object-"
"metadata`)."
msgstr ""

#: ../../../AMDGPUUsage.rst:6995
msgid "OpenCL kernel implicit arguments appended for AMDHSA OS"
msgstr ""

#: ../../../AMDGPUUsage.rst:6999
msgid "Position"
msgstr ""

#: ../../../AMDGPUUsage.rst:6999
msgid "Byte Size"
msgstr ""

#: ../../../AMDGPUUsage.rst:6999
msgid "Byte Alignment"
msgstr ""

#: ../../../AMDGPUUsage.rst:7002
msgid "OpenCL Global Offset X"
msgstr ""

#: ../../../AMDGPUUsage.rst:7003
msgid "OpenCL Global Offset Y"
msgstr ""

#: ../../../AMDGPUUsage.rst:7004
msgid "OpenCL Global Offset Z"
msgstr ""

#: ../../../AMDGPUUsage.rst:7005
msgid "OpenCL address of printf buffer"
msgstr ""

#: ../../../AMDGPUUsage.rst:7006
msgid "OpenCL address of virtual queue used by enqueue_kernel."
msgstr ""

#: ../../../AMDGPUUsage.rst:7008
msgid "OpenCL address of AqlWrap struct used by enqueue_kernel."
msgstr ""

#: ../../../AMDGPUUsage.rst:7010
msgid "Pointer argument used for Multi-gird synchronization."
msgstr ""

#: ../../../AMDGPUUsage.rst:7017
msgid "HCC"
msgstr ""

#: ../../../AMDGPUUsage.rst:7019
msgid "When the language is HCC the following differences occur:"
msgstr ""

#: ../../../AMDGPUUsage.rst:7021
msgid "The HSA memory model is used (see :ref:`amdgpu-amdhsa-memory-model`)."
msgstr ""

#: ../../../AMDGPUUsage.rst:7026
msgid "Assembler"
msgstr ""

#: ../../../AMDGPUUsage.rst:7028
msgid ""
"AMDGPU backend has LLVM-MC based assembler which is currently in "
"development. It supports AMDGCN GFX6-GFX10."
msgstr ""

#: ../../../AMDGPUUsage.rst:7031
msgid "This section describes general syntax for instructions and operands."
msgstr ""

#: ../../../AMDGPUUsage.rst:7034
msgid "Instructions"
msgstr ""

#: ../../../AMDGPUUsage.rst:7036
msgid ""
"An instruction has the following :doc:`syntax<AMDGPUInstructionSyntax>`:"
msgstr ""

#: ../../../AMDGPUUsage.rst:0
msgid ""
"``<``\\ *opcode*\\ ``> <``\\ *operand0*\\ ``>, <``\\ *operand1*\\ ``>,... "
"<``\\ *modifier0*\\ ``> <``\\ *modifier1*\\ ``>...``"
msgstr ""

#: ../../../AMDGPUUsage.rst:7041
msgid ""
":doc:`Operands<AMDGPUOperandSyntax>` are comma-separated while :doc:"
"`modifiers<AMDGPUModifierSyntax>` are space-separated."
msgstr ""

#: ../../../AMDGPUUsage.rst:7044
msgid ""
"The order of operands and modifiers is fixed. Most modifiers are optional "
"and may be omitted."
msgstr ""

#: ../../../AMDGPUUsage.rst:7047
msgid ""
"Links to detailed instruction syntax description may be found in the "
"following table. Note that features under development are not included in "
"this description."
msgstr ""

#: ../../../AMDGPUUsage.rst:7052
msgid "Core ISA"
msgstr ""

#: ../../../AMDGPUUsage.rst:7052
msgid "ISA Extensions"
msgstr ""

#: ../../../AMDGPUUsage.rst:7054
msgid ":doc:`GFX7<AMDGPU/AMDGPUAsmGFX7>`"
msgstr ""

#: ../../../AMDGPUUsage.rst:7054 ../../../AMDGPUUsage.rst:7055
msgid "\\-"
msgstr ""

#: ../../../AMDGPUUsage.rst:7055
msgid ":doc:`GFX8<AMDGPU/AMDGPUAsmGFX8>`"
msgstr ""

#: ../../../AMDGPUUsage.rst:7056
msgid ":doc:`GFX9<AMDGPU/AMDGPUAsmGFX9>`"
msgstr ""

#: ../../../AMDGPUUsage.rst:7056
msgid ":doc:`gfx900<AMDGPU/AMDGPUAsmGFX900>`"
msgstr ""

#: ../../../AMDGPUUsage.rst:7058
msgid ":doc:`gfx902<AMDGPU/AMDGPUAsmGFX900>`"
msgstr ""

#: ../../../AMDGPUUsage.rst:7060
msgid ":doc:`gfx904<AMDGPU/AMDGPUAsmGFX904>`"
msgstr ""

#: ../../../AMDGPUUsage.rst:7062
msgid ":doc:`gfx906<AMDGPU/AMDGPUAsmGFX906>`"
msgstr ""

#: ../../../AMDGPUUsage.rst:7064
msgid ":doc:`gfx908<AMDGPU/AMDGPUAsmGFX908>`"
msgstr ""

#: ../../../AMDGPUUsage.rst:7066
msgid ":doc:`gfx909<AMDGPU/AMDGPUAsmGFX900>`"
msgstr ""

#: ../../../AMDGPUUsage.rst:7068
msgid ":doc:`GFX10<AMDGPU/AMDGPUAsmGFX10>`"
msgstr ""

#: ../../../AMDGPUUsage.rst:7068
msgid ":doc:`gfx1011<AMDGPU/AMDGPUAsmGFX1011>`"
msgstr ""

#: ../../../AMDGPUUsage.rst:7070
msgid ":doc:`gfx1012<AMDGPU/AMDGPUAsmGFX1011>`"
msgstr ""

#: ../../../AMDGPUUsage.rst:7073
msgid ""
"For more information about instructions, their semantics and supported "
"combinations of operands, refer to one of instruction set architecture "
"manuals [AMD-GCN-GFX6]_, [AMD-GCN-GFX7]_, [AMD-GCN-GFX8]_, [AMD-GCN-GFX9]_ "
"and [AMD-GCN-GFX10]_."
msgstr ""

#: ../../../AMDGPUUsage.rst:7079
msgid "Operands"
msgstr ""

#: ../../../AMDGPUUsage.rst:7081
msgid ""
"Detailed description of operands may be found :doc:"
"`here<AMDGPUOperandSyntax>`."
msgstr ""

#: ../../../AMDGPUUsage.rst:7084
msgid "Modifiers"
msgstr ""

#: ../../../AMDGPUUsage.rst:7086
msgid ""
"Detailed description of modifiers may be found :doc:"
"`here<AMDGPUModifierSyntax>`."
msgstr ""

#: ../../../AMDGPUUsage.rst:7090
msgid "Instruction Examples"
msgstr ""

#: ../../../AMDGPUUsage.rst:7093
msgid "DS"
msgstr ""

#: ../../../AMDGPUUsage.rst:7102
msgid ""
"For full list of supported instructions, refer to \"LDS/GDS instructions\" "
"in ISA Manual."
msgstr ""

#: ../../../AMDGPUUsage.rst:7106
msgid "FLAT"
msgstr ""

#: ../../../AMDGPUUsage.rst:7116
msgid ""
"For full list of supported instructions, refer to \"FLAT instructions\" in "
"ISA Manual."
msgstr ""

#: ../../../AMDGPUUsage.rst:7120
msgid "MUBUF"
msgstr ""

#: ../../../AMDGPUUsage.rst:7130
msgid ""
"For full list of supported instructions, refer to \"MUBUF Instructions\" in "
"ISA Manual."
msgstr ""

#: ../../../AMDGPUUsage.rst:7134
msgid "SMRD/SMEM"
msgstr ""

#: ../../../AMDGPUUsage.rst:7144
msgid ""
"For full list of supported instructions, refer to \"Scalar Memory "
"Operations\" in ISA Manual."
msgstr ""

#: ../../../AMDGPUUsage.rst:7148
msgid "SOP1"
msgstr ""

#: ../../../AMDGPUUsage.rst:7160
msgid ""
"For full list of supported instructions, refer to \"SOP1 Instructions\" in "
"ISA Manual."
msgstr ""

#: ../../../AMDGPUUsage.rst:7164
msgid "SOP2"
msgstr ""

#: ../../../AMDGPUUsage.rst:7178
msgid ""
"For full list of supported instructions, refer to \"SOP2 Instructions\" in "
"ISA Manual."
msgstr ""

#: ../../../AMDGPUUsage.rst:7182
msgid "SOPC"
msgstr ""

#: ../../../AMDGPUUsage.rst:7191
msgid ""
"For full list of supported instructions, refer to \"SOPC Instructions\" in "
"ISA Manual."
msgstr ""

#: ../../../AMDGPUUsage.rst:7195
msgid "SOPP"
msgstr ""

#: ../../../AMDGPUUsage.rst:7211
msgid ""
"For full list of supported instructions, refer to \"SOPP Instructions\" in "
"ISA Manual."
msgstr ""

#: ../../../AMDGPUUsage.rst:7214
msgid ""
"Unless otherwise mentioned, little verification is performed on the operands "
"of SOPP Instructions, so it is up to the programmer to be familiar with the "
"range or acceptable values."
msgstr ""

#: ../../../AMDGPUUsage.rst:7219
msgid "VALU"
msgstr ""

#: ../../../AMDGPUUsage.rst:7221
msgid ""
"For vector ALU instruction opcodes (VOP1, VOP2, VOP3, VOPC, VOP_DPP, "
"VOP_SDWA), the assembler will automatically use optimal encoding based on "
"its operands. To force specific encoding, one can add a suffix to the opcode "
"of the instruction:"
msgstr ""

#: ../../../AMDGPUUsage.rst:7225
msgid "_e32 for 32-bit VOP1/VOP2/VOPC"
msgstr ""

#: ../../../AMDGPUUsage.rst:7226
msgid "_e64 for 64-bit VOP3"
msgstr ""

#: ../../../AMDGPUUsage.rst:7227
msgid "_dpp for VOP_DPP"
msgstr ""

#: ../../../AMDGPUUsage.rst:7228
msgid "_sdwa for VOP_SDWA"
msgstr ""

#: ../../../AMDGPUUsage.rst:7230
msgid "VOP1/VOP2/VOP3/VOPC examples:"
msgstr ""

#: ../../../AMDGPUUsage.rst:7247
msgid "VOP_DPP examples:"
msgstr ""

#: ../../../AMDGPUUsage.rst:7260
msgid "VOP_SDWA examples:"
msgstr ""

#: ../../../AMDGPUUsage.rst:7270
msgid ""
"For full list of supported instructions, refer to \"Vector ALU "
"instructions\"."
msgstr ""

#: ../../../AMDGPUUsage.rst:7274
msgid "Remove once we switch to code object v3 by default."
msgstr ""

#: ../../../AMDGPUUsage.rst:7279
msgid "Code Object V2 Predefined Symbols (-mattr=-code-object-v3)"
msgstr ""

#: ../../../AMDGPUUsage.rst:7281
msgid ""
"Code Object V2 is not the default code object version emitted by this "
"version of LLVM. For a description of the predefined symbols available with "
"the default configuration (Code Object V3) see :ref:`amdgpu-amdhsa-assembler-"
"predefined-symbols-v3`."
msgstr ""

#: ../../../AMDGPUUsage.rst:7286 ../../../AMDGPUUsage.rst:7459
msgid ""
"The AMDGPU assembler defines and updates some symbols automatically. These "
"symbols do not affect code generation."
msgstr ""

#: ../../../AMDGPUUsage.rst:7290
msgid ".option.machine_version_major"
msgstr ""

#: ../../../AMDGPUUsage.rst:7292 ../../../AMDGPUUsage.rst:7465
msgid ""
"Set to the GFX major generation number of the target being assembled for. "
"For example, when assembling for a \"GFX9\" target this will be set to the "
"integer value \"9\". The possible GFX major generation numbers are presented "
"in :ref:`amdgpu-processors`."
msgstr ""

#: ../../../AMDGPUUsage.rst:7298
msgid ".option.machine_version_minor"
msgstr ""

#: ../../../AMDGPUUsage.rst:7300 ../../../AMDGPUUsage.rst:7473
msgid ""
"Set to the GFX minor generation number of the target being assembled for. "
"For example, when assembling for a \"GFX810\" target this will be set to the "
"integer value \"1\". The possible GFX minor generation numbers are presented "
"in :ref:`amdgpu-processors`."
msgstr ""

#: ../../../AMDGPUUsage.rst:7306
msgid ".option.machine_version_stepping"
msgstr ""

#: ../../../AMDGPUUsage.rst:7308 ../../../AMDGPUUsage.rst:7481
msgid ""
"Set to the GFX stepping generation number of the target being assembled for. "
"For example, when assembling for a \"GFX704\" target this will be set to the "
"integer value \"4\". The possible GFX stepping generation numbers are "
"presented in :ref:`amdgpu-processors`."
msgstr ""

#: ../../../AMDGPUUsage.rst:7314
msgid ".kernel.vgpr_count"
msgstr ""

#: ../../../AMDGPUUsage.rst:7316
msgid ""
"Set to zero each time a :ref:`amdgpu-amdhsa-assembler-directive-"
"amdgpu_hsa_kernel` directive is encountered. At each instruction, if the "
"current value of this symbol is less than or equal to the maximum VPGR "
"number explicitly referenced within that instruction then the symbol value "
"is updated to equal that VGPR number plus one."
msgstr ""

#: ../../../AMDGPUUsage.rst:7324
msgid ".kernel.sgpr_count"
msgstr ""

#: ../../../AMDGPUUsage.rst:7326
msgid ""
"Set to zero each time a :ref:`amdgpu-amdhsa-assembler-directive-"
"amdgpu_hsa_kernel` directive is encountered. At each instruction, if the "
"current value of this symbol is less than or equal to the maximum VPGR "
"number explicitly referenced within that instruction then the symbol value "
"is updated to equal that SGPR number plus one."
msgstr ""

#: ../../../AMDGPUUsage.rst:7336
msgid "Code Object V2 Directives (-mattr=-code-object-v3)"
msgstr ""

#: ../../../AMDGPUUsage.rst:7338
msgid ""
"Code Object V2 is not the default code object version emitted by this "
"version of LLVM. For a description of the directives supported with the "
"default configuration (Code Object V3) see :ref:`amdgpu-amdhsa-assembler-"
"directives-v3`."
msgstr ""

#: ../../../AMDGPUUsage.rst:7343
msgid ""
"AMDGPU ABI defines auxiliary data in output code object. In assembly source, "
"one can specify them with assembler directives."
msgstr ""

#: ../../../AMDGPUUsage.rst:7347
msgid ".hsa_code_object_version major, minor"
msgstr ""

#: ../../../AMDGPUUsage.rst:7349
msgid ""
"*major* and *minor* are integers that specify the version of the HSA code "
"object that will be generated by the assembler."
msgstr ""

#: ../../../AMDGPUUsage.rst:7353
msgid ".hsa_code_object_isa [major, minor, stepping, vendor, arch]"
msgstr ""

#: ../../../AMDGPUUsage.rst:7356
msgid ""
"*major*, *minor*, and *stepping* are all integers that describe the "
"instruction set architecture (ISA) version of the assembly program."
msgstr ""

#: ../../../AMDGPUUsage.rst:7359
msgid ""
"*vendor* and *arch* are quoted strings. *vendor* should always be equal to "
"\"AMD\" and *arch* should always be equal to \"AMDGPU\"."
msgstr ""

#: ../../../AMDGPUUsage.rst:7362
msgid ""
"By default, the assembler will derive the ISA version, *vendor*, and *arch* "
"from the value of the -mcpu option that is passed to the assembler."
msgstr ""

#: ../../../AMDGPUUsage.rst:7368
msgid ".amdgpu_hsa_kernel (name)"
msgstr ""

#: ../../../AMDGPUUsage.rst:7370
msgid ""
"This directives specifies that the symbol with given name is a kernel entry "
"point (label) and the object should contain corresponding symbol of type "
"STT_AMDGPU_HSA_KERNEL."
msgstr ""

#: ../../../AMDGPUUsage.rst:7375
msgid ".amd_kernel_code_t"
msgstr ""

#: ../../../AMDGPUUsage.rst:7377
msgid ""
"This directive marks the beginning of a list of key / value pairs that are "
"used to specify the amd_kernel_code_t object that will be emitted by the "
"assembler. The list must be terminated by the *.end_amd_kernel_code_t* "
"directive. For any amd_kernel_code_t values that are unspecified a default "
"value will be used. The default value for all keys is 0, with the following "
"exceptions:"
msgstr ""

#: ../../../AMDGPUUsage.rst:7383
msgid "*amd_code_version_major* defaults to 1."
msgstr ""

#: ../../../AMDGPUUsage.rst:7384
msgid "*amd_kernel_code_version_minor* defaults to 2."
msgstr ""

#: ../../../AMDGPUUsage.rst:7385
msgid "*amd_machine_kind* defaults to 1."
msgstr ""

#: ../../../AMDGPUUsage.rst:7386
msgid ""
"*amd_machine_version_major*, *machine_version_minor*, and "
"*amd_machine_version_stepping* are derived from the value of the -mcpu "
"option that is passed to the assembler."
msgstr ""

#: ../../../AMDGPUUsage.rst:7389
msgid "*kernel_code_entry_byte_offset* defaults to 256."
msgstr ""

#: ../../../AMDGPUUsage.rst:7390
msgid ""
"*wavefront_size* defaults 6 for all targets before GFX10. For GFX10 onwards "
"defaults to 6 if target feature ``wavefrontsize64`` is enabled, otherwise 5. "
"Note that wavefront size is specified as a power of two, so a value of **n** "
"means a size of 2^ **n**."
msgstr ""

#: ../../../AMDGPUUsage.rst:7394
msgid "*call_convention* defaults to -1."
msgstr ""

#: ../../../AMDGPUUsage.rst:7395
msgid ""
"*kernarg_segment_alignment*, *group_segment_alignment*, and "
"*private_segment_alignment* default to 4. Note that alignments are specified "
"as a power of 2, so a value of **n** means an alignment of 2^ **n**."
msgstr ""

#: ../../../AMDGPUUsage.rst:7398
msgid ""
"*enable_wgp_mode* defaults to 1 if target feature ``cumode`` is disabled for "
"GFX10 onwards."
msgstr ""

#: ../../../AMDGPUUsage.rst:7400
msgid "*enable_mem_ordered* defaults to 1 for GFX10 onwards."
msgstr ""

#: ../../../AMDGPUUsage.rst:7402
msgid ""
"The *.amd_kernel_code_t* directive must be placed immediately after the "
"function label and before any instructions."
msgstr ""

#: ../../../AMDGPUUsage.rst:7405
msgid ""
"For a full list of amd_kernel_code_t keys, refer to AMDGPU ABI document, "
"comments in lib/Target/AMDGPU/AmdKernelCodeT.h and test/CodeGen/AMDGPU/hsa.s."
msgstr ""

#: ../../../AMDGPUUsage.rst:7411
msgid "Code Object V2 Example Source Code (-mattr=-code-object-v3)"
msgstr ""

#: ../../../AMDGPUUsage.rst:7413
msgid ""
"Code Object V2 is not the default code object version emitted by this "
"version of LLVM. For a description of the directives supported with the "
"default configuration (Code Object V3) see :ref:`amdgpu-amdhsa-assembler-"
"example-v3`."
msgstr ""

#: ../../../AMDGPUUsage.rst:7418 ../../../AMDGPUUsage.rst:7676
msgid ""
"Here is an example of a minimal assembly source file, defining one HSA "
"kernel:"
msgstr ""

#: ../../../AMDGPUUsage.rst:7457
msgid "Code Object V3 Predefined Symbols (-mattr=+code-object-v3)"
msgstr ""

#: ../../../AMDGPUUsage.rst:7463
msgid ".amdgcn.gfx_generation_number"
msgstr ""

#: ../../../AMDGPUUsage.rst:7471
msgid ".amdgcn.gfx_generation_minor"
msgstr ""

#: ../../../AMDGPUUsage.rst:7479
msgid ".amdgcn.gfx_generation_stepping"
msgstr ""

#: ../../../AMDGPUUsage.rst:7489
msgid ".amdgcn.next_free_vgpr"
msgstr ""

#: ../../../AMDGPUUsage.rst:7491
msgid ""
"Set to zero before assembly begins. At each instruction, if the current "
"value of this symbol is less than or equal to the maximum VGPR number "
"explicitly referenced within that instruction then the symbol value is "
"updated to equal that VGPR number plus one."
msgstr ""

#: ../../../AMDGPUUsage.rst:7496
msgid ""
"May be used to set the `.amdhsa_next_free_vpgr` directive in :ref:`amdhsa-"
"kernel-directives-table`."
msgstr ""

#: ../../../AMDGPUUsage.rst:7499 ../../../AMDGPUUsage.rst:7514
msgid ""
"May be set at any time, e.g. manually set to zero at the start of each "
"kernel."
msgstr ""

#: ../../../AMDGPUUsage.rst:7504
msgid ".amdgcn.next_free_sgpr"
msgstr ""

#: ../../../AMDGPUUsage.rst:7506
msgid ""
"Set to zero before assembly begins. At each instruction, if the current "
"value of this symbol is less than or equal the maximum SGPR number "
"explicitly referenced within that instruction then the symbol value is "
"updated to equal that SGPR number plus one."
msgstr ""

#: ../../../AMDGPUUsage.rst:7511
msgid ""
"May be used to set the `.amdhsa_next_free_spgr` directive in :ref:`amdhsa-"
"kernel-directives-table`."
msgstr ""

#: ../../../AMDGPUUsage.rst:7519
msgid "Code Object V3 Directives (-mattr=+code-object-v3)"
msgstr ""

#: ../../../AMDGPUUsage.rst:7521
msgid ""
"Directives which begin with ``.amdgcn`` are valid for all ``amdgcn`` "
"architecture processors, and are not OS-specific. Directives which begin "
"with ``.amdhsa`` are specific to ``amdgcn`` architecture processors when the "
"``amdhsa`` OS is specified. See :ref:`amdgpu-target-triples` and :ref:"
"`amdgpu-processors`."
msgstr ""

#: ../../../AMDGPUUsage.rst:7528
msgid ".amdgcn_target <target>"
msgstr ""

#: ../../../AMDGPUUsage.rst:7530
msgid ""
"Optional directive which declares the target supported by the containing "
"assembler source file. Valid values are described in :ref:`amdgpu-amdhsa-"
"code-object-target-identification`. Used by the assembler to validate "
"command-line options such as ``-triple``, ``-mcpu``, and those which specify "
"target features."
msgstr ""

#: ../../../AMDGPUUsage.rst:7537
msgid ".amdhsa_kernel <name>"
msgstr ""

#: ../../../AMDGPUUsage.rst:7539
msgid ""
"Creates a correctly aligned AMDHSA kernel descriptor and a symbol, ``<name>."
"kd``, in the current location of the current section. Only valid when the OS "
"is ``amdhsa``. ``<name>`` must be a symbol that labels the first instruction "
"to execute, and does not need to be previously defined."
msgstr ""

#: ../../../AMDGPUUsage.rst:7544
msgid ""
"Marks the beginning of a list of directives used to generate the bytes of a "
"kernel descriptor, as described in :ref:`amdgpu-amdhsa-kernel-descriptor`. "
"Directives which may appear in this list are described in :ref:`amdhsa-"
"kernel-directives-table`. Directives may appear in any order, must be valid "
"for the target being assembled for, and cannot be repeated. Directives "
"support the range of values specified by the field they reference in :ref:"
"`amdgpu-amdhsa-kernel-descriptor`. If a directive is not specified, it is "
"assumed to have its default value, unless it is marked as \"Required\", in "
"which case it is an error to omit the directive. This list of directives is "
"terminated by an ``.end_amdhsa_kernel`` directive."
msgstr ""

#: ../../../AMDGPUUsage.rst:7555
msgid "AMDHSA Kernel Assembler Directives"
msgstr ""

#: ../../../AMDGPUUsage.rst:7559
msgid "Directive"
msgstr ""

#: ../../../AMDGPUUsage.rst:7559
msgid "Default"
msgstr ""

#: ../../../AMDGPUUsage.rst:7559
msgid "Supported On"
msgstr ""

#: ../../../AMDGPUUsage.rst:7561
msgid "``.amdhsa_group_segment_fixed_size``"
msgstr ""

#: ../../../AMDGPUUsage.rst:7561 ../../../AMDGPUUsage.rst:7563
#: ../../../AMDGPUUsage.rst:7565 ../../../AMDGPUUsage.rst:7567
#: ../../../AMDGPUUsage.rst:7569 ../../../AMDGPUUsage.rst:7571
#: ../../../AMDGPUUsage.rst:7573 ../../../AMDGPUUsage.rst:7575
#: ../../../AMDGPUUsage.rst:7577 ../../../AMDGPUUsage.rst:7583
#: ../../../AMDGPUUsage.rst:7585 ../../../AMDGPUUsage.rst:7587
#: ../../../AMDGPUUsage.rst:7589 ../../../AMDGPUUsage.rst:7591
#: ../../../AMDGPUUsage.rst:7593 ../../../AMDGPUUsage.rst:7597
#: ../../../AMDGPUUsage.rst:7600 ../../../AMDGPUUsage.rst:7603
#: ../../../AMDGPUUsage.rst:7614 ../../../AMDGPUUsage.rst:7618
#: ../../../AMDGPUUsage.rst:7622 ../../../AMDGPUUsage.rst:7626
#: ../../../AMDGPUUsage.rst:7630 ../../../AMDGPUUsage.rst:7632
#: ../../../AMDGPUUsage.rst:7644 ../../../AMDGPUUsage.rst:7646
#: ../../../AMDGPUUsage.rst:7648 ../../../AMDGPUUsage.rst:7650
#: ../../../AMDGPUUsage.rst:7652 ../../../AMDGPUUsage.rst:7654
#: ../../../AMDGPUUsage.rst:7656
msgid "GFX6-GFX10"
msgstr ""

#: ../../../AMDGPUUsage.rst:7561
msgid ""
"Controls GROUP_SEGMENT_FIXED_SIZE in :ref:`amdgpu-amdhsa-kernel-descriptor-"
"gfx6-gfx10-table`."
msgstr ""

#: ../../../AMDGPUUsage.rst:7563
msgid "``.amdhsa_private_segment_fixed_size``"
msgstr ""

#: ../../../AMDGPUUsage.rst:7563
msgid ""
"Controls PRIVATE_SEGMENT_FIXED_SIZE in :ref:`amdgpu-amdhsa-kernel-descriptor-"
"gfx6-gfx10-table`."
msgstr ""

#: ../../../AMDGPUUsage.rst:7565
msgid "``.amdhsa_user_sgpr_private_segment_buffer``"
msgstr ""

#: ../../../AMDGPUUsage.rst:7565
msgid ""
"Controls ENABLE_SGPR_PRIVATE_SEGMENT_BUFFER in :ref:`amdgpu-amdhsa-kernel-"
"descriptor-gfx6-gfx10-table`."
msgstr ""

#: ../../../AMDGPUUsage.rst:7567
msgid "``.amdhsa_user_sgpr_dispatch_ptr``"
msgstr ""

#: ../../../AMDGPUUsage.rst:7567
msgid ""
"Controls ENABLE_SGPR_DISPATCH_PTR in :ref:`amdgpu-amdhsa-kernel-descriptor-"
"gfx6-gfx10-table`."
msgstr ""

#: ../../../AMDGPUUsage.rst:7569
msgid "``.amdhsa_user_sgpr_queue_ptr``"
msgstr ""

#: ../../../AMDGPUUsage.rst:7569
msgid ""
"Controls ENABLE_SGPR_QUEUE_PTR in :ref:`amdgpu-amdhsa-kernel-descriptor-gfx6-"
"gfx10-table`."
msgstr ""

#: ../../../AMDGPUUsage.rst:7571
msgid "``.amdhsa_user_sgpr_kernarg_segment_ptr``"
msgstr ""

#: ../../../AMDGPUUsage.rst:7571
msgid ""
"Controls ENABLE_SGPR_KERNARG_SEGMENT_PTR in :ref:`amdgpu-amdhsa-kernel-"
"descriptor-gfx6-gfx10-table`."
msgstr ""

#: ../../../AMDGPUUsage.rst:7573
msgid "``.amdhsa_user_sgpr_dispatch_id``"
msgstr ""

#: ../../../AMDGPUUsage.rst:7573
msgid ""
"Controls ENABLE_SGPR_DISPATCH_ID in :ref:`amdgpu-amdhsa-kernel-descriptor-"
"gfx6-gfx10-table`."
msgstr ""

#: ../../../AMDGPUUsage.rst:7575
msgid "``.amdhsa_user_sgpr_flat_scratch_init``"
msgstr ""

#: ../../../AMDGPUUsage.rst:7575
msgid ""
"Controls ENABLE_SGPR_FLAT_SCRATCH_INIT in :ref:`amdgpu-amdhsa-kernel-"
"descriptor-gfx6-gfx10-table`."
msgstr ""

#: ../../../AMDGPUUsage.rst:7577
msgid "``.amdhsa_user_sgpr_private_segment_size``"
msgstr ""

#: ../../../AMDGPUUsage.rst:7577
msgid ""
"Controls ENABLE_SGPR_PRIVATE_SEGMENT_SIZE in :ref:`amdgpu-amdhsa-kernel-"
"descriptor-gfx6-gfx10-table`."
msgstr ""

#: ../../../AMDGPUUsage.rst:7579
msgid "``.amdhsa_wavefront_size32``"
msgstr ""

#: ../../../AMDGPUUsage.rst:7579
msgid "Target Feature Specific (-wavefrontsize64)"
msgstr ""

#: ../../../AMDGPUUsage.rst:7579
msgid ""
"Controls ENABLE_WAVEFRONT_SIZE32 in :ref:`amdgpu-amdhsa-kernel-descriptor-"
"gfx6-gfx10-table`."
msgstr ""

#: ../../../AMDGPUUsage.rst:7583
msgid "``.amdhsa_system_sgpr_private_segment_wavefront_offset``"
msgstr ""

#: ../../../AMDGPUUsage.rst:7583
msgid ""
"Controls ENABLE_SGPR_PRIVATE_SEGMENT_WAVEFRONT_OFFSET in :ref:`amdgpu-amdhsa-"
"compute_pgm_rsrc2-gfx6-gfx10-table`."
msgstr ""

#: ../../../AMDGPUUsage.rst:7585
msgid "``.amdhsa_system_sgpr_workgroup_id_x``"
msgstr ""

#: ../../../AMDGPUUsage.rst:7585
msgid ""
"Controls ENABLE_SGPR_WORKGROUP_ID_X in :ref:`amdgpu-amdhsa-compute_pgm_rsrc2-"
"gfx6-gfx10-table`."
msgstr ""

#: ../../../AMDGPUUsage.rst:7587
msgid "``.amdhsa_system_sgpr_workgroup_id_y``"
msgstr ""

#: ../../../AMDGPUUsage.rst:7587
msgid ""
"Controls ENABLE_SGPR_WORKGROUP_ID_Y in :ref:`amdgpu-amdhsa-compute_pgm_rsrc2-"
"gfx6-gfx10-table`."
msgstr ""

#: ../../../AMDGPUUsage.rst:7589
msgid "``.amdhsa_system_sgpr_workgroup_id_z``"
msgstr ""

#: ../../../AMDGPUUsage.rst:7589
msgid ""
"Controls ENABLE_SGPR_WORKGROUP_ID_Z in :ref:`amdgpu-amdhsa-compute_pgm_rsrc2-"
"gfx6-gfx10-table`."
msgstr ""

#: ../../../AMDGPUUsage.rst:7591
msgid "``.amdhsa_system_sgpr_workgroup_info``"
msgstr ""

#: ../../../AMDGPUUsage.rst:7591
msgid ""
"Controls ENABLE_SGPR_WORKGROUP_INFO in :ref:`amdgpu-amdhsa-compute_pgm_rsrc2-"
"gfx6-gfx10-table`."
msgstr ""

#: ../../../AMDGPUUsage.rst:7593
msgid "``.amdhsa_system_vgpr_workitem_id``"
msgstr ""

#: ../../../AMDGPUUsage.rst:7593
msgid ""
"Controls ENABLE_VGPR_WORKITEM_ID in :ref:`amdgpu-amdhsa-compute_pgm_rsrc2-"
"gfx6-gfx10-table`. Possible values are defined in :ref:`amdgpu-amdhsa-system-"
"vgpr-work-item-id-enumeration-values-table`."
msgstr ""

#: ../../../AMDGPUUsage.rst:7597
msgid "``.amdhsa_next_free_vgpr``"
msgstr ""

#: ../../../AMDGPUUsage.rst:7597
msgid ""
"Maximum VGPR number explicitly referenced, plus one. Used to calculate "
"GRANULATED_WORKITEM_VGPR_COUNT in :ref:`amdgpu-amdhsa-compute_pgm_rsrc1-gfx6-"
"gfx10-table`."
msgstr ""

#: ../../../AMDGPUUsage.rst:7600
msgid "``.amdhsa_next_free_sgpr``"
msgstr ""

#: ../../../AMDGPUUsage.rst:7600
msgid ""
"Maximum SGPR number explicitly referenced, plus one. Used to calculate "
"GRANULATED_WAVEFRONT_SGPR_COUNT in :ref:`amdgpu-amdhsa-compute_pgm_rsrc1-"
"gfx6-gfx10-table`."
msgstr ""

#: ../../../AMDGPUUsage.rst:7603
msgid "``.amdhsa_reserve_vcc``"
msgstr ""

#: ../../../AMDGPUUsage.rst:7603
msgid ""
"Whether the kernel may use the special VCC SGPR. Used to calculate "
"GRANULATED_WAVEFRONT_SGPR_COUNT in :ref:`amdgpu-amdhsa-compute_pgm_rsrc1-"
"gfx6-gfx10-table`."
msgstr ""

#: ../../../AMDGPUUsage.rst:7606
msgid "``.amdhsa_reserve_flat_scratch``"
msgstr ""

#: ../../../AMDGPUUsage.rst:7606
msgid "GFX7-GFX10"
msgstr ""

#: ../../../AMDGPUUsage.rst:7606
msgid ""
"Whether the kernel may use flat instructions to access scratch memory. Used "
"to calculate GRANULATED_WAVEFRONT_SGPR_COUNT in :ref:`amdgpu-amdhsa-"
"compute_pgm_rsrc1-gfx6-gfx10-table`."
msgstr ""

#: ../../../AMDGPUUsage.rst:7610
msgid "``.amdhsa_reserve_xnack_mask``"
msgstr ""

#: ../../../AMDGPUUsage.rst:7610
msgid "Target Feature Specific (+xnack)"
msgstr ""

#: ../../../AMDGPUUsage.rst:7610
msgid "GFX8-GFX10"
msgstr ""

#: ../../../AMDGPUUsage.rst:7610
msgid ""
"Whether the kernel may trigger XNACK replay. Used to calculate "
"GRANULATED_WAVEFRONT_SGPR_COUNT in :ref:`amdgpu-amdhsa-compute_pgm_rsrc1-"
"gfx6-gfx10-table`."
msgstr ""

#: ../../../AMDGPUUsage.rst:7614
msgid "``.amdhsa_float_round_mode_32``"
msgstr ""

#: ../../../AMDGPUUsage.rst:7614
msgid ""
"Controls FLOAT_ROUND_MODE_32 in :ref:`amdgpu-amdhsa-compute_pgm_rsrc1-gfx6-"
"gfx10-table`. Possible values are defined in :ref:`amdgpu-amdhsa-floating-"
"point-rounding-mode-enumeration-values-table`."
msgstr ""

#: ../../../AMDGPUUsage.rst:7618
msgid "``.amdhsa_float_round_mode_16_64``"
msgstr ""

#: ../../../AMDGPUUsage.rst:7618
msgid ""
"Controls FLOAT_ROUND_MODE_16_64 in :ref:`amdgpu-amdhsa-compute_pgm_rsrc1-"
"gfx6-gfx10-table`. Possible values are defined in :ref:`amdgpu-amdhsa-"
"floating-point-rounding-mode-enumeration-values-table`."
msgstr ""

#: ../../../AMDGPUUsage.rst:7622
msgid "``.amdhsa_float_denorm_mode_32``"
msgstr ""

#: ../../../AMDGPUUsage.rst:7622
msgid ""
"Controls FLOAT_DENORM_MODE_32 in :ref:`amdgpu-amdhsa-compute_pgm_rsrc1-gfx6-"
"gfx10-table`. Possible values are defined in :ref:`amdgpu-amdhsa-floating-"
"point-denorm-mode-enumeration-values-table`."
msgstr ""

#: ../../../AMDGPUUsage.rst:7626
msgid "``.amdhsa_float_denorm_mode_16_64``"
msgstr ""

#: ../../../AMDGPUUsage.rst:7626
msgid ""
"Controls FLOAT_DENORM_MODE_16_64 in :ref:`amdgpu-amdhsa-compute_pgm_rsrc1-"
"gfx6-gfx10-table`. Possible values are defined in :ref:`amdgpu-amdhsa-"
"floating-point-denorm-mode-enumeration-values-table`."
msgstr ""

#: ../../../AMDGPUUsage.rst:7630
msgid "``.amdhsa_dx10_clamp``"
msgstr ""

#: ../../../AMDGPUUsage.rst:7630
msgid ""
"Controls ENABLE_DX10_CLAMP in :ref:`amdgpu-amdhsa-compute_pgm_rsrc1-gfx6-"
"gfx10-table`."
msgstr ""

#: ../../../AMDGPUUsage.rst:7632
msgid "``.amdhsa_ieee_mode``"
msgstr ""

#: ../../../AMDGPUUsage.rst:7632
msgid ""
"Controls ENABLE_IEEE_MODE in :ref:`amdgpu-amdhsa-compute_pgm_rsrc1-gfx6-"
"gfx10-table`."
msgstr ""

#: ../../../AMDGPUUsage.rst:7634
msgid "``.amdhsa_fp16_overflow``"
msgstr ""

#: ../../../AMDGPUUsage.rst:7634
msgid ""
"Controls FP16_OVFL in :ref:`amdgpu-amdhsa-compute_pgm_rsrc1-gfx6-gfx10-"
"table`."
msgstr ""

#: ../../../AMDGPUUsage.rst:7636
msgid "``.amdhsa_workgroup_processor_mode``"
msgstr ""

#: ../../../AMDGPUUsage.rst:7636
msgid "Target Feature Specific (-cumode)"
msgstr ""

#: ../../../AMDGPUUsage.rst:7636
msgid ""
"Controls ENABLE_WGP_MODE in :ref:`amdgpu-amdhsa-kernel-descriptor-gfx6-gfx10-"
"table`."
msgstr ""

#: ../../../AMDGPUUsage.rst:7640
msgid "``.amdhsa_memory_ordered``"
msgstr ""

#: ../../../AMDGPUUsage.rst:7640
msgid ""
"Controls MEM_ORDERED in :ref:`amdgpu-amdhsa-compute_pgm_rsrc1-gfx6-gfx10-"
"table`."
msgstr ""

#: ../../../AMDGPUUsage.rst:7642
msgid "``.amdhsa_forward_progress``"
msgstr ""

#: ../../../AMDGPUUsage.rst:7642
msgid ""
"Controls FWD_PROGRESS in :ref:`amdgpu-amdhsa-compute_pgm_rsrc1-gfx6-gfx10-"
"table`."
msgstr ""

#: ../../../AMDGPUUsage.rst:7644
msgid "``.amdhsa_exception_fp_ieee_invalid_op``"
msgstr ""

#: ../../../AMDGPUUsage.rst:7644
msgid ""
"Controls ENABLE_EXCEPTION_IEEE_754_FP_INVALID_OPERATION in :ref:`amdgpu-"
"amdhsa-compute_pgm_rsrc2-gfx6-gfx10-table`."
msgstr ""

#: ../../../AMDGPUUsage.rst:7646
msgid "``.amdhsa_exception_fp_denorm_src``"
msgstr ""

#: ../../../AMDGPUUsage.rst:7646
msgid ""
"Controls ENABLE_EXCEPTION_FP_DENORMAL_SOURCE in :ref:`amdgpu-amdhsa-"
"compute_pgm_rsrc2-gfx6-gfx10-table`."
msgstr ""

#: ../../../AMDGPUUsage.rst:7648
msgid "``.amdhsa_exception_fp_ieee_div_zero``"
msgstr ""

#: ../../../AMDGPUUsage.rst:7648
msgid ""
"Controls ENABLE_EXCEPTION_IEEE_754_FP_DIVISION_BY_ZERO in :ref:`amdgpu-"
"amdhsa-compute_pgm_rsrc2-gfx6-gfx10-table`."
msgstr ""

#: ../../../AMDGPUUsage.rst:7650
msgid "``.amdhsa_exception_fp_ieee_overflow``"
msgstr ""

#: ../../../AMDGPUUsage.rst:7650
msgid ""
"Controls ENABLE_EXCEPTION_IEEE_754_FP_OVERFLOW in :ref:`amdgpu-amdhsa-"
"compute_pgm_rsrc2-gfx6-gfx10-table`."
msgstr ""

#: ../../../AMDGPUUsage.rst:7652
msgid "``.amdhsa_exception_fp_ieee_underflow``"
msgstr ""

#: ../../../AMDGPUUsage.rst:7652
msgid ""
"Controls ENABLE_EXCEPTION_IEEE_754_FP_UNDERFLOW in :ref:`amdgpu-amdhsa-"
"compute_pgm_rsrc2-gfx6-gfx10-table`."
msgstr ""

#: ../../../AMDGPUUsage.rst:7654
msgid "``.amdhsa_exception_fp_ieee_inexact``"
msgstr ""

#: ../../../AMDGPUUsage.rst:7654
msgid ""
"Controls ENABLE_EXCEPTION_IEEE_754_FP_INEXACT in :ref:`amdgpu-amdhsa-"
"compute_pgm_rsrc2-gfx6-gfx10-table`."
msgstr ""

#: ../../../AMDGPUUsage.rst:7656
msgid "``.amdhsa_exception_int_div_zero``"
msgstr ""

#: ../../../AMDGPUUsage.rst:7656
msgid ""
"Controls ENABLE_EXCEPTION_INT_DIVIDE_BY_ZERO in :ref:`amdgpu-amdhsa-"
"compute_pgm_rsrc2-gfx6-gfx10-table`."
msgstr ""

#: ../../../AMDGPUUsage.rst:7661
msgid ".amdgpu_metadata"
msgstr ""

#: ../../../AMDGPUUsage.rst:7663
msgid ""
"Optional directive which declares the contents of the ``NT_AMDGPU_METADATA`` "
"note record (see :ref:`amdgpu-elf-note-records-table-v3`)."
msgstr ""

#: ../../../AMDGPUUsage.rst:7666
msgid ""
"The contents must be in the [YAML]_ markup format, with the same structure "
"and semantics described in :ref:`amdgpu-amdhsa-code-object-metadata-v3`."
msgstr ""

#: ../../../AMDGPUUsage.rst:7669
msgid "This directive is terminated by an ``.end_amdgpu_metadata`` directive."
msgstr ""

#: ../../../AMDGPUUsage.rst:7674
msgid "Code Object V3 Example Source Code (-mattr=+code-object-v3)"
msgstr ""

#: ../../../AMDGPUUsage.rst:7725
msgid ""
"If an assembly source file contains multiple kernels and/or functions, the :"
"ref:`amdgpu-amdhsa-assembler-symbol-next_free_vgpr` and :ref:`amdgpu-amdhsa-"
"assembler-symbol-next_free_sgpr` symbols may be reset using the ``.set "
"<symbol>, <expression>`` directive. For example, in the case of two kernels, "
"where ``function1`` is only called from ``kernel1`` it is sufficient to "
"group the function with the kernel that calls it and reset the symbols "
"between the two connected components:"
msgstr ""

#: ../../../AMDGPUUsage.rst:7795
msgid ""
"These symbols cannot identify connected components in order to automatically "
"track the usage for each kernel. However, in some cases careful organization "
"of the kernels and functions in the source file means there is minimal "
"additional effort required to accurately calculate GPR usage."
msgstr ""

#: ../../../AMDGPUUsage.rst:7801
msgid "Additional Documentation"
msgstr ""

#: ../../../AMDGPUUsage.rst:7803
msgid ""
"`AMD Southern Islands Series ISA <http://developer.amd.com/wordpress/"
"media/2012/12/AMD_Southern_Islands_Instruction_Set_Architecture.pdf>`__"
msgstr ""

#: ../../../AMDGPUUsage.rst:7804
msgid ""
"`AMD Sea Islands Series ISA <http://developer.amd.com/wordpress/"
"media/2013/07/AMD_Sea_Islands_Instruction_Set_Architecture.pdf>`_"
msgstr ""

#: ../../../AMDGPUUsage.rst:7805
msgid ""
"`AMD GCN3 Instruction Set Architecture <http://amd-dev.wpengine.netdna-cdn."
"com/wordpress/media/2013/12/AMD_GCN3_Instruction_Set_Architecture_rev1.1."
"pdf>`__"
msgstr ""

#: ../../../AMDGPUUsage.rst:7806
msgid ""
"`AMD \"Vega\" Instruction Set Architecture <http://developer.amd.com/"
"wordpress/media/2013/12/Vega_Shader_ISA_28July2017.pdf>`__"
msgstr ""

#: ../../../AMDGPUUsage.rst:7807
msgid ""
"`AMD \"RDNA 1.0\" Instruction Set Architecture <https://gpuopen.com/wp-"
"content/uploads/2019/08/RDNA_Shader_ISA_5August2019.pdf>`__"
msgstr ""

#: ../../../AMDGPUUsage.rst:7808
msgid ""
"`AMD R6xx shader ISA <http://developer.amd.com/wordpress/media/2012/10/"
"R600_Instruction_Set_Architecture.pdf>`__"
msgstr ""

#: ../../../AMDGPUUsage.rst:7809
msgid ""
"`AMD R7xx shader ISA <http://developer.amd.com/wordpress/media/2012/10/R700-"
"Family_Instruction_Set_Architecture.pdf>`__"
msgstr ""

#: ../../../AMDGPUUsage.rst:7810
msgid ""
"`AMD Evergreen shader ISA <http://developer.amd.com/wordpress/media/2012/10/"
"AMD_Evergreen-Family_Instruction_Set_Architecture.pdf>`__"
msgstr ""

#: ../../../AMDGPUUsage.rst:7811
msgid ""
"`AMD Cayman/Trinity shader ISA <http://developer.amd.com/wordpress/"
"media/2012/10/AMD_HD_6900_Series_Instruction_Set_Architecture.pdf>`__"
msgstr ""

#: ../../../AMDGPUUsage.rst:7812
msgid "`AMD ROCm Platform <https://rocm-documentation.readthedocs.io>`__"
msgstr ""

#: ../../../AMDGPUUsage.rst:7813
msgid "`ROCm github <http://github.com/RadeonOpenCompute>`__"
msgstr ""

#: ../../../AMDGPUUsage.rst:7814
msgid ""
"`Attributes in Clang <https://clang.llvm.org/docs/AttributeReference.html>`__"
msgstr ""

#: ../../../AMDGPUUsage.rst:7815
msgid "`DWARF Debugging Information Format <http://dwarfstd.org/>`__"
msgstr ""

#: ../../../AMDGPUUsage.rst:7816
msgid ""
"`Executable and Linkable Format (ELF) <http://www.sco.com/developers/gabi/"
">`__"
msgstr ""

#: ../../../AMDGPUUsage.rst:7817
msgid ""
"`Heterogeneous-race-free Memory Models <http://benedictgaster.org/wp-content/"
"uploads/2014/01/asplos269-FINAL.pdf>`__"
msgstr ""

#: ../../../AMDGPUUsage.rst:7818
msgid ""
"`Heterogeneous System Architecture (HSA) Foundation <http://www."
"hsafoundation.com/>`__"
msgstr ""

#: ../../../AMDGPUUsage.rst:7819
msgid "`Message Pack <http://www.msgpack.org/>`__"
msgstr ""

#: ../../../AMDGPUUsage.rst:7820
msgid ""
"`The OpenCL Specification Version 2.0 <http://www.khronos.org/registry/cl/"
"specs/opencl-2.0.pdf>`__"
msgstr ""

#: ../../../AMDGPUUsage.rst:7821
msgid "`Semantic Versioning <https://semver.org/>`__"
msgstr ""

#: ../../../AMDGPUUsage.rst:7822
msgid ""
"`YAML Ain't Markup Language (YAML™) Version 1.2 <http://www.yaml.org/"
"spec/1.2/spec.html>`__"
msgstr ""
